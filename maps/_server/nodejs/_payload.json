[{"data":1,"prerenderedAt":316},["ShallowReactive",2],{"navigation":3,"/maps/_server/nodejs":158,"/maps/_server/nodejs-surround":308},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":302,"_id":303,"_source":304,"_file":305,"_stem":306,"_extension":307},"/maps/_server/nodejs","_server",false,true,"","NodeJS","NodeJS 是一个非阻塞 IO、事件驱动的服务端 JS 运行环境。",{"type":167,"children":168,"toc":295},"root",[169,177,184,189,195,200,206,211,217,223,228,234,239,245,250,256,262,267,281,286],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"简介",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"nodejs-是什么",[182],{"type":176,"value":183},"NodeJS 是什么？",{"type":170,"tag":185,"props":186,"children":187},"p",{},[188],{"type":176,"value":165},{"type":170,"tag":178,"props":190,"children":192},{"id":191},"非阻塞-io-是什么",[193],{"type":176,"value":194},"非阻塞 IO 是什么？",{"type":170,"tag":185,"props":196,"children":197},{},[198],{"type":176,"value":199},"非阻塞 IO 意味着在执行 IO 操作时，将耗时任务以异步的方式交给子线程处理，等完成之后再通过回调的方式继续执行后续代码。",{"type":170,"tag":178,"props":201,"children":203},{"id":202},"事件循环机制和浏览器中有什么不同",[204],{"type":176,"value":205},"事件循环机制和浏览器中有什么不同？",{"type":170,"tag":185,"props":207,"children":208},{},[209],{"type":176,"value":210},"TODO，类似但稍有区别。",{"type":170,"tag":171,"props":212,"children":214},{"id":213},"v8",[215],{"type":176,"value":216},"V8",{"type":170,"tag":178,"props":218,"children":220},{"id":219},"引擎的垃圾回收机制有了解吗",[221],{"type":176,"value":222},"引擎的垃圾回收机制有了解吗？",{"type":170,"tag":185,"props":224,"children":225},{},[226],{"type":176,"value":227},"V8 使用分代回收机制，将内存分为新生代和老生代空间，分别用不同的算法进行 GC。新生代空间每个周期都会触发 ScavengeGC，俗称小周期。如果两个周期内都没被清除的变量则转移到老生代内存中。老生代空间则使用标记清除算法（和标记紧缩算法）进行清理。",{"type":170,"tag":178,"props":229,"children":231},{"id":230},"新生代空间的-gc-过程是怎样的",[232],{"type":176,"value":233},"新生代空间的 GC 过程是怎样的？",{"type":170,"tag":185,"props":235,"children":236},{},[237],{"type":176,"value":238},"新生代空间通常只有 1-8 MB，被划分为两个等大的区域，出区和入区。新增变量放到入区中。一但入区满了，便把活跃对象复制到出区中，删除不活跃对象（紧缩过程）并交换出区入区，如此称为一个周期。如果活跃对象再两个周期内都没有被清除，则转移只老生代内存中。",{"type":170,"tag":178,"props":240,"children":242},{"id":241},"老生代空间的-gc-过程是怎样的",[243],{"type":176,"value":244},"老生代空间的 GC 过程是怎样的？",{"type":170,"tag":185,"props":246,"children":247},{},[248],{"type":176,"value":249},"老生代空间的 GC 分标记和清除（或紧缩）两个阶段。每次循环，标记算法会将一个对象从队列中取出，将它以及邻接对象标记。到了清除阶段，未被标记的对象都将被删除。如果清楚阶段额外执行紧缩过程，则会尝试将零散的对象移动成连续的整体，以解决内存碎片化问题。为了优化老生代空间 GC 的“全停顿”，V8 将老生代空间的标记过程拆分为了子步骤，这样就可以将标记算法穿插在其它任务过程中执行。",{"type":170,"tag":171,"props":251,"children":253},{"id":252},"api",[254],{"type":176,"value":255},"API",{"type":170,"tag":178,"props":257,"children":259},{"id":258},"nodevm-是什么",[260],{"type":176,"value":261},"node:vm 是什么？",{"type":170,"tag":185,"props":263,"children":264},{},[265],{"type":176,"value":266},"node:vm 模块允许在 V8 虚拟机上下文中编译和运行代码，上下文中的任何属性都被视为全局变量，对全局变量任何改动也反映到上下文对象中。但是 node:vm 不是一个安全机制，不应该使用它来运行不受信任的代码。",{"type":170,"tag":185,"props":268,"children":269},{},[270,272],{"type":176,"value":271},"见：",{"type":170,"tag":273,"props":274,"children":278},"a",{"href":275,"rel":276},"http://nodejs.cn/api/vm.html#vm_vm_executing_javascript",[277],"nofollow",[279],{"type":176,"value":280},"VM",{"type":170,"tag":171,"props":282,"children":284},{"id":283},"源码解析",[285],{"type":176,"value":283},{"type":170,"tag":185,"props":287,"children":288},{},[289],{"type":170,"tag":273,"props":290,"children":292},{"href":291},"/maps/_server/nodejs/source/require",[293],{"type":176,"value":294},"NodeJS | require",{"title":163,"searchDepth":296,"depth":296,"links":297},2,[298,299,300,301],{"id":173,"depth":296,"text":173},{"id":213,"depth":296,"text":216},{"id":252,"depth":296,"text":255},{"id":283,"depth":296,"text":283},"markdown","content:6.maps:_server:nodejs:index.md","content","6.maps/_server/nodejs/index.md","6.maps/_server/nodejs/index","md",[309,313],{"_path":310,"title":311,"description":312},"/maps/_seo/seo","搜索引擎优化","搜索引擎优化包含了对网站内容的基本元素的一系列改动，这些改动通常相互作用，提高用户体验以及增加网站在自然搜索结果中的排名。",{"_path":291,"title":314,"description":315},"NodeJS Require","NodeJS 模块导入的源码解析",1742808188426]