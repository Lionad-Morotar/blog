[{"data":1,"prerenderedAt":315},["ShallowReactive",2],{"navigation":3,"/maps/_fe-framework/micro-fe":158,"/maps/_fe-framework/micro-fe-surround":306},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":300,"_id":301,"_source":302,"_file":303,"_stem":304,"_extension":305},"/maps/_fe-framework/micro-fe","_fe-framework",false,true,"","微前端","微前端是一种架构风格，是一种将前端应用拆分成更小、更独立的部分，然后将这些部分组合在一起的技术方案。微前端的目标是将单体应用拆分成多个小型应用，每个小型应用都可以独立开发、独立部署。",{"type":167,"children":168,"toc":297},"root",[169,178,184,193,199,204,249,255,283],{"type":170,"tag":171,"props":172,"children":174},"element","h4",{"id":173},"微前端解决什么问题",[175],{"type":176,"value":177},"text","微前端解决什么问题？",{"type":170,"tag":179,"props":180,"children":181},"p",{},[182],{"type":176,"value":183},"主要应对一个单体应用在相对长的时间跨度下，由于参与人数、团队的增多和变迁，从一个普通应用演变为了巨石应用，随之带来的难以维护的问题。",{"type":170,"tag":179,"props":185,"children":186},{},[187],{"type":170,"tag":188,"props":189,"children":192},"img",{"alt":190,"src":191},"单体应用、前后端分离和微前端","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20221023230253.png",[],{"type":170,"tag":171,"props":194,"children":196},{"id":195},"微前端技术要点",[197],{"type":176,"value":198},"微前端技术要点？",{"type":170,"tag":179,"props":200,"children":201},{},[202],{"type":176,"value":203},"做到技术栈无关的同时提供以下技术能力支持：",{"type":170,"tag":205,"props":206,"children":207},"ul",{},[208,214,219,224,229,234,239,244],{"type":170,"tag":209,"props":210,"children":211},"li",{},[212],{"type":176,"value":213},"JS 沙箱：子应用全局变量、事件不互相影响",{"type":170,"tag":209,"props":215,"children":216},{},[217],{"type":176,"value":218},"CSS 隔离：子应用之间的样式不互相影响",{"type":170,"tag":209,"props":220,"children":221},{},[222],{"type":176,"value":223},"公共依赖加载：不同子应用都用到的资源怎么加载",{"type":170,"tag":209,"props":225,"children":226},{},[227],{"type":176,"value":228},"父子应用通讯：子应用如何调用父应用方法、父应用如何下发状态",{"type":170,"tag":209,"props":230,"children":231},{},[232],{"type":176,"value":233},"按需加载",{"type":170,"tag":209,"props":235,"children":236},{},[237],{"type":176,"value":238},"预加载",{"type":170,"tag":209,"props":240,"children":241},{},[242],{"type":176,"value":243},"子应用嵌套",{"type":170,"tag":209,"props":245,"children":246},{},[247],{"type":176,"value":248},"子应用并行",{"type":170,"tag":171,"props":250,"children":252},{"id":251},"微前端的方案选择",[253],{"type":176,"value":254},"微前端的方案选择？",{"type":170,"tag":205,"props":256,"children":257},{},[258,263,268,273,278],{"type":170,"tag":209,"props":259,"children":260},{},[261],{"type":176,"value":262},"基座方案：主应用中预先注册子应用，然后监听路由变化，加载匹配到的子应用资源。",{"type":170,"tag":209,"props":264,"children":265},{},[266],{"type":176,"value":267},"iframe：接入简单并且有完美的隔离效果，但是在共享资源如 URL、Cookie 时不好处理，再者是加载慢。",{"type":170,"tag":209,"props":269,"children":270},{},[271],{"type":176,"value":272},"Web Components：Custom Elements、Shadow DOM、HTML Templates 等规范的集合，需调查兼容性。",{"type":170,"tag":209,"props":274,"children":275},{},[276],{"type":176,"value":277},"Module Federation：没有基座，打包时使用模块联邦注册远程模块，使用时用 import 导入模块。",{"type":170,"tag":209,"props":279,"children":280},{},[281],{"type":176,"value":282},"ESM：微前端的无技术栈限制、应用单独开发，多应用整合三个特性都能很好支持，需调查兼容性，以及 ESM 语法有传染性。",{"type":170,"tag":179,"props":284,"children":285},{},[286,288],{"type":176,"value":287},"表格总结见：",{"type":170,"tag":289,"props":290,"children":294},"a",{"href":291,"rel":292},"https://zhuanlan.zhihu.com/p/556422347",[293],"nofollow",[295],{"type":176,"value":296},"一文读懂 5 种微前端常用方案",{"title":163,"searchDepth":298,"depth":298,"links":299},2,[],"markdown","content:6.maps:_fe-framework:micro-fe:index.md","content","6.maps/_fe-framework/micro-fe/index.md","6.maps/_fe-framework/micro-fe/index","md",[307,311],{"_path":308,"title":309,"description":310},"/maps/_fe-framework/fe-framework","前端框架","前端框架是在前端开发不同阶段，用以简化开发的工具集合。它们提供了一种组织代码的方式，使得开发者可以专注于业务逻辑，而不是底层的技术细节。",{"_path":312,"title":313,"description":314},"/maps/_fe-framework/nuxt/module/nuxt-security","Nuxt Security","自动通过使用 HTTP 头和中间件配置您的应用程序遵循 OWASP 安全模式和原则",1748756319378]