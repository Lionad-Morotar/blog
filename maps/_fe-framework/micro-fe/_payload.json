[{"data":1,"prerenderedAt":317},["ShallowReactive",2],{"navigation":3,"/maps/_fe-framework/micro-fe":161,"/maps/_fe-framework/micro-fe-surround":309},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":303,"_id":304,"_source":305,"_file":306,"_stem":307,"_extension":308},"/maps/_fe-framework/micro-fe","_fe-framework",false,true,"","微前端","微前端是一种架构风格，是一种将前端应用拆分成更小、更独立的部分，然后将这些部分组合在一起的技术方案。微前端的目标是将单体应用拆分成多个小型应用，每个小型应用都可以独立开发、独立部署。",{"type":170,"children":171,"toc":300},"root",[172,181,187,196,202,207,252,258,286],{"type":173,"tag":174,"props":175,"children":177},"element","h4",{"id":176},"微前端解决什么问题",[178],{"type":179,"value":180},"text","微前端解决什么问题？",{"type":173,"tag":182,"props":183,"children":184},"p",{},[185],{"type":179,"value":186},"主要应对一个单体应用在相对长的时间跨度下，由于参与人数、团队的增多和变迁，从一个普通应用演变为了巨石应用，随之带来的难以维护的问题。",{"type":173,"tag":182,"props":188,"children":189},{},[190],{"type":173,"tag":191,"props":192,"children":195},"img",{"alt":193,"src":194},"单体应用、前后端分离和微前端","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20221023230253.png",[],{"type":173,"tag":174,"props":197,"children":199},{"id":198},"微前端技术要点",[200],{"type":179,"value":201},"微前端技术要点？",{"type":173,"tag":182,"props":203,"children":204},{},[205],{"type":179,"value":206},"做到技术栈无关的同时提供以下技术能力支持：",{"type":173,"tag":208,"props":209,"children":210},"ul",{},[211,217,222,227,232,237,242,247],{"type":173,"tag":212,"props":213,"children":214},"li",{},[215],{"type":179,"value":216},"JS 沙箱：子应用全局变量、事件不互相影响",{"type":173,"tag":212,"props":218,"children":219},{},[220],{"type":179,"value":221},"CSS 隔离：子应用之间的样式不互相影响",{"type":173,"tag":212,"props":223,"children":224},{},[225],{"type":179,"value":226},"公共依赖加载：不同子应用都用到的资源怎么加载",{"type":173,"tag":212,"props":228,"children":229},{},[230],{"type":179,"value":231},"父子应用通讯：子应用如何调用父应用方法、父应用如何下发状态",{"type":173,"tag":212,"props":233,"children":234},{},[235],{"type":179,"value":236},"按需加载",{"type":173,"tag":212,"props":238,"children":239},{},[240],{"type":179,"value":241},"预加载",{"type":173,"tag":212,"props":243,"children":244},{},[245],{"type":179,"value":246},"子应用嵌套",{"type":173,"tag":212,"props":248,"children":249},{},[250],{"type":179,"value":251},"子应用并行",{"type":173,"tag":174,"props":253,"children":255},{"id":254},"微前端的方案选择",[256],{"type":179,"value":257},"微前端的方案选择？",{"type":173,"tag":208,"props":259,"children":260},{},[261,266,271,276,281],{"type":173,"tag":212,"props":262,"children":263},{},[264],{"type":179,"value":265},"基座方案：主应用中预先注册子应用，然后监听路由变化，加载匹配到的子应用资源。",{"type":173,"tag":212,"props":267,"children":268},{},[269],{"type":179,"value":270},"iframe：接入简单并且有完美的隔离效果，但是在共享资源如 URL、Cookie 时不好处理，再者是加载慢。",{"type":173,"tag":212,"props":272,"children":273},{},[274],{"type":179,"value":275},"Web Components：Custom Elements、Shadow DOM、HTML Templates 等规范的集合，需调查兼容性。",{"type":173,"tag":212,"props":277,"children":278},{},[279],{"type":179,"value":280},"Module Federation：没有基座，打包时使用模块联邦注册远程模块，使用时用 import 导入模块。",{"type":173,"tag":212,"props":282,"children":283},{},[284],{"type":179,"value":285},"ESM：微前端的无技术栈限制、应用单独开发，多应用整合三个特性都能很好支持，需调查兼容性，以及 ESM 语法有传染性。",{"type":173,"tag":182,"props":287,"children":288},{},[289,291],{"type":179,"value":290},"表格总结见：",{"type":173,"tag":292,"props":293,"children":297},"a",{"href":294,"rel":295},"https://zhuanlan.zhihu.com/p/556422347",[296],"nofollow",[298],{"type":179,"value":299},"一文读懂 5 种微前端常用方案",{"title":166,"searchDepth":301,"depth":301,"links":302},2,[],"markdown","content:6.maps:_fe-framework:micro-fe:index.md","content","6.maps/_fe-framework/micro-fe/index.md","6.maps/_fe-framework/micro-fe/index","md",[310,314],{"_path":311,"title":312,"description":313},"/maps/_fe-framework/fe-framework","前端框架","前端框架是在前端开发不同阶段，用以简化开发的工具集合。它们提供了一种组织代码的方式，使得开发者可以专注于业务逻辑，而不是底层的技术细节。",{"_path":43,"title":315,"description":316},"Blockies Animation","Designed for performance, ease of use, and seamless integration into any modern project.",1753069994990]