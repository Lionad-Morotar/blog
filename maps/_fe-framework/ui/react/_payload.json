[{"data":1,"prerenderedAt":865},["ShallowReactive",2],{"navigation":3,"/maps/_fe-framework/ui/react":158,"/maps/_fe-framework/ui/react-surround":857},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":851,"_id":852,"_source":853,"_file":854,"_stem":855,"_extension":856},"/maps/_fe-framework/ui/react","ui",false,true,"","React Mind Map","React 是一个经典的用户界面框架。",{"type":167,"children":168,"toc":846},"root",[169,177,184,190,440,446,451,465,471,476,482,487,493,498,507,518,524,529,703,709,714,720,725,731,736,742,747,752,758,793,798,804,809,829,835,840],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"架构",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"fiber-是什么怎么实现的",[182],{"type":176,"value":183},"Fiber 是什么，怎么实现的？",{"type":170,"tag":185,"props":186,"children":187},"p",{},[188],{"type":176,"value":189},"在 React 15 之前更新 VDom 树时，React 会找到所有差异并一次性地同步更新它们，这可能会导致卡顿。使用 Fiber 后，React 把树的遍历转换为从父节点，到子节点，到兄弟节点，再回到父节点这一流程，使得遍历是可以中断的，分批异步更新 DOM 成为可能。React 可以在浏览器有动画、用户输入任务等高优先级任务时，先执行高优先级任务。直到有空闲才继续执行 Diff 操作。",{"type":170,"tag":191,"props":192,"children":196},"pre",{"className":193,"code":194,"language":195,"meta":163,"style":163},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","const tasks = []\nfunction diff (time) {\n  while (time > 0 & task.length) {\n    doHighLevelWork()\n  }\n  if (task.length) {\n    requestIdelCallBack(diff)\n  }\n}\nrequestIdelCallBack(render)\n","js",[197],{"type":170,"tag":198,"props":199,"children":200},"code",{"__ignoreMap":163},[201,231,268,328,342,351,385,409,417,426],{"type":170,"tag":202,"props":203,"children":206},"span",{"class":204,"line":205},"line",1,[207,213,219,225],{"type":170,"tag":202,"props":208,"children":210},{"style":209},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[211],{"type":176,"value":212},"const",{"type":170,"tag":202,"props":214,"children":216},{"style":215},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[217],{"type":176,"value":218}," tasks",{"type":170,"tag":202,"props":220,"children":222},{"style":221},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[223],{"type":176,"value":224}," =",{"type":170,"tag":202,"props":226,"children":228},{"style":227},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[229],{"type":176,"value":230}," []\n",{"type":170,"tag":202,"props":232,"children":234},{"class":204,"line":233},2,[235,240,246,252,258,263],{"type":170,"tag":202,"props":236,"children":237},{"style":209},[238],{"type":176,"value":239},"function",{"type":170,"tag":202,"props":241,"children":243},{"style":242},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[244],{"type":176,"value":245}," diff",{"type":170,"tag":202,"props":247,"children":249},{"style":248},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[250],{"type":176,"value":251}," (",{"type":170,"tag":202,"props":253,"children":255},{"style":254},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[256],{"type":176,"value":257},"time",{"type":170,"tag":202,"props":259,"children":260},{"style":248},[261],{"type":176,"value":262},")",{"type":170,"tag":202,"props":264,"children":265},{"style":248},[266],{"type":176,"value":267}," {\n",{"type":170,"tag":202,"props":269,"children":271},{"class":204,"line":270},3,[272,278,283,287,292,298,303,308,313,318,323],{"type":170,"tag":202,"props":273,"children":275},{"style":274},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[276],{"type":176,"value":277},"  while",{"type":170,"tag":202,"props":279,"children":281},{"style":280},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[282],{"type":176,"value":251},{"type":170,"tag":202,"props":284,"children":285},{"style":227},[286],{"type":176,"value":257},{"type":170,"tag":202,"props":288,"children":289},{"style":221},[290],{"type":176,"value":291}," >",{"type":170,"tag":202,"props":293,"children":295},{"style":294},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[296],{"type":176,"value":297}," 0",{"type":170,"tag":202,"props":299,"children":300},{"style":221},[301],{"type":176,"value":302}," &",{"type":170,"tag":202,"props":304,"children":305},{"style":227},[306],{"type":176,"value":307}," task",{"type":170,"tag":202,"props":309,"children":310},{"style":248},[311],{"type":176,"value":312},".",{"type":170,"tag":202,"props":314,"children":315},{"style":215},[316],{"type":176,"value":317},"length",{"type":170,"tag":202,"props":319,"children":320},{"style":280},[321],{"type":176,"value":322},") ",{"type":170,"tag":202,"props":324,"children":325},{"style":248},[326],{"type":176,"value":327},"{\n",{"type":170,"tag":202,"props":329,"children":331},{"class":204,"line":330},4,[332,337],{"type":170,"tag":202,"props":333,"children":334},{"style":242},[335],{"type":176,"value":336},"    doHighLevelWork",{"type":170,"tag":202,"props":338,"children":339},{"style":280},[340],{"type":176,"value":341},"()\n",{"type":170,"tag":202,"props":343,"children":345},{"class":204,"line":344},5,[346],{"type":170,"tag":202,"props":347,"children":348},{"style":248},[349],{"type":176,"value":350},"  }\n",{"type":170,"tag":202,"props":352,"children":354},{"class":204,"line":353},6,[355,360,364,369,373,377,381],{"type":170,"tag":202,"props":356,"children":357},{"style":274},[358],{"type":176,"value":359},"  if",{"type":170,"tag":202,"props":361,"children":362},{"style":280},[363],{"type":176,"value":251},{"type":170,"tag":202,"props":365,"children":366},{"style":227},[367],{"type":176,"value":368},"task",{"type":170,"tag":202,"props":370,"children":371},{"style":248},[372],{"type":176,"value":312},{"type":170,"tag":202,"props":374,"children":375},{"style":215},[376],{"type":176,"value":317},{"type":170,"tag":202,"props":378,"children":379},{"style":280},[380],{"type":176,"value":322},{"type":170,"tag":202,"props":382,"children":383},{"style":248},[384],{"type":176,"value":327},{"type":170,"tag":202,"props":386,"children":388},{"class":204,"line":387},7,[389,394,399,404],{"type":170,"tag":202,"props":390,"children":391},{"style":242},[392],{"type":176,"value":393},"    requestIdelCallBack",{"type":170,"tag":202,"props":395,"children":396},{"style":280},[397],{"type":176,"value":398},"(",{"type":170,"tag":202,"props":400,"children":401},{"style":227},[402],{"type":176,"value":403},"diff",{"type":170,"tag":202,"props":405,"children":406},{"style":280},[407],{"type":176,"value":408},")\n",{"type":170,"tag":202,"props":410,"children":412},{"class":204,"line":411},8,[413],{"type":170,"tag":202,"props":414,"children":415},{"style":248},[416],{"type":176,"value":350},{"type":170,"tag":202,"props":418,"children":420},{"class":204,"line":419},9,[421],{"type":170,"tag":202,"props":422,"children":423},{"style":248},[424],{"type":176,"value":425},"}\n",{"type":170,"tag":202,"props":427,"children":429},{"class":204,"line":428},10,[430,435],{"type":170,"tag":202,"props":431,"children":432},{"style":242},[433],{"type":176,"value":434},"requestIdelCallBack",{"type":170,"tag":202,"props":436,"children":437},{"style":227},[438],{"type":176,"value":439},"(render)\n",{"type":170,"tag":178,"props":441,"children":443},{"id":442},"syntheticevent-是什么",[444],{"type":176,"value":445},"SyntheticEvent 是什么？",{"type":170,"tag":185,"props":447,"children":448},{},[449],{"type":176,"value":450},"合成事件（SyntheticEvent）是 React 17 以前的事件系统设计思路，它是 DOM 事件上的一层封装。合成事件解决了浏览器兼容性问题，并且通过池化技术减少了内存消耗。不过，池化技术会在事件回收时，将对象属性重置为空，所以合成事件用于异步时，需要提前将值缓存或者使用 event.persist 将事件持久化。",{"type":170,"tag":185,"props":452,"children":453},{},[454,456],{"type":176,"value":455},"见：",{"type":170,"tag":457,"props":458,"children":462},"a",{"href":459,"rel":460},"https://reactjs.org/docs/events.html",[461],"nofollow",[463],{"type":176,"value":464},"SyntheticEvent",{"type":170,"tag":178,"props":466,"children":468},{"id":467},"purecomponent-是怎么更新视图的",[469],{"type":176,"value":470},"PureComponent 是怎么更新视图的？",{"type":170,"tag":185,"props":472,"children":473},{},[474],{"type":176,"value":475},"React.PureComponent 中默认在 shouldComponentUpdate 中实现了 state 和 props 的浅比较，以达到性能提升的目的。",{"type":170,"tag":178,"props":477,"children":479},{"id":478},"受控组件和非受控组件有什么区别",[480],{"type":176,"value":481},"受控组件和非受控组件有什么区别？",{"type":170,"tag":185,"props":483,"children":484},{},[485],{"type":176,"value":486},"受控组件通过绑定 value state 以及 onChange 事件来控制表单的状态，使用 HOC 能轻松创建受控组件。非受控组件则直接通过 ref 拿到表单的值。后者的代码要简单不少。",{"type":170,"tag":178,"props":488,"children":490},{"id":489},"react-的生命周期是怎么样的",[491],{"type":176,"value":492},"React 的生命周期是怎么样的？",{"type":170,"tag":185,"props":494,"children":495},{},[496],{"type":176,"value":497},"组件的生命周期分为 Mount、Update 和 Unmount 三个阶段，每个阶段又可以划分出渲染、预提交和提交三个过程。未挂载的组件会在实例创建好后，调 render 函数更新 DOM 节点，最后触发 componentDidMount 钩子，组件更新时则是根据 props 和 states 通过 shouldComponentUpdate 钩子来判断是否要调用 render 函数。",{"type":170,"tag":185,"props":499,"children":500},{},[501],{"type":170,"tag":502,"props":503,"children":506},"img",{"alt":504,"src":505},"React 16.4 Lifecycles","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627111627.png",[],{"type":170,"tag":185,"props":508,"children":509},{},[510,511],{"type":176,"value":455},{"type":170,"tag":457,"props":512,"children":515},{"href":513,"rel":514},"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",[461],[516],{"type":176,"value":517},"React Lifecycles",{"type":170,"tag":178,"props":519,"children":521},{"id":520},"getderivedstatefromprops-是做什么的",[522],{"type":176,"value":523},"getDerivedStateFromProps 是做什么的？",{"type":170,"tag":185,"props":525,"children":526},{},[527],{"type":176,"value":528},"getDerivedStateFromProps 是 React 16.3 后引入的生命周期，用来替代 componentWillReceiveProps。它用来接受来自 props 的更新，以更新当前组件的 States。在 getDerivedStateFromProps 之后，states 和 props 的改变都会走 shouldComponentUpdate 来确定是否跳过渲染。",{"type":170,"tag":191,"props":530,"children":532},{"className":193,"code":531,"language":195,"meta":163,"style":163},"static getDerivedStateFromProps(nextProps, prevState) {\n  const { type } = nextProps\n  if (type !== prevState.type) {\n    return {\n      type,\n    }\n  }\n  return null\n}\n",[533],{"type":170,"tag":198,"props":534,"children":535},{"__ignoreMap":163},[536,568,600,642,654,667,675,682,696],{"type":170,"tag":202,"props":537,"children":538},{"class":204,"line":205},[539,544,549,554,559,564],{"type":170,"tag":202,"props":540,"children":541},{"style":227},[542],{"type":176,"value":543},"static ",{"type":170,"tag":202,"props":545,"children":546},{"style":242},[547],{"type":176,"value":548},"getDerivedStateFromProps",{"type":170,"tag":202,"props":550,"children":551},{"style":227},[552],{"type":176,"value":553},"(nextProps",{"type":170,"tag":202,"props":555,"children":556},{"style":248},[557],{"type":176,"value":558},",",{"type":170,"tag":202,"props":560,"children":561},{"style":227},[562],{"type":176,"value":563}," prevState) ",{"type":170,"tag":202,"props":565,"children":566},{"style":248},[567],{"type":176,"value":327},{"type":170,"tag":202,"props":569,"children":570},{"class":204,"line":233},[571,576,581,586,591,595],{"type":170,"tag":202,"props":572,"children":573},{"style":209},[574],{"type":176,"value":575},"  const",{"type":170,"tag":202,"props":577,"children":578},{"style":248},[579],{"type":176,"value":580}," {",{"type":170,"tag":202,"props":582,"children":583},{"style":215},[584],{"type":176,"value":585}," type",{"type":170,"tag":202,"props":587,"children":588},{"style":248},[589],{"type":176,"value":590}," }",{"type":170,"tag":202,"props":592,"children":593},{"style":221},[594],{"type":176,"value":224},{"type":170,"tag":202,"props":596,"children":597},{"style":227},[598],{"type":176,"value":599}," nextProps\n",{"type":170,"tag":202,"props":601,"children":602},{"class":204,"line":270},[603,607,611,616,621,626,630,634,638],{"type":170,"tag":202,"props":604,"children":605},{"style":274},[606],{"type":176,"value":359},{"type":170,"tag":202,"props":608,"children":609},{"style":280},[610],{"type":176,"value":251},{"type":170,"tag":202,"props":612,"children":613},{"style":227},[614],{"type":176,"value":615},"type",{"type":170,"tag":202,"props":617,"children":618},{"style":221},[619],{"type":176,"value":620}," !==",{"type":170,"tag":202,"props":622,"children":623},{"style":227},[624],{"type":176,"value":625}," prevState",{"type":170,"tag":202,"props":627,"children":628},{"style":248},[629],{"type":176,"value":312},{"type":170,"tag":202,"props":631,"children":632},{"style":227},[633],{"type":176,"value":615},{"type":170,"tag":202,"props":635,"children":636},{"style":280},[637],{"type":176,"value":322},{"type":170,"tag":202,"props":639,"children":640},{"style":248},[641],{"type":176,"value":327},{"type":170,"tag":202,"props":643,"children":644},{"class":204,"line":330},[645,650],{"type":170,"tag":202,"props":646,"children":647},{"style":274},[648],{"type":176,"value":649},"    return",{"type":170,"tag":202,"props":651,"children":652},{"style":248},[653],{"type":176,"value":267},{"type":170,"tag":202,"props":655,"children":656},{"class":204,"line":344},[657,662],{"type":170,"tag":202,"props":658,"children":659},{"style":227},[660],{"type":176,"value":661},"      type",{"type":170,"tag":202,"props":663,"children":664},{"style":248},[665],{"type":176,"value":666},",\n",{"type":170,"tag":202,"props":668,"children":669},{"class":204,"line":353},[670],{"type":170,"tag":202,"props":671,"children":672},{"style":248},[673],{"type":176,"value":674},"    }\n",{"type":170,"tag":202,"props":676,"children":677},{"class":204,"line":387},[678],{"type":170,"tag":202,"props":679,"children":680},{"style":248},[681],{"type":176,"value":350},{"type":170,"tag":202,"props":683,"children":684},{"class":204,"line":411},[685,690],{"type":170,"tag":202,"props":686,"children":687},{"style":274},[688],{"type":176,"value":689},"  return",{"type":170,"tag":202,"props":691,"children":693},{"style":692},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[694],{"type":176,"value":695}," null\n",{"type":170,"tag":202,"props":697,"children":698},{"class":204,"line":419},[699],{"type":170,"tag":202,"props":700,"children":701},{"style":248},[702],{"type":176,"value":425},{"type":170,"tag":178,"props":704,"children":706},{"id":705},"为什么在-componentdidmount-而不是其它生命周期中取请求数据",[707],{"type":176,"value":708},"为什么在 componentDidMount 而不是其它生命周期中取请求数据？",{"type":170,"tag":185,"props":710,"children":711},{},[712],{"type":176,"value":713},"其它生命周期可能执行多次，比如说 componentWillMount 会在服务端和客户端各执行一次。",{"type":170,"tag":178,"props":715,"children":717},{"id":716},"类组件和函数组件有什么不同",[718],{"type":176,"value":719},"类组件和函数组件有什么不同？",{"type":170,"tag":185,"props":721,"children":722},{},[723],{"type":176,"value":724},"类组件是面向对象的，函数组件是函数式的，了解前者主要需要知道继承、生命周期概念，后者则是 state、无副作用和引用透明。类组件依靠 shouldComponentUpdate 来优化性能，函数组件使用 React.memo。",{"type":170,"tag":178,"props":726,"children":728},{"id":727},"setstate-是同步的还是异步的",[729],{"type":176,"value":730},"setState 是同步的还是异步的？",{"type":170,"tag":185,"props":732,"children":733},{},[734],{"type":176,"value":735},"在大部分情况下 setState 是异步的。多次 setState 的状态会被合并，直到当前宏任务跑完才会触发重新渲染。这和 Taro 的思路是一致的。",{"type":170,"tag":178,"props":737,"children":739},{"id":738},"react-和-vue-有什么异同",[740],{"type":176,"value":741},"React 和 Vue 有什么异同？",{"type":170,"tag":185,"props":743,"children":744},{},[745],{"type":176,"value":746},"相同的地方在于他们都是渐进式的框架，都有自己的脚手架和最佳实践的模板；在框架层面，数据流都是自顶向下的，都引入了 VDom 的概念。",{"type":170,"tag":185,"props":748,"children":749},{},[750],{"type":176,"value":751},"不同的地方在于 Vue 的数据和视图是双向绑定的，React 推崇不可变数据，并且需要手动优化，所以 Vue 模板有利于静态优化。",{"type":170,"tag":171,"props":753,"children":755},{"id":754},"hooks",[756],{"type":176,"value":757},"Hooks",{"type":170,"tag":759,"props":760,"children":761},"ul",{},[762,773,783],{"type":170,"tag":763,"props":764,"children":765},"li",{},[766],{"type":170,"tag":457,"props":767,"children":770},{"href":768,"rel":769},"https://usehooks.com/",[461],[771],{"type":176,"value":772},"useHooks(🐠)",{"type":170,"tag":763,"props":774,"children":775},{},[776],{"type":170,"tag":457,"props":777,"children":780},{"href":778,"rel":779},"https://juejin.cn/post/6844903991730503687",[461],[781],{"type":176,"value":782},"精读《Hooks 取数 - swr 源码》",{"type":170,"tag":763,"props":784,"children":785},{},[786],{"type":170,"tag":457,"props":787,"children":790},{"href":788,"rel":789},"https://my.oschina.net/wsafight/blog/3133057",[461],[791],{"type":176,"value":792},"从 UX 与 DX 来谈一谈 React SWR",{"type":170,"tag":171,"props":794,"children":796},{"id":795},"应用",[797],{"type":176,"value":795},{"type":170,"tag":178,"props":799,"children":801},{"id":800},"什么是-hoc",[802],{"type":176,"value":803},"什么是 HOC？",{"type":170,"tag":185,"props":805,"children":806},{},[807],{"type":176,"value":808},"高阶组件是一种使用 React 组件的组合特性，把某种组件转换成另一种组件的设计模式，可以用来处理有横切关系的组件。",{"type":170,"tag":185,"props":810,"children":811},{},[812,813,820,822],{"type":176,"value":455},{"type":170,"tag":457,"props":814,"children":817},{"href":815,"rel":816},"https://zh-hans.reactjs.org/docs/higher-order-components.html",[461],[818],{"type":176,"value":819},"高阶组件",{"type":176,"value":821},"、",{"type":170,"tag":457,"props":823,"children":826},{"href":824,"rel":825},"https://zhuanlan.zhihu.com/p/24776678",[461],[827],{"type":176,"value":828},"TODO 深入理解 React 高阶组件",{"type":170,"tag":178,"props":830,"children":832},{"id":831},"什么是组件横切关系",[833],{"type":176,"value":834},"什么是组件横切关系？",{"type":170,"tag":185,"props":836,"children":837},{},[838],{"type":176,"value":839},"横切关系是那些和程序中大部分模块都有联系的部分，它们形成了切面开发的基础单元。",{"type":170,"tag":841,"props":842,"children":843},"style",{},[844],{"type":176,"value":845},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":233,"depth":233,"links":847},[848,849,850],{"id":173,"depth":233,"text":173},{"id":754,"depth":233,"text":757},{"id":795,"depth":233,"text":795},"markdown","content:6.maps:_fe-framework:ui:react.md","content","6.maps/_fe-framework/ui/react.md","6.maps/_fe-framework/ui/react","md",[858,861],{"_path":859,"title":860,"description":163},"/maps/_fe-framework/ui/angular","Angular",{"_path":862,"title":863,"description":864},"/maps/_fe-framework/ui/vue","Vue","Vue 是一套用于构建用户界面的渐进式框架，它的核心库只关注视图层，易于上手，同时也便于与第三方库或既有项目整合。",1748756319317]