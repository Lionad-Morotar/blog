[{"data":1,"prerenderedAt":862},["ShallowReactive",2],{"navigation":3,"/maps/_fe-framework/ui/react":155,"/maps/_fe-framework/ui/react-surround":854},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":848,"_id":849,"_source":850,"_file":851,"_stem":852,"_extension":853},"/maps/_fe-framework/ui/react","ui",false,true,"","React Mind Map","React 是一个经典的用户界面框架。",{"type":164,"children":165,"toc":843},"root",[166,174,181,187,437,443,448,462,468,473,479,484,490,495,504,515,521,526,700,706,711,717,722,728,733,739,744,749,755,790,795,801,806,826,832,837],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"架构",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":178},"h4",{"id":177},"fiber-是什么怎么实现的",[179],{"type":173,"value":180},"Fiber 是什么，怎么实现的？",{"type":167,"tag":182,"props":183,"children":184},"p",{},[185],{"type":173,"value":186},"在 React 15 之前更新 VDom 树时，React 会找到所有差异并一次性地同步更新它们，这可能会导致卡顿。使用 Fiber 后，React 把树的遍历转换为从父节点，到子节点，到兄弟节点，再回到父节点这一流程，使得遍历是可以中断的，分批异步更新 DOM 成为可能。React 可以在浏览器有动画、用户输入任务等高优先级任务时，先执行高优先级任务。直到有空闲才继续执行 Diff 操作。",{"type":167,"tag":188,"props":189,"children":193},"pre",{"className":190,"code":191,"language":192,"meta":160,"style":160},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","const tasks = []\nfunction diff (time) {\n  while (time > 0 & task.length) {\n    doHighLevelWork()\n  }\n  if (task.length) {\n    requestIdelCallBack(diff)\n  }\n}\nrequestIdelCallBack(render)\n","js",[194],{"type":167,"tag":195,"props":196,"children":197},"code",{"__ignoreMap":160},[198,228,265,325,339,348,382,406,414,423],{"type":167,"tag":199,"props":200,"children":203},"span",{"class":201,"line":202},"line",1,[204,210,216,222],{"type":167,"tag":199,"props":205,"children":207},{"style":206},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[208],{"type":173,"value":209},"const",{"type":167,"tag":199,"props":211,"children":213},{"style":212},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[214],{"type":173,"value":215}," tasks",{"type":167,"tag":199,"props":217,"children":219},{"style":218},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[220],{"type":173,"value":221}," =",{"type":167,"tag":199,"props":223,"children":225},{"style":224},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[226],{"type":173,"value":227}," []\n",{"type":167,"tag":199,"props":229,"children":231},{"class":201,"line":230},2,[232,237,243,249,255,260],{"type":167,"tag":199,"props":233,"children":234},{"style":206},[235],{"type":173,"value":236},"function",{"type":167,"tag":199,"props":238,"children":240},{"style":239},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[241],{"type":173,"value":242}," diff",{"type":167,"tag":199,"props":244,"children":246},{"style":245},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[247],{"type":173,"value":248}," (",{"type":167,"tag":199,"props":250,"children":252},{"style":251},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[253],{"type":173,"value":254},"time",{"type":167,"tag":199,"props":256,"children":257},{"style":245},[258],{"type":173,"value":259},")",{"type":167,"tag":199,"props":261,"children":262},{"style":245},[263],{"type":173,"value":264}," {\n",{"type":167,"tag":199,"props":266,"children":268},{"class":201,"line":267},3,[269,275,280,284,289,295,300,305,310,315,320],{"type":167,"tag":199,"props":270,"children":272},{"style":271},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[273],{"type":173,"value":274},"  while",{"type":167,"tag":199,"props":276,"children":278},{"style":277},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[279],{"type":173,"value":248},{"type":167,"tag":199,"props":281,"children":282},{"style":224},[283],{"type":173,"value":254},{"type":167,"tag":199,"props":285,"children":286},{"style":218},[287],{"type":173,"value":288}," >",{"type":167,"tag":199,"props":290,"children":292},{"style":291},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[293],{"type":173,"value":294}," 0",{"type":167,"tag":199,"props":296,"children":297},{"style":218},[298],{"type":173,"value":299}," &",{"type":167,"tag":199,"props":301,"children":302},{"style":224},[303],{"type":173,"value":304}," task",{"type":167,"tag":199,"props":306,"children":307},{"style":245},[308],{"type":173,"value":309},".",{"type":167,"tag":199,"props":311,"children":312},{"style":212},[313],{"type":173,"value":314},"length",{"type":167,"tag":199,"props":316,"children":317},{"style":277},[318],{"type":173,"value":319},") ",{"type":167,"tag":199,"props":321,"children":322},{"style":245},[323],{"type":173,"value":324},"{\n",{"type":167,"tag":199,"props":326,"children":328},{"class":201,"line":327},4,[329,334],{"type":167,"tag":199,"props":330,"children":331},{"style":239},[332],{"type":173,"value":333},"    doHighLevelWork",{"type":167,"tag":199,"props":335,"children":336},{"style":277},[337],{"type":173,"value":338},"()\n",{"type":167,"tag":199,"props":340,"children":342},{"class":201,"line":341},5,[343],{"type":167,"tag":199,"props":344,"children":345},{"style":245},[346],{"type":173,"value":347},"  }\n",{"type":167,"tag":199,"props":349,"children":351},{"class":201,"line":350},6,[352,357,361,366,370,374,378],{"type":167,"tag":199,"props":353,"children":354},{"style":271},[355],{"type":173,"value":356},"  if",{"type":167,"tag":199,"props":358,"children":359},{"style":277},[360],{"type":173,"value":248},{"type":167,"tag":199,"props":362,"children":363},{"style":224},[364],{"type":173,"value":365},"task",{"type":167,"tag":199,"props":367,"children":368},{"style":245},[369],{"type":173,"value":309},{"type":167,"tag":199,"props":371,"children":372},{"style":212},[373],{"type":173,"value":314},{"type":167,"tag":199,"props":375,"children":376},{"style":277},[377],{"type":173,"value":319},{"type":167,"tag":199,"props":379,"children":380},{"style":245},[381],{"type":173,"value":324},{"type":167,"tag":199,"props":383,"children":385},{"class":201,"line":384},7,[386,391,396,401],{"type":167,"tag":199,"props":387,"children":388},{"style":239},[389],{"type":173,"value":390},"    requestIdelCallBack",{"type":167,"tag":199,"props":392,"children":393},{"style":277},[394],{"type":173,"value":395},"(",{"type":167,"tag":199,"props":397,"children":398},{"style":224},[399],{"type":173,"value":400},"diff",{"type":167,"tag":199,"props":402,"children":403},{"style":277},[404],{"type":173,"value":405},")\n",{"type":167,"tag":199,"props":407,"children":409},{"class":201,"line":408},8,[410],{"type":167,"tag":199,"props":411,"children":412},{"style":245},[413],{"type":173,"value":347},{"type":167,"tag":199,"props":415,"children":417},{"class":201,"line":416},9,[418],{"type":167,"tag":199,"props":419,"children":420},{"style":245},[421],{"type":173,"value":422},"}\n",{"type":167,"tag":199,"props":424,"children":426},{"class":201,"line":425},10,[427,432],{"type":167,"tag":199,"props":428,"children":429},{"style":239},[430],{"type":173,"value":431},"requestIdelCallBack",{"type":167,"tag":199,"props":433,"children":434},{"style":224},[435],{"type":173,"value":436},"(render)\n",{"type":167,"tag":175,"props":438,"children":440},{"id":439},"syntheticevent-是什么",[441],{"type":173,"value":442},"SyntheticEvent 是什么？",{"type":167,"tag":182,"props":444,"children":445},{},[446],{"type":173,"value":447},"合成事件（SyntheticEvent）是 React 17 以前的事件系统设计思路，它是 DOM 事件上的一层封装。合成事件解决了浏览器兼容性问题，并且通过池化技术减少了内存消耗。不过，池化技术会在事件回收时，将对象属性重置为空，所以合成事件用于异步时，需要提前将值缓存或者使用 event.persist 将事件持久化。",{"type":167,"tag":182,"props":449,"children":450},{},[451,453],{"type":173,"value":452},"见：",{"type":167,"tag":454,"props":455,"children":459},"a",{"href":456,"rel":457},"https://reactjs.org/docs/events.html",[458],"nofollow",[460],{"type":173,"value":461},"SyntheticEvent",{"type":167,"tag":175,"props":463,"children":465},{"id":464},"purecomponent-是怎么更新视图的",[466],{"type":173,"value":467},"PureComponent 是怎么更新视图的？",{"type":167,"tag":182,"props":469,"children":470},{},[471],{"type":173,"value":472},"React.PureComponent 中默认在 shouldComponentUpdate 中实现了 state 和 props 的浅比较，以达到性能提升的目的。",{"type":167,"tag":175,"props":474,"children":476},{"id":475},"受控组件和非受控组件有什么区别",[477],{"type":173,"value":478},"受控组件和非受控组件有什么区别？",{"type":167,"tag":182,"props":480,"children":481},{},[482],{"type":173,"value":483},"受控组件通过绑定 value state 以及 onChange 事件来控制表单的状态，使用 HOC 能轻松创建受控组件。非受控组件则直接通过 ref 拿到表单的值。后者的代码要简单不少。",{"type":167,"tag":175,"props":485,"children":487},{"id":486},"react-的生命周期是怎么样的",[488],{"type":173,"value":489},"React 的生命周期是怎么样的？",{"type":167,"tag":182,"props":491,"children":492},{},[493],{"type":173,"value":494},"组件的生命周期分为 Mount、Update 和 Unmount 三个阶段，每个阶段又可以划分出渲染、预提交和提交三个过程。未挂载的组件会在实例创建好后，调 render 函数更新 DOM 节点，最后触发 componentDidMount 钩子，组件更新时则是根据 props 和 states 通过 shouldComponentUpdate 钩子来判断是否要调用 render 函数。",{"type":167,"tag":182,"props":496,"children":497},{},[498],{"type":167,"tag":499,"props":500,"children":503},"img",{"alt":501,"src":502},"React 16.4 Lifecycles","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627111627.png",[],{"type":167,"tag":182,"props":505,"children":506},{},[507,508],{"type":173,"value":452},{"type":167,"tag":454,"props":509,"children":512},{"href":510,"rel":511},"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",[458],[513],{"type":173,"value":514},"React Lifecycles",{"type":167,"tag":175,"props":516,"children":518},{"id":517},"getderivedstatefromprops-是做什么的",[519],{"type":173,"value":520},"getDerivedStateFromProps 是做什么的？",{"type":167,"tag":182,"props":522,"children":523},{},[524],{"type":173,"value":525},"getDerivedStateFromProps 是 React 16.3 后引入的生命周期，用来替代 componentWillReceiveProps。它用来接受来自 props 的更新，以更新当前组件的 States。在 getDerivedStateFromProps 之后，states 和 props 的改变都会走 shouldComponentUpdate 来确定是否跳过渲染。",{"type":167,"tag":188,"props":527,"children":529},{"className":190,"code":528,"language":192,"meta":160,"style":160},"static getDerivedStateFromProps(nextProps, prevState) {\n  const { type } = nextProps\n  if (type !== prevState.type) {\n    return {\n      type,\n    }\n  }\n  return null\n}\n",[530],{"type":167,"tag":195,"props":531,"children":532},{"__ignoreMap":160},[533,565,597,639,651,664,672,679,693],{"type":167,"tag":199,"props":534,"children":535},{"class":201,"line":202},[536,541,546,551,556,561],{"type":167,"tag":199,"props":537,"children":538},{"style":224},[539],{"type":173,"value":540},"static ",{"type":167,"tag":199,"props":542,"children":543},{"style":239},[544],{"type":173,"value":545},"getDerivedStateFromProps",{"type":167,"tag":199,"props":547,"children":548},{"style":224},[549],{"type":173,"value":550},"(nextProps",{"type":167,"tag":199,"props":552,"children":553},{"style":245},[554],{"type":173,"value":555},",",{"type":167,"tag":199,"props":557,"children":558},{"style":224},[559],{"type":173,"value":560}," prevState) ",{"type":167,"tag":199,"props":562,"children":563},{"style":245},[564],{"type":173,"value":324},{"type":167,"tag":199,"props":566,"children":567},{"class":201,"line":230},[568,573,578,583,588,592],{"type":167,"tag":199,"props":569,"children":570},{"style":206},[571],{"type":173,"value":572},"  const",{"type":167,"tag":199,"props":574,"children":575},{"style":245},[576],{"type":173,"value":577}," {",{"type":167,"tag":199,"props":579,"children":580},{"style":212},[581],{"type":173,"value":582}," type",{"type":167,"tag":199,"props":584,"children":585},{"style":245},[586],{"type":173,"value":587}," }",{"type":167,"tag":199,"props":589,"children":590},{"style":218},[591],{"type":173,"value":221},{"type":167,"tag":199,"props":593,"children":594},{"style":224},[595],{"type":173,"value":596}," nextProps\n",{"type":167,"tag":199,"props":598,"children":599},{"class":201,"line":267},[600,604,608,613,618,623,627,631,635],{"type":167,"tag":199,"props":601,"children":602},{"style":271},[603],{"type":173,"value":356},{"type":167,"tag":199,"props":605,"children":606},{"style":277},[607],{"type":173,"value":248},{"type":167,"tag":199,"props":609,"children":610},{"style":224},[611],{"type":173,"value":612},"type",{"type":167,"tag":199,"props":614,"children":615},{"style":218},[616],{"type":173,"value":617}," !==",{"type":167,"tag":199,"props":619,"children":620},{"style":224},[621],{"type":173,"value":622}," prevState",{"type":167,"tag":199,"props":624,"children":625},{"style":245},[626],{"type":173,"value":309},{"type":167,"tag":199,"props":628,"children":629},{"style":224},[630],{"type":173,"value":612},{"type":167,"tag":199,"props":632,"children":633},{"style":277},[634],{"type":173,"value":319},{"type":167,"tag":199,"props":636,"children":637},{"style":245},[638],{"type":173,"value":324},{"type":167,"tag":199,"props":640,"children":641},{"class":201,"line":327},[642,647],{"type":167,"tag":199,"props":643,"children":644},{"style":271},[645],{"type":173,"value":646},"    return",{"type":167,"tag":199,"props":648,"children":649},{"style":245},[650],{"type":173,"value":264},{"type":167,"tag":199,"props":652,"children":653},{"class":201,"line":341},[654,659],{"type":167,"tag":199,"props":655,"children":656},{"style":224},[657],{"type":173,"value":658},"      type",{"type":167,"tag":199,"props":660,"children":661},{"style":245},[662],{"type":173,"value":663},",\n",{"type":167,"tag":199,"props":665,"children":666},{"class":201,"line":350},[667],{"type":167,"tag":199,"props":668,"children":669},{"style":245},[670],{"type":173,"value":671},"    }\n",{"type":167,"tag":199,"props":673,"children":674},{"class":201,"line":384},[675],{"type":167,"tag":199,"props":676,"children":677},{"style":245},[678],{"type":173,"value":347},{"type":167,"tag":199,"props":680,"children":681},{"class":201,"line":408},[682,687],{"type":167,"tag":199,"props":683,"children":684},{"style":271},[685],{"type":173,"value":686},"  return",{"type":167,"tag":199,"props":688,"children":690},{"style":689},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[691],{"type":173,"value":692}," null\n",{"type":167,"tag":199,"props":694,"children":695},{"class":201,"line":416},[696],{"type":167,"tag":199,"props":697,"children":698},{"style":245},[699],{"type":173,"value":422},{"type":167,"tag":175,"props":701,"children":703},{"id":702},"为什么在-componentdidmount-而不是其它生命周期中取请求数据",[704],{"type":173,"value":705},"为什么在 componentDidMount 而不是其它生命周期中取请求数据？",{"type":167,"tag":182,"props":707,"children":708},{},[709],{"type":173,"value":710},"其它生命周期可能执行多次，比如说 componentWillMount 会在服务端和客户端各执行一次。",{"type":167,"tag":175,"props":712,"children":714},{"id":713},"类组件和函数组件有什么不同",[715],{"type":173,"value":716},"类组件和函数组件有什么不同？",{"type":167,"tag":182,"props":718,"children":719},{},[720],{"type":173,"value":721},"类组件是面向对象的，函数组件是函数式的，了解前者主要需要知道继承、生命周期概念，后者则是 state、无副作用和引用透明。类组件依靠 shouldComponentUpdate 来优化性能，函数组件使用 React.memo。",{"type":167,"tag":175,"props":723,"children":725},{"id":724},"setstate-是同步的还是异步的",[726],{"type":173,"value":727},"setState 是同步的还是异步的？",{"type":167,"tag":182,"props":729,"children":730},{},[731],{"type":173,"value":732},"在大部分情况下 setState 是异步的。多次 setState 的状态会被合并，直到当前宏任务跑完才会触发重新渲染。这和 Taro 的思路是一致的。",{"type":167,"tag":175,"props":734,"children":736},{"id":735},"react-和-vue-有什么异同",[737],{"type":173,"value":738},"React 和 Vue 有什么异同？",{"type":167,"tag":182,"props":740,"children":741},{},[742],{"type":173,"value":743},"相同的地方在于他们都是渐进式的框架，都有自己的脚手架和最佳实践的模板；在框架层面，数据流都是自顶向下的，都引入了 VDom 的概念。",{"type":167,"tag":182,"props":745,"children":746},{},[747],{"type":173,"value":748},"不同的地方在于 Vue 的数据和视图是双向绑定的，React 推崇不可变数据，并且需要手动优化，所以 Vue 模板有利于静态优化。",{"type":167,"tag":168,"props":750,"children":752},{"id":751},"hooks",[753],{"type":173,"value":754},"Hooks",{"type":167,"tag":756,"props":757,"children":758},"ul",{},[759,770,780],{"type":167,"tag":760,"props":761,"children":762},"li",{},[763],{"type":167,"tag":454,"props":764,"children":767},{"href":765,"rel":766},"https://usehooks.com/",[458],[768],{"type":173,"value":769},"useHooks(🐠)",{"type":167,"tag":760,"props":771,"children":772},{},[773],{"type":167,"tag":454,"props":774,"children":777},{"href":775,"rel":776},"https://juejin.cn/post/6844903991730503687",[458],[778],{"type":173,"value":779},"精读《Hooks 取数 - swr 源码》",{"type":167,"tag":760,"props":781,"children":782},{},[783],{"type":167,"tag":454,"props":784,"children":787},{"href":785,"rel":786},"https://my.oschina.net/wsafight/blog/3133057",[458],[788],{"type":173,"value":789},"从 UX 与 DX 来谈一谈 React SWR",{"type":167,"tag":168,"props":791,"children":793},{"id":792},"应用",[794],{"type":173,"value":792},{"type":167,"tag":175,"props":796,"children":798},{"id":797},"什么是-hoc",[799],{"type":173,"value":800},"什么是 HOC？",{"type":167,"tag":182,"props":802,"children":803},{},[804],{"type":173,"value":805},"高阶组件是一种使用 React 组件的组合特性，把某种组件转换成另一种组件的设计模式，可以用来处理有横切关系的组件。",{"type":167,"tag":182,"props":807,"children":808},{},[809,810,817,819],{"type":173,"value":452},{"type":167,"tag":454,"props":811,"children":814},{"href":812,"rel":813},"https://zh-hans.reactjs.org/docs/higher-order-components.html",[458],[815],{"type":173,"value":816},"高阶组件",{"type":173,"value":818},"、",{"type":167,"tag":454,"props":820,"children":823},{"href":821,"rel":822},"https://zhuanlan.zhihu.com/p/24776678",[458],[824],{"type":173,"value":825},"TODO 深入理解 React 高阶组件",{"type":167,"tag":175,"props":827,"children":829},{"id":828},"什么是组件横切关系",[830],{"type":173,"value":831},"什么是组件横切关系？",{"type":167,"tag":182,"props":833,"children":834},{},[835],{"type":173,"value":836},"横切关系是那些和程序中大部分模块都有联系的部分，它们形成了切面开发的基础单元。",{"type":167,"tag":838,"props":839,"children":840},"style",{},[841],{"type":173,"value":842},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":230,"depth":230,"links":844},[845,846,847],{"id":170,"depth":230,"text":170},{"id":751,"depth":230,"text":754},{"id":792,"depth":230,"text":792},"markdown","content:6.maps:_fe-framework:ui:react.md","content","6.maps/_fe-framework/ui/react.md","6.maps/_fe-framework/ui/react","md",[855,858],{"_path":856,"title":857,"description":160},"/maps/_fe-framework/ui/angular","Angular",{"_path":859,"title":860,"description":861},"/maps/_fe-framework/ui/vue","Vue","Vue 是一套用于构建用户界面的渐进式框架，它的核心库只关注视图层，易于上手，同时也便于与第三方库或既有项目整合。",1742348691214]