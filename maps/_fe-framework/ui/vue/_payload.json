[{"data":1,"prerenderedAt":804},["ShallowReactive",2],{"navigation":3,"/maps/_fe-framework/ui/vue":158,"/maps/_fe-framework/ui/vue-surround":795},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":789,"_id":790,"_source":791,"_file":792,"_stem":793,"_extension":794},"/maps/_fe-framework/ui/vue","ui",false,true,"","Vue","Vue 是一套用于构建用户界面的渐进式框架，它的核心库只关注视图层，易于上手，同时也便于与第三方库或既有项目整合。",{"type":167,"children":168,"toc":774},"root",[169,178,205,210,217,235,241,247,252,257,263,268,274,297,303,321,327,332,337,342,354,359,365,370,375,381,392,397,403,412,418,424,429,435,446,457,468,479,484,490,495,501,506,512,517,523,529,534,540,544,554,560,571,576,581,586,591,605,618,623,636,641,654,659,718,763,768],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"todo",[175],{"type":176,"value":177},"text","TODO",{"type":170,"tag":179,"props":180,"children":181},"ul",{},[182,195],{"type":170,"tag":183,"props":184,"children":185},"li",{},[186],{"type":170,"tag":187,"props":188,"children":192},"a",{"href":189,"rel":190},"https://www.zhihu.com/question/390956688/answer/1184696066",[191],"nofollow",[193],{"type":176,"value":194},"Vue.js 技术揭秘",{"type":170,"tag":183,"props":196,"children":197},{},[198],{"type":170,"tag":187,"props":199,"children":202},{"href":200,"rel":201},"https://github.com/HcySunYang/vue-design/blob/elegant/docs/art/1start-learn",[191],[203],{"type":176,"value":204},"vue-design",{"type":170,"tag":171,"props":206,"children":208},{"id":207},"简介",[209],{"type":176,"value":207},{"type":170,"tag":211,"props":212,"children":214},"h4",{"id":213},"前端框架发展历史关键点",[215],{"type":176,"value":216},"前端框架发展历史关键点？",{"type":170,"tag":179,"props":218,"children":219},{},[220,225,230],{"type":170,"tag":183,"props":221,"children":222},{},[223],{"type":176,"value":224},"2004 年，Google Gmail 使用的 Ajax 技术使前端脱离模板的束缚。",{"type":170,"tag":183,"props":226,"children":227},{},[228],{"type":176,"value":229},"jQuery 解决了不同浏览器的兼容性问题。",{"type":170,"tag":183,"props":231,"children":232},{},[233],{"type":176,"value":234},"2009 年，AngularJS 引领了 MVVM 的潮流，NodeJS 加速了前端工程化的诞生。",{"type":170,"tag":211,"props":236,"children":238},{"id":237},"vue-和-react-的计算性能瓶颈是什么",[239],{"type":176,"value":240},"Vue 和 React 的计算性能瓶颈是什么？",{"type":170,"tag":242,"props":243,"children":244},"p",{},[245],{"type":176,"value":246},"Vue1 的每一个响应式数据都有一个 Watcher，极大的消耗内存，React 的问题发生在当页面 JS 执行 Diff 算法超过帧时间时带来的卡顿问题。",{"type":170,"tag":242,"props":248,"children":249},{},[250],{"type":176,"value":251},"Vue2 引入虚拟 DOM，采用组件级别的响应式数据颗粒度，在避免了 Diff 算法超时问题的同时，降低内存消耗。同时，虚拟 DOM 还带来跨端能力。",{"type":170,"tag":242,"props":253,"children":254},{},[255],{"type":176,"value":256},"React 引入 Fiber 架构，将 DOM Tree 变成链表，使得有能力随时启动或停止 Diff 算法（树的遍历使用递归所以相比链表更难记录状态），可以利用浏览器的空闲时间计算 Diff，避免了卡顿。",{"type":170,"tag":211,"props":258,"children":260},{"id":259},"mvvmmvc-的区别",[261],{"type":176,"value":262},"MVVM、MVC 的区别？",{"type":170,"tag":242,"props":264,"children":265},{},[266],{"type":176,"value":267},"都是软件架构模式，主要区别是关注点不一样，Controller 用来承接交互操作并触发 Model 的修改，而 ViewModel 和 Model 层是双向绑定的，所以写 VueJS 时的思想不在如何操作 DOM 元素，而主要是数据应该怎么变化。",{"type":170,"tag":211,"props":269,"children":271},{"id":270},"vue2-较明显的设计缺陷",[272],{"type":176,"value":273},"Vue2 较明显的设计缺陷？",{"type":170,"tag":179,"props":275,"children":276},{},[277,282,287,292],{"type":170,"tag":183,"props":278,"children":279},{},[280],{"type":176,"value":281},"使用 Flow.js 来做类型校验，而不是社区所向的 TypeScript",{"type":170,"tag":183,"props":283,"children":284},{},[285],{"type":176,"value":286},"Vue2 内嵌了诸如 DOM API 之类的代码，使得跨端等二次开发变得困难，代码耦合也使得摇树优化变得困难",{"type":170,"tag":183,"props":288,"children":289},{},[290],{"type":176,"value":291},"Vue2 使用的 defineProperty 有缺陷，不支持 delete 等操作符",{"type":170,"tag":183,"props":293,"children":294},{},[295],{"type":176,"value":296},"Option API 在组件代码较多时不易维护",{"type":170,"tag":211,"props":298,"children":300},{"id":299},"option-api-的一些缺陷",[301],{"type":176,"value":302},"Option API 的一些缺陷？",{"type":170,"tag":179,"props":304,"children":305},{},[306,311,316],{"type":170,"tag":183,"props":307,"children":308},{},[309],{"type":176,"value":310},"数据挂载在 this 对象上，对类型系统以及摇树优化不友好",{"type":170,"tag":183,"props":312,"children":313},{},[314],{"type":176,"value":315},"代码增多时，维护变得困难",{"type":170,"tag":183,"props":317,"children":318},{},[319],{"type":176,"value":320},"不方便抽离通用逻辑",{"type":170,"tag":211,"props":322,"children":324},{"id":323},"为什么要重写-vue2",[325],{"type":176,"value":326},"为什么要重写 Vue2？",{"type":170,"tag":242,"props":328,"children":329},{},[330],{"type":176,"value":331},"有两个关键因素：主流浏览器逐渐兼容 Proxy，以及修复 Vue2 的设计缺陷。",{"type":170,"tag":242,"props":333,"children":334},{},[335],{"type":176,"value":336},"切换到 Proxy 可以修复过去 setter、getter 无法拦截数组修改以及修改了对象本身带来的语义变化的问题，但由于它是一个原生特性，无法 polyfill，所以对 Vue 而言是一个重大的突破性变动。",{"type":170,"tag":242,"props":338,"children":339},{},[340],{"type":176,"value":341},"过去的架构带来了模板很难正确的在 source-map 中追溯、渲染器（如 DOM 渲染器）不是渐进式的可选项的问题，再加上框架内部代码的耦合，使得摇树优化变得困难，代码也不便理解。",{"type":170,"tag":242,"props":343,"children":344},{},[345,347],{"type":176,"value":346},"见：",{"type":170,"tag":187,"props":348,"children":351},{"href":349,"rel":350},"https://zhuanlan.zhihu.com/p/147022323",[191],[352],{"type":176,"value":353},"重头来过的 Vue 3 带来了什么？",{"type":170,"tag":171,"props":355,"children":357},{"id":356},"响应式",[358],{"type":176,"value":356},{"type":170,"tag":211,"props":360,"children":362},{"id":361},"ref-的原理",[363],{"type":176,"value":364},"ref 的原理？",{"type":170,"tag":242,"props":366,"children":367},{},[368],{"type":176,"value":369},"ref 是在基础值的外面封装了一层对象，使用对象的 value setting、value getter 函数拦截并操作 value 属性，达到响应式的效果。",{"type":170,"tag":171,"props":371,"children":373},{"id":372},"模板",[374],{"type":176,"value":372},{"type":170,"tag":211,"props":376,"children":378},{"id":377},"vue3-双向绑定的原理",[379],{"type":176,"value":380},"Vue3 双向绑定的原理？",{"type":170,"tag":242,"props":382,"children":383},{},[384,385],{"type":176,"value":346},{"type":170,"tag":187,"props":386,"children":389},{"href":387,"rel":388},"https://segmentfault.com/a/1190000041716718",[191],[390],{"type":176,"value":391},"TODO，Vue.js 3.x 双向绑定原理",{"type":170,"tag":171,"props":393,"children":395},{"id":394},"编译器",[396],{"type":176,"value":394},{"type":170,"tag":211,"props":398,"children":400},{"id":399},"vue3-做的静态优化有哪些",[401],{"type":176,"value":402},"Vue3 做的静态优化有哪些？",{"type":170,"tag":242,"props":404,"children":405},{},[406],{"type":170,"tag":407,"props":408,"children":411},"img",{"alt":409,"src":410},"Vue3 Compiler Example","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628022452.png",[],{"type":170,"tag":171,"props":413,"children":415},{"id":414},"vdom",[416],{"type":176,"value":417},"VDOM",{"type":170,"tag":211,"props":419,"children":421},{"id":420},"vue2-和-vue3-的-dom-diff-算法有什么不同",[422],{"type":176,"value":423},"Vue2 和 Vue3 的 DOM Diff 算法有什么不同？",{"type":170,"tag":242,"props":425,"children":426},{},[427],{"type":176,"value":428},"Vue2 使用双端 diff，Vue3 使用最长递增子序列。",{"type":170,"tag":430,"props":431,"children":433},"h3",{"id":432},"todo-1",[434],{"type":176,"value":177},{"type":170,"tag":242,"props":436,"children":437},{},[438,440],{"type":176,"value":439},"为什么 React 的 Diff 算法不采用 Vue 的双端对比算法？",{"type":170,"tag":187,"props":441,"children":444},{"href":442,"rel":443},"https://juejin.cn/post/7116141318853623839",[191],[445],{"type":176,"value":442},{"type":170,"tag":242,"props":447,"children":448},{},[449,451],{"type":176,"value":450},"diff 算法深入一下？",{"type":170,"tag":187,"props":452,"children":455},{"href":453,"rel":454},"https://zhuanlan.zhihu.com/p/401340016",[191],[456],{"type":176,"value":453},{"type":170,"tag":242,"props":458,"children":459},{},[460,462],{"type":176,"value":461},"聊聊 Vue 的双端 diff 算法 ",{"type":170,"tag":187,"props":463,"children":466},{"href":464,"rel":465},"https://zhuanlan.zhihu.com/p/534903909",[191],[467],{"type":176,"value":464},{"type":170,"tag":242,"props":469,"children":470},{},[471,473],{"type":176,"value":472},"diff 算法之双端对比 ",{"type":170,"tag":187,"props":474,"children":477},{"href":475,"rel":476},"https://zhuanlan.zhihu.com/p/432927438",[191],[478],{"type":176,"value":475},{"type":170,"tag":171,"props":480,"children":482},{"id":481},"组件",[483],{"type":176,"value":481},{"type":170,"tag":211,"props":485,"children":487},{"id":486},"keep-alive-的理解它是如何实现的具体缓存的是什么",[488],{"type":176,"value":489},"keep-alive 的理解，它是如何实现的，具体缓存的是什么？",{"type":170,"tag":242,"props":491,"children":492},{},[493],{"type":176,"value":494},"keep-alive 是一个内置抽象组件，会根据内部组件的 key，使用 LRU 策略来缓存组件实例。",{"type":170,"tag":211,"props":496,"children":498},{"id":497},"vue-的生命周期",[499],{"type":176,"value":500},"Vue 的生命周期",{"type":170,"tag":242,"props":502,"children":503},{},[504],{"type":176,"value":505},"keep-alive 独有 activated 和 deactivated 两个生命周期。",{"type":170,"tag":211,"props":507,"children":509},{"id":508},"vue-子组件和父组件执行顺序",[510],{"type":176,"value":511},"Vue 子组件和父组件执行顺序",{"type":170,"tag":242,"props":513,"children":514},{},[515],{"type":176,"value":516},"父组件 mount 前，初始化子组件，所以父组件 beforeMount 后直到子组件 mounted 完成，再挂载。update 和 destroy 两个阶段类似，都是子组件先行。",{"type":170,"tag":171,"props":518,"children":520},{"id":519},"vue-router",[521],{"type":176,"value":522},"Vue Router",{"type":170,"tag":211,"props":524,"children":526},{"id":525},"route-vs-router",[527],{"type":176,"value":528},"$route VS $router",{"type":170,"tag":242,"props":530,"children":531},{},[532],{"type":176,"value":533},"$route 是路由信息对象，包含 path、params、hash、query 等，$router 是 vue-router 实例，包含路由跳转方法和钩子函数等。",{"type":170,"tag":171,"props":535,"children":537},{"id":536},"ssr",[538],{"type":176,"value":539},"SSR",{"type":170,"tag":242,"props":541,"children":542},{},[543],{"type":176,"value":177},{"type":170,"tag":242,"props":545,"children":546},{},[547],{"type":170,"tag":187,"props":548,"children":551},{"href":549,"rel":550},"https://vuejs.org/guide/scaling-up/ssr.html",[191],[552],{"type":176,"value":553},"Vue SSR",{"type":170,"tag":171,"props":555,"children":557},{"id":556},"with-typescript",[558],{"type":176,"value":559},"with TypeScript",{"type":170,"tag":211,"props":561,"children":563},{"id":562},"using-vue-with-typescript",[564],{"type":170,"tag":187,"props":565,"children":568},{"href":566,"rel":567},"https://vuejs.org/guide/typescript/overview.html",[191],[569],{"type":176,"value":570},"Using Vue with TypeScript",{"type":170,"tag":242,"props":572,"children":573},{},[574],{"type":176,"value":575},"\"With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking.\"",{"type":170,"tag":242,"props":577,"children":578},{},[579],{"type":176,"value":580},"Vite-based 的项目不会在开发服务器启用类型检查。Vue 推荐开发者依赖 IDE 进行类型检查，或使用 vue-tsc watch mode、使用 vite-plugin-checker 另起线程插件。Vue 认为类型检查降低开发环境的速度是不值得的。",{"type":170,"tag":242,"props":582,"children":583},{},[584],{"type":176,"value":585},"两个 tsconfig.json 编译选项必须开启：isolatedModule 以便允许 esbuild 解析模块、noImplicitThis 以便启用 this 的类型。",{"type":170,"tag":242,"props":587,"children":588},{},[589],{"type":176,"value":590},"“but for each project we are running two TS language service instances: one from Volar, one from VSCode's built-in service”",{"type":170,"tag":242,"props":592,"children":593},{},[594,596,603],{"type":176,"value":595},"禁用 ",{"type":170,"tag":597,"props":598,"children":600},"code",{"className":599},[],[601],{"type":176,"value":602},"@builtin",{"type":176,"value":604}," TS 插件或打开 Volar 的 Takeover Mode，重启后便能使 Takeover Mode 生效。",{"type":170,"tag":242,"props":606,"children":607},{},[608,610,616],{"type":176,"value":609},"“... with ",{"type":170,"tag":597,"props":611,"children":613},{"className":612},[],[614],{"type":176,"value":615},"ts-loader",{"type":176,"value":617},". This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks”",{"type":170,"tag":242,"props":619,"children":620},{},[621],{"type":176,"value":622},"使用 loader 用来类型检查的两个缺陷：检测缓慢阻塞编译、只能解析预解析后的文件所以报错不能直接跳转回源码。",{"type":170,"tag":242,"props":624,"children":625},{},[626,628,634],{"type":176,"value":627},"“In version 3.2 and below, the generic type parameter for ",{"type":170,"tag":597,"props":629,"children":631},{"className":630},[],[632],{"type":176,"value":633},"defineProps()",{"type":176,"value":635}," were limited to a type literal or a reference to a local interface. This limitation has been resolved in 3.3.”",{"type":170,"tag":242,"props":637,"children":638},{},[639],{"type":176,"value":640},"TODO。为什么 Vue 3.2 不能使用外部引入的 Props 作为 type-based defineProps？Vue 3.3 是如何解决的？runtime-declare defineProps 和 runtime-declare emits 会不会对性能有影响？",{"type":170,"tag":242,"props":642,"children":643},{},[644,646,652],{"type":176,"value":645},"“specify a generic type argument but omit the initial value, the resulting type will be a union type that includes ",{"type":170,"tag":597,"props":647,"children":649},{"className":648},[],[650],{"type":176,"value":651},"undefined",{"type":176,"value":653},"”",{"type":170,"tag":242,"props":655,"children":656},{},[657],{"type":176,"value":658},"如果不包含初始值，ref 的类型推断会自动包含 undefined。",{"type":170,"tag":660,"props":661,"children":665},"pre",{"className":662,"code":663,"language":664,"meta":163,"style":163},"language-vue shiki shiki-themes material-theme-lighter github-light github-dark monokai","// inferred type: Ref\u003Cnumber | undefined>\nconst n = ref\u003Cnumber>()\n","vue",[666],{"type":170,"tag":597,"props":667,"children":668},{"__ignoreMap":163},[669,709],{"type":170,"tag":670,"props":671,"children":674},"span",{"class":672,"line":673},"line",1,[675,681,687,693,699,704],{"type":170,"tag":670,"props":676,"children":678},{"style":677},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[679],{"type":176,"value":680},"// inferred type: Ref",{"type":170,"tag":670,"props":682,"children":684},{"style":683},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[685],{"type":176,"value":686},"\u003C",{"type":170,"tag":670,"props":688,"children":690},{"style":689},"--shiki-light:#E53935;--shiki-default:#22863A;--shiki-dark:#85E89D;--shiki-sepia:#F92672",[691],{"type":176,"value":692},"number",{"type":170,"tag":670,"props":694,"children":696},{"style":695},"--shiki-light:#9C3EDA;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[697],{"type":176,"value":698}," |",{"type":170,"tag":670,"props":700,"children":701},{"style":695},[702],{"type":176,"value":703}," undefined",{"type":170,"tag":670,"props":705,"children":706},{"style":683},[707],{"type":176,"value":708},">\n",{"type":170,"tag":670,"props":710,"children":712},{"class":672,"line":711},2,[713],{"type":170,"tag":670,"props":714,"children":715},{"style":677},[716],{"type":176,"value":717},"const n = ref\u003Cnumber>()\n",{"type":170,"tag":242,"props":719,"children":720},{},[721,723,729,731,737,739,745,747,753,755,761],{"type":176,"value":722},"”Without type annotation, the ",{"type":170,"tag":597,"props":724,"children":726},{"className":725},[],[727],{"type":176,"value":728},"event",{"type":176,"value":730}," argument will implicitly have a type of ",{"type":170,"tag":597,"props":732,"children":734},{"className":733},[],[735],{"type":176,"value":736},"any",{"type":176,"value":738},". This will also result in a TS error if ",{"type":170,"tag":597,"props":740,"children":742},{"className":741},[],[743],{"type":176,"value":744},"\"strict\": true",{"type":176,"value":746}," or ",{"type":170,"tag":597,"props":748,"children":750},{"className":749},[],[751],{"type":176,"value":752},"\"noImplicitAny\": true",{"type":176,"value":754}," are used in ",{"type":170,"tag":597,"props":756,"children":758},{"className":757},[],[759],{"type":176,"value":760},"tsconfig.json",{"type":176,"value":762},".“",{"type":170,"tag":242,"props":764,"children":765},{},[766],{"type":176,"value":767},"因为 noImplicitAny 需要打开，不然没法推断 options api 函数中 this 的类型，所以在组件中，接受事件的函数面对 Event 参数必须显式指定类型，不然就会报错。",{"type":170,"tag":769,"props":770,"children":771},"style",{},[772],{"type":176,"value":773},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":711,"depth":711,"links":775},[776,777,778,779,780,781,785,786,787,788],{"id":173,"depth":711,"text":177},{"id":207,"depth":711,"text":207},{"id":356,"depth":711,"text":356},{"id":372,"depth":711,"text":372},{"id":394,"depth":711,"text":394},{"id":414,"depth":711,"text":417,"children":782},[783],{"id":432,"depth":784,"text":177},3,{"id":481,"depth":711,"text":481},{"id":519,"depth":711,"text":522},{"id":536,"depth":711,"text":539},{"id":556,"depth":711,"text":559},"markdown","content:6.maps:_fe-framework:ui:vue.md","content","6.maps/_fe-framework/ui/vue.md","6.maps/_fe-framework/ui/vue","md",[796,800],{"_path":797,"title":798,"description":799},"/maps/_fe-framework/ui/react","React Mind Map","React 是一个经典的用户界面框架。",{"_path":801,"title":802,"description":803},"/maps/_fe-framework/web-components","Web Components","Web Components 是一种 Web 开发技术，它允许开发者创建自定义的、可重用的组件，这些组件可以在不同的 Web 应用中使用。",1742808196818]