[{"data":1,"prerenderedAt":636},["ShallowReactive",2],{"navigation":3,"/maps/_software/design-patterns":155,"/maps/_software/design-patterns-surround":628},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":622,"_id":623,"_source":624,"_file":625,"_stem":626,"_extension":627},"/maps/_software/design-patterns","_software",false,true,"","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",{"type":164,"children":165,"toc":615},"root",[166,174,194,200,206,211,220,225,230,235,243,248,253,258,266,271,276,281,289,294,299,304,312,317,322,327,335,340,345,353,358,363,368,376,381,386,391,399,404,409,414,419,427,432,437,445,450,455,463,468,473,478,483,491,496,501,509,514,522,527,532,537,545,550,555,560,568,573,578,583,591,596,601],{"type":167,"tag":168,"props":169,"children":170},"element","p",{},[171],{"type":172,"value":173},"text","按照使用方式可以把设计模式划分为：创建型模式、结构型模式和行为模式。",{"type":167,"tag":175,"props":176,"children":177},"ul",{},[178,184,189],{"type":167,"tag":179,"props":180,"children":181},"li",{},[182],{"type":172,"value":183},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":167,"tag":179,"props":185,"children":186},{},[187],{"type":172,"value":188},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高效",{"type":167,"tag":179,"props":190,"children":191},{},[192],{"type":172,"value":193},"行为模式：提供对象间的沟通和职责分配",{"type":167,"tag":195,"props":196,"children":198},"h2",{"id":197},"创建型模式",[199],{"type":172,"value":197},{"type":167,"tag":201,"props":202,"children":204},"h4",{"id":203},"工厂",[205],{"type":172,"value":203},{"type":167,"tag":168,"props":207,"children":208},{},[209],{"type":172,"value":210},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":167,"tag":168,"props":212,"children":213},{},[214],{"type":167,"tag":215,"props":216,"children":219},"img",{"alt":217,"src":218},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":167,"tag":168,"props":221,"children":222},{},[223],{"type":172,"value":224},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":167,"tag":201,"props":226,"children":228},{"id":227},"抽象工厂",[229],{"type":172,"value":227},{"type":167,"tag":168,"props":231,"children":232},{},[233],{"type":172,"value":234},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":167,"tag":168,"props":236,"children":237},{},[238],{"type":167,"tag":215,"props":239,"children":242},{"alt":240,"src":241},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":167,"tag":168,"props":244,"children":245},{},[246],{"type":172,"value":247},"抽象工厂专注于生产一系列对象，举个例子，Weex 和 Web 版本的 ElementUI（假设有的话）就需要根据不同平台去初始化不同的具体工厂实例，再使用具体工厂实例去生成不同的组件。",{"type":167,"tag":201,"props":249,"children":251},{"id":250},"生成器",[252],{"type":172,"value":250},{"type":167,"tag":168,"props":254,"children":255},{},[256],{"type":172,"value":257},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。",{"type":167,"tag":168,"props":259,"children":260},{},[261],{"type":167,"tag":215,"props":262,"children":265},{"alt":263,"src":264},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":167,"tag":168,"props":267,"children":268},{},[269],{"type":172,"value":270},"从图中可以看到当前的主管结构和具体生成器是解耦的，也就是说客户端依赖具体生成器来获取生成结果，这在可能有产品不遵循通用生成器接口的时候有用。",{"type":167,"tag":201,"props":272,"children":274},{"id":273},"原型",[275],{"type":172,"value":273},{"type":167,"tag":168,"props":277,"children":278},{},[279],{"type":172,"value":280},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":167,"tag":168,"props":282,"children":283},{},[284],{"type":167,"tag":215,"props":285,"children":288},{"alt":286,"src":287},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":167,"tag":168,"props":290,"children":291},{},[292],{"type":172,"value":293},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":167,"tag":201,"props":295,"children":297},{"id":296},"单例",[298],{"type":172,"value":296},{"type":167,"tag":168,"props":300,"children":301},{},[302],{"type":172,"value":303},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":167,"tag":168,"props":305,"children":306},{},[307],{"type":167,"tag":215,"props":308,"children":311},{"alt":309,"src":310},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":167,"tag":195,"props":313,"children":315},{"id":314},"结构型模式",[316],{"type":172,"value":314},{"type":167,"tag":201,"props":318,"children":320},{"id":319},"适配器",[321],{"type":172,"value":319},{"type":167,"tag":168,"props":323,"children":324},{},[325],{"type":172,"value":326},"适配器使接口不兼容的对象能够相互合作。",{"type":167,"tag":168,"props":328,"children":329},{},[330],{"type":167,"tag":215,"props":331,"children":334},{"alt":332,"src":333},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":167,"tag":201,"props":336,"children":338},{"id":337},"桥接",[339],{"type":172,"value":337},{"type":167,"tag":168,"props":341,"children":342},{},[343],{"type":172,"value":344},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与 OO 中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":167,"tag":168,"props":346,"children":347},{},[348],{"type":167,"tag":215,"props":349,"children":352},{"alt":350,"src":351},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":167,"tag":168,"props":354,"children":355},{},[356],{"type":172,"value":357},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":167,"tag":201,"props":359,"children":361},{"id":360},"组合",[362],{"type":172,"value":360},{"type":167,"tag":168,"props":364,"children":365},{},[366],{"type":172,"value":367},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":167,"tag":168,"props":369,"children":370},{},[371],{"type":167,"tag":215,"props":372,"children":375},{"alt":373,"src":374},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":167,"tag":168,"props":377,"children":378},{},[379],{"type":172,"value":380},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":167,"tag":201,"props":382,"children":384},{"id":383},"装饰",[385],{"type":172,"value":383},{"type":167,"tag":168,"props":387,"children":388},{},[389],{"type":172,"value":390},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":167,"tag":168,"props":392,"children":393},{},[394],{"type":167,"tag":215,"props":395,"children":398},{"alt":396,"src":397},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":167,"tag":168,"props":400,"children":401},{},[402],{"type":172,"value":403},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":167,"tag":168,"props":405,"children":406},{},[407],{"type":172,"value":408},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":167,"tag":201,"props":410,"children":412},{"id":411},"外观",[413],{"type":172,"value":411},{"type":167,"tag":168,"props":415,"children":416},{},[417],{"type":172,"value":418},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":167,"tag":168,"props":420,"children":421},{},[422],{"type":167,"tag":215,"props":423,"children":426},{"alt":424,"src":425},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":167,"tag":201,"props":428,"children":430},{"id":429},"享元",[431],{"type":172,"value":429},{"type":167,"tag":168,"props":433,"children":434},{},[435],{"type":172,"value":436},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":167,"tag":168,"props":438,"children":439},{},[440],{"type":167,"tag":215,"props":441,"children":444},{"alt":442,"src":443},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":167,"tag":201,"props":446,"children":448},{"id":447},"代理",[449],{"type":172,"value":447},{"type":167,"tag":168,"props":451,"children":452},{},[453],{"type":172,"value":454},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":167,"tag":168,"props":456,"children":457},{},[458],{"type":167,"tag":215,"props":459,"children":462},{"alt":460,"src":461},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":167,"tag":168,"props":464,"children":465},{},[466],{"type":172,"value":467},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":167,"tag":195,"props":469,"children":471},{"id":470},"行为模式",[472],{"type":172,"value":470},{"type":167,"tag":201,"props":474,"children":476},{"id":475},"责任链",[477],{"type":172,"value":475},{"type":167,"tag":168,"props":479,"children":480},{},[481],{"type":172,"value":482},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":167,"tag":168,"props":484,"children":485},{},[486],{"type":167,"tag":215,"props":487,"children":490},{"alt":488,"src":489},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":167,"tag":201,"props":492,"children":494},{"id":493},"命令",[495],{"type":172,"value":493},{"type":167,"tag":168,"props":497,"children":498},{},[499],{"type":172,"value":500},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":167,"tag":168,"props":502,"children":503},{},[504],{"type":167,"tag":215,"props":505,"children":508},{"alt":506,"src":507},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":167,"tag":168,"props":510,"children":511},{},[512],{"type":172,"value":513},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":167,"tag":168,"props":515,"children":516},{},[517],{"type":167,"tag":215,"props":518,"children":521},{"alt":519,"src":520},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":167,"tag":168,"props":523,"children":524},{},[525],{"type":172,"value":526},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":167,"tag":201,"props":528,"children":530},{"id":529},"中介者",[531],{"type":172,"value":529},{"type":167,"tag":168,"props":533,"children":534},{},[535],{"type":172,"value":536},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":167,"tag":168,"props":538,"children":539},{},[540],{"type":167,"tag":215,"props":541,"children":544},{"alt":542,"src":543},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":167,"tag":168,"props":546,"children":547},{},[548],{"type":172,"value":549},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":167,"tag":201,"props":551,"children":553},{"id":552},"备忘录",[554],{"type":172,"value":552},{"type":167,"tag":168,"props":556,"children":557},{},[558],{"type":172,"value":559},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":167,"tag":168,"props":561,"children":562},{},[563],{"type":167,"tag":215,"props":564,"children":567},{"alt":565,"src":566},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":167,"tag":168,"props":569,"children":570},{},[571],{"type":172,"value":572},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":167,"tag":201,"props":574,"children":576},{"id":575},"观察者",[577],{"type":172,"value":575},{"type":167,"tag":168,"props":579,"children":580},{},[581],{"type":172,"value":582},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":167,"tag":168,"props":584,"children":585},{},[586],{"type":167,"tag":215,"props":587,"children":590},{"alt":588,"src":589},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":167,"tag":168,"props":592,"children":593},{},[594],{"type":172,"value":595},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"type":167,"tag":195,"props":597,"children":599},{"id":598},"相关",[600],{"type":172,"value":598},{"type":167,"tag":175,"props":602,"children":603},{},[604],{"type":167,"tag":179,"props":605,"children":606},{},[607,613],{"type":167,"tag":608,"props":609,"children":610},"a",{"href":70},[611],{"type":172,"value":612},"《🍲 设计模式与 JS 魔法锅》",{"type":172,"value":614},"（⭐⭐⭐⭐）",{"title":160,"searchDepth":616,"depth":616,"links":617},2,[618,619,620,621],{"id":197,"depth":616,"text":197},{"id":314,"depth":616,"text":314},{"id":470,"depth":616,"text":470},{"id":598,"depth":616,"text":598},"markdown","content:6.maps:_software:design-patterns.md","content","6.maps/_software/design-patterns.md","6.maps/_software/design-patterns","md",[629,633],{"_path":630,"title":631,"description":632},"/maps/_software/data-structure","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"_path":634,"title":635,"description":160},"/maps/_source-code/javascript/evil","Evil.js",1742348684119]