[{"data":1,"prerenderedAt":724},["ShallowReactive",2],{"navigation":3,"/maps/_software/design-patterns":161,"/maps/_software/design-patterns-surround":716},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":710,"_id":711,"_source":712,"_file":713,"_stem":714,"_extension":715},"/maps/_software/design-patterns","_software",false,true,"","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",{"type":170,"children":171,"toc":703},"root",[172,187,194,199,219,225,230,235,244,249,262,267,272,280,285,296,301,306,314,319,330,335,340,348,353,364,369,374,382,393,398,403,408,416,421,426,434,439,444,449,457,462,467,472,480,485,490,495,500,508,513,518,526,531,536,544,549,554,559,564,572,577,582,590,595,603,608,613,618,626,631,636,641,649,654,659,664,672,677,682],{"type":173,"tag":174,"props":175,"children":176},"element","p",{},[177,180],{"type":178,"value":179},"text","相关：",{"type":173,"tag":181,"props":182,"children":184},"a",{"href":183},"/maps/_oop/oop",[185],{"type":178,"value":186},"OOP",{"type":173,"tag":188,"props":189,"children":191},"h4",{"id":190},"设计模式怎么划分类别",[192],{"type":178,"value":193},"设计模式怎么划分类别？",{"type":173,"tag":174,"props":195,"children":196},{},[197],{"type":178,"value":198},"按照使用方式可以把设计模式划分为：创建型模式、结构型模式和行为模式。",{"type":173,"tag":200,"props":201,"children":202},"ul",{},[203,209,214],{"type":173,"tag":204,"props":205,"children":206},"li",{},[207],{"type":178,"value":208},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":173,"tag":204,"props":210,"children":211},{},[212],{"type":178,"value":213},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高效",{"type":173,"tag":204,"props":215,"children":216},{},[217],{"type":178,"value":218},"行为模式：提供对象间的沟通和职责分配",{"type":173,"tag":220,"props":221,"children":223},"h2",{"id":222},"创建型模式",[224],{"type":178,"value":222},{"type":173,"tag":188,"props":226,"children":228},{"id":227},"工厂",[229],{"type":178,"value":227},{"type":173,"tag":174,"props":231,"children":232},{},[233],{"type":178,"value":234},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":173,"tag":174,"props":236,"children":237},{},[238],{"type":173,"tag":239,"props":240,"children":243},"img",{"alt":241,"src":242},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":173,"tag":174,"props":245,"children":246},{},[247],{"type":178,"value":248},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":173,"tag":174,"props":250,"children":251},{},[252,254],{"type":178,"value":253},"见：",{"type":173,"tag":181,"props":255,"children":259},{"href":256,"rel":257},"https://refactoringguru.cn/design-patterns/factory-method",[258],"nofollow",[260],{"type":178,"value":261},"工厂方法模式 @RefactoringGuru",{"type":173,"tag":188,"props":263,"children":265},{"id":264},"抽象工厂",[266],{"type":178,"value":264},{"type":173,"tag":174,"props":268,"children":269},{},[270],{"type":178,"value":271},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":173,"tag":174,"props":273,"children":274},{},[275],{"type":173,"tag":239,"props":276,"children":279},{"alt":277,"src":278},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":173,"tag":174,"props":281,"children":282},{},[283],{"type":178,"value":284},"举个例子，家具工厂（抽象工厂）可以生产椅子和桌子（抽象产品），每一个家具厂（具体工厂）都可以生产不同风格的椅子和桌子（具体产品）。",{"type":173,"tag":174,"props":286,"children":287},{},[288,289],{"type":178,"value":253},{"type":173,"tag":181,"props":290,"children":293},{"href":291,"rel":292},"https://refactoringguru.cn/design-patterns/abstract-factory",[258],[294],{"type":178,"value":295},"抽象工厂模式 @RefactoringGuru",{"type":173,"tag":188,"props":297,"children":299},{"id":298},"生成器",[300],{"type":178,"value":298},{"type":173,"tag":174,"props":302,"children":303},{},[304],{"type":178,"value":305},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的函数参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。",{"type":173,"tag":174,"props":307,"children":308},{},[309],{"type":173,"tag":239,"props":310,"children":313},{"alt":311,"src":312},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":173,"tag":174,"props":315,"children":316},{},[317],{"type":178,"value":318},"由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。举例来说，汽车生产导演可以控制汽车的生产流程，选择生产 SUV 或是跑车，而汽车生产者（Builder）则负责生产汽车的各个部分，如 GPS、引擎、轮子等。",{"type":173,"tag":174,"props":320,"children":321},{},[322,323],{"type":178,"value":253},{"type":173,"tag":181,"props":324,"children":327},{"href":325,"rel":326},"https://refactoringguru.cn/design-patterns/builder",[258],[328],{"type":178,"value":329},"生成器模式 @RefactoringGuru",{"type":173,"tag":188,"props":331,"children":333},{"id":332},"原型",[334],{"type":178,"value":332},{"type":173,"tag":174,"props":336,"children":337},{},[338],{"type":178,"value":339},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":173,"tag":174,"props":341,"children":342},{},[343],{"type":173,"tag":239,"props":344,"children":347},{"alt":345,"src":346},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":173,"tag":174,"props":349,"children":350},{},[351],{"type":178,"value":352},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":173,"tag":174,"props":354,"children":355},{},[356,357],{"type":178,"value":253},{"type":173,"tag":181,"props":358,"children":361},{"href":359,"rel":360},"https://refactoringguru.cn/design-patterns/prototype",[258],[362],{"type":178,"value":363},"原型模式 @RefactoringGuru",{"type":173,"tag":188,"props":365,"children":367},{"id":366},"单例",[368],{"type":178,"value":366},{"type":173,"tag":174,"props":370,"children":371},{},[372],{"type":178,"value":373},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":173,"tag":174,"props":375,"children":376},{},[377],{"type":173,"tag":239,"props":378,"children":381},{"alt":379,"src":380},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":173,"tag":174,"props":383,"children":384},{},[385,386],{"type":178,"value":253},{"type":173,"tag":181,"props":387,"children":390},{"href":388,"rel":389},"https://refactoringguru.cn/design-patterns/singleton",[258],[391],{"type":178,"value":392},"单例模式 @RefactoringGuru",{"type":173,"tag":220,"props":394,"children":396},{"id":395},"结构型模式",[397],{"type":178,"value":395},{"type":173,"tag":188,"props":399,"children":401},{"id":400},"适配器",[402],{"type":178,"value":400},{"type":173,"tag":174,"props":404,"children":405},{},[406],{"type":178,"value":407},"适配器使接口不兼容的对象能够相互合作。",{"type":173,"tag":174,"props":409,"children":410},{},[411],{"type":173,"tag":239,"props":412,"children":415},{"alt":413,"src":414},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":173,"tag":188,"props":417,"children":419},{"id":418},"桥接",[420],{"type":178,"value":418},{"type":173,"tag":174,"props":422,"children":423},{},[424],{"type":178,"value":425},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与 OO 中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":173,"tag":174,"props":427,"children":428},{},[429],{"type":173,"tag":239,"props":430,"children":433},{"alt":431,"src":432},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":173,"tag":174,"props":435,"children":436},{},[437],{"type":178,"value":438},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":173,"tag":188,"props":440,"children":442},{"id":441},"组合",[443],{"type":178,"value":441},{"type":173,"tag":174,"props":445,"children":446},{},[447],{"type":178,"value":448},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":173,"tag":174,"props":450,"children":451},{},[452],{"type":173,"tag":239,"props":453,"children":456},{"alt":454,"src":455},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":173,"tag":174,"props":458,"children":459},{},[460],{"type":178,"value":461},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":173,"tag":188,"props":463,"children":465},{"id":464},"装饰",[466],{"type":178,"value":464},{"type":173,"tag":174,"props":468,"children":469},{},[470],{"type":178,"value":471},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":173,"tag":174,"props":473,"children":474},{},[475],{"type":173,"tag":239,"props":476,"children":479},{"alt":477,"src":478},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":173,"tag":174,"props":481,"children":482},{},[483],{"type":178,"value":484},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":173,"tag":174,"props":486,"children":487},{},[488],{"type":178,"value":489},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":173,"tag":188,"props":491,"children":493},{"id":492},"外观",[494],{"type":178,"value":492},{"type":173,"tag":174,"props":496,"children":497},{},[498],{"type":178,"value":499},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":173,"tag":174,"props":501,"children":502},{},[503],{"type":173,"tag":239,"props":504,"children":507},{"alt":505,"src":506},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":173,"tag":188,"props":509,"children":511},{"id":510},"享元",[512],{"type":178,"value":510},{"type":173,"tag":174,"props":514,"children":515},{},[516],{"type":178,"value":517},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":173,"tag":174,"props":519,"children":520},{},[521],{"type":173,"tag":239,"props":522,"children":525},{"alt":523,"src":524},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":173,"tag":188,"props":527,"children":529},{"id":528},"代理",[530],{"type":178,"value":528},{"type":173,"tag":174,"props":532,"children":533},{},[534],{"type":178,"value":535},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":173,"tag":174,"props":537,"children":538},{},[539],{"type":173,"tag":239,"props":540,"children":543},{"alt":541,"src":542},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":173,"tag":174,"props":545,"children":546},{},[547],{"type":178,"value":548},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":173,"tag":220,"props":550,"children":552},{"id":551},"行为模式",[553],{"type":178,"value":551},{"type":173,"tag":188,"props":555,"children":557},{"id":556},"责任链",[558],{"type":178,"value":556},{"type":173,"tag":174,"props":560,"children":561},{},[562],{"type":178,"value":563},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":173,"tag":174,"props":565,"children":566},{},[567],{"type":173,"tag":239,"props":568,"children":571},{"alt":569,"src":570},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":173,"tag":188,"props":573,"children":575},{"id":574},"命令",[576],{"type":178,"value":574},{"type":173,"tag":174,"props":578,"children":579},{},[580],{"type":178,"value":581},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":173,"tag":174,"props":583,"children":584},{},[585],{"type":173,"tag":239,"props":586,"children":589},{"alt":587,"src":588},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":173,"tag":174,"props":591,"children":592},{},[593],{"type":178,"value":594},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":173,"tag":174,"props":596,"children":597},{},[598],{"type":173,"tag":239,"props":599,"children":602},{"alt":600,"src":601},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":173,"tag":174,"props":604,"children":605},{},[606],{"type":178,"value":607},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":173,"tag":188,"props":609,"children":611},{"id":610},"中介者",[612],{"type":178,"value":610},{"type":173,"tag":174,"props":614,"children":615},{},[616],{"type":178,"value":617},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":173,"tag":174,"props":619,"children":620},{},[621],{"type":173,"tag":239,"props":622,"children":625},{"alt":623,"src":624},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":173,"tag":174,"props":627,"children":628},{},[629],{"type":178,"value":630},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":173,"tag":188,"props":632,"children":634},{"id":633},"备忘录",[635],{"type":178,"value":633},{"type":173,"tag":174,"props":637,"children":638},{},[639],{"type":178,"value":640},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":173,"tag":174,"props":642,"children":643},{},[644],{"type":173,"tag":239,"props":645,"children":648},{"alt":646,"src":647},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":173,"tag":174,"props":650,"children":651},{},[652],{"type":178,"value":653},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":173,"tag":188,"props":655,"children":657},{"id":656},"观察者",[658],{"type":178,"value":656},{"type":173,"tag":174,"props":660,"children":661},{},[662],{"type":178,"value":663},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":173,"tag":174,"props":665,"children":666},{},[667],{"type":173,"tag":239,"props":668,"children":671},{"alt":669,"src":670},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":173,"tag":174,"props":673,"children":674},{},[675],{"type":178,"value":676},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"type":173,"tag":220,"props":678,"children":680},{"id":679},"阅读",[681],{"type":178,"value":679},{"type":173,"tag":200,"props":683,"children":684},{},[685,693],{"type":173,"tag":204,"props":686,"children":687},{},[688],{"type":173,"tag":181,"props":689,"children":690},{"href":76},[691],{"type":178,"value":692},"设计模式与 JS 魔法锅",{"type":173,"tag":204,"props":694,"children":695},{},[696],{"type":173,"tag":181,"props":697,"children":700},{"href":698,"rel":699},"https://www.patterns.dev/vue/",[258],[701],{"type":178,"value":702},"Vue Patterns",{"title":166,"searchDepth":704,"depth":704,"links":705},2,[706,707,708,709],{"id":222,"depth":704,"text":222},{"id":395,"depth":704,"text":395},{"id":551,"depth":704,"text":551},{"id":679,"depth":704,"text":679},"markdown","content:6.maps:_software:design-patterns.md","content","6.maps/_software/design-patterns.md","6.maps/_software/design-patterns","md",[717,721],{"_path":718,"title":719,"description":720},"/maps/_software/data-structure","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"_path":722,"title":723,"description":166},"/maps/_source-code/javascript/evil","Evil.js",1749722330034]