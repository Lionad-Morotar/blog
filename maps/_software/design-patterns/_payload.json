[{"data":1,"prerenderedAt":718},["ShallowReactive",2],{"navigation":3,"/maps/_software/design-patterns":155,"/maps/_software/design-patterns-surround":710},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":704,"_id":705,"_source":706,"_file":707,"_stem":708,"_extension":709},"/maps/_software/design-patterns","_software",false,true,"","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",{"type":164,"children":165,"toc":697},"root",[166,181,188,193,213,219,224,229,238,243,256,261,266,274,279,290,295,300,308,313,324,329,334,342,347,358,363,368,376,387,392,397,402,410,415,420,428,433,438,443,451,456,461,466,474,479,484,489,494,502,507,512,520,525,530,538,543,548,553,558,566,571,576,584,589,597,602,607,612,620,625,630,635,643,648,653,658,666,671,676],{"type":167,"tag":168,"props":169,"children":170},"element","p",{},[171,174],{"type":172,"value":173},"text","相关：",{"type":167,"tag":175,"props":176,"children":178},"a",{"href":177},"/maps/_oop/oop",[179],{"type":172,"value":180},"OOP",{"type":167,"tag":182,"props":183,"children":185},"h4",{"id":184},"设计模式怎么划分类别",[186],{"type":172,"value":187},"设计模式怎么划分类别？",{"type":167,"tag":168,"props":189,"children":190},{},[191],{"type":172,"value":192},"按照使用方式可以把设计模式划分为：创建型模式、结构型模式和行为模式。",{"type":167,"tag":194,"props":195,"children":196},"ul",{},[197,203,208],{"type":167,"tag":198,"props":199,"children":200},"li",{},[201],{"type":172,"value":202},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":167,"tag":198,"props":204,"children":205},{},[206],{"type":172,"value":207},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高效",{"type":167,"tag":198,"props":209,"children":210},{},[211],{"type":172,"value":212},"行为模式：提供对象间的沟通和职责分配",{"type":167,"tag":214,"props":215,"children":217},"h2",{"id":216},"创建型模式",[218],{"type":172,"value":216},{"type":167,"tag":182,"props":220,"children":222},{"id":221},"工厂",[223],{"type":172,"value":221},{"type":167,"tag":168,"props":225,"children":226},{},[227],{"type":172,"value":228},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":167,"tag":168,"props":230,"children":231},{},[232],{"type":167,"tag":233,"props":234,"children":237},"img",{"alt":235,"src":236},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":167,"tag":168,"props":239,"children":240},{},[241],{"type":172,"value":242},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":167,"tag":168,"props":244,"children":245},{},[246,248],{"type":172,"value":247},"见：",{"type":167,"tag":175,"props":249,"children":253},{"href":250,"rel":251},"https://refactoringguru.cn/design-patterns/factory-method",[252],"nofollow",[254],{"type":172,"value":255},"工厂方法模式 @RefactoringGuru",{"type":167,"tag":182,"props":257,"children":259},{"id":258},"抽象工厂",[260],{"type":172,"value":258},{"type":167,"tag":168,"props":262,"children":263},{},[264],{"type":172,"value":265},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":167,"tag":168,"props":267,"children":268},{},[269],{"type":167,"tag":233,"props":270,"children":273},{"alt":271,"src":272},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":167,"tag":168,"props":275,"children":276},{},[277],{"type":172,"value":278},"举个例子，家具工厂（抽象工厂）可以生产椅子和桌子（抽象产品），每一个家具厂（具体工厂）都可以生产不同风格的椅子和桌子（具体产品）。",{"type":167,"tag":168,"props":280,"children":281},{},[282,283],{"type":172,"value":247},{"type":167,"tag":175,"props":284,"children":287},{"href":285,"rel":286},"https://refactoringguru.cn/design-patterns/abstract-factory",[252],[288],{"type":172,"value":289},"抽象工厂模式 @RefactoringGuru",{"type":167,"tag":182,"props":291,"children":293},{"id":292},"生成器",[294],{"type":172,"value":292},{"type":167,"tag":168,"props":296,"children":297},{},[298],{"type":172,"value":299},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的函数参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。",{"type":167,"tag":168,"props":301,"children":302},{},[303],{"type":167,"tag":233,"props":304,"children":307},{"alt":305,"src":306},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":167,"tag":168,"props":309,"children":310},{},[311],{"type":172,"value":312},"由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。举例来说，汽车生产导演可以控制汽车的生产流程，选择生产 SUV 或是跑车，而汽车生产者（Builder）则负责生产汽车的各个部分，如 GPS、引擎、轮子等。",{"type":167,"tag":168,"props":314,"children":315},{},[316,317],{"type":172,"value":247},{"type":167,"tag":175,"props":318,"children":321},{"href":319,"rel":320},"https://refactoringguru.cn/design-patterns/builder",[252],[322],{"type":172,"value":323},"生成器模式 @RefactoringGuru",{"type":167,"tag":182,"props":325,"children":327},{"id":326},"原型",[328],{"type":172,"value":326},{"type":167,"tag":168,"props":330,"children":331},{},[332],{"type":172,"value":333},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":167,"tag":168,"props":335,"children":336},{},[337],{"type":167,"tag":233,"props":338,"children":341},{"alt":339,"src":340},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":167,"tag":168,"props":343,"children":344},{},[345],{"type":172,"value":346},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":167,"tag":168,"props":348,"children":349},{},[350,351],{"type":172,"value":247},{"type":167,"tag":175,"props":352,"children":355},{"href":353,"rel":354},"https://refactoringguru.cn/design-patterns/prototype",[252],[356],{"type":172,"value":357},"原型模式 @RefactoringGuru",{"type":167,"tag":182,"props":359,"children":361},{"id":360},"单例",[362],{"type":172,"value":360},{"type":167,"tag":168,"props":364,"children":365},{},[366],{"type":172,"value":367},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":167,"tag":168,"props":369,"children":370},{},[371],{"type":167,"tag":233,"props":372,"children":375},{"alt":373,"src":374},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":167,"tag":168,"props":377,"children":378},{},[379,380],{"type":172,"value":247},{"type":167,"tag":175,"props":381,"children":384},{"href":382,"rel":383},"https://refactoringguru.cn/design-patterns/singleton",[252],[385],{"type":172,"value":386},"单例模式 @RefactoringGuru",{"type":167,"tag":214,"props":388,"children":390},{"id":389},"结构型模式",[391],{"type":172,"value":389},{"type":167,"tag":182,"props":393,"children":395},{"id":394},"适配器",[396],{"type":172,"value":394},{"type":167,"tag":168,"props":398,"children":399},{},[400],{"type":172,"value":401},"适配器使接口不兼容的对象能够相互合作。",{"type":167,"tag":168,"props":403,"children":404},{},[405],{"type":167,"tag":233,"props":406,"children":409},{"alt":407,"src":408},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":167,"tag":182,"props":411,"children":413},{"id":412},"桥接",[414],{"type":172,"value":412},{"type":167,"tag":168,"props":416,"children":417},{},[418],{"type":172,"value":419},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与 OO 中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":167,"tag":168,"props":421,"children":422},{},[423],{"type":167,"tag":233,"props":424,"children":427},{"alt":425,"src":426},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":167,"tag":168,"props":429,"children":430},{},[431],{"type":172,"value":432},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":167,"tag":182,"props":434,"children":436},{"id":435},"组合",[437],{"type":172,"value":435},{"type":167,"tag":168,"props":439,"children":440},{},[441],{"type":172,"value":442},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":167,"tag":168,"props":444,"children":445},{},[446],{"type":167,"tag":233,"props":447,"children":450},{"alt":448,"src":449},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":167,"tag":168,"props":452,"children":453},{},[454],{"type":172,"value":455},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":167,"tag":182,"props":457,"children":459},{"id":458},"装饰",[460],{"type":172,"value":458},{"type":167,"tag":168,"props":462,"children":463},{},[464],{"type":172,"value":465},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":167,"tag":168,"props":467,"children":468},{},[469],{"type":167,"tag":233,"props":470,"children":473},{"alt":471,"src":472},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":167,"tag":168,"props":475,"children":476},{},[477],{"type":172,"value":478},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":167,"tag":168,"props":480,"children":481},{},[482],{"type":172,"value":483},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":167,"tag":182,"props":485,"children":487},{"id":486},"外观",[488],{"type":172,"value":486},{"type":167,"tag":168,"props":490,"children":491},{},[492],{"type":172,"value":493},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":167,"tag":168,"props":495,"children":496},{},[497],{"type":167,"tag":233,"props":498,"children":501},{"alt":499,"src":500},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":167,"tag":182,"props":503,"children":505},{"id":504},"享元",[506],{"type":172,"value":504},{"type":167,"tag":168,"props":508,"children":509},{},[510],{"type":172,"value":511},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":167,"tag":168,"props":513,"children":514},{},[515],{"type":167,"tag":233,"props":516,"children":519},{"alt":517,"src":518},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":167,"tag":182,"props":521,"children":523},{"id":522},"代理",[524],{"type":172,"value":522},{"type":167,"tag":168,"props":526,"children":527},{},[528],{"type":172,"value":529},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":167,"tag":168,"props":531,"children":532},{},[533],{"type":167,"tag":233,"props":534,"children":537},{"alt":535,"src":536},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":167,"tag":168,"props":539,"children":540},{},[541],{"type":172,"value":542},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":167,"tag":214,"props":544,"children":546},{"id":545},"行为模式",[547],{"type":172,"value":545},{"type":167,"tag":182,"props":549,"children":551},{"id":550},"责任链",[552],{"type":172,"value":550},{"type":167,"tag":168,"props":554,"children":555},{},[556],{"type":172,"value":557},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":167,"tag":168,"props":559,"children":560},{},[561],{"type":167,"tag":233,"props":562,"children":565},{"alt":563,"src":564},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":167,"tag":182,"props":567,"children":569},{"id":568},"命令",[570],{"type":172,"value":568},{"type":167,"tag":168,"props":572,"children":573},{},[574],{"type":172,"value":575},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":167,"tag":168,"props":577,"children":578},{},[579],{"type":167,"tag":233,"props":580,"children":583},{"alt":581,"src":582},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":167,"tag":168,"props":585,"children":586},{},[587],{"type":172,"value":588},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":167,"tag":168,"props":590,"children":591},{},[592],{"type":167,"tag":233,"props":593,"children":596},{"alt":594,"src":595},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":167,"tag":168,"props":598,"children":599},{},[600],{"type":172,"value":601},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":167,"tag":182,"props":603,"children":605},{"id":604},"中介者",[606],{"type":172,"value":604},{"type":167,"tag":168,"props":608,"children":609},{},[610],{"type":172,"value":611},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":167,"tag":168,"props":613,"children":614},{},[615],{"type":167,"tag":233,"props":616,"children":619},{"alt":617,"src":618},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":167,"tag":168,"props":621,"children":622},{},[623],{"type":172,"value":624},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":167,"tag":182,"props":626,"children":628},{"id":627},"备忘录",[629],{"type":172,"value":627},{"type":167,"tag":168,"props":631,"children":632},{},[633],{"type":172,"value":634},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":167,"tag":168,"props":636,"children":637},{},[638],{"type":167,"tag":233,"props":639,"children":642},{"alt":640,"src":641},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":167,"tag":168,"props":644,"children":645},{},[646],{"type":172,"value":647},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":167,"tag":182,"props":649,"children":651},{"id":650},"观察者",[652],{"type":172,"value":650},{"type":167,"tag":168,"props":654,"children":655},{},[656],{"type":172,"value":657},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":167,"tag":168,"props":659,"children":660},{},[661],{"type":167,"tag":233,"props":662,"children":665},{"alt":663,"src":664},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":167,"tag":168,"props":667,"children":668},{},[669],{"type":172,"value":670},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"type":167,"tag":214,"props":672,"children":674},{"id":673},"阅读",[675],{"type":172,"value":673},{"type":167,"tag":194,"props":677,"children":678},{},[679,687],{"type":167,"tag":198,"props":680,"children":681},{},[682],{"type":167,"tag":175,"props":683,"children":684},{"href":70},[685],{"type":172,"value":686},"设计模式与 JS 魔法锅",{"type":167,"tag":198,"props":688,"children":689},{},[690],{"type":167,"tag":175,"props":691,"children":694},{"href":692,"rel":693},"https://www.patterns.dev/vue/",[252],[695],{"type":172,"value":696},"Vue Patterns",{"title":160,"searchDepth":698,"depth":698,"links":699},2,[700,701,702,703],{"id":216,"depth":698,"text":216},{"id":389,"depth":698,"text":389},{"id":545,"depth":698,"text":545},{"id":673,"depth":698,"text":673},"markdown","content:6.maps:_software:design-patterns.md","content","6.maps/_software/design-patterns.md","6.maps/_software/design-patterns","md",[711,715],{"_path":712,"title":713,"description":714},"/maps/_software/data-structure","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"_path":716,"title":717,"description":160},"/maps/_source-code/javascript/evil","Evil.js",1742745239404]