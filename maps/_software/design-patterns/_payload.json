[{"data":1,"prerenderedAt":874},["ShallowReactive",2],{"navigation":3,"/maps/_software/design-patterns":393,"/maps/_software/design-patterns-surround":866},[4,35,86,105,132,138,144,150,387],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"数字化转型","/gists/digital-transformation",{"title":205,"_path":206},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":208,"_path":209},"正则表达式","/gists/eegex",{"title":211,"_path":212},"Emoji","/gists/emoji",{"title":214,"_path":215},"工程","/gists/engineering",{"title":217,"_path":218},"熵","/gists/entropy",{"title":220,"_path":221},"Environment","/gists/environment",{"title":223,"_path":224},"Erlang","/gists/erlang",{"title":226,"_path":227},"逃离塔克夫","/gists/escape-from-tarkov",{"title":229,"_path":230},"ESNext (ES6-ES11)","/gists/esnext",{"title":232,"_path":233},"Eval！","/gists/eval",{"title":235,"_path":236},"Flutter","/gists/flutter",{"title":238,"_path":239},"字体","/gists/font",{"title":241,"_path":242},"JS 函数式编程","/gists/functional",{"title":244,"_path":245},"游戏化","/gists/gamification",{"title":247,"_path":248},"Google C++ Standard","/gists/google-cpp-standard",{"title":250,"_path":251},"双向链接完全体","/gists/graph",{"title":253,"_path":254},"Hardwares","/gists/hardwares",{"title":256,"_path":257},"哈希冲突","/gists/hash-collision",{"title":259,"_path":260},"信息设计","/gists/information-design",{"title":262,"_path":263},"InstantPage","/gists/instant.page",{"title":265,"_path":266},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":268,"_path":269},"KVStore","/gists/key-value-db",{"title":271,"_path":272},"Kubernetes","/gists/kubernetes",{"title":274,"_path":275},"Makefile","/gists/makefile",{"title":277,"_path":278},"Markdown Inline Style","/gists/markdown-nice",{"title":280,"_path":281},"小程序","/gists/miniapp",{"title":283,"_path":284},"减小页面快照体积","/gists/minify-html",{"title":286,"_path":287},"mklink","/gists/mklink",{"title":289,"_path":290},"Mock","/gists/mock",{"title":292,"_path":293},"多人协作系统","/gists/multiplayer",{"title":295,"_path":296},"多端应用","/gists/multy-end-app",{"title":298,"_path":299},"神经科学","/gists/neuroscience",{"title":301,"_path":302},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":304,"_path":305},"PInvoke","/gists/pinvoke",{"title":307,"_path":308},"像素","/gists/pixel",{"title":310,"_path":311},"PowerShell","/gists/powershell",{"title":313,"_path":314},"量子","/gists/quantum",{"title":316,"_path":317},"保持好奇心","/gists/questions",{"title":319,"_path":320},"React Native","/gists/react-native",{"title":322,"_path":323},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":325,"_path":326},"SEO","/gists/seo",{"title":328,"_path":329},"Shader","/gists/shader",{"title":331,"_path":332},"Shape Up","/gists/shape-up",{"title":334,"_path":335},"睡觉","/gists/sleep",{"title":337,"_path":338},"记录奇怪的问题","/gists/solved",{"title":340,"_path":341},"States","/gists/states",{"title":343,"_path":344},"Storage","/gists/storage",{"title":346,"_path":347},"音视频流处理","/gists/stream-cli",{"title":349,"_path":350},"Symbol","/gists/symbol",{"title":352,"_path":353},"系统论","/gists/systems-theory",{"title":355,"_path":356},"Taro","/gists/taro",{"title":358,"_path":359},"任务切片","/gists/task-slice",{"title":361,"_path":362},"技术偏好","/gists/tech-dudge",{"title":364,"_path":365},"Untitled","/gists/untitled",{"title":367,"_path":368},"可变字体","/gists/variable-font",{"title":370,"_path":371},"视觉错觉","/gists/visual-illusion",{"title":373,"_path":374},"SS(SSR)","/gists/vpn",{"title":376,"_path":377},"VS Code 插件开发","/gists/vscode-plugin",{"title":379,"_path":380},"Web Components","/gists/web-components",{"title":382,"_path":383},"Windows","/gists/windows",{"title":385,"_path":386},"查缺补漏","/gists/wrong",{"title":388,"_path":389,"children":390},"我 / About","/hire",[391],{"title":392,"_path":389},"📬 技术简历",{"_path":394,"_dir":395,"_draft":396,"_partial":397,"_locale":398,"title":399,"description":400,"body":401,"_type":860,"_id":861,"_source":862,"_file":863,"_stem":864,"_extension":865},"/maps/_software/design-patterns","_software",false,true,"","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",{"type":402,"children":403,"toc":853},"root",[404,412,432,438,444,449,458,463,468,473,481,486,491,496,504,509,514,519,527,532,537,542,550,555,560,565,573,578,583,591,596,601,606,614,619,624,629,637,642,647,652,657,665,670,675,683,688,693,701,706,711,716,721,729,734,739,747,752,760,765,770,775,783,788,793,798,806,811,816,821,829,834,839],{"type":405,"tag":406,"props":407,"children":408},"element","p",{},[409],{"type":410,"value":411},"text","按照使用方式可以把设计模式划分为：创建型模式、结构型模式和行为模式。",{"type":405,"tag":413,"props":414,"children":415},"ul",{},[416,422,427],{"type":405,"tag":417,"props":418,"children":419},"li",{},[420],{"type":410,"value":421},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":405,"tag":417,"props":423,"children":424},{},[425],{"type":410,"value":426},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高效",{"type":405,"tag":417,"props":428,"children":429},{},[430],{"type":410,"value":431},"行为模式：提供对象间的沟通和职责分配",{"type":405,"tag":433,"props":434,"children":436},"h2",{"id":435},"创建型模式",[437],{"type":410,"value":435},{"type":405,"tag":439,"props":440,"children":442},"h4",{"id":441},"工厂",[443],{"type":410,"value":441},{"type":405,"tag":406,"props":445,"children":446},{},[447],{"type":410,"value":448},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":405,"tag":406,"props":450,"children":451},{},[452],{"type":405,"tag":453,"props":454,"children":457},"img",{"alt":455,"src":456},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":405,"tag":406,"props":459,"children":460},{},[461],{"type":410,"value":462},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":405,"tag":439,"props":464,"children":466},{"id":465},"抽象工厂",[467],{"type":410,"value":465},{"type":405,"tag":406,"props":469,"children":470},{},[471],{"type":410,"value":472},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":405,"tag":406,"props":474,"children":475},{},[476],{"type":405,"tag":453,"props":477,"children":480},{"alt":478,"src":479},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":405,"tag":406,"props":482,"children":483},{},[484],{"type":410,"value":485},"抽象工厂专注于生产一系列对象，举个例子，Weex 和 Web 版本的 ElementUI（假设有的话）就需要根据不同平台去初始化不同的具体工厂实例，再使用具体工厂实例去生成不同的组件。",{"type":405,"tag":439,"props":487,"children":489},{"id":488},"生成器",[490],{"type":410,"value":488},{"type":405,"tag":406,"props":492,"children":493},{},[494],{"type":410,"value":495},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。",{"type":405,"tag":406,"props":497,"children":498},{},[499],{"type":405,"tag":453,"props":500,"children":503},{"alt":501,"src":502},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":405,"tag":406,"props":505,"children":506},{},[507],{"type":410,"value":508},"从图中可以看到当前的主管结构和具体生成器是解耦的，也就是说客户端依赖具体生成器来获取生成结果，这在可能有产品不遵循通用生成器接口的时候有用。",{"type":405,"tag":439,"props":510,"children":512},{"id":511},"原型",[513],{"type":410,"value":511},{"type":405,"tag":406,"props":515,"children":516},{},[517],{"type":410,"value":518},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":405,"tag":406,"props":520,"children":521},{},[522],{"type":405,"tag":453,"props":523,"children":526},{"alt":524,"src":525},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":405,"tag":406,"props":528,"children":529},{},[530],{"type":410,"value":531},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":405,"tag":439,"props":533,"children":535},{"id":534},"单例",[536],{"type":410,"value":534},{"type":405,"tag":406,"props":538,"children":539},{},[540],{"type":410,"value":541},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":405,"tag":406,"props":543,"children":544},{},[545],{"type":405,"tag":453,"props":546,"children":549},{"alt":547,"src":548},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":405,"tag":433,"props":551,"children":553},{"id":552},"结构型模式",[554],{"type":410,"value":552},{"type":405,"tag":439,"props":556,"children":558},{"id":557},"适配器",[559],{"type":410,"value":557},{"type":405,"tag":406,"props":561,"children":562},{},[563],{"type":410,"value":564},"适配器使接口不兼容的对象能够相互合作。",{"type":405,"tag":406,"props":566,"children":567},{},[568],{"type":405,"tag":453,"props":569,"children":572},{"alt":570,"src":571},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":405,"tag":439,"props":574,"children":576},{"id":575},"桥接",[577],{"type":410,"value":575},{"type":405,"tag":406,"props":579,"children":580},{},[581],{"type":410,"value":582},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与 OO 中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":405,"tag":406,"props":584,"children":585},{},[586],{"type":405,"tag":453,"props":587,"children":590},{"alt":588,"src":589},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":405,"tag":406,"props":592,"children":593},{},[594],{"type":410,"value":595},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":405,"tag":439,"props":597,"children":599},{"id":598},"组合",[600],{"type":410,"value":598},{"type":405,"tag":406,"props":602,"children":603},{},[604],{"type":410,"value":605},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":405,"tag":406,"props":607,"children":608},{},[609],{"type":405,"tag":453,"props":610,"children":613},{"alt":611,"src":612},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":405,"tag":406,"props":615,"children":616},{},[617],{"type":410,"value":618},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":405,"tag":439,"props":620,"children":622},{"id":621},"装饰",[623],{"type":410,"value":621},{"type":405,"tag":406,"props":625,"children":626},{},[627],{"type":410,"value":628},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":405,"tag":406,"props":630,"children":631},{},[632],{"type":405,"tag":453,"props":633,"children":636},{"alt":634,"src":635},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":405,"tag":406,"props":638,"children":639},{},[640],{"type":410,"value":641},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":405,"tag":406,"props":643,"children":644},{},[645],{"type":410,"value":646},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":405,"tag":439,"props":648,"children":650},{"id":649},"外观",[651],{"type":410,"value":649},{"type":405,"tag":406,"props":653,"children":654},{},[655],{"type":410,"value":656},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":405,"tag":406,"props":658,"children":659},{},[660],{"type":405,"tag":453,"props":661,"children":664},{"alt":662,"src":663},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":405,"tag":439,"props":666,"children":668},{"id":667},"享元",[669],{"type":410,"value":667},{"type":405,"tag":406,"props":671,"children":672},{},[673],{"type":410,"value":674},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":405,"tag":406,"props":676,"children":677},{},[678],{"type":405,"tag":453,"props":679,"children":682},{"alt":680,"src":681},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":405,"tag":439,"props":684,"children":686},{"id":685},"代理",[687],{"type":410,"value":685},{"type":405,"tag":406,"props":689,"children":690},{},[691],{"type":410,"value":692},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":405,"tag":406,"props":694,"children":695},{},[696],{"type":405,"tag":453,"props":697,"children":700},{"alt":698,"src":699},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":405,"tag":406,"props":702,"children":703},{},[704],{"type":410,"value":705},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":405,"tag":433,"props":707,"children":709},{"id":708},"行为模式",[710],{"type":410,"value":708},{"type":405,"tag":439,"props":712,"children":714},{"id":713},"责任链",[715],{"type":410,"value":713},{"type":405,"tag":406,"props":717,"children":718},{},[719],{"type":410,"value":720},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":405,"tag":406,"props":722,"children":723},{},[724],{"type":405,"tag":453,"props":725,"children":728},{"alt":726,"src":727},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":405,"tag":439,"props":730,"children":732},{"id":731},"命令",[733],{"type":410,"value":731},{"type":405,"tag":406,"props":735,"children":736},{},[737],{"type":410,"value":738},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":405,"tag":406,"props":740,"children":741},{},[742],{"type":405,"tag":453,"props":743,"children":746},{"alt":744,"src":745},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":405,"tag":406,"props":748,"children":749},{},[750],{"type":410,"value":751},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":405,"tag":406,"props":753,"children":754},{},[755],{"type":405,"tag":453,"props":756,"children":759},{"alt":757,"src":758},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":405,"tag":406,"props":761,"children":762},{},[763],{"type":410,"value":764},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":405,"tag":439,"props":766,"children":768},{"id":767},"中介者",[769],{"type":410,"value":767},{"type":405,"tag":406,"props":771,"children":772},{},[773],{"type":410,"value":774},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":405,"tag":406,"props":776,"children":777},{},[778],{"type":405,"tag":453,"props":779,"children":782},{"alt":780,"src":781},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":405,"tag":406,"props":784,"children":785},{},[786],{"type":410,"value":787},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":405,"tag":439,"props":789,"children":791},{"id":790},"备忘录",[792],{"type":410,"value":790},{"type":405,"tag":406,"props":794,"children":795},{},[796],{"type":410,"value":797},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":405,"tag":406,"props":799,"children":800},{},[801],{"type":405,"tag":453,"props":802,"children":805},{"alt":803,"src":804},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":405,"tag":406,"props":807,"children":808},{},[809],{"type":410,"value":810},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":405,"tag":439,"props":812,"children":814},{"id":813},"观察者",[815],{"type":410,"value":813},{"type":405,"tag":406,"props":817,"children":818},{},[819],{"type":410,"value":820},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":405,"tag":406,"props":822,"children":823},{},[824],{"type":405,"tag":453,"props":825,"children":828},{"alt":826,"src":827},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":405,"tag":406,"props":830,"children":831},{},[832],{"type":410,"value":833},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"type":405,"tag":433,"props":835,"children":837},{"id":836},"相关",[838],{"type":410,"value":836},{"type":405,"tag":413,"props":840,"children":841},{},[842],{"type":405,"tag":417,"props":843,"children":844},{},[845,851],{"type":405,"tag":846,"props":847,"children":848},"a",{"href":70},[849],{"type":410,"value":850},"《🍲 设计模式与 JS 魔法锅》",{"type":410,"value":852},"（⭐⭐⭐⭐）",{"title":398,"searchDepth":854,"depth":854,"links":855},2,[856,857,858,859],{"id":435,"depth":854,"text":435},{"id":552,"depth":854,"text":552},{"id":708,"depth":854,"text":708},{"id":836,"depth":854,"text":836},"markdown","content:6.maps:_software:design-patterns.md","content","6.maps/_software/design-patterns.md","6.maps/_software/design-patterns","md",[867,871],{"_path":868,"title":869,"description":870},"/maps/_software/data-structure","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"_path":872,"title":873,"description":398},"/maps/_source-code/javascript/evil","Evil.js",1741604955349]