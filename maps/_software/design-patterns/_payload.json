[{"data":1,"prerenderedAt":865},["ShallowReactive",2],{"navigation":3,"/maps/_software/design-patterns":384,"/maps/_software/design-patterns-surround":857},[4,35,86,105,132,138,144,150,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":205,"_path":206},"正则表达式","/gists/eegex",{"title":208,"_path":209},"Emoji","/gists/emoji",{"title":211,"_path":212},"工程","/gists/engineering",{"title":214,"_path":215},"熵","/gists/entropy",{"title":217,"_path":218},"Environment","/gists/environment",{"title":220,"_path":221},"Erlang","/gists/erlang",{"title":223,"_path":224},"逃离塔克夫","/gists/escape-from-tarkov",{"title":226,"_path":227},"ESNext (ES6-ES11)","/gists/esnext",{"title":229,"_path":230},"Eval！","/gists/eval",{"title":232,"_path":233},"Flutter","/gists/flutter",{"title":235,"_path":236},"字体","/gists/font",{"title":238,"_path":239},"JS 函数式编程","/gists/functional",{"title":241,"_path":242},"游戏化","/gists/gamification",{"title":244,"_path":245},"Google C++ Standard","/gists/google-cpp-standard",{"title":247,"_path":248},"双向链接完全体","/gists/graph",{"title":250,"_path":251},"Hardwares","/gists/hardwares",{"title":253,"_path":254},"哈希冲突","/gists/hash-collision",{"title":256,"_path":257},"信息设计","/gists/information-design",{"title":259,"_path":260},"InstantPage","/gists/instant.page",{"title":262,"_path":263},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":265,"_path":266},"KVStore","/gists/key-value-db",{"title":268,"_path":269},"Kubernetes","/gists/kubernetes",{"title":271,"_path":272},"Makefile","/gists/makefile",{"title":274,"_path":275},"Markdown Inline Style","/gists/markdown-nice",{"title":277,"_path":278},"减小页面快照体积","/gists/minify-html",{"title":280,"_path":281},"mklink","/gists/mklink",{"title":283,"_path":284},"Mock","/gists/mock",{"title":286,"_path":287},"多人协作系统","/gists/multiplayer",{"title":289,"_path":290},"多端应用","/gists/multy-end-app",{"title":292,"_path":293},"神经科学","/gists/neuroscience",{"title":295,"_path":296},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":298,"_path":299},"PInvoke","/gists/pinvoke",{"title":301,"_path":302},"像素","/gists/pixel",{"title":304,"_path":305},"PowerShell","/gists/powershell",{"title":307,"_path":308},"量子","/gists/quantum",{"title":310,"_path":311},"保持好奇心","/gists/questions",{"title":313,"_path":314},"React Native","/gists/react-native",{"title":316,"_path":317},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":319,"_path":320},"SEO","/gists/seo",{"title":322,"_path":323},"Shader","/gists/shader",{"title":325,"_path":326},"Shape Up","/gists/shape-up",{"title":328,"_path":329},"睡觉","/gists/sleep",{"title":331,"_path":332},"记录奇怪的问题","/gists/solved",{"title":334,"_path":335},"States","/gists/states",{"title":337,"_path":338},"Storage","/gists/storage",{"title":340,"_path":341},"音视频流处理","/gists/stream-cli",{"title":343,"_path":344},"Symbol","/gists/symbol",{"title":346,"_path":347},"系统论","/gists/systems-theory",{"title":349,"_path":350},"任务切片","/gists/task-slice",{"title":352,"_path":353},"技术偏好","/gists/tech-dudge",{"title":355,"_path":356},"Untitled","/gists/untitled",{"title":358,"_path":359},"可变字体","/gists/variable-font",{"title":361,"_path":362},"视觉错觉","/gists/visual-illusion",{"title":364,"_path":365},"SS(SSR)","/gists/vpn",{"title":367,"_path":368},"VS Code 插件开发","/gists/vscode-plugin",{"title":370,"_path":371},"Web Components","/gists/web-components",{"title":373,"_path":374},"Windows","/gists/windows",{"title":376,"_path":377},"查缺补漏","/gists/wrong",{"title":379,"_path":380,"children":381},"我 / About","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"_path":385,"_dir":386,"_draft":387,"_partial":388,"_locale":389,"title":390,"description":391,"body":392,"_type":851,"_id":852,"_source":853,"_file":854,"_stem":855,"_extension":856},"/maps/_software/design-patterns","_software",false,true,"","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",{"type":393,"children":394,"toc":844},"root",[395,403,423,429,435,440,449,454,459,464,472,477,482,487,495,500,505,510,518,523,528,533,541,546,551,556,564,569,574,582,587,592,597,605,610,615,620,628,633,638,643,648,656,661,666,674,679,684,692,697,702,707,712,720,725,730,738,743,751,756,761,766,774,779,784,789,797,802,807,812,820,825,830],{"type":396,"tag":397,"props":398,"children":399},"element","p",{},[400],{"type":401,"value":402},"text","按照使用方式可以把设计模式划分为：创建型模式、结构型模式和行为模式。",{"type":396,"tag":404,"props":405,"children":406},"ul",{},[407,413,418],{"type":396,"tag":408,"props":409,"children":410},"li",{},[411],{"type":401,"value":412},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":396,"tag":408,"props":414,"children":415},{},[416],{"type":401,"value":417},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高效",{"type":396,"tag":408,"props":419,"children":420},{},[421],{"type":401,"value":422},"行为模式：提供对象间的沟通和职责分配",{"type":396,"tag":424,"props":425,"children":427},"h2",{"id":426},"创建型模式",[428],{"type":401,"value":426},{"type":396,"tag":430,"props":431,"children":433},"h4",{"id":432},"工厂",[434],{"type":401,"value":432},{"type":396,"tag":397,"props":436,"children":437},{},[438],{"type":401,"value":439},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":396,"tag":397,"props":441,"children":442},{},[443],{"type":396,"tag":444,"props":445,"children":448},"img",{"alt":446,"src":447},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":396,"tag":397,"props":450,"children":451},{},[452],{"type":401,"value":453},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":396,"tag":430,"props":455,"children":457},{"id":456},"抽象工厂",[458],{"type":401,"value":456},{"type":396,"tag":397,"props":460,"children":461},{},[462],{"type":401,"value":463},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":396,"tag":397,"props":465,"children":466},{},[467],{"type":396,"tag":444,"props":468,"children":471},{"alt":469,"src":470},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":396,"tag":397,"props":473,"children":474},{},[475],{"type":401,"value":476},"抽象工厂专注于生产一系列对象，举个例子，Weex 和 Web 版本的 ElementUI（假设有的话）就需要根据不同平台去初始化不同的具体工厂实例，再使用具体工厂实例去生成不同的组件。",{"type":396,"tag":430,"props":478,"children":480},{"id":479},"生成器",[481],{"type":401,"value":479},{"type":396,"tag":397,"props":483,"children":484},{},[485],{"type":401,"value":486},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。",{"type":396,"tag":397,"props":488,"children":489},{},[490],{"type":396,"tag":444,"props":491,"children":494},{"alt":492,"src":493},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":396,"tag":397,"props":496,"children":497},{},[498],{"type":401,"value":499},"从图中可以看到当前的主管结构和具体生成器是解耦的，也就是说客户端依赖具体生成器来获取生成结果，这在可能有产品不遵循通用生成器接口的时候有用。",{"type":396,"tag":430,"props":501,"children":503},{"id":502},"原型",[504],{"type":401,"value":502},{"type":396,"tag":397,"props":506,"children":507},{},[508],{"type":401,"value":509},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":396,"tag":397,"props":511,"children":512},{},[513],{"type":396,"tag":444,"props":514,"children":517},{"alt":515,"src":516},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":396,"tag":397,"props":519,"children":520},{},[521],{"type":401,"value":522},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":396,"tag":430,"props":524,"children":526},{"id":525},"单例",[527],{"type":401,"value":525},{"type":396,"tag":397,"props":529,"children":530},{},[531],{"type":401,"value":532},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":396,"tag":397,"props":534,"children":535},{},[536],{"type":396,"tag":444,"props":537,"children":540},{"alt":538,"src":539},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":396,"tag":424,"props":542,"children":544},{"id":543},"结构型模式",[545],{"type":401,"value":543},{"type":396,"tag":430,"props":547,"children":549},{"id":548},"适配器",[550],{"type":401,"value":548},{"type":396,"tag":397,"props":552,"children":553},{},[554],{"type":401,"value":555},"适配器使接口不兼容的对象能够相互合作。",{"type":396,"tag":397,"props":557,"children":558},{},[559],{"type":396,"tag":444,"props":560,"children":563},{"alt":561,"src":562},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":396,"tag":430,"props":565,"children":567},{"id":566},"桥接",[568],{"type":401,"value":566},{"type":396,"tag":397,"props":570,"children":571},{},[572],{"type":401,"value":573},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与 OO 中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":396,"tag":397,"props":575,"children":576},{},[577],{"type":396,"tag":444,"props":578,"children":581},{"alt":579,"src":580},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":396,"tag":397,"props":583,"children":584},{},[585],{"type":401,"value":586},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":396,"tag":430,"props":588,"children":590},{"id":589},"组合",[591],{"type":401,"value":589},{"type":396,"tag":397,"props":593,"children":594},{},[595],{"type":401,"value":596},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":396,"tag":397,"props":598,"children":599},{},[600],{"type":396,"tag":444,"props":601,"children":604},{"alt":602,"src":603},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":396,"tag":397,"props":606,"children":607},{},[608],{"type":401,"value":609},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":396,"tag":430,"props":611,"children":613},{"id":612},"装饰",[614],{"type":401,"value":612},{"type":396,"tag":397,"props":616,"children":617},{},[618],{"type":401,"value":619},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":396,"tag":397,"props":621,"children":622},{},[623],{"type":396,"tag":444,"props":624,"children":627},{"alt":625,"src":626},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":396,"tag":397,"props":629,"children":630},{},[631],{"type":401,"value":632},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":396,"tag":397,"props":634,"children":635},{},[636],{"type":401,"value":637},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":396,"tag":430,"props":639,"children":641},{"id":640},"外观",[642],{"type":401,"value":640},{"type":396,"tag":397,"props":644,"children":645},{},[646],{"type":401,"value":647},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":396,"tag":397,"props":649,"children":650},{},[651],{"type":396,"tag":444,"props":652,"children":655},{"alt":653,"src":654},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":396,"tag":430,"props":657,"children":659},{"id":658},"享元",[660],{"type":401,"value":658},{"type":396,"tag":397,"props":662,"children":663},{},[664],{"type":401,"value":665},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":396,"tag":397,"props":667,"children":668},{},[669],{"type":396,"tag":444,"props":670,"children":673},{"alt":671,"src":672},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":396,"tag":430,"props":675,"children":677},{"id":676},"代理",[678],{"type":401,"value":676},{"type":396,"tag":397,"props":680,"children":681},{},[682],{"type":401,"value":683},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":396,"tag":397,"props":685,"children":686},{},[687],{"type":396,"tag":444,"props":688,"children":691},{"alt":689,"src":690},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":396,"tag":397,"props":693,"children":694},{},[695],{"type":401,"value":696},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":396,"tag":424,"props":698,"children":700},{"id":699},"行为模式",[701],{"type":401,"value":699},{"type":396,"tag":430,"props":703,"children":705},{"id":704},"责任链",[706],{"type":401,"value":704},{"type":396,"tag":397,"props":708,"children":709},{},[710],{"type":401,"value":711},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":396,"tag":397,"props":713,"children":714},{},[715],{"type":396,"tag":444,"props":716,"children":719},{"alt":717,"src":718},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":396,"tag":430,"props":721,"children":723},{"id":722},"命令",[724],{"type":401,"value":722},{"type":396,"tag":397,"props":726,"children":727},{},[728],{"type":401,"value":729},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":396,"tag":397,"props":731,"children":732},{},[733],{"type":396,"tag":444,"props":734,"children":737},{"alt":735,"src":736},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":396,"tag":397,"props":739,"children":740},{},[741],{"type":401,"value":742},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":396,"tag":397,"props":744,"children":745},{},[746],{"type":396,"tag":444,"props":747,"children":750},{"alt":748,"src":749},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":396,"tag":397,"props":752,"children":753},{},[754],{"type":401,"value":755},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":396,"tag":430,"props":757,"children":759},{"id":758},"中介者",[760],{"type":401,"value":758},{"type":396,"tag":397,"props":762,"children":763},{},[764],{"type":401,"value":765},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":396,"tag":397,"props":767,"children":768},{},[769],{"type":396,"tag":444,"props":770,"children":773},{"alt":771,"src":772},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":396,"tag":397,"props":775,"children":776},{},[777],{"type":401,"value":778},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":396,"tag":430,"props":780,"children":782},{"id":781},"备忘录",[783],{"type":401,"value":781},{"type":396,"tag":397,"props":785,"children":786},{},[787],{"type":401,"value":788},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":396,"tag":397,"props":790,"children":791},{},[792],{"type":396,"tag":444,"props":793,"children":796},{"alt":794,"src":795},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":396,"tag":397,"props":798,"children":799},{},[800],{"type":401,"value":801},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":396,"tag":430,"props":803,"children":805},{"id":804},"观察者",[806],{"type":401,"value":804},{"type":396,"tag":397,"props":808,"children":809},{},[810],{"type":401,"value":811},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":396,"tag":397,"props":813,"children":814},{},[815],{"type":396,"tag":444,"props":816,"children":819},{"alt":817,"src":818},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":396,"tag":397,"props":821,"children":822},{},[823],{"type":401,"value":824},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"type":396,"tag":424,"props":826,"children":828},{"id":827},"相关",[829],{"type":401,"value":827},{"type":396,"tag":404,"props":831,"children":832},{},[833],{"type":396,"tag":408,"props":834,"children":835},{},[836,842],{"type":396,"tag":837,"props":838,"children":839},"a",{"href":70},[840],{"type":401,"value":841},"《🍲 设计模式与 JS 魔法锅》",{"type":401,"value":843},"（⭐⭐⭐⭐）",{"title":389,"searchDepth":845,"depth":845,"links":846},2,[847,848,849,850],{"id":426,"depth":845,"text":426},{"id":543,"depth":845,"text":543},{"id":699,"depth":845,"text":699},{"id":827,"depth":845,"text":827},"markdown","content:6.maps:_software:design-patterns.md","content","6.maps/_software/design-patterns.md","6.maps/_software/design-patterns","md",[858,862],{"_path":859,"title":860,"description":861},"/maps/_software/data-structure","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"_path":863,"title":864,"description":389},"/maps/_source-code/javascript/evil","Evil.js",1742040623900]