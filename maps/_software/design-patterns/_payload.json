[{"data":1,"prerenderedAt":721},["ShallowReactive",2],{"navigation":3,"/maps/_software/design-patterns":158,"/maps/_software/design-patterns-surround":713},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":707,"_id":708,"_source":709,"_file":710,"_stem":711,"_extension":712},"/maps/_software/design-patterns","_software",false,true,"","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",{"type":167,"children":168,"toc":700},"root",[169,184,191,196,216,222,227,232,241,246,259,264,269,277,282,293,298,303,311,316,327,332,337,345,350,361,366,371,379,390,395,400,405,413,418,423,431,436,441,446,454,459,464,469,477,482,487,492,497,505,510,515,523,528,533,541,546,551,556,561,569,574,579,587,592,600,605,610,615,623,628,633,638,646,651,656,661,669,674,679],{"type":170,"tag":171,"props":172,"children":173},"element","p",{},[174,177],{"type":175,"value":176},"text","相关：",{"type":170,"tag":178,"props":179,"children":181},"a",{"href":180},"/maps/_oop/oop",[182],{"type":175,"value":183},"OOP",{"type":170,"tag":185,"props":186,"children":188},"h4",{"id":187},"设计模式怎么划分类别",[189],{"type":175,"value":190},"设计模式怎么划分类别？",{"type":170,"tag":171,"props":192,"children":193},{},[194],{"type":175,"value":195},"按照使用方式可以把设计模式划分为：创建型模式、结构型模式和行为模式。",{"type":170,"tag":197,"props":198,"children":199},"ul",{},[200,206,211],{"type":170,"tag":201,"props":202,"children":203},"li",{},[204],{"type":175,"value":205},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":170,"tag":201,"props":207,"children":208},{},[209],{"type":175,"value":210},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高效",{"type":170,"tag":201,"props":212,"children":213},{},[214],{"type":175,"value":215},"行为模式：提供对象间的沟通和职责分配",{"type":170,"tag":217,"props":218,"children":220},"h2",{"id":219},"创建型模式",[221],{"type":175,"value":219},{"type":170,"tag":185,"props":223,"children":225},{"id":224},"工厂",[226],{"type":175,"value":224},{"type":170,"tag":171,"props":228,"children":229},{},[230],{"type":175,"value":231},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":170,"tag":171,"props":233,"children":234},{},[235],{"type":170,"tag":236,"props":237,"children":240},"img",{"alt":238,"src":239},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":170,"tag":171,"props":242,"children":243},{},[244],{"type":175,"value":245},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":170,"tag":171,"props":247,"children":248},{},[249,251],{"type":175,"value":250},"见：",{"type":170,"tag":178,"props":252,"children":256},{"href":253,"rel":254},"https://refactoringguru.cn/design-patterns/factory-method",[255],"nofollow",[257],{"type":175,"value":258},"工厂方法模式 @RefactoringGuru",{"type":170,"tag":185,"props":260,"children":262},{"id":261},"抽象工厂",[263],{"type":175,"value":261},{"type":170,"tag":171,"props":265,"children":266},{},[267],{"type":175,"value":268},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":170,"tag":171,"props":270,"children":271},{},[272],{"type":170,"tag":236,"props":273,"children":276},{"alt":274,"src":275},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":170,"tag":171,"props":278,"children":279},{},[280],{"type":175,"value":281},"举个例子，家具工厂（抽象工厂）可以生产椅子和桌子（抽象产品），每一个家具厂（具体工厂）都可以生产不同风格的椅子和桌子（具体产品）。",{"type":170,"tag":171,"props":283,"children":284},{},[285,286],{"type":175,"value":250},{"type":170,"tag":178,"props":287,"children":290},{"href":288,"rel":289},"https://refactoringguru.cn/design-patterns/abstract-factory",[255],[291],{"type":175,"value":292},"抽象工厂模式 @RefactoringGuru",{"type":170,"tag":185,"props":294,"children":296},{"id":295},"生成器",[297],{"type":175,"value":295},{"type":170,"tag":171,"props":299,"children":300},{},[301],{"type":175,"value":302},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的函数参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。",{"type":170,"tag":171,"props":304,"children":305},{},[306],{"type":170,"tag":236,"props":307,"children":310},{"alt":308,"src":309},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":170,"tag":171,"props":312,"children":313},{},[314],{"type":175,"value":315},"由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。举例来说，汽车生产导演可以控制汽车的生产流程，选择生产 SUV 或是跑车，而汽车生产者（Builder）则负责生产汽车的各个部分，如 GPS、引擎、轮子等。",{"type":170,"tag":171,"props":317,"children":318},{},[319,320],{"type":175,"value":250},{"type":170,"tag":178,"props":321,"children":324},{"href":322,"rel":323},"https://refactoringguru.cn/design-patterns/builder",[255],[325],{"type":175,"value":326},"生成器模式 @RefactoringGuru",{"type":170,"tag":185,"props":328,"children":330},{"id":329},"原型",[331],{"type":175,"value":329},{"type":170,"tag":171,"props":333,"children":334},{},[335],{"type":175,"value":336},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":170,"tag":171,"props":338,"children":339},{},[340],{"type":170,"tag":236,"props":341,"children":344},{"alt":342,"src":343},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":170,"tag":171,"props":346,"children":347},{},[348],{"type":175,"value":349},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":170,"tag":171,"props":351,"children":352},{},[353,354],{"type":175,"value":250},{"type":170,"tag":178,"props":355,"children":358},{"href":356,"rel":357},"https://refactoringguru.cn/design-patterns/prototype",[255],[359],{"type":175,"value":360},"原型模式 @RefactoringGuru",{"type":170,"tag":185,"props":362,"children":364},{"id":363},"单例",[365],{"type":175,"value":363},{"type":170,"tag":171,"props":367,"children":368},{},[369],{"type":175,"value":370},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":170,"tag":171,"props":372,"children":373},{},[374],{"type":170,"tag":236,"props":375,"children":378},{"alt":376,"src":377},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":170,"tag":171,"props":380,"children":381},{},[382,383],{"type":175,"value":250},{"type":170,"tag":178,"props":384,"children":387},{"href":385,"rel":386},"https://refactoringguru.cn/design-patterns/singleton",[255],[388],{"type":175,"value":389},"单例模式 @RefactoringGuru",{"type":170,"tag":217,"props":391,"children":393},{"id":392},"结构型模式",[394],{"type":175,"value":392},{"type":170,"tag":185,"props":396,"children":398},{"id":397},"适配器",[399],{"type":175,"value":397},{"type":170,"tag":171,"props":401,"children":402},{},[403],{"type":175,"value":404},"适配器使接口不兼容的对象能够相互合作。",{"type":170,"tag":171,"props":406,"children":407},{},[408],{"type":170,"tag":236,"props":409,"children":412},{"alt":410,"src":411},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":170,"tag":185,"props":414,"children":416},{"id":415},"桥接",[417],{"type":175,"value":415},{"type":170,"tag":171,"props":419,"children":420},{},[421],{"type":175,"value":422},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与 OO 中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":170,"tag":171,"props":424,"children":425},{},[426],{"type":170,"tag":236,"props":427,"children":430},{"alt":428,"src":429},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":170,"tag":171,"props":432,"children":433},{},[434],{"type":175,"value":435},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":170,"tag":185,"props":437,"children":439},{"id":438},"组合",[440],{"type":175,"value":438},{"type":170,"tag":171,"props":442,"children":443},{},[444],{"type":175,"value":445},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":170,"tag":171,"props":447,"children":448},{},[449],{"type":170,"tag":236,"props":450,"children":453},{"alt":451,"src":452},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":170,"tag":171,"props":455,"children":456},{},[457],{"type":175,"value":458},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":170,"tag":185,"props":460,"children":462},{"id":461},"装饰",[463],{"type":175,"value":461},{"type":170,"tag":171,"props":465,"children":466},{},[467],{"type":175,"value":468},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":170,"tag":171,"props":470,"children":471},{},[472],{"type":170,"tag":236,"props":473,"children":476},{"alt":474,"src":475},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":170,"tag":171,"props":478,"children":479},{},[480],{"type":175,"value":481},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":170,"tag":171,"props":483,"children":484},{},[485],{"type":175,"value":486},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":170,"tag":185,"props":488,"children":490},{"id":489},"外观",[491],{"type":175,"value":489},{"type":170,"tag":171,"props":493,"children":494},{},[495],{"type":175,"value":496},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":170,"tag":171,"props":498,"children":499},{},[500],{"type":170,"tag":236,"props":501,"children":504},{"alt":502,"src":503},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":170,"tag":185,"props":506,"children":508},{"id":507},"享元",[509],{"type":175,"value":507},{"type":170,"tag":171,"props":511,"children":512},{},[513],{"type":175,"value":514},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":170,"tag":171,"props":516,"children":517},{},[518],{"type":170,"tag":236,"props":519,"children":522},{"alt":520,"src":521},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":170,"tag":185,"props":524,"children":526},{"id":525},"代理",[527],{"type":175,"value":525},{"type":170,"tag":171,"props":529,"children":530},{},[531],{"type":175,"value":532},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":170,"tag":171,"props":534,"children":535},{},[536],{"type":170,"tag":236,"props":537,"children":540},{"alt":538,"src":539},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":170,"tag":171,"props":542,"children":543},{},[544],{"type":175,"value":545},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":170,"tag":217,"props":547,"children":549},{"id":548},"行为模式",[550],{"type":175,"value":548},{"type":170,"tag":185,"props":552,"children":554},{"id":553},"责任链",[555],{"type":175,"value":553},{"type":170,"tag":171,"props":557,"children":558},{},[559],{"type":175,"value":560},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":170,"tag":171,"props":562,"children":563},{},[564],{"type":170,"tag":236,"props":565,"children":568},{"alt":566,"src":567},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":170,"tag":185,"props":570,"children":572},{"id":571},"命令",[573],{"type":175,"value":571},{"type":170,"tag":171,"props":575,"children":576},{},[577],{"type":175,"value":578},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":170,"tag":171,"props":580,"children":581},{},[582],{"type":170,"tag":236,"props":583,"children":586},{"alt":584,"src":585},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":170,"tag":171,"props":588,"children":589},{},[590],{"type":175,"value":591},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":170,"tag":171,"props":593,"children":594},{},[595],{"type":170,"tag":236,"props":596,"children":599},{"alt":597,"src":598},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":170,"tag":171,"props":601,"children":602},{},[603],{"type":175,"value":604},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":170,"tag":185,"props":606,"children":608},{"id":607},"中介者",[609],{"type":175,"value":607},{"type":170,"tag":171,"props":611,"children":612},{},[613],{"type":175,"value":614},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":170,"tag":171,"props":616,"children":617},{},[618],{"type":170,"tag":236,"props":619,"children":622},{"alt":620,"src":621},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":170,"tag":171,"props":624,"children":625},{},[626],{"type":175,"value":627},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":170,"tag":185,"props":629,"children":631},{"id":630},"备忘录",[632],{"type":175,"value":630},{"type":170,"tag":171,"props":634,"children":635},{},[636],{"type":175,"value":637},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":170,"tag":171,"props":639,"children":640},{},[641],{"type":170,"tag":236,"props":642,"children":645},{"alt":643,"src":644},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":170,"tag":171,"props":647,"children":648},{},[649],{"type":175,"value":650},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":170,"tag":185,"props":652,"children":654},{"id":653},"观察者",[655],{"type":175,"value":653},{"type":170,"tag":171,"props":657,"children":658},{},[659],{"type":175,"value":660},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":170,"tag":171,"props":662,"children":663},{},[664],{"type":170,"tag":236,"props":665,"children":668},{"alt":666,"src":667},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":170,"tag":171,"props":670,"children":671},{},[672],{"type":175,"value":673},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"type":170,"tag":217,"props":675,"children":677},{"id":676},"阅读",[678],{"type":175,"value":676},{"type":170,"tag":197,"props":680,"children":681},{},[682,690],{"type":170,"tag":201,"props":683,"children":684},{},[685],{"type":170,"tag":178,"props":686,"children":687},{"href":73},[688],{"type":175,"value":689},"设计模式与 JS 魔法锅",{"type":170,"tag":201,"props":691,"children":692},{},[693],{"type":170,"tag":178,"props":694,"children":697},{"href":695,"rel":696},"https://www.patterns.dev/vue/",[255],[698],{"type":175,"value":699},"Vue Patterns",{"title":163,"searchDepth":701,"depth":701,"links":702},2,[703,704,705,706],{"id":219,"depth":701,"text":219},{"id":392,"depth":701,"text":392},{"id":548,"depth":701,"text":548},{"id":676,"depth":701,"text":676},"markdown","content:6.maps:_software:design-patterns.md","content","6.maps/_software/design-patterns.md","6.maps/_software/design-patterns","md",[714,718],{"_path":715,"title":716,"description":717},"/maps/_software/data-structure","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"_path":719,"title":720,"description":163},"/maps/_source-code/javascript/evil","Evil.js",1748756312123]