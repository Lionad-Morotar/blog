[{"data":1,"prerenderedAt":307},["ShallowReactive",2],{"navigation":3,"/maps/_software/data-structure":158,"/maps/_software/data-structure-surround":298},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":292,"_id":293,"_source":294,"_file":295,"_stem":296,"_extension":297},"/maps/_software/data-structure","_software",false,true,"","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"type":167,"children":168,"toc":288},"root",[169,177,204,210,216,227,232,237,255,260],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"树",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":180},"ul",{},[181,194],{"type":170,"tag":182,"props":183,"children":184},"li",{},[185],{"type":170,"tag":186,"props":187,"children":191},"a",{"href":188,"rel":189},"https://zhuanlan.zhihu.com/p/101321696",[190],"nofollow",[192],{"type":176,"value":193},"神级遍历——morris",{"type":170,"tag":182,"props":195,"children":196},{},[197],{"type":170,"tag":186,"props":198,"children":201},{"href":199,"rel":200},"https://www.cnblogs.com/anniekim/archive/2013/06/15/morristraversal.html",[190],[202],{"type":176,"value":203},"Morris Traversal 方法遍历二叉树（非递归，不用栈，O(1) 空间） ",{"type":170,"tag":205,"props":206,"children":208},"h4",{"id":207},"二叉树的删除",[209],{"type":176,"value":207},{"type":170,"tag":211,"props":212,"children":213},"p",{},[214],{"type":176,"value":215},"如果是排序树，节点的删除分为三种情况：如果被删除的是叶子节点，那么直接删除；如果被删除的节点只有左子树或右子树，那么用子树替换该节点；不然，使用左值树最大值节点或右子树最小值节点替换该节点。",{"type":170,"tag":205,"props":217,"children":219},{"id":218},"彻底理解-b-树和-b树为何它们常用在数据库中",[220],{"type":170,"tag":186,"props":221,"children":224},{"href":222,"rel":223},"https://www.bilibili.com/video/BV1UC4y1p7zm",[190],[225],{"type":176,"value":226},"彻底理解 B 树和 B+树！为何它们常用在数据库中？",{"type":170,"tag":211,"props":228,"children":229},{},[230],{"type":176,"value":231},"B-tree 是 M-way-Tree 的约束版本。在创建 M-way 的 B-tree 时，需要持续往一个目标节点塞入 M-1 个元素。如果目标节点塞不下，则分裂出一个新节点存放新元素，并将目标节点中部分元素取出，另新建一个低层节点置于目标节点和新节点的上层，并连接。每次分裂出节点时，所有改变了元素的节点都需要重新调整其子节点的指向。",{"type":170,"tag":211,"props":233,"children":234},{},[235],{"type":176,"value":236},"B+-tree 相比 B-tree 有几点改变：",{"type":170,"tag":178,"props":238,"children":239},{},[240,245,250],{"type":170,"tag":182,"props":241,"children":242},{},[243],{"type":176,"value":244},"B+-tree 允许重复索引值的元素，底层节点的所有元素都能在高层节点找到一份拷贝，这也意味着 B+-tree 的叶子是全索引。",{"type":170,"tag":182,"props":246,"children":247},{},[248],{"type":176,"value":249},"B-tree 每一个元素都携带了指针指向索引物理位置，而 B+-tree 的指针位于叶子节点。",{"type":170,"tag":182,"props":251,"children":252},{},[253],{"type":176,"value":254},"B+-tree 的叶子节点作为链表相连。",{"type":170,"tag":211,"props":256,"children":257},{},[258],{"type":176,"value":259},"原始的 B-tree 是面向磁盘设计的：",{"type":170,"tag":178,"props":261,"children":262},{},[263,268,273,278,283],{"type":170,"tag":182,"props":264,"children":265},{},[266],{"type":176,"value":267},"有序、平衡的多级储存结构",{"type":170,"tag":182,"props":269,"children":270},{},[271],{"type":176,"value":272},"面向磁盘设计，每一个节点都是磁盘块",{"type":170,"tag":182,"props":274,"children":275},{},[276],{"type":176,"value":277},"查找性能好，适合读密集负载",{"type":170,"tag":182,"props":279,"children":280},{},[281],{"type":176,"value":282},"就地更新（In-Place Update）",{"type":170,"tag":182,"props":284,"children":285},{},[286],{"type":176,"value":287},"写入性能差，分裂、合并等操作都是随机写",{"title":163,"searchDepth":289,"depth":289,"links":290},2,[291],{"id":173,"depth":289,"text":173},"markdown","content:6.maps:_software:data-structure.md","content","6.maps/_software/data-structure.md","6.maps/_software/data-structure","md",[299,303],{"_path":300,"title":301,"description":302},"/maps/_software/algorithm","算法","经典算法原理与实现，包含快速排序等常用算法的详细解析和代码示例。",{"_path":304,"title":305,"description":306},"/maps/_software/design-patterns","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",1742808189734]