[{"data":1,"prerenderedAt":310},["ShallowReactive",2],{"navigation":3,"/maps/_software/data-structure":161,"/maps/_software/data-structure-surround":301},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":295,"_id":296,"_source":297,"_file":298,"_stem":299,"_extension":300},"/maps/_software/data-structure","_software",false,true,"","Data Structure","数据结构基础知识，包含二叉树遍历、B 树和 B+树原理等核心概念的详细解析。",{"type":170,"children":171,"toc":291},"root",[172,180,207,213,219,230,235,240,258,263],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"树",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":183},"ul",{},[184,197],{"type":173,"tag":185,"props":186,"children":187},"li",{},[188],{"type":173,"tag":189,"props":190,"children":194},"a",{"href":191,"rel":192},"https://zhuanlan.zhihu.com/p/101321696",[193],"nofollow",[195],{"type":179,"value":196},"神级遍历——morris",{"type":173,"tag":185,"props":198,"children":199},{},[200],{"type":173,"tag":189,"props":201,"children":204},{"href":202,"rel":203},"https://www.cnblogs.com/anniekim/archive/2013/06/15/morristraversal.html",[193],[205],{"type":179,"value":206},"Morris Traversal 方法遍历二叉树（非递归，不用栈，O(1) 空间） ",{"type":173,"tag":208,"props":209,"children":211},"h4",{"id":210},"二叉树的删除",[212],{"type":179,"value":210},{"type":173,"tag":214,"props":215,"children":216},"p",{},[217],{"type":179,"value":218},"如果是排序树，节点的删除分为三种情况：如果被删除的是叶子节点，那么直接删除；如果被删除的节点只有左子树或右子树，那么用子树替换该节点；不然，使用左值树最大值节点或右子树最小值节点替换该节点。",{"type":173,"tag":208,"props":220,"children":222},{"id":221},"彻底理解-b-树和-b树为何它们常用在数据库中",[223],{"type":173,"tag":189,"props":224,"children":227},{"href":225,"rel":226},"https://www.bilibili.com/video/BV1UC4y1p7zm",[193],[228],{"type":179,"value":229},"彻底理解 B 树和 B+树！为何它们常用在数据库中？",{"type":173,"tag":214,"props":231,"children":232},{},[233],{"type":179,"value":234},"B-tree 是 M-way-Tree 的约束版本。在创建 M-way 的 B-tree 时，需要持续往一个目标节点塞入 M-1 个元素。如果目标节点塞不下，则分裂出一个新节点存放新元素，并将目标节点中部分元素取出，另新建一个低层节点置于目标节点和新节点的上层，并连接。每次分裂出节点时，所有改变了元素的节点都需要重新调整其子节点的指向。",{"type":173,"tag":214,"props":236,"children":237},{},[238],{"type":179,"value":239},"B+-tree 相比 B-tree 有几点改变：",{"type":173,"tag":181,"props":241,"children":242},{},[243,248,253],{"type":173,"tag":185,"props":244,"children":245},{},[246],{"type":179,"value":247},"B+-tree 允许重复索引值的元素，底层节点的所有元素都能在高层节点找到一份拷贝，这也意味着 B+-tree 的叶子是全索引。",{"type":173,"tag":185,"props":249,"children":250},{},[251],{"type":179,"value":252},"B-tree 每一个元素都携带了指针指向索引物理位置，而 B+-tree 的指针位于叶子节点。",{"type":173,"tag":185,"props":254,"children":255},{},[256],{"type":179,"value":257},"B+-tree 的叶子节点作为链表相连。",{"type":173,"tag":214,"props":259,"children":260},{},[261],{"type":179,"value":262},"原始的 B-tree 是面向磁盘设计的：",{"type":173,"tag":181,"props":264,"children":265},{},[266,271,276,281,286],{"type":173,"tag":185,"props":267,"children":268},{},[269],{"type":179,"value":270},"有序、平衡的多级储存结构",{"type":173,"tag":185,"props":272,"children":273},{},[274],{"type":179,"value":275},"面向磁盘设计，每一个节点都是磁盘块",{"type":173,"tag":185,"props":277,"children":278},{},[279],{"type":179,"value":280},"查找性能好，适合读密集负载",{"type":173,"tag":185,"props":282,"children":283},{},[284],{"type":179,"value":285},"就地更新（In-Place Update）",{"type":173,"tag":185,"props":287,"children":288},{},[289],{"type":179,"value":290},"写入性能差，分裂、合并等操作都是随机写",{"title":166,"searchDepth":292,"depth":292,"links":293},2,[294],{"id":176,"depth":292,"text":176},"markdown","content:6.maps:_software:data-structure.md","content","6.maps/_software/data-structure.md","6.maps/_software/data-structure","md",[302,306],{"_path":303,"title":304,"description":305},"/maps/_software/algorithm","算法","经典算法原理与实现，包含快速排序等常用算法的详细解析和代码示例。",{"_path":307,"title":308,"description":309},"/maps/_software/design-patterns","设计模式","设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。",1749721431811]