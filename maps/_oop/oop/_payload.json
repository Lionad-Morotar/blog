[{"data":1,"prerenderedAt":411},["ShallowReactive",2],{"navigation":3,"/maps/_oop/oop":158,"/maps/_oop/oop-surround":402},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":396,"_id":397,"_source":398,"_file":399,"_stem":400,"_extension":401},"/maps/_oop/oop","_oop",false,true,"","面相对象编程","面向对象编程是一种编程范式，它将数据和操作封装在对象中，对象之间通过消息传递进行通信。",{"type":167,"children":168,"toc":388},"root",[169,178,184,200,206,211,221,228,233,268,277,285,290,295,300,305,328,334,339,357,362,367,375,380],{"type":170,"tag":171,"props":172,"children":174},"element","h4",{"id":173},"面向对象主要关注哪些方面",[175],{"type":176,"value":177},"text","面向对象主要关注哪些方面？",{"type":170,"tag":179,"props":180,"children":181},"p",{},[182],{"type":176,"value":183},"四个核心概念：封装（Encapsulation）、继承（Inheritance）、多态（Polymorphism）、抽象（Abstraction）。",{"type":170,"tag":179,"props":185,"children":186},{},[187,189,198],{"type":176,"value":188},"见：",{"type":170,"tag":190,"props":191,"children":195},"a",{"href":192,"rel":193},"https://www.bilibili.com/video/BV1gb411w7eW",[194],"nofollow",[196],{"type":176,"value":197},"JavaScript OOP 面向对象编程 @Mosh",{"type":176,"value":199},"，非常基础，适合新手入门",{"type":170,"tag":171,"props":201,"children":203},{"id":202},"面相对象和设计模式的关系",[204],{"type":176,"value":205},"面相对象和设计模式的关系？",{"type":170,"tag":179,"props":207,"children":208},{},[209],{"type":176,"value":210},"一般意义上的设计模式指的是在 OOP 编程范式的实践下总结出来的一些用来解决特定问题的代码设计经验。",{"type":170,"tag":179,"props":212,"children":213},{},[214,215],{"type":176,"value":188},{"type":170,"tag":190,"props":216,"children":218},{"href":217},"/maps/_software/design-patterns",[219],{"type":176,"value":220},"设计模式",{"type":170,"tag":222,"props":223,"children":225},"h2",{"id":224},"uml",[226],{"type":176,"value":227},"UML",{"type":170,"tag":179,"props":229,"children":230},{},[231],{"type":176,"value":232},"类之间的关系总的来说可以包含这几种：",{"type":170,"tag":234,"props":235,"children":236},"ul",{},[237,243,248,253,258,263],{"type":170,"tag":238,"props":239,"children":240},"li",{},[241],{"type":176,"value":242},"A 依赖 B：对类 B 的修改会影响到类 A",{"type":170,"tag":238,"props":244,"children":245},{},[246],{"type":176,"value":247},"A 关联 B：对象 A 知道对象 B，类 A 依赖于类 B",{"type":170,"tag":238,"props":249,"children":250},{},[251],{"type":176,"value":252},"A 聚合 B：对象 A 由 B 构成，类 A 依赖于类 B",{"type":170,"tag":238,"props":254,"children":255},{},[256],{"type":176,"value":257},"A 组合 B：对象 A 由 B 构成且管理 B 的生命周期，类 A 依赖于类 B",{"type":170,"tag":238,"props":259,"children":260},{},[261],{"type":176,"value":262},"A 实现 B：对象 A 可视为对象 B，类 A 定义了接口 B 声明的方法，类 A 依赖于类 B",{"type":170,"tag":238,"props":264,"children":265},{},[266],{"type":176,"value":267},"A 继承 B：对象 A 可视为对象 B，类 A 继承类 B 的接口和实现，还可以对其扩展，类 A 依赖于类 B",{"type":170,"tag":179,"props":269,"children":270},{},[271],{"type":170,"tag":272,"props":273,"children":276},"img",{"alt":274,"src":275},"Class Relations","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/b3612320-5822-48fc-8041-ead5c269f8e5.svg",[],{"type":170,"tag":179,"props":278,"children":279},{},[280],{"type":170,"tag":272,"props":281,"children":284},{"alt":282,"src":283},"Object Relations","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/cff33e77-e9aa-48eb-ae0d-01dd1561abd0.svg",[],{"type":170,"tag":222,"props":286,"children":288},{"id":287},"设计原则",[289],{"type":176,"value":287},{"type":170,"tag":179,"props":291,"children":292},{},[293],{"type":176,"value":294},"什么是优秀的软件设计？",{"type":170,"tag":179,"props":296,"children":297},{},[298],{"type":176,"value":299},"显然，在不同的公司、不同的项目，软件设计并没有一个恒定的标准，不过总的来说我们会讨论代码复用以及代码的扩展性。",{"type":170,"tag":179,"props":301,"children":302},{},[303],{"type":176,"value":304},"有几个基础的设计准则能帮助你做到这两点：",{"type":170,"tag":234,"props":306,"children":307},{},[308,313,318,323],{"type":170,"tag":238,"props":309,"children":310},{},[311],{"type":176,"value":312},"封装变化：找到程序中易变的内容并将其和不变的内容区分开来",{"type":170,"tag":238,"props":314,"children":315},{},[316],{"type":176,"value":317},"面向接口：依赖抽象通常优于依赖具体",{"type":170,"tag":238,"props":319,"children":320},{},[321],{"type":176,"value":322},"优先组合：组合优于继承，因为继承有着挺多保守诟病之处",{"type":170,"tag":238,"props":324,"children":325},{},[326],{"type":176,"value":327},"SOLID 原则",{"type":170,"tag":329,"props":330,"children":332},"h3",{"id":331},"组合优于继承",[333],{"type":176,"value":331},{"type":170,"tag":179,"props":335,"children":336},{},[337],{"type":176,"value":338},"继承通常会引发大量问题：",{"type":170,"tag":234,"props":340,"children":341},{},[342,347,352],{"type":170,"tag":238,"props":343,"children":344},{},[345],{"type":176,"value":346},"子类不能减少父类的接口，并且需要保证兼容",{"type":170,"tag":238,"props":348,"children":349},{},[350],{"type":176,"value":351},"继承使状态逃离了父类的封装，子类和父类关系过于紧密",{"type":170,"tag":238,"props":353,"children":354},{},[355],{"type":176,"value":356},"继承经常被滥用，导致平行继承体系的出现",{"type":170,"tag":179,"props":358,"children":359},{},[360],{"type":176,"value":361},"假设你在售卖一些计算机，这些计算机包含笔记本，台式电脑以及算盘！",{"type":170,"tag":179,"props":363,"children":364},{},[365],{"type":176,"value":366},"如果使用继承的思路组织代码，你很可能对得到以下结构：",{"type":170,"tag":179,"props":368,"children":369},{},[370],{"type":170,"tag":272,"props":371,"children":374},{"alt":372,"src":373},"Computer Structure V1","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/348faf14-874b-410d-b4b9-ff00b04ab14e.svg",[],{"type":170,"tag":179,"props":376,"children":377},{},[378],{"type":176,"value":379},"使用组合可以方便地把不同的“维度”之间的并行关联拆分出来，降低代码复杂度：",{"type":170,"tag":179,"props":381,"children":382},{},[383],{"type":170,"tag":272,"props":384,"children":387},{"alt":385,"src":386},"Computer Structure V2","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6cbffe1a-8efd-4de6-9ed3-bfef8392bab5.svg",[],{"title":163,"searchDepth":389,"depth":389,"links":390},2,[391,392],{"id":224,"depth":389,"text":227},{"id":287,"depth":389,"text":287,"children":393},[394],{"id":331,"depth":395,"text":331},3,"markdown","content:6.maps:_oop:oop.md","content","6.maps/_oop/oop.md","6.maps/_oop/oop","md",[403,407],{"_path":404,"title":405,"description":406},"/maps/_medicine/medicine","医疗","常见医疗知识、疾病、药物等。",{"_path":408,"title":409,"description":410},"/maps/_person","人物","包括虚拟人物在内的重要人物或角色",1742808189683]