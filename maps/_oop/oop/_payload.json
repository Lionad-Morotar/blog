[{"data":1,"prerenderedAt":414},["ShallowReactive",2],{"navigation":3,"/maps/_oop/oop":161,"/maps/_oop/oop-surround":405},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":399,"_id":400,"_source":401,"_file":402,"_stem":403,"_extension":404},"/maps/_oop/oop","_oop",false,true,"","面相对象编程","面向对象编程是一种编程范式，它将数据和操作封装在对象中，对象之间通过消息传递进行通信。",{"type":170,"children":171,"toc":391},"root",[172,181,187,203,209,214,224,231,236,271,280,288,293,298,303,308,331,337,342,360,365,370,378,383],{"type":173,"tag":174,"props":175,"children":177},"element","h4",{"id":176},"面向对象主要关注哪些方面",[178],{"type":179,"value":180},"text","面向对象主要关注哪些方面？",{"type":173,"tag":182,"props":183,"children":184},"p",{},[185],{"type":179,"value":186},"四个核心概念：封装（Encapsulation）、继承（Inheritance）、多态（Polymorphism）、抽象（Abstraction）。",{"type":173,"tag":182,"props":188,"children":189},{},[190,192,201],{"type":179,"value":191},"见：",{"type":173,"tag":193,"props":194,"children":198},"a",{"href":195,"rel":196},"https://www.bilibili.com/video/BV1gb411w7eW",[197],"nofollow",[199],{"type":179,"value":200},"JavaScript OOP 面向对象编程 @Mosh",{"type":179,"value":202},"，非常基础，适合新手入门",{"type":173,"tag":174,"props":204,"children":206},{"id":205},"面相对象和设计模式的关系",[207],{"type":179,"value":208},"面相对象和设计模式的关系？",{"type":173,"tag":182,"props":210,"children":211},{},[212],{"type":179,"value":213},"一般意义上的设计模式指的是在 OOP 编程范式的实践下总结出来的一些用来解决特定问题的代码设计经验。",{"type":173,"tag":182,"props":215,"children":216},{},[217,218],{"type":179,"value":191},{"type":173,"tag":193,"props":219,"children":221},{"href":220},"/maps/_software/design-patterns",[222],{"type":179,"value":223},"设计模式",{"type":173,"tag":225,"props":226,"children":228},"h2",{"id":227},"uml",[229],{"type":179,"value":230},"UML",{"type":173,"tag":182,"props":232,"children":233},{},[234],{"type":179,"value":235},"类之间的关系总的来说可以包含这几种：",{"type":173,"tag":237,"props":238,"children":239},"ul",{},[240,246,251,256,261,266],{"type":173,"tag":241,"props":242,"children":243},"li",{},[244],{"type":179,"value":245},"A 依赖 B：对类 B 的修改会影响到类 A",{"type":173,"tag":241,"props":247,"children":248},{},[249],{"type":179,"value":250},"A 关联 B：对象 A 知道对象 B，类 A 依赖于类 B",{"type":173,"tag":241,"props":252,"children":253},{},[254],{"type":179,"value":255},"A 聚合 B：对象 A 由 B 构成，类 A 依赖于类 B",{"type":173,"tag":241,"props":257,"children":258},{},[259],{"type":179,"value":260},"A 组合 B：对象 A 由 B 构成且管理 B 的生命周期，类 A 依赖于类 B",{"type":173,"tag":241,"props":262,"children":263},{},[264],{"type":179,"value":265},"A 实现 B：对象 A 可视为对象 B，类 A 定义了接口 B 声明的方法，类 A 依赖于类 B",{"type":173,"tag":241,"props":267,"children":268},{},[269],{"type":179,"value":270},"A 继承 B：对象 A 可视为对象 B，类 A 继承类 B 的接口和实现，还可以对其扩展，类 A 依赖于类 B",{"type":173,"tag":182,"props":272,"children":273},{},[274],{"type":173,"tag":275,"props":276,"children":279},"img",{"alt":277,"src":278},"Class Relations","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/b3612320-5822-48fc-8041-ead5c269f8e5.svg",[],{"type":173,"tag":182,"props":281,"children":282},{},[283],{"type":173,"tag":275,"props":284,"children":287},{"alt":285,"src":286},"Object Relations","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/cff33e77-e9aa-48eb-ae0d-01dd1561abd0.svg",[],{"type":173,"tag":225,"props":289,"children":291},{"id":290},"设计原则",[292],{"type":179,"value":290},{"type":173,"tag":182,"props":294,"children":295},{},[296],{"type":179,"value":297},"什么是优秀的软件设计？",{"type":173,"tag":182,"props":299,"children":300},{},[301],{"type":179,"value":302},"显然，在不同的公司、不同的项目，软件设计并没有一个恒定的标准，不过总的来说我们会讨论代码复用以及代码的扩展性。",{"type":173,"tag":182,"props":304,"children":305},{},[306],{"type":179,"value":307},"有几个基础的设计准则能帮助你做到这两点：",{"type":173,"tag":237,"props":309,"children":310},{},[311,316,321,326],{"type":173,"tag":241,"props":312,"children":313},{},[314],{"type":179,"value":315},"封装变化：找到程序中易变的内容并将其和不变的内容区分开来",{"type":173,"tag":241,"props":317,"children":318},{},[319],{"type":179,"value":320},"面向接口：依赖抽象通常优于依赖具体",{"type":173,"tag":241,"props":322,"children":323},{},[324],{"type":179,"value":325},"优先组合：组合优于继承，因为继承有着挺多保守诟病之处",{"type":173,"tag":241,"props":327,"children":328},{},[329],{"type":179,"value":330},"SOLID 原则",{"type":173,"tag":332,"props":333,"children":335},"h3",{"id":334},"组合优于继承",[336],{"type":179,"value":334},{"type":173,"tag":182,"props":338,"children":339},{},[340],{"type":179,"value":341},"继承通常会引发大量问题：",{"type":173,"tag":237,"props":343,"children":344},{},[345,350,355],{"type":173,"tag":241,"props":346,"children":347},{},[348],{"type":179,"value":349},"子类不能减少父类的接口，并且需要保证兼容",{"type":173,"tag":241,"props":351,"children":352},{},[353],{"type":179,"value":354},"继承使状态逃离了父类的封装，子类和父类关系过于紧密",{"type":173,"tag":241,"props":356,"children":357},{},[358],{"type":179,"value":359},"继承经常被滥用，导致平行继承体系的出现",{"type":173,"tag":182,"props":361,"children":362},{},[363],{"type":179,"value":364},"假设你在售卖一些计算机，这些计算机包含笔记本，台式电脑以及算盘！",{"type":173,"tag":182,"props":366,"children":367},{},[368],{"type":179,"value":369},"如果使用继承的思路组织代码，你很可能对得到以下结构：",{"type":173,"tag":182,"props":371,"children":372},{},[373],{"type":173,"tag":275,"props":374,"children":377},{"alt":375,"src":376},"Computer Structure V1","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/348faf14-874b-410d-b4b9-ff00b04ab14e.svg",[],{"type":173,"tag":182,"props":379,"children":380},{},[381],{"type":179,"value":382},"使用组合可以方便地把不同的“维度”之间的并行关联拆分出来，降低代码复杂度：",{"type":173,"tag":182,"props":384,"children":385},{},[386],{"type":173,"tag":275,"props":387,"children":390},{"alt":388,"src":389},"Computer Structure V2","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6cbffe1a-8efd-4de6-9ed3-bfef8392bab5.svg",[],{"title":166,"searchDepth":392,"depth":392,"links":393},2,[394,395],{"id":227,"depth":392,"text":230},{"id":290,"depth":392,"text":290,"children":396},[397],{"id":334,"depth":398,"text":334},3,"markdown","content:6.maps:_oop:oop.md","content","6.maps/_oop/oop.md","6.maps/_oop/oop","md",[406,410],{"_path":407,"title":408,"description":409},"/maps/_medicine/medicine","医疗","常见医疗知识、疾病、药物等。",{"_path":411,"title":412,"description":413},"/maps/_person","人物","包括虚拟人物在内的重要人物或角色",1754391504859]