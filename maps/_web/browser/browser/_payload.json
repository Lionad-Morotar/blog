[{"data":1,"prerenderedAt":1136},["Reactive",2],{"navigation":3,"/maps/_web/browser/browser":383,"/maps/_web/browser/browser-surround":1129},[4,32,80,96,123,129,135,366,372,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"图片模糊","/gists/blur",{"title":148,"_path":149},"渲染相关笔记","/gists/c4d",{"title":151,"_path":152},"CDN 问题记录","/gists/cdn",{"title":154,"_path":155},"消毒剂","/gists/cleaner",{"title":157,"_path":158},"Windows Command","/gists/cmd",{"title":160,"_path":161},"Command","/gists/command",{"title":163,"_path":164},"复杂科学","/gists/complexity-science",{"title":166,"_path":167},"宇宙","/gists/cosmos",{"title":169,"_path":170},"C++","/gists/cpp",{"title":172,"_path":173},"Data Structure","/gists/data-structure",{"title":175,"_path":176},"DEPRESSION","/gists/depression",{"title":178,"_path":179},"设计模式","/gists/design-patterns",{"title":181,"_path":182},"Developer Experience","/gists/developer-experience",{"title":184,"_path":185},"Device Metrics","/gists/device-metrix",{"title":187,"_path":188},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":190,"_path":191},"正则表达式","/gists/eegex",{"title":193,"_path":194},"Emoji","/gists/emoji",{"title":196,"_path":197},"工程","/gists/engineering",{"title":199,"_path":200},"熵","/gists/entropy",{"title":202,"_path":203},"Environment","/gists/environment",{"title":205,"_path":206},"Erlang","/gists/erlang",{"title":208,"_path":209},"逃离塔克夫","/gists/escape-from-tarkov",{"title":211,"_path":212},"ESNext (ES6-ES11)","/gists/esnext",{"title":214,"_path":215},"Eval！","/gists/eval",{"title":217,"_path":218},"Flutter","/gists/flutter",{"title":220,"_path":221},"字体","/gists/font",{"title":223,"_path":224},"JS 函数式编程","/gists/functional",{"title":226,"_path":227},"Google C++ Standard","/gists/google-cpp-standard",{"title":229,"_path":230},"双向链接完全体","/gists/graph",{"title":232,"_path":233},"Hardwares","/gists/hardwares",{"title":235,"_path":236},"哈希冲突","/gists/hash-collision",{"title":238,"_path":239},"信息设计","/gists/information-design",{"title":241,"_path":242},"InstantPage","/gists/instant.page",{"title":244,"_path":245},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":247,"_path":248},"KVStore","/gists/key-value-db",{"title":250,"_path":251},"Kubernetes","/gists/kubernetes",{"title":253,"_path":254},"Makefile","/gists/makefile",{"title":256,"_path":257},"Markdown Inline Style","/gists/markdown-nice",{"title":259,"_path":260},"小程序","/gists/miniapp",{"title":262,"_path":263},"减小页面快照体积","/gists/minify-html",{"title":265,"_path":266},"mklink","/gists/mklink",{"title":268,"_path":269},"Mock","/gists/mock",{"title":271,"_path":272},"多端应用","/gists/multy-end-app",{"title":274,"_path":275},"神经科学","/gists/neuroscience",{"title":277,"_path":278},"OO","/gists/oo",{"title":280,"_path":281},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":283,"_path":284},"人物","/gists/person",{"title":286,"_path":287},"PInvoke","/gists/pinvoke",{"title":289,"_path":290},"像素","/gists/pixel",{"title":292,"_path":293},"PowerShell","/gists/powershell",{"title":295,"_path":296},"量子","/gists/quantum",{"title":298,"_path":299},"保持好奇心","/gists/questions",{"title":301,"_path":302},"React Native","/gists/react-native",{"title":304,"_path":305},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":307,"_path":308},"SEO","/gists/seo",{"title":310,"_path":311},"Shader","/gists/shader",{"title":313,"_path":314},"Shape Up","/gists/shape-up",{"title":316,"_path":317},"睡觉","/gists/sleep",{"title":319,"_path":320},"States","/gists/states",{"title":322,"_path":323},"Storage","/gists/storage",{"title":325,"_path":326},"音视频流处理","/gists/stream-cli",{"title":328,"_path":329},"Symbol","/gists/symbol",{"title":331,"_path":332},"系统论","/gists/systems-theory",{"title":334,"_path":335},"Taro","/gists/taro",{"title":337,"_path":338},"任务切片","/gists/task-slice",{"title":340,"_path":341},"技术偏好","/gists/tech-dudge",{"title":343,"_path":344},"Untitled","/gists/untitled",{"title":346,"_path":347},"可变字体","/gists/variable-font",{"title":349,"_path":350},"视觉错觉","/gists/visual-illusion",{"title":352,"_path":353},"SS(SSR)","/gists/vpn",{"title":355,"_path":356},"VS Code 插件开发","/gists/vscode-plugin",{"title":358,"_path":359},"Web Components","/gists/web-components",{"title":361,"_path":362},"Windows","/gists/windows",{"title":364,"_path":365},"查缺补漏","/gists/wrong",{"title":367,"_path":368,"children":369},"代码笔记 / Gists","/source-code",[370],{"title":371,"_path":368},"🚄 代码笔记",{"title":373,"_path":374,"children":375},"我 / Abount","/hire",[376],{"title":377,"_path":374},"📬 技术简历",{"title":379,"_path":380,"children":381},"todo","/todo",[382],{"title":379,"_path":380},{"_path":384,"_dir":385,"_draft":386,"_partial":387,"_locale":388,"title":389,"description":388,"body":390,"_type":1124,"_id":1125,"_source":1126,"_file":1127,"_extension":1128},"/maps/_web/browser/browser","browser",false,true,"","浏览器相关",{"type":391,"children":392,"toc":1113},"root",[393,400,406,413,423,429,434,440,445,451,456,462,467,473,478,484,489,494,500,530,535,541,546,552,557,562,567,572,578,583,589,594,600,625,630,654,660,665,670,683,690,695,701,706,711,717,722,728,733,741,747,752,758,763,775,780,786,844,850,855,863,869,874,879,885,897,902,913,919,924,935,941,947,952,960,966,972,977,988,993,1060],{"type":394,"tag":395,"props":396,"children":397},"element","h1",{"id":389},[398],{"type":399,"value":389},"text",{"type":394,"tag":401,"props":402,"children":404},"h2",{"id":403},"组成原理",[405],{"type":399,"value":403},{"type":394,"tag":407,"props":408,"children":410},"h4",{"id":409},"浏览器有哪些组件-浏览器架构",[411],{"type":399,"value":412},"浏览器有哪些组件 / 浏览器架构？",{"type":394,"tag":414,"props":415,"children":416},"p",{},[417],{"type":394,"tag":418,"props":419,"children":422},"img",{"alt":420,"src":421},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":394,"tag":407,"props":424,"children":426},{"id":425},"进程和线程的区别是什么",[427],{"type":399,"value":428},"进程和线程的区别是什么？",{"type":394,"tag":414,"props":430,"children":431},{},[432],{"type":399,"value":433},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":394,"tag":407,"props":435,"children":437},{"id":436},"浏览器的进程线程结构是怎么样的",[438],{"type":399,"value":439},"浏览器的进程线程结构是怎么样的？",{"type":394,"tag":414,"props":441,"children":442},{},[443],{"type":399,"value":444},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":394,"tag":407,"props":446,"children":448},{"id":447},"每个页面都有一个对应的渲染进程吗",[449],{"type":399,"value":450},"每个页面都有一个对应的渲染进程吗？",{"type":394,"tag":414,"props":452,"children":453},{},[454],{"type":399,"value":455},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":394,"tag":407,"props":457,"children":459},{"id":458},"service-worker-是如何工作的",[460],{"type":399,"value":461},"Service Worker 是如何工作的？",{"type":394,"tag":414,"props":463,"children":464},{},[465],{"type":399,"value":466},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":394,"tag":407,"props":468,"children":470},{"id":469},"为什么渲染和脚本执行不可以同时进行",[471],{"type":399,"value":472},"为什么渲染和脚本执行不可以同时进行？",{"type":394,"tag":414,"props":474,"children":475},{},[476],{"type":399,"value":477},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":394,"tag":407,"props":479,"children":481},{"id":480},"webworker-和-sharedworker-的资源是谁来管理的",[482],{"type":399,"value":483},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":394,"tag":414,"props":485,"children":486},{},[487],{"type":399,"value":488},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":394,"tag":401,"props":490,"children":492},{"id":491},"网络请求",[493],{"type":399,"value":491},{"type":394,"tag":407,"props":495,"children":497},{"id":496},"请求-cdn-中的资源的流程是怎样的",[498],{"type":399,"value":499},"请求 CDN 中的资源的流程是怎样的？",{"type":394,"tag":501,"props":502,"children":503},"ol",{},[504,510,515,520,525],{"type":394,"tag":505,"props":506,"children":507},"li",{},[508],{"type":399,"value":509},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":394,"tag":505,"props":511,"children":512},{},[513],{"type":399,"value":514},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":394,"tag":505,"props":516,"children":517},{},[518],{"type":399,"value":519},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":394,"tag":505,"props":521,"children":522},{},[523],{"type":399,"value":524},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":394,"tag":505,"props":526,"children":527},{},[528],{"type":399,"value":529},"发请求，根据各级缓存服务器查找对应资源",{"type":394,"tag":401,"props":531,"children":533},{"id":532},"解析",[534],{"type":399,"value":532},{"type":394,"tag":407,"props":536,"children":538},{"id":537},"浏览器怎么根据请求的文件类型来进一步处理",[539],{"type":399,"value":540},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":394,"tag":414,"props":542,"children":543},{},[544],{"type":399,"value":545},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":394,"tag":407,"props":547,"children":549},{"id":548},"渲染进程的大致工作流程是怎样的",[550],{"type":399,"value":551},"渲染进程的大致工作流程是怎样的？",{"type":394,"tag":414,"props":553,"children":554},{},[555],{"type":399,"value":556},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":394,"tag":414,"props":558,"children":559},{},[560],{"type":399,"value":561},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":394,"tag":414,"props":563,"children":564},{},[565],{"type":399,"value":566},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":394,"tag":414,"props":568,"children":569},{},[570],{"type":399,"value":571},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染GPU 进程渲染页面。",{"type":394,"tag":407,"props":573,"children":575},{"id":574},"为什么解析-html-无法使用自上而下或自下而上的解析器",[576],{"type":399,"value":577},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":394,"tag":414,"props":579,"children":580},{},[581],{"type":399,"value":582},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":394,"tag":407,"props":584,"children":586},{"id":585},"碰到错误的标签会怎么处理",[587],{"type":399,"value":588},"碰到错误的标签会怎么处理？",{"type":394,"tag":414,"props":590,"children":591},{},[592],{"type":399,"value":593},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":394,"tag":407,"props":595,"children":597},{"id":596},"css-解析和-html-的有什么不同",[598],{"type":399,"value":599},"CSS 解析和 HTML 的有什么不同？",{"type":394,"tag":414,"props":601,"children":602},{},[603,605,611,613,617,619,623],{"type":399,"value":604},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":394,"tag":606,"props":607,"children":608},"span",{},[609],{"type":399,"value":610},"0-9",{"type":399,"value":612},"+|",{"type":394,"tag":606,"props":614,"children":615},{},[616],{"type":399,"value":610},{"type":399,"value":618},"*.",{"type":394,"tag":606,"props":620,"children":621},{},[622],{"type":399,"value":610},{"type":399,"value":624},"+，语法则用 BNF（巴科斯范式）描述。",{"type":394,"tag":414,"props":626,"children":627},{},[628],{"type":399,"value":629},"TODO:",{"type":394,"tag":631,"props":632,"children":633},"ul",{},[634,645],{"type":394,"tag":505,"props":635,"children":636},{},[637],{"type":394,"tag":638,"props":639,"children":643},"a",{"href":640,"rel":641},"https://zhuanlan.zhihu.com/p/31311515",[642],"nofollow",[644],{"type":399,"value":640},{"type":394,"tag":505,"props":646,"children":647},{},[648],{"type":394,"tag":638,"props":649,"children":652},{"href":650,"rel":651},"https://zhuanlan.zhihu.com/p/358518402",[642],[653],{"type":399,"value":650},{"type":394,"tag":407,"props":655,"children":657},{"id":656},"构建渲染树时用了什么优化策略",[658],{"type":399,"value":659},"构建渲染树时用了什么优化策略？",{"type":394,"tag":414,"props":661,"children":662},{},[663],{"type":399,"value":664},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":394,"tag":414,"props":666,"children":667},{},[668],{"type":399,"value":669},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":394,"tag":414,"props":671,"children":672},{},[673,675,681],{"type":399,"value":674},"Firefox 使用了",{"type":394,"tag":676,"props":677,"children":678},"strong",{},[679],{"type":399,"value":680},"规则树",{"type":399,"value":682},"这一方案。TODO",{"type":394,"tag":414,"props":684,"children":685},{},[686],{"type":394,"tag":418,"props":687,"children":689},{"alt":680,"src":688},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":394,"tag":401,"props":691,"children":693},{"id":692},"渲染",[694],{"type":399,"value":692},{"type":394,"tag":407,"props":696,"children":698},{"id":697},"如何避免重绘与回流",[699],{"type":399,"value":700},"如何避免重绘与回流？",{"type":394,"tag":414,"props":702,"children":703},{},[704],{"type":399,"value":705},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":394,"tag":414,"props":707,"children":708},{},[709],{"type":399,"value":710},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":394,"tag":407,"props":712,"children":714},{"id":713},"domcontentloaded-和-onload-事件先后顺序是",[715],{"type":399,"value":716},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":394,"tag":414,"props":718,"children":719},{},[720],{"type":399,"value":721},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":394,"tag":407,"props":723,"children":725},{"id":724},"复合composite是什么",[726],{"type":399,"value":727},"复合（Composite）是什么？",{"type":394,"tag":414,"props":729,"children":730},{},[731],{"type":399,"value":732},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":394,"tag":414,"props":734,"children":735},{},[736],{"type":394,"tag":418,"props":737,"children":740},{"alt":738,"src":739},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":394,"tag":407,"props":742,"children":744},{"id":743},"图层是什么",[745],{"type":399,"value":746},"图层是什么？",{"type":394,"tag":414,"props":748,"children":749},{},[750],{"type":399,"value":751},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":394,"tag":407,"props":753,"children":755},{"id":754},"浏览器硬件加速是指什么",[756],{"type":399,"value":757},"浏览器硬件加速是指什么？",{"type":394,"tag":414,"props":759,"children":760},{},[761],{"type":399,"value":762},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":394,"tag":414,"props":764,"children":765},{},[766,768],{"type":399,"value":767},"见：",{"type":394,"tag":638,"props":769,"children":772},{"href":770,"rel":771},"https://zhuanlan.zhihu.com/p/404656386",[642],[773],{"type":399,"value":774},"搞懂 GPU 和 CSS 硬件加速",{"type":394,"tag":401,"props":776,"children":778},{"id":777},"浏览器操作",[779],{"type":399,"value":777},{"type":394,"tag":407,"props":781,"children":783},{"id":782},"从输入-url-到页面显示的过程",[784],{"type":399,"value":785},"从输入 URL 到页面显示的过程？",{"type":394,"tag":501,"props":787,"children":788},{},[789,794,799,804,814,819,824,829,839],{"type":394,"tag":505,"props":790,"children":791},{},[792],{"type":399,"value":793},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":394,"tag":505,"props":795,"children":796},{},[797],{"type":399,"value":798},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":394,"tag":505,"props":800,"children":801},{},[802],{"type":399,"value":803},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":394,"tag":505,"props":805,"children":806},{},[807,809],{"type":399,"value":808},"如果是请求 CDN 中的资源，见：",{"type":394,"tag":638,"props":810,"children":812},{"href":811},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[813],{"type":399,"value":499},{"type":394,"tag":505,"props":815,"children":816},{},[817],{"type":399,"value":818},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":394,"tag":505,"props":820,"children":821},{},[822],{"type":399,"value":823},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":394,"tag":505,"props":825,"children":826},{},[827],{"type":399,"value":828},"浏览器根据响应，缓存资源。",{"type":394,"tag":505,"props":830,"children":831},{},[832,834],{"type":399,"value":833},"渲染进程开始渲染，见：",{"type":394,"tag":638,"props":835,"children":837},{"href":836},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[838],{"type":399,"value":551},{"type":394,"tag":505,"props":840,"children":841},{},[842],{"type":399,"value":843},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":394,"tag":407,"props":845,"children":847},{"id":846},"简单介绍一下浏览器的事件捕获机制",[848],{"type":399,"value":849},"简单介绍一下浏览器的事件捕获机制？",{"type":394,"tag":414,"props":851,"children":852},{},[853],{"type":399,"value":854},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":394,"tag":414,"props":856,"children":857},{},[858],{"type":394,"tag":418,"props":859,"children":862},{"alt":860,"src":861},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":394,"tag":407,"props":864,"children":866},{"id":865},"为什么-passive-true-能改善滚动性能",[867],{"type":399,"value":868},"为什么 passive true 能改善滚动性能？",{"type":394,"tag":414,"props":870,"children":871},{},[872],{"type":399,"value":873},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":394,"tag":414,"props":875,"children":876},{},[877],{"type":399,"value":878},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":394,"tag":407,"props":880,"children":882},{"id":881},"bfcache-是如何运作的",[883],{"type":399,"value":884},"BFCache 是如何运作的？",{"type":394,"tag":414,"props":886,"children":887},{},[888,895],{"type":394,"tag":638,"props":889,"children":892},{"href":890,"rel":891},"https://www.youtube.com/watch?v=cuPsdRckkF0",[642],[893],{"type":399,"value":894},"BFCache（Back/Forward Cache）",{"type":399,"value":896},"是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":394,"tag":414,"props":898,"children":899},{},[900],{"type":399,"value":901},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":394,"tag":414,"props":903,"children":904},{},[905,906],{"type":399,"value":767},{"type":394,"tag":638,"props":907,"children":910},{"href":908,"rel":909},"https://web.dev/bfcache",[642],[911],{"type":399,"value":912},"BFCache",{"type":394,"tag":407,"props":914,"children":916},{"id":915},"浏览器怎么跨页面通信",[917],{"type":399,"value":918},"浏览器怎么跨页面通信？",{"type":394,"tag":414,"props":920,"children":921},{},[922],{"type":399,"value":923},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":394,"tag":414,"props":925,"children":926},{},[927,928],{"type":399,"value":767},{"type":394,"tag":638,"props":929,"children":932},{"href":930,"rel":931},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[642],[933],{"type":399,"value":934},"Broadcast Channel",{"type":394,"tag":401,"props":936,"children":938},{"id":937},"dev-tools",[939],{"type":399,"value":940},"Dev Tools",{"type":394,"tag":407,"props":942,"children":944},{"id":943},"代码覆盖率怎么看",[945],{"type":399,"value":946},"代码覆盖率怎么看？",{"type":394,"tag":414,"props":948,"children":949},{},[950],{"type":399,"value":951},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":394,"tag":414,"props":953,"children":954},{},[955],{"type":394,"tag":418,"props":956,"children":959},{"alt":957,"src":958},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":394,"tag":401,"props":961,"children":963},{"id":962},"api",[964],{"type":399,"value":965},"API",{"type":394,"tag":407,"props":967,"children":969},{"id":968},"eventsource",[970],{"type":399,"value":971},"EventSource",{"type":394,"tag":414,"props":973,"children":974},{},[975],{"type":399,"value":976},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":394,"tag":414,"props":978,"children":979},{},[980,981],{"type":399,"value":767},{"type":394,"tag":638,"props":982,"children":985},{"href":983,"rel":984},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[642],[986],{"type":399,"value":987},"Event Source API Test",{"type":394,"tag":401,"props":989,"children":990},{"id":379},[991],{"type":399,"value":992},"TODO",{"type":394,"tag":631,"props":994,"children":995},{},[996,1006,1016,1026,1036,1048],{"type":394,"tag":505,"props":997,"children":998},{},[999],{"type":394,"tag":638,"props":1000,"children":1003},{"href":1001,"rel":1002},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[642],[1004],{"type":399,"value":1005},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":394,"tag":505,"props":1007,"children":1008},{},[1009],{"type":394,"tag":638,"props":1010,"children":1013},{"href":1011,"rel":1012},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[642],[1014],{"type":399,"value":1015},"HTML SPEC",{"type":394,"tag":505,"props":1017,"children":1018},{},[1019],{"type":394,"tag":638,"props":1020,"children":1023},{"href":1021,"rel":1022},"https://www.w3.org/TR/selectors-3/#grammar",[642],[1024],{"type":399,"value":1025},"CSS Selectors Level 3",{"type":394,"tag":505,"props":1027,"children":1028},{},[1029],{"type":394,"tag":638,"props":1030,"children":1033},{"href":1031,"rel":1032},"https://developer.chrome.com/blog/inside-browser-part1/",[642],[1034],{"type":399,"value":1035},"Inside look at modern web browser (part 1)",{"type":394,"tag":505,"props":1037,"children":1038},{},[1039,1046],{"type":394,"tag":638,"props":1040,"children":1043},{"href":1041,"rel":1042},"https://zhuanlan.zhihu.com/p/47407398",[642],[1044],{"type":399,"value":1045},"图解浏览器的基本工作原理",{"type":399,"value":1047},"，现代浏览器内部原理系列的中文翻译其一。",{"type":394,"tag":505,"props":1049,"children":1050},{},[1051,1058],{"type":394,"tag":638,"props":1052,"children":1055},{"href":1053,"rel":1054},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[642],[1056],{"type":399,"value":1057},"浏览器地址栏中输入URL到页面显示，浏览器到底发生了什么？",{"type":399,"value":1059},"，综合笔记。",{"type":394,"tag":631,"props":1061,"children":1062},{},[1063,1073,1083,1093,1103],{"type":394,"tag":505,"props":1064,"children":1065},{},[1066],{"type":394,"tag":638,"props":1067,"children":1070},{"href":1068,"rel":1069},"https://juejin.im/post/59e85eebf265da430d571f89",[642],[1071],{"type":399,"value":1072},"这一次，彻底弄懂 JavaScript 执行机制",{"type":394,"tag":505,"props":1074,"children":1075},{},[1076],{"type":394,"tag":638,"props":1077,"children":1080},{"href":1078,"rel":1079},"https://javascript.ruanyifeng.com/oop/basic.html",[642],[1081],{"type":399,"value":1082},"构造函数与 new 命令",{"type":394,"tag":505,"props":1084,"children":1085},{},[1086],{"type":394,"tag":638,"props":1087,"children":1090},{"href":1088,"rel":1089},"http://newhtml.net/v8-garbage-collection/",[642],[1091],{"type":399,"value":1092},"V8 之旅：垃圾回收器",{"type":394,"tag":505,"props":1094,"children":1095},{},[1096],{"type":394,"tag":638,"props":1097,"children":1100},{"href":1098,"rel":1099},"https://v8.dev/blog/concurrent-marking",[642],[1101],{"type":399,"value":1102},"Concurrent marking in V8",{"type":394,"tag":505,"props":1104,"children":1105},{},[1106],{"type":394,"tag":638,"props":1107,"children":1110},{"href":1108,"rel":1109},"https://juejin.im/post/59fbdb46f265da4321536565",[642],[1111],{"type":399,"value":1112},"内存分析与内存泄漏定位",{"title":388,"searchDepth":1114,"depth":1114,"links":1115},2,[1116,1117,1118,1119,1120,1121,1122,1123],{"id":403,"depth":1114,"text":403},{"id":491,"depth":1114,"text":491},{"id":532,"depth":1114,"text":532},{"id":692,"depth":1114,"text":692},{"id":777,"depth":1114,"text":777},{"id":937,"depth":1114,"text":940},{"id":962,"depth":1114,"text":965},{"id":379,"depth":1114,"text":992},"markdown","content:6.maps:_web:browser:browser.md","content","6.maps/_web/browser/browser.md","md",[1130,1133],{"_path":1131,"title":1132,"description":388},"/maps/_typescript/typescript","TypeScript",{"_path":1134,"title":1135,"description":388},"/maps/_web/browser","浏览器",1708107601477]