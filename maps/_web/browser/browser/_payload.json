[{"data":1,"prerenderedAt":1164},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/browser":410,"/maps/_web/browser/browser-surround":1157},[4,32,83,102,129,135,141,147,393,399,405],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96,99],{"title":88,"_path":89},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":91,"_path":92},"🌐 AnySort","/tools/anysort",{"title":94,"_path":95},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":97,"_path":98},"👓 Crapto","/tools/crypto-inline",{"title":100,"_path":101},"🖨️ any-to-base64","/tools/any-to-base64",{"title":103,"_path":104,"children":105},"吉他剧场 / Music","/music",[106,108,111,114,117,120,123,126],{"title":107,"_path":104},"🎸 FingerStyle！",{"title":109,"_path":110},"🌬️ 等待的风","/music/wind",{"title":112,"_path":113},"💕 约定的海洋","/music/ocean",{"title":115,"_path":116},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":118,"_path":119},"🌏 残酷天使的行动纲领","/music/eva",{"title":121,"_path":122},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":124,"_path":125},"🍷 Wu Wei","/music/wu-wei",{"title":127,"_path":128},"🌅 无题","/music/untitled",{"title":130,"_path":131,"children":132},"画点什么 / Paint","/paint",[133],{"title":134,"_path":131},"🚧 正在施工",{"title":136,"_path":137,"children":138},"读书笔记 / Notes","/books",[139],{"title":140,"_path":137},"📕 读书笔记",{"title":142,"_path":143,"children":144},"知识地图 / Maps","/maps",[145],{"title":146,"_path":143},"🏁 知识地图",{"title":148,"_path":149,"children":150},"零散的笔记 / Gists","/gists",[151,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"title":152,"_path":149},"🧊 Gists",{"title":154,"_path":155},"网站的可访问性","/gists/accessibility",{"title":157,"_path":158},"Bit","/gists/bit",{"title":160,"_path":161},"图片模糊","/gists/blur",{"title":163,"_path":164},"渲染相关笔记","/gists/c4d",{"title":166,"_path":167},"CDN 问题记录","/gists/cdn",{"title":169,"_path":170},"消毒剂","/gists/cleaner",{"title":172,"_path":173},"Windows Command","/gists/cmd",{"title":175,"_path":176},"Command","/gists/command",{"title":178,"_path":179},"复杂科学","/gists/complexity-science",{"title":181,"_path":182},"GitHub Copilot","/gists/copilot",{"title":184,"_path":185},"宇宙","/gists/cosmos",{"title":187,"_path":188},"C++","/gists/cpp",{"title":190,"_path":191},"Data Structure","/gists/data-structure",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"设计模式","/gists/design-patterns",{"title":199,"_path":200},"Developer Experience","/gists/developer-experience",{"title":202,"_path":203},"Device Metrics","/gists/device-metrix",{"title":205,"_path":206},"数字化转型","/gists/digital-transformation",{"title":208,"_path":209},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":211,"_path":212},"正则表达式","/gists/eegex",{"title":214,"_path":215},"Emoji","/gists/emoji",{"title":217,"_path":218},"工程","/gists/engineering",{"title":220,"_path":221},"熵","/gists/entropy",{"title":223,"_path":224},"Environment","/gists/environment",{"title":226,"_path":227},"Erlang","/gists/erlang",{"title":229,"_path":230},"逃离塔克夫","/gists/escape-from-tarkov",{"title":232,"_path":233},"ESNext (ES6-ES11)","/gists/esnext",{"title":235,"_path":236},"Eval！","/gists/eval",{"title":238,"_path":239},"Flutter","/gists/flutter",{"title":241,"_path":242},"字体","/gists/font",{"title":244,"_path":245},"JS 函数式编程","/gists/functional",{"title":247,"_path":248},"游戏化","/gists/gamification",{"title":250,"_path":251},"Google C++ Standard","/gists/google-cpp-standard",{"title":253,"_path":254},"双向链接完全体","/gists/graph",{"title":256,"_path":257},"Hardwares","/gists/hardwares",{"title":259,"_path":260},"哈希冲突","/gists/hash-collision",{"title":262,"_path":263},"信息设计","/gists/information-design",{"title":265,"_path":266},"InstantPage","/gists/instant.page",{"title":268,"_path":269},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":271,"_path":272},"KVStore","/gists/key-value-db",{"title":274,"_path":275},"Kubernetes","/gists/kubernetes",{"title":277,"_path":278},"Makefile","/gists/makefile",{"title":280,"_path":281},"Markdown Inline Style","/gists/markdown-nice",{"title":283,"_path":284},"小程序","/gists/miniapp",{"title":286,"_path":287},"减小页面快照体积","/gists/minify-html",{"title":289,"_path":290},"mklink","/gists/mklink",{"title":292,"_path":293},"Mock","/gists/mock",{"title":295,"_path":296},"多人协作系统","/gists/multiplayer",{"title":298,"_path":299},"多端应用","/gists/multy-end-app",{"title":301,"_path":302},"神经科学","/gists/neuroscience",{"title":304,"_path":305},"OO","/gists/oo",{"title":307,"_path":308},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":310,"_path":311},"PInvoke","/gists/pinvoke",{"title":313,"_path":314},"像素","/gists/pixel",{"title":316,"_path":317},"PowerShell","/gists/powershell",{"title":319,"_path":320},"量子","/gists/quantum",{"title":322,"_path":323},"保持好奇心","/gists/questions",{"title":325,"_path":326},"React Native","/gists/react-native",{"title":328,"_path":329},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":331,"_path":332},"SEO","/gists/seo",{"title":334,"_path":335},"Shader","/gists/shader",{"title":337,"_path":338},"Shape Up","/gists/shape-up",{"title":340,"_path":341},"睡觉","/gists/sleep",{"title":343,"_path":344},"记录奇怪的问题","/gists/solved",{"title":346,"_path":347},"States","/gists/states",{"title":349,"_path":350},"Storage","/gists/storage",{"title":352,"_path":353},"音视频流处理","/gists/stream-cli",{"title":355,"_path":356},"Symbol","/gists/symbol",{"title":358,"_path":359},"系统论","/gists/systems-theory",{"title":361,"_path":362},"Taro","/gists/taro",{"title":364,"_path":365},"任务切片","/gists/task-slice",{"title":367,"_path":368},"技术偏好","/gists/tech-dudge",{"title":370,"_path":371},"Untitled","/gists/untitled",{"title":373,"_path":374},"可变字体","/gists/variable-font",{"title":376,"_path":377},"视觉错觉","/gists/visual-illusion",{"title":379,"_path":380},"SS(SSR)","/gists/vpn",{"title":382,"_path":383},"VS Code 插件开发","/gists/vscode-plugin",{"title":385,"_path":386},"Web Components","/gists/web-components",{"title":388,"_path":389},"Windows","/gists/windows",{"title":391,"_path":392},"查缺补漏","/gists/wrong",{"title":394,"_path":395,"children":396},"代码笔记 / Gists","/source-code",[397],{"title":398,"_path":395},"🚄 代码笔记",{"title":400,"_path":401,"children":402},"我 / Abount","/hire",[403],{"title":404,"_path":401},"📬 技术简历",{"title":406,"_path":407,"children":408},"todo","/todo",[409],{"title":406,"_path":407},{"_path":411,"_dir":412,"_draft":413,"_partial":414,"_locale":415,"title":416,"description":415,"body":417,"_type":1151,"_id":1152,"_source":1153,"_file":1154,"_stem":1155,"_extension":1156},"/maps/_web/browser/browser","browser",false,true,"","浏览器相关",{"type":418,"children":419,"toc":1140},"root",[420,427,433,440,450,456,461,467,472,478,483,489,494,500,505,511,516,521,527,557,562,568,573,579,584,589,594,599,605,610,616,621,627,652,657,681,687,692,697,710,717,722,728,733,738,744,749,755,760,768,774,779,785,790,802,807,813,871,877,882,890,896,901,906,912,924,929,940,946,951,962,968,974,979,987,993,999,1004,1015,1020,1087],{"type":421,"tag":422,"props":423,"children":424},"element","h1",{"id":416},[425],{"type":426,"value":416},"text",{"type":421,"tag":428,"props":429,"children":431},"h2",{"id":430},"组成原理",[432],{"type":426,"value":430},{"type":421,"tag":434,"props":435,"children":437},"h4",{"id":436},"浏览器有哪些组件-浏览器架构",[438],{"type":426,"value":439},"浏览器有哪些组件 / 浏览器架构？",{"type":421,"tag":441,"props":442,"children":443},"p",{},[444],{"type":421,"tag":445,"props":446,"children":449},"img",{"alt":447,"src":448},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":421,"tag":434,"props":451,"children":453},{"id":452},"进程和线程的区别是什么",[454],{"type":426,"value":455},"进程和线程的区别是什么？",{"type":421,"tag":441,"props":457,"children":458},{},[459],{"type":426,"value":460},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":421,"tag":434,"props":462,"children":464},{"id":463},"浏览器的进程线程结构是怎么样的",[465],{"type":426,"value":466},"浏览器的进程线程结构是怎么样的？",{"type":421,"tag":441,"props":468,"children":469},{},[470],{"type":426,"value":471},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":421,"tag":434,"props":473,"children":475},{"id":474},"每个页面都有一个对应的渲染进程吗",[476],{"type":426,"value":477},"每个页面都有一个对应的渲染进程吗？",{"type":421,"tag":441,"props":479,"children":480},{},[481],{"type":426,"value":482},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":421,"tag":434,"props":484,"children":486},{"id":485},"service-worker-是如何工作的",[487],{"type":426,"value":488},"Service Worker 是如何工作的？",{"type":421,"tag":441,"props":490,"children":491},{},[492],{"type":426,"value":493},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":421,"tag":434,"props":495,"children":497},{"id":496},"为什么渲染和脚本执行不可以同时进行",[498],{"type":426,"value":499},"为什么渲染和脚本执行不可以同时进行？",{"type":421,"tag":441,"props":501,"children":502},{},[503],{"type":426,"value":504},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":421,"tag":434,"props":506,"children":508},{"id":507},"webworker-和-sharedworker-的资源是谁来管理的",[509],{"type":426,"value":510},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":421,"tag":441,"props":512,"children":513},{},[514],{"type":426,"value":515},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":421,"tag":428,"props":517,"children":519},{"id":518},"网络请求",[520],{"type":426,"value":518},{"type":421,"tag":434,"props":522,"children":524},{"id":523},"请求-cdn-中的资源的流程是怎样的",[525],{"type":426,"value":526},"请求 CDN 中的资源的流程是怎样的？",{"type":421,"tag":528,"props":529,"children":530},"ol",{},[531,537,542,547,552],{"type":421,"tag":532,"props":533,"children":534},"li",{},[535],{"type":426,"value":536},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":421,"tag":532,"props":538,"children":539},{},[540],{"type":426,"value":541},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":421,"tag":532,"props":543,"children":544},{},[545],{"type":426,"value":546},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":421,"tag":532,"props":548,"children":549},{},[550],{"type":426,"value":551},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":421,"tag":532,"props":553,"children":554},{},[555],{"type":426,"value":556},"发请求，根据各级缓存服务器查找对应资源",{"type":421,"tag":428,"props":558,"children":560},{"id":559},"解析",[561],{"type":426,"value":559},{"type":421,"tag":434,"props":563,"children":565},{"id":564},"浏览器怎么根据请求的文件类型来进一步处理",[566],{"type":426,"value":567},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":421,"tag":441,"props":569,"children":570},{},[571],{"type":426,"value":572},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":421,"tag":434,"props":574,"children":576},{"id":575},"渲染进程的大致工作流程是怎样的",[577],{"type":426,"value":578},"渲染进程的大致工作流程是怎样的？",{"type":421,"tag":441,"props":580,"children":581},{},[582],{"type":426,"value":583},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":421,"tag":441,"props":585,"children":586},{},[587],{"type":426,"value":588},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":421,"tag":441,"props":590,"children":591},{},[592],{"type":426,"value":593},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":421,"tag":441,"props":595,"children":596},{},[597],{"type":426,"value":598},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染GPU 进程渲染页面。",{"type":421,"tag":434,"props":600,"children":602},{"id":601},"为什么解析-html-无法使用自上而下或自下而上的解析器",[603],{"type":426,"value":604},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":421,"tag":441,"props":606,"children":607},{},[608],{"type":426,"value":609},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":421,"tag":434,"props":611,"children":613},{"id":612},"碰到错误的标签会怎么处理",[614],{"type":426,"value":615},"碰到错误的标签会怎么处理？",{"type":421,"tag":441,"props":617,"children":618},{},[619],{"type":426,"value":620},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":421,"tag":434,"props":622,"children":624},{"id":623},"css-解析和-html-的有什么不同",[625],{"type":426,"value":626},"CSS 解析和 HTML 的有什么不同？",{"type":421,"tag":441,"props":628,"children":629},{},[630,632,638,640,644,646,650],{"type":426,"value":631},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":421,"tag":633,"props":634,"children":635},"span",{},[636],{"type":426,"value":637},"0-9",{"type":426,"value":639},"+|",{"type":421,"tag":633,"props":641,"children":642},{},[643],{"type":426,"value":637},{"type":426,"value":645},"*.",{"type":421,"tag":633,"props":647,"children":648},{},[649],{"type":426,"value":637},{"type":426,"value":651},"+，语法则用 BNF（巴科斯范式）描述。",{"type":421,"tag":441,"props":653,"children":654},{},[655],{"type":426,"value":656},"TODO:",{"type":421,"tag":658,"props":659,"children":660},"ul",{},[661,672],{"type":421,"tag":532,"props":662,"children":663},{},[664],{"type":421,"tag":665,"props":666,"children":670},"a",{"href":667,"rel":668},"https://zhuanlan.zhihu.com/p/31311515",[669],"nofollow",[671],{"type":426,"value":667},{"type":421,"tag":532,"props":673,"children":674},{},[675],{"type":421,"tag":665,"props":676,"children":679},{"href":677,"rel":678},"https://zhuanlan.zhihu.com/p/358518402",[669],[680],{"type":426,"value":677},{"type":421,"tag":434,"props":682,"children":684},{"id":683},"构建渲染树时用了什么优化策略",[685],{"type":426,"value":686},"构建渲染树时用了什么优化策略？",{"type":421,"tag":441,"props":688,"children":689},{},[690],{"type":426,"value":691},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":421,"tag":441,"props":693,"children":694},{},[695],{"type":426,"value":696},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":421,"tag":441,"props":698,"children":699},{},[700,702,708],{"type":426,"value":701},"Firefox 使用了",{"type":421,"tag":703,"props":704,"children":705},"strong",{},[706],{"type":426,"value":707},"规则树",{"type":426,"value":709},"这一方案。TODO",{"type":421,"tag":441,"props":711,"children":712},{},[713],{"type":421,"tag":445,"props":714,"children":716},{"alt":707,"src":715},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":421,"tag":428,"props":718,"children":720},{"id":719},"渲染",[721],{"type":426,"value":719},{"type":421,"tag":434,"props":723,"children":725},{"id":724},"如何避免重绘与回流",[726],{"type":426,"value":727},"如何避免重绘与回流？",{"type":421,"tag":441,"props":729,"children":730},{},[731],{"type":426,"value":732},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":421,"tag":441,"props":734,"children":735},{},[736],{"type":426,"value":737},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":421,"tag":434,"props":739,"children":741},{"id":740},"domcontentloaded-和-onload-事件先后顺序是",[742],{"type":426,"value":743},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":421,"tag":441,"props":745,"children":746},{},[747],{"type":426,"value":748},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":421,"tag":434,"props":750,"children":752},{"id":751},"复合composite是什么",[753],{"type":426,"value":754},"复合（Composite）是什么？",{"type":421,"tag":441,"props":756,"children":757},{},[758],{"type":426,"value":759},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":421,"tag":441,"props":761,"children":762},{},[763],{"type":421,"tag":445,"props":764,"children":767},{"alt":765,"src":766},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":421,"tag":434,"props":769,"children":771},{"id":770},"图层是什么",[772],{"type":426,"value":773},"图层是什么？",{"type":421,"tag":441,"props":775,"children":776},{},[777],{"type":426,"value":778},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":421,"tag":434,"props":780,"children":782},{"id":781},"浏览器硬件加速是指什么",[783],{"type":426,"value":784},"浏览器硬件加速是指什么？",{"type":421,"tag":441,"props":786,"children":787},{},[788],{"type":426,"value":789},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":421,"tag":441,"props":791,"children":792},{},[793,795],{"type":426,"value":794},"见：",{"type":421,"tag":665,"props":796,"children":799},{"href":797,"rel":798},"https://zhuanlan.zhihu.com/p/404656386",[669],[800],{"type":426,"value":801},"搞懂 GPU 和 CSS 硬件加速",{"type":421,"tag":428,"props":803,"children":805},{"id":804},"浏览器操作",[806],{"type":426,"value":804},{"type":421,"tag":434,"props":808,"children":810},{"id":809},"从输入-url-到页面显示的过程",[811],{"type":426,"value":812},"从输入 URL 到页面显示的过程？",{"type":421,"tag":528,"props":814,"children":815},{},[816,821,826,831,841,846,851,856,866],{"type":421,"tag":532,"props":817,"children":818},{},[819],{"type":426,"value":820},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":421,"tag":532,"props":822,"children":823},{},[824],{"type":426,"value":825},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":421,"tag":532,"props":827,"children":828},{},[829],{"type":426,"value":830},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":421,"tag":532,"props":832,"children":833},{},[834,836],{"type":426,"value":835},"如果是请求 CDN 中的资源，见：",{"type":421,"tag":665,"props":837,"children":839},{"href":838},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[840],{"type":426,"value":526},{"type":421,"tag":532,"props":842,"children":843},{},[844],{"type":426,"value":845},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":421,"tag":532,"props":847,"children":848},{},[849],{"type":426,"value":850},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":421,"tag":532,"props":852,"children":853},{},[854],{"type":426,"value":855},"浏览器根据响应，缓存资源。",{"type":421,"tag":532,"props":857,"children":858},{},[859,861],{"type":426,"value":860},"渲染进程开始渲染，见：",{"type":421,"tag":665,"props":862,"children":864},{"href":863},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[865],{"type":426,"value":578},{"type":421,"tag":532,"props":867,"children":868},{},[869],{"type":426,"value":870},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":421,"tag":434,"props":872,"children":874},{"id":873},"简单介绍一下浏览器的事件捕获机制",[875],{"type":426,"value":876},"简单介绍一下浏览器的事件捕获机制？",{"type":421,"tag":441,"props":878,"children":879},{},[880],{"type":426,"value":881},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":421,"tag":441,"props":883,"children":884},{},[885],{"type":421,"tag":445,"props":886,"children":889},{"alt":887,"src":888},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":421,"tag":434,"props":891,"children":893},{"id":892},"为什么-passive-true-能改善滚动性能",[894],{"type":426,"value":895},"为什么 passive true 能改善滚动性能？",{"type":421,"tag":441,"props":897,"children":898},{},[899],{"type":426,"value":900},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":421,"tag":441,"props":902,"children":903},{},[904],{"type":426,"value":905},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":421,"tag":434,"props":907,"children":909},{"id":908},"bfcache-是如何运作的",[910],{"type":426,"value":911},"BFCache 是如何运作的？",{"type":421,"tag":441,"props":913,"children":914},{},[915,922],{"type":421,"tag":665,"props":916,"children":919},{"href":917,"rel":918},"https://www.youtube.com/watch?v=cuPsdRckkF0",[669],[920],{"type":426,"value":921},"BFCache（Back/Forward Cache）",{"type":426,"value":923},"是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":421,"tag":441,"props":925,"children":926},{},[927],{"type":426,"value":928},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":421,"tag":441,"props":930,"children":931},{},[932,933],{"type":426,"value":794},{"type":421,"tag":665,"props":934,"children":937},{"href":935,"rel":936},"https://web.dev/bfcache",[669],[938],{"type":426,"value":939},"BFCache",{"type":421,"tag":434,"props":941,"children":943},{"id":942},"浏览器怎么跨页面通信",[944],{"type":426,"value":945},"浏览器怎么跨页面通信？",{"type":421,"tag":441,"props":947,"children":948},{},[949],{"type":426,"value":950},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":421,"tag":441,"props":952,"children":953},{},[954,955],{"type":426,"value":794},{"type":421,"tag":665,"props":956,"children":959},{"href":957,"rel":958},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[669],[960],{"type":426,"value":961},"Broadcast Channel",{"type":421,"tag":428,"props":963,"children":965},{"id":964},"dev-tools",[966],{"type":426,"value":967},"Dev Tools",{"type":421,"tag":434,"props":969,"children":971},{"id":970},"代码覆盖率怎么看",[972],{"type":426,"value":973},"代码覆盖率怎么看？",{"type":421,"tag":441,"props":975,"children":976},{},[977],{"type":426,"value":978},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":421,"tag":441,"props":980,"children":981},{},[982],{"type":421,"tag":445,"props":983,"children":986},{"alt":984,"src":985},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":421,"tag":428,"props":988,"children":990},{"id":989},"api",[991],{"type":426,"value":992},"API",{"type":421,"tag":434,"props":994,"children":996},{"id":995},"eventsource",[997],{"type":426,"value":998},"EventSource",{"type":421,"tag":441,"props":1000,"children":1001},{},[1002],{"type":426,"value":1003},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":421,"tag":441,"props":1005,"children":1006},{},[1007,1008],{"type":426,"value":794},{"type":421,"tag":665,"props":1009,"children":1012},{"href":1010,"rel":1011},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[669],[1013],{"type":426,"value":1014},"Event Source API Test",{"type":421,"tag":428,"props":1016,"children":1017},{"id":406},[1018],{"type":426,"value":1019},"TODO",{"type":421,"tag":658,"props":1021,"children":1022},{},[1023,1033,1043,1053,1063,1075],{"type":421,"tag":532,"props":1024,"children":1025},{},[1026],{"type":421,"tag":665,"props":1027,"children":1030},{"href":1028,"rel":1029},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[669],[1031],{"type":426,"value":1032},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":421,"tag":532,"props":1034,"children":1035},{},[1036],{"type":421,"tag":665,"props":1037,"children":1040},{"href":1038,"rel":1039},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[669],[1041],{"type":426,"value":1042},"HTML SPEC",{"type":421,"tag":532,"props":1044,"children":1045},{},[1046],{"type":421,"tag":665,"props":1047,"children":1050},{"href":1048,"rel":1049},"https://www.w3.org/TR/selectors-3/#grammar",[669],[1051],{"type":426,"value":1052},"CSS Selectors Level 3",{"type":421,"tag":532,"props":1054,"children":1055},{},[1056],{"type":421,"tag":665,"props":1057,"children":1060},{"href":1058,"rel":1059},"https://developer.chrome.com/blog/inside-browser-part1/",[669],[1061],{"type":426,"value":1062},"Inside look at modern web browser (part 1)",{"type":421,"tag":532,"props":1064,"children":1065},{},[1066,1073],{"type":421,"tag":665,"props":1067,"children":1070},{"href":1068,"rel":1069},"https://zhuanlan.zhihu.com/p/47407398",[669],[1071],{"type":426,"value":1072},"图解浏览器的基本工作原理",{"type":426,"value":1074},"，现代浏览器内部原理系列的中文翻译其一。",{"type":421,"tag":532,"props":1076,"children":1077},{},[1078,1085],{"type":421,"tag":665,"props":1079,"children":1082},{"href":1080,"rel":1081},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[669],[1083],{"type":426,"value":1084},"浏览器地址栏中输入URL到页面显示，浏览器到底发生了什么？",{"type":426,"value":1086},"，综合笔记。",{"type":421,"tag":658,"props":1088,"children":1089},{},[1090,1100,1110,1120,1130],{"type":421,"tag":532,"props":1091,"children":1092},{},[1093],{"type":421,"tag":665,"props":1094,"children":1097},{"href":1095,"rel":1096},"https://juejin.im/post/59e85eebf265da430d571f89",[669],[1098],{"type":426,"value":1099},"这一次，彻底弄懂 JavaScript 执行机制",{"type":421,"tag":532,"props":1101,"children":1102},{},[1103],{"type":421,"tag":665,"props":1104,"children":1107},{"href":1105,"rel":1106},"https://javascript.ruanyifeng.com/oop/basic.html",[669],[1108],{"type":426,"value":1109},"构造函数与 new 命令",{"type":421,"tag":532,"props":1111,"children":1112},{},[1113],{"type":421,"tag":665,"props":1114,"children":1117},{"href":1115,"rel":1116},"http://newhtml.net/v8-garbage-collection/",[669],[1118],{"type":426,"value":1119},"V8 之旅：垃圾回收器",{"type":421,"tag":532,"props":1121,"children":1122},{},[1123],{"type":421,"tag":665,"props":1124,"children":1127},{"href":1125,"rel":1126},"https://v8.dev/blog/concurrent-marking",[669],[1128],{"type":426,"value":1129},"Concurrent marking in V8",{"type":421,"tag":532,"props":1131,"children":1132},{},[1133],{"type":421,"tag":665,"props":1134,"children":1137},{"href":1135,"rel":1136},"https://juejin.im/post/59fbdb46f265da4321536565",[669],[1138],{"type":426,"value":1139},"内存分析与内存泄漏定位",{"title":415,"searchDepth":1141,"depth":1141,"links":1142},2,[1143,1144,1145,1146,1147,1148,1149,1150],{"id":430,"depth":1141,"text":430},{"id":518,"depth":1141,"text":518},{"id":559,"depth":1141,"text":559},{"id":719,"depth":1141,"text":719},{"id":804,"depth":1141,"text":804},{"id":964,"depth":1141,"text":967},{"id":989,"depth":1141,"text":992},{"id":406,"depth":1141,"text":1019},"markdown","content:6.maps:_web:browser:browser.md","content","6.maps/_web/browser/browser.md","6.maps/_web/browser/browser","md",[1158,1161],{"_path":1159,"title":1160,"description":415},"/maps/_typescript/typescript","TypeScript",{"_path":1162,"title":1163,"description":415},"/maps/_web/browser","浏览器",1732808730750]