[{"data":1,"prerenderedAt":1142},["Reactive",2],{"navigation":3,"/maps/_web/browser/browser":389,"/maps/_web/browser/browser-surround":1135},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":390,"_dir":391,"_draft":392,"_partial":393,"_locale":394,"title":395,"description":394,"body":396,"_type":1130,"_id":1131,"_source":1132,"_file":1133,"_extension":1134},"/maps/_web/browser/browser","browser",false,true,"","浏览器相关",{"type":397,"children":398,"toc":1119},"root",[399,406,412,419,429,435,440,446,451,457,462,468,473,479,484,490,495,500,506,536,541,547,552,558,563,568,573,578,584,589,595,600,606,631,636,660,666,671,676,689,696,701,707,712,717,723,728,734,739,747,753,758,764,769,781,786,792,850,856,861,869,875,880,885,891,903,908,919,925,930,941,947,953,958,966,972,978,983,994,999,1066],{"type":400,"tag":401,"props":402,"children":403},"element","h1",{"id":395},[404],{"type":405,"value":395},"text",{"type":400,"tag":407,"props":408,"children":410},"h2",{"id":409},"组成原理",[411],{"type":405,"value":409},{"type":400,"tag":413,"props":414,"children":416},"h4",{"id":415},"浏览器有哪些组件-浏览器架构",[417],{"type":405,"value":418},"浏览器有哪些组件 / 浏览器架构？",{"type":400,"tag":420,"props":421,"children":422},"p",{},[423],{"type":400,"tag":424,"props":425,"children":428},"img",{"alt":426,"src":427},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":400,"tag":413,"props":430,"children":432},{"id":431},"进程和线程的区别是什么",[433],{"type":405,"value":434},"进程和线程的区别是什么？",{"type":400,"tag":420,"props":436,"children":437},{},[438],{"type":405,"value":439},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":400,"tag":413,"props":441,"children":443},{"id":442},"浏览器的进程线程结构是怎么样的",[444],{"type":405,"value":445},"浏览器的进程线程结构是怎么样的？",{"type":400,"tag":420,"props":447,"children":448},{},[449],{"type":405,"value":450},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":400,"tag":413,"props":452,"children":454},{"id":453},"每个页面都有一个对应的渲染进程吗",[455],{"type":405,"value":456},"每个页面都有一个对应的渲染进程吗？",{"type":400,"tag":420,"props":458,"children":459},{},[460],{"type":405,"value":461},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":400,"tag":413,"props":463,"children":465},{"id":464},"service-worker-是如何工作的",[466],{"type":405,"value":467},"Service Worker 是如何工作的？",{"type":400,"tag":420,"props":469,"children":470},{},[471],{"type":405,"value":472},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":400,"tag":413,"props":474,"children":476},{"id":475},"为什么渲染和脚本执行不可以同时进行",[477],{"type":405,"value":478},"为什么渲染和脚本执行不可以同时进行？",{"type":400,"tag":420,"props":480,"children":481},{},[482],{"type":405,"value":483},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":400,"tag":413,"props":485,"children":487},{"id":486},"webworker-和-sharedworker-的资源是谁来管理的",[488],{"type":405,"value":489},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":400,"tag":420,"props":491,"children":492},{},[493],{"type":405,"value":494},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":400,"tag":407,"props":496,"children":498},{"id":497},"网络请求",[499],{"type":405,"value":497},{"type":400,"tag":413,"props":501,"children":503},{"id":502},"请求-cdn-中的资源的流程是怎样的",[504],{"type":405,"value":505},"请求 CDN 中的资源的流程是怎样的？",{"type":400,"tag":507,"props":508,"children":509},"ol",{},[510,516,521,526,531],{"type":400,"tag":511,"props":512,"children":513},"li",{},[514],{"type":405,"value":515},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":400,"tag":511,"props":517,"children":518},{},[519],{"type":405,"value":520},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":400,"tag":511,"props":522,"children":523},{},[524],{"type":405,"value":525},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":400,"tag":511,"props":527,"children":528},{},[529],{"type":405,"value":530},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":400,"tag":511,"props":532,"children":533},{},[534],{"type":405,"value":535},"发请求，根据各级缓存服务器查找对应资源",{"type":400,"tag":407,"props":537,"children":539},{"id":538},"解析",[540],{"type":405,"value":538},{"type":400,"tag":413,"props":542,"children":544},{"id":543},"浏览器怎么根据请求的文件类型来进一步处理",[545],{"type":405,"value":546},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":400,"tag":420,"props":548,"children":549},{},[550],{"type":405,"value":551},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":400,"tag":413,"props":553,"children":555},{"id":554},"渲染进程的大致工作流程是怎样的",[556],{"type":405,"value":557},"渲染进程的大致工作流程是怎样的？",{"type":400,"tag":420,"props":559,"children":560},{},[561],{"type":405,"value":562},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":400,"tag":420,"props":564,"children":565},{},[566],{"type":405,"value":567},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":400,"tag":420,"props":569,"children":570},{},[571],{"type":405,"value":572},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":400,"tag":420,"props":574,"children":575},{},[576],{"type":405,"value":577},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染GPU 进程渲染页面。",{"type":400,"tag":413,"props":579,"children":581},{"id":580},"为什么解析-html-无法使用自上而下或自下而上的解析器",[582],{"type":405,"value":583},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":400,"tag":420,"props":585,"children":586},{},[587],{"type":405,"value":588},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":400,"tag":413,"props":590,"children":592},{"id":591},"碰到错误的标签会怎么处理",[593],{"type":405,"value":594},"碰到错误的标签会怎么处理？",{"type":400,"tag":420,"props":596,"children":597},{},[598],{"type":405,"value":599},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":400,"tag":413,"props":601,"children":603},{"id":602},"css-解析和-html-的有什么不同",[604],{"type":405,"value":605},"CSS 解析和 HTML 的有什么不同？",{"type":400,"tag":420,"props":607,"children":608},{},[609,611,617,619,623,625,629],{"type":405,"value":610},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":400,"tag":612,"props":613,"children":614},"span",{},[615],{"type":405,"value":616},"0-9",{"type":405,"value":618},"+|",{"type":400,"tag":612,"props":620,"children":621},{},[622],{"type":405,"value":616},{"type":405,"value":624},"*.",{"type":400,"tag":612,"props":626,"children":627},{},[628],{"type":405,"value":616},{"type":405,"value":630},"+，语法则用 BNF（巴科斯范式）描述。",{"type":400,"tag":420,"props":632,"children":633},{},[634],{"type":405,"value":635},"TODO:",{"type":400,"tag":637,"props":638,"children":639},"ul",{},[640,651],{"type":400,"tag":511,"props":641,"children":642},{},[643],{"type":400,"tag":644,"props":645,"children":649},"a",{"href":646,"rel":647},"https://zhuanlan.zhihu.com/p/31311515",[648],"nofollow",[650],{"type":405,"value":646},{"type":400,"tag":511,"props":652,"children":653},{},[654],{"type":400,"tag":644,"props":655,"children":658},{"href":656,"rel":657},"https://zhuanlan.zhihu.com/p/358518402",[648],[659],{"type":405,"value":656},{"type":400,"tag":413,"props":661,"children":663},{"id":662},"构建渲染树时用了什么优化策略",[664],{"type":405,"value":665},"构建渲染树时用了什么优化策略？",{"type":400,"tag":420,"props":667,"children":668},{},[669],{"type":405,"value":670},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":400,"tag":420,"props":672,"children":673},{},[674],{"type":405,"value":675},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":400,"tag":420,"props":677,"children":678},{},[679,681,687],{"type":405,"value":680},"Firefox 使用了",{"type":400,"tag":682,"props":683,"children":684},"strong",{},[685],{"type":405,"value":686},"规则树",{"type":405,"value":688},"这一方案。TODO",{"type":400,"tag":420,"props":690,"children":691},{},[692],{"type":400,"tag":424,"props":693,"children":695},{"alt":686,"src":694},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":400,"tag":407,"props":697,"children":699},{"id":698},"渲染",[700],{"type":405,"value":698},{"type":400,"tag":413,"props":702,"children":704},{"id":703},"如何避免重绘与回流",[705],{"type":405,"value":706},"如何避免重绘与回流？",{"type":400,"tag":420,"props":708,"children":709},{},[710],{"type":405,"value":711},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":400,"tag":420,"props":713,"children":714},{},[715],{"type":405,"value":716},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":400,"tag":413,"props":718,"children":720},{"id":719},"domcontentloaded-和-onload-事件先后顺序是",[721],{"type":405,"value":722},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":400,"tag":420,"props":724,"children":725},{},[726],{"type":405,"value":727},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":400,"tag":413,"props":729,"children":731},{"id":730},"复合composite是什么",[732],{"type":405,"value":733},"复合（Composite）是什么？",{"type":400,"tag":420,"props":735,"children":736},{},[737],{"type":405,"value":738},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":400,"tag":420,"props":740,"children":741},{},[742],{"type":400,"tag":424,"props":743,"children":746},{"alt":744,"src":745},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":400,"tag":413,"props":748,"children":750},{"id":749},"图层是什么",[751],{"type":405,"value":752},"图层是什么？",{"type":400,"tag":420,"props":754,"children":755},{},[756],{"type":405,"value":757},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":400,"tag":413,"props":759,"children":761},{"id":760},"浏览器硬件加速是指什么",[762],{"type":405,"value":763},"浏览器硬件加速是指什么？",{"type":400,"tag":420,"props":765,"children":766},{},[767],{"type":405,"value":768},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":400,"tag":420,"props":770,"children":771},{},[772,774],{"type":405,"value":773},"见：",{"type":400,"tag":644,"props":775,"children":778},{"href":776,"rel":777},"https://zhuanlan.zhihu.com/p/404656386",[648],[779],{"type":405,"value":780},"搞懂 GPU 和 CSS 硬件加速",{"type":400,"tag":407,"props":782,"children":784},{"id":783},"浏览器操作",[785],{"type":405,"value":783},{"type":400,"tag":413,"props":787,"children":789},{"id":788},"从输入-url-到页面显示的过程",[790],{"type":405,"value":791},"从输入 URL 到页面显示的过程？",{"type":400,"tag":507,"props":793,"children":794},{},[795,800,805,810,820,825,830,835,845],{"type":400,"tag":511,"props":796,"children":797},{},[798],{"type":405,"value":799},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":400,"tag":511,"props":801,"children":802},{},[803],{"type":405,"value":804},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":400,"tag":511,"props":806,"children":807},{},[808],{"type":405,"value":809},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":400,"tag":511,"props":811,"children":812},{},[813,815],{"type":405,"value":814},"如果是请求 CDN 中的资源，见：",{"type":400,"tag":644,"props":816,"children":818},{"href":817},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[819],{"type":405,"value":505},{"type":400,"tag":511,"props":821,"children":822},{},[823],{"type":405,"value":824},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":400,"tag":511,"props":826,"children":827},{},[828],{"type":405,"value":829},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":400,"tag":511,"props":831,"children":832},{},[833],{"type":405,"value":834},"浏览器根据响应，缓存资源。",{"type":400,"tag":511,"props":836,"children":837},{},[838,840],{"type":405,"value":839},"渲染进程开始渲染，见：",{"type":400,"tag":644,"props":841,"children":843},{"href":842},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[844],{"type":405,"value":557},{"type":400,"tag":511,"props":846,"children":847},{},[848],{"type":405,"value":849},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":400,"tag":413,"props":851,"children":853},{"id":852},"简单介绍一下浏览器的事件捕获机制",[854],{"type":405,"value":855},"简单介绍一下浏览器的事件捕获机制？",{"type":400,"tag":420,"props":857,"children":858},{},[859],{"type":405,"value":860},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":400,"tag":420,"props":862,"children":863},{},[864],{"type":400,"tag":424,"props":865,"children":868},{"alt":866,"src":867},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":400,"tag":413,"props":870,"children":872},{"id":871},"为什么-passive-true-能改善滚动性能",[873],{"type":405,"value":874},"为什么 passive true 能改善滚动性能？",{"type":400,"tag":420,"props":876,"children":877},{},[878],{"type":405,"value":879},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":400,"tag":420,"props":881,"children":882},{},[883],{"type":405,"value":884},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":400,"tag":413,"props":886,"children":888},{"id":887},"bfcache-是如何运作的",[889],{"type":405,"value":890},"BFCache 是如何运作的？",{"type":400,"tag":420,"props":892,"children":893},{},[894,901],{"type":400,"tag":644,"props":895,"children":898},{"href":896,"rel":897},"https://www.youtube.com/watch?v=cuPsdRckkF0",[648],[899],{"type":405,"value":900},"BFCache（Back/Forward Cache）",{"type":405,"value":902},"是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":400,"tag":420,"props":904,"children":905},{},[906],{"type":405,"value":907},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":400,"tag":420,"props":909,"children":910},{},[911,912],{"type":405,"value":773},{"type":400,"tag":644,"props":913,"children":916},{"href":914,"rel":915},"https://web.dev/bfcache",[648],[917],{"type":405,"value":918},"BFCache",{"type":400,"tag":413,"props":920,"children":922},{"id":921},"浏览器怎么跨页面通信",[923],{"type":405,"value":924},"浏览器怎么跨页面通信？",{"type":400,"tag":420,"props":926,"children":927},{},[928],{"type":405,"value":929},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":400,"tag":420,"props":931,"children":932},{},[933,934],{"type":405,"value":773},{"type":400,"tag":644,"props":935,"children":938},{"href":936,"rel":937},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[648],[939],{"type":405,"value":940},"Broadcast Channel",{"type":400,"tag":407,"props":942,"children":944},{"id":943},"dev-tools",[945],{"type":405,"value":946},"Dev Tools",{"type":400,"tag":413,"props":948,"children":950},{"id":949},"代码覆盖率怎么看",[951],{"type":405,"value":952},"代码覆盖率怎么看？",{"type":400,"tag":420,"props":954,"children":955},{},[956],{"type":405,"value":957},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":400,"tag":420,"props":959,"children":960},{},[961],{"type":400,"tag":424,"props":962,"children":965},{"alt":963,"src":964},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":400,"tag":407,"props":967,"children":969},{"id":968},"api",[970],{"type":405,"value":971},"API",{"type":400,"tag":413,"props":973,"children":975},{"id":974},"eventsource",[976],{"type":405,"value":977},"EventSource",{"type":400,"tag":420,"props":979,"children":980},{},[981],{"type":405,"value":982},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":400,"tag":420,"props":984,"children":985},{},[986,987],{"type":405,"value":773},{"type":400,"tag":644,"props":988,"children":991},{"href":989,"rel":990},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[648],[992],{"type":405,"value":993},"Event Source API Test",{"type":400,"tag":407,"props":995,"children":996},{"id":385},[997],{"type":405,"value":998},"TODO",{"type":400,"tag":637,"props":1000,"children":1001},{},[1002,1012,1022,1032,1042,1054],{"type":400,"tag":511,"props":1003,"children":1004},{},[1005],{"type":400,"tag":644,"props":1006,"children":1009},{"href":1007,"rel":1008},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[648],[1010],{"type":405,"value":1011},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":400,"tag":511,"props":1013,"children":1014},{},[1015],{"type":400,"tag":644,"props":1016,"children":1019},{"href":1017,"rel":1018},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[648],[1020],{"type":405,"value":1021},"HTML SPEC",{"type":400,"tag":511,"props":1023,"children":1024},{},[1025],{"type":400,"tag":644,"props":1026,"children":1029},{"href":1027,"rel":1028},"https://www.w3.org/TR/selectors-3/#grammar",[648],[1030],{"type":405,"value":1031},"CSS Selectors Level 3",{"type":400,"tag":511,"props":1033,"children":1034},{},[1035],{"type":400,"tag":644,"props":1036,"children":1039},{"href":1037,"rel":1038},"https://developer.chrome.com/blog/inside-browser-part1/",[648],[1040],{"type":405,"value":1041},"Inside look at modern web browser (part 1)",{"type":400,"tag":511,"props":1043,"children":1044},{},[1045,1052],{"type":400,"tag":644,"props":1046,"children":1049},{"href":1047,"rel":1048},"https://zhuanlan.zhihu.com/p/47407398",[648],[1050],{"type":405,"value":1051},"图解浏览器的基本工作原理",{"type":405,"value":1053},"，现代浏览器内部原理系列的中文翻译其一。",{"type":400,"tag":511,"props":1055,"children":1056},{},[1057,1064],{"type":400,"tag":644,"props":1058,"children":1061},{"href":1059,"rel":1060},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[648],[1062],{"type":405,"value":1063},"浏览器地址栏中输入URL到页面显示，浏览器到底发生了什么？",{"type":405,"value":1065},"，综合笔记。",{"type":400,"tag":637,"props":1067,"children":1068},{},[1069,1079,1089,1099,1109],{"type":400,"tag":511,"props":1070,"children":1071},{},[1072],{"type":400,"tag":644,"props":1073,"children":1076},{"href":1074,"rel":1075},"https://juejin.im/post/59e85eebf265da430d571f89",[648],[1077],{"type":405,"value":1078},"这一次，彻底弄懂 JavaScript 执行机制",{"type":400,"tag":511,"props":1080,"children":1081},{},[1082],{"type":400,"tag":644,"props":1083,"children":1086},{"href":1084,"rel":1085},"https://javascript.ruanyifeng.com/oop/basic.html",[648],[1087],{"type":405,"value":1088},"构造函数与 new 命令",{"type":400,"tag":511,"props":1090,"children":1091},{},[1092],{"type":400,"tag":644,"props":1093,"children":1096},{"href":1094,"rel":1095},"http://newhtml.net/v8-garbage-collection/",[648],[1097],{"type":405,"value":1098},"V8 之旅：垃圾回收器",{"type":400,"tag":511,"props":1100,"children":1101},{},[1102],{"type":400,"tag":644,"props":1103,"children":1106},{"href":1104,"rel":1105},"https://v8.dev/blog/concurrent-marking",[648],[1107],{"type":405,"value":1108},"Concurrent marking in V8",{"type":400,"tag":511,"props":1110,"children":1111},{},[1112],{"type":400,"tag":644,"props":1113,"children":1116},{"href":1114,"rel":1115},"https://juejin.im/post/59fbdb46f265da4321536565",[648],[1117],{"type":405,"value":1118},"内存分析与内存泄漏定位",{"title":394,"searchDepth":1120,"depth":1120,"links":1121},2,[1122,1123,1124,1125,1126,1127,1128,1129],{"id":409,"depth":1120,"text":409},{"id":497,"depth":1120,"text":497},{"id":538,"depth":1120,"text":538},{"id":698,"depth":1120,"text":698},{"id":783,"depth":1120,"text":783},{"id":943,"depth":1120,"text":946},{"id":968,"depth":1120,"text":971},{"id":385,"depth":1120,"text":998},"markdown","content:6.maps:_web:browser:browser.md","content","6.maps/_web/browser/browser.md","md",[1136,1139],{"_path":1137,"title":1138,"description":394},"/maps/_typescript/typescript","TypeScript",{"_path":1140,"title":1141,"description":394},"/maps/_web/browser","浏览器",1711862606603]