[{"data":1,"prerenderedAt":1139},["Reactive",2],{"navigation":3,"/maps/_web/browser/browser":386,"/maps/_web/browser/browser-surround":1132},[4,32,80,96,123,129,135,369,375,381],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"Bit","/gists/bit",{"title":148,"_path":149},"图片模糊","/gists/blur",{"title":151,"_path":152},"渲染相关笔记","/gists/c4d",{"title":154,"_path":155},"CDN 问题记录","/gists/cdn",{"title":157,"_path":158},"消毒剂","/gists/cleaner",{"title":160,"_path":161},"Windows Command","/gists/cmd",{"title":163,"_path":164},"Command","/gists/command",{"title":166,"_path":167},"复杂科学","/gists/complexity-science",{"title":169,"_path":170},"宇宙","/gists/cosmos",{"title":172,"_path":173},"C++","/gists/cpp",{"title":175,"_path":176},"Data Structure","/gists/data-structure",{"title":178,"_path":179},"DEPRESSION","/gists/depression",{"title":181,"_path":182},"设计模式","/gists/design-patterns",{"title":184,"_path":185},"Developer Experience","/gists/developer-experience",{"title":187,"_path":188},"Device Metrics","/gists/device-metrix",{"title":190,"_path":191},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":193,"_path":194},"正则表达式","/gists/eegex",{"title":196,"_path":197},"Emoji","/gists/emoji",{"title":199,"_path":200},"工程","/gists/engineering",{"title":202,"_path":203},"熵","/gists/entropy",{"title":205,"_path":206},"Environment","/gists/environment",{"title":208,"_path":209},"Erlang","/gists/erlang",{"title":211,"_path":212},"逃离塔克夫","/gists/escape-from-tarkov",{"title":214,"_path":215},"ESNext (ES6-ES11)","/gists/esnext",{"title":217,"_path":218},"Eval！","/gists/eval",{"title":220,"_path":221},"Flutter","/gists/flutter",{"title":223,"_path":224},"字体","/gists/font",{"title":226,"_path":227},"JS 函数式编程","/gists/functional",{"title":229,"_path":230},"Google C++ Standard","/gists/google-cpp-standard",{"title":232,"_path":233},"双向链接完全体","/gists/graph",{"title":235,"_path":236},"Hardwares","/gists/hardwares",{"title":238,"_path":239},"哈希冲突","/gists/hash-collision",{"title":241,"_path":242},"信息设计","/gists/information-design",{"title":244,"_path":245},"InstantPage","/gists/instant.page",{"title":247,"_path":248},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":250,"_path":251},"KVStore","/gists/key-value-db",{"title":253,"_path":254},"Kubernetes","/gists/kubernetes",{"title":256,"_path":257},"Makefile","/gists/makefile",{"title":259,"_path":260},"Markdown Inline Style","/gists/markdown-nice",{"title":262,"_path":263},"小程序","/gists/miniapp",{"title":265,"_path":266},"减小页面快照体积","/gists/minify-html",{"title":268,"_path":269},"mklink","/gists/mklink",{"title":271,"_path":272},"Mock","/gists/mock",{"title":274,"_path":275},"多端应用","/gists/multy-end-app",{"title":277,"_path":278},"神经科学","/gists/neuroscience",{"title":280,"_path":281},"OO","/gists/oo",{"title":283,"_path":284},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":286,"_path":287},"人物","/gists/person",{"title":289,"_path":290},"PInvoke","/gists/pinvoke",{"title":292,"_path":293},"像素","/gists/pixel",{"title":295,"_path":296},"PowerShell","/gists/powershell",{"title":298,"_path":299},"量子","/gists/quantum",{"title":301,"_path":302},"保持好奇心","/gists/questions",{"title":304,"_path":305},"React Native","/gists/react-native",{"title":307,"_path":308},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":310,"_path":311},"SEO","/gists/seo",{"title":313,"_path":314},"Shader","/gists/shader",{"title":316,"_path":317},"Shape Up","/gists/shape-up",{"title":319,"_path":320},"睡觉","/gists/sleep",{"title":322,"_path":323},"States","/gists/states",{"title":325,"_path":326},"Storage","/gists/storage",{"title":328,"_path":329},"音视频流处理","/gists/stream-cli",{"title":331,"_path":332},"Symbol","/gists/symbol",{"title":334,"_path":335},"系统论","/gists/systems-theory",{"title":337,"_path":338},"Taro","/gists/taro",{"title":340,"_path":341},"任务切片","/gists/task-slice",{"title":343,"_path":344},"技术偏好","/gists/tech-dudge",{"title":346,"_path":347},"Untitled","/gists/untitled",{"title":349,"_path":350},"可变字体","/gists/variable-font",{"title":352,"_path":353},"视觉错觉","/gists/visual-illusion",{"title":355,"_path":356},"SS(SSR)","/gists/vpn",{"title":358,"_path":359},"VS Code 插件开发","/gists/vscode-plugin",{"title":361,"_path":362},"Web Components","/gists/web-components",{"title":364,"_path":365},"Windows","/gists/windows",{"title":367,"_path":368},"查缺补漏","/gists/wrong",{"title":370,"_path":371,"children":372},"代码笔记 / Gists","/source-code",[373],{"title":374,"_path":371},"🚄 代码笔记",{"title":376,"_path":377,"children":378},"我 / Abount","/hire",[379],{"title":380,"_path":377},"📬 技术简历",{"title":382,"_path":383,"children":384},"todo","/todo",[385],{"title":382,"_path":383},{"_path":387,"_dir":388,"_draft":389,"_partial":390,"_locale":391,"title":392,"description":391,"body":393,"_type":1127,"_id":1128,"_source":1129,"_file":1130,"_extension":1131},"/maps/_web/browser/browser","browser",false,true,"","浏览器相关",{"type":394,"children":395,"toc":1116},"root",[396,403,409,416,426,432,437,443,448,454,459,465,470,476,481,487,492,497,503,533,538,544,549,555,560,565,570,575,581,586,592,597,603,628,633,657,663,668,673,686,693,698,704,709,714,720,725,731,736,744,750,755,761,766,778,783,789,847,853,858,866,872,877,882,888,900,905,916,922,927,938,944,950,955,963,969,975,980,991,996,1063],{"type":397,"tag":398,"props":399,"children":400},"element","h1",{"id":392},[401],{"type":402,"value":392},"text",{"type":397,"tag":404,"props":405,"children":407},"h2",{"id":406},"组成原理",[408],{"type":402,"value":406},{"type":397,"tag":410,"props":411,"children":413},"h4",{"id":412},"浏览器有哪些组件-浏览器架构",[414],{"type":402,"value":415},"浏览器有哪些组件 / 浏览器架构？",{"type":397,"tag":417,"props":418,"children":419},"p",{},[420],{"type":397,"tag":421,"props":422,"children":425},"img",{"alt":423,"src":424},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":397,"tag":410,"props":427,"children":429},{"id":428},"进程和线程的区别是什么",[430],{"type":402,"value":431},"进程和线程的区别是什么？",{"type":397,"tag":417,"props":433,"children":434},{},[435],{"type":402,"value":436},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":397,"tag":410,"props":438,"children":440},{"id":439},"浏览器的进程线程结构是怎么样的",[441],{"type":402,"value":442},"浏览器的进程线程结构是怎么样的？",{"type":397,"tag":417,"props":444,"children":445},{},[446],{"type":402,"value":447},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":397,"tag":410,"props":449,"children":451},{"id":450},"每个页面都有一个对应的渲染进程吗",[452],{"type":402,"value":453},"每个页面都有一个对应的渲染进程吗？",{"type":397,"tag":417,"props":455,"children":456},{},[457],{"type":402,"value":458},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":397,"tag":410,"props":460,"children":462},{"id":461},"service-worker-是如何工作的",[463],{"type":402,"value":464},"Service Worker 是如何工作的？",{"type":397,"tag":417,"props":466,"children":467},{},[468],{"type":402,"value":469},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":397,"tag":410,"props":471,"children":473},{"id":472},"为什么渲染和脚本执行不可以同时进行",[474],{"type":402,"value":475},"为什么渲染和脚本执行不可以同时进行？",{"type":397,"tag":417,"props":477,"children":478},{},[479],{"type":402,"value":480},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":397,"tag":410,"props":482,"children":484},{"id":483},"webworker-和-sharedworker-的资源是谁来管理的",[485],{"type":402,"value":486},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":397,"tag":417,"props":488,"children":489},{},[490],{"type":402,"value":491},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":397,"tag":404,"props":493,"children":495},{"id":494},"网络请求",[496],{"type":402,"value":494},{"type":397,"tag":410,"props":498,"children":500},{"id":499},"请求-cdn-中的资源的流程是怎样的",[501],{"type":402,"value":502},"请求 CDN 中的资源的流程是怎样的？",{"type":397,"tag":504,"props":505,"children":506},"ol",{},[507,513,518,523,528],{"type":397,"tag":508,"props":509,"children":510},"li",{},[511],{"type":402,"value":512},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":397,"tag":508,"props":514,"children":515},{},[516],{"type":402,"value":517},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":397,"tag":508,"props":519,"children":520},{},[521],{"type":402,"value":522},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":397,"tag":508,"props":524,"children":525},{},[526],{"type":402,"value":527},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":397,"tag":508,"props":529,"children":530},{},[531],{"type":402,"value":532},"发请求，根据各级缓存服务器查找对应资源",{"type":397,"tag":404,"props":534,"children":536},{"id":535},"解析",[537],{"type":402,"value":535},{"type":397,"tag":410,"props":539,"children":541},{"id":540},"浏览器怎么根据请求的文件类型来进一步处理",[542],{"type":402,"value":543},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":397,"tag":417,"props":545,"children":546},{},[547],{"type":402,"value":548},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":397,"tag":410,"props":550,"children":552},{"id":551},"渲染进程的大致工作流程是怎样的",[553],{"type":402,"value":554},"渲染进程的大致工作流程是怎样的？",{"type":397,"tag":417,"props":556,"children":557},{},[558],{"type":402,"value":559},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":397,"tag":417,"props":561,"children":562},{},[563],{"type":402,"value":564},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":397,"tag":417,"props":566,"children":567},{},[568],{"type":402,"value":569},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":397,"tag":417,"props":571,"children":572},{},[573],{"type":402,"value":574},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染GPU 进程渲染页面。",{"type":397,"tag":410,"props":576,"children":578},{"id":577},"为什么解析-html-无法使用自上而下或自下而上的解析器",[579],{"type":402,"value":580},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":397,"tag":417,"props":582,"children":583},{},[584],{"type":402,"value":585},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":397,"tag":410,"props":587,"children":589},{"id":588},"碰到错误的标签会怎么处理",[590],{"type":402,"value":591},"碰到错误的标签会怎么处理？",{"type":397,"tag":417,"props":593,"children":594},{},[595],{"type":402,"value":596},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":397,"tag":410,"props":598,"children":600},{"id":599},"css-解析和-html-的有什么不同",[601],{"type":402,"value":602},"CSS 解析和 HTML 的有什么不同？",{"type":397,"tag":417,"props":604,"children":605},{},[606,608,614,616,620,622,626],{"type":402,"value":607},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":397,"tag":609,"props":610,"children":611},"span",{},[612],{"type":402,"value":613},"0-9",{"type":402,"value":615},"+|",{"type":397,"tag":609,"props":617,"children":618},{},[619],{"type":402,"value":613},{"type":402,"value":621},"*.",{"type":397,"tag":609,"props":623,"children":624},{},[625],{"type":402,"value":613},{"type":402,"value":627},"+，语法则用 BNF（巴科斯范式）描述。",{"type":397,"tag":417,"props":629,"children":630},{},[631],{"type":402,"value":632},"TODO:",{"type":397,"tag":634,"props":635,"children":636},"ul",{},[637,648],{"type":397,"tag":508,"props":638,"children":639},{},[640],{"type":397,"tag":641,"props":642,"children":646},"a",{"href":643,"rel":644},"https://zhuanlan.zhihu.com/p/31311515",[645],"nofollow",[647],{"type":402,"value":643},{"type":397,"tag":508,"props":649,"children":650},{},[651],{"type":397,"tag":641,"props":652,"children":655},{"href":653,"rel":654},"https://zhuanlan.zhihu.com/p/358518402",[645],[656],{"type":402,"value":653},{"type":397,"tag":410,"props":658,"children":660},{"id":659},"构建渲染树时用了什么优化策略",[661],{"type":402,"value":662},"构建渲染树时用了什么优化策略？",{"type":397,"tag":417,"props":664,"children":665},{},[666],{"type":402,"value":667},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":397,"tag":417,"props":669,"children":670},{},[671],{"type":402,"value":672},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":397,"tag":417,"props":674,"children":675},{},[676,678,684],{"type":402,"value":677},"Firefox 使用了",{"type":397,"tag":679,"props":680,"children":681},"strong",{},[682],{"type":402,"value":683},"规则树",{"type":402,"value":685},"这一方案。TODO",{"type":397,"tag":417,"props":687,"children":688},{},[689],{"type":397,"tag":421,"props":690,"children":692},{"alt":683,"src":691},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":397,"tag":404,"props":694,"children":696},{"id":695},"渲染",[697],{"type":402,"value":695},{"type":397,"tag":410,"props":699,"children":701},{"id":700},"如何避免重绘与回流",[702],{"type":402,"value":703},"如何避免重绘与回流？",{"type":397,"tag":417,"props":705,"children":706},{},[707],{"type":402,"value":708},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":397,"tag":417,"props":710,"children":711},{},[712],{"type":402,"value":713},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":397,"tag":410,"props":715,"children":717},{"id":716},"domcontentloaded-和-onload-事件先后顺序是",[718],{"type":402,"value":719},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":397,"tag":417,"props":721,"children":722},{},[723],{"type":402,"value":724},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":397,"tag":410,"props":726,"children":728},{"id":727},"复合composite是什么",[729],{"type":402,"value":730},"复合（Composite）是什么？",{"type":397,"tag":417,"props":732,"children":733},{},[734],{"type":402,"value":735},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":397,"tag":417,"props":737,"children":738},{},[739],{"type":397,"tag":421,"props":740,"children":743},{"alt":741,"src":742},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":397,"tag":410,"props":745,"children":747},{"id":746},"图层是什么",[748],{"type":402,"value":749},"图层是什么？",{"type":397,"tag":417,"props":751,"children":752},{},[753],{"type":402,"value":754},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":397,"tag":410,"props":756,"children":758},{"id":757},"浏览器硬件加速是指什么",[759],{"type":402,"value":760},"浏览器硬件加速是指什么？",{"type":397,"tag":417,"props":762,"children":763},{},[764],{"type":402,"value":765},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":397,"tag":417,"props":767,"children":768},{},[769,771],{"type":402,"value":770},"见：",{"type":397,"tag":641,"props":772,"children":775},{"href":773,"rel":774},"https://zhuanlan.zhihu.com/p/404656386",[645],[776],{"type":402,"value":777},"搞懂 GPU 和 CSS 硬件加速",{"type":397,"tag":404,"props":779,"children":781},{"id":780},"浏览器操作",[782],{"type":402,"value":780},{"type":397,"tag":410,"props":784,"children":786},{"id":785},"从输入-url-到页面显示的过程",[787],{"type":402,"value":788},"从输入 URL 到页面显示的过程？",{"type":397,"tag":504,"props":790,"children":791},{},[792,797,802,807,817,822,827,832,842],{"type":397,"tag":508,"props":793,"children":794},{},[795],{"type":402,"value":796},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":397,"tag":508,"props":798,"children":799},{},[800],{"type":402,"value":801},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":397,"tag":508,"props":803,"children":804},{},[805],{"type":402,"value":806},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":397,"tag":508,"props":808,"children":809},{},[810,812],{"type":402,"value":811},"如果是请求 CDN 中的资源，见：",{"type":397,"tag":641,"props":813,"children":815},{"href":814},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[816],{"type":402,"value":502},{"type":397,"tag":508,"props":818,"children":819},{},[820],{"type":402,"value":821},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":397,"tag":508,"props":823,"children":824},{},[825],{"type":402,"value":826},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":397,"tag":508,"props":828,"children":829},{},[830],{"type":402,"value":831},"浏览器根据响应，缓存资源。",{"type":397,"tag":508,"props":833,"children":834},{},[835,837],{"type":402,"value":836},"渲染进程开始渲染，见：",{"type":397,"tag":641,"props":838,"children":840},{"href":839},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[841],{"type":402,"value":554},{"type":397,"tag":508,"props":843,"children":844},{},[845],{"type":402,"value":846},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":397,"tag":410,"props":848,"children":850},{"id":849},"简单介绍一下浏览器的事件捕获机制",[851],{"type":402,"value":852},"简单介绍一下浏览器的事件捕获机制？",{"type":397,"tag":417,"props":854,"children":855},{},[856],{"type":402,"value":857},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":397,"tag":417,"props":859,"children":860},{},[861],{"type":397,"tag":421,"props":862,"children":865},{"alt":863,"src":864},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":397,"tag":410,"props":867,"children":869},{"id":868},"为什么-passive-true-能改善滚动性能",[870],{"type":402,"value":871},"为什么 passive true 能改善滚动性能？",{"type":397,"tag":417,"props":873,"children":874},{},[875],{"type":402,"value":876},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":397,"tag":417,"props":878,"children":879},{},[880],{"type":402,"value":881},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":397,"tag":410,"props":883,"children":885},{"id":884},"bfcache-是如何运作的",[886],{"type":402,"value":887},"BFCache 是如何运作的？",{"type":397,"tag":417,"props":889,"children":890},{},[891,898],{"type":397,"tag":641,"props":892,"children":895},{"href":893,"rel":894},"https://www.youtube.com/watch?v=cuPsdRckkF0",[645],[896],{"type":402,"value":897},"BFCache（Back/Forward Cache）",{"type":402,"value":899},"是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":397,"tag":417,"props":901,"children":902},{},[903],{"type":402,"value":904},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":397,"tag":417,"props":906,"children":907},{},[908,909],{"type":402,"value":770},{"type":397,"tag":641,"props":910,"children":913},{"href":911,"rel":912},"https://web.dev/bfcache",[645],[914],{"type":402,"value":915},"BFCache",{"type":397,"tag":410,"props":917,"children":919},{"id":918},"浏览器怎么跨页面通信",[920],{"type":402,"value":921},"浏览器怎么跨页面通信？",{"type":397,"tag":417,"props":923,"children":924},{},[925],{"type":402,"value":926},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":397,"tag":417,"props":928,"children":929},{},[930,931],{"type":402,"value":770},{"type":397,"tag":641,"props":932,"children":935},{"href":933,"rel":934},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[645],[936],{"type":402,"value":937},"Broadcast Channel",{"type":397,"tag":404,"props":939,"children":941},{"id":940},"dev-tools",[942],{"type":402,"value":943},"Dev Tools",{"type":397,"tag":410,"props":945,"children":947},{"id":946},"代码覆盖率怎么看",[948],{"type":402,"value":949},"代码覆盖率怎么看？",{"type":397,"tag":417,"props":951,"children":952},{},[953],{"type":402,"value":954},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":397,"tag":417,"props":956,"children":957},{},[958],{"type":397,"tag":421,"props":959,"children":962},{"alt":960,"src":961},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":397,"tag":404,"props":964,"children":966},{"id":965},"api",[967],{"type":402,"value":968},"API",{"type":397,"tag":410,"props":970,"children":972},{"id":971},"eventsource",[973],{"type":402,"value":974},"EventSource",{"type":397,"tag":417,"props":976,"children":977},{},[978],{"type":402,"value":979},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":397,"tag":417,"props":981,"children":982},{},[983,984],{"type":402,"value":770},{"type":397,"tag":641,"props":985,"children":988},{"href":986,"rel":987},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[645],[989],{"type":402,"value":990},"Event Source API Test",{"type":397,"tag":404,"props":992,"children":993},{"id":382},[994],{"type":402,"value":995},"TODO",{"type":397,"tag":634,"props":997,"children":998},{},[999,1009,1019,1029,1039,1051],{"type":397,"tag":508,"props":1000,"children":1001},{},[1002],{"type":397,"tag":641,"props":1003,"children":1006},{"href":1004,"rel":1005},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[645],[1007],{"type":402,"value":1008},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":397,"tag":508,"props":1010,"children":1011},{},[1012],{"type":397,"tag":641,"props":1013,"children":1016},{"href":1014,"rel":1015},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[645],[1017],{"type":402,"value":1018},"HTML SPEC",{"type":397,"tag":508,"props":1020,"children":1021},{},[1022],{"type":397,"tag":641,"props":1023,"children":1026},{"href":1024,"rel":1025},"https://www.w3.org/TR/selectors-3/#grammar",[645],[1027],{"type":402,"value":1028},"CSS Selectors Level 3",{"type":397,"tag":508,"props":1030,"children":1031},{},[1032],{"type":397,"tag":641,"props":1033,"children":1036},{"href":1034,"rel":1035},"https://developer.chrome.com/blog/inside-browser-part1/",[645],[1037],{"type":402,"value":1038},"Inside look at modern web browser (part 1)",{"type":397,"tag":508,"props":1040,"children":1041},{},[1042,1049],{"type":397,"tag":641,"props":1043,"children":1046},{"href":1044,"rel":1045},"https://zhuanlan.zhihu.com/p/47407398",[645],[1047],{"type":402,"value":1048},"图解浏览器的基本工作原理",{"type":402,"value":1050},"，现代浏览器内部原理系列的中文翻译其一。",{"type":397,"tag":508,"props":1052,"children":1053},{},[1054,1061],{"type":397,"tag":641,"props":1055,"children":1058},{"href":1056,"rel":1057},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[645],[1059],{"type":402,"value":1060},"浏览器地址栏中输入URL到页面显示，浏览器到底发生了什么？",{"type":402,"value":1062},"，综合笔记。",{"type":397,"tag":634,"props":1064,"children":1065},{},[1066,1076,1086,1096,1106],{"type":397,"tag":508,"props":1067,"children":1068},{},[1069],{"type":397,"tag":641,"props":1070,"children":1073},{"href":1071,"rel":1072},"https://juejin.im/post/59e85eebf265da430d571f89",[645],[1074],{"type":402,"value":1075},"这一次，彻底弄懂 JavaScript 执行机制",{"type":397,"tag":508,"props":1077,"children":1078},{},[1079],{"type":397,"tag":641,"props":1080,"children":1083},{"href":1081,"rel":1082},"https://javascript.ruanyifeng.com/oop/basic.html",[645],[1084],{"type":402,"value":1085},"构造函数与 new 命令",{"type":397,"tag":508,"props":1087,"children":1088},{},[1089],{"type":397,"tag":641,"props":1090,"children":1093},{"href":1091,"rel":1092},"http://newhtml.net/v8-garbage-collection/",[645],[1094],{"type":402,"value":1095},"V8 之旅：垃圾回收器",{"type":397,"tag":508,"props":1097,"children":1098},{},[1099],{"type":397,"tag":641,"props":1100,"children":1103},{"href":1101,"rel":1102},"https://v8.dev/blog/concurrent-marking",[645],[1104],{"type":402,"value":1105},"Concurrent marking in V8",{"type":397,"tag":508,"props":1107,"children":1108},{},[1109],{"type":397,"tag":641,"props":1110,"children":1113},{"href":1111,"rel":1112},"https://juejin.im/post/59fbdb46f265da4321536565",[645],[1114],{"type":402,"value":1115},"内存分析与内存泄漏定位",{"title":391,"searchDepth":1117,"depth":1117,"links":1118},2,[1119,1120,1121,1122,1123,1124,1125,1126],{"id":406,"depth":1117,"text":406},{"id":494,"depth":1117,"text":494},{"id":535,"depth":1117,"text":535},{"id":695,"depth":1117,"text":695},{"id":780,"depth":1117,"text":780},{"id":940,"depth":1117,"text":943},{"id":965,"depth":1117,"text":968},{"id":382,"depth":1117,"text":995},"markdown","content:6.maps:_web:browser:browser.md","content","6.maps/_web/browser/browser.md","md",[1133,1136],{"_path":1134,"title":1135,"description":391},"/maps/_typescript/typescript","TypeScript",{"_path":1137,"title":1138,"description":391},"/maps/_web/browser","浏览器",1710257752050]