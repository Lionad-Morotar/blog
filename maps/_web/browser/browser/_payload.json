[{"data":1,"prerenderedAt":1170},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/browser":416,"/maps/_web/browser/browser-surround":1163},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / Abount","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":417,"_dir":418,"_draft":419,"_partial":420,"_locale":421,"title":422,"description":421,"body":423,"_type":1157,"_id":1158,"_source":1159,"_file":1160,"_stem":1161,"_extension":1162},"/maps/_web/browser/browser","browser",false,true,"","浏览器相关",{"type":424,"children":425,"toc":1146},"root",[426,433,439,446,456,462,467,473,478,484,489,495,500,506,511,517,522,527,533,563,568,574,579,585,590,595,600,605,611,616,622,627,633,658,663,687,693,698,703,716,723,728,734,739,744,750,755,761,766,774,780,785,791,796,808,813,819,877,883,888,896,902,907,912,918,930,935,946,952,957,968,974,980,985,993,999,1005,1010,1021,1026,1093],{"type":427,"tag":428,"props":429,"children":430},"element","h1",{"id":422},[431],{"type":432,"value":422},"text",{"type":427,"tag":434,"props":435,"children":437},"h2",{"id":436},"组成原理",[438],{"type":432,"value":436},{"type":427,"tag":440,"props":441,"children":443},"h4",{"id":442},"浏览器有哪些组件-浏览器架构",[444],{"type":432,"value":445},"浏览器有哪些组件 / 浏览器架构？",{"type":427,"tag":447,"props":448,"children":449},"p",{},[450],{"type":427,"tag":451,"props":452,"children":455},"img",{"alt":453,"src":454},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":427,"tag":440,"props":457,"children":459},{"id":458},"进程和线程的区别是什么",[460],{"type":432,"value":461},"进程和线程的区别是什么？",{"type":427,"tag":447,"props":463,"children":464},{},[465],{"type":432,"value":466},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":427,"tag":440,"props":468,"children":470},{"id":469},"浏览器的进程线程结构是怎么样的",[471],{"type":432,"value":472},"浏览器的进程线程结构是怎么样的？",{"type":427,"tag":447,"props":474,"children":475},{},[476],{"type":432,"value":477},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":427,"tag":440,"props":479,"children":481},{"id":480},"每个页面都有一个对应的渲染进程吗",[482],{"type":432,"value":483},"每个页面都有一个对应的渲染进程吗？",{"type":427,"tag":447,"props":485,"children":486},{},[487],{"type":432,"value":488},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":427,"tag":440,"props":490,"children":492},{"id":491},"service-worker-是如何工作的",[493],{"type":432,"value":494},"Service Worker 是如何工作的？",{"type":427,"tag":447,"props":496,"children":497},{},[498],{"type":432,"value":499},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":427,"tag":440,"props":501,"children":503},{"id":502},"为什么渲染和脚本执行不可以同时进行",[504],{"type":432,"value":505},"为什么渲染和脚本执行不可以同时进行？",{"type":427,"tag":447,"props":507,"children":508},{},[509],{"type":432,"value":510},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":427,"tag":440,"props":512,"children":514},{"id":513},"webworker-和-sharedworker-的资源是谁来管理的",[515],{"type":432,"value":516},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":427,"tag":447,"props":518,"children":519},{},[520],{"type":432,"value":521},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":427,"tag":434,"props":523,"children":525},{"id":524},"网络请求",[526],{"type":432,"value":524},{"type":427,"tag":440,"props":528,"children":530},{"id":529},"请求-cdn-中的资源的流程是怎样的",[531],{"type":432,"value":532},"请求 CDN 中的资源的流程是怎样的？",{"type":427,"tag":534,"props":535,"children":536},"ol",{},[537,543,548,553,558],{"type":427,"tag":538,"props":539,"children":540},"li",{},[541],{"type":432,"value":542},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":427,"tag":538,"props":544,"children":545},{},[546],{"type":432,"value":547},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":427,"tag":538,"props":549,"children":550},{},[551],{"type":432,"value":552},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":427,"tag":538,"props":554,"children":555},{},[556],{"type":432,"value":557},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":427,"tag":538,"props":559,"children":560},{},[561],{"type":432,"value":562},"发请求，根据各级缓存服务器查找对应资源",{"type":427,"tag":434,"props":564,"children":566},{"id":565},"解析",[567],{"type":432,"value":565},{"type":427,"tag":440,"props":569,"children":571},{"id":570},"浏览器怎么根据请求的文件类型来进一步处理",[572],{"type":432,"value":573},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":427,"tag":447,"props":575,"children":576},{},[577],{"type":432,"value":578},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":427,"tag":440,"props":580,"children":582},{"id":581},"渲染进程的大致工作流程是怎样的",[583],{"type":432,"value":584},"渲染进程的大致工作流程是怎样的？",{"type":427,"tag":447,"props":586,"children":587},{},[588],{"type":432,"value":589},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":427,"tag":447,"props":591,"children":592},{},[593],{"type":432,"value":594},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":427,"tag":447,"props":596,"children":597},{},[598],{"type":432,"value":599},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":427,"tag":447,"props":601,"children":602},{},[603],{"type":432,"value":604},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染GPU 进程渲染页面。",{"type":427,"tag":440,"props":606,"children":608},{"id":607},"为什么解析-html-无法使用自上而下或自下而上的解析器",[609],{"type":432,"value":610},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":427,"tag":447,"props":612,"children":613},{},[614],{"type":432,"value":615},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":427,"tag":440,"props":617,"children":619},{"id":618},"碰到错误的标签会怎么处理",[620],{"type":432,"value":621},"碰到错误的标签会怎么处理？",{"type":427,"tag":447,"props":623,"children":624},{},[625],{"type":432,"value":626},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":427,"tag":440,"props":628,"children":630},{"id":629},"css-解析和-html-的有什么不同",[631],{"type":432,"value":632},"CSS 解析和 HTML 的有什么不同？",{"type":427,"tag":447,"props":634,"children":635},{},[636,638,644,646,650,652,656],{"type":432,"value":637},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":427,"tag":639,"props":640,"children":641},"span",{},[642],{"type":432,"value":643},"0-9",{"type":432,"value":645},"+|",{"type":427,"tag":639,"props":647,"children":648},{},[649],{"type":432,"value":643},{"type":432,"value":651},"*.",{"type":427,"tag":639,"props":653,"children":654},{},[655],{"type":432,"value":643},{"type":432,"value":657},"+，语法则用 BNF（巴科斯范式）描述。",{"type":427,"tag":447,"props":659,"children":660},{},[661],{"type":432,"value":662},"TODO:",{"type":427,"tag":664,"props":665,"children":666},"ul",{},[667,678],{"type":427,"tag":538,"props":668,"children":669},{},[670],{"type":427,"tag":671,"props":672,"children":676},"a",{"href":673,"rel":674},"https://zhuanlan.zhihu.com/p/31311515",[675],"nofollow",[677],{"type":432,"value":673},{"type":427,"tag":538,"props":679,"children":680},{},[681],{"type":427,"tag":671,"props":682,"children":685},{"href":683,"rel":684},"https://zhuanlan.zhihu.com/p/358518402",[675],[686],{"type":432,"value":683},{"type":427,"tag":440,"props":688,"children":690},{"id":689},"构建渲染树时用了什么优化策略",[691],{"type":432,"value":692},"构建渲染树时用了什么优化策略？",{"type":427,"tag":447,"props":694,"children":695},{},[696],{"type":432,"value":697},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":427,"tag":447,"props":699,"children":700},{},[701],{"type":432,"value":702},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":427,"tag":447,"props":704,"children":705},{},[706,708,714],{"type":432,"value":707},"Firefox 使用了",{"type":427,"tag":709,"props":710,"children":711},"strong",{},[712],{"type":432,"value":713},"规则树",{"type":432,"value":715},"这一方案。TODO",{"type":427,"tag":447,"props":717,"children":718},{},[719],{"type":427,"tag":451,"props":720,"children":722},{"alt":713,"src":721},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":427,"tag":434,"props":724,"children":726},{"id":725},"渲染",[727],{"type":432,"value":725},{"type":427,"tag":440,"props":729,"children":731},{"id":730},"如何避免重绘与回流",[732],{"type":432,"value":733},"如何避免重绘与回流？",{"type":427,"tag":447,"props":735,"children":736},{},[737],{"type":432,"value":738},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":427,"tag":447,"props":740,"children":741},{},[742],{"type":432,"value":743},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":427,"tag":440,"props":745,"children":747},{"id":746},"domcontentloaded-和-onload-事件先后顺序是",[748],{"type":432,"value":749},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":427,"tag":447,"props":751,"children":752},{},[753],{"type":432,"value":754},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":427,"tag":440,"props":756,"children":758},{"id":757},"复合composite是什么",[759],{"type":432,"value":760},"复合（Composite）是什么？",{"type":427,"tag":447,"props":762,"children":763},{},[764],{"type":432,"value":765},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":427,"tag":447,"props":767,"children":768},{},[769],{"type":427,"tag":451,"props":770,"children":773},{"alt":771,"src":772},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":427,"tag":440,"props":775,"children":777},{"id":776},"图层是什么",[778],{"type":432,"value":779},"图层是什么？",{"type":427,"tag":447,"props":781,"children":782},{},[783],{"type":432,"value":784},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":427,"tag":440,"props":786,"children":788},{"id":787},"浏览器硬件加速是指什么",[789],{"type":432,"value":790},"浏览器硬件加速是指什么？",{"type":427,"tag":447,"props":792,"children":793},{},[794],{"type":432,"value":795},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":427,"tag":447,"props":797,"children":798},{},[799,801],{"type":432,"value":800},"见：",{"type":427,"tag":671,"props":802,"children":805},{"href":803,"rel":804},"https://zhuanlan.zhihu.com/p/404656386",[675],[806],{"type":432,"value":807},"搞懂 GPU 和 CSS 硬件加速",{"type":427,"tag":434,"props":809,"children":811},{"id":810},"浏览器操作",[812],{"type":432,"value":810},{"type":427,"tag":440,"props":814,"children":816},{"id":815},"从输入-url-到页面显示的过程",[817],{"type":432,"value":818},"从输入 URL 到页面显示的过程？",{"type":427,"tag":534,"props":820,"children":821},{},[822,827,832,837,847,852,857,862,872],{"type":427,"tag":538,"props":823,"children":824},{},[825],{"type":432,"value":826},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":427,"tag":538,"props":828,"children":829},{},[830],{"type":432,"value":831},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":427,"tag":538,"props":833,"children":834},{},[835],{"type":432,"value":836},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":427,"tag":538,"props":838,"children":839},{},[840,842],{"type":432,"value":841},"如果是请求 CDN 中的资源，见：",{"type":427,"tag":671,"props":843,"children":845},{"href":844},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[846],{"type":432,"value":532},{"type":427,"tag":538,"props":848,"children":849},{},[850],{"type":432,"value":851},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":427,"tag":538,"props":853,"children":854},{},[855],{"type":432,"value":856},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":427,"tag":538,"props":858,"children":859},{},[860],{"type":432,"value":861},"浏览器根据响应，缓存资源。",{"type":427,"tag":538,"props":863,"children":864},{},[865,867],{"type":432,"value":866},"渲染进程开始渲染，见：",{"type":427,"tag":671,"props":868,"children":870},{"href":869},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[871],{"type":432,"value":584},{"type":427,"tag":538,"props":873,"children":874},{},[875],{"type":432,"value":876},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":427,"tag":440,"props":878,"children":880},{"id":879},"简单介绍一下浏览器的事件捕获机制",[881],{"type":432,"value":882},"简单介绍一下浏览器的事件捕获机制？",{"type":427,"tag":447,"props":884,"children":885},{},[886],{"type":432,"value":887},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":427,"tag":447,"props":889,"children":890},{},[891],{"type":427,"tag":451,"props":892,"children":895},{"alt":893,"src":894},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":427,"tag":440,"props":897,"children":899},{"id":898},"为什么-passive-true-能改善滚动性能",[900],{"type":432,"value":901},"为什么 passive true 能改善滚动性能？",{"type":427,"tag":447,"props":903,"children":904},{},[905],{"type":432,"value":906},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":427,"tag":447,"props":908,"children":909},{},[910],{"type":432,"value":911},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":427,"tag":440,"props":913,"children":915},{"id":914},"bfcache-是如何运作的",[916],{"type":432,"value":917},"BFCache 是如何运作的？",{"type":427,"tag":447,"props":919,"children":920},{},[921,928],{"type":427,"tag":671,"props":922,"children":925},{"href":923,"rel":924},"https://www.youtube.com/watch?v=cuPsdRckkF0",[675],[926],{"type":432,"value":927},"BFCache（Back/Forward Cache）",{"type":432,"value":929},"是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":427,"tag":447,"props":931,"children":932},{},[933],{"type":432,"value":934},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":427,"tag":447,"props":936,"children":937},{},[938,939],{"type":432,"value":800},{"type":427,"tag":671,"props":940,"children":943},{"href":941,"rel":942},"https://web.dev/bfcache",[675],[944],{"type":432,"value":945},"BFCache",{"type":427,"tag":440,"props":947,"children":949},{"id":948},"浏览器怎么跨页面通信",[950],{"type":432,"value":951},"浏览器怎么跨页面通信？",{"type":427,"tag":447,"props":953,"children":954},{},[955],{"type":432,"value":956},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":427,"tag":447,"props":958,"children":959},{},[960,961],{"type":432,"value":800},{"type":427,"tag":671,"props":962,"children":965},{"href":963,"rel":964},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[675],[966],{"type":432,"value":967},"Broadcast Channel",{"type":427,"tag":434,"props":969,"children":971},{"id":970},"dev-tools",[972],{"type":432,"value":973},"Dev Tools",{"type":427,"tag":440,"props":975,"children":977},{"id":976},"代码覆盖率怎么看",[978],{"type":432,"value":979},"代码覆盖率怎么看？",{"type":427,"tag":447,"props":981,"children":982},{},[983],{"type":432,"value":984},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":427,"tag":447,"props":986,"children":987},{},[988],{"type":427,"tag":451,"props":989,"children":992},{"alt":990,"src":991},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":427,"tag":434,"props":994,"children":996},{"id":995},"api",[997],{"type":432,"value":998},"API",{"type":427,"tag":440,"props":1000,"children":1002},{"id":1001},"eventsource",[1003],{"type":432,"value":1004},"EventSource",{"type":427,"tag":447,"props":1006,"children":1007},{},[1008],{"type":432,"value":1009},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":427,"tag":447,"props":1011,"children":1012},{},[1013,1014],{"type":432,"value":800},{"type":427,"tag":671,"props":1015,"children":1018},{"href":1016,"rel":1017},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[675],[1019],{"type":432,"value":1020},"Event Source API Test",{"type":427,"tag":434,"props":1022,"children":1023},{"id":412},[1024],{"type":432,"value":1025},"TODO",{"type":427,"tag":664,"props":1027,"children":1028},{},[1029,1039,1049,1059,1069,1081],{"type":427,"tag":538,"props":1030,"children":1031},{},[1032],{"type":427,"tag":671,"props":1033,"children":1036},{"href":1034,"rel":1035},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[675],[1037],{"type":432,"value":1038},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":427,"tag":538,"props":1040,"children":1041},{},[1042],{"type":427,"tag":671,"props":1043,"children":1046},{"href":1044,"rel":1045},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[675],[1047],{"type":432,"value":1048},"HTML SPEC",{"type":427,"tag":538,"props":1050,"children":1051},{},[1052],{"type":427,"tag":671,"props":1053,"children":1056},{"href":1054,"rel":1055},"https://www.w3.org/TR/selectors-3/#grammar",[675],[1057],{"type":432,"value":1058},"CSS Selectors Level 3",{"type":427,"tag":538,"props":1060,"children":1061},{},[1062],{"type":427,"tag":671,"props":1063,"children":1066},{"href":1064,"rel":1065},"https://developer.chrome.com/blog/inside-browser-part1/",[675],[1067],{"type":432,"value":1068},"Inside look at modern web browser (part 1)",{"type":427,"tag":538,"props":1070,"children":1071},{},[1072,1079],{"type":427,"tag":671,"props":1073,"children":1076},{"href":1074,"rel":1075},"https://zhuanlan.zhihu.com/p/47407398",[675],[1077],{"type":432,"value":1078},"图解浏览器的基本工作原理",{"type":432,"value":1080},"，现代浏览器内部原理系列的中文翻译其一。",{"type":427,"tag":538,"props":1082,"children":1083},{},[1084,1091],{"type":427,"tag":671,"props":1085,"children":1088},{"href":1086,"rel":1087},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[675],[1089],{"type":432,"value":1090},"浏览器地址栏中输入URL到页面显示，浏览器到底发生了什么？",{"type":432,"value":1092},"，综合笔记。",{"type":427,"tag":664,"props":1094,"children":1095},{},[1096,1106,1116,1126,1136],{"type":427,"tag":538,"props":1097,"children":1098},{},[1099],{"type":427,"tag":671,"props":1100,"children":1103},{"href":1101,"rel":1102},"https://juejin.im/post/59e85eebf265da430d571f89",[675],[1104],{"type":432,"value":1105},"这一次，彻底弄懂 JavaScript 执行机制",{"type":427,"tag":538,"props":1107,"children":1108},{},[1109],{"type":427,"tag":671,"props":1110,"children":1113},{"href":1111,"rel":1112},"https://javascript.ruanyifeng.com/oop/basic.html",[675],[1114],{"type":432,"value":1115},"构造函数与 new 命令",{"type":427,"tag":538,"props":1117,"children":1118},{},[1119],{"type":427,"tag":671,"props":1120,"children":1123},{"href":1121,"rel":1122},"http://newhtml.net/v8-garbage-collection/",[675],[1124],{"type":432,"value":1125},"V8 之旅：垃圾回收器",{"type":427,"tag":538,"props":1127,"children":1128},{},[1129],{"type":427,"tag":671,"props":1130,"children":1133},{"href":1131,"rel":1132},"https://v8.dev/blog/concurrent-marking",[675],[1134],{"type":432,"value":1135},"Concurrent marking in V8",{"type":427,"tag":538,"props":1137,"children":1138},{},[1139],{"type":427,"tag":671,"props":1140,"children":1143},{"href":1141,"rel":1142},"https://juejin.im/post/59fbdb46f265da4321536565",[675],[1144],{"type":432,"value":1145},"内存分析与内存泄漏定位",{"title":421,"searchDepth":1147,"depth":1147,"links":1148},2,[1149,1150,1151,1152,1153,1154,1155,1156],{"id":436,"depth":1147,"text":436},{"id":524,"depth":1147,"text":524},{"id":565,"depth":1147,"text":565},{"id":725,"depth":1147,"text":725},{"id":810,"depth":1147,"text":810},{"id":970,"depth":1147,"text":973},{"id":995,"depth":1147,"text":998},{"id":412,"depth":1147,"text":1025},"markdown","content:6.maps:_web:browser:browser.md","content","6.maps/_web/browser/browser.md","6.maps/_web/browser/browser","md",[1164,1167],{"_path":1165,"title":1166,"description":421},"/maps/_typescript/typescript","TypeScript",{"_path":1168,"title":1169,"description":421},"/maps/_web/browser","浏览器",1738603251557]