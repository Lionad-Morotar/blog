[{"data":1,"prerenderedAt":1166},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/browser":416,"/maps/_web/browser/browser-surround":1159},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / About","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":417,"_dir":418,"_draft":419,"_partial":420,"_locale":421,"title":422,"description":423,"body":424,"_type":1153,"_id":1154,"_source":1155,"_file":1156,"_stem":1157,"_extension":1158},"/maps/_web/browser/browser","browser",false,true,"","浏览器相关","浏览器相关问题",{"type":425,"children":426,"toc":1142},"root",[427,435,442,452,458,463,469,474,480,485,491,496,502,507,513,518,523,529,559,564,570,575,581,586,591,596,601,607,612,618,623,629,654,659,683,689,694,699,712,719,724,730,735,740,746,751,757,762,770,776,781,787,792,804,809,815,873,879,884,892,898,903,908,914,926,931,942,948,953,964,970,976,981,989,995,1001,1006,1017,1022,1089],{"type":428,"tag":429,"props":430,"children":432},"element","h2",{"id":431},"组成原理",[433],{"type":434,"value":431},"text",{"type":428,"tag":436,"props":437,"children":439},"h4",{"id":438},"浏览器有哪些组件-浏览器架构",[440],{"type":434,"value":441},"浏览器有哪些组件 / 浏览器架构？",{"type":428,"tag":443,"props":444,"children":445},"p",{},[446],{"type":428,"tag":447,"props":448,"children":451},"img",{"alt":449,"src":450},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":428,"tag":436,"props":453,"children":455},{"id":454},"进程和线程的区别是什么",[456],{"type":434,"value":457},"进程和线程的区别是什么？",{"type":428,"tag":443,"props":459,"children":460},{},[461],{"type":434,"value":462},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":428,"tag":436,"props":464,"children":466},{"id":465},"浏览器的进程线程结构是怎么样的",[467],{"type":434,"value":468},"浏览器的进程线程结构是怎么样的？",{"type":428,"tag":443,"props":470,"children":471},{},[472],{"type":434,"value":473},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和 GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":428,"tag":436,"props":475,"children":477},{"id":476},"每个页面都有一个对应的渲染进程吗",[478],{"type":434,"value":479},"每个页面都有一个对应的渲染进程吗？",{"type":428,"tag":443,"props":481,"children":482},{},[483],{"type":434,"value":484},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":428,"tag":436,"props":486,"children":488},{"id":487},"service-worker-是如何工作的",[489],{"type":434,"value":490},"Service Worker 是如何工作的？",{"type":428,"tag":443,"props":492,"children":493},{},[494],{"type":434,"value":495},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":428,"tag":436,"props":497,"children":499},{"id":498},"为什么渲染和脚本执行不可以同时进行",[500],{"type":434,"value":501},"为什么渲染和脚本执行不可以同时进行？",{"type":428,"tag":443,"props":503,"children":504},{},[505],{"type":434,"value":506},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":428,"tag":436,"props":508,"children":510},{"id":509},"webworker-和-sharedworker-的资源是谁来管理的",[511],{"type":434,"value":512},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":428,"tag":443,"props":514,"children":515},{},[516],{"type":434,"value":517},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":428,"tag":429,"props":519,"children":521},{"id":520},"网络请求",[522],{"type":434,"value":520},{"type":428,"tag":436,"props":524,"children":526},{"id":525},"请求-cdn-中的资源的流程是怎样的",[527],{"type":434,"value":528},"请求 CDN 中的资源的流程是怎样的？",{"type":428,"tag":530,"props":531,"children":532},"ol",{},[533,539,544,549,554],{"type":428,"tag":534,"props":535,"children":536},"li",{},[537],{"type":434,"value":538},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":428,"tag":534,"props":540,"children":541},{},[542],{"type":434,"value":543},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":428,"tag":534,"props":545,"children":546},{},[547],{"type":434,"value":548},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":428,"tag":534,"props":550,"children":551},{},[552],{"type":434,"value":553},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":428,"tag":534,"props":555,"children":556},{},[557],{"type":434,"value":558},"发请求，根据各级缓存服务器查找对应资源",{"type":428,"tag":429,"props":560,"children":562},{"id":561},"解析",[563],{"type":434,"value":561},{"type":428,"tag":436,"props":565,"children":567},{"id":566},"浏览器怎么根据请求的文件类型来进一步处理",[568],{"type":434,"value":569},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":428,"tag":443,"props":571,"children":572},{},[573],{"type":434,"value":574},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":428,"tag":436,"props":576,"children":578},{"id":577},"渲染进程的大致工作流程是怎样的",[579],{"type":434,"value":580},"渲染进程的大致工作流程是怎样的？",{"type":428,"tag":443,"props":582,"children":583},{},[584],{"type":434,"value":585},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":428,"tag":443,"props":587,"children":588},{},[589],{"type":434,"value":590},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":428,"tag":443,"props":592,"children":593},{},[594],{"type":434,"value":595},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":428,"tag":443,"props":597,"children":598},{},[599],{"type":434,"value":600},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染 GPU 进程渲染页面。",{"type":428,"tag":436,"props":602,"children":604},{"id":603},"为什么解析-html-无法使用自上而下或自下而上的解析器",[605],{"type":434,"value":606},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":428,"tag":443,"props":608,"children":609},{},[610],{"type":434,"value":611},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":428,"tag":436,"props":613,"children":615},{"id":614},"碰到错误的标签会怎么处理",[616],{"type":434,"value":617},"碰到错误的标签会怎么处理？",{"type":428,"tag":443,"props":619,"children":620},{},[621],{"type":434,"value":622},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":428,"tag":436,"props":624,"children":626},{"id":625},"css-解析和-html-的有什么不同",[627],{"type":434,"value":628},"CSS 解析和 HTML 的有什么不同？",{"type":428,"tag":443,"props":630,"children":631},{},[632,634,640,642,646,648,652],{"type":434,"value":633},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":428,"tag":635,"props":636,"children":637},"span",{},[638],{"type":434,"value":639},"0-9",{"type":434,"value":641},"+|",{"type":428,"tag":635,"props":643,"children":644},{},[645],{"type":434,"value":639},{"type":434,"value":647},"*.",{"type":428,"tag":635,"props":649,"children":650},{},[651],{"type":434,"value":639},{"type":434,"value":653},"+，语法则用 BNF（巴科斯范式）描述。",{"type":428,"tag":443,"props":655,"children":656},{},[657],{"type":434,"value":658},"TODO:",{"type":428,"tag":660,"props":661,"children":662},"ul",{},[663,674],{"type":428,"tag":534,"props":664,"children":665},{},[666],{"type":428,"tag":667,"props":668,"children":672},"a",{"href":669,"rel":670},"https://zhuanlan.zhihu.com/p/31311515",[671],"nofollow",[673],{"type":434,"value":669},{"type":428,"tag":534,"props":675,"children":676},{},[677],{"type":428,"tag":667,"props":678,"children":681},{"href":679,"rel":680},"https://zhuanlan.zhihu.com/p/358518402",[671],[682],{"type":434,"value":679},{"type":428,"tag":436,"props":684,"children":686},{"id":685},"构建渲染树时用了什么优化策略",[687],{"type":434,"value":688},"构建渲染树时用了什么优化策略？",{"type":428,"tag":443,"props":690,"children":691},{},[692],{"type":434,"value":693},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":428,"tag":443,"props":695,"children":696},{},[697],{"type":434,"value":698},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":428,"tag":443,"props":700,"children":701},{},[702,704,710],{"type":434,"value":703},"Firefox 使用了",{"type":428,"tag":705,"props":706,"children":707},"strong",{},[708],{"type":434,"value":709},"规则树",{"type":434,"value":711},"这一方案。TODO",{"type":428,"tag":443,"props":713,"children":714},{},[715],{"type":428,"tag":447,"props":716,"children":718},{"alt":709,"src":717},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":428,"tag":429,"props":720,"children":722},{"id":721},"渲染",[723],{"type":434,"value":721},{"type":428,"tag":436,"props":725,"children":727},{"id":726},"如何避免重绘与回流",[728],{"type":434,"value":729},"如何避免重绘与回流？",{"type":428,"tag":443,"props":731,"children":732},{},[733],{"type":434,"value":734},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":428,"tag":443,"props":736,"children":737},{},[738],{"type":434,"value":739},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":428,"tag":436,"props":741,"children":743},{"id":742},"domcontentloaded-和-onload-事件先后顺序是",[744],{"type":434,"value":745},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":428,"tag":443,"props":747,"children":748},{},[749],{"type":434,"value":750},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":428,"tag":436,"props":752,"children":754},{"id":753},"复合composite是什么",[755],{"type":434,"value":756},"复合（Composite）是什么？",{"type":428,"tag":443,"props":758,"children":759},{},[760],{"type":434,"value":761},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":428,"tag":443,"props":763,"children":764},{},[765],{"type":428,"tag":447,"props":766,"children":769},{"alt":767,"src":768},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":428,"tag":436,"props":771,"children":773},{"id":772},"图层是什么",[774],{"type":434,"value":775},"图层是什么？",{"type":428,"tag":443,"props":777,"children":778},{},[779],{"type":434,"value":780},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":428,"tag":436,"props":782,"children":784},{"id":783},"浏览器硬件加速是指什么",[785],{"type":434,"value":786},"浏览器硬件加速是指什么？",{"type":428,"tag":443,"props":788,"children":789},{},[790],{"type":434,"value":791},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":428,"tag":443,"props":793,"children":794},{},[795,797],{"type":434,"value":796},"见：",{"type":428,"tag":667,"props":798,"children":801},{"href":799,"rel":800},"https://zhuanlan.zhihu.com/p/404656386",[671],[802],{"type":434,"value":803},"搞懂 GPU 和 CSS 硬件加速",{"type":428,"tag":429,"props":805,"children":807},{"id":806},"浏览器操作",[808],{"type":434,"value":806},{"type":428,"tag":436,"props":810,"children":812},{"id":811},"从输入-url-到页面显示的过程",[813],{"type":434,"value":814},"从输入 URL 到页面显示的过程？",{"type":428,"tag":530,"props":816,"children":817},{},[818,823,828,833,843,848,853,858,868],{"type":428,"tag":534,"props":819,"children":820},{},[821],{"type":434,"value":822},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":428,"tag":534,"props":824,"children":825},{},[826],{"type":434,"value":827},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":428,"tag":534,"props":829,"children":830},{},[831],{"type":434,"value":832},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":428,"tag":534,"props":834,"children":835},{},[836,838],{"type":434,"value":837},"如果是请求 CDN 中的资源，见：",{"type":428,"tag":667,"props":839,"children":841},{"href":840},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[842],{"type":434,"value":528},{"type":428,"tag":534,"props":844,"children":845},{},[846],{"type":434,"value":847},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":428,"tag":534,"props":849,"children":850},{},[851],{"type":434,"value":852},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":428,"tag":534,"props":854,"children":855},{},[856],{"type":434,"value":857},"浏览器根据响应，缓存资源。",{"type":428,"tag":534,"props":859,"children":860},{},[861,863],{"type":434,"value":862},"渲染进程开始渲染，见：",{"type":428,"tag":667,"props":864,"children":866},{"href":865},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[867],{"type":434,"value":580},{"type":428,"tag":534,"props":869,"children":870},{},[871],{"type":434,"value":872},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":428,"tag":436,"props":874,"children":876},{"id":875},"简单介绍一下浏览器的事件捕获机制",[877],{"type":434,"value":878},"简单介绍一下浏览器的事件捕获机制？",{"type":428,"tag":443,"props":880,"children":881},{},[882],{"type":434,"value":883},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":428,"tag":443,"props":885,"children":886},{},[887],{"type":428,"tag":447,"props":888,"children":891},{"alt":889,"src":890},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":428,"tag":436,"props":893,"children":895},{"id":894},"为什么-passive-true-能改善滚动性能",[896],{"type":434,"value":897},"为什么 passive true 能改善滚动性能？",{"type":428,"tag":443,"props":899,"children":900},{},[901],{"type":434,"value":902},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":428,"tag":443,"props":904,"children":905},{},[906],{"type":434,"value":907},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":428,"tag":436,"props":909,"children":911},{"id":910},"bfcache-是如何运作的",[912],{"type":434,"value":913},"BFCache 是如何运作的？",{"type":428,"tag":443,"props":915,"children":916},{},[917,924],{"type":428,"tag":667,"props":918,"children":921},{"href":919,"rel":920},"https://www.youtube.com/watch?v=cuPsdRckkF0",[671],[922],{"type":434,"value":923},"BFCache（Back/Forward Cache）",{"type":434,"value":925}," 是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":428,"tag":443,"props":927,"children":928},{},[929],{"type":434,"value":930},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":428,"tag":443,"props":932,"children":933},{},[934,935],{"type":434,"value":796},{"type":428,"tag":667,"props":936,"children":939},{"href":937,"rel":938},"https://web.dev/bfcache",[671],[940],{"type":434,"value":941},"BFCache",{"type":428,"tag":436,"props":943,"children":945},{"id":944},"浏览器怎么跨页面通信",[946],{"type":434,"value":947},"浏览器怎么跨页面通信？",{"type":428,"tag":443,"props":949,"children":950},{},[951],{"type":434,"value":952},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":428,"tag":443,"props":954,"children":955},{},[956,957],{"type":434,"value":796},{"type":428,"tag":667,"props":958,"children":961},{"href":959,"rel":960},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[671],[962],{"type":434,"value":963},"Broadcast Channel",{"type":428,"tag":429,"props":965,"children":967},{"id":966},"dev-tools",[968],{"type":434,"value":969},"Dev Tools",{"type":428,"tag":436,"props":971,"children":973},{"id":972},"代码覆盖率怎么看",[974],{"type":434,"value":975},"代码覆盖率怎么看？",{"type":428,"tag":443,"props":977,"children":978},{},[979],{"type":434,"value":980},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":428,"tag":443,"props":982,"children":983},{},[984],{"type":428,"tag":447,"props":985,"children":988},{"alt":986,"src":987},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":428,"tag":429,"props":990,"children":992},{"id":991},"api",[993],{"type":434,"value":994},"API",{"type":428,"tag":436,"props":996,"children":998},{"id":997},"eventsource",[999],{"type":434,"value":1000},"EventSource",{"type":428,"tag":443,"props":1002,"children":1003},{},[1004],{"type":434,"value":1005},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":428,"tag":443,"props":1007,"children":1008},{},[1009,1010],{"type":434,"value":796},{"type":428,"tag":667,"props":1011,"children":1014},{"href":1012,"rel":1013},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[671],[1015],{"type":434,"value":1016},"Event Source API Test",{"type":428,"tag":429,"props":1018,"children":1019},{"id":412},[1020],{"type":434,"value":1021},"TODO",{"type":428,"tag":660,"props":1023,"children":1024},{},[1025,1035,1045,1055,1065,1077],{"type":428,"tag":534,"props":1026,"children":1027},{},[1028],{"type":428,"tag":667,"props":1029,"children":1032},{"href":1030,"rel":1031},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[671],[1033],{"type":434,"value":1034},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":428,"tag":534,"props":1036,"children":1037},{},[1038],{"type":428,"tag":667,"props":1039,"children":1042},{"href":1040,"rel":1041},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[671],[1043],{"type":434,"value":1044},"HTML SPEC",{"type":428,"tag":534,"props":1046,"children":1047},{},[1048],{"type":428,"tag":667,"props":1049,"children":1052},{"href":1050,"rel":1051},"https://www.w3.org/TR/selectors-3/#grammar",[671],[1053],{"type":434,"value":1054},"CSS Selectors Level 3",{"type":428,"tag":534,"props":1056,"children":1057},{},[1058],{"type":428,"tag":667,"props":1059,"children":1062},{"href":1060,"rel":1061},"https://developer.chrome.com/blog/inside-browser-part1/",[671],[1063],{"type":434,"value":1064},"Inside look at modern web browser (part 1)",{"type":428,"tag":534,"props":1066,"children":1067},{},[1068,1075],{"type":428,"tag":667,"props":1069,"children":1072},{"href":1070,"rel":1071},"https://zhuanlan.zhihu.com/p/47407398",[671],[1073],{"type":434,"value":1074},"图解浏览器的基本工作原理",{"type":434,"value":1076},"，现代浏览器内部原理系列的中文翻译其一。",{"type":428,"tag":534,"props":1078,"children":1079},{},[1080,1087],{"type":428,"tag":667,"props":1081,"children":1084},{"href":1082,"rel":1083},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[671],[1085],{"type":434,"value":1086},"浏览器地址栏中输入 URL 到页面显示，浏览器到底发生了什么？",{"type":434,"value":1088},"，综合笔记。",{"type":428,"tag":660,"props":1090,"children":1091},{},[1092,1102,1112,1122,1132],{"type":428,"tag":534,"props":1093,"children":1094},{},[1095],{"type":428,"tag":667,"props":1096,"children":1099},{"href":1097,"rel":1098},"https://juejin.im/post/59e85eebf265da430d571f89",[671],[1100],{"type":434,"value":1101},"这一次，彻底弄懂 JavaScript 执行机制",{"type":428,"tag":534,"props":1103,"children":1104},{},[1105],{"type":428,"tag":667,"props":1106,"children":1109},{"href":1107,"rel":1108},"https://javascript.ruanyifeng.com/oop/basic.html",[671],[1110],{"type":434,"value":1111},"构造函数与 new 命令",{"type":428,"tag":534,"props":1113,"children":1114},{},[1115],{"type":428,"tag":667,"props":1116,"children":1119},{"href":1117,"rel":1118},"http://newhtml.net/v8-garbage-collection/",[671],[1120],{"type":434,"value":1121},"V8 之旅：垃圾回收器",{"type":428,"tag":534,"props":1123,"children":1124},{},[1125],{"type":428,"tag":667,"props":1126,"children":1129},{"href":1127,"rel":1128},"https://v8.dev/blog/concurrent-marking",[671],[1130],{"type":434,"value":1131},"Concurrent marking in V8",{"type":428,"tag":534,"props":1133,"children":1134},{},[1135],{"type":428,"tag":667,"props":1136,"children":1139},{"href":1137,"rel":1138},"https://juejin.im/post/59fbdb46f265da4321536565",[671],[1140],{"type":434,"value":1141},"内存分析与内存泄漏定位",{"title":421,"searchDepth":1143,"depth":1143,"links":1144},2,[1145,1146,1147,1148,1149,1150,1151,1152],{"id":431,"depth":1143,"text":431},{"id":520,"depth":1143,"text":520},{"id":561,"depth":1143,"text":561},{"id":721,"depth":1143,"text":721},{"id":806,"depth":1143,"text":806},{"id":966,"depth":1143,"text":969},{"id":991,"depth":1143,"text":994},{"id":412,"depth":1143,"text":1021},"markdown","content:6.maps:_web:browser:browser.md","content","6.maps/_web/browser/browser.md","6.maps/_web/browser/browser","md",[1160,1163],{"_path":1161,"title":1162,"description":421},"/maps/_typescript/typescript","TypeScript",{"_path":1164,"title":1165,"description":421},"/maps/_web/browser","浏览器",1739580365463]