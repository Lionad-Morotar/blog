[{"data":1,"prerenderedAt":1134},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/principle":384,"/maps/_web/browser/principle-surround":1125},[4,35,86,105,132,138,144,150,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":205,"_path":206},"正则表达式","/gists/eegex",{"title":208,"_path":209},"Emoji","/gists/emoji",{"title":211,"_path":212},"工程","/gists/engineering",{"title":214,"_path":215},"熵","/gists/entropy",{"title":217,"_path":218},"Environment","/gists/environment",{"title":220,"_path":221},"Erlang","/gists/erlang",{"title":223,"_path":224},"逃离塔克夫","/gists/escape-from-tarkov",{"title":226,"_path":227},"ESNext (ES6-ES11)","/gists/esnext",{"title":229,"_path":230},"Eval！","/gists/eval",{"title":232,"_path":233},"Flutter","/gists/flutter",{"title":235,"_path":236},"字体","/gists/font",{"title":238,"_path":239},"JS 函数式编程","/gists/functional",{"title":241,"_path":242},"游戏化","/gists/gamification",{"title":244,"_path":245},"Google C++ Standard","/gists/google-cpp-standard",{"title":247,"_path":248},"双向链接完全体","/gists/graph",{"title":250,"_path":251},"Hardwares","/gists/hardwares",{"title":253,"_path":254},"哈希冲突","/gists/hash-collision",{"title":256,"_path":257},"信息设计","/gists/information-design",{"title":259,"_path":260},"InstantPage","/gists/instant.page",{"title":262,"_path":263},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":265,"_path":266},"KVStore","/gists/key-value-db",{"title":268,"_path":269},"Kubernetes","/gists/kubernetes",{"title":271,"_path":272},"Makefile","/gists/makefile",{"title":274,"_path":275},"Markdown Inline Style","/gists/markdown-nice",{"title":277,"_path":278},"减小页面快照体积","/gists/minify-html",{"title":280,"_path":281},"mklink","/gists/mklink",{"title":283,"_path":284},"Mock","/gists/mock",{"title":286,"_path":287},"多人协作系统","/gists/multiplayer",{"title":289,"_path":290},"多端应用","/gists/multy-end-app",{"title":292,"_path":293},"神经科学","/gists/neuroscience",{"title":295,"_path":296},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":298,"_path":299},"PInvoke","/gists/pinvoke",{"title":301,"_path":302},"像素","/gists/pixel",{"title":304,"_path":305},"PowerShell","/gists/powershell",{"title":307,"_path":308},"量子","/gists/quantum",{"title":310,"_path":311},"保持好奇心","/gists/questions",{"title":313,"_path":314},"React Native","/gists/react-native",{"title":316,"_path":317},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":319,"_path":320},"SEO","/gists/seo",{"title":322,"_path":323},"Shader","/gists/shader",{"title":325,"_path":326},"Shape Up","/gists/shape-up",{"title":328,"_path":329},"睡觉","/gists/sleep",{"title":331,"_path":332},"记录奇怪的问题","/gists/solved",{"title":334,"_path":335},"States","/gists/states",{"title":337,"_path":338},"Storage","/gists/storage",{"title":340,"_path":341},"音视频流处理","/gists/stream-cli",{"title":343,"_path":344},"Symbol","/gists/symbol",{"title":346,"_path":347},"系统论","/gists/systems-theory",{"title":349,"_path":350},"任务切片","/gists/task-slice",{"title":352,"_path":353},"技术偏好","/gists/tech-dudge",{"title":355,"_path":356},"Untitled","/gists/untitled",{"title":358,"_path":359},"可变字体","/gists/variable-font",{"title":361,"_path":362},"视觉错觉","/gists/visual-illusion",{"title":364,"_path":365},"SS(SSR)","/gists/vpn",{"title":367,"_path":368},"VS Code 插件开发","/gists/vscode-plugin",{"title":370,"_path":371},"Web Components","/gists/web-components",{"title":373,"_path":374},"Windows","/gists/windows",{"title":376,"_path":377},"查缺补漏","/gists/wrong",{"title":379,"_path":380,"children":381},"我 / About","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"_path":385,"_dir":386,"_draft":387,"_partial":388,"_locale":389,"title":390,"description":391,"body":392,"_type":1119,"_id":1120,"_source":1121,"_file":1122,"_stem":1123,"_extension":1124},"/maps/_web/browser/principle","browser",false,true,"","浏览器相关","浏览器相关问题",{"type":393,"children":394,"toc":1108},"root",[395,403,410,420,426,431,437,442,448,453,459,464,470,475,481,486,491,497,527,532,538,543,549,554,559,564,569,575,580,586,591,597,622,627,651,657,662,667,680,687,692,698,703,708,714,719,725,730,738,744,749,755,760,772,777,783,841,847,852,860,866,871,876,882,894,899,910,916,921,932,938,944,949,957,963,969,974,985,991],{"type":396,"tag":397,"props":398,"children":400},"element","h2",{"id":399},"组成原理",[401],{"type":402,"value":399},"text",{"type":396,"tag":404,"props":405,"children":407},"h4",{"id":406},"浏览器有哪些组件-浏览器架构",[408],{"type":402,"value":409},"浏览器有哪些组件 / 浏览器架构？",{"type":396,"tag":411,"props":412,"children":413},"p",{},[414],{"type":396,"tag":415,"props":416,"children":419},"img",{"alt":417,"src":418},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":396,"tag":404,"props":421,"children":423},{"id":422},"进程和线程的区别是什么",[424],{"type":402,"value":425},"进程和线程的区别是什么？",{"type":396,"tag":411,"props":427,"children":428},{},[429],{"type":402,"value":430},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":396,"tag":404,"props":432,"children":434},{"id":433},"浏览器的进程线程结构是怎么样的",[435],{"type":402,"value":436},"浏览器的进程线程结构是怎么样的？",{"type":396,"tag":411,"props":438,"children":439},{},[440],{"type":402,"value":441},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和 GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":396,"tag":404,"props":443,"children":445},{"id":444},"每个页面都有一个对应的渲染进程吗",[446],{"type":402,"value":447},"每个页面都有一个对应的渲染进程吗？",{"type":396,"tag":411,"props":449,"children":450},{},[451],{"type":402,"value":452},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":396,"tag":404,"props":454,"children":456},{"id":455},"service-worker-是如何工作的",[457],{"type":402,"value":458},"Service Worker 是如何工作的？",{"type":396,"tag":411,"props":460,"children":461},{},[462],{"type":402,"value":463},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":396,"tag":404,"props":465,"children":467},{"id":466},"为什么渲染和脚本执行不可以同时进行",[468],{"type":402,"value":469},"为什么渲染和脚本执行不可以同时进行？",{"type":396,"tag":411,"props":471,"children":472},{},[473],{"type":402,"value":474},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":396,"tag":404,"props":476,"children":478},{"id":477},"webworker-和-sharedworker-的资源是谁来管理的",[479],{"type":402,"value":480},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":396,"tag":411,"props":482,"children":483},{},[484],{"type":402,"value":485},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":396,"tag":397,"props":487,"children":489},{"id":488},"网络请求",[490],{"type":402,"value":488},{"type":396,"tag":404,"props":492,"children":494},{"id":493},"请求-cdn-中的资源的流程是怎样的",[495],{"type":402,"value":496},"请求 CDN 中的资源的流程是怎样的？",{"type":396,"tag":498,"props":499,"children":500},"ol",{},[501,507,512,517,522],{"type":396,"tag":502,"props":503,"children":504},"li",{},[505],{"type":402,"value":506},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":396,"tag":502,"props":508,"children":509},{},[510],{"type":402,"value":511},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":396,"tag":502,"props":513,"children":514},{},[515],{"type":402,"value":516},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":396,"tag":502,"props":518,"children":519},{},[520],{"type":402,"value":521},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":396,"tag":502,"props":523,"children":524},{},[525],{"type":402,"value":526},"发请求，根据各级缓存服务器查找对应资源",{"type":396,"tag":397,"props":528,"children":530},{"id":529},"解析",[531],{"type":402,"value":529},{"type":396,"tag":404,"props":533,"children":535},{"id":534},"浏览器怎么根据请求的文件类型来进一步处理",[536],{"type":402,"value":537},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":396,"tag":411,"props":539,"children":540},{},[541],{"type":402,"value":542},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":396,"tag":404,"props":544,"children":546},{"id":545},"渲染进程的大致工作流程是怎样的",[547],{"type":402,"value":548},"渲染进程的大致工作流程是怎样的？",{"type":396,"tag":411,"props":550,"children":551},{},[552],{"type":402,"value":553},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":396,"tag":411,"props":555,"children":556},{},[557],{"type":402,"value":558},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":396,"tag":411,"props":560,"children":561},{},[562],{"type":402,"value":563},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":396,"tag":411,"props":565,"children":566},{},[567],{"type":402,"value":568},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染 GPU 进程渲染页面。",{"type":396,"tag":404,"props":570,"children":572},{"id":571},"为什么解析-html-无法使用自上而下或自下而上的解析器",[573],{"type":402,"value":574},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":396,"tag":411,"props":576,"children":577},{},[578],{"type":402,"value":579},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":396,"tag":404,"props":581,"children":583},{"id":582},"碰到错误的标签会怎么处理",[584],{"type":402,"value":585},"碰到错误的标签会怎么处理？",{"type":396,"tag":411,"props":587,"children":588},{},[589],{"type":402,"value":590},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":396,"tag":404,"props":592,"children":594},{"id":593},"css-解析和-html-的有什么不同",[595],{"type":402,"value":596},"CSS 解析和 HTML 的有什么不同？",{"type":396,"tag":411,"props":598,"children":599},{},[600,602,608,610,614,616,620],{"type":402,"value":601},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":396,"tag":603,"props":604,"children":605},"span",{},[606],{"type":402,"value":607},"0-9",{"type":402,"value":609},"+|",{"type":396,"tag":603,"props":611,"children":612},{},[613],{"type":402,"value":607},{"type":402,"value":615},"*.",{"type":396,"tag":603,"props":617,"children":618},{},[619],{"type":402,"value":607},{"type":402,"value":621},"+，语法则用 BNF（巴科斯范式）描述。",{"type":396,"tag":411,"props":623,"children":624},{},[625],{"type":402,"value":626},"TODO:",{"type":396,"tag":628,"props":629,"children":630},"ul",{},[631,642],{"type":396,"tag":502,"props":632,"children":633},{},[634],{"type":396,"tag":635,"props":636,"children":640},"a",{"href":637,"rel":638},"https://zhuanlan.zhihu.com/p/31311515",[639],"nofollow",[641],{"type":402,"value":637},{"type":396,"tag":502,"props":643,"children":644},{},[645],{"type":396,"tag":635,"props":646,"children":649},{"href":647,"rel":648},"https://zhuanlan.zhihu.com/p/358518402",[639],[650],{"type":402,"value":647},{"type":396,"tag":404,"props":652,"children":654},{"id":653},"构建渲染树时用了什么优化策略",[655],{"type":402,"value":656},"构建渲染树时用了什么优化策略？",{"type":396,"tag":411,"props":658,"children":659},{},[660],{"type":402,"value":661},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":396,"tag":411,"props":663,"children":664},{},[665],{"type":402,"value":666},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":396,"tag":411,"props":668,"children":669},{},[670,672,678],{"type":402,"value":671},"Firefox 使用了",{"type":396,"tag":673,"props":674,"children":675},"strong",{},[676],{"type":402,"value":677},"规则树",{"type":402,"value":679},"这一方案。TODO",{"type":396,"tag":411,"props":681,"children":682},{},[683],{"type":396,"tag":415,"props":684,"children":686},{"alt":677,"src":685},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":396,"tag":397,"props":688,"children":690},{"id":689},"渲染",[691],{"type":402,"value":689},{"type":396,"tag":404,"props":693,"children":695},{"id":694},"如何避免重绘与回流",[696],{"type":402,"value":697},"如何避免重绘与回流？",{"type":396,"tag":411,"props":699,"children":700},{},[701],{"type":402,"value":702},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":396,"tag":411,"props":704,"children":705},{},[706],{"type":402,"value":707},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":396,"tag":404,"props":709,"children":711},{"id":710},"domcontentloaded-和-onload-事件先后顺序是",[712],{"type":402,"value":713},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":396,"tag":411,"props":715,"children":716},{},[717],{"type":402,"value":718},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":396,"tag":404,"props":720,"children":722},{"id":721},"复合composite是什么",[723],{"type":402,"value":724},"复合（Composite）是什么？",{"type":396,"tag":411,"props":726,"children":727},{},[728],{"type":402,"value":729},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":396,"tag":411,"props":731,"children":732},{},[733],{"type":396,"tag":415,"props":734,"children":737},{"alt":735,"src":736},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":396,"tag":404,"props":739,"children":741},{"id":740},"图层是什么",[742],{"type":402,"value":743},"图层是什么？",{"type":396,"tag":411,"props":745,"children":746},{},[747],{"type":402,"value":748},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":396,"tag":404,"props":750,"children":752},{"id":751},"浏览器硬件加速是指什么",[753],{"type":402,"value":754},"浏览器硬件加速是指什么？",{"type":396,"tag":411,"props":756,"children":757},{},[758],{"type":402,"value":759},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":396,"tag":411,"props":761,"children":762},{},[763,765],{"type":402,"value":764},"见：",{"type":396,"tag":635,"props":766,"children":769},{"href":767,"rel":768},"https://zhuanlan.zhihu.com/p/404656386",[639],[770],{"type":402,"value":771},"搞懂 GPU 和 CSS 硬件加速",{"type":396,"tag":397,"props":773,"children":775},{"id":774},"浏览器操作",[776],{"type":402,"value":774},{"type":396,"tag":404,"props":778,"children":780},{"id":779},"从输入-url-到页面显示的过程",[781],{"type":402,"value":782},"从输入 URL 到页面显示的过程？",{"type":396,"tag":498,"props":784,"children":785},{},[786,791,796,801,811,816,821,826,836],{"type":396,"tag":502,"props":787,"children":788},{},[789],{"type":402,"value":790},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":396,"tag":502,"props":792,"children":793},{},[794],{"type":402,"value":795},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":396,"tag":502,"props":797,"children":798},{},[799],{"type":402,"value":800},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":396,"tag":502,"props":802,"children":803},{},[804,806],{"type":402,"value":805},"如果是请求 CDN 中的资源，见：",{"type":396,"tag":635,"props":807,"children":809},{"href":808},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[810],{"type":402,"value":496},{"type":396,"tag":502,"props":812,"children":813},{},[814],{"type":402,"value":815},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":396,"tag":502,"props":817,"children":818},{},[819],{"type":402,"value":820},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":396,"tag":502,"props":822,"children":823},{},[824],{"type":402,"value":825},"浏览器根据响应，缓存资源。",{"type":396,"tag":502,"props":827,"children":828},{},[829,831],{"type":402,"value":830},"渲染进程开始渲染，见：",{"type":396,"tag":635,"props":832,"children":834},{"href":833},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[835],{"type":402,"value":548},{"type":396,"tag":502,"props":837,"children":838},{},[839],{"type":402,"value":840},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":396,"tag":404,"props":842,"children":844},{"id":843},"简单介绍一下浏览器的事件捕获机制",[845],{"type":402,"value":846},"简单介绍一下浏览器的事件捕获机制？",{"type":396,"tag":411,"props":848,"children":849},{},[850],{"type":402,"value":851},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":396,"tag":411,"props":853,"children":854},{},[855],{"type":396,"tag":415,"props":856,"children":859},{"alt":857,"src":858},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":396,"tag":404,"props":861,"children":863},{"id":862},"为什么-passive-true-能改善滚动性能",[864],{"type":402,"value":865},"为什么 passive true 能改善滚动性能？",{"type":396,"tag":411,"props":867,"children":868},{},[869],{"type":402,"value":870},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":396,"tag":411,"props":872,"children":873},{},[874],{"type":402,"value":875},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":396,"tag":404,"props":877,"children":879},{"id":878},"bfcache-是如何运作的",[880],{"type":402,"value":881},"BFCache 是如何运作的？",{"type":396,"tag":411,"props":883,"children":884},{},[885,892],{"type":396,"tag":635,"props":886,"children":889},{"href":887,"rel":888},"https://www.youtube.com/watch?v=cuPsdRckkF0",[639],[890],{"type":402,"value":891},"BFCache（Back/Forward Cache）",{"type":402,"value":893}," 是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":396,"tag":411,"props":895,"children":896},{},[897],{"type":402,"value":898},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":396,"tag":411,"props":900,"children":901},{},[902,903],{"type":402,"value":764},{"type":396,"tag":635,"props":904,"children":907},{"href":905,"rel":906},"https://web.dev/bfcache",[639],[908],{"type":402,"value":909},"BFCache",{"type":396,"tag":404,"props":911,"children":913},{"id":912},"浏览器怎么跨页面通信",[914],{"type":402,"value":915},"浏览器怎么跨页面通信？",{"type":396,"tag":411,"props":917,"children":918},{},[919],{"type":402,"value":920},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":396,"tag":411,"props":922,"children":923},{},[924,925],{"type":402,"value":764},{"type":396,"tag":635,"props":926,"children":929},{"href":927,"rel":928},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[639],[930],{"type":402,"value":931},"Broadcast Channel",{"type":396,"tag":397,"props":933,"children":935},{"id":934},"dev-tools",[936],{"type":402,"value":937},"Dev Tools",{"type":396,"tag":404,"props":939,"children":941},{"id":940},"代码覆盖率怎么看",[942],{"type":402,"value":943},"代码覆盖率怎么看？",{"type":396,"tag":411,"props":945,"children":946},{},[947],{"type":402,"value":948},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":396,"tag":411,"props":950,"children":951},{},[952],{"type":396,"tag":415,"props":953,"children":956},{"alt":954,"src":955},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":396,"tag":397,"props":958,"children":960},{"id":959},"api",[961],{"type":402,"value":962},"API",{"type":396,"tag":404,"props":964,"children":966},{"id":965},"eventsource",[967],{"type":402,"value":968},"EventSource",{"type":396,"tag":411,"props":970,"children":971},{},[972],{"type":402,"value":973},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":396,"tag":411,"props":975,"children":976},{},[977,978],{"type":402,"value":764},{"type":396,"tag":635,"props":979,"children":982},{"href":980,"rel":981},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[639],[983],{"type":402,"value":984},"Event Source API Test",{"type":396,"tag":397,"props":986,"children":988},{"id":987},"todo",[989],{"type":402,"value":990},"TODO",{"type":396,"tag":628,"props":992,"children":993},{},[994,1004,1014,1024,1034,1046,1058,1068,1078,1088,1098],{"type":396,"tag":502,"props":995,"children":996},{},[997],{"type":396,"tag":635,"props":998,"children":1001},{"href":999,"rel":1000},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[639],[1002],{"type":402,"value":1003},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":396,"tag":502,"props":1005,"children":1006},{},[1007],{"type":396,"tag":635,"props":1008,"children":1011},{"href":1009,"rel":1010},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[639],[1012],{"type":402,"value":1013},"HTML SPEC",{"type":396,"tag":502,"props":1015,"children":1016},{},[1017],{"type":396,"tag":635,"props":1018,"children":1021},{"href":1019,"rel":1020},"https://www.w3.org/TR/selectors-3/#grammar",[639],[1022],{"type":402,"value":1023},"CSS Selectors Level 3",{"type":396,"tag":502,"props":1025,"children":1026},{},[1027],{"type":396,"tag":635,"props":1028,"children":1031},{"href":1029,"rel":1030},"https://developer.chrome.com/blog/inside-browser-part1/",[639],[1032],{"type":402,"value":1033},"Inside look at modern web browser (part 1)",{"type":396,"tag":502,"props":1035,"children":1036},{},[1037,1044],{"type":396,"tag":635,"props":1038,"children":1041},{"href":1039,"rel":1040},"https://zhuanlan.zhihu.com/p/47407398",[639],[1042],{"type":402,"value":1043},"图解浏览器的基本工作原理",{"type":402,"value":1045},"，现代浏览器内部原理系列的中文翻译其一。",{"type":396,"tag":502,"props":1047,"children":1048},{},[1049,1056],{"type":396,"tag":635,"props":1050,"children":1053},{"href":1051,"rel":1052},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[639],[1054],{"type":402,"value":1055},"浏览器地址栏中输入 URL 到页面显示，浏览器到底发生了什么？",{"type":402,"value":1057},"，综合笔记。",{"type":396,"tag":502,"props":1059,"children":1060},{},[1061],{"type":396,"tag":635,"props":1062,"children":1065},{"href":1063,"rel":1064},"https://juejin.im/post/59e85eebf265da430d571f89",[639],[1066],{"type":402,"value":1067},"这一次，彻底弄懂 JavaScript 执行机制",{"type":396,"tag":502,"props":1069,"children":1070},{},[1071],{"type":396,"tag":635,"props":1072,"children":1075},{"href":1073,"rel":1074},"https://javascript.ruanyifeng.com/oop/basic.html",[639],[1076],{"type":402,"value":1077},"构造函数与 new 命令",{"type":396,"tag":502,"props":1079,"children":1080},{},[1081],{"type":396,"tag":635,"props":1082,"children":1085},{"href":1083,"rel":1084},"http://newhtml.net/v8-garbage-collection/",[639],[1086],{"type":402,"value":1087},"V8 之旅：垃圾回收器",{"type":396,"tag":502,"props":1089,"children":1090},{},[1091],{"type":396,"tag":635,"props":1092,"children":1095},{"href":1093,"rel":1094},"https://v8.dev/blog/concurrent-marking",[639],[1096],{"type":402,"value":1097},"Concurrent marking in V8",{"type":396,"tag":502,"props":1099,"children":1100},{},[1101],{"type":396,"tag":635,"props":1102,"children":1105},{"href":1103,"rel":1104},"https://juejin.im/post/59fbdb46f265da4321536565",[639],[1106],{"type":402,"value":1107},"内存分析与内存泄漏定位",{"title":389,"searchDepth":1109,"depth":1109,"links":1110},2,[1111,1112,1113,1114,1115,1116,1117,1118],{"id":399,"depth":1109,"text":399},{"id":488,"depth":1109,"text":488},{"id":529,"depth":1109,"text":529},{"id":689,"depth":1109,"text":689},{"id":774,"depth":1109,"text":774},{"id":934,"depth":1109,"text":937},{"id":959,"depth":1109,"text":962},{"id":987,"depth":1109,"text":990},"markdown","content:6.maps:_web:browser:principle.md","content","6.maps/_web/browser/principle.md","6.maps/_web/browser/principle","md",[1126,1130],{"_path":1127,"title":1128,"description":1129},"/maps/_web/browser/new","浏览器新特性","Web.dev 月刊精选，追踪和总结主流浏览器的最新特性更新与时动态。",{"_path":1131,"title":1132,"description":1133},"/maps/_web/browser/router","路由技术","Web 前端路由技术详解，包含 Hash 路由、History 路由的实现原理与最佳实践。",1742040631875]