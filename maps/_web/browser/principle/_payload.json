[{"data":1,"prerenderedAt":908},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/principle":158,"/maps/_web/browser/principle-surround":899},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":893,"_id":894,"_source":895,"_file":896,"_stem":897,"_extension":898},"/maps/_web/browser/principle","browser",false,true,"","浏览器相关","浏览器相关问题",{"type":167,"children":168,"toc":882},"root",[169,177,184,194,200,205,211,216,222,227,233,238,244,249,255,260,265,271,301,306,312,317,323,328,333,338,343,349,354,360,365,371,396,401,425,431,436,441,454,461,466,472,477,482,488,493,499,504,512,518,523,529,534,546,551,557,615,621,626,634,640,645,650,656,668,673,684,690,695,706,712,718,723,731,737,743,748,759,765],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"组成原理",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"浏览器有哪些组件-浏览器架构",[182],{"type":176,"value":183},"浏览器有哪些组件 / 浏览器架构？",{"type":170,"tag":185,"props":186,"children":187},"p",{},[188],{"type":170,"tag":189,"props":190,"children":193},"img",{"alt":191,"src":192},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":170,"tag":178,"props":195,"children":197},{"id":196},"进程和线程的区别是什么",[198],{"type":176,"value":199},"进程和线程的区别是什么？",{"type":170,"tag":185,"props":201,"children":202},{},[203],{"type":176,"value":204},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":170,"tag":178,"props":206,"children":208},{"id":207},"浏览器的进程线程结构是怎么样的",[209],{"type":176,"value":210},"浏览器的进程线程结构是怎么样的？",{"type":170,"tag":185,"props":212,"children":213},{},[214],{"type":176,"value":215},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和 GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":170,"tag":178,"props":217,"children":219},{"id":218},"每个页面都有一个对应的渲染进程吗",[220],{"type":176,"value":221},"每个页面都有一个对应的渲染进程吗？",{"type":170,"tag":185,"props":223,"children":224},{},[225],{"type":176,"value":226},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":170,"tag":178,"props":228,"children":230},{"id":229},"service-worker-是如何工作的",[231],{"type":176,"value":232},"Service Worker 是如何工作的？",{"type":170,"tag":185,"props":234,"children":235},{},[236],{"type":176,"value":237},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":170,"tag":178,"props":239,"children":241},{"id":240},"为什么渲染和脚本执行不可以同时进行",[242],{"type":176,"value":243},"为什么渲染和脚本执行不可以同时进行？",{"type":170,"tag":185,"props":245,"children":246},{},[247],{"type":176,"value":248},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":170,"tag":178,"props":250,"children":252},{"id":251},"webworker-和-sharedworker-的资源是谁来管理的",[253],{"type":176,"value":254},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":170,"tag":185,"props":256,"children":257},{},[258],{"type":176,"value":259},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":170,"tag":171,"props":261,"children":263},{"id":262},"网络请求",[264],{"type":176,"value":262},{"type":170,"tag":178,"props":266,"children":268},{"id":267},"请求-cdn-中的资源的流程是怎样的",[269],{"type":176,"value":270},"请求 CDN 中的资源的流程是怎样的？",{"type":170,"tag":272,"props":273,"children":274},"ol",{},[275,281,286,291,296],{"type":170,"tag":276,"props":277,"children":278},"li",{},[279],{"type":176,"value":280},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":170,"tag":276,"props":282,"children":283},{},[284],{"type":176,"value":285},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":170,"tag":276,"props":287,"children":288},{},[289],{"type":176,"value":290},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":170,"tag":276,"props":292,"children":293},{},[294],{"type":176,"value":295},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":170,"tag":276,"props":297,"children":298},{},[299],{"type":176,"value":300},"发请求，根据各级缓存服务器查找对应资源",{"type":170,"tag":171,"props":302,"children":304},{"id":303},"解析",[305],{"type":176,"value":303},{"type":170,"tag":178,"props":307,"children":309},{"id":308},"浏览器怎么根据请求的文件类型来进一步处理",[310],{"type":176,"value":311},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":170,"tag":185,"props":313,"children":314},{},[315],{"type":176,"value":316},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":170,"tag":178,"props":318,"children":320},{"id":319},"渲染进程的大致工作流程是怎样的",[321],{"type":176,"value":322},"渲染进程的大致工作流程是怎样的？",{"type":170,"tag":185,"props":324,"children":325},{},[326],{"type":176,"value":327},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":170,"tag":185,"props":329,"children":330},{},[331],{"type":176,"value":332},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":170,"tag":185,"props":334,"children":335},{},[336],{"type":176,"value":337},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":170,"tag":185,"props":339,"children":340},{},[341],{"type":176,"value":342},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染 GPU 进程渲染页面。",{"type":170,"tag":178,"props":344,"children":346},{"id":345},"为什么解析-html-无法使用自上而下或自下而上的解析器",[347],{"type":176,"value":348},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":170,"tag":185,"props":350,"children":351},{},[352],{"type":176,"value":353},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":170,"tag":178,"props":355,"children":357},{"id":356},"碰到错误的标签会怎么处理",[358],{"type":176,"value":359},"碰到错误的标签会怎么处理？",{"type":170,"tag":185,"props":361,"children":362},{},[363],{"type":176,"value":364},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":170,"tag":178,"props":366,"children":368},{"id":367},"css-解析和-html-的有什么不同",[369],{"type":176,"value":370},"CSS 解析和 HTML 的有什么不同？",{"type":170,"tag":185,"props":372,"children":373},{},[374,376,382,384,388,390,394],{"type":176,"value":375},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":170,"tag":377,"props":378,"children":379},"span",{},[380],{"type":176,"value":381},"0-9",{"type":176,"value":383},"+|",{"type":170,"tag":377,"props":385,"children":386},{},[387],{"type":176,"value":381},{"type":176,"value":389},"*.",{"type":170,"tag":377,"props":391,"children":392},{},[393],{"type":176,"value":381},{"type":176,"value":395},"+，语法则用 BNF（巴科斯范式）描述。",{"type":170,"tag":185,"props":397,"children":398},{},[399],{"type":176,"value":400},"TODO:",{"type":170,"tag":402,"props":403,"children":404},"ul",{},[405,416],{"type":170,"tag":276,"props":406,"children":407},{},[408],{"type":170,"tag":409,"props":410,"children":414},"a",{"href":411,"rel":412},"https://zhuanlan.zhihu.com/p/31311515",[413],"nofollow",[415],{"type":176,"value":411},{"type":170,"tag":276,"props":417,"children":418},{},[419],{"type":170,"tag":409,"props":420,"children":423},{"href":421,"rel":422},"https://zhuanlan.zhihu.com/p/358518402",[413],[424],{"type":176,"value":421},{"type":170,"tag":178,"props":426,"children":428},{"id":427},"构建渲染树时用了什么优化策略",[429],{"type":176,"value":430},"构建渲染树时用了什么优化策略？",{"type":170,"tag":185,"props":432,"children":433},{},[434],{"type":176,"value":435},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":170,"tag":185,"props":437,"children":438},{},[439],{"type":176,"value":440},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":170,"tag":185,"props":442,"children":443},{},[444,446,452],{"type":176,"value":445},"Firefox 使用了",{"type":170,"tag":447,"props":448,"children":449},"strong",{},[450],{"type":176,"value":451},"规则树",{"type":176,"value":453},"这一方案。TODO",{"type":170,"tag":185,"props":455,"children":456},{},[457],{"type":170,"tag":189,"props":458,"children":460},{"alt":451,"src":459},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":170,"tag":171,"props":462,"children":464},{"id":463},"渲染",[465],{"type":176,"value":463},{"type":170,"tag":178,"props":467,"children":469},{"id":468},"如何避免重绘与回流",[470],{"type":176,"value":471},"如何避免重绘与回流？",{"type":170,"tag":185,"props":473,"children":474},{},[475],{"type":176,"value":476},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":170,"tag":185,"props":478,"children":479},{},[480],{"type":176,"value":481},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":170,"tag":178,"props":483,"children":485},{"id":484},"domcontentloaded-和-onload-事件先后顺序是",[486],{"type":176,"value":487},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":170,"tag":185,"props":489,"children":490},{},[491],{"type":176,"value":492},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":170,"tag":178,"props":494,"children":496},{"id":495},"复合composite是什么",[497],{"type":176,"value":498},"复合（Composite）是什么？",{"type":170,"tag":185,"props":500,"children":501},{},[502],{"type":176,"value":503},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":170,"tag":185,"props":505,"children":506},{},[507],{"type":170,"tag":189,"props":508,"children":511},{"alt":509,"src":510},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":170,"tag":178,"props":513,"children":515},{"id":514},"图层是什么",[516],{"type":176,"value":517},"图层是什么？",{"type":170,"tag":185,"props":519,"children":520},{},[521],{"type":176,"value":522},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":170,"tag":178,"props":524,"children":526},{"id":525},"浏览器硬件加速是指什么",[527],{"type":176,"value":528},"浏览器硬件加速是指什么？",{"type":170,"tag":185,"props":530,"children":531},{},[532],{"type":176,"value":533},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":170,"tag":185,"props":535,"children":536},{},[537,539],{"type":176,"value":538},"见：",{"type":170,"tag":409,"props":540,"children":543},{"href":541,"rel":542},"https://zhuanlan.zhihu.com/p/404656386",[413],[544],{"type":176,"value":545},"搞懂 GPU 和 CSS 硬件加速",{"type":170,"tag":171,"props":547,"children":549},{"id":548},"浏览器操作",[550],{"type":176,"value":548},{"type":170,"tag":178,"props":552,"children":554},{"id":553},"从输入-url-到页面显示的过程",[555],{"type":176,"value":556},"从输入 URL 到页面显示的过程？",{"type":170,"tag":272,"props":558,"children":559},{},[560,565,570,575,585,590,595,600,610],{"type":170,"tag":276,"props":561,"children":562},{},[563],{"type":176,"value":564},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":170,"tag":276,"props":566,"children":567},{},[568],{"type":176,"value":569},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":170,"tag":276,"props":571,"children":572},{},[573],{"type":176,"value":574},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":170,"tag":276,"props":576,"children":577},{},[578,580],{"type":176,"value":579},"如果是请求 CDN 中的资源，见：",{"type":170,"tag":409,"props":581,"children":583},{"href":582},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[584],{"type":176,"value":270},{"type":170,"tag":276,"props":586,"children":587},{},[588],{"type":176,"value":589},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":170,"tag":276,"props":591,"children":592},{},[593],{"type":176,"value":594},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":170,"tag":276,"props":596,"children":597},{},[598],{"type":176,"value":599},"浏览器根据响应，缓存资源。",{"type":170,"tag":276,"props":601,"children":602},{},[603,605],{"type":176,"value":604},"渲染进程开始渲染，见：",{"type":170,"tag":409,"props":606,"children":608},{"href":607},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[609],{"type":176,"value":322},{"type":170,"tag":276,"props":611,"children":612},{},[613],{"type":176,"value":614},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":170,"tag":178,"props":616,"children":618},{"id":617},"简单介绍一下浏览器的事件捕获机制",[619],{"type":176,"value":620},"简单介绍一下浏览器的事件捕获机制？",{"type":170,"tag":185,"props":622,"children":623},{},[624],{"type":176,"value":625},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":170,"tag":185,"props":627,"children":628},{},[629],{"type":170,"tag":189,"props":630,"children":633},{"alt":631,"src":632},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":170,"tag":178,"props":635,"children":637},{"id":636},"为什么-passive-true-能改善滚动性能",[638],{"type":176,"value":639},"为什么 passive true 能改善滚动性能？",{"type":170,"tag":185,"props":641,"children":642},{},[643],{"type":176,"value":644},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":170,"tag":185,"props":646,"children":647},{},[648],{"type":176,"value":649},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":170,"tag":178,"props":651,"children":653},{"id":652},"bfcache-是如何运作的",[654],{"type":176,"value":655},"BFCache 是如何运作的？",{"type":170,"tag":185,"props":657,"children":658},{},[659,666],{"type":170,"tag":409,"props":660,"children":663},{"href":661,"rel":662},"https://www.youtube.com/watch?v=cuPsdRckkF0",[413],[664],{"type":176,"value":665},"BFCache（Back/Forward Cache）",{"type":176,"value":667}," 是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":170,"tag":185,"props":669,"children":670},{},[671],{"type":176,"value":672},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":170,"tag":185,"props":674,"children":675},{},[676,677],{"type":176,"value":538},{"type":170,"tag":409,"props":678,"children":681},{"href":679,"rel":680},"https://web.dev/bfcache",[413],[682],{"type":176,"value":683},"BFCache",{"type":170,"tag":178,"props":685,"children":687},{"id":686},"浏览器怎么跨页面通信",[688],{"type":176,"value":689},"浏览器怎么跨页面通信？",{"type":170,"tag":185,"props":691,"children":692},{},[693],{"type":176,"value":694},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":170,"tag":185,"props":696,"children":697},{},[698,699],{"type":176,"value":538},{"type":170,"tag":409,"props":700,"children":703},{"href":701,"rel":702},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[413],[704],{"type":176,"value":705},"Broadcast Channel",{"type":170,"tag":171,"props":707,"children":709},{"id":708},"dev-tools",[710],{"type":176,"value":711},"Dev Tools",{"type":170,"tag":178,"props":713,"children":715},{"id":714},"代码覆盖率怎么看",[716],{"type":176,"value":717},"代码覆盖率怎么看？",{"type":170,"tag":185,"props":719,"children":720},{},[721],{"type":176,"value":722},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":170,"tag":185,"props":724,"children":725},{},[726],{"type":170,"tag":189,"props":727,"children":730},{"alt":728,"src":729},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":170,"tag":171,"props":732,"children":734},{"id":733},"api",[735],{"type":176,"value":736},"API",{"type":170,"tag":178,"props":738,"children":740},{"id":739},"eventsource",[741],{"type":176,"value":742},"EventSource",{"type":170,"tag":185,"props":744,"children":745},{},[746],{"type":176,"value":747},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":170,"tag":185,"props":749,"children":750},{},[751,752],{"type":176,"value":538},{"type":170,"tag":409,"props":753,"children":756},{"href":754,"rel":755},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[413],[757],{"type":176,"value":758},"Event Source API Test",{"type":170,"tag":171,"props":760,"children":762},{"id":761},"todo",[763],{"type":176,"value":764},"TODO",{"type":170,"tag":402,"props":766,"children":767},{},[768,778,788,798,808,820,832,842,852,862,872],{"type":170,"tag":276,"props":769,"children":770},{},[771],{"type":170,"tag":409,"props":772,"children":775},{"href":773,"rel":774},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[413],[776],{"type":176,"value":777},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":170,"tag":276,"props":779,"children":780},{},[781],{"type":170,"tag":409,"props":782,"children":785},{"href":783,"rel":784},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[413],[786],{"type":176,"value":787},"HTML SPEC",{"type":170,"tag":276,"props":789,"children":790},{},[791],{"type":170,"tag":409,"props":792,"children":795},{"href":793,"rel":794},"https://www.w3.org/TR/selectors-3/#grammar",[413],[796],{"type":176,"value":797},"CSS Selectors Level 3",{"type":170,"tag":276,"props":799,"children":800},{},[801],{"type":170,"tag":409,"props":802,"children":805},{"href":803,"rel":804},"https://developer.chrome.com/blog/inside-browser-part1/",[413],[806],{"type":176,"value":807},"Inside look at modern web browser (part 1)",{"type":170,"tag":276,"props":809,"children":810},{},[811,818],{"type":170,"tag":409,"props":812,"children":815},{"href":813,"rel":814},"https://zhuanlan.zhihu.com/p/47407398",[413],[816],{"type":176,"value":817},"图解浏览器的基本工作原理",{"type":176,"value":819},"，现代浏览器内部原理系列的中文翻译其一。",{"type":170,"tag":276,"props":821,"children":822},{},[823,830],{"type":170,"tag":409,"props":824,"children":827},{"href":825,"rel":826},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[413],[828],{"type":176,"value":829},"浏览器地址栏中输入 URL 到页面显示，浏览器到底发生了什么？",{"type":176,"value":831},"，综合笔记。",{"type":170,"tag":276,"props":833,"children":834},{},[835],{"type":170,"tag":409,"props":836,"children":839},{"href":837,"rel":838},"https://juejin.im/post/59e85eebf265da430d571f89",[413],[840],{"type":176,"value":841},"这一次，彻底弄懂 JavaScript 执行机制",{"type":170,"tag":276,"props":843,"children":844},{},[845],{"type":170,"tag":409,"props":846,"children":849},{"href":847,"rel":848},"https://javascript.ruanyifeng.com/oop/basic.html",[413],[850],{"type":176,"value":851},"构造函数与 new 命令",{"type":170,"tag":276,"props":853,"children":854},{},[855],{"type":170,"tag":409,"props":856,"children":859},{"href":857,"rel":858},"http://newhtml.net/v8-garbage-collection/",[413],[860],{"type":176,"value":861},"V8 之旅：垃圾回收器",{"type":170,"tag":276,"props":863,"children":864},{},[865],{"type":170,"tag":409,"props":866,"children":869},{"href":867,"rel":868},"https://v8.dev/blog/concurrent-marking",[413],[870],{"type":176,"value":871},"Concurrent marking in V8",{"type":170,"tag":276,"props":873,"children":874},{},[875],{"type":170,"tag":409,"props":876,"children":879},{"href":877,"rel":878},"https://juejin.im/post/59fbdb46f265da4321536565",[413],[880],{"type":176,"value":881},"内存分析与内存泄漏定位",{"title":163,"searchDepth":883,"depth":883,"links":884},2,[885,886,887,888,889,890,891,892],{"id":173,"depth":883,"text":173},{"id":262,"depth":883,"text":262},{"id":303,"depth":883,"text":303},{"id":463,"depth":883,"text":463},{"id":548,"depth":883,"text":548},{"id":708,"depth":883,"text":711},{"id":733,"depth":883,"text":736},{"id":761,"depth":883,"text":764},"markdown","content:6.maps:_web:browser:principle.md","content","6.maps/_web/browser/principle.md","6.maps/_web/browser/principle","md",[900,904],{"_path":901,"title":902,"description":903},"/maps/_web/browser/new","浏览器新特性","Web.dev 月刊精选，追踪和总结主流浏览器的最新特性更新与时动态。",{"_path":905,"title":906,"description":907},"/maps/_web/browser/router","路由技术","Web 前端路由技术详解，包含 Hash 路由、History 路由的实现原理与最佳实践。",1748756320411]