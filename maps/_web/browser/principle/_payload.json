[{"data":1,"prerenderedAt":905},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/principle":155,"/maps/_web/browser/principle-surround":896},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":890,"_id":891,"_source":892,"_file":893,"_stem":894,"_extension":895},"/maps/_web/browser/principle","browser",false,true,"","浏览器相关","浏览器相关问题",{"type":164,"children":165,"toc":879},"root",[166,174,181,191,197,202,208,213,219,224,230,235,241,246,252,257,262,268,298,303,309,314,320,325,330,335,340,346,351,357,362,368,393,398,422,428,433,438,451,458,463,469,474,479,485,490,496,501,509,515,520,526,531,543,548,554,612,618,623,631,637,642,647,653,665,670,681,687,692,703,709,715,720,728,734,740,745,756,762],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"组成原理",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":178},"h4",{"id":177},"浏览器有哪些组件-浏览器架构",[179],{"type":173,"value":180},"浏览器有哪些组件 / 浏览器架构？",{"type":167,"tag":182,"props":183,"children":184},"p",{},[185],{"type":167,"tag":186,"props":187,"children":190},"img",{"alt":188,"src":189},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":167,"tag":175,"props":192,"children":194},{"id":193},"进程和线程的区别是什么",[195],{"type":173,"value":196},"进程和线程的区别是什么？",{"type":167,"tag":182,"props":198,"children":199},{},[200],{"type":173,"value":201},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":167,"tag":175,"props":203,"children":205},{"id":204},"浏览器的进程线程结构是怎么样的",[206],{"type":173,"value":207},"浏览器的进程线程结构是怎么样的？",{"type":167,"tag":182,"props":209,"children":210},{},[211],{"type":173,"value":212},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和 GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":167,"tag":175,"props":214,"children":216},{"id":215},"每个页面都有一个对应的渲染进程吗",[217],{"type":173,"value":218},"每个页面都有一个对应的渲染进程吗？",{"type":167,"tag":182,"props":220,"children":221},{},[222],{"type":173,"value":223},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":167,"tag":175,"props":225,"children":227},{"id":226},"service-worker-是如何工作的",[228],{"type":173,"value":229},"Service Worker 是如何工作的？",{"type":167,"tag":182,"props":231,"children":232},{},[233],{"type":173,"value":234},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":167,"tag":175,"props":236,"children":238},{"id":237},"为什么渲染和脚本执行不可以同时进行",[239],{"type":173,"value":240},"为什么渲染和脚本执行不可以同时进行？",{"type":167,"tag":182,"props":242,"children":243},{},[244],{"type":173,"value":245},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":167,"tag":175,"props":247,"children":249},{"id":248},"webworker-和-sharedworker-的资源是谁来管理的",[250],{"type":173,"value":251},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":167,"tag":182,"props":253,"children":254},{},[255],{"type":173,"value":256},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":167,"tag":168,"props":258,"children":260},{"id":259},"网络请求",[261],{"type":173,"value":259},{"type":167,"tag":175,"props":263,"children":265},{"id":264},"请求-cdn-中的资源的流程是怎样的",[266],{"type":173,"value":267},"请求 CDN 中的资源的流程是怎样的？",{"type":167,"tag":269,"props":270,"children":271},"ol",{},[272,278,283,288,293],{"type":167,"tag":273,"props":274,"children":275},"li",{},[276],{"type":173,"value":277},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":167,"tag":273,"props":279,"children":280},{},[281],{"type":173,"value":282},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":167,"tag":273,"props":284,"children":285},{},[286],{"type":173,"value":287},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":167,"tag":273,"props":289,"children":290},{},[291],{"type":173,"value":292},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":167,"tag":273,"props":294,"children":295},{},[296],{"type":173,"value":297},"发请求，根据各级缓存服务器查找对应资源",{"type":167,"tag":168,"props":299,"children":301},{"id":300},"解析",[302],{"type":173,"value":300},{"type":167,"tag":175,"props":304,"children":306},{"id":305},"浏览器怎么根据请求的文件类型来进一步处理",[307],{"type":173,"value":308},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":167,"tag":182,"props":310,"children":311},{},[312],{"type":173,"value":313},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":167,"tag":175,"props":315,"children":317},{"id":316},"渲染进程的大致工作流程是怎样的",[318],{"type":173,"value":319},"渲染进程的大致工作流程是怎样的？",{"type":167,"tag":182,"props":321,"children":322},{},[323],{"type":173,"value":324},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":167,"tag":182,"props":326,"children":327},{},[328],{"type":173,"value":329},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":167,"tag":182,"props":331,"children":332},{},[333],{"type":173,"value":334},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":167,"tag":182,"props":336,"children":337},{},[338],{"type":173,"value":339},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染 GPU 进程渲染页面。",{"type":167,"tag":175,"props":341,"children":343},{"id":342},"为什么解析-html-无法使用自上而下或自下而上的解析器",[344],{"type":173,"value":345},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":167,"tag":182,"props":347,"children":348},{},[349],{"type":173,"value":350},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":167,"tag":175,"props":352,"children":354},{"id":353},"碰到错误的标签会怎么处理",[355],{"type":173,"value":356},"碰到错误的标签会怎么处理？",{"type":167,"tag":182,"props":358,"children":359},{},[360],{"type":173,"value":361},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":167,"tag":175,"props":363,"children":365},{"id":364},"css-解析和-html-的有什么不同",[366],{"type":173,"value":367},"CSS 解析和 HTML 的有什么不同？",{"type":167,"tag":182,"props":369,"children":370},{},[371,373,379,381,385,387,391],{"type":173,"value":372},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":167,"tag":374,"props":375,"children":376},"span",{},[377],{"type":173,"value":378},"0-9",{"type":173,"value":380},"+|",{"type":167,"tag":374,"props":382,"children":383},{},[384],{"type":173,"value":378},{"type":173,"value":386},"*.",{"type":167,"tag":374,"props":388,"children":389},{},[390],{"type":173,"value":378},{"type":173,"value":392},"+，语法则用 BNF（巴科斯范式）描述。",{"type":167,"tag":182,"props":394,"children":395},{},[396],{"type":173,"value":397},"TODO:",{"type":167,"tag":399,"props":400,"children":401},"ul",{},[402,413],{"type":167,"tag":273,"props":403,"children":404},{},[405],{"type":167,"tag":406,"props":407,"children":411},"a",{"href":408,"rel":409},"https://zhuanlan.zhihu.com/p/31311515",[410],"nofollow",[412],{"type":173,"value":408},{"type":167,"tag":273,"props":414,"children":415},{},[416],{"type":167,"tag":406,"props":417,"children":420},{"href":418,"rel":419},"https://zhuanlan.zhihu.com/p/358518402",[410],[421],{"type":173,"value":418},{"type":167,"tag":175,"props":423,"children":425},{"id":424},"构建渲染树时用了什么优化策略",[426],{"type":173,"value":427},"构建渲染树时用了什么优化策略？",{"type":167,"tag":182,"props":429,"children":430},{},[431],{"type":173,"value":432},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":167,"tag":182,"props":434,"children":435},{},[436],{"type":173,"value":437},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":167,"tag":182,"props":439,"children":440},{},[441,443,449],{"type":173,"value":442},"Firefox 使用了",{"type":167,"tag":444,"props":445,"children":446},"strong",{},[447],{"type":173,"value":448},"规则树",{"type":173,"value":450},"这一方案。TODO",{"type":167,"tag":182,"props":452,"children":453},{},[454],{"type":167,"tag":186,"props":455,"children":457},{"alt":448,"src":456},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":167,"tag":168,"props":459,"children":461},{"id":460},"渲染",[462],{"type":173,"value":460},{"type":167,"tag":175,"props":464,"children":466},{"id":465},"如何避免重绘与回流",[467],{"type":173,"value":468},"如何避免重绘与回流？",{"type":167,"tag":182,"props":470,"children":471},{},[472],{"type":173,"value":473},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":167,"tag":182,"props":475,"children":476},{},[477],{"type":173,"value":478},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":167,"tag":175,"props":480,"children":482},{"id":481},"domcontentloaded-和-onload-事件先后顺序是",[483],{"type":173,"value":484},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":167,"tag":182,"props":486,"children":487},{},[488],{"type":173,"value":489},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":167,"tag":175,"props":491,"children":493},{"id":492},"复合composite是什么",[494],{"type":173,"value":495},"复合（Composite）是什么？",{"type":167,"tag":182,"props":497,"children":498},{},[499],{"type":173,"value":500},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":167,"tag":182,"props":502,"children":503},{},[504],{"type":167,"tag":186,"props":505,"children":508},{"alt":506,"src":507},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":167,"tag":175,"props":510,"children":512},{"id":511},"图层是什么",[513],{"type":173,"value":514},"图层是什么？",{"type":167,"tag":182,"props":516,"children":517},{},[518],{"type":173,"value":519},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":167,"tag":175,"props":521,"children":523},{"id":522},"浏览器硬件加速是指什么",[524],{"type":173,"value":525},"浏览器硬件加速是指什么？",{"type":167,"tag":182,"props":527,"children":528},{},[529],{"type":173,"value":530},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":167,"tag":182,"props":532,"children":533},{},[534,536],{"type":173,"value":535},"见：",{"type":167,"tag":406,"props":537,"children":540},{"href":538,"rel":539},"https://zhuanlan.zhihu.com/p/404656386",[410],[541],{"type":173,"value":542},"搞懂 GPU 和 CSS 硬件加速",{"type":167,"tag":168,"props":544,"children":546},{"id":545},"浏览器操作",[547],{"type":173,"value":545},{"type":167,"tag":175,"props":549,"children":551},{"id":550},"从输入-url-到页面显示的过程",[552],{"type":173,"value":553},"从输入 URL 到页面显示的过程？",{"type":167,"tag":269,"props":555,"children":556},{},[557,562,567,572,582,587,592,597,607],{"type":167,"tag":273,"props":558,"children":559},{},[560],{"type":173,"value":561},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":167,"tag":273,"props":563,"children":564},{},[565],{"type":173,"value":566},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":167,"tag":273,"props":568,"children":569},{},[570],{"type":173,"value":571},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":167,"tag":273,"props":573,"children":574},{},[575,577],{"type":173,"value":576},"如果是请求 CDN 中的资源，见：",{"type":167,"tag":406,"props":578,"children":580},{"href":579},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[581],{"type":173,"value":267},{"type":167,"tag":273,"props":583,"children":584},{},[585],{"type":173,"value":586},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":167,"tag":273,"props":588,"children":589},{},[590],{"type":173,"value":591},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":167,"tag":273,"props":593,"children":594},{},[595],{"type":173,"value":596},"浏览器根据响应，缓存资源。",{"type":167,"tag":273,"props":598,"children":599},{},[600,602],{"type":173,"value":601},"渲染进程开始渲染，见：",{"type":167,"tag":406,"props":603,"children":605},{"href":604},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[606],{"type":173,"value":319},{"type":167,"tag":273,"props":608,"children":609},{},[610],{"type":173,"value":611},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":167,"tag":175,"props":613,"children":615},{"id":614},"简单介绍一下浏览器的事件捕获机制",[616],{"type":173,"value":617},"简单介绍一下浏览器的事件捕获机制？",{"type":167,"tag":182,"props":619,"children":620},{},[621],{"type":173,"value":622},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":167,"tag":182,"props":624,"children":625},{},[626],{"type":167,"tag":186,"props":627,"children":630},{"alt":628,"src":629},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":167,"tag":175,"props":632,"children":634},{"id":633},"为什么-passive-true-能改善滚动性能",[635],{"type":173,"value":636},"为什么 passive true 能改善滚动性能？",{"type":167,"tag":182,"props":638,"children":639},{},[640],{"type":173,"value":641},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":167,"tag":182,"props":643,"children":644},{},[645],{"type":173,"value":646},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":167,"tag":175,"props":648,"children":650},{"id":649},"bfcache-是如何运作的",[651],{"type":173,"value":652},"BFCache 是如何运作的？",{"type":167,"tag":182,"props":654,"children":655},{},[656,663],{"type":167,"tag":406,"props":657,"children":660},{"href":658,"rel":659},"https://www.youtube.com/watch?v=cuPsdRckkF0",[410],[661],{"type":173,"value":662},"BFCache（Back/Forward Cache）",{"type":173,"value":664}," 是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":167,"tag":182,"props":666,"children":667},{},[668],{"type":173,"value":669},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":167,"tag":182,"props":671,"children":672},{},[673,674],{"type":173,"value":535},{"type":167,"tag":406,"props":675,"children":678},{"href":676,"rel":677},"https://web.dev/bfcache",[410],[679],{"type":173,"value":680},"BFCache",{"type":167,"tag":175,"props":682,"children":684},{"id":683},"浏览器怎么跨页面通信",[685],{"type":173,"value":686},"浏览器怎么跨页面通信？",{"type":167,"tag":182,"props":688,"children":689},{},[690],{"type":173,"value":691},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":167,"tag":182,"props":693,"children":694},{},[695,696],{"type":173,"value":535},{"type":167,"tag":406,"props":697,"children":700},{"href":698,"rel":699},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[410],[701],{"type":173,"value":702},"Broadcast Channel",{"type":167,"tag":168,"props":704,"children":706},{"id":705},"dev-tools",[707],{"type":173,"value":708},"Dev Tools",{"type":167,"tag":175,"props":710,"children":712},{"id":711},"代码覆盖率怎么看",[713],{"type":173,"value":714},"代码覆盖率怎么看？",{"type":167,"tag":182,"props":716,"children":717},{},[718],{"type":173,"value":719},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":167,"tag":182,"props":721,"children":722},{},[723],{"type":167,"tag":186,"props":724,"children":727},{"alt":725,"src":726},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":167,"tag":168,"props":729,"children":731},{"id":730},"api",[732],{"type":173,"value":733},"API",{"type":167,"tag":175,"props":735,"children":737},{"id":736},"eventsource",[738],{"type":173,"value":739},"EventSource",{"type":167,"tag":182,"props":741,"children":742},{},[743],{"type":173,"value":744},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":167,"tag":182,"props":746,"children":747},{},[748,749],{"type":173,"value":535},{"type":167,"tag":406,"props":750,"children":753},{"href":751,"rel":752},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[410],[754],{"type":173,"value":755},"Event Source API Test",{"type":167,"tag":168,"props":757,"children":759},{"id":758},"todo",[760],{"type":173,"value":761},"TODO",{"type":167,"tag":399,"props":763,"children":764},{},[765,775,785,795,805,817,829,839,849,859,869],{"type":167,"tag":273,"props":766,"children":767},{},[768],{"type":167,"tag":406,"props":769,"children":772},{"href":770,"rel":771},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[410],[773],{"type":173,"value":774},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":167,"tag":273,"props":776,"children":777},{},[778],{"type":167,"tag":406,"props":779,"children":782},{"href":780,"rel":781},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[410],[783],{"type":173,"value":784},"HTML SPEC",{"type":167,"tag":273,"props":786,"children":787},{},[788],{"type":167,"tag":406,"props":789,"children":792},{"href":790,"rel":791},"https://www.w3.org/TR/selectors-3/#grammar",[410],[793],{"type":173,"value":794},"CSS Selectors Level 3",{"type":167,"tag":273,"props":796,"children":797},{},[798],{"type":167,"tag":406,"props":799,"children":802},{"href":800,"rel":801},"https://developer.chrome.com/blog/inside-browser-part1/",[410],[803],{"type":173,"value":804},"Inside look at modern web browser (part 1)",{"type":167,"tag":273,"props":806,"children":807},{},[808,815],{"type":167,"tag":406,"props":809,"children":812},{"href":810,"rel":811},"https://zhuanlan.zhihu.com/p/47407398",[410],[813],{"type":173,"value":814},"图解浏览器的基本工作原理",{"type":173,"value":816},"，现代浏览器内部原理系列的中文翻译其一。",{"type":167,"tag":273,"props":818,"children":819},{},[820,827],{"type":167,"tag":406,"props":821,"children":824},{"href":822,"rel":823},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[410],[825],{"type":173,"value":826},"浏览器地址栏中输入 URL 到页面显示，浏览器到底发生了什么？",{"type":173,"value":828},"，综合笔记。",{"type":167,"tag":273,"props":830,"children":831},{},[832],{"type":167,"tag":406,"props":833,"children":836},{"href":834,"rel":835},"https://juejin.im/post/59e85eebf265da430d571f89",[410],[837],{"type":173,"value":838},"这一次，彻底弄懂 JavaScript 执行机制",{"type":167,"tag":273,"props":840,"children":841},{},[842],{"type":167,"tag":406,"props":843,"children":846},{"href":844,"rel":845},"https://javascript.ruanyifeng.com/oop/basic.html",[410],[847],{"type":173,"value":848},"构造函数与 new 命令",{"type":167,"tag":273,"props":850,"children":851},{},[852],{"type":167,"tag":406,"props":853,"children":856},{"href":854,"rel":855},"http://newhtml.net/v8-garbage-collection/",[410],[857],{"type":173,"value":858},"V8 之旅：垃圾回收器",{"type":167,"tag":273,"props":860,"children":861},{},[862],{"type":167,"tag":406,"props":863,"children":866},{"href":864,"rel":865},"https://v8.dev/blog/concurrent-marking",[410],[867],{"type":173,"value":868},"Concurrent marking in V8",{"type":167,"tag":273,"props":870,"children":871},{},[872],{"type":167,"tag":406,"props":873,"children":876},{"href":874,"rel":875},"https://juejin.im/post/59fbdb46f265da4321536565",[410],[877],{"type":173,"value":878},"内存分析与内存泄漏定位",{"title":160,"searchDepth":880,"depth":880,"links":881},2,[882,883,884,885,886,887,888,889],{"id":170,"depth":880,"text":170},{"id":259,"depth":880,"text":259},{"id":300,"depth":880,"text":300},{"id":460,"depth":880,"text":460},{"id":545,"depth":880,"text":545},{"id":705,"depth":880,"text":708},{"id":730,"depth":880,"text":733},{"id":758,"depth":880,"text":761},"markdown","content:6.maps:_web:browser:principle.md","content","6.maps/_web/browser/principle.md","6.maps/_web/browser/principle","md",[897,901],{"_path":898,"title":899,"description":900},"/maps/_web/browser/new","浏览器新特性","Web.dev 月刊精选，追踪和总结主流浏览器的最新特性更新与时动态。",{"_path":902,"title":903,"description":904},"/maps/_web/browser/router","路由技术","Web 前端路由技术详解，包含 Hash 路由、History 路由的实现原理与最佳实践。",1742745248619]