[{"data":1,"prerenderedAt":911},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/principle":161,"/maps/_web/browser/principle-surround":902},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":896,"_id":897,"_source":898,"_file":899,"_stem":900,"_extension":901},"/maps/_web/browser/principle","browser",false,true,"","浏览器相关","浏览器相关问题",{"type":170,"children":171,"toc":885},"root",[172,180,187,197,203,208,214,219,225,230,236,241,247,252,258,263,268,274,304,309,315,320,326,331,336,341,346,352,357,363,368,374,399,404,428,434,439,444,457,464,469,475,480,485,491,496,502,507,515,521,526,532,537,549,554,560,618,624,629,637,643,648,653,659,671,676,687,693,698,709,715,721,726,734,740,746,751,762,768],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"组成原理",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":184},"h4",{"id":183},"浏览器有哪些组件-浏览器架构",[185],{"type":179,"value":186},"浏览器有哪些组件 / 浏览器架构？",{"type":173,"tag":188,"props":189,"children":190},"p",{},[191],{"type":173,"tag":192,"props":193,"children":196},"img",{"alt":194,"src":195},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":173,"tag":181,"props":198,"children":200},{"id":199},"进程和线程的区别是什么",[201],{"type":179,"value":202},"进程和线程的区别是什么？",{"type":173,"tag":188,"props":204,"children":205},{},[206],{"type":179,"value":207},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":173,"tag":181,"props":209,"children":211},{"id":210},"浏览器的进程线程结构是怎么样的",[212],{"type":179,"value":213},"浏览器的进程线程结构是怎么样的？",{"type":173,"tag":188,"props":215,"children":216},{},[217],{"type":179,"value":218},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和 GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":173,"tag":181,"props":220,"children":222},{"id":221},"每个页面都有一个对应的渲染进程吗",[223],{"type":179,"value":224},"每个页面都有一个对应的渲染进程吗？",{"type":173,"tag":188,"props":226,"children":227},{},[228],{"type":179,"value":229},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":173,"tag":181,"props":231,"children":233},{"id":232},"service-worker-是如何工作的",[234],{"type":179,"value":235},"Service Worker 是如何工作的？",{"type":173,"tag":188,"props":237,"children":238},{},[239],{"type":179,"value":240},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":173,"tag":181,"props":242,"children":244},{"id":243},"为什么渲染和脚本执行不可以同时进行",[245],{"type":179,"value":246},"为什么渲染和脚本执行不可以同时进行？",{"type":173,"tag":188,"props":248,"children":249},{},[250],{"type":179,"value":251},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":173,"tag":181,"props":253,"children":255},{"id":254},"webworker-和-sharedworker-的资源是谁来管理的",[256],{"type":179,"value":257},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":173,"tag":188,"props":259,"children":260},{},[261],{"type":179,"value":262},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":173,"tag":174,"props":264,"children":266},{"id":265},"网络请求",[267],{"type":179,"value":265},{"type":173,"tag":181,"props":269,"children":271},{"id":270},"请求-cdn-中的资源的流程是怎样的",[272],{"type":179,"value":273},"请求 CDN 中的资源的流程是怎样的？",{"type":173,"tag":275,"props":276,"children":277},"ol",{},[278,284,289,294,299],{"type":173,"tag":279,"props":280,"children":281},"li",{},[282],{"type":179,"value":283},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":173,"tag":279,"props":285,"children":286},{},[287],{"type":179,"value":288},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":173,"tag":279,"props":290,"children":291},{},[292],{"type":179,"value":293},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":173,"tag":279,"props":295,"children":296},{},[297],{"type":179,"value":298},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":173,"tag":279,"props":300,"children":301},{},[302],{"type":179,"value":303},"发请求，根据各级缓存服务器查找对应资源",{"type":173,"tag":174,"props":305,"children":307},{"id":306},"解析",[308],{"type":179,"value":306},{"type":173,"tag":181,"props":310,"children":312},{"id":311},"浏览器怎么根据请求的文件类型来进一步处理",[313],{"type":179,"value":314},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":173,"tag":188,"props":316,"children":317},{},[318],{"type":179,"value":319},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":173,"tag":181,"props":321,"children":323},{"id":322},"渲染进程的大致工作流程是怎样的",[324],{"type":179,"value":325},"渲染进程的大致工作流程是怎样的？",{"type":173,"tag":188,"props":327,"children":328},{},[329],{"type":179,"value":330},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":173,"tag":188,"props":332,"children":333},{},[334],{"type":179,"value":335},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":173,"tag":188,"props":337,"children":338},{},[339],{"type":179,"value":340},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":173,"tag":188,"props":342,"children":343},{},[344],{"type":179,"value":345},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染 GPU 进程渲染页面。",{"type":173,"tag":181,"props":347,"children":349},{"id":348},"为什么解析-html-无法使用自上而下或自下而上的解析器",[350],{"type":179,"value":351},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":173,"tag":188,"props":353,"children":354},{},[355],{"type":179,"value":356},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":173,"tag":181,"props":358,"children":360},{"id":359},"碰到错误的标签会怎么处理",[361],{"type":179,"value":362},"碰到错误的标签会怎么处理？",{"type":173,"tag":188,"props":364,"children":365},{},[366],{"type":179,"value":367},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":173,"tag":181,"props":369,"children":371},{"id":370},"css-解析和-html-的有什么不同",[372],{"type":179,"value":373},"CSS 解析和 HTML 的有什么不同？",{"type":173,"tag":188,"props":375,"children":376},{},[377,379,385,387,391,393,397],{"type":179,"value":378},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":173,"tag":380,"props":381,"children":382},"span",{},[383],{"type":179,"value":384},"0-9",{"type":179,"value":386},"+|",{"type":173,"tag":380,"props":388,"children":389},{},[390],{"type":179,"value":384},{"type":179,"value":392},"*.",{"type":173,"tag":380,"props":394,"children":395},{},[396],{"type":179,"value":384},{"type":179,"value":398},"+，语法则用 BNF（巴科斯范式）描述。",{"type":173,"tag":188,"props":400,"children":401},{},[402],{"type":179,"value":403},"TODO:",{"type":173,"tag":405,"props":406,"children":407},"ul",{},[408,419],{"type":173,"tag":279,"props":409,"children":410},{},[411],{"type":173,"tag":412,"props":413,"children":417},"a",{"href":414,"rel":415},"https://zhuanlan.zhihu.com/p/31311515",[416],"nofollow",[418],{"type":179,"value":414},{"type":173,"tag":279,"props":420,"children":421},{},[422],{"type":173,"tag":412,"props":423,"children":426},{"href":424,"rel":425},"https://zhuanlan.zhihu.com/p/358518402",[416],[427],{"type":179,"value":424},{"type":173,"tag":181,"props":429,"children":431},{"id":430},"构建渲染树时用了什么优化策略",[432],{"type":179,"value":433},"构建渲染树时用了什么优化策略？",{"type":173,"tag":188,"props":435,"children":436},{},[437],{"type":179,"value":438},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":173,"tag":188,"props":440,"children":441},{},[442],{"type":179,"value":443},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":173,"tag":188,"props":445,"children":446},{},[447,449,455],{"type":179,"value":448},"Firefox 使用了",{"type":173,"tag":450,"props":451,"children":452},"strong",{},[453],{"type":179,"value":454},"规则树",{"type":179,"value":456},"这一方案。TODO",{"type":173,"tag":188,"props":458,"children":459},{},[460],{"type":173,"tag":192,"props":461,"children":463},{"alt":454,"src":462},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":173,"tag":174,"props":465,"children":467},{"id":466},"渲染",[468],{"type":179,"value":466},{"type":173,"tag":181,"props":470,"children":472},{"id":471},"如何避免重绘与回流",[473],{"type":179,"value":474},"如何避免重绘与回流？",{"type":173,"tag":188,"props":476,"children":477},{},[478],{"type":179,"value":479},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":173,"tag":188,"props":481,"children":482},{},[483],{"type":179,"value":484},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":173,"tag":181,"props":486,"children":488},{"id":487},"domcontentloaded-和-onload-事件先后顺序是",[489],{"type":179,"value":490},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":173,"tag":188,"props":492,"children":493},{},[494],{"type":179,"value":495},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":173,"tag":181,"props":497,"children":499},{"id":498},"复合composite是什么",[500],{"type":179,"value":501},"复合（Composite）是什么？",{"type":173,"tag":188,"props":503,"children":504},{},[505],{"type":179,"value":506},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":173,"tag":188,"props":508,"children":509},{},[510],{"type":173,"tag":192,"props":511,"children":514},{"alt":512,"src":513},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":173,"tag":181,"props":516,"children":518},{"id":517},"图层是什么",[519],{"type":179,"value":520},"图层是什么？",{"type":173,"tag":188,"props":522,"children":523},{},[524],{"type":179,"value":525},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":173,"tag":181,"props":527,"children":529},{"id":528},"浏览器硬件加速是指什么",[530],{"type":179,"value":531},"浏览器硬件加速是指什么？",{"type":173,"tag":188,"props":533,"children":534},{},[535],{"type":179,"value":536},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":173,"tag":188,"props":538,"children":539},{},[540,542],{"type":179,"value":541},"见：",{"type":173,"tag":412,"props":543,"children":546},{"href":544,"rel":545},"https://zhuanlan.zhihu.com/p/404656386",[416],[547],{"type":179,"value":548},"搞懂 GPU 和 CSS 硬件加速",{"type":173,"tag":174,"props":550,"children":552},{"id":551},"浏览器操作",[553],{"type":179,"value":551},{"type":173,"tag":181,"props":555,"children":557},{"id":556},"从输入-url-到页面显示的过程",[558],{"type":179,"value":559},"从输入 URL 到页面显示的过程？",{"type":173,"tag":275,"props":561,"children":562},{},[563,568,573,578,588,593,598,603,613],{"type":173,"tag":279,"props":564,"children":565},{},[566],{"type":179,"value":567},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":173,"tag":279,"props":569,"children":570},{},[571],{"type":179,"value":572},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":173,"tag":279,"props":574,"children":575},{},[576],{"type":179,"value":577},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":173,"tag":279,"props":579,"children":580},{},[581,583],{"type":179,"value":582},"如果是请求 CDN 中的资源，见：",{"type":173,"tag":412,"props":584,"children":586},{"href":585},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[587],{"type":179,"value":273},{"type":173,"tag":279,"props":589,"children":590},{},[591],{"type":179,"value":592},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":173,"tag":279,"props":594,"children":595},{},[596],{"type":179,"value":597},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":173,"tag":279,"props":599,"children":600},{},[601],{"type":179,"value":602},"浏览器根据响应，缓存资源。",{"type":173,"tag":279,"props":604,"children":605},{},[606,608],{"type":179,"value":607},"渲染进程开始渲染，见：",{"type":173,"tag":412,"props":609,"children":611},{"href":610},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[612],{"type":179,"value":325},{"type":173,"tag":279,"props":614,"children":615},{},[616],{"type":179,"value":617},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":173,"tag":181,"props":619,"children":621},{"id":620},"简单介绍一下浏览器的事件捕获机制",[622],{"type":179,"value":623},"简单介绍一下浏览器的事件捕获机制？",{"type":173,"tag":188,"props":625,"children":626},{},[627],{"type":179,"value":628},"浏览器的事件传播分为三个阶段：Capturing、Targeting、Bubbling，顺序上来说是先从根元素一直向目标元素传播，然后再由目标元素向根元素传播。事件捕获默认发生在冒泡阶段，但可以在事件监听时使用 useCapture 参数使回调在 Capture 阶段触发。",{"type":173,"tag":188,"props":630,"children":631},{},[632],{"type":173,"tag":192,"props":633,"children":636},{"alt":634,"src":635},"event processing in browser","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/event-capture.svg?w=60",[],{"type":173,"tag":181,"props":638,"children":640},{"id":639},"为什么-passive-true-能改善滚动性能",[641],{"type":179,"value":642},"为什么 passive true 能改善滚动性能？",{"type":173,"tag":188,"props":644,"children":645},{},[646],{"type":179,"value":647},"绑定了事件的 DOM 相关区域会在合成器线程中被标记为 Non-fast Scrollable Region，滚动时，需要等待可能的 JS 执行（比如说 e.preventDefault），将渲染树复合分割为磁贴后，交由栅格线程渲染，最后由 GPU 绘制到界面上。当一个事件标记了 passive: true 之后，合成器线程知悉 JS 执行不会改变滚动事件，所以可以直接走复合、栅格化、渲染的流程。",{"type":173,"tag":188,"props":649,"children":650},{},[651],{"type":179,"value":652},"passive 在 document 绑定 touchmove 或 touchstart 时默认是开启的，但是如果内部使用了 preventDefault，则会使优化失效，在控制台也会报警告。",{"type":173,"tag":181,"props":654,"children":656},{"id":655},"bfcache-是如何运作的",[657],{"type":179,"value":658},"BFCache 是如何运作的？",{"type":173,"tag":188,"props":660,"children":661},{},[662,669],{"type":173,"tag":412,"props":663,"children":666},{"href":664,"rel":665},"https://www.youtube.com/watch?v=cuPsdRckkF0",[416],[667],{"type":179,"value":668},"BFCache（Back/Forward Cache）",{"type":179,"value":670}," 是一种缓存策略。浏览器会把当前页面的快照（包括 JS Heap 快照）缓存到内存中，以便用户从当前页面导航到其它页面短暂浏览后又返回原先页面时，迅速地展现页面。",{"type":173,"tag":188,"props":672,"children":673},{},[674],{"type":179,"value":675},"为了使 BFCache 生效，不能使用 unload、beforeunload 事件，不能指明 window.open，此外，在离开前面前需要连接是关闭状态的（WS、fetch 等）。",{"type":173,"tag":188,"props":677,"children":678},{},[679,680],{"type":179,"value":541},{"type":173,"tag":412,"props":681,"children":684},{"href":682,"rel":683},"https://web.dev/bfcache",[416],[685],{"type":179,"value":686},"BFCache",{"type":173,"tag":181,"props":688,"children":690},{"id":689},"浏览器怎么跨页面通信",[691],{"type":179,"value":692},"浏览器怎么跨页面通信？",{"type":173,"tag":188,"props":694,"children":695},{},[696],{"type":179,"value":697},"考虑兼容性的话需要使用服务器中转，否则使用 Broadcast Channel 非常合适。Broadcast Channel 可以在 Workers 中使用，它能实现同源 URL 下多窗口、多标签或 iFrames 中的通信。",{"type":173,"tag":188,"props":699,"children":700},{},[701,702],{"type":179,"value":541},{"type":173,"tag":412,"props":703,"children":706},{"href":704,"rel":705},"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",[416],[707],{"type":179,"value":708},"Broadcast Channel",{"type":173,"tag":174,"props":710,"children":712},{"id":711},"dev-tools",[713],{"type":179,"value":714},"Dev Tools",{"type":173,"tag":181,"props":716,"children":718},{"id":717},"代码覆盖率怎么看",[719],{"type":179,"value":720},"代码覆盖率怎么看？",{"type":173,"tag":188,"props":722,"children":723},{},[724],{"type":179,"value":725},"通过代码覆盖率选项查看某个页面或某流程中，执行到的 JS 和 CSS 代码的百分比。可以用来优化首屏等场景。",{"type":173,"tag":188,"props":727,"children":728},{},[729],{"type":173,"tag":192,"props":730,"children":733},{"alt":731,"src":732},"Code Coverage","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220704211729.png",[],{"type":173,"tag":174,"props":735,"children":737},{"id":736},"api",[738],{"type":179,"value":739},"API",{"type":173,"tag":181,"props":741,"children":743},{"id":742},"eventsource",[744],{"type":179,"value":745},"EventSource",{"type":173,"tag":188,"props":747,"children":748},{},[749],{"type":179,"value":750},"EventSource 是一个基于 HTTP 协议，能在浏览器端自动重连的服务端推送协议。常用于股票、天气等服务端需要实时向客户端推送消息的场景。",{"type":173,"tag":188,"props":752,"children":753},{},[754,755],{"type":179,"value":541},{"type":173,"tag":412,"props":756,"children":759},{"href":757,"rel":758},"https://github.com/Lionad-Morotar/read-source-code/blob/6e866c893fc1edb3fa2da1979af0c1b252f81da5/api/event-source/index.html",[416],[760],{"type":179,"value":761},"Event Source API Test",{"type":173,"tag":174,"props":763,"children":765},{"id":764},"todo",[766],{"type":179,"value":767},"TODO",{"type":173,"tag":405,"props":769,"children":770},{},[771,781,791,801,811,823,835,845,855,865,875],{"type":173,"tag":279,"props":772,"children":773},{},[774],{"type":173,"tag":412,"props":775,"children":778},{"href":776,"rel":777},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[416],[779],{"type":179,"value":780},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":173,"tag":279,"props":782,"children":783},{},[784],{"type":173,"tag":412,"props":785,"children":788},{"href":786,"rel":787},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[416],[789],{"type":179,"value":790},"HTML SPEC",{"type":173,"tag":279,"props":792,"children":793},{},[794],{"type":173,"tag":412,"props":795,"children":798},{"href":796,"rel":797},"https://www.w3.org/TR/selectors-3/#grammar",[416],[799],{"type":179,"value":800},"CSS Selectors Level 3",{"type":173,"tag":279,"props":802,"children":803},{},[804],{"type":173,"tag":412,"props":805,"children":808},{"href":806,"rel":807},"https://developer.chrome.com/blog/inside-browser-part1/",[416],[809],{"type":179,"value":810},"Inside look at modern web browser (part 1)",{"type":173,"tag":279,"props":812,"children":813},{},[814,821],{"type":173,"tag":412,"props":815,"children":818},{"href":816,"rel":817},"https://zhuanlan.zhihu.com/p/47407398",[416],[819],{"type":179,"value":820},"图解浏览器的基本工作原理",{"type":179,"value":822},"，现代浏览器内部原理系列的中文翻译其一。",{"type":173,"tag":279,"props":824,"children":825},{},[826,833],{"type":173,"tag":412,"props":827,"children":830},{"href":828,"rel":829},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[416],[831],{"type":179,"value":832},"浏览器地址栏中输入 URL 到页面显示，浏览器到底发生了什么？",{"type":179,"value":834},"，综合笔记。",{"type":173,"tag":279,"props":836,"children":837},{},[838],{"type":173,"tag":412,"props":839,"children":842},{"href":840,"rel":841},"https://juejin.im/post/59e85eebf265da430d571f89",[416],[843],{"type":179,"value":844},"这一次，彻底弄懂 JavaScript 执行机制",{"type":173,"tag":279,"props":846,"children":847},{},[848],{"type":173,"tag":412,"props":849,"children":852},{"href":850,"rel":851},"https://javascript.ruanyifeng.com/oop/basic.html",[416],[853],{"type":179,"value":854},"构造函数与 new 命令",{"type":173,"tag":279,"props":856,"children":857},{},[858],{"type":173,"tag":412,"props":859,"children":862},{"href":860,"rel":861},"http://newhtml.net/v8-garbage-collection/",[416],[863],{"type":179,"value":864},"V8 之旅：垃圾回收器",{"type":173,"tag":279,"props":866,"children":867},{},[868],{"type":173,"tag":412,"props":869,"children":872},{"href":870,"rel":871},"https://v8.dev/blog/concurrent-marking",[416],[873],{"type":179,"value":874},"Concurrent marking in V8",{"type":173,"tag":279,"props":876,"children":877},{},[878],{"type":173,"tag":412,"props":879,"children":882},{"href":880,"rel":881},"https://juejin.im/post/59fbdb46f265da4321536565",[416],[883],{"type":179,"value":884},"内存分析与内存泄漏定位",{"title":166,"searchDepth":886,"depth":886,"links":887},2,[888,889,890,891,892,893,894,895],{"id":176,"depth":886,"text":176},{"id":265,"depth":886,"text":265},{"id":306,"depth":886,"text":306},{"id":466,"depth":886,"text":466},{"id":551,"depth":886,"text":551},{"id":711,"depth":886,"text":714},{"id":736,"depth":886,"text":739},{"id":764,"depth":886,"text":767},"markdown","content:6.maps:_web:browser:principle.md","content","6.maps/_web/browser/principle.md","6.maps/_web/browser/principle","md",[903,907],{"_path":904,"title":905,"description":906},"/maps/_web/browser/new","浏览器新特性","Web.dev 月刊精选，追踪和总结主流浏览器的最新特性更新与时动态。",{"_path":908,"title":909,"description":910},"/maps/_web/browser/router","路由技术","Web 前端路由技术详解，包含 Hash 路由、History 路由的实现原理与最佳实践。",1750854656481]