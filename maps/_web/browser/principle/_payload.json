[{"data":1,"prerenderedAt":764},["ShallowReactive",2],{"navigation":3,"/maps/_web/browser/principle":161,"/maps/_web/browser/principle-surround":755},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":749,"_id":750,"_source":751,"_file":752,"_stem":753,"_extension":754},"/maps/_web/browser/principle","browser",false,true,"","浏览器相关","浏览器相关问题",{"type":170,"children":171,"toc":740},"root",[172,180,187,250,255,261,271,277,282,288,293,299,304,310,315,321,326,332,337,342,347,375,380,386,391,396,401,406,411,416,422,427,433,438,444,469,474,497,503,508,513,526,533,538,544,549,554,560,565,571,576,584,590,595,601,606,618,623],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"经典问题",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":184},"h4",{"id":183},"从输入-url-到页面显示的过程",[185],{"type":179,"value":186},"从输入 URL 到页面显示的过程？",{"type":173,"tag":188,"props":189,"children":190},"ol",{},[191,197,202,207,219,224,229,234,245],{"type":173,"tag":192,"props":193,"children":194},"li",{},[195],{"type":179,"value":196},"浏览器进程响应键鼠操作，将 URL 传递给网络线程准备进行请求。",{"type":173,"tag":192,"props":198,"children":199},{},[200],{"type":179,"value":201},"根据 Expired、Cache-Control 查看缓存是否过期。如果已过期，则携带 If-Modified-Since、If-Match 字段准备发起请求。",{"type":173,"tag":192,"props":203,"children":204},{},[205],{"type":179,"value":206},"解析域名，DNS 查址。涉及浏览器、操作系统、HOSTS、路由器、各级 DNS 服务器缓存。",{"type":173,"tag":192,"props":208,"children":209},{},[210,212],{"type":179,"value":211},"如果是请求 CDN 中的资源，见：",{"type":173,"tag":213,"props":214,"children":216},"a",{"href":215},"#%E8%AF%B7%E6%B1%82-cdn-%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[217],{"type":179,"value":218},"请求 CDN 中的资源的流程是怎样的？",{"type":173,"tag":192,"props":220,"children":221},{},[222],{"type":179,"value":223},"建立 TCP 链接。如果是 HTTPS，涉及 HTTPS 握手过程和 CA 认证过程。",{"type":173,"tag":192,"props":225,"children":226},{},[227],{"type":179,"value":228},"服务器收到请求，根据 Nginx 重新向到具体文件后，检查 If-Modified-Since、If-Match 字段。缓存新鲜则返回 304，否则计算并设置 Etag 返回最新资源。",{"type":173,"tag":192,"props":230,"children":231},{},[232],{"type":179,"value":233},"浏览器根据响应，缓存资源。",{"type":173,"tag":192,"props":235,"children":236},{},[237,239],{"type":179,"value":238},"渲染进程开始渲染，见：",{"type":173,"tag":213,"props":240,"children":242},{"href":241},"#%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%A4%A7%E8%87%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84",[243],{"type":179,"value":244},"渲染进程的大致工作流程是怎样的？",{"type":173,"tag":192,"props":246,"children":247},{},[248],{"type":179,"value":249},"渲染结束，所以资源加载完毕，触发 onload 事件。",{"type":173,"tag":174,"props":251,"children":253},{"id":252},"组成原理",[254],{"type":179,"value":252},{"type":173,"tag":181,"props":256,"children":258},{"id":257},"浏览器有哪些组件-浏览器架构",[259],{"type":179,"value":260},"浏览器有哪些组件 / 浏览器架构？",{"type":173,"tag":262,"props":263,"children":264},"p",{},[265],{"type":173,"tag":266,"props":267,"children":270},"img",{"alt":268,"src":269},"浏览器的主要组件","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200811234200.png",[],{"type":173,"tag":181,"props":272,"children":274},{"id":273},"进程和线程的区别是什么",[275],{"type":179,"value":276},"进程和线程的区别是什么？",{"type":173,"tag":262,"props":278,"children":279},{},[280],{"type":179,"value":281},"进程是系统分配资源的最小单位，线程是 CPU 调度的最小单位。线程间资源独立，但是启动、切换和通讯代价较大。线程间资源共享，但一个卡死全员卡死。",{"type":173,"tag":181,"props":283,"children":285},{"id":284},"浏览器的进程线程结构是怎么样的",[286],{"type":179,"value":287},"浏览器的进程线程结构是怎么样的？",{"type":173,"tag":262,"props":289,"children":290},{},[291],{"type":179,"value":292},"一般浏览器由主进程（浏览器进程）、渲染进程（浏览器内核）、插件进程和 GPU 进程组成。和页面渲染相关的是渲染进程，一般由网络请求线程、脚本引擎线程、GUI 渲染线程、合成器线程、光栅线程、事件触发线程、定时器线程和 Worker 线程组成。",{"type":173,"tag":181,"props":294,"children":296},{"id":295},"每个页面都有一个对应的渲染进程吗",[297],{"type":179,"value":298},"每个页面都有一个对应的渲染进程吗？",{"type":173,"tag":262,"props":300,"children":301},{},[302],{"type":179,"value":303},"一般来说是的，给页面一个独立的渲染进程，可以保证该页面崩溃的时候不会影响其它页面。如果页面内有跨站 iFrame，那么会由新的渲染进程接管，这样更安全。此外，由于创建和维持页面的渲染进程需要消耗大量内存，所以浏览器的实践是在进程数达到一定限制后，新页面会共享老页面的渲染进程。",{"type":173,"tag":181,"props":305,"children":307},{"id":306},"service-worker-是如何工作的",[308],{"type":179,"value":309},"Service Worker 是如何工作的？",{"type":173,"tag":262,"props":311,"children":312},{},[313],{"type":179,"value":314},"注册 Service Worker 时，浏览器会保存其作用域。每当请求一个新的资源时，浏览器通过比对资源 URL 是否在某个 Service Worker 的职责中。如果是，会在渲染进程中执行 Service Worker 代码，它可能中缓存中加载数据（同时中止网络请求），也可能从网上请求新的资源。",{"type":173,"tag":181,"props":316,"children":318},{"id":317},"为什么渲染和脚本执行不可以同时进行",[319],{"type":179,"value":320},"为什么渲染和脚本执行不可以同时进行？",{"type":173,"tag":262,"props":322,"children":323},{},[324],{"type":179,"value":325},"由于 JS 执行过程中可能操作 DOM，所以为了防止渲染时同时执行脚本导致前后结果的不一致，脚本线程和 GUI 线程被设计为互斥的：JS 执行时 GUI 会被挂起，等到 JS 线程空闲 GUI 才会更新。",{"type":173,"tag":181,"props":327,"children":329},{"id":328},"webworker-和-sharedworker-的资源是谁来管理的",[330],{"type":179,"value":331},"WebWorker 和 SharedWorker 的资源是谁来管理的？",{"type":173,"tag":262,"props":333,"children":334},{},[335],{"type":179,"value":336},"WebWorker 由当前页面进程管理，它是一个新的线程；SharedWorker 由浏览器的 SharedWorker 进程管理。",{"type":173,"tag":174,"props":338,"children":340},{"id":339},"网络请求",[341],{"type":179,"value":339},{"type":173,"tag":181,"props":343,"children":345},{"id":344},"请求-cdn-中的资源的流程是怎样的",[346],{"type":179,"value":218},{"type":173,"tag":188,"props":348,"children":349},{},[350,355,360,365,370],{"type":173,"tag":192,"props":351,"children":352},{},[353],{"type":179,"value":354},"发请求，本地 DNS 服务器根据记录将请求重定向到 CDN 专用的 DNS 服务器",{"type":173,"tag":192,"props":356,"children":357},{},[358],{"type":179,"value":359},"CDN 专用 DNS 服务器将全局负载均衡服务器的 IP 地址返回给用户",{"type":173,"tag":192,"props":361,"children":362},{},[363],{"type":179,"value":364},"发请求，负载均衡根据用户 IP 将区域负载均衡设备 IP 地址返回给用户",{"type":173,"tag":192,"props":366,"children":367},{},[368],{"type":179,"value":369},"发请求，区域负载均衡设备将缓存服务器 IP 地址返回给用户",{"type":173,"tag":192,"props":371,"children":372},{},[373],{"type":179,"value":374},"发请求，根据各级缓存服务器查找对应资源",{"type":173,"tag":174,"props":376,"children":378},{"id":377},"解析",[379],{"type":179,"value":377},{"type":173,"tag":181,"props":381,"children":383},{"id":382},"浏览器怎么根据请求的文件类型来进一步处理",[384],{"type":179,"value":385},"浏览器怎么根据请求的文件类型来进一步处理？",{"type":173,"tag":262,"props":387,"children":388},{},[389],{"type":179,"value":390},"可以根据 HTTP Header 中携带的 Content-Type 或是 MIME 嗅探技术来判断文件类型。如果是 HTML 之类的文档则交由渲染进程，如果是其他文件，则转交给下载管理器。",{"type":173,"tag":181,"props":392,"children":394},{"id":393},"渲染进程的大致工作流程是怎样的",[395],{"type":179,"value":244},{"type":173,"tag":262,"props":397,"children":398},{},[399],{"type":179,"value":400},"具体工作流程因浏览器而异，但总体而言都是要解析文档与资源并将其渲染至屏幕。总的来说分为解析、构建、布局和渲染四个步骤。",{"type":173,"tag":262,"props":402,"children":403},{},[404],{"type":179,"value":405},"渲染引擎会从网络线程中逐缓存区地取出文档（8KB）进行解析。",{"type":173,"tag":262,"props":407,"children":408},{},[409],{"type":179,"value":410},"解析分 HTML、CSS 和 JS。解析 HTML 时是一个从字符流到标记（Tokenizing），再到带属性对象（Lexing），最后组成 DOM Tree 的过程。解析 CSS 类似，最后会组成 CSSOM Tree。如果是普通脚本，解析时会阻塞 DOM Tree 和 CSSOM Tree 的构建。",{"type":173,"tag":262,"props":412,"children":413},{},[414],{"type":179,"value":415},"当 DOM Tree 和 CSSOM Tree 准备好后，依据 CSS 规范构建渲染树。渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。最后，由浏览器主进程通知渲染 GPU 进程渲染页面。",{"type":173,"tag":181,"props":417,"children":419},{"id":418},"为什么解析-html-无法使用自上而下或自下而上的解析器",[420],{"type":179,"value":421},"为什么解析 HTML 无法使用自上而下或自下而上的解析器？",{"type":173,"tag":262,"props":423,"children":424},{},[425],{"type":179,"value":426},"TODO。主要是因为其语言规范宽松，并且内容在解析时可能发生改变。",{"type":173,"tag":181,"props":428,"children":430},{"id":429},"碰到错误的标签会怎么处理",[431],{"type":179,"value":432},"碰到错误的标签会怎么处理？",{"type":173,"tag":262,"props":434,"children":435},{},[436],{"type":179,"value":437},"看具体的浏览器。一般来说，碰到错误的内容，解析器和 DOM Tree 的构建过程都会想方设法去揣摩正确的代码。浏览器是很包容的。",{"type":173,"tag":181,"props":439,"children":441},{"id":440},"css-解析和-html-的有什么不同",[442],{"type":179,"value":443},"CSS 解析和 HTML 的有什么不同？",{"type":173,"tag":262,"props":445,"children":446},{},[447,449,455,457,461,463,467],{"type":179,"value":448},"因为 CSS 的语法上下文无关，所以可以使用传统的解析器进行解析，比如 WebKit 使用 Bison 解析 CSS。CSS 的词法及语法都由 CSS 规范定义好了。词法用正则描述，比如 num: ",{"type":173,"tag":450,"props":451,"children":452},"span",{},[453],{"type":179,"value":454},"0-9",{"type":179,"value":456},"+|",{"type":173,"tag":450,"props":458,"children":459},{},[460],{"type":179,"value":454},{"type":179,"value":462},"*.",{"type":173,"tag":450,"props":464,"children":465},{},[466],{"type":179,"value":454},{"type":179,"value":468},"+，语法则用 BNF（巴科斯范式）描述。",{"type":173,"tag":262,"props":470,"children":471},{},[472],{"type":179,"value":473},"TODO:",{"type":173,"tag":475,"props":476,"children":477},"ul",{},[478,488],{"type":173,"tag":192,"props":479,"children":480},{},[481],{"type":173,"tag":213,"props":482,"children":486},{"href":483,"rel":484},"https://zhuanlan.zhihu.com/p/31311515",[485],"nofollow",[487],{"type":179,"value":483},{"type":173,"tag":192,"props":489,"children":490},{},[491],{"type":173,"tag":213,"props":492,"children":495},{"href":493,"rel":494},"https://zhuanlan.zhihu.com/p/358518402",[485],[496],{"type":179,"value":493},{"type":173,"tag":181,"props":498,"children":500},{"id":499},"构建渲染树时用了什么优化策略",[501],{"type":179,"value":502},"构建渲染树时用了什么优化策略？",{"type":173,"tag":262,"props":504,"children":505},{},[506],{"type":179,"value":507},"样式计算是一个复杂操作，因为 DOM Tree 和 CSSOM Tree 都是树状结构。DOM 元素都携带了样式属性，这会消耗了大量的内存，并且，样式的嵌套和层叠会引发计算性能问题。",{"type":173,"tag":262,"props":509,"children":510},{},[511],{"type":179,"value":512},"WebKit 使用共享渲染样式对象来优化，但要求元素类名相同、属性及值相同，且不能由 Inline，且不能使用 ID 选择器、属性选择器、同级选择器。",{"type":173,"tag":262,"props":514,"children":515},{},[516,518,524],{"type":179,"value":517},"Firefox 使用了",{"type":173,"tag":519,"props":520,"children":521},"strong",{},[522],{"type":179,"value":523},"规则树",{"type":179,"value":525},"这一方案。TODO",{"type":173,"tag":262,"props":527,"children":528},{},[529],{"type":173,"tag":266,"props":530,"children":532},{"alt":523,"src":531},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200813142147.png",[],{"type":173,"tag":174,"props":534,"children":536},{"id":535},"渲染",[537],{"type":179,"value":535},{"type":173,"tag":181,"props":539,"children":541},{"id":540},"如何避免重绘与回流",[542],{"type":179,"value":543},"如何避免重绘与回流？",{"type":173,"tag":262,"props":545,"children":546},{},[547],{"type":179,"value":548},"渲染树将会被带入布局处理，计算节点在屏幕上的精确坐标，随后在图层合层过程中分割为磁贴，并交由栅格线程栅格化并储存在显存中。如果更改了节点宽高等属性，可能需要从新计算渲染树，然后从布局开始执行逻辑，这叫做回流。如果只是改动节点的文字颜色等属性，只要从重新绘制单个节点开始，这叫做重绘。所以避免回流和重绘，需要减少更改样式的频率，或者换方式实现。",{"type":173,"tag":262,"props":550,"children":551},{},[552],{"type":179,"value":553},"浏览器会用一个队列缓存频繁的重绘和回流相关操作，但是如果用了 getComputedStyle、getBoundingRect 接口，会立即清空队列，所以频繁使用此类接口是有害性能的。",{"type":173,"tag":181,"props":555,"children":557},{"id":556},"domcontentloaded-和-onload-事件先后顺序是",[558],{"type":179,"value":559},"DOMContentLoaded 和 onload 事件先后顺序是？",{"type":173,"tag":262,"props":561,"children":562},{},[563],{"type":179,"value":564},"所有同步脚本执行完，DOM Tree 构建好之后，触发 DOMContentLoaded。所有样式、图片都加载完了才会触发 window.onload。",{"type":173,"tag":181,"props":566,"children":568},{"id":567},"复合composite是什么",[569],{"type":179,"value":570},"复合（Composite）是什么？",{"type":173,"tag":262,"props":572,"children":573},{},[574],{"type":179,"value":575},"复合是将页面分割为不同的图层，分别栅格化，然后组合为帧的流程。",{"type":173,"tag":262,"props":577,"children":578},{},[579],{"type":173,"tag":266,"props":580,"children":583},{"alt":581,"src":582},"Composite Thread","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627000101.png",[],{"type":173,"tag":181,"props":585,"children":587},{"id":586},"图层是什么",[588],{"type":179,"value":589},"图层是什么？",{"type":173,"tag":262,"props":591,"children":592},{},[593],{"type":179,"value":594},"图层是用来管理渲染树的一种结构。在一个图层中的渲染树的所有节点都会经过布局再交给 GPU 绘制，若 DOM 元素发生改变，可能会引起相应图层中的回流与重绘。可以通过通过 translate3D、will-change 等方式创建新图层（复合图层），这样一来相关元素会被单独绘制，不会影响默认图层。",{"type":173,"tag":181,"props":596,"children":598},{"id":597},"浏览器硬件加速是指什么",[599],{"type":179,"value":600},"浏览器硬件加速是指什么？",{"type":173,"tag":262,"props":602,"children":603},{},[604],{"type":179,"value":605},"硬件加速是通过指定 transform、opacity、filter 等 CSS 属性，使浏览器使用很大并行计算能力的 GPU 替 CPU 分担这些元素的渲染工作，降低 CPU 负载，达到渲染更加流畅的效果。使用硬件加速的图层都会使用新图层绘制，所以为了提前告知浏览器，将元素直接渲染至新图层，而不是从默认图层中拷贝过去，可以使用 will-change 属性明示。",{"type":173,"tag":262,"props":607,"children":608},{},[609,611],{"type":179,"value":610},"见：",{"type":173,"tag":213,"props":612,"children":615},{"href":613,"rel":614},"https://zhuanlan.zhihu.com/p/404656386",[485],[616],{"type":179,"value":617},"搞懂 GPU 和 CSS 硬件加速",{"type":173,"tag":174,"props":619,"children":621},{"id":620},"阅读更多",[622],{"type":179,"value":620},{"type":173,"tag":475,"props":624,"children":625},{},[626,636,646,656,666,678,690,700,710,720,730],{"type":173,"tag":192,"props":627,"children":628},{},[629],{"type":173,"tag":213,"props":630,"children":633},{"href":631,"rel":632},"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/",[485],[634],{"type":179,"value":635},"浏览器的工作原理：新式网络浏览器幕后揭秘",{"type":173,"tag":192,"props":637,"children":638},{},[639],{"type":173,"tag":213,"props":640,"children":643},{"href":641,"rel":642},"https://html.spec.whatwg.org/multipage/parsing.html#parsing",[485],[644],{"type":179,"value":645},"HTML SPEC",{"type":173,"tag":192,"props":647,"children":648},{},[649],{"type":173,"tag":213,"props":650,"children":653},{"href":651,"rel":652},"https://www.w3.org/TR/selectors-3/#grammar",[485],[654],{"type":179,"value":655},"CSS Selectors Level 3",{"type":173,"tag":192,"props":657,"children":658},{},[659],{"type":173,"tag":213,"props":660,"children":663},{"href":661,"rel":662},"https://developer.chrome.com/blog/inside-browser-part1/",[485],[664],{"type":179,"value":665},"Inside look at modern web browser (part 1)",{"type":173,"tag":192,"props":667,"children":668},{},[669,676],{"type":173,"tag":213,"props":670,"children":673},{"href":671,"rel":672},"https://zhuanlan.zhihu.com/p/47407398",[485],[674],{"type":179,"value":675},"图解浏览器的基本工作原理",{"type":179,"value":677},"，现代浏览器内部原理系列的中文翻译其一。",{"type":173,"tag":192,"props":679,"children":680},{},[681,688],{"type":173,"tag":213,"props":682,"children":685},{"href":683,"rel":684},"https://www.starryskystar.space/detail/612beeddf1daf402f34f4fa5",[485],[686],{"type":179,"value":687},"浏览器地址栏中输入 URL 到页面显示，浏览器到底发生了什么？",{"type":179,"value":689},"，综合笔记。",{"type":173,"tag":192,"props":691,"children":692},{},[693],{"type":173,"tag":213,"props":694,"children":697},{"href":695,"rel":696},"https://juejin.im/post/59e85eebf265da430d571f89",[485],[698],{"type":179,"value":699},"这一次，彻底弄懂 JavaScript 执行机制",{"type":173,"tag":192,"props":701,"children":702},{},[703],{"type":173,"tag":213,"props":704,"children":707},{"href":705,"rel":706},"https://javascript.ruanyifeng.com/oop/basic.html",[485],[708],{"type":179,"value":709},"构造函数与 new 命令",{"type":173,"tag":192,"props":711,"children":712},{},[713],{"type":173,"tag":213,"props":714,"children":717},{"href":715,"rel":716},"http://newhtml.net/v8-garbage-collection/",[485],[718],{"type":179,"value":719},"V8 之旅：垃圾回收器",{"type":173,"tag":192,"props":721,"children":722},{},[723],{"type":173,"tag":213,"props":724,"children":727},{"href":725,"rel":726},"https://v8.dev/blog/concurrent-marking",[485],[728],{"type":179,"value":729},"Concurrent marking in V8",{"type":173,"tag":192,"props":731,"children":732},{},[733],{"type":173,"tag":213,"props":734,"children":737},{"href":735,"rel":736},"https://juejin.im/post/59fbdb46f265da4321536565",[485],[738],{"type":179,"value":739},"内存分析与内存泄漏定位",{"title":166,"searchDepth":741,"depth":741,"links":742},2,[743,744,745,746,747,748],{"id":176,"depth":741,"text":176},{"id":252,"depth":741,"text":252},{"id":339,"depth":741,"text":339},{"id":377,"depth":741,"text":377},{"id":535,"depth":741,"text":535},{"id":620,"depth":741,"text":620},"markdown","content:6.maps:_web:browser:principle.md","content","6.maps/_web/browser/principle.md","6.maps/_web/browser/principle","md",[756,760],{"_path":757,"title":758,"description":759},"/maps/_web/browser/new","浏览器新特性","Web.dev 月刊精选，追踪和总结主流浏览器的最新特性更新与时动态。",{"_path":761,"title":762,"description":763},"/maps/_web/browser/router","路由技术","Web 前端路由技术详解，包含 Hash 路由、History 路由的实现原理与最佳实践。",1754391514737]