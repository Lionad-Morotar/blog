[{"data":1,"prerenderedAt":329},["ShallowReactive",2],{"navigation":3,"/maps/_games/escape-from-tarkov":158,"/maps/_games/escape-from-tarkov-surround":320},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":314,"_id":315,"_source":316,"_file":317,"_stem":318,"_extension":319},"/maps/_games/escape-from-tarkov","_games",false,true,"","逃离塔克夫","逃离塔克夫是一款由俄罗斯游戏公司 BattleState Games 开发的第一人称射击游戏。",{"type":167,"children":168,"toc":309},"root",[169,178,184,190,195,200,205,210,215,220,225,270,275,280,285,290],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"护甲穿透机制",[175],{"type":176,"value":177},"text","护甲&穿透机制",{"type":170,"tag":179,"props":180,"children":181},"p",{},[182],{"type":176,"value":183},"伤害的成因非常复杂，但可以按照数据和公式推导出概率。一些非常繁琐的细节我会忽略，这里着重介绍：碰撞检测、跳蛋、穿透、耐久、碎蛋。",{"type":170,"tag":185,"props":186,"children":188},"h4",{"id":187},"碰撞检测",[189],{"type":176,"value":187},{"type":170,"tag":179,"props":191,"children":192},{},[193],{"type":176,"value":194},"首先要理清的是，护甲的形状并不是真实的碰撞检测形状——这几乎在所有竞技 FPS 中是通用的法则——所以有些带护手的甲连手掌都能防。很离谱。不过这也不算坏消息，有些玩家可能宁愿买不带护手的甲来提高机动性。同时，击中手部位造成的伤害并不致命，所以把甲的耐久点数留给更重要的胸口部位也许反而更加明智。",{"type":170,"tag":185,"props":196,"children":198},{"id":197},"跳蛋",[199],{"type":176,"value":197},{"type":170,"tag":179,"props":201,"children":202},{},[203],{"type":176,"value":204},"只有头盔（和面罩）有跳蛋机制：当子弹以特定角度击中头盔时，根据头盔跳蛋概率和子弹的跳蛋概率一起计算出此次命中是否跳蛋。",{"type":170,"tag":185,"props":206,"children":208},{"id":207},"穿透",[209],{"type":176,"value":207},{"type":170,"tag":179,"props":211,"children":212},{},[213],{"type":176,"value":214},"只有与护甲相比同等级或更高等级的子弹才能对其造成有效击穿。六种等级的护甲其等级可以约等于其等级乘 10。这个数据并不精确，但很方便用于估算第一发子弹的击穿概率。比方说，要第一发子弹就大概率击穿满耐久的五级护甲，需要 50 穿透力的子弹。如果没有穿透护甲，护甲只减少 1 点耐久，并且依子弹和护甲的不同种类，身体会受到轻微冲击伤害。如果穿透，越高等级的护甲（以及越高耐久）越能减免此次伤害：可以简单记住满耐久护甲能减免 25% 的同等级子弹的伤害。",{"type":170,"tag":185,"props":216,"children":218},{"id":217},"耐久",[219],{"type":176,"value":217},{"type":170,"tag":179,"props":221,"children":222},{},[223],{"type":176,"value":224},"护甲的耐久和材料相关，受“毁伤系数”影响，所以不能只看纸面点数。比如玻璃的毁伤系数是 0.8，这意味着伤害为 50，对护甲伤害为 40% 的子弹穿透玻璃后，会对其造成 $40% * 50 * 0.8 = 16$ 点伤害。材料的毁伤系数如下：",{"type":170,"tag":226,"props":227,"children":228},"ul",{},[229,235,240,245,250,255,260,265],{"type":170,"tag":230,"props":231,"children":232},"li",{},[233],{"type":176,"value":234},"Aramid（凯夫拉）：0.25",{"type":170,"tag":230,"props":236,"children":237},{},[238],{"type":176,"value":239},"UHMWPE（超聚乙烯）：0.45",{"type":170,"tag":230,"props":241,"children":242},{},[243],{"type":176,"value":244},"Titan（钛）：0.55",{"type":170,"tag":230,"props":246,"children":247},{},[248],{"type":176,"value":249},"Aluminium（铝）：0.6",{"type":170,"tag":230,"props":251,"children":252},{},[253],{"type":176,"value":254},"Combine Materials（复合材料）： 0.5",{"type":170,"tag":230,"props":256,"children":257},{},[258],{"type":176,"value":259},"Steel（铁）：0.7",{"type":170,"tag":230,"props":261,"children":262},{},[263],{"type":176,"value":264},"Ceramic（陶瓷）：0.8",{"type":170,"tag":230,"props":266,"children":267},{},[268],{"type":176,"value":269},"Glass（玻璃纤维）：0.8",{"type":170,"tag":185,"props":271,"children":273},{"id":272},"碎蛋",[274],{"type":176,"value":272},{"type":170,"tag":179,"props":276,"children":277},{},[278],{"type":176,"value":279},"子弹击中目标后，无论穿透与否，都依据其碎蛋率，分裂出数个弹头。这些弹头的穿透性和伤害等于原子弹的穿透和伤害总数的 50% 再平分。碎蛋的方向不定，所以可能对身体多个区域造成额外伤害。此外，每个弹头对护甲的耐久损耗都至少是 1——这个散弹的子弹计算耐久损耗是一致的。",{"type":170,"tag":179,"props":281,"children":282},{},[283],{"type":176,"value":284},"子弹的碎蛋率不能仅看 WIKI 的纸面数据。游戏中目前有个严重的 BUG，低于 29 穿透力的子弹不会碎蛋。",{"type":170,"tag":171,"props":286,"children":288},{"id":287},"相关阅读",[289],{"type":176,"value":287},{"type":170,"tag":226,"props":291,"children":292},{},[293],{"type":170,"tag":230,"props":294,"children":295},{},[296],{"type":170,"tag":297,"props":298,"children":302},"a",{"href":299,"rel":300},"https://tarkovaftermidnight.wordpress.com/",[301],"nofollow",[303],{"type":170,"tag":304,"props":305,"children":306},"i",{},[307],{"type":176,"value":308},"Armor, Penetration, and Damage",{"title":163,"searchDepth":310,"depth":310,"links":311},2,[312,313],{"id":173,"depth":310,"text":177},{"id":287,"depth":310,"text":287},"markdown","content:6.maps:_games:escape-from-tarkov.md","content","6.maps/_games/escape-from-tarkov.md","6.maps/_games/escape-from-tarkov","md",[321,325],{"_path":322,"title":323,"description":324},"/maps/_game/game","游戏","游戏开发、游戏设计、游戏行业等",{"_path":326,"title":327,"description":328},"/maps/_hardware/hardware","硬件","硬件是指计算机的物理部分，包括 CPU、内存、硬盘、显卡等。",1742958683571]