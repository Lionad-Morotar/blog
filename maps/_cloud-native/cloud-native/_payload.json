[{"data":1,"prerenderedAt":637},["ShallowReactive",2],{"navigation":3,"/maps/_cloud-native/cloud-native":155,"/maps/_cloud-native/cloud-native-surround":630},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":624,"_id":625,"_source":626,"_file":627,"_stem":628,"_extension":629},"/maps/_cloud-native/cloud-native","_cloud-native",false,true,"","CloudNative","云原生技术概论",{"type":164,"children":165,"toc":615},"root",[166,175,190,194,207,213,219,226,231,243,249,254,260,265,271,276,285,291,345,351,356,362,367,405,411,416,421,427,432,438,443,449,454,460,465,474,480,485,491,509,515,520,525,531,536,542,547,553,558,564,577,582,588,593,599,604,610],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"components",[172],{"type":173,"value":174},"text","Components",{"type":167,"tag":176,"props":177,"children":178},"ul",{},[179],{"type":167,"tag":180,"props":181,"children":182},"li",{},[183],{"type":167,"tag":184,"props":185,"children":187},"a",{"href":186},"/maps/_cloud-native/kubernetes",[188],{"type":173,"value":189},"Kubernetes",{"type":167,"tag":168,"props":191,"children":192},{"id":162},[193],{"type":173,"value":162},{"type":167,"tag":195,"props":196,"children":197},"p",{},[198,200],{"type":173,"value":199},"● 云原生技术概览：",{"type":167,"tag":184,"props":201,"children":205},{"href":202,"rel":203},"https://www.thebyte.com.cn/architecture/summary.html",[204],"nofollow",[206],{"type":173,"value":202},{"type":167,"tag":168,"props":208,"children":210},{"id":209},"quick-question",[211],{"type":173,"value":212},"Quick Question",{"type":167,"tag":214,"props":215,"children":217},"h3",{"id":216},"云原生",[218],{"type":173,"value":216},{"type":167,"tag":220,"props":221,"children":223},"h4",{"id":222},"云原生是什么",[224],{"type":173,"value":225},"云原生是什么？",{"type":167,"tag":195,"props":227,"children":228},{},[229],{"type":173,"value":230},"云原生是一种架构理论，旨在充分发挥云平台的弹性和分布式优势，构建在云上以最佳姿势运行应用程序。",{"type":167,"tag":195,"props":232,"children":233},{},[234,236],{"type":173,"value":235},"见：",{"type":167,"tag":184,"props":237,"children":240},{"href":238,"rel":239},"https://zhuanlan.zhihu.com/p/150190166",[204],[241],{"type":173,"value":242},"什么是云原生？",{"type":167,"tag":220,"props":244,"children":246},{"id":245},"云原生架构的特点是什么",[247],{"type":173,"value":248},"云原生架构的特点是什么？",{"type":167,"tag":195,"props":250,"children":251},{},[252],{"type":173,"value":253},"基于微服务架构，配合服务网格，降低业务单体的复杂性；借助敏捷方法和 DevOps 方法提高迭代效率，同时采用 K8S + 容器支持运维自动化；最后，利用云平台基础设施提供的声明式基础设施配置，实现资源的弹性伸缩、动态调度，提高资源利用率。",{"type":167,"tag":220,"props":255,"children":257},{"id":256},"云原生不可能三角",[258],{"type":173,"value":259},"云原生不可能三角？",{"type":167,"tag":195,"props":261,"children":262},{},[263],{"type":173,"value":264},"高可用、规模化、敏捷；其间关系分别可戏称为大象起舞、空中换发和巨人绣花。",{"type":167,"tag":220,"props":266,"children":268},{"id":267},"云原生架构的定义",[269],{"type":173,"value":270},"云原生架构的定义？",{"type":167,"tag":195,"props":272,"children":273},{},[274],{"type":173,"value":275},"云原生基金会 CNCF 给出的云原生的定义的 V1 版本。",{"type":167,"tag":277,"props":278,"children":279},"blockquote",{},[280],{"type":167,"tag":195,"props":281,"children":282},{},[283],{"type":173,"value":284},"云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。\n云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。",{"type":167,"tag":220,"props":286,"children":288},{"id":287},"云原生架构相关哪些技术",[289],{"type":173,"value":290},"云原生架构相关哪些技术？",{"type":167,"tag":292,"props":293,"children":294},"ol",{},[295,300,305,310,315,320,325,330,335,340],{"type":167,"tag":180,"props":296,"children":297},{},[298],{"type":173,"value":299},"容器和镜像：Docker、Containerd、CRI-O、Kata Containers",{"type":167,"tag":180,"props":301,"children":302},{},[303],{"type":173,"value":304},"镜像仓库：Harbor、Nydus",{"type":167,"tag":180,"props":306,"children":307},{},[308],{"type":173,"value":309},"应用封装：Kustomize、Helm",{"type":167,"tag":180,"props":311,"children":312},{},[313],{"type":173,"value":314},"持续集成：Gitlab、Tekton",{"type":167,"tag":180,"props":316,"children":317},{},[318],{"type":173,"value":319},"持续部署：FluxCD、argoCD",{"type":167,"tag":180,"props":321,"children":322},{},[323],{"type":173,"value":324},"容器编排：Kubernetes",{"type":167,"tag":180,"props":326,"children":327},{},[328],{"type":173,"value":329},"网关：Ingress-Nginx、APISIX",{"type":167,"tag":180,"props":331,"children":332},{},[333],{"type":173,"value":334},"日志：Fluentd、Grafana Loki",{"type":167,"tag":180,"props":336,"children":337},{},[338],{"type":173,"value":339},"监控：Grafana、Prometheus",{"type":167,"tag":180,"props":341,"children":342},{},[343],{"type":173,"value":344},"应用开发：Nocalhost",{"type":167,"tag":220,"props":346,"children":348},{"id":347},"从架构发展来看用户和平台的关注点是怎么变化的",[349],{"type":173,"value":350},"从架构发展来看，用户和平台的关注点是怎么变化的？",{"type":167,"tag":195,"props":352,"children":353},{},[354],{"type":173,"value":355},"从用户自建、IaaS、PaaS、SaaS 到 FaaS，客户和平台关注的东西并不一样。\n以 SaaS 举例，客户只需要关注数据，而平台关注包括应用程序、应用依赖、中间件、操作系统、虚拟化服务器、存储、网格等其余所有基础设施。",{"type":167,"tag":220,"props":357,"children":359},{"id":358},"有哪些亿级-dau-规模的移动应用",[360],{"type":173,"value":361},"有哪些亿级 DAU 规模的移动应用？",{"type":167,"tag":195,"props":363,"children":364},{},[365],{"type":173,"value":366},"POE Assistant：以下是一些拥有亿级日活跃用户（DAU）规模的知名移动应用的例子（截至2021年）",{"type":167,"tag":292,"props":368,"children":369},{},[370,375,380,385,390,395,400],{"type":167,"tag":180,"props":371,"children":372},{},[373],{"type":173,"value":374},"Facebook：Facebook是全球最大的社交媒体平台，拥有超过20亿月活跃用户，其中大部分用户通过移动应用进行访问。",{"type":167,"tag":180,"props":376,"children":377},{},[378],{"type":173,"value":379},"WhatsApp：WhatsApp是一款全球领先的即时通讯应用程序，每天有超过20亿用户使用该应用进行消息传递和语音通话。",{"type":167,"tag":180,"props":381,"children":382},{},[383],{"type":173,"value":384},"WeChat（微信）：WeChat是中国最流行的社交媒体和消息应用之一，拥有超过10亿活跃用户。它提供了聊天、社交、支付、游戏和其他功能。",{"type":167,"tag":180,"props":386,"children":387},{},[388],{"type":173,"value":389},"TikTok（抖音）：TikTok是一款全球流行的短视频社交平台，拥有超过10亿用户。它提供了用户生成的短视频内容，吸引了大量的年轻用户。",{"type":167,"tag":180,"props":391,"children":392},{},[393],{"type":173,"value":394},"Instagram：Instagram是一款图片和视频分享社交平台，拥有超过10亿用户。它提供了用户上传和编辑照片、视频以及与其他用户互动的功能。",{"type":167,"tag":180,"props":396,"children":397},{},[398],{"type":173,"value":399},"Snapchat：Snapchat是一款以瞬间分享和自动消失的照片和视频为特点的移动应用，拥有超过5亿用户。",{"type":167,"tag":180,"props":401,"children":402},{},[403],{"type":173,"value":404},"Twitter：Twitter是一款全球知名的社交媒体平台，用户可以发布和阅读短消息（推文）。它拥有超过3亿的活跃用户。",{"type":167,"tag":220,"props":406,"children":408},{"id":407},"如何按照规模和变更速度将软件企业划分为四个象限",[409],{"type":173,"value":410},"如何按照规模和变更速度将软件企业划分为四个象限？",{"type":167,"tag":195,"props":412,"children":413},{},[414],{"type":173,"value":415},"援引 Netflix 的说法，按照规模大小、变更速度的快慢可以将软件划分为：互联网企业（规模大、变化快）、初创公司（规模小、变化快）、电信业务（规模大、变化慢）、企业 IT（规模小、变化慢）。",{"type":167,"tag":195,"props":417,"children":418},{},[419],{"type":173,"value":420},"初创公司面临软件失败的风险、电信业务面临硬件失败风险，企业 IT 要面对来自市场的冲击，而互联网企业是最危险的“Everything is Broken”。",{"type":167,"tag":220,"props":422,"children":424},{"id":423},"什么是虚拟化技术",[425],{"type":173,"value":426},"什么是虚拟化技术？",{"type":167,"tag":195,"props":428,"children":429},{},[430],{"type":173,"value":431},"虚拟化技术是一种资源管理技术，它可以将一台计算机的各种资源，如处理器、内存、硬盘、网络接口卡等，抽象、转换后提供给多个用户和应用程序使用。",{"type":167,"tag":220,"props":433,"children":435},{"id":434},"最早的容器技术",[436],{"type":173,"value":437},"最早的容器技术？",{"type":167,"tag":195,"props":439,"children":440},{},[441],{"type":173,"value":442},"Chroot Jail；使用 chroot 系统调用将进程的 root 目录重定向到新位置，仪表创造独立的环境用于软件编译、测试以及安装。",{"type":167,"tag":220,"props":444,"children":446},{"id":445},"linux-容器是什么",[447],{"type":173,"value":448},"Linux 容器是什么？",{"type":167,"tag":195,"props":450,"children":451},{},[452],{"type":173,"value":453},"LXC，Linux Container；Google 推出的进程容器合并进入 Linux 内核后重命名为 Control Groups，它允许给进程提供操作系统级别的资源限制、优先级控制、审计能力。配合 namepace 称为 LXC，再配合安全防护机制形成了容器运行环境隔离的容器核心能力。",{"type":167,"tag":220,"props":455,"children":457},{"id":456},"docker-继-lxc-解决的问题是",[458],{"type":173,"value":459},"Docker 继 LXC 解决的问题是？",{"type":167,"tag":195,"props":461,"children":462},{},[463],{"type":173,"value":464},"Docker 封装了应用程序的代码、依赖、工具、资源文件和元信息，可以做到将应用分发到任意平台或运行环境，即“Build once，Ship and Run Anywhere”",{"type":167,"tag":195,"props":466,"children":467},{},[468],{"type":167,"tag":469,"props":470,"children":473},"img",{"alt":471,"src":472},"Docker","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20231118201706.png",[],{"type":167,"tag":220,"props":475,"children":477},{"id":476},"为什么称-kubernetes-成了容器编排事实标准",[478],{"type":173,"value":479},"为什么称 Kubernetes 成了容器编排事实标准？",{"type":167,"tag":195,"props":481,"children":482},{},[483],{"type":173,"value":484},"在于 Docker Swarm、Apache Mesos 的斗争中，K8s 没有历史包袱，预置了服务发现、容器网格等关键特性，并提供了用于描述集群架构、定义服务状态的声明式 API，帮助系统维持在这个状态，有明显的后发优势。最重要的是，K8s 拥有一套稳定可扩展的 API 盘活了生态。",{"type":167,"tag":220,"props":486,"children":488},{"id":487},"容器兴起和编排大战的三个里程碑",[489],{"type":173,"value":490},"容器兴起和编排大战的三个里程碑？",{"type":167,"tag":292,"props":492,"children":493},{},[494,499,504],{"type":167,"tag":180,"props":495,"children":496},{},[497],{"type":173,"value":498},"2013 ，Doocker 发布，云计算进入容器时代",{"type":167,"tag":180,"props":500,"children":501},{},[502],{"type":173,"value":503},"2017 ，K8s 赢得容器编排的胜利，云计算进入 K8s 时代",{"type":167,"tag":180,"props":505,"children":506},{},[507],{"type":173,"value":508},"2018，Istio 发布，服务网格的理念走向成熟",{"type":167,"tag":220,"props":510,"children":512},{"id":511},"oci-和-cncf-的关系",[513],{"type":173,"value":514},"OCI 和 CNCF 的关系？",{"type":167,"tag":195,"props":516,"children":517},{},[518],{"type":173,"value":519},"合作关系。",{"type":167,"tag":195,"props":521,"children":522},{},[523],{"type":173,"value":524},"TODO",{"type":167,"tag":220,"props":526,"children":528},{"id":527},"微服务带来了哪些技术挑战",[529],{"type":173,"value":530},"微服务带来了哪些技术挑战？",{"type":167,"tag":195,"props":532,"children":533},{},[534],{"type":173,"value":535},"服务发现、服务熔断、负载均衡和通讯相关问题。通讯包括调用协议、加密、认证、鉴权等。",{"type":167,"tag":220,"props":537,"children":539},{"id":538},"什么是服务网格",[540],{"type":173,"value":541},"什么是服务网格？",{"type":167,"tag":195,"props":543,"children":544},{},[545],{"type":173,"value":546},"服务网格是云原生的基础设施，用于云原生应用微服务组成的的复杂拓扑结构下的可靠请求传送。在实践中，它是一组和应用服务部署在一起的轻量级网络代理（Sidecar）。",{"type":167,"tag":220,"props":548,"children":550},{"id":549},"istio-初始架构是怎样的",[551],{"type":173,"value":552},"Istio 初始架构是怎样的？",{"type":167,"tag":195,"props":554,"children":555},{},[556],{"type":173,"value":557},"Istio 分为数据平面和控制平面。数据平面使用轻量级 Sidecar 如 Envoy 协调与控制服务之间的通信和流量处理；控制平面负责配置和管理数据平面，以及提供服务发现、智能路由、流量控制、安全控制等功能。",{"type":167,"tag":220,"props":559,"children":561},{"id":560},"sidecar-面临的问题或者说缺陷是",[562],{"type":173,"value":563},"Sidecar 面临的问题或者说缺陷是？",{"type":167,"tag":292,"props":565,"children":566},{},[567,572],{"type":167,"tag":180,"props":568,"children":569},{},[570],{"type":173,"value":571},"在规模巨大化的服务集群下，网络通信的拓扑结构非常复杂，对作为独立容器的 Sidecar 下发配置会导致内存剧烈增长；",{"type":167,"tag":180,"props":573,"children":574},{},[575],{"type":173,"value":576},"某些性能要求极高的业务场景，毫秒级别的延迟也不能接受。",{"type":167,"tag":195,"props":578,"children":579},{},[580],{"type":173,"value":581},"作为改进，Proxyless 模式可以去 Sidecard 容器、消除跨进程调用，并降低延迟。但本质上，它只是使用 Istio Agent 把服务注册等工作和 gRPC  等框架绑定在了一起。",{"type":167,"tag":220,"props":583,"children":585},{"id":584},"sidecarless-模式是什么",[586],{"type":173,"value":587},"Sidecarless 模式是什么？",{"type":167,"tag":195,"props":589,"children":590},{},[591],{"type":173,"value":592},"通过 Agent（代理）、注入式库或者云原生平台功能将 Sidecar 干掉。从原理来说，在 L4 和 L7 分别建立用途不一样的代理，托管不同的流量。L4 层建立了 TCP 路由，有简单的鉴权机制，使用 eBFP 通讯，能观测 TCP 指标和日志。L7 层建立了 HTTP 路由，有完善的鉴权。\nIstio 未来的发展方向就是完善 Ambient Mesh（一种无边车模式的实现）。其使用 DaemonSet 部署 Waypoint Proxy 作为 L7 代理，而在 L4 使用 ztunnel。",{"type":167,"tag":220,"props":594,"children":596},{"id":595},"不可变基础设施的核心思想是",[597],{"type":173,"value":598},"不可变基础设施的核心思想是？",{"type":167,"tag":195,"props":600,"children":601},{},[602],{"type":173,"value":603},"不可变基础设施的核心思想是基础设施的示例一旦创建就变成只读状态，如果需要修改或省级，应先修改配置模板，在根据模板创建新示例并替换旧实例。",{"type":167,"tag":220,"props":605,"children":607},{"id":606},"不可变基础设施能解决什么问题",[608],{"type":173,"value":609},"不可变基础设施能解决什么问题？",{"type":167,"tag":195,"props":611,"children":612},{},[613],{"type":173,"value":614},"以解决传统运维时代需要大量手工操作带来的构建难以自动化，以及环境变量改变等问题。其最大的优势是“一致性”，使基础设施管理简单、可部署、可规模化、可恢复，也提高了安全性。",{"title":160,"searchDepth":616,"depth":616,"links":617},2,[618,619,620],{"id":170,"depth":616,"text":174},{"id":162,"depth":616,"text":162},{"id":209,"depth":616,"text":212,"children":621},[622],{"id":216,"depth":623,"text":216},3,"markdown","content:6.maps:_cloud-native:cloud-native.md","content","6.maps/_cloud-native/cloud-native.md","6.maps/_cloud-native/cloud-native","md",[631,635],{"_path":632,"title":633,"description":634},"/maps/_cli/ffmpeg","ffmpeg & imagemagick","最常使用的视频和图片处理工具。",{"_path":186,"title":189,"description":636},"K8s，是一个基于容器的集群管理平台，主要用于控制容器",1742348684526]