[{"data":1,"prerenderedAt":643},["ShallowReactive",2],{"navigation":3,"/maps/_cloud-native/cloud-native":161,"/maps/_cloud-native/cloud-native-surround":636},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":630,"_id":631,"_source":632,"_file":633,"_stem":634,"_extension":635},"/maps/_cloud-native/cloud-native","_cloud-native",false,true,"","CloudNative","云原生技术概论",{"type":170,"children":171,"toc":621},"root",[172,181,196,200,213,219,225,232,237,249,255,260,266,271,277,282,291,297,351,357,362,368,373,411,417,422,427,433,438,444,449,455,460,466,471,480,486,491,497,515,521,526,531,537,542,548,553,559,564,570,583,588,594,599,605,610,616],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"components",[178],{"type":179,"value":180},"text","Components",{"type":173,"tag":182,"props":183,"children":184},"ul",{},[185],{"type":173,"tag":186,"props":187,"children":188},"li",{},[189],{"type":173,"tag":190,"props":191,"children":193},"a",{"href":192},"/maps/_cloud-native/kubernetes",[194],{"type":179,"value":195},"Kubernetes",{"type":173,"tag":174,"props":197,"children":198},{"id":168},[199],{"type":179,"value":168},{"type":173,"tag":201,"props":202,"children":203},"p",{},[204,206],{"type":179,"value":205},"● 云原生技术概览：",{"type":173,"tag":190,"props":207,"children":211},{"href":208,"rel":209},"https://www.thebyte.com.cn/architecture/summary.html",[210],"nofollow",[212],{"type":179,"value":208},{"type":173,"tag":174,"props":214,"children":216},{"id":215},"quick-question",[217],{"type":179,"value":218},"Quick Question",{"type":173,"tag":220,"props":221,"children":223},"h3",{"id":222},"云原生",[224],{"type":179,"value":222},{"type":173,"tag":226,"props":227,"children":229},"h4",{"id":228},"云原生是什么",[230],{"type":179,"value":231},"云原生是什么？",{"type":173,"tag":201,"props":233,"children":234},{},[235],{"type":179,"value":236},"云原生是一种架构理论，旨在充分发挥云平台的弹性和分布式优势，构建在云上以最佳姿势运行应用程序。",{"type":173,"tag":201,"props":238,"children":239},{},[240,242],{"type":179,"value":241},"见：",{"type":173,"tag":190,"props":243,"children":246},{"href":244,"rel":245},"https://zhuanlan.zhihu.com/p/150190166",[210],[247],{"type":179,"value":248},"什么是云原生？",{"type":173,"tag":226,"props":250,"children":252},{"id":251},"云原生架构的特点是什么",[253],{"type":179,"value":254},"云原生架构的特点是什么？",{"type":173,"tag":201,"props":256,"children":257},{},[258],{"type":179,"value":259},"基于微服务架构，配合服务网格，降低业务单体的复杂性；借助敏捷方法和 DevOps 方法提高迭代效率，同时采用 K8S + 容器支持运维自动化；最后，利用云平台基础设施提供的声明式基础设施配置，实现资源的弹性伸缩、动态调度，提高资源利用率。",{"type":173,"tag":226,"props":261,"children":263},{"id":262},"云原生不可能三角",[264],{"type":179,"value":265},"云原生不可能三角？",{"type":173,"tag":201,"props":267,"children":268},{},[269],{"type":179,"value":270},"高可用、规模化、敏捷；其间关系分别可戏称为大象起舞、空中换发和巨人绣花。",{"type":173,"tag":226,"props":272,"children":274},{"id":273},"云原生架构的定义",[275],{"type":179,"value":276},"云原生架构的定义？",{"type":173,"tag":201,"props":278,"children":279},{},[280],{"type":179,"value":281},"云原生基金会 CNCF 给出的云原生的定义的 V1 版本。",{"type":173,"tag":283,"props":284,"children":285},"blockquote",{},[286],{"type":173,"tag":201,"props":287,"children":288},{},[289],{"type":179,"value":290},"云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。\n云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。",{"type":173,"tag":226,"props":292,"children":294},{"id":293},"云原生架构相关哪些技术",[295],{"type":179,"value":296},"云原生架构相关哪些技术？",{"type":173,"tag":298,"props":299,"children":300},"ol",{},[301,306,311,316,321,326,331,336,341,346],{"type":173,"tag":186,"props":302,"children":303},{},[304],{"type":179,"value":305},"容器和镜像：Docker、Containerd、CRI-O、Kata Containers",{"type":173,"tag":186,"props":307,"children":308},{},[309],{"type":179,"value":310},"镜像仓库：Harbor、Nydus",{"type":173,"tag":186,"props":312,"children":313},{},[314],{"type":179,"value":315},"应用封装：Kustomize、Helm",{"type":173,"tag":186,"props":317,"children":318},{},[319],{"type":179,"value":320},"持续集成：Gitlab、Tekton",{"type":173,"tag":186,"props":322,"children":323},{},[324],{"type":179,"value":325},"持续部署：FluxCD、argoCD",{"type":173,"tag":186,"props":327,"children":328},{},[329],{"type":179,"value":330},"容器编排：Kubernetes",{"type":173,"tag":186,"props":332,"children":333},{},[334],{"type":179,"value":335},"网关：Ingress-Nginx、APISIX",{"type":173,"tag":186,"props":337,"children":338},{},[339],{"type":179,"value":340},"日志：Fluentd、Grafana Loki",{"type":173,"tag":186,"props":342,"children":343},{},[344],{"type":179,"value":345},"监控：Grafana、Prometheus",{"type":173,"tag":186,"props":347,"children":348},{},[349],{"type":179,"value":350},"应用开发：Nocalhost",{"type":173,"tag":226,"props":352,"children":354},{"id":353},"从架构发展来看用户和平台的关注点是怎么变化的",[355],{"type":179,"value":356},"从架构发展来看，用户和平台的关注点是怎么变化的？",{"type":173,"tag":201,"props":358,"children":359},{},[360],{"type":179,"value":361},"从用户自建、IaaS、PaaS、SaaS 到 FaaS，客户和平台关注的东西并不一样。\n以 SaaS 举例，客户只需要关注数据，而平台关注包括应用程序、应用依赖、中间件、操作系统、虚拟化服务器、存储、网格等其余所有基础设施。",{"type":173,"tag":226,"props":363,"children":365},{"id":364},"有哪些亿级-dau-规模的移动应用",[366],{"type":179,"value":367},"有哪些亿级 DAU 规模的移动应用？",{"type":173,"tag":201,"props":369,"children":370},{},[371],{"type":179,"value":372},"POE Assistant：以下是一些拥有亿级日活跃用户（DAU）规模的知名移动应用的例子（截至2021年）",{"type":173,"tag":298,"props":374,"children":375},{},[376,381,386,391,396,401,406],{"type":173,"tag":186,"props":377,"children":378},{},[379],{"type":179,"value":380},"Facebook：Facebook是全球最大的社交媒体平台，拥有超过20亿月活跃用户，其中大部分用户通过移动应用进行访问。",{"type":173,"tag":186,"props":382,"children":383},{},[384],{"type":179,"value":385},"WhatsApp：WhatsApp是一款全球领先的即时通讯应用程序，每天有超过20亿用户使用该应用进行消息传递和语音通话。",{"type":173,"tag":186,"props":387,"children":388},{},[389],{"type":179,"value":390},"WeChat（微信）：WeChat是中国最流行的社交媒体和消息应用之一，拥有超过10亿活跃用户。它提供了聊天、社交、支付、游戏和其他功能。",{"type":173,"tag":186,"props":392,"children":393},{},[394],{"type":179,"value":395},"TikTok（抖音）：TikTok是一款全球流行的短视频社交平台，拥有超过10亿用户。它提供了用户生成的短视频内容，吸引了大量的年轻用户。",{"type":173,"tag":186,"props":397,"children":398},{},[399],{"type":179,"value":400},"Instagram：Instagram是一款图片和视频分享社交平台，拥有超过10亿用户。它提供了用户上传和编辑照片、视频以及与其他用户互动的功能。",{"type":173,"tag":186,"props":402,"children":403},{},[404],{"type":179,"value":405},"Snapchat：Snapchat是一款以瞬间分享和自动消失的照片和视频为特点的移动应用，拥有超过5亿用户。",{"type":173,"tag":186,"props":407,"children":408},{},[409],{"type":179,"value":410},"Twitter：Twitter是一款全球知名的社交媒体平台，用户可以发布和阅读短消息（推文）。它拥有超过3亿的活跃用户。",{"type":173,"tag":226,"props":412,"children":414},{"id":413},"如何按照规模和变更速度将软件企业划分为四个象限",[415],{"type":179,"value":416},"如何按照规模和变更速度将软件企业划分为四个象限？",{"type":173,"tag":201,"props":418,"children":419},{},[420],{"type":179,"value":421},"援引 Netflix 的说法，按照规模大小、变更速度的快慢可以将软件划分为：互联网企业（规模大、变化快）、初创公司（规模小、变化快）、电信业务（规模大、变化慢）、企业 IT（规模小、变化慢）。",{"type":173,"tag":201,"props":423,"children":424},{},[425],{"type":179,"value":426},"初创公司面临软件失败的风险、电信业务面临硬件失败风险，企业 IT 要面对来自市场的冲击，而互联网企业是最危险的“Everything is Broken”。",{"type":173,"tag":226,"props":428,"children":430},{"id":429},"什么是虚拟化技术",[431],{"type":179,"value":432},"什么是虚拟化技术？",{"type":173,"tag":201,"props":434,"children":435},{},[436],{"type":179,"value":437},"虚拟化技术是一种资源管理技术，它可以将一台计算机的各种资源，如处理器、内存、硬盘、网络接口卡等，抽象、转换后提供给多个用户和应用程序使用。",{"type":173,"tag":226,"props":439,"children":441},{"id":440},"最早的容器技术",[442],{"type":179,"value":443},"最早的容器技术？",{"type":173,"tag":201,"props":445,"children":446},{},[447],{"type":179,"value":448},"Chroot Jail；使用 chroot 系统调用将进程的 root 目录重定向到新位置，仪表创造独立的环境用于软件编译、测试以及安装。",{"type":173,"tag":226,"props":450,"children":452},{"id":451},"linux-容器是什么",[453],{"type":179,"value":454},"Linux 容器是什么？",{"type":173,"tag":201,"props":456,"children":457},{},[458],{"type":179,"value":459},"LXC，Linux Container；Google 推出的进程容器合并进入 Linux 内核后重命名为 Control Groups，它允许给进程提供操作系统级别的资源限制、优先级控制、审计能力。配合 namepace 称为 LXC，再配合安全防护机制形成了容器运行环境隔离的容器核心能力。",{"type":173,"tag":226,"props":461,"children":463},{"id":462},"docker-继-lxc-解决的问题是",[464],{"type":179,"value":465},"Docker 继 LXC 解决的问题是？",{"type":173,"tag":201,"props":467,"children":468},{},[469],{"type":179,"value":470},"Docker 封装了应用程序的代码、依赖、工具、资源文件和元信息，可以做到将应用分发到任意平台或运行环境，即“Build once，Ship and Run Anywhere”",{"type":173,"tag":201,"props":472,"children":473},{},[474],{"type":173,"tag":475,"props":476,"children":479},"img",{"alt":477,"src":478},"Docker","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20231118201706.png",[],{"type":173,"tag":226,"props":481,"children":483},{"id":482},"为什么称-kubernetes-成了容器编排事实标准",[484],{"type":179,"value":485},"为什么称 Kubernetes 成了容器编排事实标准？",{"type":173,"tag":201,"props":487,"children":488},{},[489],{"type":179,"value":490},"在于 Docker Swarm、Apache Mesos 的斗争中，K8s 没有历史包袱，预置了服务发现、容器网格等关键特性，并提供了用于描述集群架构、定义服务状态的声明式 API，帮助系统维持在这个状态，有明显的后发优势。最重要的是，K8s 拥有一套稳定可扩展的 API 盘活了生态。",{"type":173,"tag":226,"props":492,"children":494},{"id":493},"容器兴起和编排大战的三个里程碑",[495],{"type":179,"value":496},"容器兴起和编排大战的三个里程碑？",{"type":173,"tag":298,"props":498,"children":499},{},[500,505,510],{"type":173,"tag":186,"props":501,"children":502},{},[503],{"type":179,"value":504},"2013 ，Doocker 发布，云计算进入容器时代",{"type":173,"tag":186,"props":506,"children":507},{},[508],{"type":179,"value":509},"2017 ，K8s 赢得容器编排的胜利，云计算进入 K8s 时代",{"type":173,"tag":186,"props":511,"children":512},{},[513],{"type":179,"value":514},"2018，Istio 发布，服务网格的理念走向成熟",{"type":173,"tag":226,"props":516,"children":518},{"id":517},"oci-和-cncf-的关系",[519],{"type":179,"value":520},"OCI 和 CNCF 的关系？",{"type":173,"tag":201,"props":522,"children":523},{},[524],{"type":179,"value":525},"合作关系。",{"type":173,"tag":201,"props":527,"children":528},{},[529],{"type":179,"value":530},"TODO",{"type":173,"tag":226,"props":532,"children":534},{"id":533},"微服务带来了哪些技术挑战",[535],{"type":179,"value":536},"微服务带来了哪些技术挑战？",{"type":173,"tag":201,"props":538,"children":539},{},[540],{"type":179,"value":541},"服务发现、服务熔断、负载均衡和通讯相关问题。通讯包括调用协议、加密、认证、鉴权等。",{"type":173,"tag":226,"props":543,"children":545},{"id":544},"什么是服务网格",[546],{"type":179,"value":547},"什么是服务网格？",{"type":173,"tag":201,"props":549,"children":550},{},[551],{"type":179,"value":552},"服务网格是云原生的基础设施，用于云原生应用微服务组成的的复杂拓扑结构下的可靠请求传送。在实践中，它是一组和应用服务部署在一起的轻量级网络代理（Sidecar）。",{"type":173,"tag":226,"props":554,"children":556},{"id":555},"istio-初始架构是怎样的",[557],{"type":179,"value":558},"Istio 初始架构是怎样的？",{"type":173,"tag":201,"props":560,"children":561},{},[562],{"type":179,"value":563},"Istio 分为数据平面和控制平面。数据平面使用轻量级 Sidecar 如 Envoy 协调与控制服务之间的通信和流量处理；控制平面负责配置和管理数据平面，以及提供服务发现、智能路由、流量控制、安全控制等功能。",{"type":173,"tag":226,"props":565,"children":567},{"id":566},"sidecar-面临的问题或者说缺陷是",[568],{"type":179,"value":569},"Sidecar 面临的问题或者说缺陷是？",{"type":173,"tag":298,"props":571,"children":572},{},[573,578],{"type":173,"tag":186,"props":574,"children":575},{},[576],{"type":179,"value":577},"在规模巨大化的服务集群下，网络通信的拓扑结构非常复杂，对作为独立容器的 Sidecar 下发配置会导致内存剧烈增长；",{"type":173,"tag":186,"props":579,"children":580},{},[581],{"type":179,"value":582},"某些性能要求极高的业务场景，毫秒级别的延迟也不能接受。",{"type":173,"tag":201,"props":584,"children":585},{},[586],{"type":179,"value":587},"作为改进，Proxyless 模式可以去 Sidecard 容器、消除跨进程调用，并降低延迟。但本质上，它只是使用 Istio Agent 把服务注册等工作和 gRPC  等框架绑定在了一起。",{"type":173,"tag":226,"props":589,"children":591},{"id":590},"sidecarless-模式是什么",[592],{"type":179,"value":593},"Sidecarless 模式是什么？",{"type":173,"tag":201,"props":595,"children":596},{},[597],{"type":179,"value":598},"通过 Agent（代理）、注入式库或者云原生平台功能将 Sidecar 干掉。从原理来说，在 L4 和 L7 分别建立用途不一样的代理，托管不同的流量。L4 层建立了 TCP 路由，有简单的鉴权机制，使用 eBFP 通讯，能观测 TCP 指标和日志。L7 层建立了 HTTP 路由，有完善的鉴权。\nIstio 未来的发展方向就是完善 Ambient Mesh（一种无边车模式的实现）。其使用 DaemonSet 部署 Waypoint Proxy 作为 L7 代理，而在 L4 使用 ztunnel。",{"type":173,"tag":226,"props":600,"children":602},{"id":601},"不可变基础设施的核心思想是",[603],{"type":179,"value":604},"不可变基础设施的核心思想是？",{"type":173,"tag":201,"props":606,"children":607},{},[608],{"type":179,"value":609},"不可变基础设施的核心思想是基础设施的示例一旦创建就变成只读状态，如果需要修改或省级，应先修改配置模板，在根据模板创建新示例并替换旧实例。",{"type":173,"tag":226,"props":611,"children":613},{"id":612},"不可变基础设施能解决什么问题",[614],{"type":179,"value":615},"不可变基础设施能解决什么问题？",{"type":173,"tag":201,"props":617,"children":618},{},[619],{"type":179,"value":620},"以解决传统运维时代需要大量手工操作带来的构建难以自动化，以及环境变量改变等问题。其最大的优势是“一致性”，使基础设施管理简单、可部署、可规模化、可恢复，也提高了安全性。",{"title":166,"searchDepth":622,"depth":622,"links":623},2,[624,625,626],{"id":176,"depth":622,"text":180},{"id":168,"depth":622,"text":168},{"id":215,"depth":622,"text":218,"children":627},[628],{"id":222,"depth":629,"text":222},3,"markdown","content:6.maps:_cloud-native:cloud-native.md","content","6.maps/_cloud-native/cloud-native.md","6.maps/_cloud-native/cloud-native","md",[637,641],{"_path":638,"title":639,"description":640},"/maps/_cli/ffmpeg","ffmpeg & imagemagick","最常使用的视频和图片处理工具。",{"_path":192,"title":195,"description":642},"K8s，是一个基于容器的集群管理平台，主要用于控制容器",1749721432296]