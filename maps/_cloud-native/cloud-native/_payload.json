[{"data":1,"prerenderedAt":640},["ShallowReactive",2],{"navigation":3,"/maps/_cloud-native/cloud-native":158,"/maps/_cloud-native/cloud-native-surround":633},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":627,"_id":628,"_source":629,"_file":630,"_stem":631,"_extension":632},"/maps/_cloud-native/cloud-native","_cloud-native",false,true,"","CloudNative","云原生技术概论",{"type":167,"children":168,"toc":618},"root",[169,178,193,197,210,216,222,229,234,246,252,257,263,268,274,279,288,294,348,354,359,365,370,408,414,419,424,430,435,441,446,452,457,463,468,477,483,488,494,512,518,523,528,534,539,545,550,556,561,567,580,585,591,596,602,607,613],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"components",[175],{"type":176,"value":177},"text","Components",{"type":170,"tag":179,"props":180,"children":181},"ul",{},[182],{"type":170,"tag":183,"props":184,"children":185},"li",{},[186],{"type":170,"tag":187,"props":188,"children":190},"a",{"href":189},"/maps/_cloud-native/kubernetes",[191],{"type":176,"value":192},"Kubernetes",{"type":170,"tag":171,"props":194,"children":195},{"id":165},[196],{"type":176,"value":165},{"type":170,"tag":198,"props":199,"children":200},"p",{},[201,203],{"type":176,"value":202},"● 云原生技术概览：",{"type":170,"tag":187,"props":204,"children":208},{"href":205,"rel":206},"https://www.thebyte.com.cn/architecture/summary.html",[207],"nofollow",[209],{"type":176,"value":205},{"type":170,"tag":171,"props":211,"children":213},{"id":212},"quick-question",[214],{"type":176,"value":215},"Quick Question",{"type":170,"tag":217,"props":218,"children":220},"h3",{"id":219},"云原生",[221],{"type":176,"value":219},{"type":170,"tag":223,"props":224,"children":226},"h4",{"id":225},"云原生是什么",[227],{"type":176,"value":228},"云原生是什么？",{"type":170,"tag":198,"props":230,"children":231},{},[232],{"type":176,"value":233},"云原生是一种架构理论，旨在充分发挥云平台的弹性和分布式优势，构建在云上以最佳姿势运行应用程序。",{"type":170,"tag":198,"props":235,"children":236},{},[237,239],{"type":176,"value":238},"见：",{"type":170,"tag":187,"props":240,"children":243},{"href":241,"rel":242},"https://zhuanlan.zhihu.com/p/150190166",[207],[244],{"type":176,"value":245},"什么是云原生？",{"type":170,"tag":223,"props":247,"children":249},{"id":248},"云原生架构的特点是什么",[250],{"type":176,"value":251},"云原生架构的特点是什么？",{"type":170,"tag":198,"props":253,"children":254},{},[255],{"type":176,"value":256},"基于微服务架构，配合服务网格，降低业务单体的复杂性；借助敏捷方法和 DevOps 方法提高迭代效率，同时采用 K8S + 容器支持运维自动化；最后，利用云平台基础设施提供的声明式基础设施配置，实现资源的弹性伸缩、动态调度，提高资源利用率。",{"type":170,"tag":223,"props":258,"children":260},{"id":259},"云原生不可能三角",[261],{"type":176,"value":262},"云原生不可能三角？",{"type":170,"tag":198,"props":264,"children":265},{},[266],{"type":176,"value":267},"高可用、规模化、敏捷；其间关系分别可戏称为大象起舞、空中换发和巨人绣花。",{"type":170,"tag":223,"props":269,"children":271},{"id":270},"云原生架构的定义",[272],{"type":176,"value":273},"云原生架构的定义？",{"type":170,"tag":198,"props":275,"children":276},{},[277],{"type":176,"value":278},"云原生基金会 CNCF 给出的云原生的定义的 V1 版本。",{"type":170,"tag":280,"props":281,"children":282},"blockquote",{},[283],{"type":170,"tag":198,"props":284,"children":285},{},[286],{"type":176,"value":287},"云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。\n云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。",{"type":170,"tag":223,"props":289,"children":291},{"id":290},"云原生架构相关哪些技术",[292],{"type":176,"value":293},"云原生架构相关哪些技术？",{"type":170,"tag":295,"props":296,"children":297},"ol",{},[298,303,308,313,318,323,328,333,338,343],{"type":170,"tag":183,"props":299,"children":300},{},[301],{"type":176,"value":302},"容器和镜像：Docker、Containerd、CRI-O、Kata Containers",{"type":170,"tag":183,"props":304,"children":305},{},[306],{"type":176,"value":307},"镜像仓库：Harbor、Nydus",{"type":170,"tag":183,"props":309,"children":310},{},[311],{"type":176,"value":312},"应用封装：Kustomize、Helm",{"type":170,"tag":183,"props":314,"children":315},{},[316],{"type":176,"value":317},"持续集成：Gitlab、Tekton",{"type":170,"tag":183,"props":319,"children":320},{},[321],{"type":176,"value":322},"持续部署：FluxCD、argoCD",{"type":170,"tag":183,"props":324,"children":325},{},[326],{"type":176,"value":327},"容器编排：Kubernetes",{"type":170,"tag":183,"props":329,"children":330},{},[331],{"type":176,"value":332},"网关：Ingress-Nginx、APISIX",{"type":170,"tag":183,"props":334,"children":335},{},[336],{"type":176,"value":337},"日志：Fluentd、Grafana Loki",{"type":170,"tag":183,"props":339,"children":340},{},[341],{"type":176,"value":342},"监控：Grafana、Prometheus",{"type":170,"tag":183,"props":344,"children":345},{},[346],{"type":176,"value":347},"应用开发：Nocalhost",{"type":170,"tag":223,"props":349,"children":351},{"id":350},"从架构发展来看用户和平台的关注点是怎么变化的",[352],{"type":176,"value":353},"从架构发展来看，用户和平台的关注点是怎么变化的？",{"type":170,"tag":198,"props":355,"children":356},{},[357],{"type":176,"value":358},"从用户自建、IaaS、PaaS、SaaS 到 FaaS，客户和平台关注的东西并不一样。\n以 SaaS 举例，客户只需要关注数据，而平台关注包括应用程序、应用依赖、中间件、操作系统、虚拟化服务器、存储、网格等其余所有基础设施。",{"type":170,"tag":223,"props":360,"children":362},{"id":361},"有哪些亿级-dau-规模的移动应用",[363],{"type":176,"value":364},"有哪些亿级 DAU 规模的移动应用？",{"type":170,"tag":198,"props":366,"children":367},{},[368],{"type":176,"value":369},"POE Assistant：以下是一些拥有亿级日活跃用户（DAU）规模的知名移动应用的例子（截至2021年）",{"type":170,"tag":295,"props":371,"children":372},{},[373,378,383,388,393,398,403],{"type":170,"tag":183,"props":374,"children":375},{},[376],{"type":176,"value":377},"Facebook：Facebook是全球最大的社交媒体平台，拥有超过20亿月活跃用户，其中大部分用户通过移动应用进行访问。",{"type":170,"tag":183,"props":379,"children":380},{},[381],{"type":176,"value":382},"WhatsApp：WhatsApp是一款全球领先的即时通讯应用程序，每天有超过20亿用户使用该应用进行消息传递和语音通话。",{"type":170,"tag":183,"props":384,"children":385},{},[386],{"type":176,"value":387},"WeChat（微信）：WeChat是中国最流行的社交媒体和消息应用之一，拥有超过10亿活跃用户。它提供了聊天、社交、支付、游戏和其他功能。",{"type":170,"tag":183,"props":389,"children":390},{},[391],{"type":176,"value":392},"TikTok（抖音）：TikTok是一款全球流行的短视频社交平台，拥有超过10亿用户。它提供了用户生成的短视频内容，吸引了大量的年轻用户。",{"type":170,"tag":183,"props":394,"children":395},{},[396],{"type":176,"value":397},"Instagram：Instagram是一款图片和视频分享社交平台，拥有超过10亿用户。它提供了用户上传和编辑照片、视频以及与其他用户互动的功能。",{"type":170,"tag":183,"props":399,"children":400},{},[401],{"type":176,"value":402},"Snapchat：Snapchat是一款以瞬间分享和自动消失的照片和视频为特点的移动应用，拥有超过5亿用户。",{"type":170,"tag":183,"props":404,"children":405},{},[406],{"type":176,"value":407},"Twitter：Twitter是一款全球知名的社交媒体平台，用户可以发布和阅读短消息（推文）。它拥有超过3亿的活跃用户。",{"type":170,"tag":223,"props":409,"children":411},{"id":410},"如何按照规模和变更速度将软件企业划分为四个象限",[412],{"type":176,"value":413},"如何按照规模和变更速度将软件企业划分为四个象限？",{"type":170,"tag":198,"props":415,"children":416},{},[417],{"type":176,"value":418},"援引 Netflix 的说法，按照规模大小、变更速度的快慢可以将软件划分为：互联网企业（规模大、变化快）、初创公司（规模小、变化快）、电信业务（规模大、变化慢）、企业 IT（规模小、变化慢）。",{"type":170,"tag":198,"props":420,"children":421},{},[422],{"type":176,"value":423},"初创公司面临软件失败的风险、电信业务面临硬件失败风险，企业 IT 要面对来自市场的冲击，而互联网企业是最危险的“Everything is Broken”。",{"type":170,"tag":223,"props":425,"children":427},{"id":426},"什么是虚拟化技术",[428],{"type":176,"value":429},"什么是虚拟化技术？",{"type":170,"tag":198,"props":431,"children":432},{},[433],{"type":176,"value":434},"虚拟化技术是一种资源管理技术，它可以将一台计算机的各种资源，如处理器、内存、硬盘、网络接口卡等，抽象、转换后提供给多个用户和应用程序使用。",{"type":170,"tag":223,"props":436,"children":438},{"id":437},"最早的容器技术",[439],{"type":176,"value":440},"最早的容器技术？",{"type":170,"tag":198,"props":442,"children":443},{},[444],{"type":176,"value":445},"Chroot Jail；使用 chroot 系统调用将进程的 root 目录重定向到新位置，仪表创造独立的环境用于软件编译、测试以及安装。",{"type":170,"tag":223,"props":447,"children":449},{"id":448},"linux-容器是什么",[450],{"type":176,"value":451},"Linux 容器是什么？",{"type":170,"tag":198,"props":453,"children":454},{},[455],{"type":176,"value":456},"LXC，Linux Container；Google 推出的进程容器合并进入 Linux 内核后重命名为 Control Groups，它允许给进程提供操作系统级别的资源限制、优先级控制、审计能力。配合 namepace 称为 LXC，再配合安全防护机制形成了容器运行环境隔离的容器核心能力。",{"type":170,"tag":223,"props":458,"children":460},{"id":459},"docker-继-lxc-解决的问题是",[461],{"type":176,"value":462},"Docker 继 LXC 解决的问题是？",{"type":170,"tag":198,"props":464,"children":465},{},[466],{"type":176,"value":467},"Docker 封装了应用程序的代码、依赖、工具、资源文件和元信息，可以做到将应用分发到任意平台或运行环境，即“Build once，Ship and Run Anywhere”",{"type":170,"tag":198,"props":469,"children":470},{},[471],{"type":170,"tag":472,"props":473,"children":476},"img",{"alt":474,"src":475},"Docker","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20231118201706.png",[],{"type":170,"tag":223,"props":478,"children":480},{"id":479},"为什么称-kubernetes-成了容器编排事实标准",[481],{"type":176,"value":482},"为什么称 Kubernetes 成了容器编排事实标准？",{"type":170,"tag":198,"props":484,"children":485},{},[486],{"type":176,"value":487},"在于 Docker Swarm、Apache Mesos 的斗争中，K8s 没有历史包袱，预置了服务发现、容器网格等关键特性，并提供了用于描述集群架构、定义服务状态的声明式 API，帮助系统维持在这个状态，有明显的后发优势。最重要的是，K8s 拥有一套稳定可扩展的 API 盘活了生态。",{"type":170,"tag":223,"props":489,"children":491},{"id":490},"容器兴起和编排大战的三个里程碑",[492],{"type":176,"value":493},"容器兴起和编排大战的三个里程碑？",{"type":170,"tag":295,"props":495,"children":496},{},[497,502,507],{"type":170,"tag":183,"props":498,"children":499},{},[500],{"type":176,"value":501},"2013 ，Doocker 发布，云计算进入容器时代",{"type":170,"tag":183,"props":503,"children":504},{},[505],{"type":176,"value":506},"2017 ，K8s 赢得容器编排的胜利，云计算进入 K8s 时代",{"type":170,"tag":183,"props":508,"children":509},{},[510],{"type":176,"value":511},"2018，Istio 发布，服务网格的理念走向成熟",{"type":170,"tag":223,"props":513,"children":515},{"id":514},"oci-和-cncf-的关系",[516],{"type":176,"value":517},"OCI 和 CNCF 的关系？",{"type":170,"tag":198,"props":519,"children":520},{},[521],{"type":176,"value":522},"合作关系。",{"type":170,"tag":198,"props":524,"children":525},{},[526],{"type":176,"value":527},"TODO",{"type":170,"tag":223,"props":529,"children":531},{"id":530},"微服务带来了哪些技术挑战",[532],{"type":176,"value":533},"微服务带来了哪些技术挑战？",{"type":170,"tag":198,"props":535,"children":536},{},[537],{"type":176,"value":538},"服务发现、服务熔断、负载均衡和通讯相关问题。通讯包括调用协议、加密、认证、鉴权等。",{"type":170,"tag":223,"props":540,"children":542},{"id":541},"什么是服务网格",[543],{"type":176,"value":544},"什么是服务网格？",{"type":170,"tag":198,"props":546,"children":547},{},[548],{"type":176,"value":549},"服务网格是云原生的基础设施，用于云原生应用微服务组成的的复杂拓扑结构下的可靠请求传送。在实践中，它是一组和应用服务部署在一起的轻量级网络代理（Sidecar）。",{"type":170,"tag":223,"props":551,"children":553},{"id":552},"istio-初始架构是怎样的",[554],{"type":176,"value":555},"Istio 初始架构是怎样的？",{"type":170,"tag":198,"props":557,"children":558},{},[559],{"type":176,"value":560},"Istio 分为数据平面和控制平面。数据平面使用轻量级 Sidecar 如 Envoy 协调与控制服务之间的通信和流量处理；控制平面负责配置和管理数据平面，以及提供服务发现、智能路由、流量控制、安全控制等功能。",{"type":170,"tag":223,"props":562,"children":564},{"id":563},"sidecar-面临的问题或者说缺陷是",[565],{"type":176,"value":566},"Sidecar 面临的问题或者说缺陷是？",{"type":170,"tag":295,"props":568,"children":569},{},[570,575],{"type":170,"tag":183,"props":571,"children":572},{},[573],{"type":176,"value":574},"在规模巨大化的服务集群下，网络通信的拓扑结构非常复杂，对作为独立容器的 Sidecar 下发配置会导致内存剧烈增长；",{"type":170,"tag":183,"props":576,"children":577},{},[578],{"type":176,"value":579},"某些性能要求极高的业务场景，毫秒级别的延迟也不能接受。",{"type":170,"tag":198,"props":581,"children":582},{},[583],{"type":176,"value":584},"作为改进，Proxyless 模式可以去 Sidecard 容器、消除跨进程调用，并降低延迟。但本质上，它只是使用 Istio Agent 把服务注册等工作和 gRPC  等框架绑定在了一起。",{"type":170,"tag":223,"props":586,"children":588},{"id":587},"sidecarless-模式是什么",[589],{"type":176,"value":590},"Sidecarless 模式是什么？",{"type":170,"tag":198,"props":592,"children":593},{},[594],{"type":176,"value":595},"通过 Agent（代理）、注入式库或者云原生平台功能将 Sidecar 干掉。从原理来说，在 L4 和 L7 分别建立用途不一样的代理，托管不同的流量。L4 层建立了 TCP 路由，有简单的鉴权机制，使用 eBFP 通讯，能观测 TCP 指标和日志。L7 层建立了 HTTP 路由，有完善的鉴权。\nIstio 未来的发展方向就是完善 Ambient Mesh（一种无边车模式的实现）。其使用 DaemonSet 部署 Waypoint Proxy 作为 L7 代理，而在 L4 使用 ztunnel。",{"type":170,"tag":223,"props":597,"children":599},{"id":598},"不可变基础设施的核心思想是",[600],{"type":176,"value":601},"不可变基础设施的核心思想是？",{"type":170,"tag":198,"props":603,"children":604},{},[605],{"type":176,"value":606},"不可变基础设施的核心思想是基础设施的示例一旦创建就变成只读状态，如果需要修改或省级，应先修改配置模板，在根据模板创建新示例并替换旧实例。",{"type":170,"tag":223,"props":608,"children":610},{"id":609},"不可变基础设施能解决什么问题",[611],{"type":176,"value":612},"不可变基础设施能解决什么问题？",{"type":170,"tag":198,"props":614,"children":615},{},[616],{"type":176,"value":617},"以解决传统运维时代需要大量手工操作带来的构建难以自动化，以及环境变量改变等问题。其最大的优势是“一致性”，使基础设施管理简单、可部署、可规模化、可恢复，也提高了安全性。",{"title":163,"searchDepth":619,"depth":619,"links":620},2,[621,622,623],{"id":173,"depth":619,"text":177},{"id":165,"depth":619,"text":165},{"id":212,"depth":619,"text":215,"children":624},[625],{"id":219,"depth":626,"text":219},3,"markdown","content:6.maps:_cloud-native:cloud-native.md","content","6.maps/_cloud-native/cloud-native.md","6.maps/_cloud-native/cloud-native","md",[634,638],{"_path":635,"title":636,"description":637},"/maps/_cli/ffmpeg","ffmpeg & imagemagick","最常使用的视频和图片处理工具。",{"_path":189,"title":192,"description":639},"K8s，是一个基于容器的集群管理平台，主要用于控制容器",1742958681485]