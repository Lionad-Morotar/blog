[{"data":1,"prerenderedAt":873},["ShallowReactive",2],{"navigation":3,"/maps/_cloud-native/cloud-native":410,"/maps/_cloud-native/cloud-native-surround":865},[4,32,83,102,129,135,141,147,393,399,405],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96,99],{"title":88,"_path":89},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":91,"_path":92},"🌐 AnySort","/tools/anysort",{"title":94,"_path":95},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":97,"_path":98},"👓 Crapto","/tools/crypto-inline",{"title":100,"_path":101},"🖨️ any-to-base64","/tools/any-to-base64",{"title":103,"_path":104,"children":105},"吉他剧场 / Music","/music",[106,108,111,114,117,120,123,126],{"title":107,"_path":104},"🎸 FingerStyle！",{"title":109,"_path":110},"🌬️ 等待的风","/music/wind",{"title":112,"_path":113},"💕 约定的海洋","/music/ocean",{"title":115,"_path":116},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":118,"_path":119},"🌏 残酷天使的行动纲领","/music/eva",{"title":121,"_path":122},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":124,"_path":125},"🍷 Wu Wei","/music/wu-wei",{"title":127,"_path":128},"🌅 无题","/music/untitled",{"title":130,"_path":131,"children":132},"画点什么 / Paint","/paint",[133],{"title":134,"_path":131},"🚧 正在施工",{"title":136,"_path":137,"children":138},"读书笔记 / Notes","/books",[139],{"title":140,"_path":137},"📕 读书笔记",{"title":142,"_path":143,"children":144},"知识地图 / Maps","/maps",[145],{"title":146,"_path":143},"🏁 知识地图",{"title":148,"_path":149,"children":150},"零散的笔记 / Gists","/gists",[151,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"title":152,"_path":149},"🧊 Gists",{"title":154,"_path":155},"网站的可访问性","/gists/accessibility",{"title":157,"_path":158},"Bit","/gists/bit",{"title":160,"_path":161},"图片模糊","/gists/blur",{"title":163,"_path":164},"渲染相关笔记","/gists/c4d",{"title":166,"_path":167},"CDN 问题记录","/gists/cdn",{"title":169,"_path":170},"消毒剂","/gists/cleaner",{"title":172,"_path":173},"Windows Command","/gists/cmd",{"title":175,"_path":176},"Command","/gists/command",{"title":178,"_path":179},"复杂科学","/gists/complexity-science",{"title":181,"_path":182},"GitHub Copilot","/gists/copilot",{"title":184,"_path":185},"宇宙","/gists/cosmos",{"title":187,"_path":188},"C++","/gists/cpp",{"title":190,"_path":191},"Data Structure","/gists/data-structure",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"设计模式","/gists/design-patterns",{"title":199,"_path":200},"Developer Experience","/gists/developer-experience",{"title":202,"_path":203},"Device Metrics","/gists/device-metrix",{"title":205,"_path":206},"数字化转型","/gists/digital-transformation",{"title":208,"_path":209},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":211,"_path":212},"正则表达式","/gists/eegex",{"title":214,"_path":215},"Emoji","/gists/emoji",{"title":217,"_path":218},"工程","/gists/engineering",{"title":220,"_path":221},"熵","/gists/entropy",{"title":223,"_path":224},"Environment","/gists/environment",{"title":226,"_path":227},"Erlang","/gists/erlang",{"title":229,"_path":230},"逃离塔克夫","/gists/escape-from-tarkov",{"title":232,"_path":233},"ESNext (ES6-ES11)","/gists/esnext",{"title":235,"_path":236},"Eval！","/gists/eval",{"title":238,"_path":239},"Flutter","/gists/flutter",{"title":241,"_path":242},"字体","/gists/font",{"title":244,"_path":245},"JS 函数式编程","/gists/functional",{"title":247,"_path":248},"游戏化","/gists/gamification",{"title":250,"_path":251},"Google C++ Standard","/gists/google-cpp-standard",{"title":253,"_path":254},"双向链接完全体","/gists/graph",{"title":256,"_path":257},"Hardwares","/gists/hardwares",{"title":259,"_path":260},"哈希冲突","/gists/hash-collision",{"title":262,"_path":263},"信息设计","/gists/information-design",{"title":265,"_path":266},"InstantPage","/gists/instant.page",{"title":268,"_path":269},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":271,"_path":272},"KVStore","/gists/key-value-db",{"title":274,"_path":275},"Kubernetes","/gists/kubernetes",{"title":277,"_path":278},"Makefile","/gists/makefile",{"title":280,"_path":281},"Markdown Inline Style","/gists/markdown-nice",{"title":283,"_path":284},"小程序","/gists/miniapp",{"title":286,"_path":287},"减小页面快照体积","/gists/minify-html",{"title":289,"_path":290},"mklink","/gists/mklink",{"title":292,"_path":293},"Mock","/gists/mock",{"title":295,"_path":296},"多人协作系统","/gists/multiplayer",{"title":298,"_path":299},"多端应用","/gists/multy-end-app",{"title":301,"_path":302},"神经科学","/gists/neuroscience",{"title":304,"_path":305},"OO","/gists/oo",{"title":307,"_path":308},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":310,"_path":311},"PInvoke","/gists/pinvoke",{"title":313,"_path":314},"像素","/gists/pixel",{"title":316,"_path":317},"PowerShell","/gists/powershell",{"title":319,"_path":320},"量子","/gists/quantum",{"title":322,"_path":323},"保持好奇心","/gists/questions",{"title":325,"_path":326},"React Native","/gists/react-native",{"title":328,"_path":329},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":331,"_path":332},"SEO","/gists/seo",{"title":334,"_path":335},"Shader","/gists/shader",{"title":337,"_path":338},"Shape Up","/gists/shape-up",{"title":340,"_path":341},"睡觉","/gists/sleep",{"title":343,"_path":344},"记录奇怪的问题","/gists/solved",{"title":346,"_path":347},"States","/gists/states",{"title":349,"_path":350},"Storage","/gists/storage",{"title":352,"_path":353},"音视频流处理","/gists/stream-cli",{"title":355,"_path":356},"Symbol","/gists/symbol",{"title":358,"_path":359},"系统论","/gists/systems-theory",{"title":361,"_path":362},"Taro","/gists/taro",{"title":364,"_path":365},"任务切片","/gists/task-slice",{"title":367,"_path":368},"技术偏好","/gists/tech-dudge",{"title":370,"_path":371},"Untitled","/gists/untitled",{"title":373,"_path":374},"可变字体","/gists/variable-font",{"title":376,"_path":377},"视觉错觉","/gists/visual-illusion",{"title":379,"_path":380},"SS(SSR)","/gists/vpn",{"title":382,"_path":383},"VS Code 插件开发","/gists/vscode-plugin",{"title":385,"_path":386},"Web Components","/gists/web-components",{"title":388,"_path":389},"Windows","/gists/windows",{"title":391,"_path":392},"查缺补漏","/gists/wrong",{"title":394,"_path":395,"children":396},"代码笔记 / Gists","/source-code",[397],{"title":398,"_path":395},"🚄 代码笔记",{"title":400,"_path":401,"children":402},"我 / Abount","/hire",[403],{"title":404,"_path":401},"📬 技术简历",{"title":406,"_path":407,"children":408},"todo","/todo",[409],{"title":406,"_path":407},{"_path":411,"_dir":412,"_draft":413,"_partial":414,"_locale":415,"title":416,"description":417,"body":418,"_type":859,"_id":860,"_source":861,"_file":862,"_stem":863,"_extension":864},"/maps/_cloud-native/cloud-native","_cloud-native",false,true,"","CloudNative","云原生技术概论",{"type":419,"children":420,"toc":851},"root",[421,428,442,448,454,461,466,478,484,489,495,500,506,511,520,526,581,587,592,598,603,641,647,652,657,663,668,674,679,685,690,696,701,710,716,721,727,745,751,756,761,767,772,778,783,789,794,800,813,818,824,829,835,840,846],{"type":422,"tag":423,"props":424,"children":425},"element","h2",{"id":417},[426],{"type":427,"value":417},"text",{"type":422,"tag":429,"props":430,"children":431},"p",{},[432,434],{"type":427,"value":433},"● 云原生技术概览：",{"type":422,"tag":435,"props":436,"children":440},"a",{"href":437,"rel":438},"https://www.thebyte.com.cn/architecture/summary.html",[439],"nofollow",[441],{"type":427,"value":437},{"type":422,"tag":423,"props":443,"children":445},{"id":444},"quick-question",[446],{"type":427,"value":447},"Quick Question",{"type":422,"tag":449,"props":450,"children":452},"h3",{"id":451},"云原生",[453],{"type":427,"value":451},{"type":422,"tag":455,"props":456,"children":458},"h4",{"id":457},"云原生是什么",[459],{"type":427,"value":460},"云原生是什么？",{"type":422,"tag":429,"props":462,"children":463},{},[464],{"type":427,"value":465},"云原生是一种架构理论，旨在充分发挥云平台的弹性和分布式优势，构建在云上以最佳姿势运行应用程序。",{"type":422,"tag":429,"props":467,"children":468},{},[469,471],{"type":427,"value":470},"见：",{"type":422,"tag":435,"props":472,"children":475},{"href":473,"rel":474},"https://zhuanlan.zhihu.com/p/150190166",[439],[476],{"type":427,"value":477},"什么是云原生？",{"type":422,"tag":455,"props":479,"children":481},{"id":480},"云原生架构的特点是什么",[482],{"type":427,"value":483},"云原生架构的特点是什么？",{"type":422,"tag":429,"props":485,"children":486},{},[487],{"type":427,"value":488},"基于微服务架构，配合服务网格，降低业务单体的复杂性；借助敏捷方法和 DevOps 方法提高迭代效率，同时采用 K8S + 容器支持运维自动化；最后，利用云平台基础设施提供的声明式基础设施配置，实现资源的弹性伸缩、动态调度，提高资源利用率。",{"type":422,"tag":455,"props":490,"children":492},{"id":491},"云原生不可能三角",[493],{"type":427,"value":494},"云原生不可能三角？",{"type":422,"tag":429,"props":496,"children":497},{},[498],{"type":427,"value":499},"高可用、规模化、敏捷；其间关系分别可戏称为大象起舞、空中换发和巨人绣花。",{"type":422,"tag":455,"props":501,"children":503},{"id":502},"云原生架构的定义",[504],{"type":427,"value":505},"云原生架构的定义？",{"type":422,"tag":429,"props":507,"children":508},{},[509],{"type":427,"value":510},"云原生基金会 CNCF 给出的云原生的定义的 V1 版本。",{"type":422,"tag":512,"props":513,"children":514},"blockquote",{},[515],{"type":422,"tag":429,"props":516,"children":517},{},[518],{"type":427,"value":519},"云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。\n云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。",{"type":422,"tag":455,"props":521,"children":523},{"id":522},"云原生架构相关哪些技术",[524],{"type":427,"value":525},"云原生架构相关哪些技术？",{"type":422,"tag":527,"props":528,"children":529},"ol",{},[530,536,541,546,551,556,561,566,571,576],{"type":422,"tag":531,"props":532,"children":533},"li",{},[534],{"type":427,"value":535},"容器和镜像：Docker、Containerd、CRI-O、Kata Containers",{"type":422,"tag":531,"props":537,"children":538},{},[539],{"type":427,"value":540},"镜像仓库：Harbor、Nydus",{"type":422,"tag":531,"props":542,"children":543},{},[544],{"type":427,"value":545},"应用封装：Kustomize、Helm",{"type":422,"tag":531,"props":547,"children":548},{},[549],{"type":427,"value":550},"持续集成：Gitlab、Tekton",{"type":422,"tag":531,"props":552,"children":553},{},[554],{"type":427,"value":555},"持续部署：FluxCD、argoCD",{"type":422,"tag":531,"props":557,"children":558},{},[559],{"type":427,"value":560},"容器编排：Kubernetes",{"type":422,"tag":531,"props":562,"children":563},{},[564],{"type":427,"value":565},"网关：Ingress-Nginx、APISIX",{"type":422,"tag":531,"props":567,"children":568},{},[569],{"type":427,"value":570},"日志：Fluentd、Grafana Loki",{"type":422,"tag":531,"props":572,"children":573},{},[574],{"type":427,"value":575},"监控：Grafana、Prometheus",{"type":422,"tag":531,"props":577,"children":578},{},[579],{"type":427,"value":580},"应用开发：Nocalhost",{"type":422,"tag":455,"props":582,"children":584},{"id":583},"从架构发展来看用户和平台的关注点是怎么变化的",[585],{"type":427,"value":586},"从架构发展来看，用户和平台的关注点是怎么变化的？",{"type":422,"tag":429,"props":588,"children":589},{},[590],{"type":427,"value":591},"从用户自建、IaaS、PaaS、SaaS 到 FaaS，客户和平台关注的东西并不一样。\n以 SaaS 举例，客户只需要关注数据，而平台关注包括应用程序、应用依赖、中间件、操作系统、虚拟化服务器、存储、网格等其余所有基础设施。",{"type":422,"tag":455,"props":593,"children":595},{"id":594},"有哪些亿级-dau-规模的移动应用",[596],{"type":427,"value":597},"有哪些亿级 DAU 规模的移动应用？",{"type":422,"tag":429,"props":599,"children":600},{},[601],{"type":427,"value":602},"POE Assistant：以下是一些拥有亿级日活跃用户（DAU）规模的知名移动应用的例子（截至2021年）",{"type":422,"tag":527,"props":604,"children":605},{},[606,611,616,621,626,631,636],{"type":422,"tag":531,"props":607,"children":608},{},[609],{"type":427,"value":610},"Facebook：Facebook是全球最大的社交媒体平台，拥有超过20亿月活跃用户，其中大部分用户通过移动应用进行访问。",{"type":422,"tag":531,"props":612,"children":613},{},[614],{"type":427,"value":615},"WhatsApp：WhatsApp是一款全球领先的即时通讯应用程序，每天有超过20亿用户使用该应用进行消息传递和语音通话。",{"type":422,"tag":531,"props":617,"children":618},{},[619],{"type":427,"value":620},"WeChat（微信）：WeChat是中国最流行的社交媒体和消息应用之一，拥有超过10亿活跃用户。它提供了聊天、社交、支付、游戏和其他功能。",{"type":422,"tag":531,"props":622,"children":623},{},[624],{"type":427,"value":625},"TikTok（抖音）：TikTok是一款全球流行的短视频社交平台，拥有超过10亿用户。它提供了用户生成的短视频内容，吸引了大量的年轻用户。",{"type":422,"tag":531,"props":627,"children":628},{},[629],{"type":427,"value":630},"Instagram：Instagram是一款图片和视频分享社交平台，拥有超过10亿用户。它提供了用户上传和编辑照片、视频以及与其他用户互动的功能。",{"type":422,"tag":531,"props":632,"children":633},{},[634],{"type":427,"value":635},"Snapchat：Snapchat是一款以瞬间分享和自动消失的照片和视频为特点的移动应用，拥有超过5亿用户。",{"type":422,"tag":531,"props":637,"children":638},{},[639],{"type":427,"value":640},"Twitter：Twitter是一款全球知名的社交媒体平台，用户可以发布和阅读短消息（推文）。它拥有超过3亿的活跃用户。",{"type":422,"tag":455,"props":642,"children":644},{"id":643},"如何按照规模和变更速度将软件企业划分为四个象限",[645],{"type":427,"value":646},"如何按照规模和变更速度将软件企业划分为四个象限？",{"type":422,"tag":429,"props":648,"children":649},{},[650],{"type":427,"value":651},"援引 Netflix 的说法，按照规模大小、变更速度的快慢可以将软件划分为：互联网企业（规模大、变化快）、初创公司（规模小、变化快）、电信业务（规模大、变化慢）、企业 IT（规模小、变化慢）。",{"type":422,"tag":429,"props":653,"children":654},{},[655],{"type":427,"value":656},"初创公司面临软件失败的风险、电信业务面临硬件失败风险，企业 IT 要面对来自市场的冲击，而互联网企业是最危险的“Everything is Broken”。",{"type":422,"tag":455,"props":658,"children":660},{"id":659},"什么是虚拟化技术",[661],{"type":427,"value":662},"什么是虚拟化技术？",{"type":422,"tag":429,"props":664,"children":665},{},[666],{"type":427,"value":667},"虚拟化技术是一种资源管理技术，它可以将一台计算机的各种资源，如处理器、内存、硬盘、网络接口卡等，抽象、转换后提供给多个用户和应用程序使用。",{"type":422,"tag":455,"props":669,"children":671},{"id":670},"最早的容器技术",[672],{"type":427,"value":673},"最早的容器技术？",{"type":422,"tag":429,"props":675,"children":676},{},[677],{"type":427,"value":678},"Chroot Jail；使用 chroot 系统调用将进程的 root 目录重定向到新位置，仪表创造独立的环境用于软件编译、测试以及安装。",{"type":422,"tag":455,"props":680,"children":682},{"id":681},"linux-容器是什么",[683],{"type":427,"value":684},"Linux 容器是什么？",{"type":422,"tag":429,"props":686,"children":687},{},[688],{"type":427,"value":689},"LXC，Linux Container；Google 推出的进程容器合并进入 Linux 内核后重命名为 Control Groups，它允许给进程提供操作系统级别的资源限制、优先级控制、审计能力。配合 namepace 称为 LXC，再配合安全防护机制形成了容器运行环境隔离的容器核心能力。",{"type":422,"tag":455,"props":691,"children":693},{"id":692},"docker-继-lxc-解决的问题是",[694],{"type":427,"value":695},"Docker 继 LXC 解决的问题是？",{"type":422,"tag":429,"props":697,"children":698},{},[699],{"type":427,"value":700},"Docker 封装了应用程序的代码、依赖、工具、资源文件和元信息，可以做到将应用分发到任意平台或运行环境，即“Build once，Ship and Run Anywhere”",{"type":422,"tag":429,"props":702,"children":703},{},[704],{"type":422,"tag":705,"props":706,"children":709},"img",{"alt":707,"src":708},"Docker","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20231118201706.png",[],{"type":422,"tag":455,"props":711,"children":713},{"id":712},"为什么称-kubernetes-成了容器编排事实标准",[714],{"type":427,"value":715},"为什么称 Kubernetes 成了容器编排事实标准？",{"type":422,"tag":429,"props":717,"children":718},{},[719],{"type":427,"value":720},"在于 Docker Swarm、Apache Mesos 的斗争中，K8s 没有历史包袱，预置了服务发现、容器网格等关键特性，并提供了用于描述集群架构、定义服务状态的声明式 API，帮助系统维持在这个状态，有明显的后发优势。最重要的是，K8s 拥有一套稳定可扩展的 API 盘活了生态。",{"type":422,"tag":455,"props":722,"children":724},{"id":723},"容器兴起和编排大战的三个里程碑",[725],{"type":427,"value":726},"容器兴起和编排大战的三个里程碑？",{"type":422,"tag":527,"props":728,"children":729},{},[730,735,740],{"type":422,"tag":531,"props":731,"children":732},{},[733],{"type":427,"value":734},"2013 ，Doocker 发布，云计算进入容器时代",{"type":422,"tag":531,"props":736,"children":737},{},[738],{"type":427,"value":739},"2017 ，K8s 赢得容器编排的胜利，云计算进入 K8s 时代",{"type":422,"tag":531,"props":741,"children":742},{},[743],{"type":427,"value":744},"2018，Istio 发布，服务网格的理念走向成熟",{"type":422,"tag":455,"props":746,"children":748},{"id":747},"oci-和-cncf-的关系",[749],{"type":427,"value":750},"OCI 和 CNCF 的关系？",{"type":422,"tag":429,"props":752,"children":753},{},[754],{"type":427,"value":755},"合作关系。",{"type":422,"tag":429,"props":757,"children":758},{},[759],{"type":427,"value":760},"TODO",{"type":422,"tag":455,"props":762,"children":764},{"id":763},"微服务带来了哪些技术挑战",[765],{"type":427,"value":766},"微服务带来了哪些技术挑战？",{"type":422,"tag":429,"props":768,"children":769},{},[770],{"type":427,"value":771},"服务发现、服务熔断、负载均衡和通讯相关问题。通讯包括调用协议、加密、认证、鉴权等。",{"type":422,"tag":455,"props":773,"children":775},{"id":774},"什么是服务网格",[776],{"type":427,"value":777},"什么是服务网格？",{"type":422,"tag":429,"props":779,"children":780},{},[781],{"type":427,"value":782},"服务网格是云原生的基础设施，用于云原生应用微服务组成的的复杂拓扑结构下的可靠请求传送。在实践中，它是一组和应用服务部署在一起的轻量级网络代理（Sidecar）。",{"type":422,"tag":455,"props":784,"children":786},{"id":785},"istio-初始架构是怎样的",[787],{"type":427,"value":788},"Istio 初始架构是怎样的？",{"type":422,"tag":429,"props":790,"children":791},{},[792],{"type":427,"value":793},"Istio 分为数据平面和控制平面。数据平面使用轻量级 Sidecar 如 Envoy 协调与控制服务之间的通信和流量处理；控制平面负责配置和管理数据平面，以及提供服务发现、智能路由、流量控制、安全控制等功能。",{"type":422,"tag":455,"props":795,"children":797},{"id":796},"sidecar-面临的问题或者说缺陷是",[798],{"type":427,"value":799},"Sidecar 面临的问题或者说缺陷是？",{"type":422,"tag":527,"props":801,"children":802},{},[803,808],{"type":422,"tag":531,"props":804,"children":805},{},[806],{"type":427,"value":807},"在规模巨大化的服务集群下，网络通信的拓扑结构非常复杂，对作为独立容器的 Sidecar 下发配置会导致内存剧烈增长；",{"type":422,"tag":531,"props":809,"children":810},{},[811],{"type":427,"value":812},"某些性能要求极高的业务场景，毫秒级别的延迟也不能接受。",{"type":422,"tag":429,"props":814,"children":815},{},[816],{"type":427,"value":817},"作为改进，Proxyless 模式可以去 Sidecard 容器、消除跨进程调用，并降低延迟。但本质上，它只是使用 Istio Agent 把服务注册等工作和 gRPC  等框架绑定在了一起。",{"type":422,"tag":455,"props":819,"children":821},{"id":820},"sidecarless-模式是什么",[822],{"type":427,"value":823},"Sidecarless 模式是什么？",{"type":422,"tag":429,"props":825,"children":826},{},[827],{"type":427,"value":828},"通过 Agent（代理）、注入式库或者云原生平台功能将 Sidecar 干掉。从原理来说，在 L4 和 L7 分别建立用途不一样的代理，托管不同的流量。L4 层建立了 TCP 路由，有简单的鉴权机制，使用 eBFP 通讯，能观测 TCP 指标和日志。L7 层建立了 HTTP 路由，有完善的鉴权。\nIstio 未来的发展方向就是完善 Ambient Mesh（一种无边车模式的实现）。其使用 DaemonSet 部署 Waypoint Proxy 作为 L7 代理，而在 L4 使用 ztunnel。",{"type":422,"tag":455,"props":830,"children":832},{"id":831},"不可变基础设施的核心思想是",[833],{"type":427,"value":834},"不可变基础设施的核心思想是？",{"type":422,"tag":429,"props":836,"children":837},{},[838],{"type":427,"value":839},"不可变基础设施的核心思想是基础设施的示例一旦创建就变成只读状态，如果需要修改或省级，应先修改配置模板，在根据模板创建新示例并替换旧实例。",{"type":422,"tag":455,"props":841,"children":843},{"id":842},"不可变基础设施能解决什么问题",[844],{"type":427,"value":845},"不可变基础设施能解决什么问题？",{"type":422,"tag":429,"props":847,"children":848},{},[849],{"type":427,"value":850},"以解决传统运维时代需要大量手工操作带来的构建难以自动化，以及环境变量改变等问题。其最大的优势是“一致性”，使基础设施管理简单、可部署、可规模化、可恢复，也提高了安全性。",{"title":415,"searchDepth":852,"depth":852,"links":853},2,[854,855],{"id":417,"depth":852,"text":417},{"id":444,"depth":852,"text":447,"children":856},[857],{"id":451,"depth":858,"text":451},3,"markdown","content:6.maps:_cloud-native:cloud-native.md","content","6.maps/_cloud-native/cloud-native.md","6.maps/_cloud-native/cloud-native","md",[866,869],{"_path":867,"title":868,"description":415},"/maps/_business/low-code","低码",{"_path":870,"title":871,"description":872},"/maps/_cloud-native/serverless","Serverless","无服务器计算，是一种云计算架构模式，其中云提供商负责执行代码，并动态分配计算资源",1732808709847]