[{"data":1,"prerenderedAt":308},["ShallowReactive",2],{"navigation":3,"/maps/_devops/version-control":155,"/maps/_devops/version-control-surround":299},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":293,"_id":294,"_source":295,"_file":296,"_stem":297,"_extension":298},"/maps/_devops/version-control","_devops",false,true,"","版本管理","版本管理是一种软件开发过程中的管理方法，它通过对软件的版本号进行管理，以便于开发者和用户了解软件的变动情况。",{"type":164,"children":165,"toc":288},"root",[166,174,198,212,217,224,229,241,247,252,266,272,277],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"源码管理",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":177},"ul",{},[178,189],{"type":167,"tag":179,"props":180,"children":181},"li",{},[182],{"type":167,"tag":183,"props":184,"children":186},"a",{"href":185},"/maps/_devops/git",[187],{"type":173,"value":188},"Git",{"type":167,"tag":179,"props":190,"children":191},{},[192],{"type":167,"tag":183,"props":193,"children":195},{"href":194},"/maps/_devops/git/gitflow",[196],{"type":173,"value":197},"Gitflow",{"type":167,"tag":199,"props":200,"children":201},"p",{},[202,204],{"type":173,"value":203},"TODO：",{"type":167,"tag":183,"props":205,"children":209},{"href":206,"rel":207},"https://sapling-scm.com/docs/introduction/differences-git",[208],"nofollow",[210],{"type":173,"value":211},"Sapling",{"type":167,"tag":168,"props":213,"children":215},{"id":214},"版本号管理",[216],{"type":173,"value":214},{"type":167,"tag":218,"props":219,"children":221},"h4",{"id":220},"语义化版本是什么",[222],{"type":173,"value":223},"语义化版本是什么？",{"type":167,"tag":199,"props":225,"children":226},{},[227],{"type":173,"value":228},"语义化版本（Semantic Version）是一种版本号码标记方法，它要求版本号由“主版本号。次版本号。修订号”组成，分别代表不兼容的 API 改动、向下兼容的功能性改动或新增、向下兼容的问题修正。",{"type":167,"tag":199,"props":230,"children":231},{},[232,234],{"type":173,"value":233},"见：",{"type":167,"tag":183,"props":235,"children":238},{"href":236,"rel":237},"https://semver.org/lang/zh-CN/",[208],[239],{"type":173,"value":240},"语义化版本 @semver.org",{"type":167,"tag":218,"props":242,"children":244},{"id":243},"语义化版本解决了什么问题",[245],{"type":173,"value":246},"语义化版本解决了什么问题？",{"type":167,"tag":199,"props":248,"children":249},{},[250],{"type":173,"value":251},"Semver 被设计用来解决依赖地狱的问题，常用于定义了公共 API 的项目，因为其各个版本号的意义都和 API 的变动挂钩。但 Semver 从某种意义上来说过于理想化，主要因为实际开发中代码变动没用绝对意义上的 no breaking change 这么一说。bug 和 breaking change 的界限本身就很模糊，所以实际上，任何改动都可能带来意料之外的 breaking change。",{"type":167,"tag":199,"props":253,"children":254},{},[255,257,264],{"type":173,"value":256},"许多项目并不遵循 Semver，如 TS 的开发者声称，其 minor 版本可能引入 Breaking Change，见：",{"type":167,"tag":183,"props":258,"children":261},{"href":259,"rel":260},"https://github.com/microsoft/TypeScript/issues/14116",[208],[262],{"type":173,"value":263},"TypeScript should follow semantic versioning @GitHub",{"type":173,"value":265},"。",{"type":167,"tag":218,"props":267,"children":269},{"id":268},"如何解决版本号膨胀问题",[270],{"type":173,"value":271},"如何解决版本号膨胀问题？",{"type":167,"tag":199,"props":273,"children":274},{},[275],{"type":173,"value":276},"在单仓多包项目中，如果遵循语义化版本，那么版本同步会使版本号迅速膨胀。一个好的方案是现在其他项目使用 0.x 版本号开发，等 API 稳定后再合并到单仓中升级成为 1.0.0 版本。",{"type":167,"tag":199,"props":278,"children":279},{},[280,281],{"type":173,"value":233},{"type":167,"tag":183,"props":282,"children":285},{"href":283,"rel":284},"https://medium.com/netscape/the-case-for-monorepos-907c1361708a",[208],[286],{"type":173,"value":287},"The Case for MonoreposJJJ",{"title":160,"searchDepth":289,"depth":289,"links":290},2,[291,292],{"id":170,"depth":289,"text":170},{"id":214,"depth":289,"text":214},"markdown","content:6.maps:_devops:version-control.md","content","6.maps/_devops/version-control.md","6.maps/_devops/version-control","md",[300,304],{"_path":301,"title":302,"description":303},"/maps/_devops/gitlab","GitLab","GitLab 是一个基于 Git 的 DevOps 平台，提供了代码仓库、CI/CD、Issue 管理等功能",{"_path":305,"title":306,"description":307},"/maps/_fe-framework/fe-framework","前端框架","前端框架是在前端开发不同阶段，用以简化开发的工具集合。它们提供了一种组织代码的方式，使得开发者可以专注于业务逻辑，而不是底层的技术细节。",1742348684971]