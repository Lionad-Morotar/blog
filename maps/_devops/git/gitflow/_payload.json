[{"data":1,"prerenderedAt":447},["ShallowReactive",2],{"navigation":3,"/maps/_devops/git/gitflow":158,"/maps/_devops/git/gitflow-surround":438},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":432,"_id":433,"_source":434,"_file":435,"_stem":436,"_extension":437},"/maps/_devops/git/gitflow","git",false,true,"","Gitflow","Gitflow 是一种使用 Git 合作时使用的工作流程。",{"type":167,"children":168,"toc":426},"root",[169,178,185,191,197,202,243,257,263,268,279,285,290,296,301,312,318,323,329,334,342,362,367,373,378,387,398,403],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"quick-questions",[175],{"type":176,"value":177},"text","Quick Questions",{"type":170,"tag":179,"props":180,"children":182},"h4",{"id":181},"gitflow-是什么",[183],{"type":176,"value":184},"Gitflow 是什么？",{"type":170,"tag":186,"props":187,"children":188},"p",{},[189],{"type":176,"value":190},"Gitflow 是一种使用 Git 合作时使用的工作流程。与之类似的概念有 Centralized Workflow、Feature Branch Workflow、Forking Workflow 等。",{"type":170,"tag":179,"props":192,"children":194},{"id":193},"选用工作流前需要注意什么",[195],{"type":176,"value":196},"选用工作流前需要注意什么？",{"type":170,"tag":186,"props":198,"children":199},{},[200],{"type":176,"value":201},"工作流应该是“指南”，而不是手册，没有一种工作流程是能解决所有问题而没有显著副作用的，所以应该根据团队规模、业务流程（如需求大小、需求频次）选用更适合团队的工作流。",{"type":170,"tag":203,"props":204,"children":205},"ul",{},[206,220,232],{"type":170,"tag":207,"props":208,"children":209},"li",{},[210,212,218],{"type":176,"value":211},"工作流能否",{"type":170,"tag":213,"props":214,"children":215},"strong",{},[216],{"type":176,"value":217},"容错",{"type":176,"value":219},"，或是可以避免犯错？",{"type":170,"tag":207,"props":221,"children":222},{},[223,225,230],{"type":176,"value":224},"工作流能否可以随着团队人数变更而",{"type":170,"tag":213,"props":226,"children":227},{},[228],{"type":176,"value":229},"扩展",{"type":176,"value":231},"？",{"type":170,"tag":207,"props":233,"children":234},{},[235,237,242],{"type":176,"value":236},"工作流能否带来了不必要的",{"type":170,"tag":213,"props":238,"children":239},{},[240],{"type":176,"value":241},"认知负担",{"type":176,"value":231},{"type":170,"tag":186,"props":244,"children":245},{},[246,248],{"type":176,"value":247},"见：",{"type":170,"tag":249,"props":250,"children":254},"a",{"href":251,"rel":252},"http://fresky.github.io/2020/03/10/common-branching-models/",[253],"nofollow",[255],{"type":176,"value":256},"常见的代码分支模型和比较",{"type":170,"tag":179,"props":258,"children":260},{"id":259},"centralized-workflow-是怎么运作的",[261],{"type":176,"value":262},"Centralized Workflow 是怎么运作的？",{"type":170,"tag":186,"props":264,"children":265},{},[266],{"type":176,"value":267},"如果其他版本管理工具过渡到 Git，那么 Centralized Workflow 是学习成本最小的方案。在此工作流中，团队成员围绕 main 分支开发：拉取代码、开发，然后提交，就这么简单。因为没有额外的分支，所以 main 分支的历史记录开起来像是一条干净的线，这种感觉就像是传统的 SVN 工作流一样。",{"type":170,"tag":186,"props":269,"children":270},{},[271,272],{"type":176,"value":247},{"type":170,"tag":249,"props":273,"children":276},{"href":274,"rel":275},"https://trunkbaseddevelopment.com/",[253],[277],{"type":176,"value":278},"Trunk Based Development",{"type":170,"tag":179,"props":280,"children":282},{"id":281},"feature-branch-workflow-是怎么运作的",[283],{"type":176,"value":284},"Feature Branch Workflow 是怎么运作的？",{"type":170,"tag":186,"props":286,"children":287},{},[288],{"type":176,"value":289},"Feature Branch Workflow 是在 Centraolized Workflow 之上的扩展。开发人员在单独的 feature 分支开发新功能，然后通过 PR 请求提交回 main 分支。在需要帮助时，可以提前请求 PR，邀请他们代码审阅或是提交修复。这种流程隐含的约定是：main 分支上的代码一定是可用的（至少测试通过，能跑），这种小步快跑的模式对持续集成环境来说是一个巨大的优势。",{"type":170,"tag":179,"props":291,"children":293},{"id":292},"pr-是什么",[294],{"type":176,"value":295},"PR 是什么？",{"type":170,"tag":186,"props":297,"children":298},{},[299],{"type":176,"value":300},"Pull Request（PR）是一种使用 GitLab 或其它版本管理系统附带的一种工作流程。PR 可以作为一种告知团队其它成员当前分支功能已经完成的提醒。每个 PR 还附带有代码变更内容和讨论区，团队成员可以通过 PR 进行 Code Review，讨论方案，或者评论代码。使开发人员从邮件或者即时通讯软件中解脱出来。",{"type":170,"tag":186,"props":302,"children":303},{},[304,305],{"type":176,"value":247},{"type":170,"tag":249,"props":306,"children":309},{"href":307,"rel":308},"https://guides.github.com/introduction/flow/",[253],[310],{"type":176,"value":311},"GitHub flow",{"type":170,"tag":179,"props":313,"children":315},{"id":314},"forking-workflow-是怎么运作的",[316],{"type":176,"value":317},"Forking Workflow 是怎么运作的？",{"type":170,"tag":186,"props":319,"children":320},{},[321],{"type":176,"value":322},"在 Forking Workflow 流程中，开发使用单独的仓库来开发一个完整的功能，一旦功能开发完毕，再通过 PR 合并回主仓库 main 分支。因为主仓库管理员并不关心代码的具体实现，所以开发没有主仓库的写入权限，Code Review 也不用在主仓库进行。",{"type":170,"tag":179,"props":324,"children":326},{"id":325},"gitflow-workflow-是怎么运作的",[327],{"type":176,"value":328},"Gitflow Workflow 是怎么运作的？",{"type":170,"tag":186,"props":330,"children":331},{},[332],{"type":176,"value":333},"Gitflow Workflow 最早在 Vincent Driessen 2010 年写的一篇博客中被提出。作为 Feature Branch Workflow 的补充，它仅仅是规范各分支的行为。不同分支有不同的作用，比方说 release 分支用来测试，main 分支用来发布，hotfix 分支用来提交热修复，等等。Gitflow 还规定了分支与分支应该如何合并。",{"type":170,"tag":186,"props":335,"children":336},{},[337],{"type":170,"tag":338,"props":339,"children":341},"img",{"alt":164,"src":340},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627173845.png?w=40",[],{"type":170,"tag":186,"props":343,"children":344},{},[345,346,353,355],{"type":176,"value":247},{"type":170,"tag":249,"props":347,"children":350},{"href":348,"rel":349},"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",[253],[351],{"type":176,"value":352},"Gitflow Workflow",{"type":176,"value":354},"、",{"type":170,"tag":249,"props":356,"children":359},{"href":357,"rel":358},"https://nvie.com/posts/a-successful-git-branching-model/",[253],[360],{"type":176,"value":361},"A successful Git branching model",{"type":170,"tag":171,"props":363,"children":365},{"id":364},"评价",[366],{"type":176,"value":364},{"type":170,"tag":179,"props":368,"children":370},{"id":369},"gitflow-的负面影响",[371],{"type":176,"value":372},"Gitflow 的负面影响？",{"type":170,"tag":186,"props":374,"children":375},{},[376],{"type":176,"value":377},"Thoughtworks 认为短生命周期的分支策略给实施 CI/CD 带来更小的伤害，反之类似 Gitflow 中经常用到的长生命周期分治策略反而是在鼓励后期集成（late integration）。",{"type":170,"tag":186,"props":379,"children":380},{},[381],{"type":170,"tag":382,"props":383,"children":384},"q",{},[385],{"type":176,"value":386},"We firmly believe that long-lived version-control branches harm valuable engineering practieces such as CI, and this belief underlies our dislike for Gitflow.",{"type":170,"tag":186,"props":388,"children":389},{},[390,391],{"type":176,"value":247},{"type":170,"tag":249,"props":392,"children":395},{"href":393,"rel":394},"https://www.thoughtworks.com/cn/radar/techniques/long-lived-branches-with-gitflow",[253],[396],{"type":176,"value":397},"Gitflow long-lived-branch on Tech Radar",{"type":170,"tag":171,"props":399,"children":401},{"id":400},"相关资源",[402],{"type":176,"value":400},{"type":170,"tag":203,"props":404,"children":405},{},[406,416],{"type":170,"tag":207,"props":407,"children":408},{},[409],{"type":170,"tag":249,"props":410,"children":413},{"href":411,"rel":412},"https://devblogs.microsoft.com/oldnewthing/20180323-01/?p=98325",[253],[414],{"type":176,"value":415},"Stop cherry-picking, start merging",{"type":170,"tag":207,"props":417,"children":418},{},[419],{"type":170,"tag":249,"props":420,"children":423},{"href":421,"rel":422},"https://martinfowler.com/articles/branching-patterns.html",[253],[424],{"type":176,"value":425},"Patterns for Managing Source Code Branches",{"title":163,"searchDepth":427,"depth":427,"links":428},2,[429,430,431],{"id":173,"depth":427,"text":177},{"id":364,"depth":427,"text":364},{"id":400,"depth":427,"text":400},"markdown","content:6.maps:_devops:git:gitflow.md","content","6.maps/_devops/git/gitflow.md","6.maps/_devops/git/gitflow","md",[439,443],{"_path":440,"title":441,"description":442},"/maps/_devops/git/dorothy","Dorothy","Dorothy 是我的 Git Commit Message 的约定。",{"_path":444,"title":445,"description":446},"/maps/_devops/gitlab","GitLab","GitLab 是一个基于 Git 的 DevOps 平台，提供了代码仓库、CI/CD、Issue 管理等功能",1742958692150]