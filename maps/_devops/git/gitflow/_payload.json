[{"data":1,"prerenderedAt":450},["ShallowReactive",2],{"navigation":3,"/maps/_devops/git/gitflow":161,"/maps/_devops/git/gitflow-surround":441},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":435,"_id":436,"_source":437,"_file":438,"_stem":439,"_extension":440},"/maps/_devops/git/gitflow","git",false,true,"","Gitflow","Gitflow 是一种使用 Git 合作时使用的工作流程。",{"type":170,"children":171,"toc":429},"root",[172,181,188,194,200,205,246,260,266,271,282,288,293,299,304,315,321,326,332,337,345,365,370,376,381,390,401,406],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"quick-questions",[178],{"type":179,"value":180},"text","Quick Questions",{"type":173,"tag":182,"props":183,"children":185},"h4",{"id":184},"gitflow-是什么",[186],{"type":179,"value":187},"Gitflow 是什么？",{"type":173,"tag":189,"props":190,"children":191},"p",{},[192],{"type":179,"value":193},"Gitflow 是一种使用 Git 合作时使用的工作流程。与之类似的概念有 Centralized Workflow、Feature Branch Workflow、Forking Workflow 等。",{"type":173,"tag":182,"props":195,"children":197},{"id":196},"选用工作流前需要注意什么",[198],{"type":179,"value":199},"选用工作流前需要注意什么？",{"type":173,"tag":189,"props":201,"children":202},{},[203],{"type":179,"value":204},"工作流应该是“指南”，而不是手册，没有一种工作流程是能解决所有问题而没有显著副作用的，所以应该根据团队规模、业务流程（如需求大小、需求频次）选用更适合团队的工作流。",{"type":173,"tag":206,"props":207,"children":208},"ul",{},[209,223,235],{"type":173,"tag":210,"props":211,"children":212},"li",{},[213,215,221],{"type":179,"value":214},"工作流能否",{"type":173,"tag":216,"props":217,"children":218},"strong",{},[219],{"type":179,"value":220},"容错",{"type":179,"value":222},"，或是可以避免犯错？",{"type":173,"tag":210,"props":224,"children":225},{},[226,228,233],{"type":179,"value":227},"工作流能否可以随着团队人数变更而",{"type":173,"tag":216,"props":229,"children":230},{},[231],{"type":179,"value":232},"扩展",{"type":179,"value":234},"？",{"type":173,"tag":210,"props":236,"children":237},{},[238,240,245],{"type":179,"value":239},"工作流能否带来了不必要的",{"type":173,"tag":216,"props":241,"children":242},{},[243],{"type":179,"value":244},"认知负担",{"type":179,"value":234},{"type":173,"tag":189,"props":247,"children":248},{},[249,251],{"type":179,"value":250},"见：",{"type":173,"tag":252,"props":253,"children":257},"a",{"href":254,"rel":255},"http://fresky.github.io/2020/03/10/common-branching-models/",[256],"nofollow",[258],{"type":179,"value":259},"常见的代码分支模型和比较",{"type":173,"tag":182,"props":261,"children":263},{"id":262},"centralized-workflow-是怎么运作的",[264],{"type":179,"value":265},"Centralized Workflow 是怎么运作的？",{"type":173,"tag":189,"props":267,"children":268},{},[269],{"type":179,"value":270},"如果其他版本管理工具过渡到 Git，那么 Centralized Workflow 是学习成本最小的方案。在此工作流中，团队成员围绕 main 分支开发：拉取代码、开发，然后提交，就这么简单。因为没有额外的分支，所以 main 分支的历史记录开起来像是一条干净的线，这种感觉就像是传统的 SVN 工作流一样。",{"type":173,"tag":189,"props":272,"children":273},{},[274,275],{"type":179,"value":250},{"type":173,"tag":252,"props":276,"children":279},{"href":277,"rel":278},"https://trunkbaseddevelopment.com/",[256],[280],{"type":179,"value":281},"Trunk Based Development",{"type":173,"tag":182,"props":283,"children":285},{"id":284},"feature-branch-workflow-是怎么运作的",[286],{"type":179,"value":287},"Feature Branch Workflow 是怎么运作的？",{"type":173,"tag":189,"props":289,"children":290},{},[291],{"type":179,"value":292},"Feature Branch Workflow 是在 Centraolized Workflow 之上的扩展。开发人员在单独的 feature 分支开发新功能，然后通过 PR 请求提交回 main 分支。在需要帮助时，可以提前请求 PR，邀请他们代码审阅或是提交修复。这种流程隐含的约定是：main 分支上的代码一定是可用的（至少测试通过，能跑），这种小步快跑的模式对持续集成环境来说是一个巨大的优势。",{"type":173,"tag":182,"props":294,"children":296},{"id":295},"pr-是什么",[297],{"type":179,"value":298},"PR 是什么？",{"type":173,"tag":189,"props":300,"children":301},{},[302],{"type":179,"value":303},"Pull Request（PR）是一种使用 GitLab 或其它版本管理系统附带的一种工作流程。PR 可以作为一种告知团队其它成员当前分支功能已经完成的提醒。每个 PR 还附带有代码变更内容和讨论区，团队成员可以通过 PR 进行 Code Review，讨论方案，或者评论代码。使开发人员从邮件或者即时通讯软件中解脱出来。",{"type":173,"tag":189,"props":305,"children":306},{},[307,308],{"type":179,"value":250},{"type":173,"tag":252,"props":309,"children":312},{"href":310,"rel":311},"https://guides.github.com/introduction/flow/",[256],[313],{"type":179,"value":314},"GitHub flow",{"type":173,"tag":182,"props":316,"children":318},{"id":317},"forking-workflow-是怎么运作的",[319],{"type":179,"value":320},"Forking Workflow 是怎么运作的？",{"type":173,"tag":189,"props":322,"children":323},{},[324],{"type":179,"value":325},"在 Forking Workflow 流程中，开发使用单独的仓库来开发一个完整的功能，一旦功能开发完毕，再通过 PR 合并回主仓库 main 分支。因为主仓库管理员并不关心代码的具体实现，所以开发没有主仓库的写入权限，Code Review 也不用在主仓库进行。",{"type":173,"tag":182,"props":327,"children":329},{"id":328},"gitflow-workflow-是怎么运作的",[330],{"type":179,"value":331},"Gitflow Workflow 是怎么运作的？",{"type":173,"tag":189,"props":333,"children":334},{},[335],{"type":179,"value":336},"Gitflow Workflow 最早在 Vincent Driessen 2010 年写的一篇博客中被提出。作为 Feature Branch Workflow 的补充，它仅仅是规范各分支的行为。不同分支有不同的作用，比方说 release 分支用来测试，main 分支用来发布，hotfix 分支用来提交热修复，等等。Gitflow 还规定了分支与分支应该如何合并。",{"type":173,"tag":189,"props":338,"children":339},{},[340],{"type":173,"tag":341,"props":342,"children":344},"img",{"alt":167,"src":343},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627173845.png?w=40",[],{"type":173,"tag":189,"props":346,"children":347},{},[348,349,356,358],{"type":179,"value":250},{"type":173,"tag":252,"props":350,"children":353},{"href":351,"rel":352},"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",[256],[354],{"type":179,"value":355},"Gitflow Workflow",{"type":179,"value":357},"、",{"type":173,"tag":252,"props":359,"children":362},{"href":360,"rel":361},"https://nvie.com/posts/a-successful-git-branching-model/",[256],[363],{"type":179,"value":364},"A successful Git branching model",{"type":173,"tag":174,"props":366,"children":368},{"id":367},"评价",[369],{"type":179,"value":367},{"type":173,"tag":182,"props":371,"children":373},{"id":372},"gitflow-的负面影响",[374],{"type":179,"value":375},"Gitflow 的负面影响？",{"type":173,"tag":189,"props":377,"children":378},{},[379],{"type":179,"value":380},"Thoughtworks 认为短生命周期的分支策略给实施 CI/CD 带来更小的伤害，反之类似 Gitflow 中经常用到的长生命周期分治策略反而是在鼓励后期集成（late integration）。",{"type":173,"tag":189,"props":382,"children":383},{},[384],{"type":173,"tag":385,"props":386,"children":387},"q",{},[388],{"type":179,"value":389},"We firmly believe that long-lived version-control branches harm valuable engineering practieces such as CI, and this belief underlies our dislike for Gitflow.",{"type":173,"tag":189,"props":391,"children":392},{},[393,394],{"type":179,"value":250},{"type":173,"tag":252,"props":395,"children":398},{"href":396,"rel":397},"https://www.thoughtworks.com/cn/radar/techniques/long-lived-branches-with-gitflow",[256],[399],{"type":179,"value":400},"Gitflow long-lived-branch on Tech Radar",{"type":173,"tag":174,"props":402,"children":404},{"id":403},"相关资源",[405],{"type":179,"value":403},{"type":173,"tag":206,"props":407,"children":408},{},[409,419],{"type":173,"tag":210,"props":410,"children":411},{},[412],{"type":173,"tag":252,"props":413,"children":416},{"href":414,"rel":415},"https://devblogs.microsoft.com/oldnewthing/20180323-01/?p=98325",[256],[417],{"type":179,"value":418},"Stop cherry-picking, start merging",{"type":173,"tag":210,"props":420,"children":421},{},[422],{"type":173,"tag":252,"props":423,"children":426},{"href":424,"rel":425},"https://martinfowler.com/articles/branching-patterns.html",[256],[427],{"type":179,"value":428},"Patterns for Managing Source Code Branches",{"title":166,"searchDepth":430,"depth":430,"links":431},2,[432,433,434],{"id":176,"depth":430,"text":180},{"id":367,"depth":430,"text":367},{"id":403,"depth":430,"text":403},"markdown","content:6.maps:_devops:git:gitflow.md","content","6.maps/_devops/git/gitflow.md","6.maps/_devops/git/gitflow","md",[442,446],{"_path":443,"title":444,"description":445},"/maps/_devops/git/dorothy","Dorothy","Dorothy 是我的 Git Commit Message 的约定。",{"_path":447,"title":448,"description":449},"/maps/_devops/gitlab","GitLab","GitLab 是一个基于 Git 的 DevOps 平台，提供了代码仓库、CI/CD、Issue 管理等功能",1749721442460]