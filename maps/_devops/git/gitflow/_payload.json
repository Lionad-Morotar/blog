[{"data":1,"prerenderedAt":444},["ShallowReactive",2],{"navigation":3,"/maps/_devops/git/gitflow":155,"/maps/_devops/git/gitflow-surround":435},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":429,"_id":430,"_source":431,"_file":432,"_stem":433,"_extension":434},"/maps/_devops/git/gitflow","git",false,true,"","Gitflow","Gitflow 是一种使用 Git 合作时使用的工作流程。",{"type":164,"children":165,"toc":423},"root",[166,175,182,188,194,199,240,254,260,265,276,282,287,293,298,309,315,320,326,331,339,359,364,370,375,384,395,400],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"quick-questions",[172],{"type":173,"value":174},"text","Quick Questions",{"type":167,"tag":176,"props":177,"children":179},"h4",{"id":178},"gitflow-是什么",[180],{"type":173,"value":181},"Gitflow 是什么？",{"type":167,"tag":183,"props":184,"children":185},"p",{},[186],{"type":173,"value":187},"Gitflow 是一种使用 Git 合作时使用的工作流程。与之类似的概念有 Centralized Workflow、Feature Branch Workflow、Forking Workflow 等。",{"type":167,"tag":176,"props":189,"children":191},{"id":190},"选用工作流前需要注意什么",[192],{"type":173,"value":193},"选用工作流前需要注意什么？",{"type":167,"tag":183,"props":195,"children":196},{},[197],{"type":173,"value":198},"工作流应该是“指南”，而不是手册，没有一种工作流程是能解决所有问题而没有显著副作用的，所以应该根据团队规模、业务流程（如需求大小、需求频次）选用更适合团队的工作流。",{"type":167,"tag":200,"props":201,"children":202},"ul",{},[203,217,229],{"type":167,"tag":204,"props":205,"children":206},"li",{},[207,209,215],{"type":173,"value":208},"工作流能否",{"type":167,"tag":210,"props":211,"children":212},"strong",{},[213],{"type":173,"value":214},"容错",{"type":173,"value":216},"，或是可以避免犯错？",{"type":167,"tag":204,"props":218,"children":219},{},[220,222,227],{"type":173,"value":221},"工作流能否可以随着团队人数变更而",{"type":167,"tag":210,"props":223,"children":224},{},[225],{"type":173,"value":226},"扩展",{"type":173,"value":228},"？",{"type":167,"tag":204,"props":230,"children":231},{},[232,234,239],{"type":173,"value":233},"工作流能否带来了不必要的",{"type":167,"tag":210,"props":235,"children":236},{},[237],{"type":173,"value":238},"认知负担",{"type":173,"value":228},{"type":167,"tag":183,"props":241,"children":242},{},[243,245],{"type":173,"value":244},"见：",{"type":167,"tag":246,"props":247,"children":251},"a",{"href":248,"rel":249},"http://fresky.github.io/2020/03/10/common-branching-models/",[250],"nofollow",[252],{"type":173,"value":253},"常见的代码分支模型和比较",{"type":167,"tag":176,"props":255,"children":257},{"id":256},"centralized-workflow-是怎么运作的",[258],{"type":173,"value":259},"Centralized Workflow 是怎么运作的？",{"type":167,"tag":183,"props":261,"children":262},{},[263],{"type":173,"value":264},"如果其他版本管理工具过渡到 Git，那么 Centralized Workflow 是学习成本最小的方案。在此工作流中，团队成员围绕 main 分支开发：拉取代码、开发，然后提交，就这么简单。因为没有额外的分支，所以 main 分支的历史记录开起来像是一条干净的线，这种感觉就像是传统的 SVN 工作流一样。",{"type":167,"tag":183,"props":266,"children":267},{},[268,269],{"type":173,"value":244},{"type":167,"tag":246,"props":270,"children":273},{"href":271,"rel":272},"https://trunkbaseddevelopment.com/",[250],[274],{"type":173,"value":275},"Trunk Based Development",{"type":167,"tag":176,"props":277,"children":279},{"id":278},"feature-branch-workflow-是怎么运作的",[280],{"type":173,"value":281},"Feature Branch Workflow 是怎么运作的？",{"type":167,"tag":183,"props":283,"children":284},{},[285],{"type":173,"value":286},"Feature Branch Workflow 是在 Centraolized Workflow 之上的扩展。开发人员在单独的 feature 分支开发新功能，然后通过 PR 请求提交回 main 分支。在需要帮助时，可以提前请求 PR，邀请他们代码审阅或是提交修复。这种流程隐含的约定是：main 分支上的代码一定是可用的（至少测试通过，能跑），这种小步快跑的模式对持续集成环境来说是一个巨大的优势。",{"type":167,"tag":176,"props":288,"children":290},{"id":289},"pr-是什么",[291],{"type":173,"value":292},"PR 是什么？",{"type":167,"tag":183,"props":294,"children":295},{},[296],{"type":173,"value":297},"Pull Request（PR）是一种使用 GitLab 或其它版本管理系统附带的一种工作流程。PR 可以作为一种告知团队其它成员当前分支功能已经完成的提醒。每个 PR 还附带有代码变更内容和讨论区，团队成员可以通过 PR 进行 Code Review，讨论方案，或者评论代码。使开发人员从邮件或者即时通讯软件中解脱出来。",{"type":167,"tag":183,"props":299,"children":300},{},[301,302],{"type":173,"value":244},{"type":167,"tag":246,"props":303,"children":306},{"href":304,"rel":305},"https://guides.github.com/introduction/flow/",[250],[307],{"type":173,"value":308},"GitHub flow",{"type":167,"tag":176,"props":310,"children":312},{"id":311},"forking-workflow-是怎么运作的",[313],{"type":173,"value":314},"Forking Workflow 是怎么运作的？",{"type":167,"tag":183,"props":316,"children":317},{},[318],{"type":173,"value":319},"在 Forking Workflow 流程中，开发使用单独的仓库来开发一个完整的功能，一旦功能开发完毕，再通过 PR 合并回主仓库 main 分支。因为主仓库管理员并不关心代码的具体实现，所以开发没有主仓库的写入权限，Code Review 也不用在主仓库进行。",{"type":167,"tag":176,"props":321,"children":323},{"id":322},"gitflow-workflow-是怎么运作的",[324],{"type":173,"value":325},"Gitflow Workflow 是怎么运作的？",{"type":167,"tag":183,"props":327,"children":328},{},[329],{"type":173,"value":330},"Gitflow Workflow 最早在 Vincent Driessen 2010 年写的一篇博客中被提出。作为 Feature Branch Workflow 的补充，它仅仅是规范各分支的行为。不同分支有不同的作用，比方说 release 分支用来测试，main 分支用来发布，hotfix 分支用来提交热修复，等等。Gitflow 还规定了分支与分支应该如何合并。",{"type":167,"tag":183,"props":332,"children":333},{},[334],{"type":167,"tag":335,"props":336,"children":338},"img",{"alt":161,"src":337},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220627173845.png?w=40",[],{"type":167,"tag":183,"props":340,"children":341},{},[342,343,350,352],{"type":173,"value":244},{"type":167,"tag":246,"props":344,"children":347},{"href":345,"rel":346},"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",[250],[348],{"type":173,"value":349},"Gitflow Workflow",{"type":173,"value":351},"、",{"type":167,"tag":246,"props":353,"children":356},{"href":354,"rel":355},"https://nvie.com/posts/a-successful-git-branching-model/",[250],[357],{"type":173,"value":358},"A successful Git branching model",{"type":167,"tag":168,"props":360,"children":362},{"id":361},"评价",[363],{"type":173,"value":361},{"type":167,"tag":176,"props":365,"children":367},{"id":366},"gitflow-的负面影响",[368],{"type":173,"value":369},"Gitflow 的负面影响？",{"type":167,"tag":183,"props":371,"children":372},{},[373],{"type":173,"value":374},"Thoughtworks 认为短生命周期的分支策略给实施 CI/CD 带来更小的伤害，反之类似 Gitflow 中经常用到的长生命周期分治策略反而是在鼓励后期集成（late integration）。",{"type":167,"tag":183,"props":376,"children":377},{},[378],{"type":167,"tag":379,"props":380,"children":381},"q",{},[382],{"type":173,"value":383},"We firmly believe that long-lived version-control branches harm valuable engineering practieces such as CI, and this belief underlies our dislike for Gitflow.",{"type":167,"tag":183,"props":385,"children":386},{},[387,388],{"type":173,"value":244},{"type":167,"tag":246,"props":389,"children":392},{"href":390,"rel":391},"https://www.thoughtworks.com/cn/radar/techniques/long-lived-branches-with-gitflow",[250],[393],{"type":173,"value":394},"Gitflow long-lived-branch on Tech Radar",{"type":167,"tag":168,"props":396,"children":398},{"id":397},"相关资源",[399],{"type":173,"value":397},{"type":167,"tag":200,"props":401,"children":402},{},[403,413],{"type":167,"tag":204,"props":404,"children":405},{},[406],{"type":167,"tag":246,"props":407,"children":410},{"href":408,"rel":409},"https://devblogs.microsoft.com/oldnewthing/20180323-01/?p=98325",[250],[411],{"type":173,"value":412},"Stop cherry-picking, start merging",{"type":167,"tag":204,"props":414,"children":415},{},[416],{"type":167,"tag":246,"props":417,"children":420},{"href":418,"rel":419},"https://martinfowler.com/articles/branching-patterns.html",[250],[421],{"type":173,"value":422},"Patterns for Managing Source Code Branches",{"title":160,"searchDepth":424,"depth":424,"links":425},2,[426,427,428],{"id":170,"depth":424,"text":174},{"id":361,"depth":424,"text":361},{"id":397,"depth":424,"text":397},"markdown","content:6.maps:_devops:git:gitflow.md","content","6.maps/_devops/git/gitflow.md","6.maps/_devops/git/gitflow","md",[436,440],{"_path":437,"title":438,"description":439},"/maps/_devops/git/dorothy","Dorothy","Dorothy 是我的 Git Commit Message 的约定。",{"_path":441,"title":442,"description":443},"/maps/_devops/gitlab","GitLab","GitLab 是一个基于 Git 的 DevOps 平台，提供了代码仓库、CI/CD、Issue 管理等功能",1742348694432]