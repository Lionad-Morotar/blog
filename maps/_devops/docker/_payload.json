[{"data":1,"prerenderedAt":525},["ShallowReactive",2],{"navigation":3,"/maps/_devops/docker":161,"/maps/_devops/docker-surround":516},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":510,"_id":511,"_source":512,"_file":513,"_stem":514,"_extension":515},"/maps/_devops/docker","_devops",false,true,"","Docker","Docker 是一种容器管理工具，通过对系统资源的控制与隔离，把软件、软件运行时、系统工具、系统库和配置打包到一个镜像中，运行在有有独立命名空间的容器进程内，可以使软件的所有依赖都标准化。",{"type":170,"children":171,"toc":499},"root",[172,180,187,193,199,204,209,230,235,240,245,250,275,280,285,290,295,300,305,310,400,405,441,452,457,468],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"简介",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":184},"h4",{"id":183},"docker-是什么",[185],{"type":179,"value":186},"Docker 是什么？",{"type":173,"tag":188,"props":189,"children":190},"p",{},[191],{"type":179,"value":192},"Docker 本身不是容器，而是容器标准的一种实现及其管理工具。",{"type":173,"tag":181,"props":194,"children":196},{"id":195},"容器是什么",[197],{"type":179,"value":198},"容器是什么？",{"type":173,"tag":188,"props":200,"children":201},{},[202],{"type":179,"value":203},"容器是一种软件打包的技术。通过对系统资源的控制与隔离，把软件、软件运行时、系统工具、系统库和配置打包到一个镜像中，运行在有有独立命名空间的容器进程内，可以使软件的所有依赖都标准化。所以使用容器技术能方便地将软件打包成标准单元。",{"type":173,"tag":174,"props":205,"children":207},{"id":206},"原理",[208],{"type":179,"value":206},{"type":173,"tag":188,"props":210,"children":211},{},[212,214,228],{"type":179,"value":213},"Docker 和虚拟机都希望能提供一个虚拟、完整、独立的运行时环境，通过提高虚拟环境的隔离型，以便管理。一般来说，虚拟机的原理是模拟硬件环境，所以需要安装客户端操作系统",{"type":173,"tag":215,"props":216,"children":217},"sup",{},[218],{"type":173,"tag":219,"props":220,"children":225},"a",{"href":221,"ariaDescribedBy":222,"dataFootnoteRef":166,"id":224},"#user-content-fn-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[223],"footnote-label","user-content-fnref-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[226],{"type":179,"value":227},"1",{"type":179,"value":229},"，而 Docker 并不需要这层客户端操作系统，所以 Docker 更加轻量，硬件利用率也更高。",{"type":173,"tag":188,"props":231,"children":232},{},[233],{"type":179,"value":234},"虚拟机使用 Hypervisor 实现操作系统级别的模拟，而 Docker 通过操作系统的文件系统、命名空间、控制组实现进程级别的模拟。",{"type":173,"tag":188,"props":236,"children":237},{},[238],{"type":179,"value":239},"命名空间：所有 Linux 的进程都从 init 进程 fork 派生。Linux 容器的一个主要组件是新的命名空间下的一个 init 进程，所以我们有能力去创建一个不影响外界的进程树出来。",{"type":173,"tag":188,"props":241,"children":242},{},[243],{"type":179,"value":244},"控制组：通过控制组，我们能限制进程对 CPU、磁盘、内存的使用。",{"type":173,"tag":174,"props":246,"children":248},{"id":247},"概念",[249],{"type":179,"value":247},{"type":173,"tag":251,"props":252,"children":253},"ol",{},[254,260,265,270],{"type":173,"tag":255,"props":256,"children":257},"li",{},[258],{"type":179,"value":259},"隔离环境：虚拟文件系统；POSIX API；文件的只读和屏蔽；命名空间、环境变量等；",{"type":173,"tag":255,"props":261,"children":262},{},[263],{"type":179,"value":264},"生命周期：created、running、pausing、paused、stopped；可以通过 update 动态调整硬件资源使用率",{"type":173,"tag":255,"props":266,"children":267},{},[268],{"type":179,"value":269},"数据卷：数据卷由自己的独立的生命周期",{"type":173,"tag":255,"props":271,"children":272},{},[273],{"type":179,"value":274},"网络：独立的网络命名空间、共享其他实例的网络命名空间、共享主机的网络命名空间",{"type":173,"tag":174,"props":276,"children":278},{"id":277},"架构",[279],{"type":179,"value":277},{"type":173,"tag":188,"props":281,"children":282},{},[283],{"type":179,"value":284},"Docker 引擎实际上由 Dockerd、Containerd、RunC 等组件构成",{"type":173,"tag":188,"props":286,"children":287},{},[288],{"type":179,"value":289},"Dockerd：容器管理 -> 编排管理和集群管理。它接受来自外部的 HTTP 请求并作为 API 调用执行，对内与 Containerd 进行通讯。",{"type":173,"tag":188,"props":291,"children":292},{},[293],{"type":179,"value":294},"Containerd：对镜像、容器的管理提供了一个更进一步的抽象，提供了内容、快照、差异、容器、镜像、任务等更加细粒度的概念。",{"type":173,"tag":188,"props":296,"children":297},{},[298],{"type":179,"value":299},"Container 包含 Containerd-shim，用于正确处理由操作系统发送过来的信号。",{"type":173,"tag":188,"props":301,"children":302},{},[303],{"type":179,"value":304},"RunC：Containerd 提供的容器管理等 API 的执行者是 RunC。",{"type":173,"tag":174,"props":306,"children":308},{"id":307},"常见指令",[309],{"type":179,"value":307},{"type":173,"tag":311,"props":312,"children":313},"ul",{},[314,332,349,366,383],{"type":173,"tag":255,"props":315,"children":316},{},[317,324,326],{"type":173,"tag":318,"props":319,"children":321},"code",{"className":320},[],[322],{"type":179,"value":323},"ps",{"type":179,"value":325},"：列表，如 ",{"type":173,"tag":318,"props":327,"children":329},{"className":328},[],[330],{"type":179,"value":331},"docker ps",{"type":173,"tag":255,"props":333,"children":334},{},[335,341,343],{"type":173,"tag":318,"props":336,"children":338},{"className":337},[],[339],{"type":179,"value":340},"build",{"type":179,"value":342},"：打包镜像，如 ",{"type":173,"tag":318,"props":344,"children":346},{"className":345},[],[347],{"type":179,"value":348},"docker build -t test . -f Dockerfile",{"type":173,"tag":255,"props":350,"children":351},{},[352,358,360],{"type":173,"tag":318,"props":353,"children":355},{"className":354},[],[356],{"type":179,"value":357},"run",{"type":179,"value":359},"：运行镜像，如 ",{"type":173,"tag":318,"props":361,"children":363},{"className":362},[],[364],{"type":179,"value":365},"docker run -it test",{"type":173,"tag":255,"props":367,"children":368},{},[369,375,377],{"type":173,"tag":318,"props":370,"children":372},{"className":371},[],[373],{"type":179,"value":374},"exec",{"type":179,"value":376},"：执行容器指令，如 ",{"type":173,"tag":318,"props":378,"children":380},{"className":379},[],[381],{"type":179,"value":382},"docker exec -it xxx bash",{"type":173,"tag":255,"props":384,"children":385},{},[386,392,394],{"type":173,"tag":318,"props":387,"children":389},{"className":388},[],[390],{"type":179,"value":391},"copy",{"type":179,"value":393},"：复制文件到 Docker 中，如 ",{"type":173,"tag":318,"props":395,"children":397},{"className":396},[],[398],{"type":179,"value":399},"docker cp d://test dockerID:dockerPath",{"type":173,"tag":174,"props":401,"children":403},{"id":402},"调试流程",[404],{"type":179,"value":402},{"type":173,"tag":251,"props":406,"children":407},{},[408,419,430],{"type":173,"tag":255,"props":409,"children":410},{},[411,413],{"type":179,"value":412},"拉远端镜像：",{"type":173,"tag":318,"props":414,"children":416},{"className":415},[],[417],{"type":179,"value":418},"docker pull registry.gitlab.p-ray.cn/moe:75150",{"type":173,"tag":255,"props":420,"children":421},{},[422,424],{"type":179,"value":423},"启动容器：",{"type":173,"tag":318,"props":425,"children":427},{"className":426},[],[428],{"type":179,"value":429},"docker run -p 8081:7001 -it \u003CimageID> sleep 999m",{"type":173,"tag":255,"props":431,"children":432},{},[433,435],{"type":179,"value":434},"进入并调试：",{"type":173,"tag":318,"props":436,"children":438},{"className":437},[],[439],{"type":179,"value":440},"docker exec -it \u003CinstanceName> /bin/bash",{"type":173,"tag":188,"props":442,"children":443},{},[444,450],{"type":173,"tag":318,"props":445,"children":447},{"className":446},[],[448],{"type":179,"value":449},"-p 8081:7001",{"type":179,"value":451},"，把本机的 8081 端口绑定到 Container 的 7001 端口。",{"type":173,"tag":174,"props":453,"children":455},{"id":454},"常见问题",[456],{"type":179,"value":454},{"type":173,"tag":188,"props":458,"children":459},{},[460,462],{"type":179,"value":461},"关闭 Hyper-V：",{"type":173,"tag":318,"props":463,"children":465},{"className":464},[],[466],{"type":179,"value":467},"bcdedit /set hypervisorlaunchtype off",{"type":173,"tag":469,"props":470,"children":473},"section",{"className":471,"dataFootnotes":166},[472],"footnotes",[474,481],{"type":173,"tag":174,"props":475,"children":478},{"className":476,"id":223},[477],"sr-only",[479],{"type":179,"value":480},"Footnotes",{"type":173,"tag":251,"props":482,"children":483},{},[484],{"type":173,"tag":255,"props":485,"children":487},{"id":486},"user-content-fn-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[488,490],{"type":179,"value":489},"虚拟机一般有三种模拟方式，裸机型（硬件 + 虚拟 OS + 虚拟 APP）、托管型（OS + Hypervisor + 虚拟 OS + 虚拟 APP）和操作系统虚拟化（OS + 容器 + 虚拟 APP）。 ",{"type":173,"tag":219,"props":491,"children":496},{"href":492,"ariaLabel":493,"className":494,"dataFootnoteBackref":166},"#user-content-fnref-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6","Back to reference 1",[495],"data-footnote-backref",[497],{"type":179,"value":498},"↩",{"title":166,"searchDepth":500,"depth":500,"links":501},2,[502,503,504,505,506,507,508,509],{"id":176,"depth":500,"text":176},{"id":206,"depth":500,"text":206},{"id":247,"depth":500,"text":247},{"id":277,"depth":500,"text":277},{"id":307,"depth":500,"text":307},{"id":402,"depth":500,"text":402},{"id":454,"depth":500,"text":454},{"id":223,"depth":500,"text":480},"markdown","content:6.maps:_devops:docker.md","content","6.maps/_devops/docker.md","6.maps/_devops/docker","md",[517,521],{"_path":518,"title":519,"description":520},"/maps/_devops/devops","DevOps","DevOps 是一种开发理论，它致力于将大量自动化操作整合进开发到交付过程中，以消除各个团队（如开发、安全、运维）之间的隔阂，使需求尽快交付，并得到质量反馈。",{"_path":522,"title":523,"description":524},"/maps/_devops/git","Git","Git 是一种版本控制工具，用来追踪代码在开发进程中发生的变化。",1761757120223]