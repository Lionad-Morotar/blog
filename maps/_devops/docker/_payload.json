[{"data":1,"prerenderedAt":519},["ShallowReactive",2],{"navigation":3,"/maps/_devops/docker":155,"/maps/_devops/docker-surround":510},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":504,"_id":505,"_source":506,"_file":507,"_stem":508,"_extension":509},"/maps/_devops/docker","_devops",false,true,"","Docker","Docker 是一种容器管理工具，通过对系统资源的控制与隔离，把软件、软件运行时、系统工具、系统库和配置打包到一个镜像中，运行在有有独立命名空间的容器进程内，可以使软件的所有依赖都标准化。",{"type":164,"children":165,"toc":493},"root",[166,174,181,187,193,198,203,224,229,234,239,244,269,274,279,284,289,294,299,304,394,399,435,446,451,462],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"简介",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":178},"h4",{"id":177},"docker-是什么",[179],{"type":173,"value":180},"Docker 是什么？",{"type":167,"tag":182,"props":183,"children":184},"p",{},[185],{"type":173,"value":186},"Docker 本身不是容器，而是容器标准的一种实现及其管理工具。",{"type":167,"tag":175,"props":188,"children":190},{"id":189},"容器是什么",[191],{"type":173,"value":192},"容器是什么？",{"type":167,"tag":182,"props":194,"children":195},{},[196],{"type":173,"value":197},"容器是一种软件打包的技术。通过对系统资源的控制与隔离，把软件、软件运行时、系统工具、系统库和配置打包到一个镜像中，运行在有有独立命名空间的容器进程内，可以使软件的所有依赖都标准化。所以使用容器技术能方便地将软件打包成标准单元。",{"type":167,"tag":168,"props":199,"children":201},{"id":200},"原理",[202],{"type":173,"value":200},{"type":167,"tag":182,"props":204,"children":205},{},[206,208,222],{"type":173,"value":207},"Docker 和虚拟机都希望能提供一个虚拟、完整、独立的运行时环境，通过提高虚拟环境的隔离型，以便管理。一般来说，虚拟机的原理是模拟硬件环境，所以需要安装客户端操作系统",{"type":167,"tag":209,"props":210,"children":211},"sup",{},[212],{"type":167,"tag":213,"props":214,"children":219},"a",{"href":215,"ariaDescribedBy":216,"dataFootnoteRef":160,"id":218},"#user-content-fn-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[217],"footnote-label","user-content-fnref-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[220],{"type":173,"value":221},"1",{"type":173,"value":223},"，而 Docker 并不需要这层客户端操作系统，所以 Docker 更加轻量，硬件利用率也更高。",{"type":167,"tag":182,"props":225,"children":226},{},[227],{"type":173,"value":228},"虚拟机使用 Hypervisor 实现操作系统级别的模拟，而 Docker 通过操作系统的文件系统、命名空间、控制组实现进程级别的模拟。",{"type":167,"tag":182,"props":230,"children":231},{},[232],{"type":173,"value":233},"命名空间：所有 Linux 的进程都从 init 进程 fork 派生。Linux 容器的一个主要组件是新的命名空间下的一个 init 进程，所以我们有能力去创建一个不影响外界的进程树出来。",{"type":167,"tag":182,"props":235,"children":236},{},[237],{"type":173,"value":238},"控制组：通过控制组，我们能限制进程对 CPU、磁盘、内存的使用。",{"type":167,"tag":168,"props":240,"children":242},{"id":241},"概念",[243],{"type":173,"value":241},{"type":167,"tag":245,"props":246,"children":247},"ol",{},[248,254,259,264],{"type":167,"tag":249,"props":250,"children":251},"li",{},[252],{"type":173,"value":253},"隔离环境：虚拟文件系统；POSIX API；文件的只读和屏蔽；命名空间、环境变量等；",{"type":167,"tag":249,"props":255,"children":256},{},[257],{"type":173,"value":258},"生命周期：created、running、pausing、paused、stopped；可以通过 update 动态调整硬件资源使用率",{"type":167,"tag":249,"props":260,"children":261},{},[262],{"type":173,"value":263},"数据卷：数据卷由自己的独立的生命周期",{"type":167,"tag":249,"props":265,"children":266},{},[267],{"type":173,"value":268},"网络：独立的网络命名空间、共享其他实例的网络命名空间、共享主机的网络命名空间",{"type":167,"tag":168,"props":270,"children":272},{"id":271},"架构",[273],{"type":173,"value":271},{"type":167,"tag":182,"props":275,"children":276},{},[277],{"type":173,"value":278},"Docker 引擎实际上由 Dockerd、Containerd、RunC 等组件构成",{"type":167,"tag":182,"props":280,"children":281},{},[282],{"type":173,"value":283},"Dockerd：容器管理 -> 编排管理和集群管理。它接受来自外部的 HTTP 请求并作为 API 调用执行，对内与 Containerd 进行通讯。",{"type":167,"tag":182,"props":285,"children":286},{},[287],{"type":173,"value":288},"Containerd：对镜像、容器的管理提供了一个更进一步的抽象，提供了内容、快照、差异、容器、镜像、任务等更加细粒度的概念。",{"type":167,"tag":182,"props":290,"children":291},{},[292],{"type":173,"value":293},"Container 包含 Containerd-shim，用于正确处理由操作系统发送过来的信号。",{"type":167,"tag":182,"props":295,"children":296},{},[297],{"type":173,"value":298},"RunC：Containerd 提供的容器管理等 API 的执行者是 RunC。",{"type":167,"tag":168,"props":300,"children":302},{"id":301},"常见指令",[303],{"type":173,"value":301},{"type":167,"tag":305,"props":306,"children":307},"ul",{},[308,326,343,360,377],{"type":167,"tag":249,"props":309,"children":310},{},[311,318,320],{"type":167,"tag":312,"props":313,"children":315},"code",{"className":314},[],[316],{"type":173,"value":317},"ps",{"type":173,"value":319},"：列表，如 ",{"type":167,"tag":312,"props":321,"children":323},{"className":322},[],[324],{"type":173,"value":325},"docker ps",{"type":167,"tag":249,"props":327,"children":328},{},[329,335,337],{"type":167,"tag":312,"props":330,"children":332},{"className":331},[],[333],{"type":173,"value":334},"build",{"type":173,"value":336},"：打包镜像，如 ",{"type":167,"tag":312,"props":338,"children":340},{"className":339},[],[341],{"type":173,"value":342},"docker build -t test . -f Dockerfile",{"type":167,"tag":249,"props":344,"children":345},{},[346,352,354],{"type":167,"tag":312,"props":347,"children":349},{"className":348},[],[350],{"type":173,"value":351},"run",{"type":173,"value":353},"：运行镜像，如 ",{"type":167,"tag":312,"props":355,"children":357},{"className":356},[],[358],{"type":173,"value":359},"docker run -it test",{"type":167,"tag":249,"props":361,"children":362},{},[363,369,371],{"type":167,"tag":312,"props":364,"children":366},{"className":365},[],[367],{"type":173,"value":368},"exec",{"type":173,"value":370},"：执行容器指令，如 ",{"type":167,"tag":312,"props":372,"children":374},{"className":373},[],[375],{"type":173,"value":376},"docker exec -it xxx bash",{"type":167,"tag":249,"props":378,"children":379},{},[380,386,388],{"type":167,"tag":312,"props":381,"children":383},{"className":382},[],[384],{"type":173,"value":385},"copy",{"type":173,"value":387},"：复制文件到 Docker 中，如 ",{"type":167,"tag":312,"props":389,"children":391},{"className":390},[],[392],{"type":173,"value":393},"docker cp d://test dockerID:dockerPath",{"type":167,"tag":168,"props":395,"children":397},{"id":396},"调试流程",[398],{"type":173,"value":396},{"type":167,"tag":245,"props":400,"children":401},{},[402,413,424],{"type":167,"tag":249,"props":403,"children":404},{},[405,407],{"type":173,"value":406},"拉远端镜像：",{"type":167,"tag":312,"props":408,"children":410},{"className":409},[],[411],{"type":173,"value":412},"docker pull registry.gitlab.p-ray.cn/moe:75150",{"type":167,"tag":249,"props":414,"children":415},{},[416,418],{"type":173,"value":417},"启动容器：",{"type":167,"tag":312,"props":419,"children":421},{"className":420},[],[422],{"type":173,"value":423},"docker run -p 8081:7001 -it \u003CimageID> sleep 999m",{"type":167,"tag":249,"props":425,"children":426},{},[427,429],{"type":173,"value":428},"进入并调试：",{"type":167,"tag":312,"props":430,"children":432},{"className":431},[],[433],{"type":173,"value":434},"docker exec -it \u003CinstanceName> /bin/bash",{"type":167,"tag":182,"props":436,"children":437},{},[438,444],{"type":167,"tag":312,"props":439,"children":441},{"className":440},[],[442],{"type":173,"value":443},"-p 8081:7001",{"type":173,"value":445},"，把本机的 8081 端口绑定到 Container 的 7001 端口。",{"type":167,"tag":168,"props":447,"children":449},{"id":448},"常见问题",[450],{"type":173,"value":448},{"type":167,"tag":182,"props":452,"children":453},{},[454,456],{"type":173,"value":455},"关闭 Hyper-V：",{"type":167,"tag":312,"props":457,"children":459},{"className":458},[],[460],{"type":173,"value":461},"bcdedit /set hypervisorlaunchtype off",{"type":167,"tag":463,"props":464,"children":467},"section",{"className":465,"dataFootnotes":160},[466],"footnotes",[468,475],{"type":167,"tag":168,"props":469,"children":472},{"className":470,"id":217},[471],"sr-only",[473],{"type":173,"value":474},"Footnotes",{"type":167,"tag":245,"props":476,"children":477},{},[478],{"type":167,"tag":249,"props":479,"children":481},{"id":480},"user-content-fn-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[482,484],{"type":173,"value":483},"虚拟机一般有三种模拟方式，裸机型（硬件 + 虚拟 OS + 虚拟 APP）、托管型（OS + Hypervisor + 虚拟 OS + 虚拟 APP）和操作系统虚拟化（OS + 容器 + 虚拟 APP）。 ",{"type":167,"tag":213,"props":485,"children":490},{"href":486,"ariaLabel":487,"className":488,"dataFootnoteBackref":160},"#user-content-fnref-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6","Back to reference 1",[489],"data-footnote-backref",[491],{"type":173,"value":492},"↩",{"title":160,"searchDepth":494,"depth":494,"links":495},2,[496,497,498,499,500,501,502,503],{"id":170,"depth":494,"text":170},{"id":200,"depth":494,"text":200},{"id":241,"depth":494,"text":241},{"id":271,"depth":494,"text":271},{"id":301,"depth":494,"text":301},{"id":396,"depth":494,"text":396},{"id":448,"depth":494,"text":448},{"id":217,"depth":494,"text":474},"markdown","content:6.maps:_devops:docker.md","content","6.maps/_devops/docker.md","6.maps/_devops/docker","md",[511,515],{"_path":512,"title":513,"description":514},"/maps/_devops/devops","DevOps","DevOps 是一种开发理论，它致力于将大量自动化操作整合进开发到交付过程中，以消除各个团队（如开发、安全、运维）之间的隔阂，使需求尽快交付，并得到质量反馈。",{"_path":516,"title":517,"description":518},"/maps/_devops/git","Git","Git 是一种版本控制工具，用来追踪代码在开发进程中发生的变化。",1742745250838]