[{"data":1,"prerenderedAt":522},["ShallowReactive",2],{"navigation":3,"/maps/_devops/docker":158,"/maps/_devops/docker-surround":513},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":507,"_id":508,"_source":509,"_file":510,"_stem":511,"_extension":512},"/maps/_devops/docker","_devops",false,true,"","Docker","Docker 是一种容器管理工具，通过对系统资源的控制与隔离，把软件、软件运行时、系统工具、系统库和配置打包到一个镜像中，运行在有有独立命名空间的容器进程内，可以使软件的所有依赖都标准化。",{"type":167,"children":168,"toc":496},"root",[169,177,184,190,196,201,206,227,232,237,242,247,272,277,282,287,292,297,302,307,397,402,438,449,454,465],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"简介",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"docker-是什么",[182],{"type":176,"value":183},"Docker 是什么？",{"type":170,"tag":185,"props":186,"children":187},"p",{},[188],{"type":176,"value":189},"Docker 本身不是容器，而是容器标准的一种实现及其管理工具。",{"type":170,"tag":178,"props":191,"children":193},{"id":192},"容器是什么",[194],{"type":176,"value":195},"容器是什么？",{"type":170,"tag":185,"props":197,"children":198},{},[199],{"type":176,"value":200},"容器是一种软件打包的技术。通过对系统资源的控制与隔离，把软件、软件运行时、系统工具、系统库和配置打包到一个镜像中，运行在有有独立命名空间的容器进程内，可以使软件的所有依赖都标准化。所以使用容器技术能方便地将软件打包成标准单元。",{"type":170,"tag":171,"props":202,"children":204},{"id":203},"原理",[205],{"type":176,"value":203},{"type":170,"tag":185,"props":207,"children":208},{},[209,211,225],{"type":176,"value":210},"Docker 和虚拟机都希望能提供一个虚拟、完整、独立的运行时环境，通过提高虚拟环境的隔离型，以便管理。一般来说，虚拟机的原理是模拟硬件环境，所以需要安装客户端操作系统",{"type":170,"tag":212,"props":213,"children":214},"sup",{},[215],{"type":170,"tag":216,"props":217,"children":222},"a",{"href":218,"ariaDescribedBy":219,"dataFootnoteRef":163,"id":221},"#user-content-fn-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[220],"footnote-label","user-content-fnref-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[223],{"type":176,"value":224},"1",{"type":176,"value":226},"，而 Docker 并不需要这层客户端操作系统，所以 Docker 更加轻量，硬件利用率也更高。",{"type":170,"tag":185,"props":228,"children":229},{},[230],{"type":176,"value":231},"虚拟机使用 Hypervisor 实现操作系统级别的模拟，而 Docker 通过操作系统的文件系统、命名空间、控制组实现进程级别的模拟。",{"type":170,"tag":185,"props":233,"children":234},{},[235],{"type":176,"value":236},"命名空间：所有 Linux 的进程都从 init 进程 fork 派生。Linux 容器的一个主要组件是新的命名空间下的一个 init 进程，所以我们有能力去创建一个不影响外界的进程树出来。",{"type":170,"tag":185,"props":238,"children":239},{},[240],{"type":176,"value":241},"控制组：通过控制组，我们能限制进程对 CPU、磁盘、内存的使用。",{"type":170,"tag":171,"props":243,"children":245},{"id":244},"概念",[246],{"type":176,"value":244},{"type":170,"tag":248,"props":249,"children":250},"ol",{},[251,257,262,267],{"type":170,"tag":252,"props":253,"children":254},"li",{},[255],{"type":176,"value":256},"隔离环境：虚拟文件系统；POSIX API；文件的只读和屏蔽；命名空间、环境变量等；",{"type":170,"tag":252,"props":258,"children":259},{},[260],{"type":176,"value":261},"生命周期：created、running、pausing、paused、stopped；可以通过 update 动态调整硬件资源使用率",{"type":170,"tag":252,"props":263,"children":264},{},[265],{"type":176,"value":266},"数据卷：数据卷由自己的独立的生命周期",{"type":170,"tag":252,"props":268,"children":269},{},[270],{"type":176,"value":271},"网络：独立的网络命名空间、共享其他实例的网络命名空间、共享主机的网络命名空间",{"type":170,"tag":171,"props":273,"children":275},{"id":274},"架构",[276],{"type":176,"value":274},{"type":170,"tag":185,"props":278,"children":279},{},[280],{"type":176,"value":281},"Docker 引擎实际上由 Dockerd、Containerd、RunC 等组件构成",{"type":170,"tag":185,"props":283,"children":284},{},[285],{"type":176,"value":286},"Dockerd：容器管理 -> 编排管理和集群管理。它接受来自外部的 HTTP 请求并作为 API 调用执行，对内与 Containerd 进行通讯。",{"type":170,"tag":185,"props":288,"children":289},{},[290],{"type":176,"value":291},"Containerd：对镜像、容器的管理提供了一个更进一步的抽象，提供了内容、快照、差异、容器、镜像、任务等更加细粒度的概念。",{"type":170,"tag":185,"props":293,"children":294},{},[295],{"type":176,"value":296},"Container 包含 Containerd-shim，用于正确处理由操作系统发送过来的信号。",{"type":170,"tag":185,"props":298,"children":299},{},[300],{"type":176,"value":301},"RunC：Containerd 提供的容器管理等 API 的执行者是 RunC。",{"type":170,"tag":171,"props":303,"children":305},{"id":304},"常见指令",[306],{"type":176,"value":304},{"type":170,"tag":308,"props":309,"children":310},"ul",{},[311,329,346,363,380],{"type":170,"tag":252,"props":312,"children":313},{},[314,321,323],{"type":170,"tag":315,"props":316,"children":318},"code",{"className":317},[],[319],{"type":176,"value":320},"ps",{"type":176,"value":322},"：列表，如 ",{"type":170,"tag":315,"props":324,"children":326},{"className":325},[],[327],{"type":176,"value":328},"docker ps",{"type":170,"tag":252,"props":330,"children":331},{},[332,338,340],{"type":170,"tag":315,"props":333,"children":335},{"className":334},[],[336],{"type":176,"value":337},"build",{"type":176,"value":339},"：打包镜像，如 ",{"type":170,"tag":315,"props":341,"children":343},{"className":342},[],[344],{"type":176,"value":345},"docker build -t test . -f Dockerfile",{"type":170,"tag":252,"props":347,"children":348},{},[349,355,357],{"type":170,"tag":315,"props":350,"children":352},{"className":351},[],[353],{"type":176,"value":354},"run",{"type":176,"value":356},"：运行镜像，如 ",{"type":170,"tag":315,"props":358,"children":360},{"className":359},[],[361],{"type":176,"value":362},"docker run -it test",{"type":170,"tag":252,"props":364,"children":365},{},[366,372,374],{"type":170,"tag":315,"props":367,"children":369},{"className":368},[],[370],{"type":176,"value":371},"exec",{"type":176,"value":373},"：执行容器指令，如 ",{"type":170,"tag":315,"props":375,"children":377},{"className":376},[],[378],{"type":176,"value":379},"docker exec -it xxx bash",{"type":170,"tag":252,"props":381,"children":382},{},[383,389,391],{"type":170,"tag":315,"props":384,"children":386},{"className":385},[],[387],{"type":176,"value":388},"copy",{"type":176,"value":390},"：复制文件到 Docker 中，如 ",{"type":170,"tag":315,"props":392,"children":394},{"className":393},[],[395],{"type":176,"value":396},"docker cp d://test dockerID:dockerPath",{"type":170,"tag":171,"props":398,"children":400},{"id":399},"调试流程",[401],{"type":176,"value":399},{"type":170,"tag":248,"props":403,"children":404},{},[405,416,427],{"type":170,"tag":252,"props":406,"children":407},{},[408,410],{"type":176,"value":409},"拉远端镜像：",{"type":170,"tag":315,"props":411,"children":413},{"className":412},[],[414],{"type":176,"value":415},"docker pull registry.gitlab.p-ray.cn/moe:75150",{"type":170,"tag":252,"props":417,"children":418},{},[419,421],{"type":176,"value":420},"启动容器：",{"type":170,"tag":315,"props":422,"children":424},{"className":423},[],[425],{"type":176,"value":426},"docker run -p 8081:7001 -it \u003CimageID> sleep 999m",{"type":170,"tag":252,"props":428,"children":429},{},[430,432],{"type":176,"value":431},"进入并调试：",{"type":170,"tag":315,"props":433,"children":435},{"className":434},[],[436],{"type":176,"value":437},"docker exec -it \u003CinstanceName> /bin/bash",{"type":170,"tag":185,"props":439,"children":440},{},[441,447],{"type":170,"tag":315,"props":442,"children":444},{"className":443},[],[445],{"type":176,"value":446},"-p 8081:7001",{"type":176,"value":448},"，把本机的 8081 端口绑定到 Container 的 7001 端口。",{"type":170,"tag":171,"props":450,"children":452},{"id":451},"常见问题",[453],{"type":176,"value":451},{"type":170,"tag":185,"props":455,"children":456},{},[457,459],{"type":176,"value":458},"关闭 Hyper-V：",{"type":170,"tag":315,"props":460,"children":462},{"className":461},[],[463],{"type":176,"value":464},"bcdedit /set hypervisorlaunchtype off",{"type":170,"tag":466,"props":467,"children":470},"section",{"className":468,"dataFootnotes":163},[469],"footnotes",[471,478],{"type":170,"tag":171,"props":472,"children":475},{"className":473,"id":220},[474],"sr-only",[476],{"type":176,"value":477},"Footnotes",{"type":170,"tag":248,"props":479,"children":480},{},[481],{"type":170,"tag":252,"props":482,"children":484},{"id":483},"user-content-fn-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6",[485,487],{"type":176,"value":486},"虚拟机一般有三种模拟方式，裸机型（硬件 + 虚拟 OS + 虚拟 APP）、托管型（OS + Hypervisor + 虚拟 OS + 虚拟 APP）和操作系统虚拟化（OS + 容器 + 虚拟 APP）。 ",{"type":170,"tag":216,"props":488,"children":493},{"href":489,"ariaLabel":490,"className":491,"dataFootnoteBackref":163},"#user-content-fnref-%E6%A8%A1%E6%8B%9F%E7%A1%AC%E4%BB%B6","Back to reference 1",[492],"data-footnote-backref",[494],{"type":176,"value":495},"↩",{"title":163,"searchDepth":497,"depth":497,"links":498},2,[499,500,501,502,503,504,505,506],{"id":173,"depth":497,"text":173},{"id":203,"depth":497,"text":203},{"id":244,"depth":497,"text":244},{"id":274,"depth":497,"text":274},{"id":304,"depth":497,"text":304},{"id":399,"depth":497,"text":399},{"id":451,"depth":497,"text":451},{"id":220,"depth":497,"text":477},"markdown","content:6.maps:_devops:docker.md","content","6.maps/_devops/docker.md","6.maps/_devops/docker","md",[514,518],{"_path":515,"title":516,"description":517},"/maps/_devops/devops","DevOps","DevOps 是一种开发理论，它致力于将大量自动化操作整合进开发到交付过程中，以消除各个团队（如开发、安全、运维）之间的隔阂，使需求尽快交付，并得到质量反馈。",{"_path":519,"title":520,"description":521},"/maps/_devops/git","Git","Git 是一种版本控制工具，用来追踪代码在开发进程中发生的变化。",1742808200240]