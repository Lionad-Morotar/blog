[{"data":1,"prerenderedAt":1036},["Reactive",2],{"navigation":3,"/maps/_framework/vue":389,"/maps/_framework/vue-surround":1029},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":390,"_dir":391,"_draft":392,"_partial":393,"_locale":394,"title":395,"description":394,"body":396,"_type":1024,"_id":1025,"_source":1026,"_file":1027,"_extension":1028},"/maps/_framework/vue","_framework",false,true,"","Vue Mind Map",{"type":397,"children":398,"toc":1009},"root",[399,407,413,440,445,452,470,476,482,487,492,498,503,509,532,538,556,562,567,572,577,589,594,600,605,610,616,627,632,638,647,653,659,664,670,681,692,703,714,719,725,730,736,741,747,752,758,764,769,775,779,789,795,806,811,816,821,826,840,853,858,871,876,889,894,953,998,1003],{"type":400,"tag":401,"props":402,"children":404},"element","h1",{"id":403},"vue-mind-map",[405],{"type":406,"value":395},"text",{"type":400,"tag":408,"props":409,"children":410},"h2",{"id":385},[411],{"type":406,"value":412},"TODO",{"type":400,"tag":414,"props":415,"children":416},"ul",{},[417,430],{"type":400,"tag":418,"props":419,"children":420},"li",{},[421],{"type":400,"tag":422,"props":423,"children":427},"a",{"href":424,"rel":425},"https://www.zhihu.com/question/390956688/answer/1184696066",[426],"nofollow",[428],{"type":406,"value":429},"Vue.js 技术揭秘",{"type":400,"tag":418,"props":431,"children":432},{},[433],{"type":400,"tag":422,"props":434,"children":437},{"href":435,"rel":436},"https://github.com/HcySunYang/vue-design/blob/elegant/docs/art/1start-learn",[426],[438],{"type":406,"value":439},"vue-design",{"type":400,"tag":408,"props":441,"children":443},{"id":442},"简介",[444],{"type":406,"value":442},{"type":400,"tag":446,"props":447,"children":449},"h4",{"id":448},"前端框架发展历史关键点",[450],{"type":406,"value":451},"前端框架发展历史关键点？",{"type":400,"tag":414,"props":453,"children":454},{},[455,460,465],{"type":400,"tag":418,"props":456,"children":457},{},[458],{"type":406,"value":459},"2004 年，Google Gmail 使用的 Ajax 技术使前端脱离模板的束缚。",{"type":400,"tag":418,"props":461,"children":462},{},[463],{"type":406,"value":464},"jQuery 解决了不同浏览器的兼容性问题。",{"type":400,"tag":418,"props":466,"children":467},{},[468],{"type":406,"value":469},"2009 年，AngularJS 引领了 MVVM 的潮流，NodeJS 加速了前端工程化的诞生。",{"type":400,"tag":446,"props":471,"children":473},{"id":472},"vue-和-react-的计算性能瓶颈是什么",[474],{"type":406,"value":475},"Vue 和 React 的计算性能瓶颈是什么？",{"type":400,"tag":477,"props":478,"children":479},"p",{},[480],{"type":406,"value":481},"Vue1 的每一个响应式数据都有一个 Watcher，极大的消耗内存，React 的问题发生在当页面 JS 执行 Diff 算法超过帧时间时带来的卡顿问题。",{"type":400,"tag":477,"props":483,"children":484},{},[485],{"type":406,"value":486},"Vue2 引入虚拟 DOM，采用组件级别的响应式数据颗粒度，在避免了 Diff 算法超时问题的同时，降低内存消耗。同时，虚拟 DOM 还带来跨端能力。",{"type":400,"tag":477,"props":488,"children":489},{},[490],{"type":406,"value":491},"React 引入 Fiber 架构，将 DOM Tree 变成链表，使得有能力随时启动或停止 Diff 算法（树的遍历使用递归所以相比链表更难记录状态），可以利用浏览器的空闲时间计算 Diff，避免了卡顿。",{"type":400,"tag":446,"props":493,"children":495},{"id":494},"mvvmmvc-的区别",[496],{"type":406,"value":497},"MVVM、MVC 的区别？",{"type":400,"tag":477,"props":499,"children":500},{},[501],{"type":406,"value":502},"都是软件架构模式，主要区别是关注点不一样，Controller 用来承接交互操作并触发 Model 的修改，而 ViewModel 和 Model 层是双向绑定的，所以写 VueJS 时的思想不在如何操作 DOM 元素，而主要是数据应该怎么变化。",{"type":400,"tag":446,"props":504,"children":506},{"id":505},"vue2-较明显的设计缺陷",[507],{"type":406,"value":508},"Vue2 较明显的设计缺陷？",{"type":400,"tag":414,"props":510,"children":511},{},[512,517,522,527],{"type":400,"tag":418,"props":513,"children":514},{},[515],{"type":406,"value":516},"使用 Flow.js 来做类型校验，而不是社区所向的 TypeScript",{"type":400,"tag":418,"props":518,"children":519},{},[520],{"type":406,"value":521},"Vue2 内嵌了诸如 DOM API 之类的代码，使得跨端等二次开发变得困难，代码耦合也使得摇树优化变得困难",{"type":400,"tag":418,"props":523,"children":524},{},[525],{"type":406,"value":526},"Vue2 使用的 defineProperty 有缺陷，不支持 delete 等操作符",{"type":400,"tag":418,"props":528,"children":529},{},[530],{"type":406,"value":531},"Option API 在组件代码较多时不易维护",{"type":400,"tag":446,"props":533,"children":535},{"id":534},"option-api-的一些缺陷",[536],{"type":406,"value":537},"Option API 的一些缺陷？",{"type":400,"tag":414,"props":539,"children":540},{},[541,546,551],{"type":400,"tag":418,"props":542,"children":543},{},[544],{"type":406,"value":545},"数据挂载在 this 对象上，对类型系统以及摇树优化不友好",{"type":400,"tag":418,"props":547,"children":548},{},[549],{"type":406,"value":550},"代码增多时，维护变得困难",{"type":400,"tag":418,"props":552,"children":553},{},[554],{"type":406,"value":555},"不方便抽离通用逻辑",{"type":400,"tag":446,"props":557,"children":559},{"id":558},"为什么要重写-vue2",[560],{"type":406,"value":561},"为什么要重写 Vue2？",{"type":400,"tag":477,"props":563,"children":564},{},[565],{"type":406,"value":566},"有两个关键因素：主流浏览器逐渐兼容 Proxy，以及修复 Vue2 的设计缺陷。",{"type":400,"tag":477,"props":568,"children":569},{},[570],{"type":406,"value":571},"切换到 Proxy 可以修复过去 setter、getter 无法拦截数组修改以及修改了对象本身带来的语义变化的问题，但由于它是一个原生特性，无法 polyfill，所以对 Vue 而言是一个重大的突破性变动。",{"type":400,"tag":477,"props":573,"children":574},{},[575],{"type":406,"value":576},"过去的架构带来了模板很难正确的在 source-map 中追溯、渲染器（如 DOM 渲染器）不是渐进式的可选项的问题，再加上框架内部代码的耦合，使得摇树优化变得困难，代码也不便理解。",{"type":400,"tag":477,"props":578,"children":579},{},[580,582],{"type":406,"value":581},"见：",{"type":400,"tag":422,"props":583,"children":586},{"href":584,"rel":585},"https://zhuanlan.zhihu.com/p/147022323",[426],[587],{"type":406,"value":588},"重头来过的 Vue 3 带来了什么？",{"type":400,"tag":408,"props":590,"children":592},{"id":591},"响应式",[593],{"type":406,"value":591},{"type":400,"tag":446,"props":595,"children":597},{"id":596},"ref-的原理",[598],{"type":406,"value":599},"ref 的原理？",{"type":400,"tag":477,"props":601,"children":602},{},[603],{"type":406,"value":604},"ref 是在基础值的外面封装了一层对象，使用对象的 value setting、value getter 函数拦截并操作 value 属性，达到响应式的效果。",{"type":400,"tag":408,"props":606,"children":608},{"id":607},"模板",[609],{"type":406,"value":607},{"type":400,"tag":446,"props":611,"children":613},{"id":612},"vue3-双向绑定的原理",[614],{"type":406,"value":615},"Vue3 双向绑定的原理？",{"type":400,"tag":477,"props":617,"children":618},{},[619,620],{"type":406,"value":581},{"type":400,"tag":422,"props":621,"children":624},{"href":622,"rel":623},"https://segmentfault.com/a/1190000041716718",[426],[625],{"type":406,"value":626},"TODO，Vue.js 3.x 双向绑定原理",{"type":400,"tag":408,"props":628,"children":630},{"id":629},"编译器",[631],{"type":406,"value":629},{"type":400,"tag":446,"props":633,"children":635},{"id":634},"vue3-做的静态优化有哪些",[636],{"type":406,"value":637},"Vue3 做的静态优化有哪些？",{"type":400,"tag":477,"props":639,"children":640},{},[641],{"type":400,"tag":642,"props":643,"children":646},"img",{"alt":644,"src":645},"Vue3 Compiler Example","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628022452.png",[],{"type":400,"tag":408,"props":648,"children":650},{"id":649},"vdom",[651],{"type":406,"value":652},"VDOM",{"type":400,"tag":446,"props":654,"children":656},{"id":655},"vue2-和-vue3-的-dom-diff-算法有什么不同",[657],{"type":406,"value":658},"Vue2 和 Vue3 的 DOM Diff 算法有什么不同？",{"type":400,"tag":477,"props":660,"children":661},{},[662],{"type":406,"value":663},"Vue2 使用双端 diff，Vue3 使用最长递增子序列。",{"type":400,"tag":665,"props":666,"children":668},"h3",{"id":667},"todo-1",[669],{"type":406,"value":412},{"type":400,"tag":477,"props":671,"children":672},{},[673,675],{"type":406,"value":674},"为什么 React 的 Diff 算法不采用 Vue 的双端对比算法？",{"type":400,"tag":422,"props":676,"children":679},{"href":677,"rel":678},"https://juejin.cn/post/7116141318853623839",[426],[680],{"type":406,"value":677},{"type":400,"tag":477,"props":682,"children":683},{},[684,686],{"type":406,"value":685},"diff 算法深入一下？",{"type":400,"tag":422,"props":687,"children":690},{"href":688,"rel":689},"https://zhuanlan.zhihu.com/p/401340016",[426],[691],{"type":406,"value":688},{"type":400,"tag":477,"props":693,"children":694},{},[695,697],{"type":406,"value":696},"聊聊 Vue 的双端 diff 算法 ",{"type":400,"tag":422,"props":698,"children":701},{"href":699,"rel":700},"https://zhuanlan.zhihu.com/p/534903909",[426],[702],{"type":406,"value":699},{"type":400,"tag":477,"props":704,"children":705},{},[706,708],{"type":406,"value":707},"diff算法之双端对比 ",{"type":400,"tag":422,"props":709,"children":712},{"href":710,"rel":711},"https://zhuanlan.zhihu.com/p/432927438",[426],[713],{"type":406,"value":710},{"type":400,"tag":408,"props":715,"children":717},{"id":716},"组件",[718],{"type":406,"value":716},{"type":400,"tag":446,"props":720,"children":722},{"id":721},"keep-alive-的理解它是如何实现的具体缓存的是什么",[723],{"type":406,"value":724},"keep-alive 的理解，它是如何实现的，具体缓存的是什么？",{"type":400,"tag":477,"props":726,"children":727},{},[728],{"type":406,"value":729},"keep-alive 是一个内置抽象组件，会根据内部组件的 key，使用 LRU 策略来缓存组件实例。",{"type":400,"tag":446,"props":731,"children":733},{"id":732},"vue-的生命周期",[734],{"type":406,"value":735},"Vue 的生命周期",{"type":400,"tag":477,"props":737,"children":738},{},[739],{"type":406,"value":740},"keep-alive 独有 activated 和 deactivated 两个生命周期。",{"type":400,"tag":446,"props":742,"children":744},{"id":743},"vue-子组件和父组件执行顺序",[745],{"type":406,"value":746},"Vue 子组件和父组件执行顺序",{"type":400,"tag":477,"props":748,"children":749},{},[750],{"type":406,"value":751},"父组件 mount 前，初始化子组件，所以父组件 beforeMount 后直到子组件 mounted 完成，再挂载。update 和 destroy 两个阶段类似，都是子组件先行。",{"type":400,"tag":408,"props":753,"children":755},{"id":754},"vue-router",[756],{"type":406,"value":757},"Vue Router",{"type":400,"tag":446,"props":759,"children":761},{"id":760},"route-vs-router",[762],{"type":406,"value":763},"$route VS $router",{"type":400,"tag":477,"props":765,"children":766},{},[767],{"type":406,"value":768},"$route 是路由信息对象，包含 path、params、hash、query 等，$router 是 vue-router 实例，包含路由跳转方法和钩子函数等。",{"type":400,"tag":408,"props":770,"children":772},{"id":771},"ssr",[773],{"type":406,"value":774},"SSR",{"type":400,"tag":477,"props":776,"children":777},{},[778],{"type":406,"value":412},{"type":400,"tag":477,"props":780,"children":781},{},[782],{"type":400,"tag":422,"props":783,"children":786},{"href":784,"rel":785},"https://vuejs.org/guide/scaling-up/ssr.html",[426],[787],{"type":406,"value":788},"Vue SSR",{"type":400,"tag":408,"props":790,"children":792},{"id":791},"with-typescript",[793],{"type":406,"value":794},"with TypeScript",{"type":400,"tag":446,"props":796,"children":798},{"id":797},"using-vue-with-typescript",[799],{"type":400,"tag":422,"props":800,"children":803},{"href":801,"rel":802},"https://vuejs.org/guide/typescript/overview.html",[426],[804],{"type":406,"value":805},"Using Vue with TypeScript",{"type":400,"tag":477,"props":807,"children":808},{},[809],{"type":406,"value":810},"\"With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking.\"",{"type":400,"tag":477,"props":812,"children":813},{},[814],{"type":406,"value":815},"Vite-based 的项目不会在开发服务器启用类型检查。Vue 推荐开发者依赖 IDE 进行类型检查，或使用 vue-tsc watch mode、使用 vite-plugin-checker 另起线程插件。Vue 认为类型检查降低开发环境的速度是不值得的。",{"type":400,"tag":477,"props":817,"children":818},{},[819],{"type":406,"value":820},"两个 tsconfig.json 编译选项必须开启：isolatedModule 以便允许 esbuild 解析模块、noImplicitThis 以便启用 this 的类型。",{"type":400,"tag":477,"props":822,"children":823},{},[824],{"type":406,"value":825},"“but for each project we are running two TS language service instances: one from Volar, one from VSCode's built-in service”",{"type":400,"tag":477,"props":827,"children":828},{},[829,831,838],{"type":406,"value":830},"禁用 ",{"type":400,"tag":832,"props":833,"children":835},"code",{"className":834},[],[836],{"type":406,"value":837},"@builtin",{"type":406,"value":839}," TS 插件或打开 Volar 的 Takeover Mode，重启后便能使 Takeover Mode 生效。",{"type":400,"tag":477,"props":841,"children":842},{},[843,845,851],{"type":406,"value":844},"“... with ",{"type":400,"tag":832,"props":846,"children":848},{"className":847},[],[849],{"type":406,"value":850},"ts-loader",{"type":406,"value":852},". This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks”",{"type":400,"tag":477,"props":854,"children":855},{},[856],{"type":406,"value":857},"使用 loader 用来类型检查的两个缺陷：检测缓慢阻塞编译、只能解析预解析后的文件所以报错不能直接跳转回源码。",{"type":400,"tag":477,"props":859,"children":860},{},[861,863,869],{"type":406,"value":862},"“In version 3.2 and below, the generic type parameter for ",{"type":400,"tag":832,"props":864,"children":866},{"className":865},[],[867],{"type":406,"value":868},"defineProps()",{"type":406,"value":870}," were limited to a type literal or a reference to a local interface. This limitation has been resolved in 3.3.”",{"type":400,"tag":477,"props":872,"children":873},{},[874],{"type":406,"value":875},"TODO。为什么 Vue 3.2 不能使用外部引入的 Props 作为 type-based defineProps？Vue 3.3 是如何解决的？runtime-declare defineProps 和 runtime-declare emits 会不会对性能有影响？",{"type":400,"tag":477,"props":877,"children":878},{},[879,881,887],{"type":406,"value":880},"“specify a generic type argument but omit the initial value, the resulting type will be a union type that includes ",{"type":400,"tag":832,"props":882,"children":884},{"className":883},[],[885],{"type":406,"value":886},"undefined",{"type":406,"value":888},"”",{"type":400,"tag":477,"props":890,"children":891},{},[892],{"type":406,"value":893},"如果不包含初始值，ref 的类型推断会自动包含 undefined。",{"type":400,"tag":895,"props":896,"children":900},"pre",{"className":897,"code":898,"language":899,"meta":394,"style":394},"language-vue shiki shiki-themes material-theme-lighter github-light github-dark monokai","// inferred type: Ref\u003Cnumber | undefined>\nconst n = ref\u003Cnumber>()\n","vue",[901],{"type":400,"tag":832,"props":902,"children":903},{"__ignoreMap":394},[904,944],{"type":400,"tag":905,"props":906,"children":909},"span",{"class":907,"line":908},"line",1,[910,916,922,928,934,939],{"type":400,"tag":905,"props":911,"children":913},{"style":912},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[914],{"type":406,"value":915},"// inferred type: Ref",{"type":400,"tag":905,"props":917,"children":919},{"style":918},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[920],{"type":406,"value":921},"\u003C",{"type":400,"tag":905,"props":923,"children":925},{"style":924},"--shiki-light:#E53935;--shiki-default:#22863A;--shiki-dark:#85E89D;--shiki-sepia:#F92672",[926],{"type":406,"value":927},"number",{"type":400,"tag":905,"props":929,"children":931},{"style":930},"--shiki-light:#9C3EDA;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[932],{"type":406,"value":933}," |",{"type":400,"tag":905,"props":935,"children":936},{"style":930},[937],{"type":406,"value":938}," undefined",{"type":400,"tag":905,"props":940,"children":941},{"style":918},[942],{"type":406,"value":943},">\n",{"type":400,"tag":905,"props":945,"children":947},{"class":907,"line":946},2,[948],{"type":400,"tag":905,"props":949,"children":950},{"style":912},[951],{"type":406,"value":952},"const n = ref\u003Cnumber>()\n",{"type":400,"tag":477,"props":954,"children":955},{},[956,958,964,966,972,974,980,982,988,990,996],{"type":406,"value":957},"”Without type annotation, the ",{"type":400,"tag":832,"props":959,"children":961},{"className":960},[],[962],{"type":406,"value":963},"event",{"type":406,"value":965}," argument will implicitly have a type of ",{"type":400,"tag":832,"props":967,"children":969},{"className":968},[],[970],{"type":406,"value":971},"any",{"type":406,"value":973},". This will also result in a TS error if ",{"type":400,"tag":832,"props":975,"children":977},{"className":976},[],[978],{"type":406,"value":979},"\"strict\": true",{"type":406,"value":981}," or ",{"type":400,"tag":832,"props":983,"children":985},{"className":984},[],[986],{"type":406,"value":987},"\"noImplicitAny\": true",{"type":406,"value":989}," are used in ",{"type":400,"tag":832,"props":991,"children":993},{"className":992},[],[994],{"type":406,"value":995},"tsconfig.json",{"type":406,"value":997},".“",{"type":400,"tag":477,"props":999,"children":1000},{},[1001],{"type":406,"value":1002},"因为 noImplicitAny 需要打开，不然没法推断 options api 函数中 this 的类型，所以在组件中，接受事件的函数面对 Event 参数必须显式指定类型，不然就会报错。",{"type":400,"tag":1004,"props":1005,"children":1006},"style",{},[1007],{"type":406,"value":1008},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":394,"searchDepth":946,"depth":946,"links":1010},[1011,1012,1013,1014,1015,1016,1020,1021,1022,1023],{"id":385,"depth":946,"text":412},{"id":442,"depth":946,"text":442},{"id":591,"depth":946,"text":591},{"id":607,"depth":946,"text":607},{"id":629,"depth":946,"text":629},{"id":649,"depth":946,"text":652,"children":1017},[1018],{"id":667,"depth":1019,"text":412},3,{"id":716,"depth":946,"text":716},{"id":754,"depth":946,"text":757},{"id":771,"depth":946,"text":774},{"id":791,"depth":946,"text":794},"markdown","content:6.maps:_framework:vue.md","content","6.maps/_framework/vue.md","md",[1030,1033],{"_path":1031,"title":1032,"description":394},"/maps/_framework/react","React Mind Map",{"_path":1034,"title":1035,"description":394},"/maps/_frontend/css/css-mind-map","CSS Mind Map",1718183397692]