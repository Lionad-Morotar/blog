[{"data":1,"prerenderedAt":1060},["ShallowReactive",2],{"navigation":3,"/maps/_framework/ui/vue":416,"/maps/_framework/ui/vue-surround":1052},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / About","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":417,"_dir":418,"_draft":419,"_partial":420,"_locale":421,"title":422,"description":423,"body":424,"_type":1046,"_id":1047,"_source":1048,"_file":1049,"_stem":1050,"_extension":1051},"/maps/_framework/ui/vue","ui",false,true,"","Vue","Vue 是一套用于构建用户界面的渐进式框架，它的核心库只关注视图层，易于上手，同时也便于与第三方库或既有项目整合。",{"type":425,"children":426,"toc":1031},"root",[427,435,462,467,474,492,498,504,509,514,520,525,531,554,560,578,584,589,594,599,611,616,622,627,632,638,649,654,660,669,675,681,686,692,703,714,725,736,741,747,752,758,763,769,774,780,786,791,797,801,811,817,828,833,838,843,848,862,875,880,893,898,911,916,975,1020,1025],{"type":428,"tag":429,"props":430,"children":431},"element","h2",{"id":412},[432],{"type":433,"value":434},"text","TODO",{"type":428,"tag":436,"props":437,"children":438},"ul",{},[439,452],{"type":428,"tag":440,"props":441,"children":442},"li",{},[443],{"type":428,"tag":444,"props":445,"children":449},"a",{"href":446,"rel":447},"https://www.zhihu.com/question/390956688/answer/1184696066",[448],"nofollow",[450],{"type":433,"value":451},"Vue.js 技术揭秘",{"type":428,"tag":440,"props":453,"children":454},{},[455],{"type":428,"tag":444,"props":456,"children":459},{"href":457,"rel":458},"https://github.com/HcySunYang/vue-design/blob/elegant/docs/art/1start-learn",[448],[460],{"type":433,"value":461},"vue-design",{"type":428,"tag":429,"props":463,"children":465},{"id":464},"简介",[466],{"type":433,"value":464},{"type":428,"tag":468,"props":469,"children":471},"h4",{"id":470},"前端框架发展历史关键点",[472],{"type":433,"value":473},"前端框架发展历史关键点？",{"type":428,"tag":436,"props":475,"children":476},{},[477,482,487],{"type":428,"tag":440,"props":478,"children":479},{},[480],{"type":433,"value":481},"2004 年，Google Gmail 使用的 Ajax 技术使前端脱离模板的束缚。",{"type":428,"tag":440,"props":483,"children":484},{},[485],{"type":433,"value":486},"jQuery 解决了不同浏览器的兼容性问题。",{"type":428,"tag":440,"props":488,"children":489},{},[490],{"type":433,"value":491},"2009 年，AngularJS 引领了 MVVM 的潮流，NodeJS 加速了前端工程化的诞生。",{"type":428,"tag":468,"props":493,"children":495},{"id":494},"vue-和-react-的计算性能瓶颈是什么",[496],{"type":433,"value":497},"Vue 和 React 的计算性能瓶颈是什么？",{"type":428,"tag":499,"props":500,"children":501},"p",{},[502],{"type":433,"value":503},"Vue1 的每一个响应式数据都有一个 Watcher，极大的消耗内存，React 的问题发生在当页面 JS 执行 Diff 算法超过帧时间时带来的卡顿问题。",{"type":428,"tag":499,"props":505,"children":506},{},[507],{"type":433,"value":508},"Vue2 引入虚拟 DOM，采用组件级别的响应式数据颗粒度，在避免了 Diff 算法超时问题的同时，降低内存消耗。同时，虚拟 DOM 还带来跨端能力。",{"type":428,"tag":499,"props":510,"children":511},{},[512],{"type":433,"value":513},"React 引入 Fiber 架构，将 DOM Tree 变成链表，使得有能力随时启动或停止 Diff 算法（树的遍历使用递归所以相比链表更难记录状态），可以利用浏览器的空闲时间计算 Diff，避免了卡顿。",{"type":428,"tag":468,"props":515,"children":517},{"id":516},"mvvmmvc-的区别",[518],{"type":433,"value":519},"MVVM、MVC 的区别？",{"type":428,"tag":499,"props":521,"children":522},{},[523],{"type":433,"value":524},"都是软件架构模式，主要区别是关注点不一样，Controller 用来承接交互操作并触发 Model 的修改，而 ViewModel 和 Model 层是双向绑定的，所以写 VueJS 时的思想不在如何操作 DOM 元素，而主要是数据应该怎么变化。",{"type":428,"tag":468,"props":526,"children":528},{"id":527},"vue2-较明显的设计缺陷",[529],{"type":433,"value":530},"Vue2 较明显的设计缺陷？",{"type":428,"tag":436,"props":532,"children":533},{},[534,539,544,549],{"type":428,"tag":440,"props":535,"children":536},{},[537],{"type":433,"value":538},"使用 Flow.js 来做类型校验，而不是社区所向的 TypeScript",{"type":428,"tag":440,"props":540,"children":541},{},[542],{"type":433,"value":543},"Vue2 内嵌了诸如 DOM API 之类的代码，使得跨端等二次开发变得困难，代码耦合也使得摇树优化变得困难",{"type":428,"tag":440,"props":545,"children":546},{},[547],{"type":433,"value":548},"Vue2 使用的 defineProperty 有缺陷，不支持 delete 等操作符",{"type":428,"tag":440,"props":550,"children":551},{},[552],{"type":433,"value":553},"Option API 在组件代码较多时不易维护",{"type":428,"tag":468,"props":555,"children":557},{"id":556},"option-api-的一些缺陷",[558],{"type":433,"value":559},"Option API 的一些缺陷？",{"type":428,"tag":436,"props":561,"children":562},{},[563,568,573],{"type":428,"tag":440,"props":564,"children":565},{},[566],{"type":433,"value":567},"数据挂载在 this 对象上，对类型系统以及摇树优化不友好",{"type":428,"tag":440,"props":569,"children":570},{},[571],{"type":433,"value":572},"代码增多时，维护变得困难",{"type":428,"tag":440,"props":574,"children":575},{},[576],{"type":433,"value":577},"不方便抽离通用逻辑",{"type":428,"tag":468,"props":579,"children":581},{"id":580},"为什么要重写-vue2",[582],{"type":433,"value":583},"为什么要重写 Vue2？",{"type":428,"tag":499,"props":585,"children":586},{},[587],{"type":433,"value":588},"有两个关键因素：主流浏览器逐渐兼容 Proxy，以及修复 Vue2 的设计缺陷。",{"type":428,"tag":499,"props":590,"children":591},{},[592],{"type":433,"value":593},"切换到 Proxy 可以修复过去 setter、getter 无法拦截数组修改以及修改了对象本身带来的语义变化的问题，但由于它是一个原生特性，无法 polyfill，所以对 Vue 而言是一个重大的突破性变动。",{"type":428,"tag":499,"props":595,"children":596},{},[597],{"type":433,"value":598},"过去的架构带来了模板很难正确的在 source-map 中追溯、渲染器（如 DOM 渲染器）不是渐进式的可选项的问题，再加上框架内部代码的耦合，使得摇树优化变得困难，代码也不便理解。",{"type":428,"tag":499,"props":600,"children":601},{},[602,604],{"type":433,"value":603},"见：",{"type":428,"tag":444,"props":605,"children":608},{"href":606,"rel":607},"https://zhuanlan.zhihu.com/p/147022323",[448],[609],{"type":433,"value":610},"重头来过的 Vue 3 带来了什么？",{"type":428,"tag":429,"props":612,"children":614},{"id":613},"响应式",[615],{"type":433,"value":613},{"type":428,"tag":468,"props":617,"children":619},{"id":618},"ref-的原理",[620],{"type":433,"value":621},"ref 的原理？",{"type":428,"tag":499,"props":623,"children":624},{},[625],{"type":433,"value":626},"ref 是在基础值的外面封装了一层对象，使用对象的 value setting、value getter 函数拦截并操作 value 属性，达到响应式的效果。",{"type":428,"tag":429,"props":628,"children":630},{"id":629},"模板",[631],{"type":433,"value":629},{"type":428,"tag":468,"props":633,"children":635},{"id":634},"vue3-双向绑定的原理",[636],{"type":433,"value":637},"Vue3 双向绑定的原理？",{"type":428,"tag":499,"props":639,"children":640},{},[641,642],{"type":433,"value":603},{"type":428,"tag":444,"props":643,"children":646},{"href":644,"rel":645},"https://segmentfault.com/a/1190000041716718",[448],[647],{"type":433,"value":648},"TODO，Vue.js 3.x 双向绑定原理",{"type":428,"tag":429,"props":650,"children":652},{"id":651},"编译器",[653],{"type":433,"value":651},{"type":428,"tag":468,"props":655,"children":657},{"id":656},"vue3-做的静态优化有哪些",[658],{"type":433,"value":659},"Vue3 做的静态优化有哪些？",{"type":428,"tag":499,"props":661,"children":662},{},[663],{"type":428,"tag":664,"props":665,"children":668},"img",{"alt":666,"src":667},"Vue3 Compiler Example","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628022452.png",[],{"type":428,"tag":429,"props":670,"children":672},{"id":671},"vdom",[673],{"type":433,"value":674},"VDOM",{"type":428,"tag":468,"props":676,"children":678},{"id":677},"vue2-和-vue3-的-dom-diff-算法有什么不同",[679],{"type":433,"value":680},"Vue2 和 Vue3 的 DOM Diff 算法有什么不同？",{"type":428,"tag":499,"props":682,"children":683},{},[684],{"type":433,"value":685},"Vue2 使用双端 diff，Vue3 使用最长递增子序列。",{"type":428,"tag":687,"props":688,"children":690},"h3",{"id":689},"todo-1",[691],{"type":433,"value":434},{"type":428,"tag":499,"props":693,"children":694},{},[695,697],{"type":433,"value":696},"为什么 React 的 Diff 算法不采用 Vue 的双端对比算法？",{"type":428,"tag":444,"props":698,"children":701},{"href":699,"rel":700},"https://juejin.cn/post/7116141318853623839",[448],[702],{"type":433,"value":699},{"type":428,"tag":499,"props":704,"children":705},{},[706,708],{"type":433,"value":707},"diff 算法深入一下？",{"type":428,"tag":444,"props":709,"children":712},{"href":710,"rel":711},"https://zhuanlan.zhihu.com/p/401340016",[448],[713],{"type":433,"value":710},{"type":428,"tag":499,"props":715,"children":716},{},[717,719],{"type":433,"value":718},"聊聊 Vue 的双端 diff 算法 ",{"type":428,"tag":444,"props":720,"children":723},{"href":721,"rel":722},"https://zhuanlan.zhihu.com/p/534903909",[448],[724],{"type":433,"value":721},{"type":428,"tag":499,"props":726,"children":727},{},[728,730],{"type":433,"value":729},"diff 算法之双端对比 ",{"type":428,"tag":444,"props":731,"children":734},{"href":732,"rel":733},"https://zhuanlan.zhihu.com/p/432927438",[448],[735],{"type":433,"value":732},{"type":428,"tag":429,"props":737,"children":739},{"id":738},"组件",[740],{"type":433,"value":738},{"type":428,"tag":468,"props":742,"children":744},{"id":743},"keep-alive-的理解它是如何实现的具体缓存的是什么",[745],{"type":433,"value":746},"keep-alive 的理解，它是如何实现的，具体缓存的是什么？",{"type":428,"tag":499,"props":748,"children":749},{},[750],{"type":433,"value":751},"keep-alive 是一个内置抽象组件，会根据内部组件的 key，使用 LRU 策略来缓存组件实例。",{"type":428,"tag":468,"props":753,"children":755},{"id":754},"vue-的生命周期",[756],{"type":433,"value":757},"Vue 的生命周期",{"type":428,"tag":499,"props":759,"children":760},{},[761],{"type":433,"value":762},"keep-alive 独有 activated 和 deactivated 两个生命周期。",{"type":428,"tag":468,"props":764,"children":766},{"id":765},"vue-子组件和父组件执行顺序",[767],{"type":433,"value":768},"Vue 子组件和父组件执行顺序",{"type":428,"tag":499,"props":770,"children":771},{},[772],{"type":433,"value":773},"父组件 mount 前，初始化子组件，所以父组件 beforeMount 后直到子组件 mounted 完成，再挂载。update 和 destroy 两个阶段类似，都是子组件先行。",{"type":428,"tag":429,"props":775,"children":777},{"id":776},"vue-router",[778],{"type":433,"value":779},"Vue Router",{"type":428,"tag":468,"props":781,"children":783},{"id":782},"route-vs-router",[784],{"type":433,"value":785},"$route VS $router",{"type":428,"tag":499,"props":787,"children":788},{},[789],{"type":433,"value":790},"$route 是路由信息对象，包含 path、params、hash、query 等，$router 是 vue-router 实例，包含路由跳转方法和钩子函数等。",{"type":428,"tag":429,"props":792,"children":794},{"id":793},"ssr",[795],{"type":433,"value":796},"SSR",{"type":428,"tag":499,"props":798,"children":799},{},[800],{"type":433,"value":434},{"type":428,"tag":499,"props":802,"children":803},{},[804],{"type":428,"tag":444,"props":805,"children":808},{"href":806,"rel":807},"https://vuejs.org/guide/scaling-up/ssr.html",[448],[809],{"type":433,"value":810},"Vue SSR",{"type":428,"tag":429,"props":812,"children":814},{"id":813},"with-typescript",[815],{"type":433,"value":816},"with TypeScript",{"type":428,"tag":468,"props":818,"children":820},{"id":819},"using-vue-with-typescript",[821],{"type":428,"tag":444,"props":822,"children":825},{"href":823,"rel":824},"https://vuejs.org/guide/typescript/overview.html",[448],[826],{"type":433,"value":827},"Using Vue with TypeScript",{"type":428,"tag":499,"props":829,"children":830},{},[831],{"type":433,"value":832},"\"With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking.\"",{"type":428,"tag":499,"props":834,"children":835},{},[836],{"type":433,"value":837},"Vite-based 的项目不会在开发服务器启用类型检查。Vue 推荐开发者依赖 IDE 进行类型检查，或使用 vue-tsc watch mode、使用 vite-plugin-checker 另起线程插件。Vue 认为类型检查降低开发环境的速度是不值得的。",{"type":428,"tag":499,"props":839,"children":840},{},[841],{"type":433,"value":842},"两个 tsconfig.json 编译选项必须开启：isolatedModule 以便允许 esbuild 解析模块、noImplicitThis 以便启用 this 的类型。",{"type":428,"tag":499,"props":844,"children":845},{},[846],{"type":433,"value":847},"“but for each project we are running two TS language service instances: one from Volar, one from VSCode's built-in service”",{"type":428,"tag":499,"props":849,"children":850},{},[851,853,860],{"type":433,"value":852},"禁用 ",{"type":428,"tag":854,"props":855,"children":857},"code",{"className":856},[],[858],{"type":433,"value":859},"@builtin",{"type":433,"value":861}," TS 插件或打开 Volar 的 Takeover Mode，重启后便能使 Takeover Mode 生效。",{"type":428,"tag":499,"props":863,"children":864},{},[865,867,873],{"type":433,"value":866},"“... with ",{"type":428,"tag":854,"props":868,"children":870},{"className":869},[],[871],{"type":433,"value":872},"ts-loader",{"type":433,"value":874},". This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks”",{"type":428,"tag":499,"props":876,"children":877},{},[878],{"type":433,"value":879},"使用 loader 用来类型检查的两个缺陷：检测缓慢阻塞编译、只能解析预解析后的文件所以报错不能直接跳转回源码。",{"type":428,"tag":499,"props":881,"children":882},{},[883,885,891],{"type":433,"value":884},"“In version 3.2 and below, the generic type parameter for ",{"type":428,"tag":854,"props":886,"children":888},{"className":887},[],[889],{"type":433,"value":890},"defineProps()",{"type":433,"value":892}," were limited to a type literal or a reference to a local interface. This limitation has been resolved in 3.3.”",{"type":428,"tag":499,"props":894,"children":895},{},[896],{"type":433,"value":897},"TODO。为什么 Vue 3.2 不能使用外部引入的 Props 作为 type-based defineProps？Vue 3.3 是如何解决的？runtime-declare defineProps 和 runtime-declare emits 会不会对性能有影响？",{"type":428,"tag":499,"props":899,"children":900},{},[901,903,909],{"type":433,"value":902},"“specify a generic type argument but omit the initial value, the resulting type will be a union type that includes ",{"type":428,"tag":854,"props":904,"children":906},{"className":905},[],[907],{"type":433,"value":908},"undefined",{"type":433,"value":910},"”",{"type":428,"tag":499,"props":912,"children":913},{},[914],{"type":433,"value":915},"如果不包含初始值，ref 的类型推断会自动包含 undefined。",{"type":428,"tag":917,"props":918,"children":922},"pre",{"className":919,"code":920,"language":921,"meta":421,"style":421},"language-vue shiki shiki-themes material-theme-lighter github-light github-dark monokai","// inferred type: Ref\u003Cnumber | undefined>\nconst n = ref\u003Cnumber>()\n","vue",[923],{"type":428,"tag":854,"props":924,"children":925},{"__ignoreMap":421},[926,966],{"type":428,"tag":927,"props":928,"children":931},"span",{"class":929,"line":930},"line",1,[932,938,944,950,956,961],{"type":428,"tag":927,"props":933,"children":935},{"style":934},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[936],{"type":433,"value":937},"// inferred type: Ref",{"type":428,"tag":927,"props":939,"children":941},{"style":940},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[942],{"type":433,"value":943},"\u003C",{"type":428,"tag":927,"props":945,"children":947},{"style":946},"--shiki-light:#E53935;--shiki-default:#22863A;--shiki-dark:#85E89D;--shiki-sepia:#F92672",[948],{"type":433,"value":949},"number",{"type":428,"tag":927,"props":951,"children":953},{"style":952},"--shiki-light:#9C3EDA;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[954],{"type":433,"value":955}," |",{"type":428,"tag":927,"props":957,"children":958},{"style":952},[959],{"type":433,"value":960}," undefined",{"type":428,"tag":927,"props":962,"children":963},{"style":940},[964],{"type":433,"value":965},">\n",{"type":428,"tag":927,"props":967,"children":969},{"class":929,"line":968},2,[970],{"type":428,"tag":927,"props":971,"children":972},{"style":934},[973],{"type":433,"value":974},"const n = ref\u003Cnumber>()\n",{"type":428,"tag":499,"props":976,"children":977},{},[978,980,986,988,994,996,1002,1004,1010,1012,1018],{"type":433,"value":979},"”Without type annotation, the ",{"type":428,"tag":854,"props":981,"children":983},{"className":982},[],[984],{"type":433,"value":985},"event",{"type":433,"value":987}," argument will implicitly have a type of ",{"type":428,"tag":854,"props":989,"children":991},{"className":990},[],[992],{"type":433,"value":993},"any",{"type":433,"value":995},". This will also result in a TS error if ",{"type":428,"tag":854,"props":997,"children":999},{"className":998},[],[1000],{"type":433,"value":1001},"\"strict\": true",{"type":433,"value":1003}," or ",{"type":428,"tag":854,"props":1005,"children":1007},{"className":1006},[],[1008],{"type":433,"value":1009},"\"noImplicitAny\": true",{"type":433,"value":1011}," are used in ",{"type":428,"tag":854,"props":1013,"children":1015},{"className":1014},[],[1016],{"type":433,"value":1017},"tsconfig.json",{"type":433,"value":1019},".“",{"type":428,"tag":499,"props":1021,"children":1022},{},[1023],{"type":433,"value":1024},"因为 noImplicitAny 需要打开，不然没法推断 options api 函数中 this 的类型，所以在组件中，接受事件的函数面对 Event 参数必须显式指定类型，不然就会报错。",{"type":428,"tag":1026,"props":1027,"children":1028},"style",{},[1029],{"type":433,"value":1030},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":421,"searchDepth":968,"depth":968,"links":1032},[1033,1034,1035,1036,1037,1038,1042,1043,1044,1045],{"id":412,"depth":968,"text":434},{"id":464,"depth":968,"text":464},{"id":613,"depth":968,"text":613},{"id":629,"depth":968,"text":629},{"id":651,"depth":968,"text":651},{"id":671,"depth":968,"text":674,"children":1039},[1040],{"id":689,"depth":1041,"text":434},3,{"id":738,"depth":968,"text":738},{"id":776,"depth":968,"text":779},{"id":793,"depth":968,"text":796},{"id":813,"depth":968,"text":816},"markdown","content:6.maps:_framework:ui:vue.md","content","6.maps/_framework/ui/vue.md","6.maps/_framework/ui/vue","md",[1053,1057],{"_path":1054,"title":1055,"description":1056},"/maps/_framework/ui/react","React Mind Map","React 是一个经典的用户界面框架。",{"_path":1058,"title":1059,"description":421},"/maps/_frontend/css/css-mind-map","CSS Mind Map",1739580355887]