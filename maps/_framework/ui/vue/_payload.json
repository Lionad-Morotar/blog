[{"data":1,"prerenderedAt":1029},["ShallowReactive",2],{"navigation":3,"/maps/_framework/ui/vue":384,"/maps/_framework/ui/vue-surround":1021},[4,35,86,105,132,138,144,150,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":205,"_path":206},"正则表达式","/gists/eegex",{"title":208,"_path":209},"Emoji","/gists/emoji",{"title":211,"_path":212},"工程","/gists/engineering",{"title":214,"_path":215},"熵","/gists/entropy",{"title":217,"_path":218},"Environment","/gists/environment",{"title":220,"_path":221},"Erlang","/gists/erlang",{"title":223,"_path":224},"逃离塔克夫","/gists/escape-from-tarkov",{"title":226,"_path":227},"ESNext (ES6-ES11)","/gists/esnext",{"title":229,"_path":230},"Eval！","/gists/eval",{"title":232,"_path":233},"Flutter","/gists/flutter",{"title":235,"_path":236},"字体","/gists/font",{"title":238,"_path":239},"JS 函数式编程","/gists/functional",{"title":241,"_path":242},"游戏化","/gists/gamification",{"title":244,"_path":245},"Google C++ Standard","/gists/google-cpp-standard",{"title":247,"_path":248},"双向链接完全体","/gists/graph",{"title":250,"_path":251},"Hardwares","/gists/hardwares",{"title":253,"_path":254},"哈希冲突","/gists/hash-collision",{"title":256,"_path":257},"信息设计","/gists/information-design",{"title":259,"_path":260},"InstantPage","/gists/instant.page",{"title":262,"_path":263},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":265,"_path":266},"KVStore","/gists/key-value-db",{"title":268,"_path":269},"Kubernetes","/gists/kubernetes",{"title":271,"_path":272},"Makefile","/gists/makefile",{"title":274,"_path":275},"Markdown Inline Style","/gists/markdown-nice",{"title":277,"_path":278},"减小页面快照体积","/gists/minify-html",{"title":280,"_path":281},"mklink","/gists/mklink",{"title":283,"_path":284},"Mock","/gists/mock",{"title":286,"_path":287},"多人协作系统","/gists/multiplayer",{"title":289,"_path":290},"多端应用","/gists/multy-end-app",{"title":292,"_path":293},"神经科学","/gists/neuroscience",{"title":295,"_path":296},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":298,"_path":299},"PInvoke","/gists/pinvoke",{"title":301,"_path":302},"像素","/gists/pixel",{"title":304,"_path":305},"PowerShell","/gists/powershell",{"title":307,"_path":308},"量子","/gists/quantum",{"title":310,"_path":311},"保持好奇心","/gists/questions",{"title":313,"_path":314},"React Native","/gists/react-native",{"title":316,"_path":317},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":319,"_path":320},"SEO","/gists/seo",{"title":322,"_path":323},"Shader","/gists/shader",{"title":325,"_path":326},"Shape Up","/gists/shape-up",{"title":328,"_path":329},"睡觉","/gists/sleep",{"title":331,"_path":332},"记录奇怪的问题","/gists/solved",{"title":334,"_path":335},"States","/gists/states",{"title":337,"_path":338},"Storage","/gists/storage",{"title":340,"_path":341},"音视频流处理","/gists/stream-cli",{"title":343,"_path":344},"Symbol","/gists/symbol",{"title":346,"_path":347},"系统论","/gists/systems-theory",{"title":349,"_path":350},"任务切片","/gists/task-slice",{"title":352,"_path":353},"技术偏好","/gists/tech-dudge",{"title":355,"_path":356},"Untitled","/gists/untitled",{"title":358,"_path":359},"可变字体","/gists/variable-font",{"title":361,"_path":362},"视觉错觉","/gists/visual-illusion",{"title":364,"_path":365},"SS(SSR)","/gists/vpn",{"title":367,"_path":368},"VS Code 插件开发","/gists/vscode-plugin",{"title":370,"_path":371},"Web Components","/gists/web-components",{"title":373,"_path":374},"Windows","/gists/windows",{"title":376,"_path":377},"查缺补漏","/gists/wrong",{"title":379,"_path":380,"children":381},"我 / About","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"_path":385,"_dir":386,"_draft":387,"_partial":388,"_locale":389,"title":390,"description":391,"body":392,"_type":1015,"_id":1016,"_source":1017,"_file":1018,"_stem":1019,"_extension":1020},"/maps/_framework/ui/vue","ui",false,true,"","Vue","Vue 是一套用于构建用户界面的渐进式框架，它的核心库只关注视图层，易于上手，同时也便于与第三方库或既有项目整合。",{"type":393,"children":394,"toc":1000},"root",[395,404,431,436,443,461,467,473,478,483,489,494,500,523,529,547,553,558,563,568,580,585,591,596,601,607,618,623,629,638,644,650,655,661,672,683,694,705,710,716,721,727,732,738,743,749,755,760,766,770,780,786,797,802,807,812,817,831,844,849,862,867,880,885,944,989,994],{"type":396,"tag":397,"props":398,"children":400},"element","h2",{"id":399},"todo",[401],{"type":402,"value":403},"text","TODO",{"type":396,"tag":405,"props":406,"children":407},"ul",{},[408,421],{"type":396,"tag":409,"props":410,"children":411},"li",{},[412],{"type":396,"tag":413,"props":414,"children":418},"a",{"href":415,"rel":416},"https://www.zhihu.com/question/390956688/answer/1184696066",[417],"nofollow",[419],{"type":402,"value":420},"Vue.js 技术揭秘",{"type":396,"tag":409,"props":422,"children":423},{},[424],{"type":396,"tag":413,"props":425,"children":428},{"href":426,"rel":427},"https://github.com/HcySunYang/vue-design/blob/elegant/docs/art/1start-learn",[417],[429],{"type":402,"value":430},"vue-design",{"type":396,"tag":397,"props":432,"children":434},{"id":433},"简介",[435],{"type":402,"value":433},{"type":396,"tag":437,"props":438,"children":440},"h4",{"id":439},"前端框架发展历史关键点",[441],{"type":402,"value":442},"前端框架发展历史关键点？",{"type":396,"tag":405,"props":444,"children":445},{},[446,451,456],{"type":396,"tag":409,"props":447,"children":448},{},[449],{"type":402,"value":450},"2004 年，Google Gmail 使用的 Ajax 技术使前端脱离模板的束缚。",{"type":396,"tag":409,"props":452,"children":453},{},[454],{"type":402,"value":455},"jQuery 解决了不同浏览器的兼容性问题。",{"type":396,"tag":409,"props":457,"children":458},{},[459],{"type":402,"value":460},"2009 年，AngularJS 引领了 MVVM 的潮流，NodeJS 加速了前端工程化的诞生。",{"type":396,"tag":437,"props":462,"children":464},{"id":463},"vue-和-react-的计算性能瓶颈是什么",[465],{"type":402,"value":466},"Vue 和 React 的计算性能瓶颈是什么？",{"type":396,"tag":468,"props":469,"children":470},"p",{},[471],{"type":402,"value":472},"Vue1 的每一个响应式数据都有一个 Watcher，极大的消耗内存，React 的问题发生在当页面 JS 执行 Diff 算法超过帧时间时带来的卡顿问题。",{"type":396,"tag":468,"props":474,"children":475},{},[476],{"type":402,"value":477},"Vue2 引入虚拟 DOM，采用组件级别的响应式数据颗粒度，在避免了 Diff 算法超时问题的同时，降低内存消耗。同时，虚拟 DOM 还带来跨端能力。",{"type":396,"tag":468,"props":479,"children":480},{},[481],{"type":402,"value":482},"React 引入 Fiber 架构，将 DOM Tree 变成链表，使得有能力随时启动或停止 Diff 算法（树的遍历使用递归所以相比链表更难记录状态），可以利用浏览器的空闲时间计算 Diff，避免了卡顿。",{"type":396,"tag":437,"props":484,"children":486},{"id":485},"mvvmmvc-的区别",[487],{"type":402,"value":488},"MVVM、MVC 的区别？",{"type":396,"tag":468,"props":490,"children":491},{},[492],{"type":402,"value":493},"都是软件架构模式，主要区别是关注点不一样，Controller 用来承接交互操作并触发 Model 的修改，而 ViewModel 和 Model 层是双向绑定的，所以写 VueJS 时的思想不在如何操作 DOM 元素，而主要是数据应该怎么变化。",{"type":396,"tag":437,"props":495,"children":497},{"id":496},"vue2-较明显的设计缺陷",[498],{"type":402,"value":499},"Vue2 较明显的设计缺陷？",{"type":396,"tag":405,"props":501,"children":502},{},[503,508,513,518],{"type":396,"tag":409,"props":504,"children":505},{},[506],{"type":402,"value":507},"使用 Flow.js 来做类型校验，而不是社区所向的 TypeScript",{"type":396,"tag":409,"props":509,"children":510},{},[511],{"type":402,"value":512},"Vue2 内嵌了诸如 DOM API 之类的代码，使得跨端等二次开发变得困难，代码耦合也使得摇树优化变得困难",{"type":396,"tag":409,"props":514,"children":515},{},[516],{"type":402,"value":517},"Vue2 使用的 defineProperty 有缺陷，不支持 delete 等操作符",{"type":396,"tag":409,"props":519,"children":520},{},[521],{"type":402,"value":522},"Option API 在组件代码较多时不易维护",{"type":396,"tag":437,"props":524,"children":526},{"id":525},"option-api-的一些缺陷",[527],{"type":402,"value":528},"Option API 的一些缺陷？",{"type":396,"tag":405,"props":530,"children":531},{},[532,537,542],{"type":396,"tag":409,"props":533,"children":534},{},[535],{"type":402,"value":536},"数据挂载在 this 对象上，对类型系统以及摇树优化不友好",{"type":396,"tag":409,"props":538,"children":539},{},[540],{"type":402,"value":541},"代码增多时，维护变得困难",{"type":396,"tag":409,"props":543,"children":544},{},[545],{"type":402,"value":546},"不方便抽离通用逻辑",{"type":396,"tag":437,"props":548,"children":550},{"id":549},"为什么要重写-vue2",[551],{"type":402,"value":552},"为什么要重写 Vue2？",{"type":396,"tag":468,"props":554,"children":555},{},[556],{"type":402,"value":557},"有两个关键因素：主流浏览器逐渐兼容 Proxy，以及修复 Vue2 的设计缺陷。",{"type":396,"tag":468,"props":559,"children":560},{},[561],{"type":402,"value":562},"切换到 Proxy 可以修复过去 setter、getter 无法拦截数组修改以及修改了对象本身带来的语义变化的问题，但由于它是一个原生特性，无法 polyfill，所以对 Vue 而言是一个重大的突破性变动。",{"type":396,"tag":468,"props":564,"children":565},{},[566],{"type":402,"value":567},"过去的架构带来了模板很难正确的在 source-map 中追溯、渲染器（如 DOM 渲染器）不是渐进式的可选项的问题，再加上框架内部代码的耦合，使得摇树优化变得困难，代码也不便理解。",{"type":396,"tag":468,"props":569,"children":570},{},[571,573],{"type":402,"value":572},"见：",{"type":396,"tag":413,"props":574,"children":577},{"href":575,"rel":576},"https://zhuanlan.zhihu.com/p/147022323",[417],[578],{"type":402,"value":579},"重头来过的 Vue 3 带来了什么？",{"type":396,"tag":397,"props":581,"children":583},{"id":582},"响应式",[584],{"type":402,"value":582},{"type":396,"tag":437,"props":586,"children":588},{"id":587},"ref-的原理",[589],{"type":402,"value":590},"ref 的原理？",{"type":396,"tag":468,"props":592,"children":593},{},[594],{"type":402,"value":595},"ref 是在基础值的外面封装了一层对象，使用对象的 value setting、value getter 函数拦截并操作 value 属性，达到响应式的效果。",{"type":396,"tag":397,"props":597,"children":599},{"id":598},"模板",[600],{"type":402,"value":598},{"type":396,"tag":437,"props":602,"children":604},{"id":603},"vue3-双向绑定的原理",[605],{"type":402,"value":606},"Vue3 双向绑定的原理？",{"type":396,"tag":468,"props":608,"children":609},{},[610,611],{"type":402,"value":572},{"type":396,"tag":413,"props":612,"children":615},{"href":613,"rel":614},"https://segmentfault.com/a/1190000041716718",[417],[616],{"type":402,"value":617},"TODO，Vue.js 3.x 双向绑定原理",{"type":396,"tag":397,"props":619,"children":621},{"id":620},"编译器",[622],{"type":402,"value":620},{"type":396,"tag":437,"props":624,"children":626},{"id":625},"vue3-做的静态优化有哪些",[627],{"type":402,"value":628},"Vue3 做的静态优化有哪些？",{"type":396,"tag":468,"props":630,"children":631},{},[632],{"type":396,"tag":633,"props":634,"children":637},"img",{"alt":635,"src":636},"Vue3 Compiler Example","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628022452.png",[],{"type":396,"tag":397,"props":639,"children":641},{"id":640},"vdom",[642],{"type":402,"value":643},"VDOM",{"type":396,"tag":437,"props":645,"children":647},{"id":646},"vue2-和-vue3-的-dom-diff-算法有什么不同",[648],{"type":402,"value":649},"Vue2 和 Vue3 的 DOM Diff 算法有什么不同？",{"type":396,"tag":468,"props":651,"children":652},{},[653],{"type":402,"value":654},"Vue2 使用双端 diff，Vue3 使用最长递增子序列。",{"type":396,"tag":656,"props":657,"children":659},"h3",{"id":658},"todo-1",[660],{"type":402,"value":403},{"type":396,"tag":468,"props":662,"children":663},{},[664,666],{"type":402,"value":665},"为什么 React 的 Diff 算法不采用 Vue 的双端对比算法？",{"type":396,"tag":413,"props":667,"children":670},{"href":668,"rel":669},"https://juejin.cn/post/7116141318853623839",[417],[671],{"type":402,"value":668},{"type":396,"tag":468,"props":673,"children":674},{},[675,677],{"type":402,"value":676},"diff 算法深入一下？",{"type":396,"tag":413,"props":678,"children":681},{"href":679,"rel":680},"https://zhuanlan.zhihu.com/p/401340016",[417],[682],{"type":402,"value":679},{"type":396,"tag":468,"props":684,"children":685},{},[686,688],{"type":402,"value":687},"聊聊 Vue 的双端 diff 算法 ",{"type":396,"tag":413,"props":689,"children":692},{"href":690,"rel":691},"https://zhuanlan.zhihu.com/p/534903909",[417],[693],{"type":402,"value":690},{"type":396,"tag":468,"props":695,"children":696},{},[697,699],{"type":402,"value":698},"diff 算法之双端对比 ",{"type":396,"tag":413,"props":700,"children":703},{"href":701,"rel":702},"https://zhuanlan.zhihu.com/p/432927438",[417],[704],{"type":402,"value":701},{"type":396,"tag":397,"props":706,"children":708},{"id":707},"组件",[709],{"type":402,"value":707},{"type":396,"tag":437,"props":711,"children":713},{"id":712},"keep-alive-的理解它是如何实现的具体缓存的是什么",[714],{"type":402,"value":715},"keep-alive 的理解，它是如何实现的，具体缓存的是什么？",{"type":396,"tag":468,"props":717,"children":718},{},[719],{"type":402,"value":720},"keep-alive 是一个内置抽象组件，会根据内部组件的 key，使用 LRU 策略来缓存组件实例。",{"type":396,"tag":437,"props":722,"children":724},{"id":723},"vue-的生命周期",[725],{"type":402,"value":726},"Vue 的生命周期",{"type":396,"tag":468,"props":728,"children":729},{},[730],{"type":402,"value":731},"keep-alive 独有 activated 和 deactivated 两个生命周期。",{"type":396,"tag":437,"props":733,"children":735},{"id":734},"vue-子组件和父组件执行顺序",[736],{"type":402,"value":737},"Vue 子组件和父组件执行顺序",{"type":396,"tag":468,"props":739,"children":740},{},[741],{"type":402,"value":742},"父组件 mount 前，初始化子组件，所以父组件 beforeMount 后直到子组件 mounted 完成，再挂载。update 和 destroy 两个阶段类似，都是子组件先行。",{"type":396,"tag":397,"props":744,"children":746},{"id":745},"vue-router",[747],{"type":402,"value":748},"Vue Router",{"type":396,"tag":437,"props":750,"children":752},{"id":751},"route-vs-router",[753],{"type":402,"value":754},"$route VS $router",{"type":396,"tag":468,"props":756,"children":757},{},[758],{"type":402,"value":759},"$route 是路由信息对象，包含 path、params、hash、query 等，$router 是 vue-router 实例，包含路由跳转方法和钩子函数等。",{"type":396,"tag":397,"props":761,"children":763},{"id":762},"ssr",[764],{"type":402,"value":765},"SSR",{"type":396,"tag":468,"props":767,"children":768},{},[769],{"type":402,"value":403},{"type":396,"tag":468,"props":771,"children":772},{},[773],{"type":396,"tag":413,"props":774,"children":777},{"href":775,"rel":776},"https://vuejs.org/guide/scaling-up/ssr.html",[417],[778],{"type":402,"value":779},"Vue SSR",{"type":396,"tag":397,"props":781,"children":783},{"id":782},"with-typescript",[784],{"type":402,"value":785},"with TypeScript",{"type":396,"tag":437,"props":787,"children":789},{"id":788},"using-vue-with-typescript",[790],{"type":396,"tag":413,"props":791,"children":794},{"href":792,"rel":793},"https://vuejs.org/guide/typescript/overview.html",[417],[795],{"type":402,"value":796},"Using Vue with TypeScript",{"type":396,"tag":468,"props":798,"children":799},{},[800],{"type":402,"value":801},"\"With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking.\"",{"type":396,"tag":468,"props":803,"children":804},{},[805],{"type":402,"value":806},"Vite-based 的项目不会在开发服务器启用类型检查。Vue 推荐开发者依赖 IDE 进行类型检查，或使用 vue-tsc watch mode、使用 vite-plugin-checker 另起线程插件。Vue 认为类型检查降低开发环境的速度是不值得的。",{"type":396,"tag":468,"props":808,"children":809},{},[810],{"type":402,"value":811},"两个 tsconfig.json 编译选项必须开启：isolatedModule 以便允许 esbuild 解析模块、noImplicitThis 以便启用 this 的类型。",{"type":396,"tag":468,"props":813,"children":814},{},[815],{"type":402,"value":816},"“but for each project we are running two TS language service instances: one from Volar, one from VSCode's built-in service”",{"type":396,"tag":468,"props":818,"children":819},{},[820,822,829],{"type":402,"value":821},"禁用 ",{"type":396,"tag":823,"props":824,"children":826},"code",{"className":825},[],[827],{"type":402,"value":828},"@builtin",{"type":402,"value":830}," TS 插件或打开 Volar 的 Takeover Mode，重启后便能使 Takeover Mode 生效。",{"type":396,"tag":468,"props":832,"children":833},{},[834,836,842],{"type":402,"value":835},"“... with ",{"type":396,"tag":823,"props":837,"children":839},{"className":838},[],[840],{"type":402,"value":841},"ts-loader",{"type":402,"value":843},". This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks”",{"type":396,"tag":468,"props":845,"children":846},{},[847],{"type":402,"value":848},"使用 loader 用来类型检查的两个缺陷：检测缓慢阻塞编译、只能解析预解析后的文件所以报错不能直接跳转回源码。",{"type":396,"tag":468,"props":850,"children":851},{},[852,854,860],{"type":402,"value":853},"“In version 3.2 and below, the generic type parameter for ",{"type":396,"tag":823,"props":855,"children":857},{"className":856},[],[858],{"type":402,"value":859},"defineProps()",{"type":402,"value":861}," were limited to a type literal or a reference to a local interface. This limitation has been resolved in 3.3.”",{"type":396,"tag":468,"props":863,"children":864},{},[865],{"type":402,"value":866},"TODO。为什么 Vue 3.2 不能使用外部引入的 Props 作为 type-based defineProps？Vue 3.3 是如何解决的？runtime-declare defineProps 和 runtime-declare emits 会不会对性能有影响？",{"type":396,"tag":468,"props":868,"children":869},{},[870,872,878],{"type":402,"value":871},"“specify a generic type argument but omit the initial value, the resulting type will be a union type that includes ",{"type":396,"tag":823,"props":873,"children":875},{"className":874},[],[876],{"type":402,"value":877},"undefined",{"type":402,"value":879},"”",{"type":396,"tag":468,"props":881,"children":882},{},[883],{"type":402,"value":884},"如果不包含初始值，ref 的类型推断会自动包含 undefined。",{"type":396,"tag":886,"props":887,"children":891},"pre",{"className":888,"code":889,"language":890,"meta":389,"style":389},"language-vue shiki shiki-themes material-theme-lighter github-light github-dark monokai","// inferred type: Ref\u003Cnumber | undefined>\nconst n = ref\u003Cnumber>()\n","vue",[892],{"type":396,"tag":823,"props":893,"children":894},{"__ignoreMap":389},[895,935],{"type":396,"tag":896,"props":897,"children":900},"span",{"class":898,"line":899},"line",1,[901,907,913,919,925,930],{"type":396,"tag":896,"props":902,"children":904},{"style":903},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[905],{"type":402,"value":906},"// inferred type: Ref",{"type":396,"tag":896,"props":908,"children":910},{"style":909},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[911],{"type":402,"value":912},"\u003C",{"type":396,"tag":896,"props":914,"children":916},{"style":915},"--shiki-light:#E53935;--shiki-default:#22863A;--shiki-dark:#85E89D;--shiki-sepia:#F92672",[917],{"type":402,"value":918},"number",{"type":396,"tag":896,"props":920,"children":922},{"style":921},"--shiki-light:#9C3EDA;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[923],{"type":402,"value":924}," |",{"type":396,"tag":896,"props":926,"children":927},{"style":921},[928],{"type":402,"value":929}," undefined",{"type":396,"tag":896,"props":931,"children":932},{"style":909},[933],{"type":402,"value":934},">\n",{"type":396,"tag":896,"props":936,"children":938},{"class":898,"line":937},2,[939],{"type":396,"tag":896,"props":940,"children":941},{"style":903},[942],{"type":402,"value":943},"const n = ref\u003Cnumber>()\n",{"type":396,"tag":468,"props":945,"children":946},{},[947,949,955,957,963,965,971,973,979,981,987],{"type":402,"value":948},"”Without type annotation, the ",{"type":396,"tag":823,"props":950,"children":952},{"className":951},[],[953],{"type":402,"value":954},"event",{"type":402,"value":956}," argument will implicitly have a type of ",{"type":396,"tag":823,"props":958,"children":960},{"className":959},[],[961],{"type":402,"value":962},"any",{"type":402,"value":964},". This will also result in a TS error if ",{"type":396,"tag":823,"props":966,"children":968},{"className":967},[],[969],{"type":402,"value":970},"\"strict\": true",{"type":402,"value":972}," or ",{"type":396,"tag":823,"props":974,"children":976},{"className":975},[],[977],{"type":402,"value":978},"\"noImplicitAny\": true",{"type":402,"value":980}," are used in ",{"type":396,"tag":823,"props":982,"children":984},{"className":983},[],[985],{"type":402,"value":986},"tsconfig.json",{"type":402,"value":988},".“",{"type":396,"tag":468,"props":990,"children":991},{},[992],{"type":402,"value":993},"因为 noImplicitAny 需要打开，不然没法推断 options api 函数中 this 的类型，所以在组件中，接受事件的函数面对 Event 参数必须显式指定类型，不然就会报错。",{"type":396,"tag":995,"props":996,"children":997},"style",{},[998],{"type":402,"value":999},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":389,"searchDepth":937,"depth":937,"links":1001},[1002,1003,1004,1005,1006,1007,1011,1012,1013,1014],{"id":399,"depth":937,"text":403},{"id":433,"depth":937,"text":433},{"id":582,"depth":937,"text":582},{"id":598,"depth":937,"text":598},{"id":620,"depth":937,"text":620},{"id":640,"depth":937,"text":643,"children":1008},[1009],{"id":658,"depth":1010,"text":403},3,{"id":707,"depth":937,"text":707},{"id":745,"depth":937,"text":748},{"id":762,"depth":937,"text":765},{"id":782,"depth":937,"text":785},"markdown","content:6.maps:_framework:ui:vue.md","content","6.maps/_framework/ui/vue.md","6.maps/_framework/ui/vue","md",[1022,1026],{"_path":1023,"title":1024,"description":1025},"/maps/_framework/ui/react","React Mind Map","React 是一个经典的用户界面框架。",{"_path":1027,"title":1028,"description":389},"/maps/_frontend/css/css-mind-map","CSS Mind Map",1742040630061]