[{"data":1,"prerenderedAt":1036},["ShallowReactive",2],{"navigation":3,"/maps/_typescript/typescript":155,"/maps/_typescript/typescript-surround":1028},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":1022,"_id":1023,"_source":1024,"_file":1025,"_stem":1026,"_extension":1027},"/maps/_typescript/typescript","_typescript",false,true,"","TypeScript","TypeScript 的核心概念、高级类型、应用实践和工程化经验，包含类型体操、项目配置等内容的完整指南。",{"type":164,"children":165,"toc":1011},"root",[166,174,181,187,193,198,534,540,559,564,576,582,587,599,604,610,615,675,680,700,706,711,717,722,742,747,758,767,772,777,785,790,798,806,811,819,824,832,837,850,858,863,874,879,888,896,904,909,914,919,930,935,940,946,1005],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"基本",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":178},"h4",{"id":177},"如何理解-interface-和-type-的异同",[179],{"type":173,"value":180},"如何理解 Interface 和 Type 的异同？",{"type":167,"tag":182,"props":183,"children":184},"p",{},[185],{"type":173,"value":186},"类型（Type）不可以合并，但接口（Interface）可以合并。可以理解为某个函数可以实现多个接口，但是作为变量，它只有一种类型。",{"type":167,"tag":175,"props":188,"children":190},{"id":189},"裸类型是什么",[191],{"type":173,"value":192},"裸类型是什么？",{"type":167,"tag":182,"props":194,"children":195},{},[196],{"type":173,"value":197},"裸类型在带入运算时会自动展开，非裸类型则不会。",{"type":167,"tag":199,"props":200,"children":204},"pre",{"className":201,"code":202,"language":203,"meta":160,"style":160},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","type WrapNaked\u003CT> = T extends any ? { o: T } : never\ntype WrapUnNaked\u003CT> = { o: T } extends any ? { o: T } : never\n\ntype Foo = WrapNaked\u003Cstring | number | boolean>\n// { o: string } | { o: number } | { o: boolean }\n\ntype Bar = WrapUnNaked\u003Cstring | number | boolean>\n// { o: string | number | boolean }\n","js",[205],{"type":167,"tag":206,"props":207,"children":208},"code",{"__ignoreMap":160},[209,306,395,404,458,468,476,525],{"type":167,"tag":210,"props":211,"children":214},"span",{"class":212,"line":213},"line",1,[215,221,227,233,238,243,249,254,260,266,271,276,282,287,291,296,301],{"type":167,"tag":210,"props":216,"children":218},{"style":217},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[219],{"type":173,"value":220},"type",{"type":167,"tag":210,"props":222,"children":224},{"style":223},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[225],{"type":173,"value":226}," WrapNaked",{"type":167,"tag":210,"props":228,"children":230},{"style":229},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[231],{"type":173,"value":232},"\u003C",{"type":167,"tag":210,"props":234,"children":235},{"style":223},[236],{"type":173,"value":237},"T",{"type":167,"tag":210,"props":239,"children":240},{"style":229},[241],{"type":173,"value":242},">",{"type":167,"tag":210,"props":244,"children":246},{"style":245},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[247],{"type":173,"value":248}," =",{"type":167,"tag":210,"props":250,"children":251},{"style":223},[252],{"type":173,"value":253}," T",{"type":167,"tag":210,"props":255,"children":257},{"style":256},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[258],{"type":173,"value":259}," extends",{"type":167,"tag":210,"props":261,"children":263},{"style":262},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[264],{"type":173,"value":265}," any",{"type":167,"tag":210,"props":267,"children":268},{"style":245},[269],{"type":173,"value":270}," ?",{"type":167,"tag":210,"props":272,"children":273},{"style":229},[274],{"type":173,"value":275}," {",{"type":167,"tag":210,"props":277,"children":279},{"style":278},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[280],{"type":173,"value":281}," o",{"type":167,"tag":210,"props":283,"children":284},{"style":245},[285],{"type":173,"value":286},":",{"type":167,"tag":210,"props":288,"children":289},{"style":223},[290],{"type":173,"value":253},{"type":167,"tag":210,"props":292,"children":293},{"style":229},[294],{"type":173,"value":295}," }",{"type":167,"tag":210,"props":297,"children":298},{"style":245},[299],{"type":173,"value":300}," :",{"type":167,"tag":210,"props":302,"children":303},{"style":262},[304],{"type":173,"value":305}," never\n",{"type":167,"tag":210,"props":307,"children":309},{"class":212,"line":308},2,[310,314,319,323,327,331,335,339,343,347,351,355,359,363,367,371,375,379,383,387,391],{"type":167,"tag":210,"props":311,"children":312},{"style":217},[313],{"type":173,"value":220},{"type":167,"tag":210,"props":315,"children":316},{"style":223},[317],{"type":173,"value":318}," WrapUnNaked",{"type":167,"tag":210,"props":320,"children":321},{"style":229},[322],{"type":173,"value":232},{"type":167,"tag":210,"props":324,"children":325},{"style":223},[326],{"type":173,"value":237},{"type":167,"tag":210,"props":328,"children":329},{"style":229},[330],{"type":173,"value":242},{"type":167,"tag":210,"props":332,"children":333},{"style":245},[334],{"type":173,"value":248},{"type":167,"tag":210,"props":336,"children":337},{"style":229},[338],{"type":173,"value":275},{"type":167,"tag":210,"props":340,"children":341},{"style":278},[342],{"type":173,"value":281},{"type":167,"tag":210,"props":344,"children":345},{"style":245},[346],{"type":173,"value":286},{"type":167,"tag":210,"props":348,"children":349},{"style":223},[350],{"type":173,"value":253},{"type":167,"tag":210,"props":352,"children":353},{"style":229},[354],{"type":173,"value":295},{"type":167,"tag":210,"props":356,"children":357},{"style":256},[358],{"type":173,"value":259},{"type":167,"tag":210,"props":360,"children":361},{"style":262},[362],{"type":173,"value":265},{"type":167,"tag":210,"props":364,"children":365},{"style":245},[366],{"type":173,"value":270},{"type":167,"tag":210,"props":368,"children":369},{"style":229},[370],{"type":173,"value":275},{"type":167,"tag":210,"props":372,"children":373},{"style":278},[374],{"type":173,"value":281},{"type":167,"tag":210,"props":376,"children":377},{"style":245},[378],{"type":173,"value":286},{"type":167,"tag":210,"props":380,"children":381},{"style":223},[382],{"type":173,"value":253},{"type":167,"tag":210,"props":384,"children":385},{"style":229},[386],{"type":173,"value":295},{"type":167,"tag":210,"props":388,"children":389},{"style":245},[390],{"type":173,"value":300},{"type":167,"tag":210,"props":392,"children":393},{"style":262},[394],{"type":173,"value":305},{"type":167,"tag":210,"props":396,"children":398},{"class":212,"line":397},3,[399],{"type":167,"tag":210,"props":400,"children":401},{"emptyLinePlaceholder":159},[402],{"type":173,"value":403},"\n",{"type":167,"tag":210,"props":405,"children":407},{"class":212,"line":406},4,[408,412,417,421,425,429,434,439,444,448,453],{"type":167,"tag":210,"props":409,"children":410},{"style":217},[411],{"type":173,"value":220},{"type":167,"tag":210,"props":413,"children":414},{"style":223},[415],{"type":173,"value":416}," Foo",{"type":167,"tag":210,"props":418,"children":419},{"style":245},[420],{"type":173,"value":248},{"type":167,"tag":210,"props":422,"children":423},{"style":223},[424],{"type":173,"value":226},{"type":167,"tag":210,"props":426,"children":427},{"style":229},[428],{"type":173,"value":232},{"type":167,"tag":210,"props":430,"children":431},{"style":262},[432],{"type":173,"value":433},"string",{"type":167,"tag":210,"props":435,"children":436},{"style":245},[437],{"type":173,"value":438}," |",{"type":167,"tag":210,"props":440,"children":441},{"style":262},[442],{"type":173,"value":443}," number",{"type":167,"tag":210,"props":445,"children":446},{"style":245},[447],{"type":173,"value":438},{"type":167,"tag":210,"props":449,"children":450},{"style":262},[451],{"type":173,"value":452}," boolean",{"type":167,"tag":210,"props":454,"children":455},{"style":229},[456],{"type":173,"value":457},">\n",{"type":167,"tag":210,"props":459,"children":461},{"class":212,"line":460},5,[462],{"type":167,"tag":210,"props":463,"children":465},{"style":464},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[466],{"type":173,"value":467},"// { o: string } | { o: number } | { o: boolean }\n",{"type":167,"tag":210,"props":469,"children":471},{"class":212,"line":470},6,[472],{"type":167,"tag":210,"props":473,"children":474},{"emptyLinePlaceholder":159},[475],{"type":173,"value":403},{"type":167,"tag":210,"props":477,"children":479},{"class":212,"line":478},7,[480,484,489,493,497,501,505,509,513,517,521],{"type":167,"tag":210,"props":481,"children":482},{"style":217},[483],{"type":173,"value":220},{"type":167,"tag":210,"props":485,"children":486},{"style":223},[487],{"type":173,"value":488}," Bar",{"type":167,"tag":210,"props":490,"children":491},{"style":245},[492],{"type":173,"value":248},{"type":167,"tag":210,"props":494,"children":495},{"style":223},[496],{"type":173,"value":318},{"type":167,"tag":210,"props":498,"children":499},{"style":229},[500],{"type":173,"value":232},{"type":167,"tag":210,"props":502,"children":503},{"style":262},[504],{"type":173,"value":433},{"type":167,"tag":210,"props":506,"children":507},{"style":245},[508],{"type":173,"value":438},{"type":167,"tag":210,"props":510,"children":511},{"style":262},[512],{"type":173,"value":443},{"type":167,"tag":210,"props":514,"children":515},{"style":245},[516],{"type":173,"value":438},{"type":167,"tag":210,"props":518,"children":519},{"style":262},[520],{"type":173,"value":452},{"type":167,"tag":210,"props":522,"children":523},{"style":229},[524],{"type":173,"value":457},{"type":167,"tag":210,"props":526,"children":528},{"class":212,"line":527},8,[529],{"type":167,"tag":210,"props":530,"children":531},{"style":464},[532],{"type":173,"value":533},"// { o: string | number | boolean }\n",{"type":167,"tag":175,"props":535,"children":537},{"id":536},"enums-vs-literal-unions",[538],{"type":173,"value":539},"Enums VS Literal Unions",{"type":167,"tag":541,"props":542,"children":543},"ul",{},[544],{"type":167,"tag":545,"props":546,"children":547},"li",{},[548,550],{"type":173,"value":549},"Georges Haidar 提到枚举相比字面量联合 ",{"type":167,"tag":551,"props":552,"children":556},"a",{"href":553,"rel":554},"https://blog.disintegrator.dev/posts/ode-to-typescript-enums/",[555],"nofollow",[557],{"type":173,"value":558},"支持 TSDoc 的 Deprecated 声明",{"type":167,"tag":168,"props":560,"children":562},{"id":561},"高级类型",[563],{"type":173,"value":561},{"type":167,"tag":541,"props":565,"children":566},{},[567],{"type":167,"tag":545,"props":568,"children":569},{},[570],{"type":167,"tag":551,"props":571,"children":573},{"href":572},"/source-code/_ts/utility-types",[574],{"type":173,"value":575},"高级类型推导",{"type":167,"tag":175,"props":577,"children":579},{"id":578},"iterable-和-array-是什么关系",[580],{"type":173,"value":581},"Iterable 和 Array 是什么关系？",{"type":167,"tag":182,"props":583,"children":584},{},[585],{"type":173,"value":586},"实现了 Symbol.iterator 接口的对象都视为是 Iterable 的对象，所以 Array、Map、Set、String、Int32Array 等都是 Iterable 的。",{"type":167,"tag":182,"props":588,"children":589},{},[590,592],{"type":173,"value":591},"见：",{"type":167,"tag":551,"props":593,"children":596},{"href":594,"rel":595},"https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html#iterables",[555],[597],{"type":173,"value":598},"Iterators and Generators",{"type":167,"tag":168,"props":600,"children":602},{"id":601},"应用",[603],{"type":173,"value":601},{"type":167,"tag":175,"props":605,"children":607},{"id":606},"怎么给-window-新增属性",[608],{"type":173,"value":609},"怎么给 Window 新增属性？",{"type":167,"tag":182,"props":611,"children":612},{},[613],{"type":173,"value":614},"同名接口会自动合并，所以写一个新的 Window 对象的接口就好了。",{"type":167,"tag":199,"props":616,"children":618},{"className":201,"code":617,"language":203,"meta":160,"style":160},"declare interface Window {\n  propertyA: string;\n}\n",[619],{"type":167,"tag":206,"props":620,"children":621},{"__ignoreMap":160},[622,645,667],{"type":167,"tag":210,"props":623,"children":624},{"class":212,"line":213},[625,630,635,640],{"type":167,"tag":210,"props":626,"children":627},{"style":256},[628],{"type":173,"value":629},"declare",{"type":167,"tag":210,"props":631,"children":632},{"style":217},[633],{"type":173,"value":634}," interface",{"type":167,"tag":210,"props":636,"children":637},{"style":223},[638],{"type":173,"value":639}," Window",{"type":167,"tag":210,"props":641,"children":642},{"style":229},[643],{"type":173,"value":644}," {\n",{"type":167,"tag":210,"props":646,"children":647},{"class":212,"line":308},[648,653,657,662],{"type":167,"tag":210,"props":649,"children":650},{"style":278},[651],{"type":173,"value":652},"  propertyA",{"type":167,"tag":210,"props":654,"children":655},{"style":245},[656],{"type":173,"value":286},{"type":167,"tag":210,"props":658,"children":659},{"style":262},[660],{"type":173,"value":661}," string",{"type":167,"tag":210,"props":663,"children":664},{"style":229},[665],{"type":173,"value":666},";\n",{"type":167,"tag":210,"props":668,"children":669},{"class":212,"line":397},[670],{"type":167,"tag":210,"props":671,"children":672},{"style":229},[673],{"type":173,"value":674},"}\n",{"type":167,"tag":168,"props":676,"children":678},{"id":677},"类型体操",[679],{"type":173,"value":677},{"type":167,"tag":541,"props":681,"children":682},{},[683,691],{"type":167,"tag":545,"props":684,"children":685},{},[686],{"type":167,"tag":551,"props":687,"children":689},{"href":688},"/maps/_typescript/type-gymnastics",[690],{"type":173,"value":677},{"type":167,"tag":545,"props":692,"children":693},{},[694],{"type":167,"tag":551,"props":695,"children":697},{"href":696},"/source-code/_ts/type-challenges",[698],{"type":173,"value":699},"体操训练",{"type":167,"tag":175,"props":701,"children":703},{"id":702},"什么是类型体操",[704],{"type":173,"value":705},"什么是类型体操？",{"type":167,"tag":182,"props":707,"children":708},{},[709],{"type":173,"value":710},"TypeScript 的类型系统是图灵完备的，这意味着能用 JavaScript 解决的问题，用 TypeScript 的类型系统同样能解决，只是实现方式不一样。尽管完成某种“实现”的方式可能非常复杂，但人们就像玩玩具一样喜欢玩它，或是把它看作某种脑力运动。充满技巧，有乐趣，复杂，又花里胡哨，所以是体操咯。",{"type":167,"tag":175,"props":712,"children":714},{"id":713},"什么是图灵完备",[715],{"type":173,"value":716},"什么是图灵完备？",{"type":167,"tag":182,"props":718,"children":719},{},[720],{"type":173,"value":721},"图灵完备通常指一门编程语言，这意味着这门语言能完成所有图灵机能做的工作。图灵机简单来说，是一个带有无限长度纸带的机器，纸带上有规律组成的 0 和 1，而图灵机通过读写纸带，就可以模拟任何可以实现的计算。",{"type":167,"tag":182,"props":723,"children":724},{},[725,726,733,735],{"type":173,"value":591},{"type":167,"tag":551,"props":727,"children":730},{"href":728,"rel":729},"https://www.bilibili.com/video/BV18L4y15786/",[555],[731],{"type":173,"value":732},"什么是图灵完备 @bili",{"type":173,"value":734},"，",{"type":167,"tag":551,"props":736,"children":739},{"href":737,"rel":738},"https://www.zhihu.com/question/20115374",[555],[740],{"type":173,"value":741},"什么是图灵完备 @zhihu",{"type":167,"tag":168,"props":743,"children":745},{"id":744},"经验",[746],{"type":173,"value":744},{"type":167,"tag":175,"props":748,"children":750},{"id":749},"大规模采用-typescript-之后的-10-个见解",[751],{"type":167,"tag":551,"props":752,"children":755},{"href":753,"rel":754},"https://blog.csdn.net/yeluoxiang/article/details/111602386",[555],[756],{"type":173,"value":757},"大规模采用 TypeScript 之后的 10 个见解",{"type":167,"tag":182,"props":759,"children":760},{},[761],{"type":167,"tag":762,"props":763,"children":764},"q",{},[765],{"type":173,"value":766},"尽管 TypeScript Design Goals 明确表示了避免在未来引入更多的运行时特征，但在发展过程中，TS 扩展了一小部分不太适合 TS = JS + Types 这个模型的功能，enum, namespace, parameter properties 以及 experimental decorators 都需要有将他们扩展为运行时代码的语义，而 JavaScript 引擎很可能永远都不会为这些功能提供支持。",{"type":167,"tag":182,"props":768,"children":769},{},[770],{"type":173,"value":771},"彭博社有专门的工具阻止使用这些不良设计，他们希望自己的代码一直和 ES 标准保持统一。",{"type":167,"tag":182,"props":773,"children":774},{},[775],{"type":173,"value":776},"编译器更新其实值得，带来的兼容性只有两点：一是新的类型检查会暴露过去没有发现的错误，二是在同一个生态系统中如果各个项目使用不同版本的编译器，可能产物不通用。",{"type":167,"tag":182,"props":778,"children":779},{},[780],{"type":167,"tag":762,"props":781,"children":782},{},[783],{"type":173,"value":784},"保持一致的 tsconfig 设置是非常重要的，但最终我们放弃了严格模式，选择牺牲灵活性来保持所有项目配置的一致性。",{"type":167,"tag":182,"props":786,"children":787},{},[788],{"type":173,"value":789},"当设计以 tsconfig.a.json 配置编译的代码被配置了 tsconfig.b.json 的工具引用后就可能出问题。",{"type":167,"tag":182,"props":791,"children":792},{},[793],{"type":167,"tag":762,"props":794,"children":795},{},[796],{"type":173,"value":797},"Ambient Modules 特别之处在于，TypeScript 在发表声明时保持对修饰符的引用，从而避免将它们转化为相对路径。",{"type":167,"tag":182,"props":799,"children":800},{},[801],{"type":167,"tag":762,"props":802,"children":803},{},[804],{"type":173,"value":805},"我们的平台会确保在运行时中每个包只有一个版本的存在。我们希望对类型提供一种 “精确且唯一” 的定义，更好的反应运行时环境。",{"type":167,"tag":182,"props":807,"children":808},{},[809],{"type":173,"value":810},"不可能实现。",{"type":167,"tag":182,"props":812,"children":813},{},[814],{"type":167,"tag":762,"props":815,"children":816},{},[817],{"type":173,"value":818},"TypeScript 仍无法知晓它生成的文件中是否存在不安全的导入",{"type":167,"tag":182,"props":820,"children":821},{},[822],{"type":173,"value":823},"因为从某个库的私有包中引入类型是不安全的，这种引入不受库接口的兼容性限制。",{"type":167,"tag":182,"props":825,"children":826},{},[827],{"type":167,"tag":762,"props":828,"children":829},{},[830],{"type":173,"value":831},"有时 TypeScript 会将依赖中的类型内联传递给当前的类型。我们见过一些极端的例子，由于这些重复的类型定义，声明文件的大小从 7KB 膨胀到了 700KB。",{"type":167,"tag":182,"props":833,"children":834},{},[835],{"type":173,"value":836},"如何防止类型内联：",{"type":167,"tag":541,"props":838,"children":839},{},[840,845],{"type":167,"tag":545,"props":841,"children":842},{},[843],{"type":173,"value":844},"使用 interface 代替 type。",{"type":167,"tag":545,"props":846,"children":847},{},[848],{"type":173,"value":849},"对输出添加类型注释，显式类型注释可以强制指定引用的行为，防止内联",{"type":167,"tag":182,"props":851,"children":852},{},[853],{"type":167,"tag":762,"props":854,"children":855},{},[856],{"type":173,"value":857},"Type Shaking 有时会效果极为显著。我们曾经遇到过一些包中超过 90% 文件中有超过 90% 的类型定义行是可以去掉的。",{"type":167,"tag":168,"props":859,"children":861},{"id":860},"反对",[862],{"type":173,"value":860},{"type":167,"tag":175,"props":864,"children":866},{"id":865},"typescript-不值得前端框架-svelte-作者宣布重构代码反向迁移到-javascript-引争议",[867],{"type":167,"tag":551,"props":868,"children":871},{"href":869,"rel":870},"https://mp.weixin.qq.com/s?src=11&timestamp=1685334730&ver=4557&signature=YHLVy3Pb0b4pKL4-x5Qn7MHu71CQCnJfE04W3iJTm1pQ0X-LgQ6kLfW9TMnfXmTHvmM1YN-xRsFsuAlSKCePE-Goat-MdhOzQqvIVcMl6kPLpJ10vTrrRmwQRZljDCoD&new=1",[555],[872],{"type":173,"value":873},"“TypeScript 不值得！”前端框架 Svelte 作者宣布重构代码，反向迁移到 JavaScript 引争议",{"type":167,"tag":182,"props":875,"children":876},{},[877],{"type":173,"value":878},"2023 年 5 月 9 日，Svelte 团队发布 TS to JSDoc Conversion 的 PR，讨论点在 JSDoc 对类型开发的友好程度不如 TS。作者 Rich Harris 表示原因比较复杂。",{"type":167,"tag":182,"props":880,"children":881},{},[882],{"type":167,"tag":883,"props":884,"children":887},"img",{"alt":885,"src":886},"原因","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20230529124336.png",[],{"type":167,"tag":182,"props":889,"children":890},{},[891],{"type":167,"tag":762,"props":892,"children":893},{},[894],{"type":173,"value":895},"团队在 Sveltekit 中尝试这么做并取得了良好效果，所以想在  Svelte 4.0 也这么做。",{"type":167,"tag":182,"props":897,"children":898},{},[899],{"type":167,"tag":762,"props":900,"children":901},{},[902],{"type":173,"value":903},"“这就没必要了，因为在构建应用程序的过程中，大家无论如何都需要构建的步骤。应用开发的重点在于优化代码、控制它的体量，并把一切都捆绑起来。但如果是想构建一个库，那我强烈建议改用 JSDoc。”",{"type":167,"tag":182,"props":905,"children":906},{},[907],{"type":173,"value":908},"如果是构建应用程序，没必要转向 JSDoc。",{"type":167,"tag":182,"props":910,"children":911},{},[912],{"type":173,"value":913},"对 Svelte 而言，框架本身没有放弃类型安全；对开发者而言，能降低贡献门槛；对用户而言，代码直接指向源码方便调试，也助于能减小代码体积。",{"type":167,"tag":168,"props":915,"children":917},{"id":916},"项目设置",[918],{"type":173,"value":916},{"type":167,"tag":175,"props":920,"children":922},{"id":921},"isolatedmodules",[923],{"type":167,"tag":551,"props":924,"children":927},{"href":925,"rel":926},"https://www.typescriptlang.org/tsconfig#isolatedModules",[555],[928],{"type":173,"value":929},"isolatedModules",{"type":167,"tag":182,"props":931,"children":932},{},[933],{"type":173,"value":934},"许多编译工具如 Babel 不支持在“一个系统层面”角度理解类型。所以需要开启 isolatedModules。开启后，TS 会将每一个 TS 文件都视为独立的 Module，这需要项目使用 ES Module 语法，但同时，TS 会带来更严格的类型检测支持。",{"type":167,"tag":182,"props":936,"children":937},{},[938],{"type":173,"value":939},"在 vite-based 项目中，这个选项应该且默认打开。",{"type":167,"tag":941,"props":942,"children":944},"h3",{"id":943},"推荐",[945],{"type":173,"value":943},{"type":167,"tag":541,"props":947,"children":948},{},[949,959,969,995],{"type":167,"tag":545,"props":950,"children":951},{},[952],{"type":167,"tag":551,"props":953,"children":956},{"href":954,"rel":955},"https://www.typescriptlang.org/play?#code/C4TwDgpgBAggjFAvFA3lCAPCBjGAKASgC4oAhBAXwChRIyFk1MdTCT4pqqAbCYKAIbsGqKlHRZcUNvVHjxAJz4BXBQDs588c2ylpBTVsUr1UYAAsAlgGdBt5WoDWagPYB3DQNvwxR6lv9OKi4AehCoAHkAaQAaM3AIFwAzQSgbWDgqASRBKjCoAAFgawBaTEhsYDKFBRcFKAAjHAFla2hsgBMIJMs1CA67KGtgAWBLbHi6H2zkAQA6HXwCPPDouNpElIa023IePkac+cXCKjPz-f4wbmUAc17bRkESAHIBF6CNqAAFG-u1R6TTZQa53B5nJIOSqWFwaW4QNQAHgAKgA+PDXW7WEjIgwoXxKYCqDT4rSY6wxXzaSSIgCq6IECixJFpeKp8kJxKg8KRyIAZPS8KSjOI5mLyZSRaKxYysezxBRlgFfNQuLx+AIAEw5HkYv4PZZao6arKaubkuYCU3GhaSIUNIgvBovRUrQrFMoYCpVCA1Oo-WqQBSgKBOj4dFwQWyufiYGz8WFA0NoIRDYAKXq3ADcnBec1N5u4WLmDUujW1szNOiF2Ed2Bdy3y0SoDTNFuwZy+AFkBI4ICjUTlheScZKJDg6QymdioKySD2+yiBajgmd1YIAMzz3v935ggGD5C60H-ayGjdHDdZDeF4tWgQX2Y36soB1h135Iqlco4H1++rfIGvohmGUARlGUAxhI8ZQImXwvCmJDDBmajZrm+YPre1glmWAgACyXraOA1nWDZus2+FYXMHZAA",[555],[957],{"type":173,"value":958},"伪动态类型",{"type":167,"tag":545,"props":960,"children":961},{},[962],{"type":167,"tag":551,"props":963,"children":966},{"href":964,"rel":965},"https://zhuanlan.zhihu.com/p/104565681",[555],[967],{"type":173,"value":968},"详解 TypeScript 里的 This",{"type":167,"tag":545,"props":970,"children":971},{},[972],{"type":167,"tag":551,"props":973,"children":976},{"href":974,"rel":975},"https://stackoverflow.com/questions/69635559/in-typescript-why-is-boolean-string-different-from-boolean-string/69653332#69653332",[555],[977,979,985,987,993],{"type":173,"value":978},"In typescript, why is ",{"type":167,"tag":206,"props":980,"children":982},{"className":981},[],[983],{"type":173,"value":984},"[boolean, string?]",{"type":173,"value":986}," different from ",{"type":167,"tag":206,"props":988,"children":990},{"className":989},[],[991],{"type":173,"value":992},"[boolean, string] | [boolean]",{"type":173,"value":994},"?",{"type":167,"tag":545,"props":996,"children":997},{},[998],{"type":167,"tag":551,"props":999,"children":1002},{"href":1000,"rel":1001},"https://stackoverflow.com/questions/56346520/typescript-error-type-number-is-not-assignable-to-type-0-1-2-why-am",[555],[1003],{"type":173,"value":1004},"TypeScript error: \"Type 'number' is not assignable to type '0 | 1 | 2' \". Why am I getting this error?",{"type":167,"tag":1006,"props":1007,"children":1008},"style",{},[1009],{"type":173,"value":1010},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":308,"depth":308,"links":1012},[1013,1014,1015,1016,1017,1018,1019],{"id":170,"depth":308,"text":170},{"id":561,"depth":308,"text":561},{"id":601,"depth":308,"text":601},{"id":677,"depth":308,"text":677},{"id":744,"depth":308,"text":744},{"id":860,"depth":308,"text":860},{"id":916,"depth":308,"text":916,"children":1020},[1021],{"id":943,"depth":397,"text":943},"markdown","content:6.maps:_typescript:typescript.md","content","6.maps/_typescript/typescript.md","6.maps/_typescript/typescript","md",[1029,1032],{"_path":688,"title":1030,"description":1031},"类型体操（Type Gymnastics）","TypeScript 类型体操指北，包含语法关键字、语句结构、基本运算等内容。",{"_path":1033,"title":1034,"description":1035},"/maps/_ui/accessibility","网站的可访问性","增强页面的可访问目的是使网页能够被更多的人使用，包括残障人士、使用底处理性能或低带宽设备的人",1742745235505]