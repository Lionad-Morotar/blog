[{"data":1,"prerenderedAt":1039},["ShallowReactive",2],{"navigation":3,"/maps/_typescript/typescript":158,"/maps/_typescript/typescript-surround":1031},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":1025,"_id":1026,"_source":1027,"_file":1028,"_stem":1029,"_extension":1030},"/maps/_typescript/typescript","_typescript",false,true,"","TypeScript","TypeScript 的核心概念、高级类型、应用实践和工程化经验，包含类型体操、项目配置等内容的完整指南。",{"type":167,"children":168,"toc":1014},"root",[169,177,184,190,196,201,537,543,562,567,579,585,590,602,607,613,618,678,683,703,709,714,720,725,745,750,761,770,775,780,788,793,801,809,814,822,827,835,840,853,861,866,877,882,891,899,907,912,917,922,933,938,943,949,1008],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"基本",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"如何理解-interface-和-type-的异同",[182],{"type":176,"value":183},"如何理解 Interface 和 Type 的异同？",{"type":170,"tag":185,"props":186,"children":187},"p",{},[188],{"type":176,"value":189},"类型（Type）不可以合并，但接口（Interface）可以合并。可以理解为某个函数可以实现多个接口，但是作为变量，它只有一种类型。",{"type":170,"tag":178,"props":191,"children":193},{"id":192},"裸类型是什么",[194],{"type":176,"value":195},"裸类型是什么？",{"type":170,"tag":185,"props":197,"children":198},{},[199],{"type":176,"value":200},"裸类型在带入运算时会自动展开，非裸类型则不会。",{"type":170,"tag":202,"props":203,"children":207},"pre",{"className":204,"code":205,"language":206,"meta":163,"style":163},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","type WrapNaked\u003CT> = T extends any ? { o: T } : never\ntype WrapUnNaked\u003CT> = { o: T } extends any ? { o: T } : never\n\ntype Foo = WrapNaked\u003Cstring | number | boolean>\n// { o: string } | { o: number } | { o: boolean }\n\ntype Bar = WrapUnNaked\u003Cstring | number | boolean>\n// { o: string | number | boolean }\n","js",[208],{"type":170,"tag":209,"props":210,"children":211},"code",{"__ignoreMap":163},[212,309,398,407,461,471,479,528],{"type":170,"tag":213,"props":214,"children":217},"span",{"class":215,"line":216},"line",1,[218,224,230,236,241,246,252,257,263,269,274,279,285,290,294,299,304],{"type":170,"tag":213,"props":219,"children":221},{"style":220},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[222],{"type":176,"value":223},"type",{"type":170,"tag":213,"props":225,"children":227},{"style":226},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[228],{"type":176,"value":229}," WrapNaked",{"type":170,"tag":213,"props":231,"children":233},{"style":232},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[234],{"type":176,"value":235},"\u003C",{"type":170,"tag":213,"props":237,"children":238},{"style":226},[239],{"type":176,"value":240},"T",{"type":170,"tag":213,"props":242,"children":243},{"style":232},[244],{"type":176,"value":245},">",{"type":170,"tag":213,"props":247,"children":249},{"style":248},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[250],{"type":176,"value":251}," =",{"type":170,"tag":213,"props":253,"children":254},{"style":226},[255],{"type":176,"value":256}," T",{"type":170,"tag":213,"props":258,"children":260},{"style":259},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[261],{"type":176,"value":262}," extends",{"type":170,"tag":213,"props":264,"children":266},{"style":265},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[267],{"type":176,"value":268}," any",{"type":170,"tag":213,"props":270,"children":271},{"style":248},[272],{"type":176,"value":273}," ?",{"type":170,"tag":213,"props":275,"children":276},{"style":232},[277],{"type":176,"value":278}," {",{"type":170,"tag":213,"props":280,"children":282},{"style":281},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[283],{"type":176,"value":284}," o",{"type":170,"tag":213,"props":286,"children":287},{"style":248},[288],{"type":176,"value":289},":",{"type":170,"tag":213,"props":291,"children":292},{"style":226},[293],{"type":176,"value":256},{"type":170,"tag":213,"props":295,"children":296},{"style":232},[297],{"type":176,"value":298}," }",{"type":170,"tag":213,"props":300,"children":301},{"style":248},[302],{"type":176,"value":303}," :",{"type":170,"tag":213,"props":305,"children":306},{"style":265},[307],{"type":176,"value":308}," never\n",{"type":170,"tag":213,"props":310,"children":312},{"class":215,"line":311},2,[313,317,322,326,330,334,338,342,346,350,354,358,362,366,370,374,378,382,386,390,394],{"type":170,"tag":213,"props":314,"children":315},{"style":220},[316],{"type":176,"value":223},{"type":170,"tag":213,"props":318,"children":319},{"style":226},[320],{"type":176,"value":321}," WrapUnNaked",{"type":170,"tag":213,"props":323,"children":324},{"style":232},[325],{"type":176,"value":235},{"type":170,"tag":213,"props":327,"children":328},{"style":226},[329],{"type":176,"value":240},{"type":170,"tag":213,"props":331,"children":332},{"style":232},[333],{"type":176,"value":245},{"type":170,"tag":213,"props":335,"children":336},{"style":248},[337],{"type":176,"value":251},{"type":170,"tag":213,"props":339,"children":340},{"style":232},[341],{"type":176,"value":278},{"type":170,"tag":213,"props":343,"children":344},{"style":281},[345],{"type":176,"value":284},{"type":170,"tag":213,"props":347,"children":348},{"style":248},[349],{"type":176,"value":289},{"type":170,"tag":213,"props":351,"children":352},{"style":226},[353],{"type":176,"value":256},{"type":170,"tag":213,"props":355,"children":356},{"style":232},[357],{"type":176,"value":298},{"type":170,"tag":213,"props":359,"children":360},{"style":259},[361],{"type":176,"value":262},{"type":170,"tag":213,"props":363,"children":364},{"style":265},[365],{"type":176,"value":268},{"type":170,"tag":213,"props":367,"children":368},{"style":248},[369],{"type":176,"value":273},{"type":170,"tag":213,"props":371,"children":372},{"style":232},[373],{"type":176,"value":278},{"type":170,"tag":213,"props":375,"children":376},{"style":281},[377],{"type":176,"value":284},{"type":170,"tag":213,"props":379,"children":380},{"style":248},[381],{"type":176,"value":289},{"type":170,"tag":213,"props":383,"children":384},{"style":226},[385],{"type":176,"value":256},{"type":170,"tag":213,"props":387,"children":388},{"style":232},[389],{"type":176,"value":298},{"type":170,"tag":213,"props":391,"children":392},{"style":248},[393],{"type":176,"value":303},{"type":170,"tag":213,"props":395,"children":396},{"style":265},[397],{"type":176,"value":308},{"type":170,"tag":213,"props":399,"children":401},{"class":215,"line":400},3,[402],{"type":170,"tag":213,"props":403,"children":404},{"emptyLinePlaceholder":162},[405],{"type":176,"value":406},"\n",{"type":170,"tag":213,"props":408,"children":410},{"class":215,"line":409},4,[411,415,420,424,428,432,437,442,447,451,456],{"type":170,"tag":213,"props":412,"children":413},{"style":220},[414],{"type":176,"value":223},{"type":170,"tag":213,"props":416,"children":417},{"style":226},[418],{"type":176,"value":419}," Foo",{"type":170,"tag":213,"props":421,"children":422},{"style":248},[423],{"type":176,"value":251},{"type":170,"tag":213,"props":425,"children":426},{"style":226},[427],{"type":176,"value":229},{"type":170,"tag":213,"props":429,"children":430},{"style":232},[431],{"type":176,"value":235},{"type":170,"tag":213,"props":433,"children":434},{"style":265},[435],{"type":176,"value":436},"string",{"type":170,"tag":213,"props":438,"children":439},{"style":248},[440],{"type":176,"value":441}," |",{"type":170,"tag":213,"props":443,"children":444},{"style":265},[445],{"type":176,"value":446}," number",{"type":170,"tag":213,"props":448,"children":449},{"style":248},[450],{"type":176,"value":441},{"type":170,"tag":213,"props":452,"children":453},{"style":265},[454],{"type":176,"value":455}," boolean",{"type":170,"tag":213,"props":457,"children":458},{"style":232},[459],{"type":176,"value":460},">\n",{"type":170,"tag":213,"props":462,"children":464},{"class":215,"line":463},5,[465],{"type":170,"tag":213,"props":466,"children":468},{"style":467},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[469],{"type":176,"value":470},"// { o: string } | { o: number } | { o: boolean }\n",{"type":170,"tag":213,"props":472,"children":474},{"class":215,"line":473},6,[475],{"type":170,"tag":213,"props":476,"children":477},{"emptyLinePlaceholder":162},[478],{"type":176,"value":406},{"type":170,"tag":213,"props":480,"children":482},{"class":215,"line":481},7,[483,487,492,496,500,504,508,512,516,520,524],{"type":170,"tag":213,"props":484,"children":485},{"style":220},[486],{"type":176,"value":223},{"type":170,"tag":213,"props":488,"children":489},{"style":226},[490],{"type":176,"value":491}," Bar",{"type":170,"tag":213,"props":493,"children":494},{"style":248},[495],{"type":176,"value":251},{"type":170,"tag":213,"props":497,"children":498},{"style":226},[499],{"type":176,"value":321},{"type":170,"tag":213,"props":501,"children":502},{"style":232},[503],{"type":176,"value":235},{"type":170,"tag":213,"props":505,"children":506},{"style":265},[507],{"type":176,"value":436},{"type":170,"tag":213,"props":509,"children":510},{"style":248},[511],{"type":176,"value":441},{"type":170,"tag":213,"props":513,"children":514},{"style":265},[515],{"type":176,"value":446},{"type":170,"tag":213,"props":517,"children":518},{"style":248},[519],{"type":176,"value":441},{"type":170,"tag":213,"props":521,"children":522},{"style":265},[523],{"type":176,"value":455},{"type":170,"tag":213,"props":525,"children":526},{"style":232},[527],{"type":176,"value":460},{"type":170,"tag":213,"props":529,"children":531},{"class":215,"line":530},8,[532],{"type":170,"tag":213,"props":533,"children":534},{"style":467},[535],{"type":176,"value":536},"// { o: string | number | boolean }\n",{"type":170,"tag":178,"props":538,"children":540},{"id":539},"enums-vs-literal-unions",[541],{"type":176,"value":542},"Enums VS Literal Unions",{"type":170,"tag":544,"props":545,"children":546},"ul",{},[547],{"type":170,"tag":548,"props":549,"children":550},"li",{},[551,553],{"type":176,"value":552},"Georges Haidar 提到枚举相比字面量联合 ",{"type":170,"tag":554,"props":555,"children":559},"a",{"href":556,"rel":557},"https://blog.disintegrator.dev/posts/ode-to-typescript-enums/",[558],"nofollow",[560],{"type":176,"value":561},"支持 TSDoc 的 Deprecated 声明",{"type":170,"tag":171,"props":563,"children":565},{"id":564},"高级类型",[566],{"type":176,"value":564},{"type":170,"tag":544,"props":568,"children":569},{},[570],{"type":170,"tag":548,"props":571,"children":572},{},[573],{"type":170,"tag":554,"props":574,"children":576},{"href":575},"/source-code/_ts/utility-types",[577],{"type":176,"value":578},"高级类型推导",{"type":170,"tag":178,"props":580,"children":582},{"id":581},"iterable-和-array-是什么关系",[583],{"type":176,"value":584},"Iterable 和 Array 是什么关系？",{"type":170,"tag":185,"props":586,"children":587},{},[588],{"type":176,"value":589},"实现了 Symbol.iterator 接口的对象都视为是 Iterable 的对象，所以 Array、Map、Set、String、Int32Array 等都是 Iterable 的。",{"type":170,"tag":185,"props":591,"children":592},{},[593,595],{"type":176,"value":594},"见：",{"type":170,"tag":554,"props":596,"children":599},{"href":597,"rel":598},"https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html#iterables",[558],[600],{"type":176,"value":601},"Iterators and Generators",{"type":170,"tag":171,"props":603,"children":605},{"id":604},"应用",[606],{"type":176,"value":604},{"type":170,"tag":178,"props":608,"children":610},{"id":609},"怎么给-window-新增属性",[611],{"type":176,"value":612},"怎么给 Window 新增属性？",{"type":170,"tag":185,"props":614,"children":615},{},[616],{"type":176,"value":617},"同名接口会自动合并，所以写一个新的 Window 对象的接口就好了。",{"type":170,"tag":202,"props":619,"children":621},{"className":204,"code":620,"language":206,"meta":163,"style":163},"declare interface Window {\n  propertyA: string;\n}\n",[622],{"type":170,"tag":209,"props":623,"children":624},{"__ignoreMap":163},[625,648,670],{"type":170,"tag":213,"props":626,"children":627},{"class":215,"line":216},[628,633,638,643],{"type":170,"tag":213,"props":629,"children":630},{"style":259},[631],{"type":176,"value":632},"declare",{"type":170,"tag":213,"props":634,"children":635},{"style":220},[636],{"type":176,"value":637}," interface",{"type":170,"tag":213,"props":639,"children":640},{"style":226},[641],{"type":176,"value":642}," Window",{"type":170,"tag":213,"props":644,"children":645},{"style":232},[646],{"type":176,"value":647}," {\n",{"type":170,"tag":213,"props":649,"children":650},{"class":215,"line":311},[651,656,660,665],{"type":170,"tag":213,"props":652,"children":653},{"style":281},[654],{"type":176,"value":655},"  propertyA",{"type":170,"tag":213,"props":657,"children":658},{"style":248},[659],{"type":176,"value":289},{"type":170,"tag":213,"props":661,"children":662},{"style":265},[663],{"type":176,"value":664}," string",{"type":170,"tag":213,"props":666,"children":667},{"style":232},[668],{"type":176,"value":669},";\n",{"type":170,"tag":213,"props":671,"children":672},{"class":215,"line":400},[673],{"type":170,"tag":213,"props":674,"children":675},{"style":232},[676],{"type":176,"value":677},"}\n",{"type":170,"tag":171,"props":679,"children":681},{"id":680},"类型体操",[682],{"type":176,"value":680},{"type":170,"tag":544,"props":684,"children":685},{},[686,694],{"type":170,"tag":548,"props":687,"children":688},{},[689],{"type":170,"tag":554,"props":690,"children":692},{"href":691},"/maps/_typescript/type-gymnastics",[693],{"type":176,"value":680},{"type":170,"tag":548,"props":695,"children":696},{},[697],{"type":170,"tag":554,"props":698,"children":700},{"href":699},"/source-code/_ts/type-challenges",[701],{"type":176,"value":702},"体操训练",{"type":170,"tag":178,"props":704,"children":706},{"id":705},"什么是类型体操",[707],{"type":176,"value":708},"什么是类型体操？",{"type":170,"tag":185,"props":710,"children":711},{},[712],{"type":176,"value":713},"TypeScript 的类型系统是图灵完备的，这意味着能用 JavaScript 解决的问题，用 TypeScript 的类型系统同样能解决，只是实现方式不一样。尽管完成某种“实现”的方式可能非常复杂，但人们就像玩玩具一样喜欢玩它，或是把它看作某种脑力运动。充满技巧，有乐趣，复杂，又花里胡哨，所以是体操咯。",{"type":170,"tag":178,"props":715,"children":717},{"id":716},"什么是图灵完备",[718],{"type":176,"value":719},"什么是图灵完备？",{"type":170,"tag":185,"props":721,"children":722},{},[723],{"type":176,"value":724},"图灵完备通常指一门编程语言，这意味着这门语言能完成所有图灵机能做的工作。图灵机简单来说，是一个带有无限长度纸带的机器，纸带上有规律组成的 0 和 1，而图灵机通过读写纸带，就可以模拟任何可以实现的计算。",{"type":170,"tag":185,"props":726,"children":727},{},[728,729,736,738],{"type":176,"value":594},{"type":170,"tag":554,"props":730,"children":733},{"href":731,"rel":732},"https://www.bilibili.com/video/BV18L4y15786/",[558],[734],{"type":176,"value":735},"什么是图灵完备 @bili",{"type":176,"value":737},"，",{"type":170,"tag":554,"props":739,"children":742},{"href":740,"rel":741},"https://www.zhihu.com/question/20115374",[558],[743],{"type":176,"value":744},"什么是图灵完备 @zhihu",{"type":170,"tag":171,"props":746,"children":748},{"id":747},"经验",[749],{"type":176,"value":747},{"type":170,"tag":178,"props":751,"children":753},{"id":752},"大规模采用-typescript-之后的-10-个见解",[754],{"type":170,"tag":554,"props":755,"children":758},{"href":756,"rel":757},"https://blog.csdn.net/yeluoxiang/article/details/111602386",[558],[759],{"type":176,"value":760},"大规模采用 TypeScript 之后的 10 个见解",{"type":170,"tag":185,"props":762,"children":763},{},[764],{"type":170,"tag":765,"props":766,"children":767},"q",{},[768],{"type":176,"value":769},"尽管 TypeScript Design Goals 明确表示了避免在未来引入更多的运行时特征，但在发展过程中，TS 扩展了一小部分不太适合 TS = JS + Types 这个模型的功能，enum, namespace, parameter properties 以及 experimental decorators 都需要有将他们扩展为运行时代码的语义，而 JavaScript 引擎很可能永远都不会为这些功能提供支持。",{"type":170,"tag":185,"props":771,"children":772},{},[773],{"type":176,"value":774},"彭博社有专门的工具阻止使用这些不良设计，他们希望自己的代码一直和 ES 标准保持统一。",{"type":170,"tag":185,"props":776,"children":777},{},[778],{"type":176,"value":779},"编译器更新其实值得，带来的兼容性只有两点：一是新的类型检查会暴露过去没有发现的错误，二是在同一个生态系统中如果各个项目使用不同版本的编译器，可能产物不通用。",{"type":170,"tag":185,"props":781,"children":782},{},[783],{"type":170,"tag":765,"props":784,"children":785},{},[786],{"type":176,"value":787},"保持一致的 tsconfig 设置是非常重要的，但最终我们放弃了严格模式，选择牺牲灵活性来保持所有项目配置的一致性。",{"type":170,"tag":185,"props":789,"children":790},{},[791],{"type":176,"value":792},"当设计以 tsconfig.a.json 配置编译的代码被配置了 tsconfig.b.json 的工具引用后就可能出问题。",{"type":170,"tag":185,"props":794,"children":795},{},[796],{"type":170,"tag":765,"props":797,"children":798},{},[799],{"type":176,"value":800},"Ambient Modules 特别之处在于，TypeScript 在发表声明时保持对修饰符的引用，从而避免将它们转化为相对路径。",{"type":170,"tag":185,"props":802,"children":803},{},[804],{"type":170,"tag":765,"props":805,"children":806},{},[807],{"type":176,"value":808},"我们的平台会确保在运行时中每个包只有一个版本的存在。我们希望对类型提供一种 “精确且唯一” 的定义，更好的反应运行时环境。",{"type":170,"tag":185,"props":810,"children":811},{},[812],{"type":176,"value":813},"不可能实现。",{"type":170,"tag":185,"props":815,"children":816},{},[817],{"type":170,"tag":765,"props":818,"children":819},{},[820],{"type":176,"value":821},"TypeScript 仍无法知晓它生成的文件中是否存在不安全的导入",{"type":170,"tag":185,"props":823,"children":824},{},[825],{"type":176,"value":826},"因为从某个库的私有包中引入类型是不安全的，这种引入不受库接口的兼容性限制。",{"type":170,"tag":185,"props":828,"children":829},{},[830],{"type":170,"tag":765,"props":831,"children":832},{},[833],{"type":176,"value":834},"有时 TypeScript 会将依赖中的类型内联传递给当前的类型。我们见过一些极端的例子，由于这些重复的类型定义，声明文件的大小从 7KB 膨胀到了 700KB。",{"type":170,"tag":185,"props":836,"children":837},{},[838],{"type":176,"value":839},"如何防止类型内联：",{"type":170,"tag":544,"props":841,"children":842},{},[843,848],{"type":170,"tag":548,"props":844,"children":845},{},[846],{"type":176,"value":847},"使用 interface 代替 type。",{"type":170,"tag":548,"props":849,"children":850},{},[851],{"type":176,"value":852},"对输出添加类型注释，显式类型注释可以强制指定引用的行为，防止内联",{"type":170,"tag":185,"props":854,"children":855},{},[856],{"type":170,"tag":765,"props":857,"children":858},{},[859],{"type":176,"value":860},"Type Shaking 有时会效果极为显著。我们曾经遇到过一些包中超过 90% 文件中有超过 90% 的类型定义行是可以去掉的。",{"type":170,"tag":171,"props":862,"children":864},{"id":863},"反对",[865],{"type":176,"value":863},{"type":170,"tag":178,"props":867,"children":869},{"id":868},"typescript-不值得前端框架-svelte-作者宣布重构代码反向迁移到-javascript-引争议",[870],{"type":170,"tag":554,"props":871,"children":874},{"href":872,"rel":873},"https://mp.weixin.qq.com/s?src=11&timestamp=1685334730&ver=4557&signature=YHLVy3Pb0b4pKL4-x5Qn7MHu71CQCnJfE04W3iJTm1pQ0X-LgQ6kLfW9TMnfXmTHvmM1YN-xRsFsuAlSKCePE-Goat-MdhOzQqvIVcMl6kPLpJ10vTrrRmwQRZljDCoD&new=1",[558],[875],{"type":176,"value":876},"“TypeScript 不值得！”前端框架 Svelte 作者宣布重构代码，反向迁移到 JavaScript 引争议",{"type":170,"tag":185,"props":878,"children":879},{},[880],{"type":176,"value":881},"2023 年 5 月 9 日，Svelte 团队发布 TS to JSDoc Conversion 的 PR，讨论点在 JSDoc 对类型开发的友好程度不如 TS。作者 Rich Harris 表示原因比较复杂。",{"type":170,"tag":185,"props":883,"children":884},{},[885],{"type":170,"tag":886,"props":887,"children":890},"img",{"alt":888,"src":889},"原因","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20230529124336.png",[],{"type":170,"tag":185,"props":892,"children":893},{},[894],{"type":170,"tag":765,"props":895,"children":896},{},[897],{"type":176,"value":898},"团队在 Sveltekit 中尝试这么做并取得了良好效果，所以想在  Svelte 4.0 也这么做。",{"type":170,"tag":185,"props":900,"children":901},{},[902],{"type":170,"tag":765,"props":903,"children":904},{},[905],{"type":176,"value":906},"“这就没必要了，因为在构建应用程序的过程中，大家无论如何都需要构建的步骤。应用开发的重点在于优化代码、控制它的体量，并把一切都捆绑起来。但如果是想构建一个库，那我强烈建议改用 JSDoc。”",{"type":170,"tag":185,"props":908,"children":909},{},[910],{"type":176,"value":911},"如果是构建应用程序，没必要转向 JSDoc。",{"type":170,"tag":185,"props":913,"children":914},{},[915],{"type":176,"value":916},"对 Svelte 而言，框架本身没有放弃类型安全；对开发者而言，能降低贡献门槛；对用户而言，代码直接指向源码方便调试，也助于能减小代码体积。",{"type":170,"tag":171,"props":918,"children":920},{"id":919},"项目设置",[921],{"type":176,"value":919},{"type":170,"tag":178,"props":923,"children":925},{"id":924},"isolatedmodules",[926],{"type":170,"tag":554,"props":927,"children":930},{"href":928,"rel":929},"https://www.typescriptlang.org/tsconfig#isolatedModules",[558],[931],{"type":176,"value":932},"isolatedModules",{"type":170,"tag":185,"props":934,"children":935},{},[936],{"type":176,"value":937},"许多编译工具如 Babel 不支持在“一个系统层面”角度理解类型。所以需要开启 isolatedModules。开启后，TS 会将每一个 TS 文件都视为独立的 Module，这需要项目使用 ES Module 语法，但同时，TS 会带来更严格的类型检测支持。",{"type":170,"tag":185,"props":939,"children":940},{},[941],{"type":176,"value":942},"在 vite-based 项目中，这个选项应该且默认打开。",{"type":170,"tag":944,"props":945,"children":947},"h3",{"id":946},"推荐",[948],{"type":176,"value":946},{"type":170,"tag":544,"props":950,"children":951},{},[952,962,972,998],{"type":170,"tag":548,"props":953,"children":954},{},[955],{"type":170,"tag":554,"props":956,"children":959},{"href":957,"rel":958},"https://www.typescriptlang.org/play?#code/C4TwDgpgBAggjFAvFA3lCAPCBjGAKASgC4oAhBAXwChRIyFk1MdTCT4pqqAbCYKAIbsGqKlHRZcUNvVHjxAJz4BXBQDs588c2ylpBTVsUr1UYAAsAlgGdBt5WoDWagPYB3DQNvwxR6lv9OKi4AehCoAHkAaQAaM3AIFwAzQSgbWDgqASRBKjCoAAFgawBaTEhsYDKFBRcFKAAjHAFla2hsgBMIJMs1CA67KGtgAWBLbHi6H2zkAQA6HXwCPPDouNpElIa023IePkac+cXCKjPz-f4wbmUAc17bRkESAHIBF6CNqAAFG-u1R6TTZQa53B5nJIOSqWFwaW4QNQAHgAKgA+PDXW7WEjIgwoXxKYCqDT4rSY6wxXzaSSIgCq6IECixJFpeKp8kJxKg8KRyIAZPS8KSjOI5mLyZSRaKxYysezxBRlgFfNQuLx+AIAEw5HkYv4PZZao6arKaubkuYCU3GhaSIUNIgvBovRUrQrFMoYCpVCA1Oo-WqQBSgKBOj4dFwQWyufiYGz8WFA0NoIRDYAKXq3ADcnBec1N5u4WLmDUujW1szNOiF2Ed2Bdy3y0SoDTNFuwZy+AFkBI4ICjUTlheScZKJDg6QymdioKySD2+yiBajgmd1YIAMzz3v935ggGD5C60H-ayGjdHDdZDeF4tWgQX2Y36soB1h135Iqlco4H1++rfIGvohmGUARlGUAxhI8ZQImXwvCmJDDBmajZrm+YPre1glmWAgACyXraOA1nWDZus2+FYXMHZAA",[558],[960],{"type":176,"value":961},"伪动态类型",{"type":170,"tag":548,"props":963,"children":964},{},[965],{"type":170,"tag":554,"props":966,"children":969},{"href":967,"rel":968},"https://zhuanlan.zhihu.com/p/104565681",[558],[970],{"type":176,"value":971},"详解 TypeScript 里的 This",{"type":170,"tag":548,"props":973,"children":974},{},[975],{"type":170,"tag":554,"props":976,"children":979},{"href":977,"rel":978},"https://stackoverflow.com/questions/69635559/in-typescript-why-is-boolean-string-different-from-boolean-string/69653332#69653332",[558],[980,982,988,990,996],{"type":176,"value":981},"In typescript, why is ",{"type":170,"tag":209,"props":983,"children":985},{"className":984},[],[986],{"type":176,"value":987},"[boolean, string?]",{"type":176,"value":989}," different from ",{"type":170,"tag":209,"props":991,"children":993},{"className":992},[],[994],{"type":176,"value":995},"[boolean, string] | [boolean]",{"type":176,"value":997},"?",{"type":170,"tag":548,"props":999,"children":1000},{},[1001],{"type":170,"tag":554,"props":1002,"children":1005},{"href":1003,"rel":1004},"https://stackoverflow.com/questions/56346520/typescript-error-type-number-is-not-assignable-to-type-0-1-2-why-am",[558],[1006],{"type":176,"value":1007},"TypeScript error: \"Type 'number' is not assignable to type '0 | 1 | 2' \". Why am I getting this error?",{"type":170,"tag":1009,"props":1010,"children":1011},"style",{},[1012],{"type":176,"value":1013},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":311,"depth":311,"links":1015},[1016,1017,1018,1019,1020,1021,1022],{"id":173,"depth":311,"text":173},{"id":564,"depth":311,"text":564},{"id":604,"depth":311,"text":604},{"id":680,"depth":311,"text":680},{"id":747,"depth":311,"text":747},{"id":863,"depth":311,"text":863},{"id":919,"depth":311,"text":919,"children":1023},[1024],{"id":946,"depth":400,"text":946},"markdown","content:6.maps:_typescript:typescript.md","content","6.maps/_typescript/typescript.md","6.maps/_typescript/typescript","md",[1032,1035],{"_path":691,"title":1033,"description":1034},"类型体操（Type Gymnastics）","TypeScript 类型体操指北，包含语法关键字、语句结构、基本运算等内容。",{"_path":1036,"title":1037,"description":1038},"/maps/_ui/accessibility","网站的可访问性","增强页面的可访问目的是使网页能够被更多的人使用，包括残障人士、使用底处理性能或低带宽设备的人",1748756310006]