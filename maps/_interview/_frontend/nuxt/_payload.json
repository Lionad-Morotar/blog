[{"data":1,"prerenderedAt":5366},["ShallowReactive",2],{"navigation":3,"/maps/_interview/_frontend/nuxt":161,"/maps/_interview/_frontend/nuxt-surround":5358},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":5352,"_id":5353,"_source":5354,"_file":5355,"_stem":5356,"_extension":5357},"/maps/_interview/_frontend/nuxt","_frontend",false,true,"","Nuxt 面试题","当前内容使用AI合成，参考时请谨慎甄别",{"type":170,"children":171,"toc":5340},"root",[172,180,186,242,247,311,316,364,369,417,422,480,485,533,538,586,591,614,619,625,632,637,643,648,800,806,1239,1307,1313,2166,2172,2177,2183,2188,2193,2199,2204,2210,2215,2221,2279,2285,2290,2296,2322,2328,2333,2339,2344,2350,2363,2369,2375,2420,2426,2493,2499,2520,2526,2531,2537,2549,2554,2560,2573,2579,2662,2667,2679,2685,2738,2744,2749,2770,2776,2781,2882,2888,2894,2914,3002,3008,3092,3098,3172,3178,3260,3266,3272,3360,3366,3500,3506,3512,3517,3522,3631,3636,3740,3745,3773,3778,3785,4161,4240,4246,4251,4287,4602,4607,4633,4709,4777,4866,4871,4921,4926,4960,4965,5001,5019,5138,5143,5148,5178,5183,5189,5292,5298,5334],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"知识大纲",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":183},"p",{},[184],{"type":179,"value":185},"一、基础与核心概念",{"type":173,"tag":187,"props":188,"children":189},"ol",{},[190,207,217,232],{"type":173,"tag":191,"props":192,"children":193},"li",{},[194,196,200,202,205],{"type":179,"value":195},"Nuxt 的定位与优势",{"type":173,"tag":197,"props":198,"children":199},"br",{},[],{"type":179,"value":201},"\n• Nuxt 与 Vue CLI、Vite 的区别",{"type":173,"tag":197,"props":203,"children":204},{},[],{"type":179,"value":206},"\n• SPA / SSR / SSG / ISR 模式的实现原理",{"type":173,"tag":191,"props":208,"children":209},{},[210,212,215],{"type":179,"value":211},"项目结构",{"type":173,"tag":197,"props":213,"children":214},{},[],{"type":179,"value":216},"\n• pages、layouts、components、assets、plugins、middleware、modules 等目录作用",{"type":173,"tag":191,"props":218,"children":219},{},[220,222,225,227,230],{"type":179,"value":221},"路由系统",{"type":173,"tag":197,"props":223,"children":224},{},[],{"type":179,"value":226},"\n• 基于文件系统自动生成路由的规则",{"type":173,"tag":197,"props":228,"children":229},{},[],{"type":179,"value":231},"\n• 动态路由、嵌套路由、可选参数、catch-all 路由\n• 路由守卫：中间件（middleware）与 Vue Router 4 的区别",{"type":173,"tag":191,"props":233,"children":234},{},[235,237,240],{"type":179,"value":236},"运行时配置",{"type":173,"tag":197,"props":238,"children":239},{},[],{"type":179,"value":241},"\n• runtimeConfig、process.env、import.meta 的使用场景",{"type":173,"tag":181,"props":243,"children":244},{},[245],{"type":179,"value":246},"二、渲染机制与数据获取",{"type":173,"tag":187,"props":248,"children":249},{},[250,260,275,290],{"type":173,"tag":191,"props":251,"children":252},{},[253,255,258],{"type":179,"value":254},"SSR 生命周期",{"type":173,"tag":197,"props":256,"children":257},{},[],{"type":179,"value":259},"\n• serverPrefetch 对比 useAsyncData/useFetch\n• hydration 与客户端激活（hydration mismatch 排查）",{"type":173,"tag":191,"props":261,"children":262},{},[263,265,268,270,273],{"type":179,"value":264},"数据获取 API",{"type":173,"tag":197,"props":266,"children":267},{},[],{"type":179,"value":269},"\n• useAsyncData、useFetch、useLazyAsyncData 的差异",{"type":173,"tag":197,"props":271,"children":272},{},[],{"type":179,"value":274},"\n• 缓存 key、defer、default、transform 选项",{"type":173,"tag":191,"props":276,"children":277},{},[278,280,283,285,288],{"type":179,"value":279},"SSG 生成流程",{"type":173,"tag":197,"props":281,"children":282},{},[],{"type":179,"value":284},"\n• nitro generate、prerender routes、payload extraction",{"type":173,"tag":197,"props":286,"children":287},{},[],{"type":179,"value":289},"\n• incremental static regeneration（ISR）原理",{"type":173,"tag":191,"props":291,"children":292},{},[293,295,298,300],{"type":179,"value":294},"SEO 与首屏优化",{"type":173,"tag":197,"props":296,"children":297},{},[],{"type":179,"value":299},"\n• useHead / useSeoMeta 与 ",{"type":173,"tag":301,"props":302,"children":303},"nuxt-link",{},[304,306,309],{"type":179,"value":305}," 预取策略",{"type":173,"tag":197,"props":307,"children":308},{},[],{"type":179,"value":310},"\n• Nuxt Image、lazy loading、预渲染 FCP/LCP 指标优化方法",{"type":173,"tag":181,"props":312,"children":313},{},[314],{"type":179,"value":315},"三、状态管理与组合式 API",{"type":173,"tag":187,"props":317,"children":318},{},[319,334,349],{"type":173,"tag":191,"props":320,"children":321},{},[322,324,327,329,332],{"type":179,"value":323},"Pinia 集成",{"type":173,"tag":197,"props":325,"children":326},{},[],{"type":179,"value":328},"\n• defineStore、storeToRefs、$reset 及插件机制",{"type":173,"tag":197,"props":330,"children":331},{},[],{"type":179,"value":333},"\n• SSR 下的状态序列化与 hydration",{"type":173,"tag":191,"props":335,"children":336},{},[337,339,342,344,347],{"type":179,"value":338},"Vue 3 组合式 API",{"type":173,"tag":197,"props":340,"children":341},{},[],{"type":179,"value":343},"\n• composables 目录自动导入规则",{"type":173,"tag":197,"props":345,"children":346},{},[],{"type":179,"value":348},"\n• useState vs useCookie、useSession",{"type":173,"tag":191,"props":350,"children":351},{},[352,354,357,359,362],{"type":179,"value":353},"跨端共享状态",{"type":173,"tag":197,"props":355,"children":356},{},[],{"type":179,"value":358},"\n• server side cookie / token 注入",{"type":173,"tag":197,"props":360,"children":361},{},[],{"type":179,"value":363},"\n• nuxt/app 与 nitro context 的桥接",{"type":173,"tag":181,"props":365,"children":366},{},[367],{"type":179,"value":368},"四、插件与中间件",{"type":173,"tag":187,"props":370,"children":371},{},[372,387,402],{"type":173,"tag":191,"props":373,"children":374},{},[375,377,380,382,385],{"type":179,"value":376},"插件生命周期",{"type":173,"tag":197,"props":378,"children":379},{},[],{"type":179,"value":381},"\n• mode: client/server/all 与 order",{"type":173,"tag":197,"props":383,"children":384},{},[],{"type":179,"value":386},"\n• provide/inject 在 SSR 中的可行性",{"type":173,"tag":191,"props":388,"children":389},{},[390,392,395,397,400],{"type":179,"value":391},"中间件分类",{"type":173,"tag":197,"props":393,"children":394},{},[],{"type":179,"value":396},"\n• global / named / route-based / server route middleware",{"type":173,"tag":197,"props":398,"children":399},{},[],{"type":179,"value":401},"\n• auth、i18n 场景设计题",{"type":173,"tag":191,"props":403,"children":404},{},[405,407,410,412,415],{"type":179,"value":406},"Server Routes（Nitro）",{"type":173,"tag":197,"props":408,"children":409},{},[],{"type":179,"value":411},"\n• API Routes、Event Handler、server middleware",{"type":173,"tag":197,"props":413,"children":414},{},[],{"type":179,"value":416},"\n• Streaming / Edge Function 支持",{"type":173,"tag":181,"props":418,"children":419},{},[420],{"type":179,"value":421},"五、Nuxt Nitro 与部署",{"type":173,"tag":187,"props":423,"children":424},{},[425,440,455,465],{"type":173,"tag":191,"props":426,"children":427},{},[428,430,433,435,438],{"type":179,"value":429},"构建产物",{"type":173,"tag":197,"props":431,"children":432},{},[],{"type":179,"value":434},"\n• .output 结构解析、server.mjs、dist/server 关系",{"type":173,"tag":197,"props":436,"children":437},{},[],{"type":179,"value":439},"\n• preset-standard、preset-node、preset-vercel、preset-cloudflare",{"type":173,"tag":191,"props":441,"children":442},{},[443,445,448,450,453],{"type":179,"value":444},"无服务器部署",{"type":173,"tag":197,"props":446,"children":447},{},[],{"type":179,"value":449},"\n• Vercel、Netlify、Cloudflare Pages、AWS Lambda 的不同打包策略",{"type":173,"tag":197,"props":451,"children":452},{},[],{"type":179,"value":454},"\n• Cold start 与 bundle size 优化",{"type":173,"tag":191,"props":456,"children":457},{},[458,460,463],{"type":179,"value":459},"Docker 化与自托管",{"type":173,"tag":197,"props":461,"children":462},{},[],{"type":179,"value":464},"\n• 多阶段构建、PNPM Hoisting、静态资源 CDN Offload",{"type":173,"tag":191,"props":466,"children":467},{},[468,470,473,475,478],{"type":179,"value":469},"监控与 APM",{"type":173,"tag":197,"props":471,"children":472},{},[],{"type":179,"value":474},"\n• runtimeConfig 注入 Sentry / NewRelic 实战",{"type":173,"tag":197,"props":476,"children":477},{},[],{"type":179,"value":479},"\n• server-timing header、nitro timing",{"type":173,"tag":181,"props":481,"children":482},{},[483],{"type":179,"value":484},"六、性能、安全与故障排查",{"type":173,"tag":187,"props":486,"children":487},{},[488,498,508,518],{"type":173,"tag":191,"props":489,"children":490},{},[491,493,496],{"type":179,"value":492},"Bundle 拆分",{"type":173,"tag":197,"props":494,"children":495},{},[],{"type":179,"value":497},"\n• dynamic import、vendor/commons chunk、payload extraction",{"type":173,"tag":191,"props":499,"children":500},{},[501,503,506],{"type":179,"value":502},"资源优化",{"type":173,"tag":197,"props":504,"children":505},{},[],{"type":179,"value":507},"\n• nuxt/image、nuxt/scripts defer/async、preload/prefetch",{"type":173,"tag":191,"props":509,"children":510},{},[511,513,516],{"type":179,"value":512},"安全实践",{"type":173,"tag":197,"props":514,"children":515},{},[],{"type":179,"value":517},"\n• XSS/CSRF 防护、Helmet 中间件、Cookie SameSite",{"type":173,"tag":191,"props":519,"children":520},{},[521,523,526,528,531],{"type":179,"value":522},"常见报错排查",{"type":173,"tag":197,"props":524,"children":525},{},[],{"type":179,"value":527},"\n• navigate aborted、Cannot read property ‘_payload’ of undefined",{"type":173,"tag":197,"props":529,"children":530},{},[],{"type":179,"value":532},"\n• HMR 失败、nitro error captured",{"type":173,"tag":181,"props":534,"children":535},{},[536],{"type":179,"value":537},"七、可扩展性与生态",{"type":173,"tag":187,"props":539,"children":540},{},[541,556,571],{"type":173,"tag":191,"props":542,"children":543},{},[544,546,549,551,554],{"type":179,"value":545},"Nuxt 模块开发",{"type":173,"tag":197,"props":547,"children":548},{},[],{"type":179,"value":550},"\n• defineNuxtModule、addPlugin、extendPages、hooks",{"type":173,"tag":197,"props":552,"children":553},{},[],{"type":179,"value":555},"\n• 自动导入（autoImports）生成逻辑",{"type":173,"tag":191,"props":557,"children":558},{},[559,561,564,566,569],{"type":179,"value":560},"经典社区模块",{"type":173,"tag":197,"props":562,"children":563},{},[],{"type":179,"value":565},"\n• @nuxt/image、@pinia/nuxt、nuxt-i18n、nuxt-auth",{"type":173,"tag":197,"props":567,"children":568},{},[],{"type":179,"value":570},"\n• 面试中可讨论的源码实现亮点",{"type":173,"tag":191,"props":572,"children":573},{},[574,576,579,581,584],{"type":179,"value":575},"Monorepo 与微前端",{"type":173,"tag":197,"props":577,"children":578},{},[],{"type":179,"value":580},"\n• NPM Workspaces / PNPM / TurboRepo 配置 Nuxt",{"type":173,"tag":197,"props":582,"children":583},{},[],{"type":179,"value":585},"\n• Module Federation、iframe sandbox 对比",{"type":173,"tag":181,"props":587,"children":588},{},[589],{"type":179,"value":590},"八、综合实战 / 场景题",{"type":173,"tag":187,"props":592,"children":593},{},[594,599,604,609],{"type":173,"tag":191,"props":595,"children":596},{},[597],{"type":179,"value":598},"设计题：为全球新闻站点选型 SSR + ISR 架构，考虑 SEO、缓存、成本",{"type":173,"tag":191,"props":600,"children":601},{},[602],{"type":179,"value":603},"排障题：生产环境出现 hydration mismatch，如何快速定位",{"type":173,"tag":191,"props":605,"children":606},{},[607],{"type":179,"value":608},"性能题：Lighthouse CLS 偏高，Nuxt 项目需要怎样优化",{"type":173,"tag":191,"props":610,"children":611},{},[612],{"type":179,"value":613},"安全题：如何在 SSR API 中安全地读取第三方密钥并下发前端",{"type":173,"tag":174,"props":615,"children":617},{"id":616},"问题分类",[618],{"type":179,"value":616},{"type":173,"tag":620,"props":621,"children":623},"h3",{"id":622},"基础与核心概念",[624],{"type":179,"value":622},{"type":173,"tag":626,"props":627,"children":629},"h4",{"id":628},"nuxt-与-vue-cli-的区别",[630],{"type":179,"value":631},"Nuxt 与 Vue CLI 的区别？",{"type":173,"tag":181,"props":633,"children":634},{},[635],{"type":179,"value":636},"Nuxt 是以服务端渲染、静态生成为核心、带路由约定、能辅助项目生成、开发、编译、部署全链路的 Vue3 元框架，Vue CLI 更像是 webpack 的某种封装。",{"type":173,"tag":626,"props":638,"children":640},{"id":639},"spassrssgisr-模式的基本原理",[641],{"type":179,"value":642},"SPA、SSR、SSG、ISR 模式的基本原理？",{"type":173,"tag":181,"props":644,"children":645},{},[646],{"type":179,"value":647},"SPA 全部在浏览器渲染，SSR 则是请求时服务端动态渲染，SSG 构建时一次性渲染，ISR：SSG + 在线按需、分批重新渲染。",{"type":173,"tag":187,"props":649,"children":650},{},[651,693,742,767],{"type":173,"tag":191,"props":652,"children":653},{},[654,656,659,661,664,666,669,671,678,680,686,688,691],{"type":179,"value":655},"SPA（Single-Page Application）",{"type":173,"tag":197,"props":657,"children":658},{},[],{"type":179,"value":660},"\n• 构建时：打出一个入口 HTML + 多个 JS/CSS chunk。",{"type":173,"tag":197,"props":662,"children":663},{},[],{"type":179,"value":665},"\n• 首次请求：服务器只回 1 个极简 HTML（Root DIV）+ JS 引用。",{"type":173,"tag":197,"props":667,"children":668},{},[],{"type":179,"value":670},"\n• 运行时：浏览器下载 JS → ",{"type":173,"tag":672,"props":673,"children":675},"code",{"className":674},[],[676],{"type":179,"value":677},"createApp()",{"type":179,"value":679}," 挂载 → 客户端路由 (history/hash) 劫持导航、动态 ",{"type":173,"tag":672,"props":681,"children":683},{"className":682},[],[684],{"type":179,"value":685},"fetch",{"type":179,"value":687}," 数据并重新 patch DOM。",{"type":173,"tag":197,"props":689,"children":690},{},[],{"type":179,"value":692},"\n• 关键点：所有页面切换发生在浏览器；服务器只做静态文件或 API。",{"type":173,"tag":191,"props":694,"children":695},{},[696,698,701,703,709,711,714,716,722,724,727,729,735,737,740],{"type":179,"value":697},"SSR（Server-Side Rendering）",{"type":173,"tag":197,"props":699,"children":700},{},[],{"type":179,"value":702},"\n• 每次 HTTP 请求：Node/Nitro 等在服务器内执行 ",{"type":173,"tag":672,"props":704,"children":706},{"className":705},[],[707],{"type":179,"value":708},"renderToString()",{"type":179,"value":710},"（或 Streaming）→ 生成完整 HTML（含首屏数据）返回。",{"type":173,"tag":197,"props":712,"children":713},{},[],{"type":179,"value":715},"\n• HTML 内嵌序列化的初始状态 (",{"type":173,"tag":672,"props":717,"children":719},{"className":718},[],[720],{"type":179,"value":721},"window.__NUXT__/__INITIAL_STATE__",{"type":179,"value":723},")。",{"type":173,"tag":197,"props":725,"children":726},{},[],{"type":179,"value":728},"\n• 浏览器下载同一套 JS → ",{"type":173,"tag":672,"props":730,"children":732},{"className":731},[],[733],{"type":179,"value":734},"hydrate()",{"type":179,"value":736}," 复用已有 DOM，事件监听接管；之后退化为普通 SPA。",{"type":173,"tag":197,"props":738,"children":739},{},[],{"type":179,"value":741},"\n• 关键点：首屏由服务器算好，SEO 与 FCP 友好，服务器需常驻、承受 QPS。",{"type":173,"tag":191,"props":743,"children":744},{},[745,747,750,752,755,757,760,762,765],{"type":179,"value":746},"SSG（Static Site Generation）",{"type":173,"tag":197,"props":748,"children":749},{},[],{"type":179,"value":751},"\n• 构建时：跑一次 SSR 渲染，但针对路由列表批量离线生成 HTML + JSON payload，写入 /dist。",{"type":173,"tag":197,"props":753,"children":754},{},[],{"type":179,"value":756},"\n• 部署时：产物是纯静态文件，可直接挂 CDN，0 服务器成本。",{"type":173,"tag":197,"props":758,"children":759},{},[],{"type":179,"value":761},"\n• 运行时：用户拿到静态 HTML；JS 启动后再做客户端导航。",{"type":173,"tag":197,"props":763,"children":764},{},[],{"type":179,"value":766},"\n• 关键点：不可变内容=最佳；有变动需整站或指定路由重新 build。",{"type":173,"tag":191,"props":768,"children":769},{},[770,772,775,777,780,782,785,787,793,795,798],{"type":179,"value":771},"ISR（Incremental Static Regeneration）",{"type":173,"tag":197,"props":773,"children":774},{},[],{"type":179,"value":776},"\n• 构建时：与 SSG 相同，先产出静态文件。",{"type":173,"tag":197,"props":778,"children":779},{},[],{"type":179,"value":781},"\n• 线上流量：CDN 命中现有 HTML 即直接返回。",{"type":173,"tag":197,"props":783,"children":784},{},[],{"type":179,"value":786},"\n• 失效策略：设定 ",{"type":173,"tag":672,"props":788,"children":790},{"className":789},[],[791],{"type":179,"value":792},"revalidate",{"type":179,"value":794},"（TTL）或 webhook。过期命中时，边缘或原点触发后台“再跑一次 SSR”→ 新文件写回对象存储/CDN，原请求仍返回旧版，下一请求拿到新版；更新原子切换。",{"type":173,"tag":197,"props":796,"children":797},{},[],{"type":179,"value":799},"\n• 关键点：静态性能 + 可增量更新；实现需锁定并发、保证写文件原子性，框架层（Nuxt Nitro/Vercel ISR）已封装。",{"type":173,"tag":626,"props":801,"children":803},{"id":802},"nuxt-的一些基础概念",[804],{"type":179,"value":805},"Nuxt 的一些基础概念？",{"type":173,"tag":187,"props":807,"children":808},{},[809,853,905,979,1029,1097,1176],{"type":173,"tag":191,"props":810,"children":811},{},[812,814,817,819,825,827,830,832,835,837,843,845,851],{"type":179,"value":813},"pages",{"type":173,"tag":197,"props":815,"children":816},{},[],{"type":179,"value":818},"\n• 约定式路由生成器：文件树 → ",{"type":173,"tag":672,"props":820,"children":822},{"className":821},[],[823],{"type":179,"value":824},"vue-router",{"type":179,"value":826}," 配置（基于文件名 / 文件夹名 ➜ 动态段、可选段、catch-all）。",{"type":173,"tag":197,"props":828,"children":829},{},[],{"type":179,"value":831},"\n• 解析时机：Dev server 启动 & build 时扫描；支持 HMR 增量更新。",{"type":173,"tag":197,"props":833,"children":834},{},[],{"type":179,"value":836},"\n• 输出：每个 ",{"type":173,"tag":672,"props":838,"children":840},{"className":839},[],[841],{"type":179,"value":842},".vue",{"type":179,"value":844}," → 同名异步 chunk，路由懒加载。",{"type":173,"tag":672,"props":846,"children":848},{"className":847},[],[849],{"type":179,"value":850},"definePageMeta",{"type":179,"value":852}," 可注入 head、middleware 等元数据。",{"type":173,"tag":191,"props":854,"children":855},{},[856,858,861,863,869,871,874,876,882,884,890,892,895,897,903],{"type":179,"value":857},"layouts",{"type":173,"tag":197,"props":859,"children":860},{},[],{"type":179,"value":862},"\n• 页面骨架复用层；默认 ",{"type":173,"tag":672,"props":864,"children":866},{"className":865},[],[867],{"type":179,"value":868},"_default.vue",{"type":179,"value":870},"。",{"type":173,"tag":197,"props":872,"children":873},{},[],{"type":179,"value":875},"\n• pages 通过 ",{"type":173,"tag":672,"props":877,"children":879},{"className":878},[],[880],{"type":179,"value":881},"definePageMeta({ layout: 'xxx' })",{"type":179,"value":883}," 或 ",{"type":173,"tag":672,"props":885,"children":887},{"className":886},[],[888],{"type":179,"value":889},"\u003Cscript setup>export default{ layout:'xxx'}",{"type":179,"value":891}," 选择。",{"type":173,"tag":197,"props":893,"children":894},{},[],{"type":179,"value":896},"\n• 每次路由切换仅替换 ",{"type":173,"tag":672,"props":898,"children":900},{"className":899},[],[901],{"type":179,"value":902},"\u003CNuxtPage/>",{"type":179,"value":904}," 插槽，保留布局状态；可用于持久化侧边栏、导航动画。",{"type":173,"tag":191,"props":906,"children":907},{},[908,910,913,915,921,923,929,931,937,939,945,946,949,951,957,959,965,966,969,971,977],{"type":179,"value":909},"components",{"type":173,"tag":197,"props":911,"children":912},{},[],{"type":179,"value":914},"\n• 自动导入（",{"type":173,"tag":672,"props":916,"children":918},{"className":917},[],[919],{"type":179,"value":920},"@nuxt/components",{"type":179,"value":922},"）：按目录名生成组件 name，编译期做 ",{"type":173,"tag":672,"props":924,"children":926},{"className":925},[],[927],{"type":179,"value":928},"babel",{"type":179,"value":930}," 转换 → 静态分析 + tree-shake；无需 ",{"type":173,"tag":672,"props":932,"children":934},{"className":933},[],[935],{"type":179,"value":936},"import",{"type":179,"value":938},"/",{"type":173,"tag":672,"props":940,"children":942},{"className":941},[],[943],{"type":179,"value":944},"registration",{"type":179,"value":870},{"type":173,"tag":197,"props":947,"children":948},{},[],{"type":179,"value":950},"\n• 细分子目录会映射为命名空间，如 ",{"type":173,"tag":672,"props":952,"children":954},{"className":953},[],[955],{"type":179,"value":956},"components/ui/Button.vue",{"type":179,"value":958}," → ",{"type":173,"tag":672,"props":960,"children":962},{"className":961},[],[963],{"type":179,"value":964},"\u003CUiButton/>",{"type":179,"value":870},{"type":173,"tag":197,"props":967,"children":968},{},[],{"type":179,"value":970},"\n• 运行时走异步加载（可 ",{"type":173,"tag":672,"props":972,"children":974},{"className":973},[],[975],{"type":179,"value":976},"lazy: true",{"type":179,"value":978}," 强制）。",{"type":173,"tag":191,"props":980,"children":981},{},[982,984,987,989,995,996,1002,1003,1006,1008,1014,1016,1019,1021,1027],{"type":179,"value":983},"assets",{"type":173,"tag":197,"props":985,"children":986},{},[],{"type":179,"value":988},"\n• 参与构建链：SASS/LESS/PostCSS 被 loader 处理，图片可经 ",{"type":173,"tag":672,"props":990,"children":992},{"className":991},[],[993],{"type":179,"value":994},"vite-imagetools",{"type":179,"value":938},{"type":173,"tag":672,"props":997,"children":999},{"className":998},[],[1000],{"type":179,"value":1001},"url-loader",{"type":179,"value":870},{"type":173,"tag":197,"props":1004,"children":1005},{},[],{"type":179,"value":1007},"\n• 引用方式：通过 ",{"type":173,"tag":672,"props":1009,"children":1011},{"className":1010},[],[1012],{"type":179,"value":1013},"@/assets/xxx",{"type":179,"value":1015}," 或相对路径导入；会被哈希命名并放入 build 输出。",{"type":173,"tag":197,"props":1017,"children":1018},{},[],{"type":179,"value":1020},"\n• 与 ",{"type":173,"tag":672,"props":1022,"children":1024},{"className":1023},[],[1025],{"type":179,"value":1026},"public/",{"type":179,"value":1028}," 区别：后者原样复制，不经打包。",{"type":173,"tag":191,"props":1030,"children":1031},{},[1032,1034,1037,1039,1045,1047,1053,1055,1058,1060,1066,1068,1074,1076,1082,1084,1087,1089,1095],{"type":179,"value":1033},"plugins",{"type":173,"tag":197,"props":1035,"children":1036},{},[],{"type":179,"value":1038},"\n• 作用：在根应用实例创建前执行，注入全局依赖（如 ",{"type":173,"tag":672,"props":1040,"children":1042},{"className":1041},[],[1043],{"type":179,"value":1044},"axios",{"type":179,"value":1046},", ",{"type":173,"tag":672,"props":1048,"children":1050},{"className":1049},[],[1051],{"type":179,"value":1052},"i18n",{"type":179,"value":1054},"）或注册指令/过滤器。",{"type":173,"tag":197,"props":1056,"children":1057},{},[],{"type":179,"value":1059},"\n• 书写：",{"type":173,"tag":672,"props":1061,"children":1063},{"className":1062},[],[1064],{"type":179,"value":1065},"defineNuxtPlugin(ctx => { ctx.provide('xxx', …) })",{"type":179,"value":1067},"；支持 ",{"type":173,"tag":672,"props":1069,"children":1071},{"className":1070},[],[1072],{"type":179,"value":1073},"mode: 'client' | 'server'",{"type":179,"value":1075}," 前缀文件名或 ",{"type":173,"tag":672,"props":1077,"children":1079},{"className":1078},[],[1080],{"type":179,"value":1081},"export const ssr = false",{"type":179,"value":1083}," 控制端。",{"type":173,"tag":197,"props":1085,"children":1086},{},[],{"type":179,"value":1088},"\n• 插入顺序 = 文件系统排序，可通过 ",{"type":173,"tag":672,"props":1090,"children":1092},{"className":1091},[],[1093],{"type":179,"value":1094},"order",{"type":179,"value":1096}," 显式配置。",{"type":173,"tag":191,"props":1098,"children":1099},{},[1100,1102,1105,1107,1113,1114,1117,1119,1125,1127,1133,1134,1137,1139,1142,1144,1150,1152,1158,1159,1164,1166,1169,1171,1174],{"type":179,"value":1101},"middleware",{"type":173,"tag":197,"props":1103,"children":1104},{},[],{"type":179,"value":1106},"\n• 路由生命周期钩子（server & client 共用）：",{"type":173,"tag":672,"props":1108,"children":1110},{"className":1109},[],[1111],{"type":179,"value":1112},"defineNuxtRouteMiddleware((to, from) => { ... })",{"type":179,"value":870},{"type":173,"tag":197,"props":1115,"children":1116},{},[],{"type":179,"value":1118},"\n• 执行时机：页面组件解析前；可返回 ",{"type":173,"tag":672,"props":1120,"children":1122},{"className":1121},[],[1123],{"type":179,"value":1124},"navigateTo",{"type":179,"value":1126}," / ",{"type":173,"tag":672,"props":1128,"children":1130},{"className":1129},[],[1131],{"type":179,"value":1132},"abortNavigation",{"type":179,"value":870},{"type":173,"tag":197,"props":1135,"children":1136},{},[],{"type":179,"value":1138},"\n• 作用域：",{"type":173,"tag":197,"props":1140,"children":1141},{},[],{"type":179,"value":1143},"\n– 全局：放在 ",{"type":173,"tag":672,"props":1145,"children":1147},{"className":1146},[],[1148],{"type":179,"value":1149},"middleware/",{"type":179,"value":1151}," 并在 ",{"type":173,"tag":672,"props":1153,"children":1155},{"className":1154},[],[1156],{"type":179,"value":1157},"nuxt.config",{"type":179,"value":883},{"type":173,"tag":672,"props":1160,"children":1162},{"className":1161},[],[1163],{"type":179,"value":850},{"type":179,"value":1165}," 引用。",{"type":173,"tag":197,"props":1167,"children":1168},{},[],{"type":179,"value":1170},"\n– 匿名：直接写在 page 文件内。",{"type":173,"tag":197,"props":1172,"children":1173},{},[],{"type":179,"value":1175},"\n• SSR 时在 Nitro 中先跑一次；客户端路由跳转再跑一次（保障同构）。",{"type":173,"tag":191,"props":1177,"children":1178},{},[1179,1181,1184,1186,1189,1191,1197,1199,1205,1207,1210,1212,1218,1219,1225,1226,1232,1234,1237],{"type":179,"value":1180},"modules",{"type":173,"tag":197,"props":1182,"children":1183},{},[],{"type":179,"value":1185},"\n• 构建期 & 运行期的可插拔扩展（等价 Nuxt 的“Webpack/Vite+Nitro”双栈插件）。",{"type":173,"tag":197,"props":1187,"children":1188},{},[],{"type":179,"value":1190},"\n• 定义：",{"type":173,"tag":672,"props":1192,"children":1194},{"className":1193},[],[1195],{"type":179,"value":1196},"export default defineNuxtModule({ hooks, vite, nitro, … })",{"type":179,"value":1198},"；可修改 ",{"type":173,"tag":672,"props":1200,"children":1202},{"className":1201},[],[1203],{"type":179,"value":1204},"nuxt.options",{"type":179,"value":1206},"、注入 runtime code、注册 hooks。",{"type":173,"tag":197,"props":1208,"children":1209},{},[],{"type":179,"value":1211},"\n• 生态：",{"type":173,"tag":672,"props":1213,"children":1215},{"className":1214},[],[1216],{"type":179,"value":1217},"@nuxt/image",{"type":179,"value":1046},{"type":173,"tag":672,"props":1220,"children":1222},{"className":1221},[],[1223],{"type":179,"value":1224},"@pinia/nuxt",{"type":179,"value":1046},{"type":173,"tag":672,"props":1227,"children":1229},{"className":1228},[],[1230],{"type":179,"value":1231},"nuxt-auth",{"type":179,"value":1233}," 等。",{"type":173,"tag":197,"props":1235,"children":1236},{},[],{"type":179,"value":1238},"\n• 与插件区别：module 以“修改框架配置”为主，plugin 以“运行时注入”为主；module 可自动安装 plugin。",{"type":173,"tag":181,"props":1240,"children":1241},{},[1242,1244,1249,1251,1257,1258,1264,1265,1270,1272,1277,1279,1284,1286,1291,1293,1298,1300,1305],{"type":179,"value":1243},"执行顺序（从启动到渲染）：",{"type":173,"tag":672,"props":1245,"children":1247},{"className":1246},[],[1248],{"type":179,"value":1180},{"type":179,"value":1250}," 调整配置 → 构建 ",{"type":173,"tag":672,"props":1252,"children":1254},{"className":1253},[],[1255],{"type":179,"value":1256},"vite",{"type":179,"value":938},{"type":173,"tag":672,"props":1259,"children":1261},{"className":1260},[],[1262],{"type":179,"value":1263},"webpack",{"type":179,"value":958},{"type":173,"tag":672,"props":1266,"children":1268},{"className":1267},[],[1269],{"type":179,"value":1033},{"type":179,"value":1271}," 初始化 → ",{"type":173,"tag":672,"props":1273,"children":1275},{"className":1274},[],[1276],{"type":179,"value":857},{"type":179,"value":1278}," 渲染框架 → ",{"type":173,"tag":672,"props":1280,"children":1282},{"className":1281},[],[1283],{"type":179,"value":1101},{"type":179,"value":1285}," 验权/数据预取 → ",{"type":173,"tag":672,"props":1287,"children":1289},{"className":1288},[],[1290],{"type":179,"value":813},{"type":179,"value":1292}," 渲染 → ",{"type":173,"tag":672,"props":1294,"children":1296},{"className":1295},[],[1297],{"type":179,"value":909},{"type":179,"value":1299}," 拼装视图 → ",{"type":173,"tag":672,"props":1301,"children":1303},{"className":1302},[],[1304],{"type":179,"value":983},{"type":179,"value":1306}," 与静态文件注入页面。",{"type":173,"tag":626,"props":1308,"children":1310},{"id":1309},"基于文件系统自动生成路由的规则",[1311],{"type":179,"value":1312},"基于文件系统自动生成路由的规则？",{"type":173,"tag":187,"props":1314,"children":1315},{},[1316,1406,1516,1617,1694,1718,1879,1922,1965,2023,2073,2112],{"type":173,"tag":191,"props":1317,"children":1318},{},[1319,1321,1324,1326,1332,1334,1339,1341,1347,1349,1354,1356,1362,1363,1369,1370,1376,1378,1381,1383,1389,1391,1396,1398,1404],{"type":179,"value":1320},"扫描入口",{"type":173,"tag":197,"props":1322,"children":1323},{},[],{"type":179,"value":1325},"\n• dev 启动或 ",{"type":173,"tag":672,"props":1327,"children":1329},{"className":1328},[],[1330],{"type":179,"value":1331},"nuxi build",{"type":179,"value":1333}," 时，Nuxt Kit 的 ",{"type":173,"tag":672,"props":1335,"children":1337},{"className":1336},[],[1338],{"type":179,"value":813},{"type":179,"value":1340}," 模块递归遍历 ",{"type":173,"tag":672,"props":1342,"children":1344},{"className":1343},[],[1345],{"type":179,"value":1346},"./pages",{"type":179,"value":1348}," 目录，收集所有 ",{"type":173,"tag":672,"props":1350,"children":1352},{"className":1351},[],[1353],{"type":179,"value":842},{"type":179,"value":1355},"、",{"type":173,"tag":672,"props":1357,"children":1359},{"className":1358},[],[1360],{"type":179,"value":1361},".md",{"type":179,"value":1355},{"type":173,"tag":672,"props":1364,"children":1366},{"className":1365},[],[1367],{"type":179,"value":1368},".ts",{"type":179,"value":938},{"type":173,"tag":672,"props":1371,"children":1373},{"className":1372},[],[1374],{"type":179,"value":1375},".js",{"type":179,"value":1377},"（export default 组件）文件。",{"type":173,"tag":197,"props":1379,"children":1380},{},[],{"type":179,"value":1382},"\n• 生成 ",{"type":173,"tag":672,"props":1384,"children":1386},{"className":1385},[],[1387],{"type":179,"value":1388},".nuxt/pages.mjs",{"type":179,"value":1390},"，在 Vite Server/SSR 构建阶段被 ",{"type":173,"tag":672,"props":1392,"children":1394},{"className":1393},[],[1395],{"type":179,"value":824},{"type":179,"value":1397}," 动态 ",{"type":173,"tag":672,"props":1399,"children":1401},{"className":1400},[],[1402],{"type":179,"value":1403},"import()",{"type":179,"value":1405}," 使用。",{"type":173,"tag":191,"props":1407,"children":1408},{},[1409,1411,1414,1416],{"type":179,"value":1410},"基础映射规则",{"type":173,"tag":197,"props":1412,"children":1413},{},[],{"type":179,"value":1415},"\n• 文件 → 路径：",{"type":173,"tag":1417,"props":1418,"children":1419},"ul",{},[1420,1436,1452,1482,1499],{"type":173,"tag":191,"props":1421,"children":1422},{},[1423,1429,1431],{"type":173,"tag":672,"props":1424,"children":1426},{"className":1425},[],[1427],{"type":179,"value":1428},"pages/index.vue",{"type":179,"value":1430},"   ⇢ ",{"type":173,"tag":672,"props":1432,"children":1434},{"className":1433},[],[1435],{"type":179,"value":938},{"type":173,"tag":191,"props":1437,"children":1438},{},[1439,1445,1446],{"type":173,"tag":672,"props":1440,"children":1442},{"className":1441},[],[1443],{"type":179,"value":1444},"pages/about.vue",{"type":179,"value":1430},{"type":173,"tag":672,"props":1447,"children":1449},{"className":1448},[],[1450],{"type":179,"value":1451},"/about",{"type":173,"tag":191,"props":1453,"children":1454},{},[1455,1461,1463,1469,1472,1474,1480],{"type":173,"tag":672,"props":1456,"children":1458},{"className":1457},[],[1459],{"type":179,"value":1460},"pages/foo/bar.vue",{"type":179,"value":1462},"  ⇢ ",{"type":173,"tag":672,"props":1464,"children":1466},{"className":1465},[],[1467],{"type":179,"value":1468},"/foo/bar",{"type":173,"tag":197,"props":1470,"children":1471},{},[],{"type":179,"value":1473},"\n• 目录 → 嵌套路由：目录名只是路径片段；同层 ",{"type":173,"tag":672,"props":1475,"children":1477},{"className":1476},[],[1478],{"type":179,"value":1479},"index.vue",{"type":179,"value":1481}," 代表“该段根”。",{"type":173,"tag":191,"props":1483,"children":1484},{},[1485,1491,1493],{"type":173,"tag":672,"props":1486,"children":1488},{"className":1487},[],[1489],{"type":179,"value":1490},"pages/blog/index.vue",{"type":179,"value":1492}," ⇢ ",{"type":173,"tag":672,"props":1494,"children":1496},{"className":1495},[],[1497],{"type":179,"value":1498},"/blog",{"type":173,"tag":191,"props":1500,"children":1501},{},[1502,1508,1510],{"type":173,"tag":672,"props":1503,"children":1505},{"className":1504},[],[1506],{"type":179,"value":1507},"pages/blog/post.vue",{"type":179,"value":1509},"  ⇢ ",{"type":173,"tag":672,"props":1511,"children":1513},{"className":1512},[],[1514],{"type":179,"value":1515},"/blog/post",{"type":173,"tag":191,"props":1517,"children":1518},{},[1519,1521,1524,1526,1532,1534,1540,1542,1545,1546,1552,1553,1559,1561,1564,1565,1571,1572,1578,1580,1583,1584,1590,1592,1598,1599,1602,1604,1610,1611],{"type":179,"value":1520},"动态片段（Dynamic Segment）",{"type":173,"tag":197,"props":1522,"children":1523},{},[],{"type":179,"value":1525},"\n• ",{"type":173,"tag":672,"props":1527,"children":1529},{"className":1528},[],[1530],{"type":179,"value":1531},"[param].vue",{"type":179,"value":1533}," → ",{"type":173,"tag":672,"props":1535,"children":1537},{"className":1536},[],[1538],{"type":179,"value":1539},"/:param",{"type":179,"value":1541},"（必填）",{"type":173,"tag":197,"props":1543,"children":1544},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1547,"children":1549},{"className":1548},[],[1550],{"type":179,"value":1551},"[...param].vue",{"type":179,"value":958},{"type":173,"tag":672,"props":1554,"children":1556},{"className":1555},[],[1557],{"type":179,"value":1558},"/:param(.*)",{"type":179,"value":1560}," （catch-all，至少 1 段）",{"type":173,"tag":197,"props":1562,"children":1563},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1566,"children":1568},{"className":1567},[],[1569],{"type":179,"value":1570},"[[...param]].vue",{"type":179,"value":958},{"type":173,"tag":672,"props":1573,"children":1575},{"className":1574},[],[1576],{"type":179,"value":1577},"/:param(.*)?",{"type":179,"value":1579},"（可选 catch-all，0-∞ 段）",{"type":173,"tag":197,"props":1581,"children":1582},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1585,"children":1587},{"className":1586},[],[1588],{"type":179,"value":1589},"[param]-details.vue",{"type":179,"value":1591}," 等混合写法支持 RegExp 兼容：",{"type":173,"tag":672,"props":1593,"children":1595},{"className":1594},[],[1596],{"type":179,"value":1597},"/:param(.*)-details",{"type":179,"value":870},{"type":173,"tag":197,"props":1600,"children":1601},{},[],{"type":179,"value":1603},"\n• 多级动态：",{"type":173,"tag":672,"props":1605,"children":1607},{"className":1606},[],[1608],{"type":179,"value":1609},"pages/user-[group]/[id].vue",{"type":179,"value":1492},{"type":173,"tag":672,"props":1612,"children":1614},{"className":1613},[],[1615],{"type":179,"value":1616},"/user-:group/:id",{"type":173,"tag":191,"props":1618,"children":1619},{},[1620,1622,1625,1626,1632,1634,1640,1643,1644,1650,1652,1657,1659,1664,1666,1669,1670,1676,1678,1684,1686,1692],{"type":179,"value":1621},"可选动态片段（Optional Segment，Nuxt 3 专属）",{"type":173,"tag":197,"props":1623,"children":1624},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1627,"children":1629},{"className":1628},[],[1630],{"type":179,"value":1631},"pages/blog/[slug].vue",{"type":179,"value":1633}," ⇢ ",{"type":173,"tag":672,"props":1635,"children":1637},{"className":1636},[],[1638],{"type":179,"value":1639},"/blog/:slug",{"type":173,"tag":197,"props":1641,"children":1642},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1645,"children":1647},{"className":1646},[],[1648],{"type":179,"value":1649},"pages/blog/[slug].index.vue",{"type":179,"value":1651}," 可同时持有 ",{"type":173,"tag":672,"props":1653,"children":1655},{"className":1654},[],[1656],{"type":179,"value":1498},{"type":179,"value":1658}," 和 ",{"type":173,"tag":672,"props":1660,"children":1662},{"className":1661},[],[1663],{"type":179,"value":1639},{"type":179,"value":1665},"，利用目录级 optional。",{"type":173,"tag":197,"props":1667,"children":1668},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1671,"children":1673},{"className":1672},[],[1674],{"type":179,"value":1675},"[param]?",{"type":179,"value":1677}," 语法暂不支持，需用双层目录 ",{"type":173,"tag":672,"props":1679,"children":1681},{"className":1680},[],[1682],{"type":179,"value":1683},"blog/[slug]/index.vue",{"type":179,"value":1685}," + ",{"type":173,"tag":672,"props":1687,"children":1689},{"className":1688},[],[1690],{"type":179,"value":1691},"blog/index.vue",{"type":179,"value":1693}," 实现。",{"type":173,"tag":191,"props":1695,"children":1696},{},[1697,1699,1705,1706,1712,1713,1716],{"type":179,"value":1698},"路由分组\n• 以圆括号包裹的目录不会出现在 URL，仅用于组织文件：",{"type":173,"tag":672,"props":1700,"children":1702},{"className":1701},[],[1703],{"type":179,"value":1704},"pages/(auth)/login.vue",{"type":179,"value":1492},{"type":173,"tag":672,"props":1707,"children":1709},{"className":1708},[],[1710],{"type":179,"value":1711},"/login",{"type":179,"value":870},{"type":173,"tag":197,"props":1714,"children":1715},{},[],{"type":179,"value":1717},"\n• 生成的 route name 也会排除括号部分。",{"type":173,"tag":191,"props":1719,"children":1720},{},[1721,1723,1726,1728,1734,1736,1742,1744,1750,1752,1755,1757,1763,1765],{"type":179,"value":1722},"路由命名策略",{"type":173,"tag":197,"props":1724,"children":1725},{},[],{"type":179,"value":1727},"\n• 由路径片段用 ",{"type":173,"tag":672,"props":1729,"children":1731},{"className":1730},[],[1732],{"type":179,"value":1733},"-",{"type":179,"value":1735}," 拼接：",{"type":173,"tag":672,"props":1737,"children":1739},{"className":1738},[],[1740],{"type":179,"value":1741},"pages/users/[id]/edit.vue",{"type":179,"value":1743}," → name ",{"type":173,"tag":672,"props":1745,"children":1747},{"className":1746},[],[1748],{"type":179,"value":1749},"users-id-edit",{"type":179,"value":1751},".",{"type":173,"tag":197,"props":1753,"children":1754},{},[],{"type":179,"value":1756},"\n• 可用 ",{"type":173,"tag":672,"props":1758,"children":1760},{"className":1759},[],[1761],{"type":179,"value":1762},"\u003CRouteName>",{"type":179,"value":1764}," 宏覆盖：",{"type":173,"tag":1766,"props":1767,"children":1771},"pre",{"className":1768,"code":1769,"language":1770,"meta":166,"style":166},"language-vue shiki shiki-themes material-theme-lighter github-light github-dark monokai","\u003Cscript setup>\ndefinePageMeta({ name: 'user-edit' })\n\u003C/script>\n","vue",[1772],{"type":173,"tag":672,"props":1773,"children":1774},{"__ignoreMap":166},[1775,1804,1862],{"type":173,"tag":1776,"props":1777,"children":1780},"span",{"class":1778,"line":1779},"line",1,[1781,1787,1793,1799],{"type":173,"tag":1776,"props":1782,"children":1784},{"style":1783},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1785],{"type":179,"value":1786},"\u003C",{"type":173,"tag":1776,"props":1788,"children":1790},{"style":1789},"--shiki-light:#E53935;--shiki-default:#22863A;--shiki-dark:#85E89D;--shiki-sepia:#F92672",[1791],{"type":179,"value":1792},"script",{"type":173,"tag":1776,"props":1794,"children":1796},{"style":1795},"--shiki-light:#9C3EDA;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[1797],{"type":179,"value":1798}," setup",{"type":173,"tag":1776,"props":1800,"children":1801},{"style":1783},[1802],{"type":179,"value":1803},">\n",{"type":173,"tag":1776,"props":1805,"children":1807},{"class":1778,"line":1806},2,[1808,1813,1819,1824,1830,1835,1841,1847,1852,1857],{"type":173,"tag":1776,"props":1809,"children":1811},{"style":1810},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[1812],{"type":179,"value":850},{"type":173,"tag":1776,"props":1814,"children":1816},{"style":1815},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1817],{"type":179,"value":1818},"(",{"type":173,"tag":1776,"props":1820,"children":1821},{"style":1783},[1822],{"type":179,"value":1823},"{",{"type":173,"tag":1776,"props":1825,"children":1827},{"style":1826},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1828],{"type":179,"value":1829}," name",{"type":173,"tag":1776,"props":1831,"children":1832},{"style":1783},[1833],{"type":179,"value":1834},":",{"type":173,"tag":1776,"props":1836,"children":1838},{"style":1837},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[1839],{"type":179,"value":1840}," '",{"type":173,"tag":1776,"props":1842,"children":1844},{"style":1843},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[1845],{"type":179,"value":1846},"user-edit",{"type":173,"tag":1776,"props":1848,"children":1849},{"style":1837},[1850],{"type":179,"value":1851},"'",{"type":173,"tag":1776,"props":1853,"children":1854},{"style":1783},[1855],{"type":179,"value":1856}," }",{"type":173,"tag":1776,"props":1858,"children":1859},{"style":1815},[1860],{"type":179,"value":1861},")\n",{"type":173,"tag":1776,"props":1863,"children":1865},{"class":1778,"line":1864},3,[1866,1871,1875],{"type":173,"tag":1776,"props":1867,"children":1868},{"style":1783},[1869],{"type":179,"value":1870},"\u003C/",{"type":173,"tag":1776,"props":1872,"children":1873},{"style":1789},[1874],{"type":179,"value":1792},{"type":173,"tag":1776,"props":1876,"children":1877},{"style":1783},[1878],{"type":179,"value":1803},{"type":173,"tag":191,"props":1880,"children":1881},{},[1882,1884,1887,1889,1892,1894,1897,1899,1905,1907,1913,1915,1921],{"type":179,"value":1883},"生成顺序 & 匹配优先级（关键保证无手写冲突）",{"type":173,"tag":197,"props":1885,"children":1886},{},[],{"type":179,"value":1888},"\n排序函数大致遵循：",{"type":173,"tag":197,"props":1890,"children":1891},{},[],{"type":179,"value":1893},"\n① 静态路径长度降序 → ② 动态段个数升序 → ③ catch-all 最后。",{"type":173,"tag":197,"props":1895,"children":1896},{},[],{"type":179,"value":1898},"\n因此先匹配 ",{"type":173,"tag":672,"props":1900,"children":1902},{"className":1901},[],[1903],{"type":179,"value":1904},"/users/create",{"type":179,"value":1906},"，后匹配 ",{"type":173,"tag":672,"props":1908,"children":1910},{"className":1909},[],[1911],{"type":179,"value":1912},"/users/[id]",{"type":179,"value":1914},"，最后 ",{"type":173,"tag":672,"props":1916,"children":1918},{"className":1917},[],[1919],{"type":179,"value":1920},"/*",{"type":179,"value":1751},{"type":173,"tag":191,"props":1923,"children":1924},{},[1925,1927,1930,1932,1938,1940,1946,1947,1950,1951,1956,1957,1963],{"type":179,"value":1926},"多扩展名支持",{"type":173,"tag":197,"props":1928,"children":1929},{},[],{"type":179,"value":1931},"\n• MDX / Markdown：依赖 ",{"type":173,"tag":672,"props":1933,"children":1935},{"className":1934},[],[1936],{"type":179,"value":1937},"@nuxt/content",{"type":179,"value":1939}," 模块注册 ",{"type":173,"tag":672,"props":1941,"children":1943},{"className":1942},[],[1944],{"type":179,"value":1945},"pages-parser",{"type":179,"value":870},{"type":173,"tag":197,"props":1948,"children":1949},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":1952,"children":1954},{"className":1953},[],[1955],{"type":179,"value":1368},{"type":179,"value":1126},{"type":173,"tag":672,"props":1958,"children":1960},{"className":1959},[],[1961],{"type":179,"value":1962},".jsx",{"type":179,"value":1964}," 文件只要默认导出组件即可。",{"type":173,"tag":191,"props":1966,"children":1967},{},[1968,1970,1976,1978,1981,1983,1989,1991,1996,1998,2003,2004,2010,2011,2017,2018,2021],{"type":179,"value":1969},"与 ",{"type":173,"tag":672,"props":1971,"children":1973},{"className":1972},[],[1974],{"type":179,"value":1975},"definePageMeta()",{"type":179,"value":1977}," 的关系",{"type":173,"tag":197,"props":1979,"children":1980},{},[],{"type":179,"value":1982},"\n• 生成完 route record 后，Nuxt 在运行时将 ",{"type":173,"tag":672,"props":1984,"children":1986},{"className":1985},[],[1987],{"type":179,"value":1988},"meta",{"type":179,"value":1990}," 合并自页面的 ",{"type":173,"tag":672,"props":1992,"children":1994},{"className":1993},[],[1995],{"type":179,"value":1975},{"type":179,"value":1997}," 输出，如 ",{"type":173,"tag":672,"props":1999,"children":2001},{"className":2000},[],[2002],{"type":179,"value":1101},{"type":179,"value":1046},{"type":173,"tag":672,"props":2005,"children":2007},{"className":2006},[],[2008],{"type":179,"value":2009},"layout",{"type":179,"value":1046},{"type":173,"tag":672,"props":2012,"children":2014},{"className":2013},[],[2015],{"type":179,"value":2016},"pageTransition",{"type":179,"value":1233},{"type":173,"tag":197,"props":2019,"children":2020},{},[],{"type":179,"value":2022},"\n• 这一步发生于服务端、客户端首次解析路由前。",{"type":173,"tag":191,"props":2024,"children":2025},{},[2026,2028,2031,2033,2039,2041,2047,2048,2051,2053,2059,2060,2063,2065,2071],{"type":179,"value":2027},"自定义/高级场景",{"type":173,"tag":197,"props":2029,"children":2030},{},[],{"type":179,"value":2032},"\n• 关闭文件系统路由：",{"type":173,"tag":672,"props":2034,"children":2036},{"className":2035},[],[2037],{"type":179,"value":2038},"router: { autoRoutes: false }",{"type":179,"value":2040}," → 完全手写 ",{"type":173,"tag":672,"props":2042,"children":2044},{"className":2043},[],[2045],{"type":179,"value":2046},"app/router.options.ts",{"type":179,"value":870},{"type":173,"tag":197,"props":2049,"children":2050},{},[],{"type":179,"value":2052},"\n• 滤掉测试文件：",{"type":173,"tag":672,"props":2054,"children":2056},{"className":2055},[],[2057],{"type":179,"value":2058},"routeRules: [{ path: '/**/__tests__/**', skip: true }]",{"type":179,"value":870},{"type":173,"tag":197,"props":2061,"children":2062},{},[],{"type":179,"value":2064},"\n• 动态导入懒加载：Nuxt 默认按路由分割生成异步 chunk；可通过 ",{"type":173,"tag":672,"props":2066,"children":2068},{"className":2067},[],[2069],{"type":179,"value":2070},"definePageMeta({ lazy: true })",{"type":179,"value":2072}," 关闭首屏预加载。",{"type":173,"tag":191,"props":2074,"children":2075},{},[2076,2078,2081,2083,2089,2091,2096,2098,2103,2105,2110],{"type":179,"value":2077},"HMR & 增量更新",{"type":173,"tag":197,"props":2079,"children":2080},{},[],{"type":179,"value":2082},"\n• dev 模式下 ",{"type":173,"tag":672,"props":2084,"children":2086},{"className":2085},[],[2087],{"type":179,"value":2088},"chokidar",{"type":179,"value":2090}," 监听 ",{"type":173,"tag":672,"props":2092,"children":2094},{"className":2093},[],[2095],{"type":179,"value":813},{"type":179,"value":2097}," 目录，增删改会触发 pages tree diff，只重写 ",{"type":173,"tag":672,"props":2099,"children":2101},{"className":2100},[],[2102],{"type":179,"value":1388},{"type":179,"value":2104}," 并热更新 ",{"type":173,"tag":672,"props":2106,"children":2108},{"className":2107},[],[2109],{"type":179,"value":824},{"type":179,"value":2111}," 配置；视图状态保留不刷新。",{"type":173,"tag":191,"props":2113,"children":2114},{},[2115,2117,2120,2122,2128,2130,2135,2137,2143,2145,2148,2150,2156,2158,2164],{"type":179,"value":2116},"SEO / Redirect 辅助",{"type":173,"tag":197,"props":2118,"children":2119},{},[],{"type":179,"value":2121},"\n• 配合 ",{"type":173,"tag":672,"props":2123,"children":2125},{"className":2124},[],[2126],{"type":179,"value":2127},"routeRules",{"type":179,"value":2129}," 在 ",{"type":173,"tag":672,"props":2131,"children":2133},{"className":2132},[],[2134],{"type":179,"value":1157},{"type":179,"value":2136}," 做 ",{"type":173,"tag":672,"props":2138,"children":2140},{"className":2139},[],[2141],{"type":179,"value":2142},"_redirects",{"type":179,"value":2144},"、静态缓存 TTL、edge middleware 等。",{"type":173,"tag":197,"props":2146,"children":2147},{},[],{"type":179,"value":2149},"\n• 未匹配到的路径自动走 ",{"type":173,"tag":672,"props":2151,"children":2153},{"className":2152},[],[2154],{"type":179,"value":2155},"error.vue",{"type":179,"value":2157},"，可根据 ",{"type":173,"tag":672,"props":2159,"children":2161},{"className":2160},[],[2162],{"type":179,"value":2163},"error.statusCode",{"type":179,"value":2165}," 自定义 404/500。",{"type":173,"tag":626,"props":2167,"children":2169},{"id":2168},"路由守卫中间件与-vue-router-4-的区别",[2170],{"type":179,"value":2171},"路由守卫：中间件与 Vue Router 4 的区别？",{"type":173,"tag":181,"props":2173,"children":2174},{},[2175],{"type":179,"value":2176},"Nuxt 的 middleware 能同时跑在服务端和客户端，并带来完整的 Nuxt 上下文与 HTTP 控制；而 Vue Router 4 的导航守卫只是浏览器端的路由钩子，主要解决页面切换逻辑。选型时若应用涉及 SSR/Edge、首屏数据注水或需要设置 HTTP 状态，就应使用 Nuxt Middleware；纯前端 SPA 则使用 Vue Router Guard 即可。",{"type":173,"tag":626,"props":2178,"children":2180},{"id":2179},"runtimeconfigprocessenvimportmeta-的使用场景",[2181],{"type":179,"value":2182},"runtimeConfig、process.env、import.meta 的使用场景？",{"type":173,"tag":181,"props":2184,"children":2185},{},[2186],{"type":179,"value":2187},"process.env 适合在「打包阶段」就确定的常量，例如编译开关或第三方库要求的环境标记；import.meta 更多用于单个模块的上下文信息（如动态 import 的 URL、热更新标识等），与框架配置关系不大；而 runtimeConfig 则在「运行阶段」才读取，可按部署环境注入不同值，并通过 public / private 分区保证敏感数据仅留在服务端，因此应把需要随环境切换或包含密钥的配置放进 runtimeConfig，把完全静态且编译期就要用到的变量留给 process.env，至于 import.meta 则仅在需要获取当前模块元数据或进行懒加载计算路径时使用。",{"type":173,"tag":620,"props":2189,"children":2191},{"id":2190},"渲染机制与数据获取",[2192],{"type":179,"value":2190},{"type":173,"tag":626,"props":2194,"children":2196},{"id":2195},"serverprefetch-对比-useasyncdatausefetch",[2197],{"type":179,"value":2198},"serverPrefetch 对比 useAsyncData/useFetch？",{"type":173,"tag":181,"props":2200,"children":2201},{},[2202],{"type":179,"value":2203},"serverPrefetch 仅在 SSR 首屏渲染时执行一次，把结果注入组件实例后随 HTML 一并下发，适合一次性、静态首屏数据；而 useAsyncData（或 useFetch，HTTP 特化的 useAsyncData） 同样会在 SSR 首次运行，但其返回值具备缓存、响应式和客户端路由切换后自动重刷等能力，可手动 revalidate，因而更适合需要多次调用或动态更新的接口数据。",{"type":173,"tag":626,"props":2205,"children":2207},{"id":2206},"hydration-mismatch-排查",[2208],{"type":179,"value":2209},"hydration mismatch 排查？",{"type":173,"tag":181,"props":2211,"children":2212},{},[2213],{"type":179,"value":2214},"Hydration 指的是浏览器下载完服务端 HTML 后，客户端 JavaScript 将这份静态标记“注水”成可交互应用的过程；当框架完成所有事件绑定、异步组件加载并开始响应用户操作时，便进入客户端激活阶段。若两端渲染结果出现差异（hydration mismatch），框架会在控制台警告并尝试 DOM 补丁，严重时导致白屏或闪烁。排查重点：①确保首屏数据来源一致——不要在客户端额外修改初始 state；②避免在 SSR 中调用仅浏览器可用的 API（如 window、localStorage）；③保证列表渲染的 key 稳定，时间/随机数/Intl 等需固定输出；④检查条件渲染与环境判断（process.client / process.server）逻辑是否对称；⑤使用 Nuxt 的 devtools“Hydration mismatch”面板或在浏览器 diff 服务端 HTML 与首次客户端渲染的 DOM，定位具体节点，再逐步比对 props 或数据源即可。",{"type":173,"tag":626,"props":2216,"children":2218},{"id":2217},"useasyncdatausefetchuselazyasyncdata-的差异",[2219],{"type":179,"value":2220},"useAsyncData、useFetch、useLazyAsyncData 的差异？",{"type":173,"tag":181,"props":2222,"children":2223},{},[2224,2230,2232,2238,2240,2246,2248,2254,2256,2261,2263,2269,2271,2277],{"type":173,"tag":672,"props":2225,"children":2227},{"className":2226},[],[2228],{"type":179,"value":2229},"useAsyncData",{"type":179,"value":2231}," 是通用型数据钩子：组件加载时立即执行提供的任意异步函数并把结果做响应式缓存；",{"type":173,"tag":672,"props":2233,"children":2235},{"className":2234},[],[2236],{"type":179,"value":2237},"useFetch",{"type":179,"value":2239}," 在此之上专为 HTTP 请求做了语法糖，自动调用 ",{"type":173,"tag":672,"props":2241,"children":2243},{"className":2242},[],[2244],{"type":179,"value":2245},"$fetch",{"type":179,"value":2247},"、拼接 baseURL、解析响应与状态码，因此写接口时最省事；而 ",{"type":173,"tag":672,"props":2249,"children":2251},{"className":2250},[],[2252],{"type":179,"value":2253},"useLazyAsyncData",{"type":179,"value":2255}," 仍沿用 ",{"type":173,"tag":672,"props":2257,"children":2259},{"className":2258},[],[2260],{"type":179,"value":2229},{"type":179,"value":2262}," 的缓存/响应式机制，但默认“懒执行”，只有当显式调用 ",{"type":173,"tag":672,"props":2264,"children":2266},{"className":2265},[],[2267],{"type":179,"value":2268},"refresh()",{"type":179,"value":2270}," 或组件首次访问 ",{"type":173,"tag":672,"props":2272,"children":2274},{"className":2273},[],[2275],{"type":179,"value":2276},"data",{"type":179,"value":2278}," 时才真正发起请求，适合非首屏、按需加载场景。",{"type":173,"tag":626,"props":2280,"children":2282},{"id":2281},"缓存-keydeferdefaulttransform-选项",[2283],{"type":179,"value":2284},"缓存 key、defer、default、transform 选项？",{"type":173,"tag":181,"props":2286,"children":2287},{},[2288],{"type":179,"value":2289},"在 Nuxt 的 useAsyncData/useFetch 配置里：cache key 用来给这次请求起唯一 ID，让服务端渲染产生的结果可以在客户端继续复用或跨组件共享；defer 表示把真正的请求推迟到页面已渲染（或满足指定条件）之后执行，避免阻塞首屏；default 是在请求尚未完成或失败时注入的初始值，保证模版渲染时有可用数据，不会出现 undefined 闪烁；transform 则是在拿到原始响应后立刻做一次同步处理（如筛选字段、格式化日期），返回给组件的是 transform 处理后的最终数据，从而把视图层与数据清洗逻辑解耦。",{"type":173,"tag":626,"props":2291,"children":2293},{"id":2292},"ssg-生成流程-nitro-generateprerender-routespayload-extraction",[2294],{"type":179,"value":2295},"SSG 生成流程 nitro generate、prerender routes、payload extraction？",{"type":173,"tag":181,"props":2297,"children":2298},{},[2299,2301,2307,2309,2314,2315,2320],{"type":179,"value":2300},"SSG 流程可以一句话概括为“用运行时 SSR 去离线产出静态资源”：执行 ​",{"type":173,"tag":672,"props":2302,"children":2304},{"className":2303},[],[2305],{"type":179,"value":2306},"nuxi build && nitro generate",{"type":179,"value":2308}," 时，Nitro 会把项目以 SSR 方式逐一渲染 ​prerender routes​（自动爬取到的和在 ​nitro.prerender.routes​ 中显式声明的路径），将得到的 HTML 与必要的静态资源写入 ​dist/​；同时会把渲染过程中注入页面的初始数据（",{"type":173,"tag":672,"props":2310,"children":2312},{"className":2311},[],[2313],{"type":179,"value":2229},{"type":179,"value":1355},{"type":173,"tag":672,"props":2316,"children":2318},{"className":2317},[],[2319],{"type":179,"value":2237},{"type":179,"value":2321}," 等返回的结果）抽取成独立的 JSON 文件，这一步就叫 ​payload extraction​，对应路由最终访问时浏览器先下 HTML，再异步拉这份 payload 做 hydration，从而既保留了首屏秒开的静态站点体验，又能在客户端继续作为 SPA 交互。",{"type":173,"tag":626,"props":2323,"children":2325},{"id":2324},"incremental-static-regenerationisr原理",[2326],{"type":179,"value":2327},"incremental static regeneration（ISR）原理？",{"type":173,"tag":181,"props":2329,"children":2330},{},[2331],{"type":179,"value":2332},"ISR 的核心实现是“静态文件 + SWR 缓存策略”：构建阶段先把页面渲成 HTML 并写入磁盘（或对象存储），同时在每个页面前插一段 runtime 代码/中间件记录 revalidate 秒数；请求到来时，CDN 直接把已有 HTML 返回给用户，然后在服务器（往往是一个无状态的 serverless 函数）里读取文件的 mtime 与当前时间比较——若已过期就异步执行同一段 SSR 渲染逻辑、生成新的 HTML/JSON，并用原子写（写临时文件再 rename）覆盖旧文件；写完后下一次请求即可命中新文件，从而将“静态首屏 + 后台增量重建”融合在一条代码路径里，无需整站重构。",{"type":173,"tag":626,"props":2334,"children":2336},{"id":2335},"nuxt-的-seo-思路",[2337],{"type":179,"value":2338},"Nuxt 的 SEO 思路？",{"type":173,"tag":181,"props":2340,"children":2341},{},[2342],{"type":179,"value":2343},"首先借助 SSR/SSG 在首字节就输出可爬取的语义化 DOM；在页面级别用 useHead / useSeoMeta 动态注入 title、description、Open Graph、Twitter Card 等 meta；利用模块生态（@nuxtjs/sitemap、robots、schema-org）自动生成 sitemap.xml、robots.txt 及 JSON-LD 结构化数据；对长尾页面可用 ​nitro prerender​ 或增量静态重建（ISR）离线产出 HTML，保证首屏速度与爬虫友好；最后结合静态资源指纹和 CDN 缓存策略，既让搜索引擎抓到最新内容，又不牺牲性能，从而系统化提升站点在搜索结果中的可见性与点击率。",{"type":173,"tag":626,"props":2345,"children":2347},{"id":2346},"nuxt-的首屏优化方法",[2348],{"type":179,"value":2349},"Nuxt 的首屏优化方法？",{"type":173,"tag":181,"props":2351,"children":2352},{},[2353,2355,2361],{"type":179,"value":2354},"首先构建阶段借 SSR/SSG/Nitro prerender（或 ISR）把页面直接产出静态 HTML + 内嵌关键 CSS，TTFB/LCP 等核心指标先压到底；运行时利用 payload 分离机制把数据以 ",{"type":173,"tag":672,"props":2356,"children":2358},{"className":2357},[],[2359],{"type":179,"value":2360},"\u003Cscript type=\"application/json\">",{"type":179,"value":2362}," 注入，浏览器拿到首屏 DOM 后才异步下载并懒加载分割好的 JS chunk，避免阻塞渲染；通过 useHead / useSeoMeta 在同一次 HTML flush 中插入 preload、modulepreload、dns-prefetch 等提示，把字体、首屏图片与首要 chunk 并行拉取；Nitro preset 会自动给静态资源打指纹并生成 route rules，让 CDN 边缘命中 HTML 与 asset，同时按需开启 HTTP 103 Early Hints 把关键资源依赖提到握手阶段；最后配合 nuxt-link 的智能预取和 Suspense/Island 架构，让后续路由与组件只在交互点才加载。",{"type":173,"tag":620,"props":2364,"children":2366},{"id":2365},"状态管理与组合式-api",[2367],{"type":179,"value":2368},"状态管理与组合式 API",{"type":173,"tag":626,"props":2370,"children":2372},{"id":2371},"nuxt-集成-pinia-的-definestorestoretorefsreset-及插件机制",[2373],{"type":179,"value":2374},"Nuxt 集成 Pinia 的 defineStore、storeToRefs、$reset 及插件机制？",{"type":173,"tag":181,"props":2376,"children":2377},{},[2378,2380,2386,2388,2394,2396,2402,2404,2410,2412,2418],{"type":179,"value":2379},"在 Nuxt 3 中集成 Pinia 的本质是把 SSR/岛屿架构下的全局响应式状态抽象为“可树摇的模块”，然后通过 Nuxt 的 runtime‐context 注入到每个请求：① ",{"type":173,"tag":672,"props":2381,"children":2383},{"className":2382},[],[2384],{"type":179,"value":2385},"defineStore",{"type":179,"value":2387}," 在构建期生成同名 composable，既能被自动导入，又能在服务端为每个 HTTP 请求各开一份独立实例，实现「每次渲染隔离、客户端复用」；② 组件里用 ",{"type":173,"tag":672,"props":2389,"children":2391},{"className":2390},[],[2392],{"type":179,"value":2393},"storeToRefs",{"type":179,"value":2395}," 把 store 的 state/gets 转成 ref，既避免解构失去响应式，也让 TS 类型推断完整保留；③ ",{"type":173,"tag":672,"props":2397,"children":2399},{"className":2398},[],[2400],{"type":179,"value":2401},"$reset",{"type":179,"value":2403}," 内置在每个 store 的 prototype，上游只需把初始 state 作为闭包快照存档，即可在任何场景（例如退出登录或切路由）一键回滚到初始值；④ 插件机制则借助 ",{"type":173,"tag":672,"props":2405,"children":2407},{"className":2406},[],[2408],{"type":179,"value":2409},"nuxtApp.pinia.use(plugin)",{"type":179,"value":2411}," 把自定义逻辑（如持久化、日志、授权 header 注入等）挂载到所有 store —— 插件拿到的是同一个 per-request Pinia 实例，因此可以安全访问 ",{"type":173,"tag":672,"props":2413,"children":2415},{"className":2414},[],[2416],{"type":179,"value":2417},"nuxtApp.ssrContext",{"type":179,"value":2419},"、cookies 或 Nitro runtime。在这套设计里，Pinia 的声明式 API 与 Nuxt 的自动注册 / per-request scope 天然契合，既保证了服务器并发安全，又让客户端 hydration 零配置地获得统一、可热更新的状态层。",{"type":173,"tag":626,"props":2421,"children":2423},{"id":2422},"ssr-下的状态序列化与-hydration",[2424],{"type":179,"value":2425},"SSR 下的状态序列化与 hydration？",{"type":173,"tag":181,"props":2427,"children":2428},{},[2429,2431,2437,2439,2445,2447,2453,2455,2461,2463,2468,2470,2476,2478,2483,2485,2491],{"type":179,"value":2430},"服务器在渲染 Vue/Nuxt 组件树时，会先跑一遍 data fetching 与 Pinia/Vuex 计算，把得到的 ",{"type":173,"tag":2432,"props":2433,"children":2434},"strong",{},[2435],{"type":179,"value":2436},"最终状态快照",{"type":179,"value":2438},"（对象/Map/Set 等）用 ",{"type":173,"tag":672,"props":2440,"children":2442},{"className":2441},[],[2443],{"type":179,"value":2444},"devalue",{"type":179,"value":2446}," 或同类安全编码器转成可传输的 JSON 字符串；这一串数据被嵌入到返回 HTML 的 ",{"type":173,"tag":672,"props":2448,"children":2450},{"className":2449},[],[2451],{"type":179,"value":2452},"\u003Cscript id=\"__NUXT_DATA__\" type=\"application/json\">...\u003C/script>",{"type":179,"value":2454},"（或 ",{"type":173,"tag":672,"props":2456,"children":2458},{"className":2457},[],[2459],{"type":179,"value":2460},"window.__INITIAL_STATE__",{"type":179,"value":2462},"）中并做 XSS 转义。浏览器拿到这段已带真实 DOM 的 HTML 后，下载客户端 JS，框架在 ",{"type":173,"tag":672,"props":2464,"children":2466},{"className":2465},[],[2467],{"type":179,"value":734},{"type":179,"value":2469}," 过程中读取这段序列化数据，反序列化填充到 Pinia 实例或组件 ",{"type":173,"tag":672,"props":2471,"children":2473},{"className":2472},[],[2474],{"type":179,"value":2475},"setup()",{"type":179,"value":2477}," 中的 ",{"type":173,"tag":672,"props":2479,"children":2481},{"className":2480},[],[2482],{"type":179,"value":2229},{"type":179,"value":2484}," 缓存，再与服务器生成的 VDOM 做一次 Diff，若完全一致就把事件监听器绑定到现有 DOM——整个页面瞬间拥有交互能力且无需重复绘制。要点是：1) 每个请求都有独立状态，避免数据串流；2) JSON 必须与服务器渲染时的真实状态 bit-wise 对齐，才能避免 hydration mismatch；3) 序列化要防注入（",{"type":173,"tag":672,"props":2486,"children":2488},{"className":2487},[],[2489],{"type":179,"value":2490},"\u003C/script>",{"type":179,"value":2492}," 转义）并尽量精简，减少首屏负载。",{"type":173,"tag":626,"props":2494,"children":2496},{"id":2495},"composables-目录自动导入规则",[2497],{"type":179,"value":2498},"composables 目录自动导入规则？",{"type":173,"tag":181,"props":2500,"children":2501},{},[2502,2504,2510,2512,2518],{"type":179,"value":2503},"composables 自动导入底层是借助 unplugin-auto-import 在构建期做静态代码改写：Nuxt 会递归扫描 /composables 目录，把每个 *.{ts,js,mjs} 文件（含子目录）登记到一个虚拟模块 #imports；同时根据文件名生成可用标识符——默认去掉扩展名并转成驼峰，例如 useUser.ts → useUser，user/auth.ts → userAuth。随后在解析 ",{"type":173,"tag":672,"props":2505,"children":2507},{"className":2506},[],[2508],{"type":179,"value":2509},"\u003Cscript setup>",{"type":179,"value":2511}," 或普通 ",{"type":173,"tag":672,"props":2513,"children":2515},{"className":2514},[],[2516],{"type":179,"value":2517},"\u003Cscript>",{"type":179,"value":2519}," 时，若检测到未显式声明的标识符且在 #imports 表内，就即时插入 import { useUser } from '#imports' 等语句；运行时代码与手写 import 毫无区别，因此能被 Vite/rollup 正常 tree-shaking，并享受 TypeScript 类型提示。因为这些 composable 最终仍是 ESM 模块，SSR 每个请求会按 Nuxt 的 per-request module cache 规则各自实例化一次，保证数据隔离。整体效果是在“零显式导入”的同时维持可摇树、类型安全、SSR 隔离三大特性，大幅减少样板代码并提高组合式逻辑的可发现性。",{"type":173,"tag":626,"props":2521,"children":2523},{"id":2522},"usestate-vs-usecookieusesession-对比",[2524],{"type":179,"value":2525},"useState vs useCookie、useSession 对比？",{"type":173,"tag":181,"props":2527,"children":2528},{},[2529],{"type":179,"value":2530},"useState 只把值挂在 per-request 的 in-memory cache，SSR 时随渲染周期创建、客户端刷新就失效；useCookie 通过 event.req.headers.cookie ↔ document.cookie 做双向序列化，刷页或多标签页都能共享，受大小（≈4 KB）、SameSite/HttpOnly 等浏览器规则约束；useSession 则把数据写进 Nitro 的 server-side session store（Redis、KV、内存等自选驱动），返回给客户端的只是一把加密 ID，真正数据永远停在服务端，既跨请求持久又避免前端暴露。",{"type":173,"tag":626,"props":2532,"children":2534},{"id":2533},"跨端共享状态策略",[2535],{"type":179,"value":2536},"跨端共享状态策略？",{"type":173,"tag":181,"props":2538,"children":2539},{},[2540,2542,2547],{"type":179,"value":2541},"Nuxt 3 的跨端共享状态可以理解为在 Nitro HTTP 事件对象 (event) 和前端应用 (nuxtApp) 之间搭起的一条“单向数据隧道”。当请求抵达服务器时，可先在 server middleware / plugin 里读取或写入 event.req.headers.cookie，再把 JWT、CSRF token 等注入到 event.context 或直接用 setCookie(event, ...) 写回；随后渲染流程会把 event 挂进 nuxtApp.ssrContext，Pinia／useState 等 store 初始化时即可透过 useCookie()、useRequestHeaders() 等 API 同步取得这些值。Nitro 在收尾阶段会把 nuxtApp.ssrContext.state 与已设置的响应 Cookie 一并序列化进 HTML 的 ",{"type":173,"tag":2432,"props":2543,"children":2544},{},[2545],{"type":179,"value":2546},"NUXT",{"type":179,"value":2548}," payload 与 Set-Cookie 头；浏览器收到后先应用 Set-Cookie 让 token 落地，再在 hydration 里用 payload 修补前端的 Pinia/store，保证页面首帧就与服务器保持同一份身份与业务状态。这条“event → nuxtApp → payload → client”链路既完成了安全的服务器注入，也让后续前端读写都落在响应式数据层，而无需额外 API 往返。",{"type":173,"tag":620,"props":2550,"children":2552},{"id":2551},"插件与中间件",[2553],{"type":179,"value":2551},{"type":173,"tag":626,"props":2555,"children":2557},{"id":2556},"插件的类型和加载顺序",[2558],{"type":179,"value":2559},"插件的类型和加载顺序？",{"type":173,"tag":1417,"props":2561,"children":2562},{},[2563,2568],{"type":173,"tag":191,"props":2564,"children":2565},{},[2566],{"type":179,"value":2567},"文件扫描阶段，Nuxt 按 plugins/ 目录下文件名的字母顺序注入插件清单，顺序越靠前就越早被 import，这保证了后面的插件可以安全依赖前面通过 provide() 注入到 nuxtApp 的对象；",{"type":173,"tag":191,"props":2569,"children":2570},{},[2571],{"type":179,"value":2572},"运行阶段再依据文件后缀的 mode 策略分流——.server 只在 SSR 的 Nitro request-scope 内执行一次；.client 只在浏览器的第一个 hydration tick 执行一次；无后缀（all）会先在服务器执行完（可向 payload 注入预计算数据），随后在客户端再次执行以获得同样的注入结果，形成“同名两次、状态对齐”效果。整体时序可概括为：alphabet sort → server-side import & run → HTML 注入 → client import & run →组件树 access。",{"type":173,"tag":626,"props":2574,"children":2576},{"id":2575},"provideinject-如何在-ssr-可行",[2577],{"type":179,"value":2578},"provide/inject 如何在 SSR 可行？",{"type":173,"tag":181,"props":2580,"children":2581},{},[2582,2584,2590,2592,2598,2600,2606,2608,2614,2616,2622,2624,2630,2632,2637,2639,2644,2646,2652,2654,2660],{"type":179,"value":2583},"主要依赖每个请求独立创建的 ",{"type":173,"tag":672,"props":2585,"children":2587},{"className":2586},[],[2588],{"type":179,"value":2589},"nuxtApp",{"type":179,"value":2591}," 实例——当 ",{"type":173,"tag":672,"props":2593,"children":2595},{"className":2594},[],[2596],{"type":179,"value":2597},".server",{"type":179,"value":2599}," 或无后缀（all）插件在 Node 端执行时，当调用 ",{"type":173,"tag":672,"props":2601,"children":2603},{"className":2602},[],[2604],{"type":179,"value":2605},"nuxtApp.provide('foo', value)",{"type":179,"value":2607},"，实质是把这份依赖挂载到当前请求范围的应用上下文；随后 Nuxt 在渲染完成前会把 ",{"type":173,"tag":672,"props":2609,"children":2611},{"className":2610},[],[2612],{"type":179,"value":2613},"nuxtApp.payload",{"type":179,"value":2615},"（包含所有由 ",{"type":173,"tag":672,"props":2617,"children":2619},{"className":2618},[],[2620],{"type":179,"value":2621},"provide",{"type":179,"value":2623}," 注入的序列化安全数据）写入 HTML 的 ",{"type":173,"tag":672,"props":2625,"children":2627},{"className":2626},[],[2628],{"type":179,"value":2629},"__NUXT__",{"type":179,"value":2631}," 对象；浏览器 hydration 时重新创建 ",{"type":173,"tag":672,"props":2633,"children":2635},{"className":2634},[],[2636],{"type":179,"value":2589},{"type":179,"value":2638},"，再用这段 payload 做一次“反向补丁”，于是客户端得到同名的 ",{"type":173,"tag":672,"props":2640,"children":2642},{"className":2641},[],[2643],{"type":179,"value":2621},{"type":179,"value":2645}," 条目并可被 ",{"type":173,"tag":672,"props":2647,"children":2649},{"className":2648},[],[2650],{"type":179,"value":2651},"inject('foo')",{"type":179,"value":2653}," 即刻消费。因为整个链路基于请求隔离与 payload 回放，既保证了 SSR 期间的并发安全，又确保了注入值在首帧就与服务器一致，无需额外 API 往返；而若插件以 ",{"type":173,"tag":672,"props":2655,"children":2657},{"className":2656},[],[2658],{"type":179,"value":2659},".client",{"type":179,"value":2661}," 结尾则只会在浏览器端执行，无法参与这条 SSR 传递流程。",{"type":173,"tag":626,"props":2663,"children":2664},{"id":391},[2665],{"type":179,"value":2666},"中间件分类？",{"type":173,"tag":181,"props":2668,"children":2669},{},[2670,2672,2677],{"type":179,"value":2671},"在 Nuxt 3 里，“中间件”可以概括为两大类五小类：① 路由中间件，既跑在 SSR 渲染阶段也跑在浏览器路由跳转时，按执行先后又分为全局文件（/middleware/*.global.ts，站点级守卫）、命名文件（/middleware/auth.ts，在页面/布局通过 definePageMeta({ middleware: 'auth' }) 引用）和匿名声明（直接在页面里 defineNuxtRouteMiddleware()，离业务最近）；② 服务器端中间件，仅在 Nitro 运行时触发，包括路由级（/server/middleware/",{"type":173,"tag":2432,"props":2673,"children":2674},{},[2675],{"type":179,"value":2676},"，常做代理、日志、鉴权等拦截）与 API 级（/server/api/",{"type":179,"value":2678},"，返回 JSON/流并可串联前后钩子）。一次导航的顺序大致是：Server 端 Global→Named→Anonymous→page.setup()→渲染，Hydration 后浏览器再按同样链路重放。这样的层次让能精确决定逻辑作用域：既要 SSR+CSR 同步的导航守卫放路由中间件，需要纯后端拦截就用 server 中间件。",{"type":173,"tag":626,"props":2680,"children":2682},{"id":2681},"对比-api-routesevent-handlerserver-middleware",[2683],{"type":179,"value":2684},"对比 API Routes、Event Handler、server middleware？",{"type":173,"tag":181,"props":2686,"children":2687},{},[2688,2690,2696,2698,2701,2703,2709,2711,2714,2716,2722,2723,2729,2731,2737],{"type":179,"value":2689},"• Server middleware（",{"type":173,"tag":672,"props":2691,"children":2693},{"className":2692},[],[2694],{"type":179,"value":2695},"/server/middleware/**",{"type":179,"value":2697},"）按文件路径匹配，最早拦截请求，可在不返回内容的情况下做日志、鉴权、URL 重写等横切逻辑；",{"type":173,"tag":197,"props":2699,"children":2700},{},[],{"type":179,"value":2702},"\n• API Routes（",{"type":173,"tag":672,"props":2704,"children":2706},{"className":2705},[],[2707],{"type":179,"value":2708},"/server/api/*.ts",{"type":179,"value":2710},"）是显式暴露的 REST/HTTP 端点，天然返回 JSON/流，底层同样是一个 eventHandler，但框架会帮做参数解析与自动路由；",{"type":173,"tag":197,"props":2712,"children":2713},{},[],{"type":179,"value":2715},"\n• Event Handler（",{"type":173,"tag":672,"props":2717,"children":2719},{"className":2718},[],[2720],{"type":179,"value":2721},"defineEventHandler()",{"type":179,"value":883},{"type":173,"tag":672,"props":2724,"children":2726},{"className":2725},[],[2727],{"type":179,"value":2728},"eventHandler()",{"type":179,"value":2730},"）是 Nitro 的原子函数，既可作为 API Route 的实现体，也可在 server middleware 内链式调用，用来截获并改写 ",{"type":173,"tag":672,"props":2732,"children":2734},{"className":2733},[],[2735],{"type":179,"value":2736},"event.node.req/res",{"type":179,"value":870},{"type":173,"tag":626,"props":2739,"children":2741},{"id":2740},"什么是-streaming-和-edge-function-支持",[2742],{"type":179,"value":2743},"什么是 Streaming 和 Edge Function 支持？",{"type":173,"tag":181,"props":2745,"children":2746},{},[2747],{"type":179,"value":2748},"Nitro 把 Nuxt 的服务端 runtime 抽象成零依赖、跨平台的 Lambda 级产物，所以它天然支持：",{"type":173,"tag":1417,"props":2750,"children":2751},{},[2752,2765],{"type":173,"tag":191,"props":2753,"children":2754},{},[2755,2757,2763],{"type":179,"value":2756},"Streaming——渲染过程可将 HTML/JSON 块分段 ",{"type":173,"tag":672,"props":2758,"children":2760},{"className":2759},[],[2761],{"type":179,"value":2762},"write",{"type":179,"value":2764}," 给客户端（基于 Web Streams API），首字节可在 TTFB 便到达浏览器，后续组件数据或异步 fetch 结果再“水龙头式”续写，避免阻塞首屏。",{"type":173,"tag":191,"props":2766,"children":2767},{},[2768],{"type":179,"value":2769},"Edge Functions——构建产物可直接部署到 Vercel Edge、Cloudflare Workers、Netlify Edge 等 V8 isolate 环境，Nitro 自动注入 polyfill 并生成平台特定入口，把同一份代码无缝移到离用户最近的 PoP，典型 RTT 从几十 ms 降到个位数。",{"type":173,"tag":626,"props":2771,"children":2773},{"id":2772},"什么样的场景适合-edge-function",[2774],{"type":179,"value":2775},"什么样的场景适合 Edge Function？",{"type":173,"tag":181,"props":2777,"children":2778},{},[2779],{"type":179,"value":2780},"把逻辑搬到 Edge Function 最适合“轻量但对响应时延和全球覆盖极挑剔”的场景：例如首页首屏或动态列表的 HTML-Streaming/ISR，让 POP 就近渲染把 TTFB 压到个位数；按 Geo/IP、Cookie、UA 做 A/B 实验或多语言分流，实现毫秒级个性化；在边缘先行校验 JWT、做速率限制、图片小尺寸转换或 SWR 缓存，直接过滤恶意流量并减轻源站压力；还可以即时重写 URL、生成带签名的下载链接或处理 Webhook 轻量回执。反之，重 CPU/AI 运算、大文件上传或强持久化依赖仍应交给传统 Serverless 或容器。",{"type":173,"tag":187,"props":2782,"children":2783},{},[2784,2799,2814,2829,2852,2867],{"type":173,"tag":191,"props":2785,"children":2786},{},[2787,2789,2792,2794,2797],{"type":179,"value":2788},"首屏与动态内容加速",{"type":173,"tag":197,"props":2790,"children":2791},{},[],{"type":179,"value":2793},"\n• HTML Streaming SSR：先把骨架串流到浏览器，组件数据再延迟注水，Edge 可把 TTFB 从几十 ms 拆到个位数。",{"type":173,"tag":197,"props":2795,"children":2796},{},[],{"type":179,"value":2798},"\n• Edge-Side Rendering/ISR：对全局用户统一的页面可在 POP 内做增量静态化；命中缓存直接 0 ms 返回，回源频率大减。",{"type":173,"tag":191,"props":2800,"children":2801},{},[2802,2804,2807,2809,2812],{"type":179,"value":2803},"个性化与 A/B 实验",{"type":173,"tag":197,"props":2805,"children":2806},{},[],{"type":179,"value":2808},"\n• Geo/IP、UA、Cookie 分流：按国家语言、会员等级实时挑选不同布局或资源，而不必让主服务来决定。",{"type":173,"tag":197,"props":2810,"children":2811},{},[],{"type":179,"value":2813},"\n• Feature flag / A/B bucket：在 POP 里注入实验脚本或替换资源，配合持久化 Cookie，毫秒级完成试验分组。",{"type":173,"tag":191,"props":2815,"children":2816},{},[2817,2819,2822,2824,2827],{"type":179,"value":2818},"安全与鉴权",{"type":173,"tag":197,"props":2820,"children":2821},{},[],{"type":179,"value":2823},"\n• JWT / Session 校验：请求先到 Edge 做短算术验证，非法请求直接挡在边缘，节省下游带宽与计算。",{"type":173,"tag":197,"props":2825,"children":2826},{},[],{"type":179,"value":2828},"\n• 速率限制 / 防爬虫：基于 KV 或 Durable Objects 维护计数器，在第一跳就熔断异常流量。",{"type":173,"tag":191,"props":2830,"children":2831},{},[2832,2834,2837,2839,2845,2847,2850],{"type":179,"value":2833},"智能路由与内容重写",{"type":173,"tag":197,"props":2835,"children":2836},{},[],{"type":179,"value":2838},"\n• 动态重定向、Re-write：例如国际站根据 Accept-Language 改写到 ",{"type":173,"tag":672,"props":2840,"children":2842},{"className":2841},[],[2843],{"type":179,"value":2844},"/en/…",{"type":179,"value":2846},"，或在“灰度发布”时按 Header 分流到 canary 集群。",{"type":173,"tag":197,"props":2848,"children":2849},{},[],{"type":179,"value":2851},"\n• 资源签名校验：为 OSS / S3 鉴权 URL 生成防盗链签名并立即 302。",{"type":173,"tag":191,"props":2853,"children":2854},{},[2855,2857,2860,2862,2865],{"type":179,"value":2856},"边缘缓存与数据预处理",{"type":173,"tag":197,"props":2858,"children":2859},{},[],{"type":179,"value":2861},"\n• Stale-While-Revalidate / SWR 缓存：先返回旧数据再后台回源刷新，使动态 API 拥有近似静态的性能。",{"type":173,"tag":197,"props":2863,"children":2864},{},[],{"type":179,"value":2866},"\n• 即时图像处理（resize/webp）：把小型 CPU 计算下沉到 PoP，减轻 Origin 压力并缩短链路。",{"type":173,"tag":191,"props":2868,"children":2869},{},[2870,2872,2875,2877,2880],{"type":179,"value":2871},"事件或 webhook Fan-out",{"type":173,"tag":197,"props":2873,"children":2874},{},[],{"type":179,"value":2876},"\n• 全球低延迟 WebSocket / SSE 广播：Worker 侧可以快速把消息写入 PUB/SUB 管道。",{"type":173,"tag":197,"props":2878,"children":2879},{},[],{"type":179,"value":2881},"\n• 处理第三方回调（支付、OAuth）后就近写入队列，保证回执速度。",{"type":173,"tag":620,"props":2883,"children":2885},{"id":2884},"nuxt-nitro-与部署",[2886],{"type":179,"value":2887},"Nuxt Nitro 与部署",{"type":173,"tag":626,"props":2889,"children":2891},{"id":2890},"nuxt-生成产物结构解析",[2892],{"type":179,"value":2893},"Nuxt 生成产物结构解析？",{"type":173,"tag":181,"props":2895,"children":2896},{},[2897,2899,2904,2906,2912],{"type":179,"value":2898},"Nuxt 在执行 ",{"type":173,"tag":672,"props":2900,"children":2902},{"className":2901},[],[2903],{"type":179,"value":1331},{"type":179,"value":2905}," 后会把整站打进 ",{"type":173,"tag":672,"props":2907,"children":2909},{"className":2908},[],[2910],{"type":179,"value":2911},".output",{"type":179,"value":2913},"：",{"type":173,"tag":1417,"props":2915,"children":2916},{},[2917,2930,2951],{"type":173,"tag":191,"props":2918,"children":2919},{},[2920,2922,2928],{"type":179,"value":2921},"最外层的 ",{"type":173,"tag":672,"props":2923,"children":2925},{"className":2924},[],[2926],{"type":179,"value":2927},".output/public",{"type":179,"value":2929}," 是纯静态资源，直接丢 CDN；",{"type":173,"tag":191,"props":2931,"children":2932},{},[2933,2935,2941,2943,2949],{"type":179,"value":2934},"中层的 ",{"type":173,"tag":672,"props":2936,"children":2938},{"className":2937},[],[2939],{"type":179,"value":2940},".output/dist/server/*",{"type":179,"value":2942},"（新版已简化为 ",{"type":173,"tag":672,"props":2944,"children":2946},{"className":2945},[],[2947],{"type":179,"value":2948},".output/server/*",{"type":179,"value":2950},"）是经过 Nitro + Rollup 打包后的 SSR 渲染器与 API 处理器，真正的业务逻辑和 route 分块都在这里；",{"type":173,"tag":191,"props":2952,"children":2953},{},[2954,2956,2962,2964,2970,2972,2978,2980,2986,2988,2993,2995,3000],{"type":179,"value":2955},"最内层根目录的 ",{"type":173,"tag":672,"props":2957,"children":2959},{"className":2958},[],[2960],{"type":179,"value":2961},"server.mjs",{"type":179,"value":2963}," 只是一个 3 行左右的薄壳（",{"type":173,"tag":672,"props":2965,"children":2967},{"className":2966},[],[2968],{"type":179,"value":2969},"export { default } from './server/index.mjs'",{"type":179,"value":2971},"），负责把不同托管平台期望的“入口文件”指向实际的 ",{"type":173,"tag":672,"props":2973,"children":2975},{"className":2974},[],[2976],{"type":179,"value":2977},"dist/server/index.mjs",{"type":179,"value":2979},"。\n因此：部署到支持 Node 的环境时可以直接 ",{"type":173,"tag":672,"props":2981,"children":2983},{"className":2982},[],[2984],{"type":179,"value":2985},"node .output/server/index.mjs",{"type":179,"value":2987},"；而把整个 ",{"type":173,"tag":672,"props":2989,"children":2991},{"className":2990},[],[2992],{"type":179,"value":2911},{"type":179,"value":2994}," 上传到 Vercel、Netlify、Cloudflare 等平台时，它们只需执行 ",{"type":173,"tag":672,"props":2996,"children":2998},{"className":2997},[],[2999],{"type":179,"value":2961},{"type":179,"value":3001}," 就能找到同一份编译后的 Server Bundle——两者内容一致，只是入口路径差异，方便在传统服务器与 Serverless/Edge 之间无缝切换。",{"type":173,"tag":626,"props":3003,"children":3005},{"id":3004},"无服务器部署-cold-start-与-bundle-size-优化",[3006],{"type":179,"value":3007},"无服务器部署 Cold start 与 bundle size 优化？",{"type":173,"tag":181,"props":3009,"children":3010},{},[3011,3013,3019,3021,3027,3029,3035,3037,3043,3044,3050,3052,3058,3060,3066,3068,3074,3076,3082,3084,3090],{"type":179,"value":3012},"无服务器部署中的冷启动时间几乎由「执行环境初始化 + 包体加载」两部分决定，因此想压缩冷启动就得从 bundle size 下手：首先在 ",{"type":173,"tag":672,"props":3014,"children":3016},{"className":3015},[],[3017],{"type":179,"value":3018},"nuxt.config.ts",{"type":179,"value":3020}," 里开启 Nitro 的 ",{"type":173,"tag":672,"props":3022,"children":3024},{"className":3023},[],[3025],{"type":179,"value":3026},"externals/inline",{"type":179,"value":3028}," 与 ",{"type":173,"tag":672,"props":3030,"children":3032},{"className":3031},[],[3033],{"type":179,"value":3034},"preset-node",{"type":179,"value":3036},"（或 edge-friendly 的 ",{"type":173,"tag":672,"props":3038,"children":3040},{"className":3039},[],[3041],{"type":179,"value":3042},"preset-vercel",{"type":179,"value":1126},{"type":173,"tag":672,"props":3045,"children":3047},{"className":3046},[],[3048],{"type":179,"value":3049},"preset-cloudflare",{"type":179,"value":3051},"）组合，让核心运行时拆分为最小入口；其次利用 Nuxt 的自动代码分割与 ",{"type":173,"tag":672,"props":3053,"children":3055},{"className":3054},[],[3056],{"type":179,"value":3057},"definePageMeta(keepalive: false)",{"type":179,"value":3059}," 控制仅按路由动态 import 组件，配合 ",{"type":173,"tag":672,"props":3061,"children":3063},{"className":3062},[],[3064],{"type":179,"value":3065},"serverAssetsPatterns",{"type":179,"value":3067}," 把大文件移到 CDN；再通过 ",{"type":173,"tag":672,"props":3069,"children":3071},{"className":3070},[],[3072],{"type":179,"value":3073},"vite build --ssr",{"type":179,"value":3075}," 的 tree-shaking、",{"type":173,"tag":672,"props":3077,"children":3079},{"className":3078},[],[3080],{"type":179,"value":3081},"vite-plugin-compress",{"type":179,"value":3083}," gzip/brotli 和 ",{"type":173,"tag":672,"props":3085,"children":3087},{"className":3086},[],[3088],{"type":179,"value":3089},"bundleAnalyzer",{"type":179,"value":3091}," 剔除未用依赖，把产物稳定压在 1 MB 以内。这样部署到任意 Serverless/Edge 平台时，初始化只需加载一个轻量 JS 文件即可就绪，冷启动延迟可从数百毫秒降到几十毫秒，同时网络传输与 PoP 缓存命中率也大幅提升。",{"type":173,"tag":626,"props":3093,"children":3095},{"id":3094},"nuxt-应用的-docker-化与自托管简介",[3096],{"type":179,"value":3097},"Nuxt 应用的 Docker 化与自托管简介？",{"type":173,"tag":181,"props":3099,"children":3100},{},[3101,3103,3109,3111,3117,3119,3125,3127,3132,3134,3140,3142,3147,3148,3154,3156,3162,3164,3170],{"type":179,"value":3102},"在自托管场景下，Nuxt 项目可以用多阶段 Dockerfile 先在 node-alpine 镜像里执行 ",{"type":173,"tag":672,"props":3104,"children":3106},{"className":3105},[],[3107],{"type":179,"value":3108},"pnpm install --frozen-lockfile --prod=false",{"type":179,"value":3110},"，凭借 PNPM 的 hoisting 把共享依赖集中到 ",{"type":173,"tag":672,"props":3112,"children":3114},{"className":3113},[],[3115],{"type":179,"value":3116},".pnpm",{"type":179,"value":3118}," 目录避免层层拷贝，随后 ",{"type":173,"tag":672,"props":3120,"children":3122},{"className":3121},[],[3123],{"type":179,"value":3124},"pnpm build",{"type":179,"value":3126}," 产出 ",{"type":173,"tag":672,"props":3128,"children":3130},{"className":3129},[],[3131],{"type":179,"value":2911},{"type":179,"value":3133},"；接着在极简运行层（如 ",{"type":173,"tag":672,"props":3135,"children":3137},{"className":3136},[],[3138],{"type":179,"value":3139},"node:20-slim",{"type":179,"value":3141}," 或 distroless）只复制 ",{"type":173,"tag":672,"props":3143,"children":3145},{"className":3144},[],[3146],{"type":179,"value":2911},{"type":179,"value":1658},{"type":173,"tag":672,"props":3149,"children":3151},{"className":3150},[],[3152],{"type":179,"value":3153},"pnpm exec nitro preview",{"type":179,"value":3155}," 所需的 runtime node_modules，把最终镜像压到百 MB 以内并消除编译工具链。构建阶段把 ",{"type":173,"tag":672,"props":3157,"children":3159},{"className":3158},[],[3160],{"type":179,"value":3161},"public",{"type":179,"value":3163}," 里的静态文件或 ",{"type":173,"tag":672,"props":3165,"children":3167},{"className":3166},[],[3168],{"type":179,"value":3169},"nitro.prerender",{"type":179,"value":3171}," 生成的 HTML 推送到对象存储 / CDN Origin，运行层只负责 SSR API，浏览器请求首屏后剩余静态资源由 CDN Offload，实现动态冷启动 \u003C100 ms、静态命中率 99% 的全球加速。",{"type":173,"tag":626,"props":3173,"children":3175},{"id":3174},"监控指标的落地",[3176],{"type":179,"value":3177},"监控指标的落地？",{"type":173,"tag":181,"props":3179,"children":3180},{},[3181,3183,3189,3191,3197,3199,3205,3207,3213,3215,3221,3223,3229,3230,3236,3237,3243,3245,3251,3253,3258],{"type":179,"value":3182},"前端通过插件 (",{"type":173,"tag":672,"props":3184,"children":3186},{"className":3185},[],[3187],{"type":179,"value":3188},"plugins/sentry.client.ts",{"type":179,"value":3190},") 注入 Sentry / Datadog RUM，捕获 Vue 组件异常与 Web Vitals；服务端借助 Nitro 的 ",{"type":173,"tag":672,"props":3192,"children":3194},{"className":3193},[],[3195],{"type":179,"value":3196},"nitro:config",{"type":179,"value":3198}," 钩子和 ",{"type":173,"tag":672,"props":3200,"children":3202},{"className":3201},[],[3203],{"type":179,"value":3204},"runtimeConfig",{"type":179,"value":3206}," 动态注入 API Key，把新建的 ",{"type":173,"tag":672,"props":3208,"children":3210},{"className":3209},[],[3211],{"type":179,"value":3212},"server/plugins/apm.ts",{"type":179,"value":3214}," 包装 ",{"type":173,"tag":672,"props":3216,"children":3218},{"className":3217},[],[3219],{"type":179,"value":3220},"nitroApp.hooks",{"type":179,"value":3222},"（",{"type":173,"tag":672,"props":3224,"children":3226},{"className":3225},[],[3227],{"type":179,"value":3228},"request",{"type":179,"value":1046},{"type":173,"tag":672,"props":3231,"children":3233},{"className":3232},[],[3234],{"type":179,"value":3235},"error",{"type":179,"value":1046},{"type":173,"tag":672,"props":3238,"children":3240},{"className":3239},[],[3241],{"type":179,"value":3242},"response",{"type":179,"value":3244},") 将 Trace-ID 贯穿请求链；与此同时在 Vite SSR 打包阶段开启 ",{"type":173,"tag":672,"props":3246,"children":3248},{"className":3247},[],[3249],{"type":179,"value":3250},"@sentry/vite-plugin",{"type":179,"value":3252}," 生成 Source Map 供后台反解栈信息；生产环境再接入 New Relic/Elastic APM 的 Node SDK 监控 GC、CPU、外部依赖延迟，并将 ",{"type":173,"tag":672,"props":3254,"children":3256},{"className":3255},[],[3257],{"type":179,"value":2127},{"type":179,"value":3259}," 中的边缘缓存命中率写入自定义指标。这样一来，无论是客户端渲染错误、SSR 冷启动抖动，还是第三方 API 慢查询，都能在统一的仪表盘内以 Trace Waterfall 方式还原，真正实现 Nuxt 应用的全链路可观测。",{"type":173,"tag":620,"props":3261,"children":3263},{"id":3262},"性能安全与故障排查",[3264],{"type":179,"value":3265},"性能、安全与故障排查",{"type":173,"tag":626,"props":3267,"children":3269},{"id":3268},"bundle-拆分解析",[3270],{"type":179,"value":3271},"Bundle 拆分解析？",{"type":173,"tag":187,"props":3273,"children":3274},{},[3275,3288,3325],{"type":173,"tag":191,"props":3276,"children":3277},{},[3278,3280,3286],{"type":179,"value":3279},"dynamic import：在页面或组件中写 ",{"type":173,"tag":672,"props":3281,"children":3283},{"className":3282},[],[3284],{"type":179,"value":3285},"const Chart = defineAsyncComponent(() => import('@/components/Chart.vue'))",{"type":179,"value":3287},"，Rollup 会把 Chart 及其依赖拆成独立 chunk，只有当路由命中才按需下载，首屏 JS 负载可缩到几十 KB。",{"type":173,"tag":191,"props":3289,"children":3290},{},[3291,3293,3299,3301,3307,3309,3315,3317,3323],{"type":179,"value":3292},"vendor / commons chunk：借助 Vite 内置的 ",{"type":173,"tag":672,"props":3294,"children":3296},{"className":3295},[],[3297],{"type":179,"value":3298},"splitVendorChunkPlugin",{"type":179,"value":3300}," 与 Nuxt 的 ",{"type":173,"tag":672,"props":3302,"children":3304},{"className":3303},[],[3305],{"type":179,"value":3306},"app.build.transpile",{"type":179,"value":3308},"，第三方库（Vue、axios 等）被统一抽到 ",{"type":173,"tag":672,"props":3310,"children":3312},{"className":3311},[],[3313],{"type":179,"value":3314},"vendor.[hash].js",{"type":179,"value":3316},"，而多页共用的业务代码自动聚合到 ",{"type":173,"tag":672,"props":3318,"children":3320},{"className":3319},[],[3321],{"type":179,"value":3322},"commons.[hash].js",{"type":179,"value":3324},"；浏览器可长 Cache vendor，升级只需重拉变动较小的业务 chunk。",{"type":173,"tag":191,"props":3326,"children":3327},{},[3328,3330,3335,3336,3342,3344,3350,3352,3358],{"type":179,"value":3329},"payload extraction：SSR 时，Nuxt 将 ",{"type":173,"tag":672,"props":3331,"children":3333},{"className":3332},[],[3334],{"type":179,"value":2229},{"type":179,"value":1126},{"type":173,"tag":672,"props":3337,"children":3339},{"className":3338},[],[3340],{"type":179,"value":3341},"useState",{"type":179,"value":3343}," 产生的初始数据序列化为 ",{"type":173,"tag":672,"props":3345,"children":3347},{"className":3346},[],[3348],{"type":179,"value":3349},"payload.[hash].js",{"type":179,"value":3351}," 并内联 ",{"type":173,"tag":672,"props":3353,"children":3355},{"className":3354},[],[3356],{"type":179,"value":3357},"\u003Clink rel=\"modulepreload\">",{"type":179,"value":3359},"；客户端 Hydrate 时直接读这个文件而非二次请求 API，既避免 RTT，又让数据与视图版本一致。",{"type":173,"tag":626,"props":3361,"children":3363},{"id":3362},"资源优化速览",[3364],{"type":179,"value":3365},"资源优化速览？",{"type":173,"tag":187,"props":3367,"children":3368},{},[3369,3394,3458],{"type":173,"tag":191,"props":3370,"children":3371},{},[3372,3377,3379,3385,3386,3392],{"type":173,"tag":672,"props":3373,"children":3375},{"className":3374},[],[3376],{"type":179,"value":1217},{"type":179,"value":3378}," 组件会在 SSR 阶段根据容器宽度与 DPR 生成带尺寸和格式参数的 URL，运行时再由 IPX / Cloudinary 等服务动态转码为 AVIF/WebP，并默认懒加载；对首屏 Hero 图则可加 ",{"type":173,"tag":672,"props":3380,"children":3382},{"className":3381},[],[3383],{"type":179,"value":3384},"preload",{"type":179,"value":3028},{"type":173,"tag":672,"props":3387,"children":3389},{"className":3388},[],[3390],{"type":179,"value":3391},"sizes=\"100vw\"",{"type":179,"value":3393},"，让浏览器抢占式下载且避免 CLS。",{"type":173,"tag":191,"props":3395,"children":3396},{},[3397,3399,3404,3406,3412,3414,3419,3421,3427,3428,3434,3436,3442,3444,3450,3452,3457],{"type":179,"value":3398},"在 ",{"type":173,"tag":672,"props":3400,"children":3402},{"className":3401},[],[3403],{"type":179,"value":3018},{"type":179,"value":3405}," 的 ",{"type":173,"tag":672,"props":3407,"children":3409},{"className":3408},[],[3410],{"type":179,"value":3411},"app.head.script",{"type":179,"value":3413}," 或任意组件的 ",{"type":173,"tag":672,"props":3415,"children":3417},{"className":3416},[],[3418],{"type":179,"value":2517},{"type":179,"value":3420}," 标签里声明 ",{"type":173,"tag":672,"props":3422,"children":3424},{"className":3423},[],[3425],{"type":179,"value":3426},"defer",{"type":179,"value":1126},{"type":173,"tag":672,"props":3429,"children":3431},{"className":3430},[],[3432],{"type":179,"value":3433},"async",{"type":179,"value":3435},"，Nuxt 会连同 Vite chunk 自动注入，确保第三方 SDK（如 Analytics）异步执行，Vue hydration 不被阻塞；若脚本需在 ",{"type":173,"tag":672,"props":3437,"children":3439},{"className":3438},[],[3440],{"type":179,"value":3441},"DOMContentLoaded",{"type":179,"value":3443}," 前执行，可结合 ",{"type":173,"tag":672,"props":3445,"children":3447},{"className":3446},[],[3448],{"type":179,"value":3449},"inject",{"type":179,"value":3451}," 钩子内联一小段 bootstrap，再把大文件 ",{"type":173,"tag":672,"props":3453,"children":3455},{"className":3454},[],[3456],{"type":179,"value":3426},{"type":179,"value":870},{"type":173,"tag":191,"props":3459,"children":3460},{},[3461,3463,3469,3471,3476,3478,3484,3485,3491,3493,3498],{"type":179,"value":3462},"通过 ",{"type":173,"tag":672,"props":3464,"children":3466},{"className":3465},[],[3467],{"type":179,"value":3468},"\u003Clink rel=\"preload\">",{"type":179,"value":3470}," 把首屏必需的字体、关键 CSS 与拆分后的 ",{"type":173,"tag":672,"props":3472,"children":3474},{"className":3473},[],[3475],{"type":179,"value":3322},{"type":179,"value":3477}," 提前拉起，同时用 ",{"type":173,"tag":672,"props":3479,"children":3481},{"className":3480},[],[3482],{"type":179,"value":3483},"\u003Clink rel=\"prefetch\">",{"type":179,"value":1355},{"type":173,"tag":672,"props":3486,"children":3488},{"className":3487},[],[3489],{"type":179,"value":3490},"router.prefetchLinks=true",{"type":179,"value":3492}," 预取下一跳路由的动态 chunk，与 ",{"type":173,"tag":672,"props":3494,"children":3496},{"className":3495},[],[3497],{"type":179,"value":2229},{"type":179,"value":3499}," 的 payload 形成“代码+数据”双预热。",{"type":173,"tag":620,"props":3501,"children":3503},{"id":3502},"综合实战-场景题",[3504],{"type":179,"value":3505},"综合实战 / 场景题",{"type":173,"tag":626,"props":3507,"children":3509},{"id":3508},"为全球新闻站点选型-ssr-isr-架构考虑-seo缓存成本",[3510],{"type":179,"value":3511},"为全球新闻站点选型 SSR + ISR 架构，考虑 SEO、缓存、成本？",{"type":173,"tag":181,"props":3513,"children":3514},{},[3515],{"type":179,"value":3516},"以下从“渲染策略 → 缓存模型 → 成本测算”3 个维度，拆解在 Nuxt 3 中为全球新闻站点落地 SSR + ISR 的完整选型思路。",{"type":173,"tag":181,"props":3518,"children":3519},{},[3520],{"type":179,"value":3521},"一、渲染策略：SSR 抢时效，ISR 占高频",{"type":173,"tag":187,"props":3523,"children":3524},{},[3525,3564,3597],{"type":173,"tag":191,"props":3526,"children":3527},{},[3528,3530,3533,3535,3541,3543,3549,3551,3554,3556,3562],{"type":179,"value":3529},"首次请求（或缓存失效）",{"type":173,"tag":197,"props":3531,"children":3532},{},[],{"type":179,"value":3534},"\n• 走 SSR：",{"type":173,"tag":672,"props":3536,"children":3538},{"className":3537},[],[3539],{"type":179,"value":3540},"nitro",{"type":179,"value":3542}," 在 Edge Function / λ 中执行，读取最新稿件 API，返回带完整 ",{"type":173,"tag":672,"props":3544,"children":3546},{"className":3545},[],[3547],{"type":179,"value":3548},"\u003Chtml>",{"type":179,"value":3550}," 的响应，让搜索引擎立即抓取 → 解决“时效 + SEO”。",{"type":173,"tag":197,"props":3552,"children":3553},{},[],{"type":179,"value":3555},"\n• 同时在 ",{"type":173,"tag":672,"props":3557,"children":3559},{"className":3558},[],[3560],{"type":179,"value":3561},"event.waitUntil()",{"type":179,"value":3563}," 中将 HTML + Nuxt Payload 写入边缘 KV / Object Storage，供后续命中。",{"type":173,"tag":191,"props":3565,"children":3566},{},[3567,3569,3572,3574,3579,3581,3587,3589,3595],{"type":179,"value":3568},"后续请求",{"type":173,"tag":197,"props":3570,"children":3571},{},[],{"type":179,"value":3573},"\n• 触发 ISR：在 ",{"type":173,"tag":672,"props":3575,"children":3577},{"className":3576},[],[3578],{"type":179,"value":2127},{"type":179,"value":3580}," 设置 ",{"type":173,"tag":672,"props":3582,"children":3584},{"className":3583},[],[3585],{"type":179,"value":3586},"isr: { revalidate: 60 }",{"type":179,"value":3588},"（热稿 60 s，冷稿 30 min+）。边缘先返回静态副本，后台异步比较 ",{"type":173,"tag":672,"props":3590,"children":3592},{"className":3591},[],[3593],{"type":179,"value":3594},"etag",{"type":179,"value":3596},"，若已过期则静默回源重新 SSR 并覆盖缓存，用户永远拿到“(准)最新 + 秒开”的页面。",{"type":173,"tag":191,"props":3598,"children":3599},{},[3600,3602,3605,3607,3613,3615,3621,3623,3629],{"type":179,"value":3601},"On-Demand Revalidate",{"type":173,"tag":197,"props":3603,"children":3604},{},[],{"type":179,"value":3606},"\n• 重大更正/突发新闻可在 CMS 发布时调用 ",{"type":173,"tag":672,"props":3608,"children":3610},{"className":3609},[],[3611],{"type":179,"value":3612},"/api/revalidate?slug=/2025/07/30/foo",{"type":179,"value":3614},"；",{"type":173,"tag":672,"props":3616,"children":3618},{"className":3617},[],[3619],{"type":179,"value":3620},"defineEventHandler",{"type":179,"value":3622}," 中用 ",{"type":173,"tag":672,"props":3624,"children":3626},{"className":3625},[],[3627],{"type":179,"value":3628},"nitro.revalidatePath()",{"type":179,"value":3630}," 即时失效边缘副本，确保分钟级刷新。",{"type":173,"tag":181,"props":3632,"children":3633},{},[3634],{"type":179,"value":3635},"二、缓存模型：三层护航",{"type":173,"tag":187,"props":3637,"children":3638},{},[3639,3682,3714],{"type":173,"tag":191,"props":3640,"children":3641},{},[3642,3644,3647,3648,3654,3657,3658,3664,3666,3672,3674,3680],{"type":179,"value":3643},"CDN Layer",{"type":173,"tag":197,"props":3645,"children":3646},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":3649,"children":3651},{"className":3650},[],[3652],{"type":179,"value":3653},"surrogate-control: max-age=0, stale-while-revalidate=300",{"type":173,"tag":197,"props":3655,"children":3656},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":3659,"children":3661},{"className":3660},[],[3662],{"type":179,"value":3663},"cache-tag: article:{id}",{"type":179,"value":3665}," 方便批量 purge（Cloudflare ",{"type":173,"tag":672,"props":3667,"children":3669},{"className":3668},[],[3670],{"type":179,"value":3671},"tag",{"type":179,"value":3673},", Fastly ",{"type":173,"tag":672,"props":3675,"children":3677},{"className":3676},[],[3678],{"type":179,"value":3679},"surrogate-key",{"type":179,"value":3681},"）。",{"type":173,"tag":191,"props":3683,"children":3684},{},[3685,3687,3690,3692,3698,3699,3705,3707,3712],{"type":179,"value":3686},"Edge KV / R2 / S3",{"type":173,"tag":197,"props":3688,"children":3689},{},[],{"type":179,"value":3691},"\n• 存 ISR 产物（HTML + ",{"type":173,"tag":672,"props":3693,"children":3695},{"className":3694},[],[3696],{"type":179,"value":3697},"payload.js",{"type":179,"value":3681},{"type":173,"tag":672,"props":3700,"children":3702},{"className":3701},[],[3703],{"type":179,"value":3704},"cache-control: public, max-age=31536000, immutable",{"type":179,"value":3706},"，真正失效由上层 CDN + Nuxt ",{"type":173,"tag":672,"props":3708,"children":3710},{"className":3709},[],[3711],{"type":179,"value":792},{"type":179,"value":3713}," 决定。",{"type":173,"tag":191,"props":3715,"children":3716},{},[3717,3719,3722,3724,3730,3732,3738],{"type":179,"value":3718},"Browser Layer",{"type":173,"tag":197,"props":3720,"children":3721},{},[],{"type":179,"value":3723},"\n• 同样利用 ",{"type":173,"tag":672,"props":3725,"children":3727},{"className":3726},[],[3728],{"type":179,"value":3729},"immutable",{"type":179,"value":3731}," 静态资产 + HTTP/3 分片，结合 ",{"type":173,"tag":672,"props":3733,"children":3735},{"className":3734},[],[3736],{"type":179,"value":3737},"\u003Cscript type=\"application/json\" id=\"payload\">",{"type":179,"value":3739}," 避免二次 API 拉取。",{"type":173,"tag":181,"props":3741,"children":3742},{},[3743],{"type":179,"value":3744},"三、成本测算：≈纯 SSG 的 1.3–1.5 倍",{"type":173,"tag":181,"props":3746,"children":3747},{},[3748,3750,3753,3755,3761,3763,3766,3768,3771],{"type":179,"value":3749},"假设全球日 PV 5,000 万，90 % 命中边缘静态：",{"type":173,"tag":197,"props":3751,"children":3752},{},[],{"type":179,"value":3754},"\n• SSR λ 调用：500 万 / 日 × 5 ms ≈ 25 GB-",{"type":173,"tag":3756,"props":3757,"children":3758},"em",{},[3759],{"type":179,"value":3760},"ms",{"type":179,"value":3762},"（Cloudflare D1 或 AWS Lambda@Edge 按请求+时间计费），成本个位数美元。",{"type":173,"tag":197,"props":3764,"children":3765},{},[],{"type":179,"value":3767},"\n• KV 存储：页面 200 KB × 2 万 热稿 ≈ 4 GB，成本 \u003C 1 美元/月。",{"type":173,"tag":197,"props":3769,"children":3770},{},[],{"type":179,"value":3772},"\n• 原生 SSR 集群若全量处理需 4–6 台 4C8G 实例；采用 SSR+ISR 只需 1–2 台作“回源”，边缘高峰全靠静态，实例费节省约 60 %。",{"type":173,"tag":181,"props":3774,"children":3775},{},[3776],{"type":179,"value":3777},"四、Nuxt 实操要点",{"type":173,"tag":187,"props":3779,"children":3780},{},[3781],{"type":173,"tag":191,"props":3782,"children":3783},{},[3784],{"type":179,"value":3018},{"type":173,"tag":1766,"props":3786,"children":3790},{"className":3787,"code":3788,"language":3789,"meta":166,"style":166},"language-ts shiki shiki-themes material-theme-lighter github-light github-dark monokai","export default defineNuxtConfig({\n  routeRules: {\n    '/news/**': { isr: { revalidate: 60 } },   // 热点\n    '/opinion/**': { isr: { revalidate: 1800 } } // 长尾\n  },\n  nitro: {\n    preset: 'cloudflare',           // 或 'aws-lambda'\n    storage: {\n      'cache': { driver: 'cloudflare-kv', binding: 'NEWS_KV' }\n    }\n  }\n})\n","ts",[3791],{"type":173,"tag":672,"props":3792,"children":3793},{"__ignoreMap":166},[3794,3822,3839,3909,3972,3981,3998,4034,4051,4130,4139,4148],{"type":173,"tag":1776,"props":3795,"children":3796},{"class":1778,"line":1779},[3797,3803,3808,3813,3817],{"type":173,"tag":1776,"props":3798,"children":3800},{"style":3799},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[3801],{"type":179,"value":3802},"export",{"type":173,"tag":1776,"props":3804,"children":3805},{"style":3799},[3806],{"type":179,"value":3807}," default",{"type":173,"tag":1776,"props":3809,"children":3810},{"style":1810},[3811],{"type":179,"value":3812}," defineNuxtConfig",{"type":173,"tag":1776,"props":3814,"children":3815},{"style":1815},[3816],{"type":179,"value":1818},{"type":173,"tag":1776,"props":3818,"children":3819},{"style":1783},[3820],{"type":179,"value":3821},"{\n",{"type":173,"tag":1776,"props":3823,"children":3824},{"class":1778,"line":1806},[3825,3830,3834],{"type":173,"tag":1776,"props":3826,"children":3827},{"style":1826},[3828],{"type":179,"value":3829},"  routeRules",{"type":173,"tag":1776,"props":3831,"children":3832},{"style":1783},[3833],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3835,"children":3836},{"style":1783},[3837],{"type":179,"value":3838}," {\n",{"type":173,"tag":1776,"props":3840,"children":3841},{"class":1778,"line":1864},[3842,3847,3853,3857,3861,3866,3871,3875,3879,3884,3888,3894,3898,3903],{"type":173,"tag":1776,"props":3843,"children":3844},{"style":1837},[3845],{"type":179,"value":3846},"    '",{"type":173,"tag":1776,"props":3848,"children":3850},{"style":3849},"--shiki-light:#E53935;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[3851],{"type":179,"value":3852},"/news/**",{"type":173,"tag":1776,"props":3854,"children":3855},{"style":1837},[3856],{"type":179,"value":1851},{"type":173,"tag":1776,"props":3858,"children":3859},{"style":1783},[3860],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3862,"children":3863},{"style":1783},[3864],{"type":179,"value":3865}," {",{"type":173,"tag":1776,"props":3867,"children":3868},{"style":1826},[3869],{"type":179,"value":3870}," isr",{"type":173,"tag":1776,"props":3872,"children":3873},{"style":1783},[3874],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3876,"children":3877},{"style":1783},[3878],{"type":179,"value":3865},{"type":173,"tag":1776,"props":3880,"children":3881},{"style":1826},[3882],{"type":179,"value":3883}," revalidate",{"type":173,"tag":1776,"props":3885,"children":3886},{"style":1783},[3887],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3889,"children":3891},{"style":3890},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[3892],{"type":179,"value":3893}," 60",{"type":173,"tag":1776,"props":3895,"children":3896},{"style":1783},[3897],{"type":179,"value":1856},{"type":173,"tag":1776,"props":3899,"children":3900},{"style":1783},[3901],{"type":179,"value":3902}," },",{"type":173,"tag":1776,"props":3904,"children":3906},{"style":3905},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[3907],{"type":179,"value":3908},"   // 热点\n",{"type":173,"tag":1776,"props":3910,"children":3912},{"class":1778,"line":3911},4,[3913,3917,3922,3926,3930,3934,3938,3942,3946,3950,3954,3959,3963,3967],{"type":173,"tag":1776,"props":3914,"children":3915},{"style":1837},[3916],{"type":179,"value":3846},{"type":173,"tag":1776,"props":3918,"children":3919},{"style":3849},[3920],{"type":179,"value":3921},"/opinion/**",{"type":173,"tag":1776,"props":3923,"children":3924},{"style":1837},[3925],{"type":179,"value":1851},{"type":173,"tag":1776,"props":3927,"children":3928},{"style":1783},[3929],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3931,"children":3932},{"style":1783},[3933],{"type":179,"value":3865},{"type":173,"tag":1776,"props":3935,"children":3936},{"style":1826},[3937],{"type":179,"value":3870},{"type":173,"tag":1776,"props":3939,"children":3940},{"style":1783},[3941],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3943,"children":3944},{"style":1783},[3945],{"type":179,"value":3865},{"type":173,"tag":1776,"props":3947,"children":3948},{"style":1826},[3949],{"type":179,"value":3883},{"type":173,"tag":1776,"props":3951,"children":3952},{"style":1783},[3953],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3955,"children":3956},{"style":3890},[3957],{"type":179,"value":3958}," 1800",{"type":173,"tag":1776,"props":3960,"children":3961},{"style":1783},[3962],{"type":179,"value":1856},{"type":173,"tag":1776,"props":3964,"children":3965},{"style":1783},[3966],{"type":179,"value":1856},{"type":173,"tag":1776,"props":3968,"children":3969},{"style":3905},[3970],{"type":179,"value":3971}," // 长尾\n",{"type":173,"tag":1776,"props":3973,"children":3975},{"class":1778,"line":3974},5,[3976],{"type":173,"tag":1776,"props":3977,"children":3978},{"style":1783},[3979],{"type":179,"value":3980},"  },\n",{"type":173,"tag":1776,"props":3982,"children":3984},{"class":1778,"line":3983},6,[3985,3990,3994],{"type":173,"tag":1776,"props":3986,"children":3987},{"style":1826},[3988],{"type":179,"value":3989},"  nitro",{"type":173,"tag":1776,"props":3991,"children":3992},{"style":1783},[3993],{"type":179,"value":1834},{"type":173,"tag":1776,"props":3995,"children":3996},{"style":1783},[3997],{"type":179,"value":3838},{"type":173,"tag":1776,"props":3999,"children":4001},{"class":1778,"line":4000},7,[4002,4007,4011,4015,4020,4024,4029],{"type":173,"tag":1776,"props":4003,"children":4004},{"style":1826},[4005],{"type":179,"value":4006},"    preset",{"type":173,"tag":1776,"props":4008,"children":4009},{"style":1783},[4010],{"type":179,"value":1834},{"type":173,"tag":1776,"props":4012,"children":4013},{"style":1837},[4014],{"type":179,"value":1840},{"type":173,"tag":1776,"props":4016,"children":4017},{"style":1843},[4018],{"type":179,"value":4019},"cloudflare",{"type":173,"tag":1776,"props":4021,"children":4022},{"style":1837},[4023],{"type":179,"value":1851},{"type":173,"tag":1776,"props":4025,"children":4026},{"style":1783},[4027],{"type":179,"value":4028},",",{"type":173,"tag":1776,"props":4030,"children":4031},{"style":3905},[4032],{"type":179,"value":4033},"           // 或 'aws-lambda'\n",{"type":173,"tag":1776,"props":4035,"children":4037},{"class":1778,"line":4036},8,[4038,4043,4047],{"type":173,"tag":1776,"props":4039,"children":4040},{"style":1826},[4041],{"type":179,"value":4042},"    storage",{"type":173,"tag":1776,"props":4044,"children":4045},{"style":1783},[4046],{"type":179,"value":1834},{"type":173,"tag":1776,"props":4048,"children":4049},{"style":1783},[4050],{"type":179,"value":3838},{"type":173,"tag":1776,"props":4052,"children":4054},{"class":1778,"line":4053},9,[4055,4060,4065,4069,4073,4077,4082,4086,4090,4095,4099,4103,4108,4112,4116,4121,4125],{"type":173,"tag":1776,"props":4056,"children":4057},{"style":1837},[4058],{"type":179,"value":4059},"      '",{"type":173,"tag":1776,"props":4061,"children":4062},{"style":3849},[4063],{"type":179,"value":4064},"cache",{"type":173,"tag":1776,"props":4066,"children":4067},{"style":1837},[4068],{"type":179,"value":1851},{"type":173,"tag":1776,"props":4070,"children":4071},{"style":1783},[4072],{"type":179,"value":1834},{"type":173,"tag":1776,"props":4074,"children":4075},{"style":1783},[4076],{"type":179,"value":3865},{"type":173,"tag":1776,"props":4078,"children":4079},{"style":1826},[4080],{"type":179,"value":4081}," driver",{"type":173,"tag":1776,"props":4083,"children":4084},{"style":1783},[4085],{"type":179,"value":1834},{"type":173,"tag":1776,"props":4087,"children":4088},{"style":1837},[4089],{"type":179,"value":1840},{"type":173,"tag":1776,"props":4091,"children":4092},{"style":1843},[4093],{"type":179,"value":4094},"cloudflare-kv",{"type":173,"tag":1776,"props":4096,"children":4097},{"style":1837},[4098],{"type":179,"value":1851},{"type":173,"tag":1776,"props":4100,"children":4101},{"style":1783},[4102],{"type":179,"value":4028},{"type":173,"tag":1776,"props":4104,"children":4105},{"style":1826},[4106],{"type":179,"value":4107}," binding",{"type":173,"tag":1776,"props":4109,"children":4110},{"style":1783},[4111],{"type":179,"value":1834},{"type":173,"tag":1776,"props":4113,"children":4114},{"style":1837},[4115],{"type":179,"value":1840},{"type":173,"tag":1776,"props":4117,"children":4118},{"style":1843},[4119],{"type":179,"value":4120},"NEWS_KV",{"type":173,"tag":1776,"props":4122,"children":4123},{"style":1837},[4124],{"type":179,"value":1851},{"type":173,"tag":1776,"props":4126,"children":4127},{"style":1783},[4128],{"type":179,"value":4129}," }\n",{"type":173,"tag":1776,"props":4131,"children":4133},{"class":1778,"line":4132},10,[4134],{"type":173,"tag":1776,"props":4135,"children":4136},{"style":1783},[4137],{"type":179,"value":4138},"    }\n",{"type":173,"tag":1776,"props":4140,"children":4142},{"class":1778,"line":4141},11,[4143],{"type":173,"tag":1776,"props":4144,"children":4145},{"style":1783},[4146],{"type":179,"value":4147},"  }\n",{"type":173,"tag":1776,"props":4149,"children":4151},{"class":1778,"line":4150},12,[4152,4157],{"type":173,"tag":1776,"props":4153,"children":4154},{"style":1783},[4155],{"type":179,"value":4156},"}",{"type":173,"tag":1776,"props":4158,"children":4159},{"style":1815},[4160],{"type":179,"value":1861},{"type":173,"tag":187,"props":4162,"children":4163},{"start":1806},[4164,4217],{"type":173,"tag":191,"props":4165,"children":4166},{},[4167,4169,4172,4173,4179,4181,4187,4188,4194,4196,4199,4201,4207,4209,4215],{"type":179,"value":4168},"SEO 细节",{"type":173,"tag":197,"props":4170,"children":4171},{},[],{"type":179,"value":1525},{"type":173,"tag":672,"props":4174,"children":4176},{"className":4175},[],[4177],{"type":179,"value":4178},"\u003Chead>",{"type":179,"value":4180}," 仍由 SSR 输出最新 ",{"type":173,"tag":672,"props":4182,"children":4184},{"className":4183},[],[4185],{"type":179,"value":4186},"\u003Ctitle>",{"type":179,"value":1355},{"type":173,"tag":672,"props":4189,"children":4191},{"className":4190},[],[4192],{"type":179,"value":4193},"\u003Cmeta property=\"og:*\">",{"type":179,"value":4195},"，保证社交分享预览更新。",{"type":173,"tag":197,"props":4197,"children":4198},{},[],{"type":179,"value":4200},"\n• 新闻规范化：设置 ",{"type":173,"tag":672,"props":4202,"children":4204},{"className":4203},[],[4205],{"type":179,"value":4206},"sitemap: { autoLastmod: true, gzip: true }",{"type":179,"value":4208},"，并用 ",{"type":173,"tag":672,"props":4210,"children":4212},{"className":4211},[],[4213],{"type":179,"value":4214},"x-robots-tag: noindex",{"type":179,"value":4216}," 避免旧 URL 重复。",{"type":173,"tag":191,"props":4218,"children":4219},{},[4220,4222,4225,4227,4233,4235,4238],{"type":179,"value":4221},"安全 & 完整性",{"type":173,"tag":197,"props":4223,"children":4224},{},[],{"type":179,"value":4226},"\n• HTML 缓存前通过 ",{"type":173,"tag":672,"props":4228,"children":4230},{"className":4229},[],[4231],{"type":179,"value":4232},"transformHtml",{"type":179,"value":4234}," 钩子注入 nonce-based CSP，防边缘篡改。",{"type":173,"tag":197,"props":4236,"children":4237},{},[],{"type":179,"value":4239},"\n• 对 KV 写入加 SHA-256 摘要；Edge 取出时校验，避免脏数据回注 CDN。",{"type":173,"tag":626,"props":4241,"children":4243},{"id":4242},"生产环境出现-hydration-mismatch如何快速定位",[4244],{"type":179,"value":4245},"生产环境出现 hydration mismatch，如何快速定位？",{"type":173,"tag":181,"props":4247,"children":4248},{},[4249],{"type":179,"value":4250},"要在线上（已压缩、已 CDN 化、不可断点调试）的 Nuxt 3 站点里“秒级”定位 hydration mismatch，可以按下面 5 步建立一条从告警 → 复现 → 精确 diff → 代码回溯的排查流水线。整套方法兼顾了生产环境的可观测性、边缘缓存、以及 Nuxt SSR/CSR 双栈特性，前端专家可以直接落地。",{"type":173,"tag":187,"props":4252,"children":4253},{},[4254],{"type":173,"tag":191,"props":4255,"children":4256},{},[4257,4259,4262,4264,4270,4272,4278,4280,4285],{"type":179,"value":4258},"先让问题“可见”——在生产也打出精准告警",{"type":173,"tag":197,"props":4260,"children":4261},{},[],{"type":179,"value":4263},"\n• 在 ",{"type":173,"tag":672,"props":4265,"children":4267},{"className":4266},[],[4268],{"type":179,"value":4269},"app.config.ts",{"type":179,"value":4271}," 中打开框架原生的 ",{"type":173,"tag":672,"props":4273,"children":4275},{"className":4274},[],[4276],{"type":179,"value":4277},"experimental.payloadExtraction",{"type":179,"value":4279}," 并给 ",{"type":173,"tag":672,"props":4281,"children":4283},{"className":4282},[],[4284],{"type":179,"value":1770},{"type":179,"value":4286}," runtime 打补丁：",{"type":173,"tag":1766,"props":4288,"children":4290},{"className":3787,"code":4289,"language":3789,"meta":166,"style":166},"if (process.client && !import.meta.dev) {\n  const _hydrate = window.__NUXT__.config.hydrateErrorHandler\n  window.__NUXT__.config.hydrateErrorHandler = (err, vnode) => {\n    console.error('[HYDRATE]', vnode?.type?.name, err)\n    // 上报到 Sentry / Datadog，自带 vnode key + route.fullPath\n    _hydrate?.(err, vnode)\n  }\n}\n",[4291],{"type":173,"tag":672,"props":4292,"children":4293},{"__ignoreMap":166},[4294,4353,4403,4474,4547,4555,4587,4594],{"type":173,"tag":1776,"props":4295,"children":4296},{"class":1778,"line":1779},[4297,4302,4307,4311,4316,4322,4327,4331,4335,4340,4344,4349],{"type":173,"tag":1776,"props":4298,"children":4299},{"style":3799},[4300],{"type":179,"value":4301},"if",{"type":173,"tag":1776,"props":4303,"children":4304},{"style":1815},[4305],{"type":179,"value":4306}," (process",{"type":173,"tag":1776,"props":4308,"children":4309},{"style":1783},[4310],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4312,"children":4313},{"style":1815},[4314],{"type":179,"value":4315},"client ",{"type":173,"tag":1776,"props":4317,"children":4319},{"style":4318},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[4320],{"type":179,"value":4321},"&&",{"type":173,"tag":1776,"props":4323,"children":4324},{"style":4318},[4325],{"type":179,"value":4326}," !",{"type":173,"tag":1776,"props":4328,"children":4329},{"style":3799},[4330],{"type":179,"value":936},{"type":173,"tag":1776,"props":4332,"children":4333},{"style":1783},[4334],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4336,"children":4338},{"style":4337},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[4339],{"type":179,"value":1988},{"type":173,"tag":1776,"props":4341,"children":4342},{"style":1783},[4343],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4345,"children":4346},{"style":1815},[4347],{"type":179,"value":4348},"dev) ",{"type":173,"tag":1776,"props":4350,"children":4351},{"style":1783},[4352],{"type":179,"value":3821},{"type":173,"tag":1776,"props":4354,"children":4355},{"class":1778,"line":1806},[4356,4362,4367,4372,4377,4381,4385,4389,4394,4398],{"type":173,"tag":1776,"props":4357,"children":4359},{"style":4358},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[4360],{"type":179,"value":4361},"  const",{"type":173,"tag":1776,"props":4363,"children":4364},{"style":4337},[4365],{"type":179,"value":4366}," _hydrate",{"type":173,"tag":1776,"props":4368,"children":4369},{"style":4318},[4370],{"type":179,"value":4371}," =",{"type":173,"tag":1776,"props":4373,"children":4374},{"style":1815},[4375],{"type":179,"value":4376}," window",{"type":173,"tag":1776,"props":4378,"children":4379},{"style":1783},[4380],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4382,"children":4383},{"style":1815},[4384],{"type":179,"value":2629},{"type":173,"tag":1776,"props":4386,"children":4387},{"style":1783},[4388],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4390,"children":4391},{"style":1815},[4392],{"type":179,"value":4393},"config",{"type":173,"tag":1776,"props":4395,"children":4396},{"style":1783},[4397],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4399,"children":4400},{"style":1815},[4401],{"type":179,"value":4402},"hydrateErrorHandler\n",{"type":173,"tag":1776,"props":4404,"children":4405},{"class":1778,"line":1864},[4406,4411,4415,4419,4423,4427,4431,4436,4440,4445,4451,4455,4460,4465,4470],{"type":173,"tag":1776,"props":4407,"children":4408},{"style":1815},[4409],{"type":179,"value":4410},"  window",{"type":173,"tag":1776,"props":4412,"children":4413},{"style":1783},[4414],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4416,"children":4417},{"style":1815},[4418],{"type":179,"value":2629},{"type":173,"tag":1776,"props":4420,"children":4421},{"style":1783},[4422],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4424,"children":4425},{"style":1815},[4426],{"type":179,"value":4393},{"type":173,"tag":1776,"props":4428,"children":4429},{"style":1783},[4430],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4432,"children":4433},{"style":1810},[4434],{"type":179,"value":4435},"hydrateErrorHandler",{"type":173,"tag":1776,"props":4437,"children":4438},{"style":4318},[4439],{"type":179,"value":4371},{"type":173,"tag":1776,"props":4441,"children":4442},{"style":1783},[4443],{"type":179,"value":4444}," (",{"type":173,"tag":1776,"props":4446,"children":4448},{"style":4447},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[4449],{"type":179,"value":4450},"err",{"type":173,"tag":1776,"props":4452,"children":4453},{"style":1783},[4454],{"type":179,"value":4028},{"type":173,"tag":1776,"props":4456,"children":4457},{"style":4447},[4458],{"type":179,"value":4459}," vnode",{"type":173,"tag":1776,"props":4461,"children":4462},{"style":1783},[4463],{"type":179,"value":4464},")",{"type":173,"tag":1776,"props":4466,"children":4467},{"style":4358},[4468],{"type":179,"value":4469}," =>",{"type":173,"tag":1776,"props":4471,"children":4472},{"style":1783},[4473],{"type":179,"value":3838},{"type":173,"tag":1776,"props":4475,"children":4476},{"class":1778,"line":3911},[4477,4482,4486,4490,4494,4498,4503,4507,4511,4515,4520,4525,4529,4534,4538,4543],{"type":173,"tag":1776,"props":4478,"children":4479},{"style":1815},[4480],{"type":179,"value":4481},"    console",{"type":173,"tag":1776,"props":4483,"children":4484},{"style":1783},[4485],{"type":179,"value":1751},{"type":173,"tag":1776,"props":4487,"children":4488},{"style":1810},[4489],{"type":179,"value":3235},{"type":173,"tag":1776,"props":4491,"children":4492},{"style":1826},[4493],{"type":179,"value":1818},{"type":173,"tag":1776,"props":4495,"children":4496},{"style":1837},[4497],{"type":179,"value":1851},{"type":173,"tag":1776,"props":4499,"children":4500},{"style":1843},[4501],{"type":179,"value":4502},"[HYDRATE]",{"type":173,"tag":1776,"props":4504,"children":4505},{"style":1837},[4506],{"type":179,"value":1851},{"type":173,"tag":1776,"props":4508,"children":4509},{"style":1783},[4510],{"type":179,"value":4028},{"type":173,"tag":1776,"props":4512,"children":4513},{"style":1815},[4514],{"type":179,"value":4459},{"type":173,"tag":1776,"props":4516,"children":4517},{"style":1783},[4518],{"type":179,"value":4519},"?.",{"type":173,"tag":1776,"props":4521,"children":4522},{"style":1815},[4523],{"type":179,"value":4524},"type",{"type":173,"tag":1776,"props":4526,"children":4527},{"style":1783},[4528],{"type":179,"value":4519},{"type":173,"tag":1776,"props":4530,"children":4531},{"style":1815},[4532],{"type":179,"value":4533},"name",{"type":173,"tag":1776,"props":4535,"children":4536},{"style":1783},[4537],{"type":179,"value":4028},{"type":173,"tag":1776,"props":4539,"children":4540},{"style":1815},[4541],{"type":179,"value":4542}," err",{"type":173,"tag":1776,"props":4544,"children":4545},{"style":1826},[4546],{"type":179,"value":1861},{"type":173,"tag":1776,"props":4548,"children":4549},{"class":1778,"line":3974},[4550],{"type":173,"tag":1776,"props":4551,"children":4552},{"style":3905},[4553],{"type":179,"value":4554},"    // 上报到 Sentry / Datadog，自带 vnode key + route.fullPath\n",{"type":173,"tag":1776,"props":4556,"children":4557},{"class":1778,"line":3983},[4558,4563,4567,4571,4575,4579,4583],{"type":173,"tag":1776,"props":4559,"children":4560},{"style":1810},[4561],{"type":179,"value":4562},"    _hydrate",{"type":173,"tag":1776,"props":4564,"children":4565},{"style":1783},[4566],{"type":179,"value":4519},{"type":173,"tag":1776,"props":4568,"children":4569},{"style":1826},[4570],{"type":179,"value":1818},{"type":173,"tag":1776,"props":4572,"children":4573},{"style":1815},[4574],{"type":179,"value":4450},{"type":173,"tag":1776,"props":4576,"children":4577},{"style":1783},[4578],{"type":179,"value":4028},{"type":173,"tag":1776,"props":4580,"children":4581},{"style":1815},[4582],{"type":179,"value":4459},{"type":173,"tag":1776,"props":4584,"children":4585},{"style":1826},[4586],{"type":179,"value":1861},{"type":173,"tag":1776,"props":4588,"children":4589},{"class":1778,"line":4000},[4590],{"type":173,"tag":1776,"props":4591,"children":4592},{"style":1783},[4593],{"type":179,"value":4147},{"type":173,"tag":1776,"props":4595,"children":4596},{"class":1778,"line":4036},[4597],{"type":173,"tag":1776,"props":4598,"children":4599},{"style":1783},[4600],{"type":179,"value":4601},"}\n",{"type":173,"tag":181,"props":4603,"children":4604},{},[4605],{"type":179,"value":4606},"• 这样一旦出现 mismatch，Sentry Issue 会带：",{"type":173,"tag":1417,"props":4608,"children":4609},{},[4610,4615,4620],{"type":173,"tag":191,"props":4611,"children":4612},{},[4613],{"type":179,"value":4614},"组件名",{"type":173,"tag":191,"props":4616,"children":4617},{},[4618],{"type":179,"value":4619},"错误栈（client）",{"type":173,"tag":191,"props":4621,"children":4622},{},[4623,4625,4631],{"type":179,"value":4624},"当时的 ",{"type":173,"tag":672,"props":4626,"children":4628},{"className":4627},[],[4629],{"type":179,"value":4630},"route.fullPath",{"type":179,"value":4632}," & query，方便回放。",{"type":173,"tag":187,"props":4634,"children":4635},{"start":1806},[4636,4691],{"type":173,"tag":191,"props":4637,"children":4638},{},[4639,4641,4644,4646,4652,4654,4660,4662,4668,4670,4673,4675,4681,4683,4689],{"type":179,"value":4640},"把“失配 HTML”一并抓取，便于离线 diff",{"type":173,"tag":197,"props":4642,"children":4643},{},[],{"type":179,"value":4645},"\n• 在 Nitro ",{"type":173,"tag":672,"props":4647,"children":4649},{"className":4648},[],[4650],{"type":179,"value":4651},"onBeforeResponse",{"type":179,"value":4653}," 钩子里，如果检测到请求头有 ",{"type":173,"tag":672,"props":4655,"children":4657},{"className":4656},[],[4658],{"type":179,"value":4659},"x-dump-html: 1",{"type":179,"value":4661},"，就在响应头里回传 ",{"type":173,"tag":672,"props":4663,"children":4665},{"className":4664},[],[4666],{"type":179,"value":4667},"x-html-digest: \u003Csha1>",{"type":179,"value":4669}," 并把完整 HTML 追加到对象存储（R2/S3）。",{"type":173,"tag":197,"props":4671,"children":4672},{},[],{"type":179,"value":4674},"\n• Sentry 里捕获到 hydration mismatch 后，用同一个 ",{"type":173,"tag":672,"props":4676,"children":4678},{"className":4677},[],[4679],{"type":179,"value":4680},"sha1",{"type":179,"value":4682}," 去拉这份 SSR HTML；浏览器端则可通过 ",{"type":173,"tag":672,"props":4684,"children":4686},{"className":4685},[],[4687],{"type":179,"value":4688},"document.documentElement.outerHTML",{"type":179,"value":4690}," 拿到 CSR 结果。",{"type":173,"tag":191,"props":4692,"children":4693},{},[4694,4696,4699,4701,4707],{"type":179,"value":4695},"做自动化 DOM Diff，快速锁定“哪一块”错",{"type":173,"tag":197,"props":4697,"children":4698},{},[],{"type":179,"value":4700},"\n• 使用 ",{"type":173,"tag":672,"props":4702,"children":4704},{"className":4703},[],[4705],{"type":179,"value":4706},"diffDOM",{"type":179,"value":4708},"（或自研简单比较脚本）在 CI 里把两份 HTML 做节点对比：",{"type":173,"tag":1417,"props":4710,"children":4711},{},[4712,4754,4767],{"type":173,"tag":191,"props":4713,"children":4714},{},[4715,4717,4722,4723,4729,4730,4736,4738,4744,4746,4752],{"type":179,"value":4716},"元数据不一致，经常是 ",{"type":173,"tag":672,"props":4718,"children":4720},{"className":4719},[],[4721],{"type":179,"value":1988},{"type":179,"value":1046},{"type":173,"tag":672,"props":4724,"children":4726},{"className":4725},[],[4727],{"type":179,"value":4728},"title",{"type":179,"value":1046},{"type":173,"tag":672,"props":4731,"children":4733},{"className":4732},[],[4734],{"type":179,"value":4735},"link",{"type":179,"value":4737}," → 大概率由 ",{"type":173,"tag":672,"props":4739,"children":4741},{"className":4740},[],[4742],{"type":179,"value":4743},"useHead",{"type":179,"value":4745}," 里写 ",{"type":173,"tag":672,"props":4747,"children":4749},{"className":4748},[],[4750],{"type":179,"value":4751},"process.client",{"type":179,"value":4753}," 条件导致。",{"type":173,"tag":191,"props":4755,"children":4756},{},[4757,4759,4765],{"type":179,"value":4758},"动态列表顺序 / 长度不一致，聚焦 ",{"type":173,"tag":672,"props":4760,"children":4762},{"className":4761},[],[4763],{"type":179,"value":4764},":key",{"type":179,"value":4766}," 或数据源不一致。",{"type":173,"tag":191,"props":4768,"children":4769},{},[4770,4772,4775],{"type":179,"value":4771},"文本节点不同，通常是时区 / locale / random ID。",{"type":173,"tag":197,"props":4773,"children":4774},{},[],{"type":179,"value":4776},"\n• 把 diff 结果写到 GitHub PR Check，开发看到红标直接修。",{"type":173,"tag":187,"props":4778,"children":4779},{"start":3911},[4780,4827],{"type":173,"tag":191,"props":4781,"children":4782},{},[4783,4785,4788,4790,4796,4798,4804,4806,4809,4811,4817,4819,4825],{"type":179,"value":4784},"本地复现：锁精确版本 + seed",{"type":173,"tag":197,"props":4786,"children":4787},{},[],{"type":179,"value":4789},"\n• 线上 snapshot 往往是带缓存的。用上一步 HTML + ",{"type":173,"tag":672,"props":4791,"children":4793},{"className":4792},[],[4794],{"type":179,"value":4795},"window.__NUXT__.payload",{"type":179,"value":4797}," 生成 ",{"type":173,"tag":672,"props":4799,"children":4801},{"className":4800},[],[4802],{"type":179,"value":4803},".har",{"type":179,"value":4805}," 文件，Chrome DevTools → Network → Import，完美复现线上首屏。",{"type":173,"tag":197,"props":4807,"children":4808},{},[],{"type":179,"value":4810},"\n• 同时把服务器渲染用的 API 响应在 ",{"type":173,"tag":672,"props":4812,"children":4814},{"className":4813},[],[4815],{"type":179,"value":4816},"msw",{"type":179,"value":4818}," 里 mock 住，本地 ",{"type":173,"tag":672,"props":4820,"children":4822},{"className":4821},[],[4823],{"type":179,"value":4824},"nuxt dev --modern",{"type":179,"value":4826}," 直连假接口即可。",{"type":173,"tag":191,"props":4828,"children":4829},{},[4830,4832,4835,4837],{"type":179,"value":4831},"常见根因定位思路（对照 checklist 一扫）",{"type":173,"tag":197,"props":4833,"children":4834},{},[],{"type":179,"value":4836},"\n① 初始状态不一致",{"type":173,"tag":1417,"props":4838,"children":4839},{},[4840,4853],{"type":173,"tag":191,"props":4841,"children":4842},{},[4843,4845,4851],{"type":179,"value":4844},"Vue composable 在 ",{"type":173,"tag":672,"props":4846,"children":4848},{"className":4847},[],[4849],{"type":179,"value":4850},"onMounted",{"type":179,"value":4852}," 里 setState 但 SSR 已同步写过一次。",{"type":173,"tag":191,"props":4854,"children":4855},{},[4856,4858,4864],{"type":179,"value":4857},"确认所有 ",{"type":173,"tag":672,"props":4859,"children":4861},{"className":4860},[],[4862],{"type":179,"value":4863},"useState('foo', () => …)",{"type":179,"value":4865}," 给定稳定的默认值，不要依赖浏览器环境变量。",{"type":173,"tag":181,"props":4867,"children":4868},{},[4869],{"type":179,"value":4870},"② 浏览器专属 API 泄漏到 SSR",{"type":173,"tag":1417,"props":4872,"children":4873},{},[4874,4893],{"type":173,"tag":191,"props":4875,"children":4876},{},[4877,4879,4885,4886,4892],{"type":179,"value":4878},"搜索全仓库 ",{"type":173,"tag":672,"props":4880,"children":4882},{"className":4881},[],[4883],{"type":179,"value":4884},"process.client ?",{"type":179,"value":1355},{"type":173,"tag":672,"props":4887,"children":4889},{"className":4888},[],[4890],{"type":179,"value":4891},"window.",{"type":179,"value":870},{"type":173,"tag":191,"props":4894,"children":4895},{},[4896,4898,4904,4906,4911,4913,4919],{"type":179,"value":4897},"建议装 ",{"type":173,"tag":672,"props":4899,"children":4901},{"className":4900},[],[4902],{"type":179,"value":4903},"eslint-plugin-nuxt/no-env-in-setup",{"type":179,"value":4905},"，在 ",{"type":173,"tag":672,"props":4907,"children":4909},{"className":4908},[],[4910],{"type":179,"value":2509},{"type":179,"value":4912}," 中使用 ",{"type":173,"tag":672,"props":4914,"children":4916},{"className":4915},[],[4917],{"type":179,"value":4918},"window",{"type":179,"value":4920}," 直接报错。",{"type":173,"tag":181,"props":4922,"children":4923},{},[4924],{"type":179,"value":4925},"③ 不稳定 key / 索引 key",{"type":173,"tag":1417,"props":4927,"children":4928},{},[4929,4948],{"type":173,"tag":191,"props":4930,"children":4931},{},[4932,4934,4940,4941,4946],{"type":179,"value":4933},"强制 rule：",{"type":173,"tag":672,"props":4935,"children":4937},{"className":4936},[],[4938],{"type":179,"value":4939},"v-for",{"type":179,"value":3405},{"type":173,"tag":672,"props":4942,"children":4944},{"className":4943},[],[4945],{"type":179,"value":4764},{"type":179,"value":4947}," 只能用业务主键或 slug。",{"type":173,"tag":191,"props":4949,"children":4950},{},[4951,4953,4959],{"type":179,"value":4952},"eslint-plugin-vue 提供 ",{"type":173,"tag":672,"props":4954,"children":4956},{"className":4955},[],[4957],{"type":179,"value":4958},"require-v-for-key",{"type":179,"value":1751},{"type":173,"tag":181,"props":4961,"children":4962},{},[4963],{"type":179,"value":4964},"④ 条件渲染分岔",{"type":173,"tag":1417,"props":4966,"children":4967},{},[4968,4988],{"type":173,"tag":191,"props":4969,"children":4970},{},[4971,4973,4979,4980,4986],{"type":179,"value":4972},"任何 ",{"type":173,"tag":672,"props":4974,"children":4976},{"className":4975},[],[4977],{"type":179,"value":4978},"if (import.meta.client)",{"type":179,"value":883},{"type":173,"tag":672,"props":4981,"children":4983},{"className":4982},[],[4984],{"type":179,"value":4985},"lazy show",{"type":179,"value":4987}," 行为，都要在 SSR 也输出相同占位，否则节点层级错位。",{"type":173,"tag":191,"props":4989,"children":4990},{},[4991,4993,4999],{"type":179,"value":4992},"可用 ",{"type":173,"tag":672,"props":4994,"children":4996},{"className":4995},[],[4997],{"type":179,"value":4998},"\u003CClientOnly>",{"type":179,"value":5000}," 包裹纯浏览器组件，让 SSR 输出注释占位符。",{"type":173,"tag":181,"props":5002,"children":5003},{},[5004,5006,5009,5011,5017],{"type":179,"value":5005},"加分：把“供排查的 meta 数据”直接注入 DOM",{"type":173,"tag":197,"props":5007,"children":5008},{},[],{"type":179,"value":5010},"\n在 ",{"type":173,"tag":672,"props":5012,"children":5014},{"className":5013},[],[5015],{"type":179,"value":5016},"app.vue",{"type":179,"value":5018}," 的根节点加：",{"type":173,"tag":1766,"props":5020,"children":5022},{"className":1768,"code":5021,"language":1770,"meta":166,"style":166},"\u003Ctemplate>\n  \u003CNuxtPage\n    :data-debug=\"import.meta.dev ? null : JSON.stringify({\n      build: process.env.NUXT_BUILD_ID,\n      tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      locale: useI18n().locale.value\n    })\"\n/>\n\u003C/template>\n",[5023],{"type":173,"tag":672,"props":5024,"children":5025},{"__ignoreMap":166},[5026,5042,5055,5078,5086,5094,5102,5115,5123],{"type":173,"tag":1776,"props":5027,"children":5028},{"class":1778,"line":1779},[5029,5033,5038],{"type":173,"tag":1776,"props":5030,"children":5031},{"style":1783},[5032],{"type":179,"value":1786},{"type":173,"tag":1776,"props":5034,"children":5035},{"style":1789},[5036],{"type":179,"value":5037},"template",{"type":173,"tag":1776,"props":5039,"children":5040},{"style":1783},[5041],{"type":179,"value":1803},{"type":173,"tag":1776,"props":5043,"children":5044},{"class":1778,"line":1806},[5045,5050],{"type":173,"tag":1776,"props":5046,"children":5047},{"style":1783},[5048],{"type":179,"value":5049},"  \u003C",{"type":173,"tag":1776,"props":5051,"children":5052},{"style":1789},[5053],{"type":179,"value":5054},"NuxtPage\n",{"type":173,"tag":1776,"props":5056,"children":5057},{"class":1778,"line":1864},[5058,5063,5068,5073],{"type":173,"tag":1776,"props":5059,"children":5060},{"style":1795},[5061],{"type":179,"value":5062},"    :data-debug",{"type":173,"tag":1776,"props":5064,"children":5065},{"style":1783},[5066],{"type":179,"value":5067},"=",{"type":173,"tag":1776,"props":5069,"children":5070},{"style":1837},[5071],{"type":179,"value":5072},"\"",{"type":173,"tag":1776,"props":5074,"children":5075},{"style":1843},[5076],{"type":179,"value":5077},"import.meta.dev ? null : JSON.stringify({\n",{"type":173,"tag":1776,"props":5079,"children":5080},{"class":1778,"line":3911},[5081],{"type":173,"tag":1776,"props":5082,"children":5083},{"style":1843},[5084],{"type":179,"value":5085},"      build: process.env.NUXT_BUILD_ID,\n",{"type":173,"tag":1776,"props":5087,"children":5088},{"class":1778,"line":3974},[5089],{"type":173,"tag":1776,"props":5090,"children":5091},{"style":1843},[5092],{"type":179,"value":5093},"      tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n",{"type":173,"tag":1776,"props":5095,"children":5096},{"class":1778,"line":3983},[5097],{"type":173,"tag":1776,"props":5098,"children":5099},{"style":1843},[5100],{"type":179,"value":5101},"      locale: useI18n().locale.value\n",{"type":173,"tag":1776,"props":5103,"children":5104},{"class":1778,"line":4000},[5105,5110],{"type":173,"tag":1776,"props":5106,"children":5107},{"style":1843},[5108],{"type":179,"value":5109},"    })",{"type":173,"tag":1776,"props":5111,"children":5112},{"style":1837},[5113],{"type":179,"value":5114},"\"\n",{"type":173,"tag":1776,"props":5116,"children":5117},{"class":1778,"line":4036},[5118],{"type":173,"tag":1776,"props":5119,"children":5120},{"style":1783},[5121],{"type":179,"value":5122},"/>\n",{"type":173,"tag":1776,"props":5124,"children":5125},{"class":1778,"line":4053},[5126,5130,5134],{"type":173,"tag":1776,"props":5127,"children":5128},{"style":1783},[5129],{"type":179,"value":1870},{"type":173,"tag":1776,"props":5131,"children":5132},{"style":1789},[5133],{"type":179,"value":5037},{"type":173,"tag":1776,"props":5135,"children":5136},{"style":1783},[5137],{"type":179,"value":1803},{"type":173,"tag":181,"props":5139,"children":5140},{},[5141],{"type":179,"value":5142},"出错时只需右键“查看元素”即可看到渲染侧使用的 build 号、时区、语言等信息，再结合 Sentry Breadcrumb，一步还原现场。",{"type":173,"tag":181,"props":5144,"children":5145},{},[5146],{"type":179,"value":5147},"总结：",{"type":173,"tag":187,"props":5149,"children":5150},{},[5151,5163,5168,5173],{"type":173,"tag":191,"props":5152,"children":5153},{},[5154,5156,5161],{"type":179,"value":5155},"生产监控：拦截 ",{"type":173,"tag":672,"props":5157,"children":5159},{"className":5158},[],[5160],{"type":179,"value":4435},{"type":179,"value":5162}," + Sentry → 立即告警。",{"type":173,"tag":191,"props":5164,"children":5165},{},[5166],{"type":179,"value":5167},"取证：后台存 SSR HTML，前台 dump CSR HTML → 自动化 diff。",{"type":173,"tag":191,"props":5169,"children":5170},{},[5171],{"type":179,"value":5172},"复现：HAR + MSW 锁接口。",{"type":173,"tag":191,"props":5174,"children":5175},{},[5176],{"type":179,"value":5177},"Checklist：状态、浏览器 API、key、条件渲染四板斧。",{"type":173,"tag":181,"props":5179,"children":5180},{},[5181],{"type":179,"value":5182},"通过上述链路，即使线上复杂环境（CDN、Edge、异步数据）导致的 hydration mismatch，也能在分钟级确定“是哪一个组件、哪一种数据不一致”，把排查从“靠猜”变成“有据可循的机械化流程”。",{"type":173,"tag":626,"props":5184,"children":5186},{"id":5185},"lighthouse-cls-偏高nuxt-项目需要怎样优化",[5187],{"type":179,"value":5188},"Lighthouse CLS 偏高，Nuxt 项目需要怎样优化？",{"type":173,"tag":181,"props":5190,"children":5191},{},[5192,5194,5200,5201,5207,5209,5215,5216,5222,5224,5229,5231,5237,5239,5244,5246,5252,5254,5260,5262,5268,5270,5275,5277,5283,5285,5290],{"type":179,"value":5193},"CLS 偏高通常是“首屏元素尺寸不确定 + 资源加载时机不当”导致的可视区重排；在 Nuxt 项目中，可通过以下组合拳快速压低分数：首先，用 ",{"type":173,"tag":672,"props":5195,"children":5197},{"className":5196},[],[5198],{"type":179,"value":5199},"\u003Cnuxt-img>",{"type":179,"value":883},{"type":173,"tag":672,"props":5202,"children":5204},{"className":5203},[],[5205],{"type":179,"value":5206},"\u003Cimg fetchpriority=\"high\">",{"type":179,"value":5208}," 并显式写 ",{"type":173,"tag":672,"props":5210,"children":5212},{"className":5211},[],[5213],{"type":179,"value":5214},"width",{"type":179,"value":938},{"type":173,"tag":672,"props":5217,"children":5219},{"className":5218},[],[5220],{"type":179,"value":5221},"height",{"type":179,"value":5223},"，同时在 ",{"type":173,"tag":672,"props":5225,"children":5227},{"className":5226},[],[5228],{"type":179,"value":3018},{"type":179,"value":5230}," 开启 ",{"type":173,"tag":672,"props":5232,"children":5234},{"className":5233},[],[5235],{"type":179,"value":5236},"image.sizes",{"type":179,"value":5238}," 自动填充，确保图片占位；其次，在 ",{"type":173,"tag":672,"props":5240,"children":5242},{"className":5241},[],[5243],{"type":179,"value":4178},{"type":179,"value":5245}," 里 ",{"type":173,"tag":672,"props":5247,"children":5249},{"className":5248},[],[5250],{"type":179,"value":5251},"rel=\"preload\"",{"type":179,"value":5253}," 关键 Web 字体并用 ",{"type":173,"tag":672,"props":5255,"children":5257},{"className":5256},[],[5258],{"type":179,"value":5259},"font-display: optional",{"type":179,"value":5261},"，避免 FOUT/FOUT 引起文本跳动；第三，给组件骨架（Skeleton / Placeholder）设置与真实内容等高等宽的 CSS，配合 ",{"type":173,"tag":672,"props":5263,"children":5265},{"className":5264},[],[5266],{"type":179,"value":5267},"v-if=\"process.client\"",{"type":179,"value":5269}," 延迟仅浏览器绘制的动画；第四，关闭或延后执行会异步注入 DOM 的第三方脚本（广告、A/B Testing），必要时放进 ",{"type":173,"tag":672,"props":5271,"children":5273},{"className":5272},[],[5274],{"type":179,"value":4998},{"type":179,"value":5276}," 并加 ",{"type":173,"tag":672,"props":5278,"children":5280},{"className":5279},[],[5281],{"type":179,"value":5282},"requestIdleCallback",{"type":179,"value":5284},"；最后，启用 Nuxt 3 的 ",{"type":173,"tag":672,"props":5286,"children":5288},{"className":5287},[],[5289],{"type":179,"value":4277},{"type":179,"value":5291}," 与 HTTP/2 Push，可让关键样式与 HTML 同步送达，减少回流窗口。",{"type":173,"tag":626,"props":5293,"children":5295},{"id":5294},"如何在-ssr-api-中安全地读取第三方密钥并下发前端",[5296],{"type":179,"value":5297},"如何在 SSR API 中安全地读取第三方密钥并下发前端？",{"type":173,"tag":181,"props":5299,"children":5300},{},[5301,5303,5309,5311,5316,5318,5324,5326,5332],{"type":179,"value":5302},"在 Nuxt 的 SSR API 中，正确做法是把第三方密钥仅存在服务器可见的 ",{"type":173,"tag":672,"props":5304,"children":5306},{"className":5305},[],[5307],{"type":179,"value":5308},"runtimeConfig.private",{"type":179,"value":5310},"（通过环境变量注入），在 ",{"type":173,"tag":672,"props":5312,"children":5314},{"className":5313},[],[5315],{"type":179,"value":3620},{"type":179,"value":5317}," 里读取后直接调用第三方接口或生成签名，再把“经过服务端加工的结果”——如短时签名 URL、掩码字段或业务数据——返回给前端，而绝不把原始密钥写入响应或 ",{"type":173,"tag":672,"props":5319,"children":5321},{"className":5320},[],[5322],{"type":179,"value":5323},"window.__NUXT__",{"type":179,"value":5325}," payload；如果前端必须拿到令牌，可改为在服务器端临时颁发一次性 Token（附失效时间）或以 ",{"type":173,"tag":672,"props":5327,"children":5329},{"className":5328},[],[5330],{"type":179,"value":5331},"Set-Cookie; HttpOnly; Secure",{"type":179,"value":5333}," 下发，这样既保持了客户端可用性，又确保密钥始终留在服务器内存，避免任何静态打包、日志或浏览器泄露风险。",{"type":173,"tag":5335,"props":5336,"children":5337},"style",{},[5338],{"type":179,"value":5339},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":1806,"depth":1806,"links":5341},[5342,5343],{"id":176,"depth":1806,"text":176},{"id":616,"depth":1806,"text":616,"children":5344},[5345,5346,5347,5348,5349,5350,5351],{"id":622,"depth":1864,"text":622},{"id":2190,"depth":1864,"text":2190},{"id":2365,"depth":1864,"text":2368},{"id":2551,"depth":1864,"text":2551},{"id":2884,"depth":1864,"text":2887},{"id":3262,"depth":1864,"text":3265},{"id":3502,"depth":1864,"text":3505},"markdown","content:6.maps:_interview:_frontend:nuxt.md","content","6.maps/_interview/_frontend/nuxt.md","6.maps/_interview/_frontend/nuxt","md",[5359,5363],{"_path":5360,"title":5361,"description":5362},"/maps/_industry/low-code","低代码","无代码、低代码、高代码，这是一个围绕人机交互的有趣话题。",{"_path":5364,"title":5365,"description":166},"/maps/_interview/interview-wrong-notes","易错题",1755216259039]