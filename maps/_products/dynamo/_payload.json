[{"data":1,"prerenderedAt":731},["ShallowReactive",2],{"navigation":3,"/maps/_products/dynamo":161,"/maps/_products/dynamo-surround":723},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":717,"_id":718,"_source":719,"_file":720,"_stem":721,"_extension":722},"/maps/_products/dynamo","_products",false,true,"","Dynamo","Dynamo 原本是 Revit 中建筑信息模型 (BIM) 的附加模块，后来发展成熟，成为一个给设计师探索可视化编程、解决问题并自行制作工具的平台。",{"type":170,"children":171,"toc":710},"root",[172,184,189,197,204,219,274,279,284,289,297,302,308,313,321,380,385,393,401,435,440,445,450,455,460,468,473,480,485,493,498,503,511,516,521,526,531,539,544,552,557,562,569,574,579,584,589,594,599,607,612,620,625,630,635,643,656,661,666,705],{"type":173,"tag":174,"props":175,"children":176},"element","blockquote",{},[177],{"type":173,"tag":178,"props":179,"children":180},"p",{},[181],{"type":182,"value":183},"text","一款可视化编程工具，旨在同时供非编程人员和编程人员使用。它使用户能够直观地查看脚本行为、定义自定义逻辑以及使用各种文本编程语言的脚本。",{"type":173,"tag":178,"props":185,"children":186},{},[187],{"type":182,"value":188},"一个 Dynamo 示例：",{"type":173,"tag":178,"props":190,"children":191},{},[192],{"type":173,"tag":193,"props":194,"children":196},"img",{"alt":166,"src":195},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311908636.png",[],{"type":173,"tag":198,"props":199,"children":201},"h4",{"id":200},"dynamo-primer",[202],{"type":182,"value":203},"Dynamo Primer",{"type":173,"tag":178,"props":205,"children":206},{},[207,209,217],{"type":182,"value":208},"Autodesk 给 Dynamo 编写了一册全面指南，叫 ",{"type":173,"tag":210,"props":211,"children":215},"a",{"href":212,"rel":213},"https://primer.dynamobim.org/zh-cn/index.html",[214],"nofollow",[216],{"type":182,"value":203},{"type":182,"value":218},"。",{"type":173,"tag":220,"props":221,"children":222},"ul",{},[223,229,234,239,244,249,254,259,264,269],{"type":173,"tag":224,"props":225,"children":226},"li",{},[227],{"type":182,"value":228},"上下文：“可视化编程”的确切含义是什么？我需要了解哪些概念才能深入了解 Dynamo？",{"type":173,"tag":224,"props":230,"children":231},{},[232],{"type":182,"value":233},"快速入门：如何获取 Dynamo 并创建第一个程序？",{"type":173,"tag":224,"props":235,"children":236},{},[237],{"type":182,"value":238},"程序中的内容：Dynamo 的功能部分是什么以及如何使用它们？",{"type":173,"tag":224,"props":240,"children":241},{},[242],{"type":182,"value":243},"构建块：“数据”是什么，我可以在程序中开始使用哪些基本类型？",{"type":173,"tag":224,"props":245,"children":246},{},[247],{"type":182,"value":248},"用于设计的几何体：如何在 Dynamo 中使用几何元素？",{"type":173,"tag":224,"props":250,"children":251},{},[252],{"type":182,"value":253},"列表、列表、列表：如何管理和协调数据结构？",{"type":173,"tag":224,"props":255,"children":256},{},[257],{"type":182,"value":258},"节点中的代码：如何使用自己的代码开始扩展 Dynamo？",{"type":173,"tag":224,"props":260,"children":261},{},[262],{"type":182,"value":263},"计算 BIM: 如何将 Dynamo 与 Revit 模型结合使用？",{"type":173,"tag":224,"props":265,"children":266},{},[267],{"type":182,"value":268},"自定义节点：如何创建自己的节点？",{"type":173,"tag":224,"props":270,"children":271},{},[272],{"type":182,"value":273},"软件包：如何与社区共享我的工具？",{"type":173,"tag":178,"props":275,"children":276},{},[277],{"type":182,"value":278},"程序需要按照算法来工作，所以这些操作必然遵循输入、处理和输出的基本逻辑。",{"type":173,"tag":178,"props":280,"children":281},{},[282],{"type":182,"value":283},"编程的关键及我们会遇到的第一个障碍是：必须依靠某种形式的抽象形式，才能与计算机进行有效通信。",{"type":173,"tag":178,"props":285,"children":286},{},[287],{"type":182,"value":288},"可视化编程把描述性操作抽象成了节点（及节点关系）。Dynamo 将节点关系描述为“连接，将定义数据流”。下面是一个通过中心点和半径创建圆的例子：",{"type":173,"tag":178,"props":290,"children":291},{},[292],{"type":173,"tag":193,"props":293,"children":296},{"alt":294,"src":295},"Dynamo example to create a circle","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270238695.png",[],{"type":173,"tag":178,"props":298,"children":299},{},[300],{"type":182,"value":301},"Dynamo 的开发版本叫做“bleeding edge”。出血（bleeding）是一个设计领域术语，指裁切边缘距材料边缘的距离。",{"type":173,"tag":303,"props":304,"children":306},"h2",{"id":305},"界面",[307],{"type":182,"value":305},{"type":173,"tag":178,"props":309,"children":310},{},[311],{"type":182,"value":312},"节点主要分为如下几个部分，其中，“核心”和“几何”包含最多数量的节点（“核心”是什么？）。",{"type":173,"tag":178,"props":314,"children":315},{},[316],{"type":173,"tag":193,"props":317,"children":320},{"alt":318,"src":319},"Dynamo Libs","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270249685.png",[],{"type":173,"tag":322,"props":323,"children":324},"ol",{},[325,330,335,340,345,350,355,360,365,370,375],{"type":173,"tag":224,"props":326,"children":327},{},[328],{"type":182,"value":329},"词典",{"type":173,"tag":224,"props":331,"children":332},{},[333],{"type":182,"value":334},"显示",{"type":173,"tag":224,"props":336,"children":337},{},[338],{"type":182,"value":339},"几何",{"type":173,"tag":224,"props":341,"children":342},{},[343],{"type":182,"value":344},"ImportExport",{"type":173,"tag":224,"props":346,"children":347},{},[348],{"type":182,"value":349},"输入",{"type":173,"tag":224,"props":351,"children":352},{},[353],{"type":182,"value":354},"列表",{"type":173,"tag":224,"props":356,"children":357},{},[358],{"type":182,"value":359},"匹配",{"type":173,"tag":224,"props":361,"children":362},{},[363],{"type":182,"value":364},"Revit",{"type":173,"tag":224,"props":366,"children":367},{},[368],{"type":182,"value":369},"脚本",{"type":173,"tag":224,"props":371,"children":372},{},[373],{"type":182,"value":374},"字符串",{"type":173,"tag":224,"props":376,"children":377},{},[378],{"type":182,"value":379},"附加模块",{"type":173,"tag":178,"props":381,"children":382},{},[383],{"type":182,"value":384},"可以参考一下节点布局算法。界面中的“节点清理”即节点布局：",{"type":173,"tag":178,"props":386,"children":387},{},[388],{"type":173,"tag":193,"props":389,"children":392},{"alt":390,"src":391},"after clean nodes","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270257741.png",[],{"type":173,"tag":178,"props":394,"children":395},{},[396],{"type":173,"tag":193,"props":397,"children":400},{"alt":398,"src":399},"一个 Dynamo 节点","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270309333.png",[],{"type":173,"tag":322,"props":402,"children":403},{},[404,406,411,412,417,418,423,424,429,430],{"type":182,"value":405},"\n  ",{"type":173,"tag":224,"props":407,"children":408},{},[409],{"type":182,"value":410},"名称 - 具有 Category.Name 命名约定的节点名称",{"type":182,"value":405},{"type":173,"tag":224,"props":413,"children":414},{},[415],{"type":182,"value":416},"主节点 - 节点的主体 - 在此处单击鼠标右键可显示整个节点级别的选项",{"type":182,"value":405},{"type":173,"tag":224,"props":419,"children":420},{},[421],{"type":182,"value":422},"端口（输入输出）- 导线的接受器，它们向节点提供输入数据以及节点操作的结果，有类型和值",{"type":182,"value":405},{"type":173,"tag":224,"props":425,"children":426},{},[427],{"type":182,"value":428},"连缀图标 - 表示为匹配列表输入指定的“连缀”选项（稍后再做详细介绍）",{"type":182,"value":405},{"type":173,"tag":224,"props":431,"children":432},{},[433],{"type":182,"value":434},"默认值 - 在输入端口上单击鼠标右键 - 某些节点具有可以使用也可以不使用的默认值。",{"type":173,"tag":178,"props":436,"children":437},{},[438],{"type":182,"value":439},"节点根据颜色还划分为：非活动、错误、冻结、选中、警告等状态。",{"type":173,"tag":178,"props":441,"children":442},{},[443],{"type":182,"value":444},"所有节点只分三层排列，其命名惯例为：library.category.nodeName。",{"type":173,"tag":178,"props":446,"children":447},{},[448],{"type":182,"value":449},"如何管理大量节点？通过注释标记节点功能、Watch 节点观察节点输出、Group 分组节点。",{"type":173,"tag":178,"props":451,"children":452},{},[453],{"type":182,"value":454},"因为节点的颜色已经被用来表示节点的状态，所以节点层面还缺少一种视觉方式来表示节点的类型。在 PRay 中也许可以使用图标、背景纹案之类的方案。",{"type":173,"tag":178,"props":456,"children":457},{},[458],{"type":182,"value":459},"在工程中 Dynamo 使用分组颜色来区分不用的功能区域。",{"type":173,"tag":178,"props":461,"children":462},{},[463],{"type":173,"tag":193,"props":464,"children":467},{"alt":465,"src":466},"dynamo project template","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311703670.png",[],{"type":173,"tag":178,"props":469,"children":470},{},[471],{"type":182,"value":472},"Dynamo 的节点很清晰也很漂亮：",{"type":173,"tag":178,"props":474,"children":475},{},[476],{"type":173,"tag":193,"props":477,"children":479},{"alt":166,"src":478},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270327205.png",[],{"type":173,"tag":178,"props":481,"children":482},{},[483],{"type":182,"value":484},"节点的抽象层级应该符合用户的认知层级，过高过低都不行，所以产品设计上经常会有“表达式”这么一个用来描述公式化逻辑的节点。如果要用节点把公式写出来那就太麻烦了，比如黄金螺旋的公式很简单：$x=r\\cos(\\theta)$, $y=r\\sin(\\theta)$，但是如果用节点来表达就会变得很复杂，如下图：",{"type":173,"tag":178,"props":486,"children":487},{},[488],{"type":173,"tag":193,"props":489,"children":492},{"alt":490,"src":491},"Gold Spiral","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270345013.png",[],{"type":173,"tag":178,"props":494,"children":495},{},[496],{"type":182,"value":497},"怎么处理混乱的输入？",{"type":173,"tag":178,"props":499,"children":500},{},[501],{"type":182,"value":502},"如图，有三种条件逻辑的表达方式，但是为了给这三个节点输入统一的值，输入连线处理得很难看：",{"type":173,"tag":178,"props":504,"children":505},{},[506],{"type":173,"tag":193,"props":507,"children":510},{"alt":508,"src":509},"three ways to express conditional logic","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270349782.png",[],{"type":173,"tag":178,"props":512,"children":513},{},[514],{"type":182,"value":515},"应该创建“节点分身”之类的概念，或是“幽灵节点”？操作逻辑可以是：从一个非分身节点复制出一个分身，分身和节点的数据保持一致，两者都可以修改。然后可以将分身节点拖到任意地方使用，这样就解耦了输入和使用方。不过，这样似乎会导致新的混乱，em...",{"type":173,"tag":303,"props":517,"children":519},{"id":518},"几何体",[520],{"type":182,"value":518},{"type":173,"tag":178,"props":522,"children":523},{},[524],{"type":182,"value":525},"“维数是一种开始对几何图形进行分类的便捷方法，但它不一定是最佳方法。毕竟，我们不仅使用“点”、“线”、“平面”和“方框”建模 - 如果我想要弯曲，该怎么办？”",{"type":173,"tag":178,"props":527,"children":528},{},[529],{"type":182,"value":530},"正如游戏建模中接触的“网格”的概念，Dynamo 中自有一套几何体的数据类型（估计和 Autodesk 其他产品保持一致）：",{"type":173,"tag":178,"props":532,"children":533},{},[534],{"type":173,"tag":193,"props":535,"children":538},{"alt":536,"src":537},"Geometry Data Types","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270420841.png",[],{"type":173,"tag":178,"props":540,"children":541},{},[542],{"type":182,"value":543},"之前用过 C4D 和 Blender，这些数据类型都和 Dynamo 的类似（或者说几乎一致？）",{"type":173,"tag":178,"props":545,"children":546},{},[547],{"type":173,"tag":193,"props":548,"children":551},{"alt":549,"src":550},"Geometry Types","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270423147.png",[],{"type":173,"tag":178,"props":553,"children":554},{},[555],{"type":182,"value":556},"“抽象”的数据类型不能在屏幕上预览，这和“headless”的概念很类似，都是在界面底层通过操作数据结构来创建一种更基本的“逻辑”，可以没有界面。说“可以”是因为比如“平面”之类的数据类型尽管是抽象的，但（为了操作的便利性）仍可以在界面上预览。",{"type":173,"tag":178,"props":558,"children":559},{},[560],{"type":182,"value":561},"节点冻结用于禁用当前及下游节点，可以避免修改上游节点导致下游节点重新计算带来的巨大性能开销，如下图，冻结了圆和圆锥的 Union 操作。",{"type":173,"tag":178,"props":563,"children":564},{},[565],{"type":173,"tag":193,"props":566,"children":568},{"alt":166,"src":567},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270450836.png",[],{"type":173,"tag":178,"props":570,"children":571},{},[572],{"type":182,"value":573},"Comfy UI 在跑流程时，节点上会有个进度条显示，暗示当前的执行进度。",{"type":173,"tag":178,"props":575,"children":576},{},[577],{"type":182,"value":578},"两种形式分别对应：实时预览和离线计算。鉴于 PRay 的代码编辑需要实时预览，但是节点的执行机制需要设计成离线式的，也就是全部走异步+防抖的形式。不过，这样的话又会碰到副作用的问题。.. 还是再考虑下。",{"type":173,"tag":303,"props":580,"children":582},{"id":581},"数据结构",[583],{"type":182,"value":581},{"type":173,"tag":178,"props":585,"children":586},{},[587],{"type":182,"value":588},"对于能接受列表的节点，比如 PolyCurve.ByPoints 和 Circle.ByCenterPointRadius，他们都能接受点列表作为输入，但是逻辑处理机制不同，前者按照点列表生成多段曲线，后者生成多个圆。也就是说，对于后者，似乎存在一个隐式的“循环”操作。",{"type":173,"tag":178,"props":590,"children":591},{},[592],{"type":182,"value":593},"当两个列表长度不匹配时，通过设置“连缀”选项来处理，可选“最短列表”、“笛卡尔积（叉积）”等。鉴于在非绘图绘表的 Web 数据处理一般是操作相同长度的列表，所以这个设计不能直接套用。",{"type":173,"tag":178,"props":595,"children":596},{},[597],{"type":182,"value":598},"因为用节点编排逻辑只是代码的某种子集，所以见到 Dynamo 中有“节点转换到代码”这种功能也不足为奇。在 Dynamo Primer 的“最佳实践”章节，甚至直接提到了可以使用节点到代码功能降低图形复杂度。只是，他还说节点到代码“无法轻松返回”？难道节点到代码丢失了除了节点位置之类的其他信息，或者只是单纯没有代码解析器所以提供这个功能。",{"type":173,"tag":178,"props":600,"children":601},{},[602],{"type":173,"tag":193,"props":603,"children":606},{"alt":604,"src":605},"dynamo nodes 2 codes","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311638043.png",[],{"type":173,"tag":178,"props":608,"children":609},{},[610],{"type":182,"value":611},"至于在创建、操作数据和编排逻辑这块，代码的表达性要比节点强太多了，以条件逻辑举例，见下图。",{"type":173,"tag":178,"props":613,"children":614},{},[615],{"type":173,"tag":193,"props":616,"children":619},{"alt":617,"src":618},"condition expression","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311643375.png",[],{"type":173,"tag":178,"props":621,"children":622},{},[623],{"type":182,"value":624},"那么节点强在什么地方呢？举个例子，可视化变成的一个优势是可以直观的观察到数据流，并且提供了更强的人机交互。所以，如果代码块支持用模版语法自定义变量，再由节点作为可控输入，就可以二者的优势。这其实是“函数”，也就是说，代码块本身只是代码，并没有显示的切换成“表达式”、“语句”、“函数”等模式，而传统意义上的代码中的“函数”在可视化编程中是个外显的界面概念。",{"type":173,"tag":178,"props":626,"children":627},{},[628],{"type":182,"value":629},"实际上，在 Dynamo 的“代码块”可以声明“函数”。声明后，其他代码块可以直接调用函数而无需连线。在这里，节点的操作和代码创建函数共享了一整个空间，不过事情似乎会变得更难以理解。",{"type":173,"tag":178,"props":631,"children":632},{},[633],{"type":182,"value":634},"最后，一个节点的示例文档，介绍了输入输出、分类、使用案例，以及进阶使用方法。",{"type":173,"tag":178,"props":636,"children":637},{},[638],{"type":173,"tag":193,"props":639,"children":642},{"alt":640,"src":641},"https://dictionary.dynamobim.com/#/Core/Color/Create/Add","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202503200342002.png",[],{"type":173,"tag":220,"props":644,"children":645},{},[646],{"type":173,"tag":224,"props":647,"children":648},{},[649],{"type":173,"tag":210,"props":650,"children":653},{"href":651,"rel":652},"https://dictionary.dynamobim.com",[214],[654],{"type":182,"value":655},"节点文档",{"type":173,"tag":303,"props":657,"children":659},{"id":658},"扩展",[660],{"type":182,"value":658},{"type":173,"tag":178,"props":662,"children":663},{},[664],{"type":182,"value":665},"关于 Dynamo 的自定义节点，找到几个有用的库：",{"type":173,"tag":220,"props":667,"children":668},{},[669,681,693],{"type":173,"tag":224,"props":670,"children":671},{},[672,679],{"type":173,"tag":210,"props":673,"children":676},{"href":674,"rel":675},"https://data-shapes.io/blog/",[214],[677],{"type":182,"value":678},"Data Shapes",{"type":182,"value":680},"：绘图和数据处理用的节点，包含了图表、表单、地图、表格、UI 构建（用户侧的表单等）。",{"type":173,"tag":224,"props":682,"children":683},{},[684,691],{"type":173,"tag":210,"props":685,"children":688},{"href":686,"rel":687},"https://bimorph.com/bimorph-nodes/",[214],[689],{"type":182,"value":690},"BIMORPH Nodes",{"type":182,"value":692},"：包含了碰撞检测等高级功能，主要面向 CAD、Curve、Revit 之类的数据结构。",{"type":173,"tag":224,"props":694,"children":695},{},[696,703],{"type":173,"tag":210,"props":697,"children":700},{"href":698,"rel":699},"https://github.com/ksobon/Bumblebee",[214],[701],{"type":182,"value":702},"Bumblebee",{"type":182,"value":704},"：用于操作 Excel，但是最近一次提交在 2019 年。",{"type":173,"tag":178,"props":706,"children":707},{},[708],{"type":182,"value":709},"Data Shapes 太棒了，可以用图表快速分析图中的数据。但是 Github 上只有 50+ 星星，看来 Dynamo 的用户中懂代码的群体还是太小了。其实就连 Dynamo 仓库本身的 Issue 数量也才 300+（未关闭的）。",{"title":166,"searchDepth":711,"depth":711,"links":712},2,[713,714,715,716],{"id":305,"depth":711,"text":305},{"id":518,"depth":711,"text":518},{"id":581,"depth":711,"text":581},{"id":658,"depth":711,"text":658},"markdown","content:6.maps:_products:dynamo.md","content","6.maps/_products/dynamo.md","6.maps/_products/dynamo","md",[724,727],{"_path":725,"title":726,"description":166},"/maps/_products/budibase","Budibase",{"_path":728,"title":729,"description":730},"/maps/_programming/dx","Developer Experience（DX）","开发者体验（Developer Experience，DX）是指开发者在使用产品、工具、框架等过程中的感受和体验。它是用户体验（User Experience，UX）的一个子集，专注于开发者的需求和体验。",1749721439952]