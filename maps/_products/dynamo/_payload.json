[{"data":1,"prerenderedAt":725},["ShallowReactive",2],{"navigation":3,"/maps/_products/dynamo":155,"/maps/_products/dynamo-surround":717},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":711,"_id":712,"_source":713,"_file":714,"_stem":715,"_extension":716},"/maps/_products/dynamo","_products",false,true,"","Dynamo","Dynamo 原本是 Revit 中建筑信息模型 (BIM) 的附加模块，后来发展成熟，成为一个给设计师探索可视化编程、解决问题并自行制作工具的平台。",{"type":164,"children":165,"toc":704},"root",[166,178,183,191,198,213,268,273,278,283,291,296,302,307,315,374,379,387,395,429,434,439,444,449,454,462,467,474,479,487,492,497,505,510,515,520,525,533,538,546,551,556,563,568,573,578,583,588,593,601,606,614,619,624,629,637,650,655,660,699],{"type":167,"tag":168,"props":169,"children":170},"element","blockquote",{},[171],{"type":167,"tag":172,"props":173,"children":174},"p",{},[175],{"type":176,"value":177},"text","一款可视化编程工具，旨在同时供非编程人员和编程人员使用。它使用户能够直观地查看脚本行为、定义自定义逻辑以及使用各种文本编程语言的脚本。",{"type":167,"tag":172,"props":179,"children":180},{},[181],{"type":176,"value":182},"一个 Dynamo 示例：",{"type":167,"tag":172,"props":184,"children":185},{},[186],{"type":167,"tag":187,"props":188,"children":190},"img",{"alt":160,"src":189},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311908636.png",[],{"type":167,"tag":192,"props":193,"children":195},"h4",{"id":194},"dynamo-primer",[196],{"type":176,"value":197},"Dynamo Primer",{"type":167,"tag":172,"props":199,"children":200},{},[201,203,211],{"type":176,"value":202},"Autodesk 给 Dynamo 编写了一册全面指南，叫 ",{"type":167,"tag":204,"props":205,"children":209},"a",{"href":206,"rel":207},"https://primer.dynamobim.org/zh-cn/index.html",[208],"nofollow",[210],{"type":176,"value":197},{"type":176,"value":212},"。",{"type":167,"tag":214,"props":215,"children":216},"ul",{},[217,223,228,233,238,243,248,253,258,263],{"type":167,"tag":218,"props":219,"children":220},"li",{},[221],{"type":176,"value":222},"上下文：“可视化编程”的确切含义是什么？我需要了解哪些概念才能深入了解 Dynamo？",{"type":167,"tag":218,"props":224,"children":225},{},[226],{"type":176,"value":227},"快速入门：如何获取 Dynamo 并创建第一个程序？",{"type":167,"tag":218,"props":229,"children":230},{},[231],{"type":176,"value":232},"程序中的内容：Dynamo 的功能部分是什么以及如何使用它们？",{"type":167,"tag":218,"props":234,"children":235},{},[236],{"type":176,"value":237},"构建块：“数据”是什么，我可以在程序中开始使用哪些基本类型？",{"type":167,"tag":218,"props":239,"children":240},{},[241],{"type":176,"value":242},"用于设计的几何体：如何在 Dynamo 中使用几何元素？",{"type":167,"tag":218,"props":244,"children":245},{},[246],{"type":176,"value":247},"列表、列表、列表：如何管理和协调数据结构？",{"type":167,"tag":218,"props":249,"children":250},{},[251],{"type":176,"value":252},"节点中的代码：如何使用自己的代码开始扩展 Dynamo？",{"type":167,"tag":218,"props":254,"children":255},{},[256],{"type":176,"value":257},"计算 BIM: 如何将 Dynamo 与 Revit 模型结合使用？",{"type":167,"tag":218,"props":259,"children":260},{},[261],{"type":176,"value":262},"自定义节点：如何创建自己的节点？",{"type":167,"tag":218,"props":264,"children":265},{},[266],{"type":176,"value":267},"软件包：如何与社区共享我的工具？",{"type":167,"tag":172,"props":269,"children":270},{},[271],{"type":176,"value":272},"程序需要按照算法来工作，所以这些操作必然遵循输入、处理和输出的基本逻辑。",{"type":167,"tag":172,"props":274,"children":275},{},[276],{"type":176,"value":277},"编程的关键及我们会遇到的第一个障碍是：必须依靠某种形式的抽象形式，才能与计算机进行有效通信。",{"type":167,"tag":172,"props":279,"children":280},{},[281],{"type":176,"value":282},"可视化编程把描述性操作抽象成了节点（及节点关系）。Dynamo 将节点关系描述为“连接，将定义数据流”。下面是一个通过中心点和半径创建圆的例子：",{"type":167,"tag":172,"props":284,"children":285},{},[286],{"type":167,"tag":187,"props":287,"children":290},{"alt":288,"src":289},"Dynamo example to create a circle","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270238695.png",[],{"type":167,"tag":172,"props":292,"children":293},{},[294],{"type":176,"value":295},"Dynamo 的开发版本叫做“bleeding edge”。出血（bleeding）是一个设计领域术语，指裁切边缘距材料边缘的距离。",{"type":167,"tag":297,"props":298,"children":300},"h2",{"id":299},"界面",[301],{"type":176,"value":299},{"type":167,"tag":172,"props":303,"children":304},{},[305],{"type":176,"value":306},"节点主要分为如下几个部分，其中，“核心”和“几何”包含最多数量的节点（“核心”是什么？）。",{"type":167,"tag":172,"props":308,"children":309},{},[310],{"type":167,"tag":187,"props":311,"children":314},{"alt":312,"src":313},"Dynamo Libs","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270249685.png",[],{"type":167,"tag":316,"props":317,"children":318},"ol",{},[319,324,329,334,339,344,349,354,359,364,369],{"type":167,"tag":218,"props":320,"children":321},{},[322],{"type":176,"value":323},"词典",{"type":167,"tag":218,"props":325,"children":326},{},[327],{"type":176,"value":328},"显示",{"type":167,"tag":218,"props":330,"children":331},{},[332],{"type":176,"value":333},"几何",{"type":167,"tag":218,"props":335,"children":336},{},[337],{"type":176,"value":338},"ImportExport",{"type":167,"tag":218,"props":340,"children":341},{},[342],{"type":176,"value":343},"输入",{"type":167,"tag":218,"props":345,"children":346},{},[347],{"type":176,"value":348},"列表",{"type":167,"tag":218,"props":350,"children":351},{},[352],{"type":176,"value":353},"匹配",{"type":167,"tag":218,"props":355,"children":356},{},[357],{"type":176,"value":358},"Revit",{"type":167,"tag":218,"props":360,"children":361},{},[362],{"type":176,"value":363},"脚本",{"type":167,"tag":218,"props":365,"children":366},{},[367],{"type":176,"value":368},"字符串",{"type":167,"tag":218,"props":370,"children":371},{},[372],{"type":176,"value":373},"附加模块",{"type":167,"tag":172,"props":375,"children":376},{},[377],{"type":176,"value":378},"可以参考一下节点布局算法。界面中的“节点清理”即节点布局：",{"type":167,"tag":172,"props":380,"children":381},{},[382],{"type":167,"tag":187,"props":383,"children":386},{"alt":384,"src":385},"after clean nodes","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270257741.png",[],{"type":167,"tag":172,"props":388,"children":389},{},[390],{"type":167,"tag":187,"props":391,"children":394},{"alt":392,"src":393},"一个 Dynamo 节点","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270309333.png",[],{"type":167,"tag":316,"props":396,"children":397},{},[398,400,405,406,411,412,417,418,423,424],{"type":176,"value":399},"\n  ",{"type":167,"tag":218,"props":401,"children":402},{},[403],{"type":176,"value":404},"名称 - 具有 Category.Name 命名约定的节点名称",{"type":176,"value":399},{"type":167,"tag":218,"props":407,"children":408},{},[409],{"type":176,"value":410},"主节点 - 节点的主体 - 在此处单击鼠标右键可显示整个节点级别的选项",{"type":176,"value":399},{"type":167,"tag":218,"props":413,"children":414},{},[415],{"type":176,"value":416},"端口（输入输出）- 导线的接受器，它们向节点提供输入数据以及节点操作的结果，有类型和值",{"type":176,"value":399},{"type":167,"tag":218,"props":419,"children":420},{},[421],{"type":176,"value":422},"连缀图标 - 表示为匹配列表输入指定的“连缀”选项（稍后再做详细介绍）",{"type":176,"value":399},{"type":167,"tag":218,"props":425,"children":426},{},[427],{"type":176,"value":428},"默认值 - 在输入端口上单击鼠标右键 - 某些节点具有可以使用也可以不使用的默认值。",{"type":167,"tag":172,"props":430,"children":431},{},[432],{"type":176,"value":433},"节点根据颜色还划分为：非活动、错误、冻结、选中、警告等状态。",{"type":167,"tag":172,"props":435,"children":436},{},[437],{"type":176,"value":438},"所有节点只分三层排列，其命名惯例为：library.category.nodeName。",{"type":167,"tag":172,"props":440,"children":441},{},[442],{"type":176,"value":443},"如何管理大量节点？通过注释标记节点功能、Watch 节点观察节点输出、Group 分组节点。",{"type":167,"tag":172,"props":445,"children":446},{},[447],{"type":176,"value":448},"因为节点的颜色已经被用来表示节点的状态，所以节点层面还缺少一种视觉方式来表示节点的类型。在 PRay 中也许可以使用图标、背景纹案之类的方案。",{"type":167,"tag":172,"props":450,"children":451},{},[452],{"type":176,"value":453},"在工程中 Dynamo 使用分组颜色来区分不用的功能区域。",{"type":167,"tag":172,"props":455,"children":456},{},[457],{"type":167,"tag":187,"props":458,"children":461},{"alt":459,"src":460},"dynamo project template","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311703670.png",[],{"type":167,"tag":172,"props":463,"children":464},{},[465],{"type":176,"value":466},"Dynamo 的节点很清晰也很漂亮：",{"type":167,"tag":172,"props":468,"children":469},{},[470],{"type":167,"tag":187,"props":471,"children":473},{"alt":160,"src":472},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270327205.png",[],{"type":167,"tag":172,"props":475,"children":476},{},[477],{"type":176,"value":478},"节点的抽象层级应该符合用户的认知层级，过高过低都不行，所以产品设计上经常会有“表达式”这么一个用来描述公式化逻辑的节点。如果要用节点把公式写出来那就太麻烦了，比如黄金螺旋的公式很简单：$x=r\\cos(\\theta)$, $y=r\\sin(\\theta)$，但是如果用节点来表达就会变得很复杂，如下图：",{"type":167,"tag":172,"props":480,"children":481},{},[482],{"type":167,"tag":187,"props":483,"children":486},{"alt":484,"src":485},"Gold Spiral","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270345013.png",[],{"type":167,"tag":172,"props":488,"children":489},{},[490],{"type":176,"value":491},"怎么处理混乱的输入？",{"type":167,"tag":172,"props":493,"children":494},{},[495],{"type":176,"value":496},"如图，有三种条件逻辑的表达方式，但是为了给这三个节点输入统一的值，输入连线处理得很难看：",{"type":167,"tag":172,"props":498,"children":499},{},[500],{"type":167,"tag":187,"props":501,"children":504},{"alt":502,"src":503},"three ways to express conditional logic","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270349782.png",[],{"type":167,"tag":172,"props":506,"children":507},{},[508],{"type":176,"value":509},"应该创建“节点分身”之类的概念，或是“幽灵节点”？操作逻辑可以是：从一个非分身节点复制出一个分身，分身和节点的数据保持一致，两者都可以修改。然后可以将分身节点拖到任意地方使用，这样就解耦了输入和使用方。不过，这样似乎会导致新的混乱，em...",{"type":167,"tag":297,"props":511,"children":513},{"id":512},"几何体",[514],{"type":176,"value":512},{"type":167,"tag":172,"props":516,"children":517},{},[518],{"type":176,"value":519},"“维数是一种开始对几何图形进行分类的便捷方法，但它不一定是最佳方法。毕竟，我们不仅使用“点”、“线”、“平面”和“方框”建模 - 如果我想要弯曲，该怎么办？”",{"type":167,"tag":172,"props":521,"children":522},{},[523],{"type":176,"value":524},"正如游戏建模中接触的“网格”的概念，Dynamo 中自有一套几何体的数据类型（估计和 Autodesk 其他产品保持一致）：",{"type":167,"tag":172,"props":526,"children":527},{},[528],{"type":167,"tag":187,"props":529,"children":532},{"alt":530,"src":531},"Geometry Data Types","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270420841.png",[],{"type":167,"tag":172,"props":534,"children":535},{},[536],{"type":176,"value":537},"之前用过 C4D 和 Blender，这些数据类型都和 Dynamo 的类似（或者说几乎一致？）",{"type":167,"tag":172,"props":539,"children":540},{},[541],{"type":167,"tag":187,"props":542,"children":545},{"alt":543,"src":544},"Geometry Types","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270423147.png",[],{"type":167,"tag":172,"props":547,"children":548},{},[549],{"type":176,"value":550},"“抽象”的数据类型不能在屏幕上预览，这和“headless”的概念很类似，都是在界面底层通过操作数据结构来创建一种更基本的“逻辑”，可以没有界面。说“可以”是因为比如“平面”之类的数据类型尽管是抽象的，但（为了操作的便利性）仍可以在界面上预览。",{"type":167,"tag":172,"props":552,"children":553},{},[554],{"type":176,"value":555},"节点冻结用于禁用当前及下游节点，可以避免修改上游节点导致下游节点重新计算带来的巨大性能开销，如下图，冻结了圆和圆锥的 Union 操作。",{"type":167,"tag":172,"props":557,"children":558},{},[559],{"type":167,"tag":187,"props":560,"children":562},{"alt":160,"src":561},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270450836.png",[],{"type":167,"tag":172,"props":564,"children":565},{},[566],{"type":176,"value":567},"Comfy UI 在跑流程时，节点上会有个进度条显示，暗示当前的执行进度。",{"type":167,"tag":172,"props":569,"children":570},{},[571],{"type":176,"value":572},"两种形式分别对应：实时预览和离线计算。鉴于 PRay 的代码编辑需要实时预览，但是节点的执行机制需要设计成离线式的，也就是全部走异步+防抖的形式。不过，这样的话又会碰到副作用的问题。.. 还是再考虑下。",{"type":167,"tag":297,"props":574,"children":576},{"id":575},"数据结构",[577],{"type":176,"value":575},{"type":167,"tag":172,"props":579,"children":580},{},[581],{"type":176,"value":582},"对于能接受列表的节点，比如 PolyCurve.ByPoints 和 Circle.ByCenterPointRadius，他们都能接受点列表作为输入，但是逻辑处理机制不同，前者按照点列表生成多段曲线，后者生成多个圆。也就是说，对于后者，似乎存在一个隐式的“循环”操作。",{"type":167,"tag":172,"props":584,"children":585},{},[586],{"type":176,"value":587},"当两个列表长度不匹配时，通过设置“连缀”选项来处理，可选“最短列表”、“笛卡尔积（叉积）”等。鉴于在非绘图绘表的 Web 数据处理一般是操作相同长度的列表，所以这个设计不能直接套用。",{"type":167,"tag":172,"props":589,"children":590},{},[591],{"type":176,"value":592},"因为用节点编排逻辑只是代码的某种子集，所以见到 Dynamo 中有“节点转换到代码”这种功能也不足为奇。在 Dynamo Primer 的“最佳实践”章节，甚至直接提到了可以使用节点到代码功能降低图形复杂度。只是，他还说节点到代码“无法轻松返回”？难道节点到代码丢失了除了节点位置之类的其他信息，或者只是单纯没有代码解析器所以提供这个功能。",{"type":167,"tag":172,"props":594,"children":595},{},[596],{"type":167,"tag":187,"props":597,"children":600},{"alt":598,"src":599},"dynamo nodes 2 codes","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311638043.png",[],{"type":167,"tag":172,"props":602,"children":603},{},[604],{"type":176,"value":605},"至于在创建、操作数据和编排逻辑这块，代码的表达性要比节点强太多了，以条件逻辑举例，见下图。",{"type":167,"tag":172,"props":607,"children":608},{},[609],{"type":167,"tag":187,"props":610,"children":613},{"alt":611,"src":612},"condition expression","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311643375.png",[],{"type":167,"tag":172,"props":615,"children":616},{},[617],{"type":176,"value":618},"那么节点强在什么地方呢？举个例子，可视化变成的一个优势是可以直观的观察到数据流，并且提供了更强的人机交互。所以，如果代码块支持用模版语法自定义变量，再由节点作为可控输入，就可以二者的优势。这其实是“函数”，也就是说，代码块本身只是代码，并没有显示的切换成“表达式”、“语句”、“函数”等模式，而传统意义上的代码中的“函数”在可视化编程中是个外显的界面概念。",{"type":167,"tag":172,"props":620,"children":621},{},[622],{"type":176,"value":623},"实际上，在 Dynamo 的“代码块”可以声明“函数”。声明后，其他代码块可以直接调用函数而无需连线。在这里，节点的操作和代码创建函数共享了一整个空间，不过事情似乎会变得更难以理解。",{"type":167,"tag":172,"props":625,"children":626},{},[627],{"type":176,"value":628},"最后，一个节点的示例文档，介绍了输入输出、分类、使用案例，以及进阶使用方法。",{"type":167,"tag":172,"props":630,"children":631},{},[632],{"type":167,"tag":187,"props":633,"children":636},{"alt":634,"src":635},"https://dictionary.dynamobim.com/#/Core/Color/Create/Add","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202503200342002.png",[],{"type":167,"tag":214,"props":638,"children":639},{},[640],{"type":167,"tag":218,"props":641,"children":642},{},[643],{"type":167,"tag":204,"props":644,"children":647},{"href":645,"rel":646},"https://dictionary.dynamobim.com",[208],[648],{"type":176,"value":649},"节点文档",{"type":167,"tag":297,"props":651,"children":653},{"id":652},"扩展",[654],{"type":176,"value":652},{"type":167,"tag":172,"props":656,"children":657},{},[658],{"type":176,"value":659},"关于 Dynamo 的自定义节点，找到几个有用的库：",{"type":167,"tag":214,"props":661,"children":662},{},[663,675,687],{"type":167,"tag":218,"props":664,"children":665},{},[666,673],{"type":167,"tag":204,"props":667,"children":670},{"href":668,"rel":669},"https://data-shapes.io/blog/",[208],[671],{"type":176,"value":672},"Data Shapes",{"type":176,"value":674},"：绘图和数据处理用的节点，包含了图表、表单、地图、表格、UI 构建（用户侧的表单等）。",{"type":167,"tag":218,"props":676,"children":677},{},[678,685],{"type":167,"tag":204,"props":679,"children":682},{"href":680,"rel":681},"https://bimorph.com/bimorph-nodes/",[208],[683],{"type":176,"value":684},"BIMORPH Nodes",{"type":176,"value":686},"：包含了碰撞检测等高级功能，主要面向 CAD、Curve、Revit 之类的数据结构。",{"type":167,"tag":218,"props":688,"children":689},{},[690,697],{"type":167,"tag":204,"props":691,"children":694},{"href":692,"rel":693},"https://github.com/ksobon/Bumblebee",[208],[695],{"type":176,"value":696},"Bumblebee",{"type":176,"value":698},"：用于操作 Excel，但是最近一次提交在 2019 年。",{"type":167,"tag":172,"props":700,"children":701},{},[702],{"type":176,"value":703},"Data Shapes 太棒了，可以用图表快速分析图中的数据。但是 Github 上只有 50+ 星星，看来 Dynamo 的用户中懂代码的群体还是太小了。其实就连 Dynamo 仓库本身的 Issue 数量也才 300+（未关闭的）。",{"title":160,"searchDepth":705,"depth":705,"links":706},2,[707,708,709,710],{"id":299,"depth":705,"text":299},{"id":512,"depth":705,"text":512},{"id":575,"depth":705,"text":575},{"id":652,"depth":705,"text":652},"markdown","content:6.maps:_products:dynamo.md","content","6.maps/_products/dynamo.md","6.maps/_products/dynamo","md",[718,721],{"_path":719,"title":720,"description":160},"/maps/_products/budibase","Budibase",{"_path":722,"title":723,"description":724},"/maps/_programming/dx","Developer Experience（DX）","开发者体验（Developer Experience，DX）是指开发者在使用产品、工具、框架等过程中的感受和体验。它是用户体验（User Experience，UX）的一个子集，专注于开发者的需求和体验。",1742745248790]