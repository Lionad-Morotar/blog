[{"data":1,"prerenderedAt":728},["ShallowReactive",2],{"navigation":3,"/maps/_products/dynamo":158,"/maps/_products/dynamo-surround":720},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":714,"_id":715,"_source":716,"_file":717,"_stem":718,"_extension":719},"/maps/_products/dynamo","_products",false,true,"","Dynamo","Dynamo 原本是 Revit 中建筑信息模型 (BIM) 的附加模块，后来发展成熟，成为一个给设计师探索可视化编程、解决问题并自行制作工具的平台。",{"type":167,"children":168,"toc":707},"root",[169,181,186,194,201,216,271,276,281,286,294,299,305,310,318,377,382,390,398,432,437,442,447,452,457,465,470,477,482,490,495,500,508,513,518,523,528,536,541,549,554,559,566,571,576,581,586,591,596,604,609,617,622,627,632,640,653,658,663,702],{"type":170,"tag":171,"props":172,"children":173},"element","blockquote",{},[174],{"type":170,"tag":175,"props":176,"children":177},"p",{},[178],{"type":179,"value":180},"text","一款可视化编程工具，旨在同时供非编程人员和编程人员使用。它使用户能够直观地查看脚本行为、定义自定义逻辑以及使用各种文本编程语言的脚本。",{"type":170,"tag":175,"props":182,"children":183},{},[184],{"type":179,"value":185},"一个 Dynamo 示例：",{"type":170,"tag":175,"props":187,"children":188},{},[189],{"type":170,"tag":190,"props":191,"children":193},"img",{"alt":163,"src":192},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311908636.png",[],{"type":170,"tag":195,"props":196,"children":198},"h4",{"id":197},"dynamo-primer",[199],{"type":179,"value":200},"Dynamo Primer",{"type":170,"tag":175,"props":202,"children":203},{},[204,206,214],{"type":179,"value":205},"Autodesk 给 Dynamo 编写了一册全面指南，叫 ",{"type":170,"tag":207,"props":208,"children":212},"a",{"href":209,"rel":210},"https://primer.dynamobim.org/zh-cn/index.html",[211],"nofollow",[213],{"type":179,"value":200},{"type":179,"value":215},"。",{"type":170,"tag":217,"props":218,"children":219},"ul",{},[220,226,231,236,241,246,251,256,261,266],{"type":170,"tag":221,"props":222,"children":223},"li",{},[224],{"type":179,"value":225},"上下文：“可视化编程”的确切含义是什么？我需要了解哪些概念才能深入了解 Dynamo？",{"type":170,"tag":221,"props":227,"children":228},{},[229],{"type":179,"value":230},"快速入门：如何获取 Dynamo 并创建第一个程序？",{"type":170,"tag":221,"props":232,"children":233},{},[234],{"type":179,"value":235},"程序中的内容：Dynamo 的功能部分是什么以及如何使用它们？",{"type":170,"tag":221,"props":237,"children":238},{},[239],{"type":179,"value":240},"构建块：“数据”是什么，我可以在程序中开始使用哪些基本类型？",{"type":170,"tag":221,"props":242,"children":243},{},[244],{"type":179,"value":245},"用于设计的几何体：如何在 Dynamo 中使用几何元素？",{"type":170,"tag":221,"props":247,"children":248},{},[249],{"type":179,"value":250},"列表、列表、列表：如何管理和协调数据结构？",{"type":170,"tag":221,"props":252,"children":253},{},[254],{"type":179,"value":255},"节点中的代码：如何使用自己的代码开始扩展 Dynamo？",{"type":170,"tag":221,"props":257,"children":258},{},[259],{"type":179,"value":260},"计算 BIM: 如何将 Dynamo 与 Revit 模型结合使用？",{"type":170,"tag":221,"props":262,"children":263},{},[264],{"type":179,"value":265},"自定义节点：如何创建自己的节点？",{"type":170,"tag":221,"props":267,"children":268},{},[269],{"type":179,"value":270},"软件包：如何与社区共享我的工具？",{"type":170,"tag":175,"props":272,"children":273},{},[274],{"type":179,"value":275},"程序需要按照算法来工作，所以这些操作必然遵循输入、处理和输出的基本逻辑。",{"type":170,"tag":175,"props":277,"children":278},{},[279],{"type":179,"value":280},"编程的关键及我们会遇到的第一个障碍是：必须依靠某种形式的抽象形式，才能与计算机进行有效通信。",{"type":170,"tag":175,"props":282,"children":283},{},[284],{"type":179,"value":285},"可视化编程把描述性操作抽象成了节点（及节点关系）。Dynamo 将节点关系描述为“连接，将定义数据流”。下面是一个通过中心点和半径创建圆的例子：",{"type":170,"tag":175,"props":287,"children":288},{},[289],{"type":170,"tag":190,"props":290,"children":293},{"alt":291,"src":292},"Dynamo example to create a circle","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270238695.png",[],{"type":170,"tag":175,"props":295,"children":296},{},[297],{"type":179,"value":298},"Dynamo 的开发版本叫做“bleeding edge”。出血（bleeding）是一个设计领域术语，指裁切边缘距材料边缘的距离。",{"type":170,"tag":300,"props":301,"children":303},"h2",{"id":302},"界面",[304],{"type":179,"value":302},{"type":170,"tag":175,"props":306,"children":307},{},[308],{"type":179,"value":309},"节点主要分为如下几个部分，其中，“核心”和“几何”包含最多数量的节点（“核心”是什么？）。",{"type":170,"tag":175,"props":311,"children":312},{},[313],{"type":170,"tag":190,"props":314,"children":317},{"alt":315,"src":316},"Dynamo Libs","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270249685.png",[],{"type":170,"tag":319,"props":320,"children":321},"ol",{},[322,327,332,337,342,347,352,357,362,367,372],{"type":170,"tag":221,"props":323,"children":324},{},[325],{"type":179,"value":326},"词典",{"type":170,"tag":221,"props":328,"children":329},{},[330],{"type":179,"value":331},"显示",{"type":170,"tag":221,"props":333,"children":334},{},[335],{"type":179,"value":336},"几何",{"type":170,"tag":221,"props":338,"children":339},{},[340],{"type":179,"value":341},"ImportExport",{"type":170,"tag":221,"props":343,"children":344},{},[345],{"type":179,"value":346},"输入",{"type":170,"tag":221,"props":348,"children":349},{},[350],{"type":179,"value":351},"列表",{"type":170,"tag":221,"props":353,"children":354},{},[355],{"type":179,"value":356},"匹配",{"type":170,"tag":221,"props":358,"children":359},{},[360],{"type":179,"value":361},"Revit",{"type":170,"tag":221,"props":363,"children":364},{},[365],{"type":179,"value":366},"脚本",{"type":170,"tag":221,"props":368,"children":369},{},[370],{"type":179,"value":371},"字符串",{"type":170,"tag":221,"props":373,"children":374},{},[375],{"type":179,"value":376},"附加模块",{"type":170,"tag":175,"props":378,"children":379},{},[380],{"type":179,"value":381},"可以参考一下节点布局算法。界面中的“节点清理”即节点布局：",{"type":170,"tag":175,"props":383,"children":384},{},[385],{"type":170,"tag":190,"props":386,"children":389},{"alt":387,"src":388},"after clean nodes","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270257741.png",[],{"type":170,"tag":175,"props":391,"children":392},{},[393],{"type":170,"tag":190,"props":394,"children":397},{"alt":395,"src":396},"一个 Dynamo 节点","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270309333.png",[],{"type":170,"tag":319,"props":399,"children":400},{},[401,403,408,409,414,415,420,421,426,427],{"type":179,"value":402},"\n  ",{"type":170,"tag":221,"props":404,"children":405},{},[406],{"type":179,"value":407},"名称 - 具有 Category.Name 命名约定的节点名称",{"type":179,"value":402},{"type":170,"tag":221,"props":410,"children":411},{},[412],{"type":179,"value":413},"主节点 - 节点的主体 - 在此处单击鼠标右键可显示整个节点级别的选项",{"type":179,"value":402},{"type":170,"tag":221,"props":416,"children":417},{},[418],{"type":179,"value":419},"端口（输入输出）- 导线的接受器，它们向节点提供输入数据以及节点操作的结果，有类型和值",{"type":179,"value":402},{"type":170,"tag":221,"props":422,"children":423},{},[424],{"type":179,"value":425},"连缀图标 - 表示为匹配列表输入指定的“连缀”选项（稍后再做详细介绍）",{"type":179,"value":402},{"type":170,"tag":221,"props":428,"children":429},{},[430],{"type":179,"value":431},"默认值 - 在输入端口上单击鼠标右键 - 某些节点具有可以使用也可以不使用的默认值。",{"type":170,"tag":175,"props":433,"children":434},{},[435],{"type":179,"value":436},"节点根据颜色还划分为：非活动、错误、冻结、选中、警告等状态。",{"type":170,"tag":175,"props":438,"children":439},{},[440],{"type":179,"value":441},"所有节点只分三层排列，其命名惯例为：library.category.nodeName。",{"type":170,"tag":175,"props":443,"children":444},{},[445],{"type":179,"value":446},"如何管理大量节点？通过注释标记节点功能、Watch 节点观察节点输出、Group 分组节点。",{"type":170,"tag":175,"props":448,"children":449},{},[450],{"type":179,"value":451},"因为节点的颜色已经被用来表示节点的状态，所以节点层面还缺少一种视觉方式来表示节点的类型。在 PRay 中也许可以使用图标、背景纹案之类的方案。",{"type":170,"tag":175,"props":453,"children":454},{},[455],{"type":179,"value":456},"在工程中 Dynamo 使用分组颜色来区分不用的功能区域。",{"type":170,"tag":175,"props":458,"children":459},{},[460],{"type":170,"tag":190,"props":461,"children":464},{"alt":462,"src":463},"dynamo project template","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311703670.png",[],{"type":170,"tag":175,"props":466,"children":467},{},[468],{"type":179,"value":469},"Dynamo 的节点很清晰也很漂亮：",{"type":170,"tag":175,"props":471,"children":472},{},[473],{"type":170,"tag":190,"props":474,"children":476},{"alt":163,"src":475},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270327205.png",[],{"type":170,"tag":175,"props":478,"children":479},{},[480],{"type":179,"value":481},"节点的抽象层级应该符合用户的认知层级，过高过低都不行，所以产品设计上经常会有“表达式”这么一个用来描述公式化逻辑的节点。如果要用节点把公式写出来那就太麻烦了，比如黄金螺旋的公式很简单：$x=r\\cos(\\theta)$, $y=r\\sin(\\theta)$，但是如果用节点来表达就会变得很复杂，如下图：",{"type":170,"tag":175,"props":483,"children":484},{},[485],{"type":170,"tag":190,"props":486,"children":489},{"alt":487,"src":488},"Gold Spiral","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270345013.png",[],{"type":170,"tag":175,"props":491,"children":492},{},[493],{"type":179,"value":494},"怎么处理混乱的输入？",{"type":170,"tag":175,"props":496,"children":497},{},[498],{"type":179,"value":499},"如图，有三种条件逻辑的表达方式，但是为了给这三个节点输入统一的值，输入连线处理得很难看：",{"type":170,"tag":175,"props":501,"children":502},{},[503],{"type":170,"tag":190,"props":504,"children":507},{"alt":505,"src":506},"three ways to express conditional logic","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270349782.png",[],{"type":170,"tag":175,"props":509,"children":510},{},[511],{"type":179,"value":512},"应该创建“节点分身”之类的概念，或是“幽灵节点”？操作逻辑可以是：从一个非分身节点复制出一个分身，分身和节点的数据保持一致，两者都可以修改。然后可以将分身节点拖到任意地方使用，这样就解耦了输入和使用方。不过，这样似乎会导致新的混乱，em...",{"type":170,"tag":300,"props":514,"children":516},{"id":515},"几何体",[517],{"type":179,"value":515},{"type":170,"tag":175,"props":519,"children":520},{},[521],{"type":179,"value":522},"“维数是一种开始对几何图形进行分类的便捷方法，但它不一定是最佳方法。毕竟，我们不仅使用“点”、“线”、“平面”和“方框”建模 - 如果我想要弯曲，该怎么办？”",{"type":170,"tag":175,"props":524,"children":525},{},[526],{"type":179,"value":527},"正如游戏建模中接触的“网格”的概念，Dynamo 中自有一套几何体的数据类型（估计和 Autodesk 其他产品保持一致）：",{"type":170,"tag":175,"props":529,"children":530},{},[531],{"type":170,"tag":190,"props":532,"children":535},{"alt":533,"src":534},"Geometry Data Types","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270420841.png",[],{"type":170,"tag":175,"props":537,"children":538},{},[539],{"type":179,"value":540},"之前用过 C4D 和 Blender，这些数据类型都和 Dynamo 的类似（或者说几乎一致？）",{"type":170,"tag":175,"props":542,"children":543},{},[544],{"type":170,"tag":190,"props":545,"children":548},{"alt":546,"src":547},"Geometry Types","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270423147.png",[],{"type":170,"tag":175,"props":550,"children":551},{},[552],{"type":179,"value":553},"“抽象”的数据类型不能在屏幕上预览，这和“headless”的概念很类似，都是在界面底层通过操作数据结构来创建一种更基本的“逻辑”，可以没有界面。说“可以”是因为比如“平面”之类的数据类型尽管是抽象的，但（为了操作的便利性）仍可以在界面上预览。",{"type":170,"tag":175,"props":555,"children":556},{},[557],{"type":179,"value":558},"节点冻结用于禁用当前及下游节点，可以避免修改上游节点导致下游节点重新计算带来的巨大性能开销，如下图，冻结了圆和圆锥的 Union 操作。",{"type":170,"tag":175,"props":560,"children":561},{},[562],{"type":170,"tag":190,"props":563,"children":565},{"alt":163,"src":564},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501270450836.png",[],{"type":170,"tag":175,"props":567,"children":568},{},[569],{"type":179,"value":570},"Comfy UI 在跑流程时，节点上会有个进度条显示，暗示当前的执行进度。",{"type":170,"tag":175,"props":572,"children":573},{},[574],{"type":179,"value":575},"两种形式分别对应：实时预览和离线计算。鉴于 PRay 的代码编辑需要实时预览，但是节点的执行机制需要设计成离线式的，也就是全部走异步+防抖的形式。不过，这样的话又会碰到副作用的问题。.. 还是再考虑下。",{"type":170,"tag":300,"props":577,"children":579},{"id":578},"数据结构",[580],{"type":179,"value":578},{"type":170,"tag":175,"props":582,"children":583},{},[584],{"type":179,"value":585},"对于能接受列表的节点，比如 PolyCurve.ByPoints 和 Circle.ByCenterPointRadius，他们都能接受点列表作为输入，但是逻辑处理机制不同，前者按照点列表生成多段曲线，后者生成多个圆。也就是说，对于后者，似乎存在一个隐式的“循环”操作。",{"type":170,"tag":175,"props":587,"children":588},{},[589],{"type":179,"value":590},"当两个列表长度不匹配时，通过设置“连缀”选项来处理，可选“最短列表”、“笛卡尔积（叉积）”等。鉴于在非绘图绘表的 Web 数据处理一般是操作相同长度的列表，所以这个设计不能直接套用。",{"type":170,"tag":175,"props":592,"children":593},{},[594],{"type":179,"value":595},"因为用节点编排逻辑只是代码的某种子集，所以见到 Dynamo 中有“节点转换到代码”这种功能也不足为奇。在 Dynamo Primer 的“最佳实践”章节，甚至直接提到了可以使用节点到代码功能降低图形复杂度。只是，他还说节点到代码“无法轻松返回”？难道节点到代码丢失了除了节点位置之类的其他信息，或者只是单纯没有代码解析器所以提供这个功能。",{"type":170,"tag":175,"props":597,"children":598},{},[599],{"type":170,"tag":190,"props":600,"children":603},{"alt":601,"src":602},"dynamo nodes 2 codes","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311638043.png",[],{"type":170,"tag":175,"props":605,"children":606},{},[607],{"type":179,"value":608},"至于在创建、操作数据和编排逻辑这块，代码的表达性要比节点强太多了，以条件逻辑举例，见下图。",{"type":170,"tag":175,"props":610,"children":611},{},[612],{"type":170,"tag":190,"props":613,"children":616},{"alt":614,"src":615},"condition expression","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202501311643375.png",[],{"type":170,"tag":175,"props":618,"children":619},{},[620],{"type":179,"value":621},"那么节点强在什么地方呢？举个例子，可视化变成的一个优势是可以直观的观察到数据流，并且提供了更强的人机交互。所以，如果代码块支持用模版语法自定义变量，再由节点作为可控输入，就可以二者的优势。这其实是“函数”，也就是说，代码块本身只是代码，并没有显示的切换成“表达式”、“语句”、“函数”等模式，而传统意义上的代码中的“函数”在可视化编程中是个外显的界面概念。",{"type":170,"tag":175,"props":623,"children":624},{},[625],{"type":179,"value":626},"实际上，在 Dynamo 的“代码块”可以声明“函数”。声明后，其他代码块可以直接调用函数而无需连线。在这里，节点的操作和代码创建函数共享了一整个空间，不过事情似乎会变得更难以理解。",{"type":170,"tag":175,"props":628,"children":629},{},[630],{"type":179,"value":631},"最后，一个节点的示例文档，介绍了输入输出、分类、使用案例，以及进阶使用方法。",{"type":170,"tag":175,"props":633,"children":634},{},[635],{"type":170,"tag":190,"props":636,"children":639},{"alt":637,"src":638},"https://dictionary.dynamobim.com/#/Core/Color/Create/Add","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202503200342002.png",[],{"type":170,"tag":217,"props":641,"children":642},{},[643],{"type":170,"tag":221,"props":644,"children":645},{},[646],{"type":170,"tag":207,"props":647,"children":650},{"href":648,"rel":649},"https://dictionary.dynamobim.com",[211],[651],{"type":179,"value":652},"节点文档",{"type":170,"tag":300,"props":654,"children":656},{"id":655},"扩展",[657],{"type":179,"value":655},{"type":170,"tag":175,"props":659,"children":660},{},[661],{"type":179,"value":662},"关于 Dynamo 的自定义节点，找到几个有用的库：",{"type":170,"tag":217,"props":664,"children":665},{},[666,678,690],{"type":170,"tag":221,"props":667,"children":668},{},[669,676],{"type":170,"tag":207,"props":670,"children":673},{"href":671,"rel":672},"https://data-shapes.io/blog/",[211],[674],{"type":179,"value":675},"Data Shapes",{"type":179,"value":677},"：绘图和数据处理用的节点，包含了图表、表单、地图、表格、UI 构建（用户侧的表单等）。",{"type":170,"tag":221,"props":679,"children":680},{},[681,688],{"type":170,"tag":207,"props":682,"children":685},{"href":683,"rel":684},"https://bimorph.com/bimorph-nodes/",[211],[686],{"type":179,"value":687},"BIMORPH Nodes",{"type":179,"value":689},"：包含了碰撞检测等高级功能，主要面向 CAD、Curve、Revit 之类的数据结构。",{"type":170,"tag":221,"props":691,"children":692},{},[693,700],{"type":170,"tag":207,"props":694,"children":697},{"href":695,"rel":696},"https://github.com/ksobon/Bumblebee",[211],[698],{"type":179,"value":699},"Bumblebee",{"type":179,"value":701},"：用于操作 Excel，但是最近一次提交在 2019 年。",{"type":170,"tag":175,"props":703,"children":704},{},[705],{"type":179,"value":706},"Data Shapes 太棒了，可以用图表快速分析图中的数据。但是 Github 上只有 50+ 星星，看来 Dynamo 的用户中懂代码的群体还是太小了。其实就连 Dynamo 仓库本身的 Issue 数量也才 300+（未关闭的）。",{"title":163,"searchDepth":708,"depth":708,"links":709},2,[710,711,712,713],{"id":302,"depth":708,"text":302},{"id":515,"depth":708,"text":515},{"id":578,"depth":708,"text":578},{"id":655,"depth":708,"text":655},"markdown","content:6.maps:_products:dynamo.md","content","6.maps/_products/dynamo.md","6.maps/_products/dynamo","md",[721,724],{"_path":722,"title":723,"description":163},"/maps/_products/budibase","Budibase",{"_path":725,"title":726,"description":727},"/maps/_programming/dx","Developer Experience（DX）","开发者体验（Developer Experience，DX）是指开发者在使用产品、工具、框架等过程中的感受和体验。它是用户体验（User Experience，UX）的一个子集，专注于开发者的需求和体验。",1742808197920]