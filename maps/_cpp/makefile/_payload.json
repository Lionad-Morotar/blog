[{"data":1,"prerenderedAt":590},["ShallowReactive",2],{"navigation":3,"/maps/_cpp/makefile":155,"/maps/_cpp/makefile-surround":581},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":575,"_id":576,"_source":577,"_file":578,"_stem":579,"_extension":580},"/maps/_cpp/makefile","_cpp",false,true,"","Makefile","Makefile 构建工具基础教程。",{"type":164,"children":165,"toc":571},"root",[166,174,180,185,190,234,239,244,249,254,316,321,342,347,352,357,511,523,528,565],{"type":167,"tag":168,"props":169,"children":170},"element","p",{},[171],{"type":172,"value":173},"text","之前看 ElementUI 的时候有了解一点 Makefile 的语法，现在正在看 C++，恰好是更细致学习一下的好机会。",{"type":167,"tag":175,"props":176,"children":178},"h2",{"id":177},"概述",[179],{"type":172,"value":177},{"type":167,"tag":168,"props":181,"children":182},{},[183],{"type":172,"value":184},"Make（GNU Make）是一个自动化工具，它的特色在于有基本逻辑能力，可以跟踪特定文件。这样一来，诸如按需编译这种任务就可以高效完成。",{"type":167,"tag":168,"props":186,"children":187},{},[188],{"type":172,"value":189},"它最主要的语法结构如下代码所示。",{"type":167,"tag":191,"props":192,"children":196},"pre",{"className":193,"code":194,"language":195,"meta":160,"style":160},"language-makefile shiki shiki-themes material-theme-lighter github-light github-dark monokai","target: dependencies\n        commands\n","makefile",[197],{"type":167,"tag":198,"props":199,"children":200},"code",{"__ignoreMap":160},[201,225],{"type":167,"tag":202,"props":203,"children":206},"span",{"class":204,"line":205},"line",1,[207,213,219],{"type":167,"tag":202,"props":208,"children":210},{"style":209},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[211],{"type":172,"value":212},"target",{"type":167,"tag":202,"props":214,"children":216},{"style":215},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[217],{"type":172,"value":218},":",{"type":167,"tag":202,"props":220,"children":222},{"style":221},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[223],{"type":172,"value":224}," dependencies\n",{"type":167,"tag":202,"props":226,"children":228},{"class":204,"line":227},2,[229],{"type":167,"tag":202,"props":230,"children":231},{"style":221},[232],{"type":172,"value":233},"        commands\n",{"type":167,"tag":168,"props":235,"children":236},{},[237],{"type":172,"value":238},"这意味着：构建目标（target） = 依赖（dependencies） + 执行命令（commands）。",{"type":167,"tag":168,"props":240,"children":241},{},[242],{"type":172,"value":243},"就语法来说，依赖可以不存在，这就表示某个目标意味着直接执行对应的指令。这有点像是定义了一个命令名，或者是一个快捷入口之类的。比如，你可以定义一个 help 目标，以便执行 make help 时，在控制台输出一串帮助文本。",{"type":167,"tag":168,"props":245,"children":246},{},[247],{"type":172,"value":248},"执行时，直接使用 make \u003Ctarget> 就可以了。如果构建目标的修改日期比依赖更新的话，显而易见就不需要再执行对应的指令；如果依赖不存在，那么会自动回溯执行依赖作为目标时的指令，如此一层一层递归下去，直到所有的 target 及 dependencies 的关系被确认。",{"type":167,"tag":168,"props":250,"children":251},{},[252],{"type":172,"value":253},"由于 Make 不会像解析编程语言一样去细致解析 Makefile，所以其语法能力还是稍弱。不会鉴于其隐含的终极目标只是说明各个文件的依赖关系时顺带执行指令，所以也就可以理解为什么 Makefile 中变量只是类似 C 语言中宏一样的字符串替换了。",{"type":167,"tag":191,"props":255,"children":257},{"className":193,"code":256,"language":195,"meta":160,"style":160},"# define my variable\nvar = strings\ntarget: $(var)\n",[258],{"type":167,"tag":198,"props":259,"children":260},{"__ignoreMap":160},[261,270,288],{"type":167,"tag":202,"props":262,"children":263},{"class":204,"line":205},[264],{"type":167,"tag":202,"props":265,"children":267},{"style":266},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[268],{"type":172,"value":269},"# define my variable\n",{"type":167,"tag":202,"props":271,"children":272},{"class":204,"line":227},[273,278,283],{"type":167,"tag":202,"props":274,"children":275},{"style":221},[276],{"type":172,"value":277},"var ",{"type":167,"tag":202,"props":279,"children":280},{"style":215},[281],{"type":172,"value":282},"=",{"type":167,"tag":202,"props":284,"children":285},{"style":221},[286],{"type":172,"value":287}," strings\n",{"type":167,"tag":202,"props":289,"children":291},{"class":204,"line":290},3,[292,296,300,306,311],{"type":167,"tag":202,"props":293,"children":294},{"style":209},[295],{"type":172,"value":212},{"type":167,"tag":202,"props":297,"children":298},{"style":215},[299],{"type":172,"value":218},{"type":167,"tag":202,"props":301,"children":303},{"style":302},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[304],{"type":172,"value":305}," $(",{"type":167,"tag":202,"props":307,"children":308},{"style":221},[309],{"type":172,"value":310},"var",{"type":167,"tag":202,"props":312,"children":313},{"style":302},[314],{"type":172,"value":315},")\n",{"type":167,"tag":168,"props":317,"children":318},{},[319],{"type":172,"value":320},"Make 和 C/C++ 确实是一对儿。Make 在识别 .o 文件时，能自动把 .c 添加为依赖关系。这功能叫做自动推导（或隐私推导）。除了隐私推导，他还支持类似 C 的 Include，把别的 Makefile 整个包含进来。",{"type":167,"tag":191,"props":322,"children":324},{"className":193,"code":323,"language":195,"meta":160,"style":160},"include foo.make a.mk b.mk\n",[325],{"type":167,"tag":198,"props":326,"children":327},{"__ignoreMap":160},[328],{"type":167,"tag":202,"props":329,"children":330},{"class":204,"line":205},[331,337],{"type":167,"tag":202,"props":332,"children":334},{"style":333},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[335],{"type":172,"value":336},"include",{"type":167,"tag":202,"props":338,"children":339},{"style":221},[340],{"type":172,"value":341}," foo.make a.mk b.mk\n",{"type":167,"tag":168,"props":343,"children":344},{},[345],{"type":172,"value":346},"可以发现，Make 和字符串要打非常多交道，所以它支持各种通配符也就不令人意外了。如同 SHELL 中的通配符，* 和 ⁓ 分别代表任意长度字符串和用户主目录。不知道你用过正则没有，通配符就用作匹配及确认，再返回 true 或 false。这时候有人要问了，既然 Makefile 和字符串打交道，通配符返回布尔有啥用啊，它没办法表示列表哇！",{"type":167,"tag":168,"props":348,"children":349},{},[350],{"type":172,"value":351},"这就要说到 Makefile 的关键字了，wildcard，它是扩展关键字，可以把通配符匹配到的所有东西“扩展”为“列表”。列表当然是想象中的列表，其实际产物还是字符串的啦。不过为了更方便操作列表，还有辅助用的其它关键字，比如 patsubst，它是类似正则中的 replaceAll 那种效果。",{"type":167,"tag":168,"props":353,"children":354},{},[355],{"type":172,"value":356},"下面用一个例子来说明吧，把目录下所有 C 文件找出来，替换为 .o 后缀，这样一来，就可以用 gcc 全部编译了。",{"type":167,"tag":191,"props":358,"children":360},{"className":193,"code":359,"language":195,"meta":160,"style":160},"cfiles := $(wildcard *.c)\nofiles := $(patsubst %.c, %.o, %(cfiles))\ncompile: $(ofiles)\n         gcc -o $(ofiles)\n",[361],{"type":167,"tag":198,"props":362,"children":363},{"__ignoreMap":160},[364,403,464,489],{"type":167,"tag":202,"props":365,"children":366},{"class":204,"line":205},[367,372,377,381,387,393,399],{"type":167,"tag":202,"props":368,"children":369},{"style":221},[370],{"type":172,"value":371},"cfiles ",{"type":167,"tag":202,"props":373,"children":374},{"style":215},[375],{"type":172,"value":376},":=",{"type":167,"tag":202,"props":378,"children":379},{"style":302},[380],{"type":172,"value":305},{"type":167,"tag":202,"props":382,"children":384},{"style":383},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[385],{"type":172,"value":386},"wildcard",{"type":167,"tag":202,"props":388,"children":390},{"style":389},"--shiki-light:#E53935;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[391],{"type":172,"value":392}," *",{"type":167,"tag":202,"props":394,"children":396},{"style":395},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[397],{"type":172,"value":398},".c",{"type":167,"tag":202,"props":400,"children":401},{"style":302},[402],{"type":172,"value":315},{"type":167,"tag":202,"props":404,"children":405},{"class":204,"line":227},[406,411,415,419,424,429,433,438,442,447,451,455,460],{"type":167,"tag":202,"props":407,"children":408},{"style":221},[409],{"type":172,"value":410},"ofiles ",{"type":167,"tag":202,"props":412,"children":413},{"style":215},[414],{"type":172,"value":376},{"type":167,"tag":202,"props":416,"children":417},{"style":302},[418],{"type":172,"value":305},{"type":167,"tag":202,"props":420,"children":421},{"style":383},[422],{"type":172,"value":423},"patsubst",{"type":167,"tag":202,"props":425,"children":426},{"style":389},[427],{"type":172,"value":428}," %",{"type":167,"tag":202,"props":430,"children":431},{"style":395},[432],{"type":172,"value":398},{"type":167,"tag":202,"props":434,"children":435},{"style":302},[436],{"type":172,"value":437},",",{"type":167,"tag":202,"props":439,"children":440},{"style":389},[441],{"type":172,"value":428},{"type":167,"tag":202,"props":443,"children":444},{"style":395},[445],{"type":172,"value":446},".o",{"type":167,"tag":202,"props":448,"children":449},{"style":302},[450],{"type":172,"value":437},{"type":167,"tag":202,"props":452,"children":453},{"style":389},[454],{"type":172,"value":428},{"type":167,"tag":202,"props":456,"children":457},{"style":395},[458],{"type":172,"value":459},"(cfiles)",{"type":167,"tag":202,"props":461,"children":462},{"style":302},[463],{"type":172,"value":315},{"type":167,"tag":202,"props":465,"children":466},{"class":204,"line":290},[467,472,476,480,485],{"type":167,"tag":202,"props":468,"children":469},{"style":209},[470],{"type":172,"value":471},"compile",{"type":167,"tag":202,"props":473,"children":474},{"style":215},[475],{"type":172,"value":218},{"type":167,"tag":202,"props":477,"children":478},{"style":302},[479],{"type":172,"value":305},{"type":167,"tag":202,"props":481,"children":482},{"style":221},[483],{"type":172,"value":484},"ofiles",{"type":167,"tag":202,"props":486,"children":487},{"style":302},[488],{"type":172,"value":315},{"type":167,"tag":202,"props":490,"children":492},{"class":204,"line":491},4,[493,498,503,507],{"type":167,"tag":202,"props":494,"children":495},{"style":221},[496],{"type":172,"value":497},"         gcc -o ",{"type":167,"tag":202,"props":499,"children":500},{"style":302},[501],{"type":172,"value":502},"$(",{"type":167,"tag":202,"props":504,"children":505},{"style":221},[506],{"type":172,"value":484},{"type":167,"tag":202,"props":508,"children":509},{"style":302},[510],{"type":172,"value":315},{"type":167,"tag":168,"props":512,"children":513},{},[514],{"type":167,"tag":515,"props":516,"children":520},"a",{"href":517,"rel":518},"https://seisman.github.io/how-to-write-makefile/rules.html#id5",[519],"nofollow",[521],{"type":172,"value":522},"TODO continue",{"type":167,"tag":175,"props":524,"children":526},{"id":525},"相关",[527],{"type":172,"value":525},{"type":167,"tag":529,"props":530,"children":531},"ul",{},[532,545,555],{"type":167,"tag":533,"props":534,"children":535},"li",{},[536,543],{"type":167,"tag":515,"props":537,"children":540},{"href":538,"rel":539},"https://github.com/seisman/how-to-write-makefile",[519],[541],{"type":172,"value":542},"跟我一起写 Makefile",{"type":172,"value":544},"，陈皓老师在 2004 年写的博客。非常易读，适合入门学习。",{"type":167,"tag":533,"props":546,"children":547},{},[548],{"type":167,"tag":515,"props":549,"children":552},{"href":550,"rel":551},"https://blog.csdn.net/qq_31811537/article/details/82892128",[519],[553],{"type":172,"value":554},"Makefile 中的 wildcard 用法",{"type":167,"tag":533,"props":556,"children":557},{},[558],{"type":167,"tag":515,"props":559,"children":562},{"href":560,"rel":561},"https://coolshell.cn/articles/3790.html",[519],[563],{"type":172,"value":564},"如何调试 MAKEFILE 变量",{"type":167,"tag":566,"props":567,"children":568},"style",{},[569],{"type":172,"value":570},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":227,"depth":227,"links":572},[573,574],{"id":177,"depth":227,"text":177},{"id":525,"depth":227,"text":525},"markdown","content:6.maps:_cpp:makefile.md","content","6.maps/_cpp/makefile.md","6.maps/_cpp/makefile","md",[582,586],{"_path":583,"title":584,"description":585},"/maps/_cpp/king-db","King Database","A simple key-value store database",{"_path":587,"title":588,"description":589},"/maps/_cross-platform/device-metrics","Device Metrics","Understand how device pixels, points, and scale factor work together.",1742745249173]