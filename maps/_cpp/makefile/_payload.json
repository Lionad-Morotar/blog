[{"data":1,"prerenderedAt":596},["ShallowReactive",2],{"navigation":3,"/maps/_cpp/makefile":161,"/maps/_cpp/makefile-surround":587},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":581,"_id":582,"_source":583,"_file":584,"_stem":585,"_extension":586},"/maps/_cpp/makefile","_cpp",false,true,"","Makefile","Makefile 构建工具基础教程。",{"type":170,"children":171,"toc":577},"root",[172,180,186,191,196,240,245,250,255,260,322,327,348,353,358,363,517,529,534,571],{"type":173,"tag":174,"props":175,"children":176},"element","p",{},[177],{"type":178,"value":179},"text","之前看 ElementUI 的时候有了解一点 Makefile 的语法，现在正在看 C++，恰好是更细致学习一下的好机会。",{"type":173,"tag":181,"props":182,"children":184},"h2",{"id":183},"概述",[185],{"type":178,"value":183},{"type":173,"tag":174,"props":187,"children":188},{},[189],{"type":178,"value":190},"Make（GNU Make）是一个自动化工具，它的特色在于有基本逻辑能力，可以跟踪特定文件。这样一来，诸如按需编译这种任务就可以高效完成。",{"type":173,"tag":174,"props":192,"children":193},{},[194],{"type":178,"value":195},"它最主要的语法结构如下代码所示。",{"type":173,"tag":197,"props":198,"children":202},"pre",{"className":199,"code":200,"language":201,"meta":166,"style":166},"language-makefile shiki shiki-themes material-theme-lighter github-light github-dark monokai","target: dependencies\n        commands\n","makefile",[203],{"type":173,"tag":204,"props":205,"children":206},"code",{"__ignoreMap":166},[207,231],{"type":173,"tag":208,"props":209,"children":212},"span",{"class":210,"line":211},"line",1,[213,219,225],{"type":173,"tag":208,"props":214,"children":216},{"style":215},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[217],{"type":178,"value":218},"target",{"type":173,"tag":208,"props":220,"children":222},{"style":221},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[223],{"type":178,"value":224},":",{"type":173,"tag":208,"props":226,"children":228},{"style":227},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[229],{"type":178,"value":230}," dependencies\n",{"type":173,"tag":208,"props":232,"children":234},{"class":210,"line":233},2,[235],{"type":173,"tag":208,"props":236,"children":237},{"style":227},[238],{"type":178,"value":239},"        commands\n",{"type":173,"tag":174,"props":241,"children":242},{},[243],{"type":178,"value":244},"这意味着：构建目标（target） = 依赖（dependencies） + 执行命令（commands）。",{"type":173,"tag":174,"props":246,"children":247},{},[248],{"type":178,"value":249},"就语法来说，依赖可以不存在，这就表示某个目标意味着直接执行对应的指令。这有点像是定义了一个命令名，或者是一个快捷入口之类的。比如，你可以定义一个 help 目标，以便执行 make help 时，在控制台输出一串帮助文本。",{"type":173,"tag":174,"props":251,"children":252},{},[253],{"type":178,"value":254},"执行时，直接使用 make \u003Ctarget> 就可以了。如果构建目标的修改日期比依赖更新的话，显而易见就不需要再执行对应的指令；如果依赖不存在，那么会自动回溯执行依赖作为目标时的指令，如此一层一层递归下去，直到所有的 target 及 dependencies 的关系被确认。",{"type":173,"tag":174,"props":256,"children":257},{},[258],{"type":178,"value":259},"由于 Make 不会像解析编程语言一样去细致解析 Makefile，所以其语法能力还是稍弱。不会鉴于其隐含的终极目标只是说明各个文件的依赖关系时顺带执行指令，所以也就可以理解为什么 Makefile 中变量只是类似 C 语言中宏一样的字符串替换了。",{"type":173,"tag":197,"props":261,"children":263},{"className":199,"code":262,"language":201,"meta":166,"style":166},"# define my variable\nvar = strings\ntarget: $(var)\n",[264],{"type":173,"tag":204,"props":265,"children":266},{"__ignoreMap":166},[267,276,294],{"type":173,"tag":208,"props":268,"children":269},{"class":210,"line":211},[270],{"type":173,"tag":208,"props":271,"children":273},{"style":272},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[274],{"type":178,"value":275},"# define my variable\n",{"type":173,"tag":208,"props":277,"children":278},{"class":210,"line":233},[279,284,289],{"type":173,"tag":208,"props":280,"children":281},{"style":227},[282],{"type":178,"value":283},"var ",{"type":173,"tag":208,"props":285,"children":286},{"style":221},[287],{"type":178,"value":288},"=",{"type":173,"tag":208,"props":290,"children":291},{"style":227},[292],{"type":178,"value":293}," strings\n",{"type":173,"tag":208,"props":295,"children":297},{"class":210,"line":296},3,[298,302,306,312,317],{"type":173,"tag":208,"props":299,"children":300},{"style":215},[301],{"type":178,"value":218},{"type":173,"tag":208,"props":303,"children":304},{"style":221},[305],{"type":178,"value":224},{"type":173,"tag":208,"props":307,"children":309},{"style":308},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[310],{"type":178,"value":311}," $(",{"type":173,"tag":208,"props":313,"children":314},{"style":227},[315],{"type":178,"value":316},"var",{"type":173,"tag":208,"props":318,"children":319},{"style":308},[320],{"type":178,"value":321},")\n",{"type":173,"tag":174,"props":323,"children":324},{},[325],{"type":178,"value":326},"Make 和 C/C++ 确实是一对儿。Make 在识别 .o 文件时，能自动把 .c 添加为依赖关系。这功能叫做自动推导（或隐私推导）。除了隐私推导，他还支持类似 C 的 Include，把别的 Makefile 整个包含进来。",{"type":173,"tag":197,"props":328,"children":330},{"className":199,"code":329,"language":201,"meta":166,"style":166},"include foo.make a.mk b.mk\n",[331],{"type":173,"tag":204,"props":332,"children":333},{"__ignoreMap":166},[334],{"type":173,"tag":208,"props":335,"children":336},{"class":210,"line":211},[337,343],{"type":173,"tag":208,"props":338,"children":340},{"style":339},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[341],{"type":178,"value":342},"include",{"type":173,"tag":208,"props":344,"children":345},{"style":227},[346],{"type":178,"value":347}," foo.make a.mk b.mk\n",{"type":173,"tag":174,"props":349,"children":350},{},[351],{"type":178,"value":352},"可以发现，Make 和字符串要打非常多交道，所以它支持各种通配符也就不令人意外了。如同 SHELL 中的通配符，* 和 ⁓ 分别代表任意长度字符串和用户主目录。不知道你用过正则没有，通配符就用作匹配及确认，再返回 true 或 false。这时候有人要问了，既然 Makefile 和字符串打交道，通配符返回布尔有啥用啊，它没办法表示列表哇！",{"type":173,"tag":174,"props":354,"children":355},{},[356],{"type":178,"value":357},"这就要说到 Makefile 的关键字了，wildcard，它是扩展关键字，可以把通配符匹配到的所有东西“扩展”为“列表”。列表当然是想象中的列表，其实际产物还是字符串的啦。不过为了更方便操作列表，还有辅助用的其它关键字，比如 patsubst，它是类似正则中的 replaceAll 那种效果。",{"type":173,"tag":174,"props":359,"children":360},{},[361],{"type":178,"value":362},"下面用一个例子来说明吧，把目录下所有 C 文件找出来，替换为 .o 后缀，这样一来，就可以用 gcc 全部编译了。",{"type":173,"tag":197,"props":364,"children":366},{"className":199,"code":365,"language":201,"meta":166,"style":166},"cfiles := $(wildcard *.c)\nofiles := $(patsubst %.c, %.o, %(cfiles))\ncompile: $(ofiles)\n         gcc -o $(ofiles)\n",[367],{"type":173,"tag":204,"props":368,"children":369},{"__ignoreMap":166},[370,409,470,495],{"type":173,"tag":208,"props":371,"children":372},{"class":210,"line":211},[373,378,383,387,393,399,405],{"type":173,"tag":208,"props":374,"children":375},{"style":227},[376],{"type":178,"value":377},"cfiles ",{"type":173,"tag":208,"props":379,"children":380},{"style":221},[381],{"type":178,"value":382},":=",{"type":173,"tag":208,"props":384,"children":385},{"style":308},[386],{"type":178,"value":311},{"type":173,"tag":208,"props":388,"children":390},{"style":389},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[391],{"type":178,"value":392},"wildcard",{"type":173,"tag":208,"props":394,"children":396},{"style":395},"--shiki-light:#E53935;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[397],{"type":178,"value":398}," *",{"type":173,"tag":208,"props":400,"children":402},{"style":401},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[403],{"type":178,"value":404},".c",{"type":173,"tag":208,"props":406,"children":407},{"style":308},[408],{"type":178,"value":321},{"type":173,"tag":208,"props":410,"children":411},{"class":210,"line":233},[412,417,421,425,430,435,439,444,448,453,457,461,466],{"type":173,"tag":208,"props":413,"children":414},{"style":227},[415],{"type":178,"value":416},"ofiles ",{"type":173,"tag":208,"props":418,"children":419},{"style":221},[420],{"type":178,"value":382},{"type":173,"tag":208,"props":422,"children":423},{"style":308},[424],{"type":178,"value":311},{"type":173,"tag":208,"props":426,"children":427},{"style":389},[428],{"type":178,"value":429},"patsubst",{"type":173,"tag":208,"props":431,"children":432},{"style":395},[433],{"type":178,"value":434}," %",{"type":173,"tag":208,"props":436,"children":437},{"style":401},[438],{"type":178,"value":404},{"type":173,"tag":208,"props":440,"children":441},{"style":308},[442],{"type":178,"value":443},",",{"type":173,"tag":208,"props":445,"children":446},{"style":395},[447],{"type":178,"value":434},{"type":173,"tag":208,"props":449,"children":450},{"style":401},[451],{"type":178,"value":452},".o",{"type":173,"tag":208,"props":454,"children":455},{"style":308},[456],{"type":178,"value":443},{"type":173,"tag":208,"props":458,"children":459},{"style":395},[460],{"type":178,"value":434},{"type":173,"tag":208,"props":462,"children":463},{"style":401},[464],{"type":178,"value":465},"(cfiles)",{"type":173,"tag":208,"props":467,"children":468},{"style":308},[469],{"type":178,"value":321},{"type":173,"tag":208,"props":471,"children":472},{"class":210,"line":296},[473,478,482,486,491],{"type":173,"tag":208,"props":474,"children":475},{"style":215},[476],{"type":178,"value":477},"compile",{"type":173,"tag":208,"props":479,"children":480},{"style":221},[481],{"type":178,"value":224},{"type":173,"tag":208,"props":483,"children":484},{"style":308},[485],{"type":178,"value":311},{"type":173,"tag":208,"props":487,"children":488},{"style":227},[489],{"type":178,"value":490},"ofiles",{"type":173,"tag":208,"props":492,"children":493},{"style":308},[494],{"type":178,"value":321},{"type":173,"tag":208,"props":496,"children":498},{"class":210,"line":497},4,[499,504,509,513],{"type":173,"tag":208,"props":500,"children":501},{"style":227},[502],{"type":178,"value":503},"         gcc -o ",{"type":173,"tag":208,"props":505,"children":506},{"style":308},[507],{"type":178,"value":508},"$(",{"type":173,"tag":208,"props":510,"children":511},{"style":227},[512],{"type":178,"value":490},{"type":173,"tag":208,"props":514,"children":515},{"style":308},[516],{"type":178,"value":321},{"type":173,"tag":174,"props":518,"children":519},{},[520],{"type":173,"tag":521,"props":522,"children":526},"a",{"href":523,"rel":524},"https://seisman.github.io/how-to-write-makefile/rules.html#id5",[525],"nofollow",[527],{"type":178,"value":528},"TODO continue",{"type":173,"tag":181,"props":530,"children":532},{"id":531},"相关",[533],{"type":178,"value":531},{"type":173,"tag":535,"props":536,"children":537},"ul",{},[538,551,561],{"type":173,"tag":539,"props":540,"children":541},"li",{},[542,549],{"type":173,"tag":521,"props":543,"children":546},{"href":544,"rel":545},"https://github.com/seisman/how-to-write-makefile",[525],[547],{"type":178,"value":548},"跟我一起写 Makefile",{"type":178,"value":550},"，陈皓老师在 2004 年写的博客。非常易读，适合入门学习。",{"type":173,"tag":539,"props":552,"children":553},{},[554],{"type":173,"tag":521,"props":555,"children":558},{"href":556,"rel":557},"https://blog.csdn.net/qq_31811537/article/details/82892128",[525],[559],{"type":178,"value":560},"Makefile 中的 wildcard 用法",{"type":173,"tag":539,"props":562,"children":563},{},[564],{"type":173,"tag":521,"props":565,"children":568},{"href":566,"rel":567},"https://coolshell.cn/articles/3790.html",[525],[569],{"type":178,"value":570},"如何调试 MAKEFILE 变量",{"type":173,"tag":572,"props":573,"children":574},"style",{},[575],{"type":178,"value":576},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":233,"depth":233,"links":578},[579,580],{"id":183,"depth":233,"text":183},{"id":531,"depth":233,"text":531},"markdown","content:6.maps:_cpp:makefile.md","content","6.maps/_cpp/makefile.md","6.maps/_cpp/makefile","md",[588,592],{"_path":589,"title":590,"description":591},"/maps/_cpp/king-db","King Database","A simple key-value store database",{"_path":593,"title":594,"description":595},"/maps/_cross-platform/device-metrics","Device Metrics","Understand how device pixels, points, and scale factor work together.",1754391515212]