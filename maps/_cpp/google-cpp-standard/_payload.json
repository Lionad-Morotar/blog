[{"data":1,"prerenderedAt":692},["ShallowReactive",2],{"navigation":3,"/maps/_cpp/google-cpp-standard":158,"/maps/_cpp/google-cpp-standard-surround":683},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":677,"_id":678,"_source":679,"_file":680,"_stem":681,"_extension":682},"/maps/_cpp/google-cpp-standard","_cpp",false,true,"","Google C++ Standard","Google C++ 编程规范",{"type":167,"children":168,"toc":674},"root",[169,183,189,232,237,265,270,323,328,361,366,374,380,477,482,535,540,563,568,651,656],{"type":170,"tag":171,"props":172,"children":173},"element","p",{},[174],{"type":170,"tag":175,"props":176,"children":180},"a",{"href":177,"rel":178},"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",[179],"nofollow",[181],{"type":182,"value":177},"text",{"type":170,"tag":184,"props":185,"children":187},"h4",{"id":186},"头文件",[188],{"type":182,"value":186},{"type":170,"tag":190,"props":191,"children":192},"ul",{},[193,199,217,222,227],{"type":170,"tag":194,"props":195,"children":196},"li",{},[197],{"type":182,"value":198},"头文件应该能够自给自足（self-contained, 也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":170,"tag":194,"props":200,"children":201},{},[202,204,210,212],{"type":182,"value":203},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是：\u003CPROJECT>",{"type":170,"tag":205,"props":206,"children":207},"em",{},[208],{"type":182,"value":209},"\u003CPATH>",{"type":182,"value":211},"\u003CFILE>",{"type":170,"tag":205,"props":213,"children":214},{},[215],{"type":182,"value":216},"H",{"type":170,"tag":194,"props":218,"children":219},{},[220],{"type":182,"value":221},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":170,"tag":194,"props":223,"children":224},{},[225],{"type":182,"value":226},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":170,"tag":194,"props":228,"children":229},{},[230],{"type":182,"value":231},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":170,"tag":184,"props":233,"children":235},{"id":234},"作用域",[236],{"type":182,"value":234},{"type":170,"tag":190,"props":238,"children":239},{},[240,245,250,255,260],{"type":170,"tag":194,"props":241,"children":242},{},[243],{"type":182,"value":244},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":170,"tag":194,"props":246,"children":247},{},[248],{"type":182,"value":249},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":170,"tag":194,"props":251,"children":252},{},[253],{"type":182,"value":254},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":170,"tag":194,"props":256,"children":257},{},[258],{"type":182,"value":259},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":170,"tag":194,"props":261,"children":262},{},[263],{"type":182,"value":264},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":170,"tag":184,"props":266,"children":268},{"id":267},"类",[269],{"type":182,"value":267},{"type":170,"tag":190,"props":271,"children":272},{},[273,278,283,288,293,298,303,308,313,318],{"type":170,"tag":194,"props":274,"children":275},{},[276],{"type":182,"value":277},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":170,"tag":194,"props":279,"children":280},{},[281],{"type":182,"value":282},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":170,"tag":194,"props":284,"children":285},{},[286],{"type":182,"value":287},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":170,"tag":194,"props":289,"children":290},{},[291],{"type":182,"value":292},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":170,"tag":194,"props":294,"children":295},{},[296],{"type":182,"value":297},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":170,"tag":194,"props":299,"children":300},{},[301],{"type":182,"value":302},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承：最多只有一个基类是非抽象类；其它基类都是以 Interface 为后缀的 纯接口类。",{"type":170,"tag":194,"props":304,"children":305},{},[306],{"type":182,"value":307},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 （不强制）。",{"type":170,"tag":194,"props":309,"children":310},{},[311],{"type":182,"value":312},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":170,"tag":194,"props":314,"children":315},{},[316],{"type":182,"value":317},"将所有数据成员声明为 private，除非是 static const 类型成员 （遵循 常量命名规则）。",{"type":170,"tag":194,"props":319,"children":320},{},[321],{"type":182,"value":322},"将相似的声明放在一起，将 public 部分放在最前。",{"type":170,"tag":184,"props":324,"children":326},{"id":325},"函数",[327],{"type":182,"value":325},{"type":170,"tag":190,"props":329,"children":330},{},[331,336,341,346,351,356],{"type":170,"tag":194,"props":332,"children":333},{},[334],{"type":182,"value":335},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":170,"tag":194,"props":337,"children":338},{},[339],{"type":182,"value":340},"倾向于编写简短，凝练的函数。",{"type":170,"tag":194,"props":342,"children":343},{},[344],{"type":182,"value":345},"所有按引用传递的参数必须加上 const。",{"type":170,"tag":194,"props":347,"children":348},{},[349],{"type":182,"value":350},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":170,"tag":194,"props":352,"children":353},{},[354],{"type":182,"value":355},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":170,"tag":194,"props":357,"children":358},{},[359],{"type":182,"value":360},"只有在常规写法 （返回类型前置） 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":170,"tag":184,"props":362,"children":364},{"id":363},"指针",[365],{"type":182,"value":363},{"type":170,"tag":190,"props":367,"children":368},{},[369],{"type":170,"tag":194,"props":370,"children":371},{},[372],{"type":182,"value":373},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":170,"tag":184,"props":375,"children":377},{"id":376},"其他-c-特性",[378],{"type":182,"value":379},"其他 C++ 特性",{"type":170,"tag":190,"props":381,"children":382},{},[383,387,392,397,402,407,412,417,422,427,432,437,442,447,452,457,462,467,472],{"type":170,"tag":194,"props":384,"children":385},{},[386],{"type":182,"value":345},{"type":170,"tag":194,"props":388,"children":389},{},[390],{"type":182,"value":391},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":170,"tag":194,"props":393,"children":394},{},[395],{"type":182,"value":396},"不允许使用变长数组和 alloca()。",{"type":170,"tag":194,"props":398,"children":399},{},[400],{"type":182,"value":401},"通常友元应该定义在同一文件内。",{"type":170,"tag":194,"props":403,"children":404},{},[405],{"type":182,"value":406},"不使用 C++ 异常。",{"type":170,"tag":194,"props":408,"children":409},{},[410],{"type":182,"value":411},"禁止使用 RTTI。",{"type":170,"tag":194,"props":413,"children":414},{},[415],{"type":182,"value":416},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式；",{"type":170,"tag":194,"props":418,"children":419},{},[420],{"type":182,"value":421},"只在记录日志时使用流。",{"type":170,"tag":194,"props":423,"children":424},{},[425],{"type":182,"value":426},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":170,"tag":194,"props":428,"children":429},{},[430],{"type":182,"value":431},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":170,"tag":194,"props":433,"children":434},{},[435],{"type":182,"value":436},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":170,"tag":194,"props":438,"children":439},{},[440],{"type":182,"value":441},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":170,"tag":194,"props":443,"children":444},{},[445],{"type":182,"value":446},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":170,"tag":194,"props":448,"children":449},{},[450],{"type":182,"value":451},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 （串） 用 '\\0'。",{"type":170,"tag":194,"props":453,"children":454},{},[455],{"type":182,"value":456},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":170,"tag":194,"props":458,"children":459},{},[460],{"type":182,"value":461},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":170,"tag":194,"props":463,"children":464},{},[465],{"type":182,"value":466},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":170,"tag":194,"props":468,"children":469},{},[470],{"type":182,"value":471},"不要使用复杂的模板编程",{"type":170,"tag":194,"props":473,"children":474},{},[475],{"type":182,"value":476},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":170,"tag":184,"props":478,"children":480},{"id":479},"命名约定",[481],{"type":182,"value":479},{"type":170,"tag":190,"props":483,"children":484},{},[485,490,495,500,505,510,515,520,525,530],{"type":170,"tag":194,"props":486,"children":487},{},[488],{"type":182,"value":489},"函数命名，变量命名，文件命名要有描述性；少用缩写。",{"type":170,"tag":194,"props":491,"children":492},{},[493],{"type":182,"value":494},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":170,"tag":194,"props":496,"children":497},{},[498],{"type":182,"value":499},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":170,"tag":194,"props":501,"children":502},{},[503],{"type":182,"value":504},"变量 （包括函数参数） 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":170,"tag":194,"props":506,"children":507},{},[508],{"type":182,"value":509},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":170,"tag":194,"props":511,"children":512},{},[513],{"type":182,"value":514},"常规函数使用大小写混合。",{"type":170,"tag":194,"props":516,"children":517},{},[518],{"type":182,"value":519},"取值和设值函数则要求与变量名匹配。",{"type":170,"tag":194,"props":521,"children":522},{},[523],{"type":182,"value":524},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":170,"tag":194,"props":526,"children":527},{},[528],{"type":182,"value":529},"枚举的命名应当和 常量 一致。",{"type":170,"tag":194,"props":531,"children":532},{},[533],{"type":182,"value":534},"宏命名应使用全部大写加下划线分割单词。",{"type":170,"tag":184,"props":536,"children":538},{"id":537},"注释",[539],{"type":182,"value":537},{"type":170,"tag":190,"props":541,"children":542},{},[543,548,553,558],{"type":170,"tag":194,"props":544,"children":545},{},[546],{"type":182,"value":547},"在每一个文件开头加入版权公告。",{"type":170,"tag":194,"props":549,"children":550},{},[551],{"type":182,"value":552},"函数声明处的注释描述函数功能；定义处的注释描述函数实现。",{"type":170,"tag":194,"props":554,"children":555},{},[556],{"type":182,"value":557},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":170,"tag":194,"props":559,"children":560},{},[561],{"type":182,"value":562},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":170,"tag":184,"props":564,"children":566},{"id":565},"格式化",[567],{"type":182,"value":565},{"type":170,"tag":190,"props":569,"children":570},{},[571,576,581,586,591,596,601,606,611,616,621,626,631,636,641,646],{"type":170,"tag":194,"props":572,"children":573},{},[574],{"type":182,"value":575},"每一行代码字符数不超过 80。",{"type":170,"tag":194,"props":577,"children":578},{},[579],{"type":182,"value":580},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":170,"tag":194,"props":582,"children":583},{},[584],{"type":182,"value":585},"只使用空格，每次缩进 2 个空格。",{"type":170,"tag":194,"props":587,"children":588},{},[589],{"type":182,"value":590},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":170,"tag":194,"props":592,"children":593},{},[594],{"type":182,"value":595},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":170,"tag":194,"props":597,"children":598},{},[599],{"type":182,"value":600},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":170,"tag":194,"props":602,"children":603},{},[604],{"type":182,"value":605},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":170,"tag":194,"props":607,"children":608},{},[609],{"type":182,"value":610},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":170,"tag":194,"props":612,"children":613},{},[614],{"type":182,"value":615},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":170,"tag":194,"props":617,"children":618},{},[619],{"type":182,"value":620},"布尔运算符如逻辑与总位于行尾：",{"type":170,"tag":194,"props":622,"children":623},{},[624],{"type":182,"value":625},"预处理指令不要缩进，从行首开始。",{"type":170,"tag":194,"props":627,"children":628},{},[629],{"type":182,"value":630},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":170,"tag":194,"props":632,"children":633},{},[634],{"type":182,"value":635},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":170,"tag":194,"props":637,"children":638},{},[639],{"type":182,"value":640},"命名空间内容不缩进。",{"type":170,"tag":194,"props":642,"children":643},{},[644],{"type":182,"value":645},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":170,"tag":194,"props":647,"children":648},{},[649],{"type":182,"value":650},"垂直留白越少越好。",{"type":170,"tag":184,"props":652,"children":654},{"id":653},"规则特例",[655],{"type":182,"value":653},{"type":170,"tag":190,"props":657,"children":658},{},[659,664,669],{"type":170,"tag":194,"props":660,"children":661},{},[662],{"type":182,"value":663},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":170,"tag":194,"props":665,"children":666},{},[667],{"type":182,"value":668},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":170,"tag":194,"props":670,"children":671},{},[672],{"type":182,"value":673},"运用常识和判断力，并且 保持一致。",{"title":163,"searchDepth":675,"depth":675,"links":676},2,[],"markdown","content:6.maps:_cpp:google-cpp-standard.md","content","6.maps/_cpp/google-cpp-standard.md","6.maps/_cpp/google-cpp-standard","md",[684,688],{"_path":685,"title":686,"description":687},"/maps/_cpp/cpp","C++","C++ 是一种静态类型、编译式、通用、多范式编程语言，支持过程化编程、面向对象编程和泛型编程。",{"_path":689,"title":690,"description":691},"/maps/_cpp/king-db","King Database","A simple key-value store database",1742808199601]