[{"data":1,"prerenderedAt":695},["ShallowReactive",2],{"navigation":3,"/maps/_cpp/google-cpp-standard":161,"/maps/_cpp/google-cpp-standard-surround":686},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":680,"_id":681,"_source":682,"_file":683,"_stem":684,"_extension":685},"/maps/_cpp/google-cpp-standard","_cpp",false,true,"","Google C++ Standard","Google C++ 编程规范",{"type":170,"children":171,"toc":677},"root",[172,186,192,235,240,268,273,326,331,364,369,377,383,480,485,538,543,566,571,654,659],{"type":173,"tag":174,"props":175,"children":176},"element","p",{},[177],{"type":173,"tag":178,"props":179,"children":183},"a",{"href":180,"rel":181},"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",[182],"nofollow",[184],{"type":185,"value":180},"text",{"type":173,"tag":187,"props":188,"children":190},"h4",{"id":189},"头文件",[191],{"type":185,"value":189},{"type":173,"tag":193,"props":194,"children":195},"ul",{},[196,202,220,225,230],{"type":173,"tag":197,"props":198,"children":199},"li",{},[200],{"type":185,"value":201},"头文件应该能够自给自足（self-contained, 也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":173,"tag":197,"props":203,"children":204},{},[205,207,213,215],{"type":185,"value":206},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是：\u003CPROJECT>",{"type":173,"tag":208,"props":209,"children":210},"em",{},[211],{"type":185,"value":212},"\u003CPATH>",{"type":185,"value":214},"\u003CFILE>",{"type":173,"tag":208,"props":216,"children":217},{},[218],{"type":185,"value":219},"H",{"type":173,"tag":197,"props":221,"children":222},{},[223],{"type":185,"value":224},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":173,"tag":197,"props":226,"children":227},{},[228],{"type":185,"value":229},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":173,"tag":197,"props":231,"children":232},{},[233],{"type":185,"value":234},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":173,"tag":187,"props":236,"children":238},{"id":237},"作用域",[239],{"type":185,"value":237},{"type":173,"tag":193,"props":241,"children":242},{},[243,248,253,258,263],{"type":173,"tag":197,"props":244,"children":245},{},[246],{"type":185,"value":247},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":173,"tag":197,"props":249,"children":250},{},[251],{"type":185,"value":252},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":173,"tag":197,"props":254,"children":255},{},[256],{"type":185,"value":257},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":173,"tag":197,"props":259,"children":260},{},[261],{"type":185,"value":262},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":173,"tag":197,"props":264,"children":265},{},[266],{"type":185,"value":267},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":173,"tag":187,"props":269,"children":271},{"id":270},"类",[272],{"type":185,"value":270},{"type":173,"tag":193,"props":274,"children":275},{},[276,281,286,291,296,301,306,311,316,321],{"type":173,"tag":197,"props":277,"children":278},{},[279],{"type":185,"value":280},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":173,"tag":197,"props":282,"children":283},{},[284],{"type":185,"value":285},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":173,"tag":197,"props":287,"children":288},{},[289],{"type":185,"value":290},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":173,"tag":197,"props":292,"children":293},{},[294],{"type":185,"value":295},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":173,"tag":197,"props":297,"children":298},{},[299],{"type":185,"value":300},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":173,"tag":197,"props":302,"children":303},{},[304],{"type":185,"value":305},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承：最多只有一个基类是非抽象类；其它基类都是以 Interface 为后缀的 纯接口类。",{"type":173,"tag":197,"props":307,"children":308},{},[309],{"type":185,"value":310},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 （不强制）。",{"type":173,"tag":197,"props":312,"children":313},{},[314],{"type":185,"value":315},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":173,"tag":197,"props":317,"children":318},{},[319],{"type":185,"value":320},"将所有数据成员声明为 private，除非是 static const 类型成员 （遵循 常量命名规则）。",{"type":173,"tag":197,"props":322,"children":323},{},[324],{"type":185,"value":325},"将相似的声明放在一起，将 public 部分放在最前。",{"type":173,"tag":187,"props":327,"children":329},{"id":328},"函数",[330],{"type":185,"value":328},{"type":173,"tag":193,"props":332,"children":333},{},[334,339,344,349,354,359],{"type":173,"tag":197,"props":335,"children":336},{},[337],{"type":185,"value":338},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":173,"tag":197,"props":340,"children":341},{},[342],{"type":185,"value":343},"倾向于编写简短，凝练的函数。",{"type":173,"tag":197,"props":345,"children":346},{},[347],{"type":185,"value":348},"所有按引用传递的参数必须加上 const。",{"type":173,"tag":197,"props":350,"children":351},{},[352],{"type":185,"value":353},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":173,"tag":197,"props":355,"children":356},{},[357],{"type":185,"value":358},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":173,"tag":197,"props":360,"children":361},{},[362],{"type":185,"value":363},"只有在常规写法 （返回类型前置） 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":173,"tag":187,"props":365,"children":367},{"id":366},"指针",[368],{"type":185,"value":366},{"type":173,"tag":193,"props":370,"children":371},{},[372],{"type":173,"tag":197,"props":373,"children":374},{},[375],{"type":185,"value":376},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":173,"tag":187,"props":378,"children":380},{"id":379},"其他-c-特性",[381],{"type":185,"value":382},"其他 C++ 特性",{"type":173,"tag":193,"props":384,"children":385},{},[386,390,395,400,405,410,415,420,425,430,435,440,445,450,455,460,465,470,475],{"type":173,"tag":197,"props":387,"children":388},{},[389],{"type":185,"value":348},{"type":173,"tag":197,"props":391,"children":392},{},[393],{"type":185,"value":394},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":173,"tag":197,"props":396,"children":397},{},[398],{"type":185,"value":399},"不允许使用变长数组和 alloca()。",{"type":173,"tag":197,"props":401,"children":402},{},[403],{"type":185,"value":404},"通常友元应该定义在同一文件内。",{"type":173,"tag":197,"props":406,"children":407},{},[408],{"type":185,"value":409},"不使用 C++ 异常。",{"type":173,"tag":197,"props":411,"children":412},{},[413],{"type":185,"value":414},"禁止使用 RTTI。",{"type":173,"tag":197,"props":416,"children":417},{},[418],{"type":185,"value":419},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式；",{"type":173,"tag":197,"props":421,"children":422},{},[423],{"type":185,"value":424},"只在记录日志时使用流。",{"type":173,"tag":197,"props":426,"children":427},{},[428],{"type":185,"value":429},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":173,"tag":197,"props":431,"children":432},{},[433],{"type":185,"value":434},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":173,"tag":197,"props":436,"children":437},{},[438],{"type":185,"value":439},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":173,"tag":197,"props":441,"children":442},{},[443],{"type":185,"value":444},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":173,"tag":197,"props":446,"children":447},{},[448],{"type":185,"value":449},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":173,"tag":197,"props":451,"children":452},{},[453],{"type":185,"value":454},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 （串） 用 '\\0'。",{"type":173,"tag":197,"props":456,"children":457},{},[458],{"type":185,"value":459},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":173,"tag":197,"props":461,"children":462},{},[463],{"type":185,"value":464},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":173,"tag":197,"props":466,"children":467},{},[468],{"type":185,"value":469},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":173,"tag":197,"props":471,"children":472},{},[473],{"type":185,"value":474},"不要使用复杂的模板编程",{"type":173,"tag":197,"props":476,"children":477},{},[478],{"type":185,"value":479},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":173,"tag":187,"props":481,"children":483},{"id":482},"命名约定",[484],{"type":185,"value":482},{"type":173,"tag":193,"props":486,"children":487},{},[488,493,498,503,508,513,518,523,528,533],{"type":173,"tag":197,"props":489,"children":490},{},[491],{"type":185,"value":492},"函数命名，变量命名，文件命名要有描述性；少用缩写。",{"type":173,"tag":197,"props":494,"children":495},{},[496],{"type":185,"value":497},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":173,"tag":197,"props":499,"children":500},{},[501],{"type":185,"value":502},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":173,"tag":197,"props":504,"children":505},{},[506],{"type":185,"value":507},"变量 （包括函数参数） 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":173,"tag":197,"props":509,"children":510},{},[511],{"type":185,"value":512},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":173,"tag":197,"props":514,"children":515},{},[516],{"type":185,"value":517},"常规函数使用大小写混合。",{"type":173,"tag":197,"props":519,"children":520},{},[521],{"type":185,"value":522},"取值和设值函数则要求与变量名匹配。",{"type":173,"tag":197,"props":524,"children":525},{},[526],{"type":185,"value":527},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":173,"tag":197,"props":529,"children":530},{},[531],{"type":185,"value":532},"枚举的命名应当和 常量 一致。",{"type":173,"tag":197,"props":534,"children":535},{},[536],{"type":185,"value":537},"宏命名应使用全部大写加下划线分割单词。",{"type":173,"tag":187,"props":539,"children":541},{"id":540},"注释",[542],{"type":185,"value":540},{"type":173,"tag":193,"props":544,"children":545},{},[546,551,556,561],{"type":173,"tag":197,"props":547,"children":548},{},[549],{"type":185,"value":550},"在每一个文件开头加入版权公告。",{"type":173,"tag":197,"props":552,"children":553},{},[554],{"type":185,"value":555},"函数声明处的注释描述函数功能；定义处的注释描述函数实现。",{"type":173,"tag":197,"props":557,"children":558},{},[559],{"type":185,"value":560},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":173,"tag":197,"props":562,"children":563},{},[564],{"type":185,"value":565},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":173,"tag":187,"props":567,"children":569},{"id":568},"格式化",[570],{"type":185,"value":568},{"type":173,"tag":193,"props":572,"children":573},{},[574,579,584,589,594,599,604,609,614,619,624,629,634,639,644,649],{"type":173,"tag":197,"props":575,"children":576},{},[577],{"type":185,"value":578},"每一行代码字符数不超过 80。",{"type":173,"tag":197,"props":580,"children":581},{},[582],{"type":185,"value":583},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":173,"tag":197,"props":585,"children":586},{},[587],{"type":185,"value":588},"只使用空格，每次缩进 2 个空格。",{"type":173,"tag":197,"props":590,"children":591},{},[592],{"type":185,"value":593},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":173,"tag":197,"props":595,"children":596},{},[597],{"type":185,"value":598},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":173,"tag":197,"props":600,"children":601},{},[602],{"type":185,"value":603},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":173,"tag":197,"props":605,"children":606},{},[607],{"type":185,"value":608},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":173,"tag":197,"props":610,"children":611},{},[612],{"type":185,"value":613},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":173,"tag":197,"props":615,"children":616},{},[617],{"type":185,"value":618},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":173,"tag":197,"props":620,"children":621},{},[622],{"type":185,"value":623},"布尔运算符如逻辑与总位于行尾：",{"type":173,"tag":197,"props":625,"children":626},{},[627],{"type":185,"value":628},"预处理指令不要缩进，从行首开始。",{"type":173,"tag":197,"props":630,"children":631},{},[632],{"type":185,"value":633},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":173,"tag":197,"props":635,"children":636},{},[637],{"type":185,"value":638},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":173,"tag":197,"props":640,"children":641},{},[642],{"type":185,"value":643},"命名空间内容不缩进。",{"type":173,"tag":197,"props":645,"children":646},{},[647],{"type":185,"value":648},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":173,"tag":197,"props":650,"children":651},{},[652],{"type":185,"value":653},"垂直留白越少越好。",{"type":173,"tag":187,"props":655,"children":657},{"id":656},"规则特例",[658],{"type":185,"value":656},{"type":173,"tag":193,"props":660,"children":661},{},[662,667,672],{"type":173,"tag":197,"props":663,"children":664},{},[665],{"type":185,"value":666},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":173,"tag":197,"props":668,"children":669},{},[670],{"type":185,"value":671},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":173,"tag":197,"props":673,"children":674},{},[675],{"type":185,"value":676},"运用常识和判断力，并且 保持一致。",{"title":166,"searchDepth":678,"depth":678,"links":679},2,[],"markdown","content:6.maps:_cpp:google-cpp-standard.md","content","6.maps/_cpp/google-cpp-standard.md","6.maps/_cpp/google-cpp-standard","md",[687,691],{"_path":688,"title":689,"description":690},"/maps/_cpp/cpp","C++","C++ 是一种静态类型、编译式、通用、多范式编程语言，支持过程化编程、面向对象编程和泛型编程。",{"_path":692,"title":693,"description":694},"/maps/_cpp/king-db","King Database","A simple key-value store database",1754391516592]