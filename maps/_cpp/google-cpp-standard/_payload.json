[{"data":1,"prerenderedAt":689},["ShallowReactive",2],{"navigation":3,"/maps/_cpp/google-cpp-standard":155,"/maps/_cpp/google-cpp-standard-surround":680},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":674,"_id":675,"_source":676,"_file":677,"_stem":678,"_extension":679},"/maps/_cpp/google-cpp-standard","_cpp",false,true,"","Google C++ Standard","Google C++ 编程规范",{"type":164,"children":165,"toc":671},"root",[166,180,186,229,234,262,267,320,325,358,363,371,377,474,479,532,537,560,565,648,653],{"type":167,"tag":168,"props":169,"children":170},"element","p",{},[171],{"type":167,"tag":172,"props":173,"children":177},"a",{"href":174,"rel":175},"https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",[176],"nofollow",[178],{"type":179,"value":174},"text",{"type":167,"tag":181,"props":182,"children":184},"h4",{"id":183},"头文件",[185],{"type":179,"value":183},{"type":167,"tag":187,"props":188,"children":189},"ul",{},[190,196,214,219,224],{"type":167,"tag":191,"props":192,"children":193},"li",{},[194],{"type":179,"value":195},"头文件应该能够自给自足（self-contained, 也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":167,"tag":191,"props":197,"children":198},{},[199,201,207,209],{"type":179,"value":200},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是：\u003CPROJECT>",{"type":167,"tag":202,"props":203,"children":204},"em",{},[205],{"type":179,"value":206},"\u003CPATH>",{"type":179,"value":208},"\u003CFILE>",{"type":167,"tag":202,"props":210,"children":211},{},[212],{"type":179,"value":213},"H",{"type":167,"tag":191,"props":215,"children":216},{},[217],{"type":179,"value":218},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":167,"tag":191,"props":220,"children":221},{},[222],{"type":179,"value":223},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":167,"tag":191,"props":225,"children":226},{},[227],{"type":179,"value":228},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":167,"tag":181,"props":230,"children":232},{"id":231},"作用域",[233],{"type":179,"value":231},{"type":167,"tag":187,"props":235,"children":236},{},[237,242,247,252,257],{"type":167,"tag":191,"props":238,"children":239},{},[240],{"type":179,"value":241},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":167,"tag":191,"props":243,"children":244},{},[245],{"type":179,"value":246},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":167,"tag":191,"props":248,"children":249},{},[250],{"type":179,"value":251},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":167,"tag":191,"props":253,"children":254},{},[255],{"type":179,"value":256},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":167,"tag":191,"props":258,"children":259},{},[260],{"type":179,"value":261},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":167,"tag":181,"props":263,"children":265},{"id":264},"类",[266],{"type":179,"value":264},{"type":167,"tag":187,"props":268,"children":269},{},[270,275,280,285,290,295,300,305,310,315],{"type":167,"tag":191,"props":271,"children":272},{},[273],{"type":179,"value":274},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":167,"tag":191,"props":276,"children":277},{},[278],{"type":179,"value":279},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":167,"tag":191,"props":281,"children":282},{},[283],{"type":179,"value":284},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":167,"tag":191,"props":286,"children":287},{},[288],{"type":179,"value":289},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":167,"tag":191,"props":291,"children":292},{},[293],{"type":179,"value":294},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":167,"tag":191,"props":296,"children":297},{},[298],{"type":179,"value":299},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承：最多只有一个基类是非抽象类；其它基类都是以 Interface 为后缀的 纯接口类。",{"type":167,"tag":191,"props":301,"children":302},{},[303],{"type":179,"value":304},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 （不强制）。",{"type":167,"tag":191,"props":306,"children":307},{},[308],{"type":179,"value":309},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":167,"tag":191,"props":311,"children":312},{},[313],{"type":179,"value":314},"将所有数据成员声明为 private，除非是 static const 类型成员 （遵循 常量命名规则）。",{"type":167,"tag":191,"props":316,"children":317},{},[318],{"type":179,"value":319},"将相似的声明放在一起，将 public 部分放在最前。",{"type":167,"tag":181,"props":321,"children":323},{"id":322},"函数",[324],{"type":179,"value":322},{"type":167,"tag":187,"props":326,"children":327},{},[328,333,338,343,348,353],{"type":167,"tag":191,"props":329,"children":330},{},[331],{"type":179,"value":332},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":167,"tag":191,"props":334,"children":335},{},[336],{"type":179,"value":337},"倾向于编写简短，凝练的函数。",{"type":167,"tag":191,"props":339,"children":340},{},[341],{"type":179,"value":342},"所有按引用传递的参数必须加上 const。",{"type":167,"tag":191,"props":344,"children":345},{},[346],{"type":179,"value":347},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":167,"tag":191,"props":349,"children":350},{},[351],{"type":179,"value":352},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":167,"tag":191,"props":354,"children":355},{},[356],{"type":179,"value":357},"只有在常规写法 （返回类型前置） 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":167,"tag":181,"props":359,"children":361},{"id":360},"指针",[362],{"type":179,"value":360},{"type":167,"tag":187,"props":364,"children":365},{},[366],{"type":167,"tag":191,"props":367,"children":368},{},[369],{"type":179,"value":370},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":167,"tag":181,"props":372,"children":374},{"id":373},"其他-c-特性",[375],{"type":179,"value":376},"其他 C++ 特性",{"type":167,"tag":187,"props":378,"children":379},{},[380,384,389,394,399,404,409,414,419,424,429,434,439,444,449,454,459,464,469],{"type":167,"tag":191,"props":381,"children":382},{},[383],{"type":179,"value":342},{"type":167,"tag":191,"props":385,"children":386},{},[387],{"type":179,"value":388},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":167,"tag":191,"props":390,"children":391},{},[392],{"type":179,"value":393},"不允许使用变长数组和 alloca()。",{"type":167,"tag":191,"props":395,"children":396},{},[397],{"type":179,"value":398},"通常友元应该定义在同一文件内。",{"type":167,"tag":191,"props":400,"children":401},{},[402],{"type":179,"value":403},"不使用 C++ 异常。",{"type":167,"tag":191,"props":405,"children":406},{},[407],{"type":179,"value":408},"禁止使用 RTTI。",{"type":167,"tag":191,"props":410,"children":411},{},[412],{"type":179,"value":413},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式；",{"type":167,"tag":191,"props":415,"children":416},{},[417],{"type":179,"value":418},"只在记录日志时使用流。",{"type":167,"tag":191,"props":420,"children":421},{},[422],{"type":179,"value":423},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":167,"tag":191,"props":425,"children":426},{},[427],{"type":179,"value":428},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":167,"tag":191,"props":430,"children":431},{},[432],{"type":179,"value":433},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":167,"tag":191,"props":435,"children":436},{},[437],{"type":179,"value":438},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":167,"tag":191,"props":440,"children":441},{},[442],{"type":179,"value":443},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":167,"tag":191,"props":445,"children":446},{},[447],{"type":179,"value":448},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 （串） 用 '\\0'。",{"type":167,"tag":191,"props":450,"children":451},{},[452],{"type":179,"value":453},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":167,"tag":191,"props":455,"children":456},{},[457],{"type":179,"value":458},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":167,"tag":191,"props":460,"children":461},{},[462],{"type":179,"value":463},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":167,"tag":191,"props":465,"children":466},{},[467],{"type":179,"value":468},"不要使用复杂的模板编程",{"type":167,"tag":191,"props":470,"children":471},{},[472],{"type":179,"value":473},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":167,"tag":181,"props":475,"children":477},{"id":476},"命名约定",[478],{"type":179,"value":476},{"type":167,"tag":187,"props":480,"children":481},{},[482,487,492,497,502,507,512,517,522,527],{"type":167,"tag":191,"props":483,"children":484},{},[485],{"type":179,"value":486},"函数命名，变量命名，文件命名要有描述性；少用缩写。",{"type":167,"tag":191,"props":488,"children":489},{},[490],{"type":179,"value":491},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":167,"tag":191,"props":493,"children":494},{},[495],{"type":179,"value":496},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":167,"tag":191,"props":498,"children":499},{},[500],{"type":179,"value":501},"变量 （包括函数参数） 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":167,"tag":191,"props":503,"children":504},{},[505],{"type":179,"value":506},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":167,"tag":191,"props":508,"children":509},{},[510],{"type":179,"value":511},"常规函数使用大小写混合。",{"type":167,"tag":191,"props":513,"children":514},{},[515],{"type":179,"value":516},"取值和设值函数则要求与变量名匹配。",{"type":167,"tag":191,"props":518,"children":519},{},[520],{"type":179,"value":521},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":167,"tag":191,"props":523,"children":524},{},[525],{"type":179,"value":526},"枚举的命名应当和 常量 一致。",{"type":167,"tag":191,"props":528,"children":529},{},[530],{"type":179,"value":531},"宏命名应使用全部大写加下划线分割单词。",{"type":167,"tag":181,"props":533,"children":535},{"id":534},"注释",[536],{"type":179,"value":534},{"type":167,"tag":187,"props":538,"children":539},{},[540,545,550,555],{"type":167,"tag":191,"props":541,"children":542},{},[543],{"type":179,"value":544},"在每一个文件开头加入版权公告。",{"type":167,"tag":191,"props":546,"children":547},{},[548],{"type":179,"value":549},"函数声明处的注释描述函数功能；定义处的注释描述函数实现。",{"type":167,"tag":191,"props":551,"children":552},{},[553],{"type":179,"value":554},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":167,"tag":191,"props":556,"children":557},{},[558],{"type":179,"value":559},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":167,"tag":181,"props":561,"children":563},{"id":562},"格式化",[564],{"type":179,"value":562},{"type":167,"tag":187,"props":566,"children":567},{},[568,573,578,583,588,593,598,603,608,613,618,623,628,633,638,643],{"type":167,"tag":191,"props":569,"children":570},{},[571],{"type":179,"value":572},"每一行代码字符数不超过 80。",{"type":167,"tag":191,"props":574,"children":575},{},[576],{"type":179,"value":577},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":167,"tag":191,"props":579,"children":580},{},[581],{"type":179,"value":582},"只使用空格，每次缩进 2 个空格。",{"type":167,"tag":191,"props":584,"children":585},{},[586],{"type":179,"value":587},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":167,"tag":191,"props":589,"children":590},{},[591],{"type":179,"value":592},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":167,"tag":191,"props":594,"children":595},{},[596],{"type":179,"value":597},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":167,"tag":191,"props":599,"children":600},{},[601],{"type":179,"value":602},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":167,"tag":191,"props":604,"children":605},{},[606],{"type":179,"value":607},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":167,"tag":191,"props":609,"children":610},{},[611],{"type":179,"value":612},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":167,"tag":191,"props":614,"children":615},{},[616],{"type":179,"value":617},"布尔运算符如逻辑与总位于行尾：",{"type":167,"tag":191,"props":619,"children":620},{},[621],{"type":179,"value":622},"预处理指令不要缩进，从行首开始。",{"type":167,"tag":191,"props":624,"children":625},{},[626],{"type":179,"value":627},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":167,"tag":191,"props":629,"children":630},{},[631],{"type":179,"value":632},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":167,"tag":191,"props":634,"children":635},{},[636],{"type":179,"value":637},"命名空间内容不缩进。",{"type":167,"tag":191,"props":639,"children":640},{},[641],{"type":179,"value":642},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":167,"tag":191,"props":644,"children":645},{},[646],{"type":179,"value":647},"垂直留白越少越好。",{"type":167,"tag":181,"props":649,"children":651},{"id":650},"规则特例",[652],{"type":179,"value":650},{"type":167,"tag":187,"props":654,"children":655},{},[656,661,666],{"type":167,"tag":191,"props":657,"children":658},{},[659],{"type":179,"value":660},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":167,"tag":191,"props":662,"children":663},{},[664],{"type":179,"value":665},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":167,"tag":191,"props":667,"children":668},{},[669],{"type":179,"value":670},"运用常识和判断力，并且 保持一致。",{"title":160,"searchDepth":672,"depth":672,"links":673},2,[],"markdown","content:6.maps:_cpp:google-cpp-standard.md","content","6.maps/_cpp/google-cpp-standard.md","6.maps/_cpp/google-cpp-standard","md",[681,685],{"_path":682,"title":683,"description":684},"/maps/_cpp/cpp","C++","C++ 是一种静态类型、编译式、通用、多范式编程语言，支持过程化编程、面向对象编程和泛型编程。",{"_path":686,"title":687,"description":688},"/maps/_cpp/king-db","King Database","A simple key-value store database",1742745250324]