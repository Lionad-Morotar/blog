[{"data":1,"prerenderedAt":415},["ShallowReactive",2],{"navigation":3,"/maps/_computer/computer":158,"/maps/_computer/computer-surround":406},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":400,"_id":401,"_source":402,"_file":403,"_stem":404,"_extension":405},"/maps/_computer/computer","_computer",false,true,"","Computer Mind Map","计算机基础知识导图，包含进制转换、数字电路设计、原码反码补码等核心概念的详细解析。",{"type":167,"children":168,"toc":394},"root",[169,177,184,199,205,211,270,275,281,286,292,310,324,330,335,358,364,377,383],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"进制",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"十进制如何转二进制",[182],{"type":176,"value":183},"十进制如何转二进制？",{"type":170,"tag":185,"props":186,"children":187},"ul",{},[188,194],{"type":170,"tag":189,"props":190,"children":191},"li",{},[192],{"type":176,"value":193},"整数除二倒序取余",{"type":170,"tag":189,"props":195,"children":196},{},[197],{"type":176,"value":198},"小数乘二顺序取整",{"type":170,"tag":178,"props":200,"children":202},{"id":201},"十进制转二进制的示例",[203],{"type":176,"value":204},"十进制转二进制的示例？",{"type":170,"tag":206,"props":207,"children":208},"p",{},[209],{"type":176,"value":210},"以 $(4.1)_{10}$ 为例，先算小数部分，再算整数部分：",{"type":170,"tag":212,"props":213,"children":214},"ol",{},[215,220,225,230,235,240,245,250,255,260,265],{"type":170,"tag":189,"props":216,"children":217},{},[218],{"type":176,"value":219},"$0.1;*;2;=;0.2$，得整数位 $0$，取小数位 $0.2$ 继续运算；",{"type":170,"tag":189,"props":221,"children":222},{},[223],{"type":176,"value":224},"$0.2;*;2;=;0.4$，得整数位 $0$，取小数位 $0.4$ 继续运算；",{"type":170,"tag":189,"props":226,"children":227},{},[228],{"type":176,"value":229},"$0.4;*;2;=;0.8$，得整数位 $0$，取小数位 $0.8$ 继续运算；",{"type":170,"tag":189,"props":231,"children":232},{},[233],{"type":176,"value":234},"$0.8;*;2;=;1.6$，得整数位 $1$，取小数位 $0.6$ 继续运算；",{"type":170,"tag":189,"props":236,"children":237},{},[238],{"type":176,"value":239},"$0.6;*;2;=;1.2$，得整数位 $1$，取小数位 $0.2$ 继续运算（从第二步开始循环）；",{"type":170,"tag":189,"props":241,"children":242},{},[243],{"type":176,"value":244},"得 $(0.1)_{10}$ 转为二进制的结果：$(0.0\\overline{0011})_2$",{"type":170,"tag":189,"props":246,"children":247},{},[248],{"type":176,"value":249},"$4;mod;2 = 0$，得余数 $0$，取结果 $4;/;2 = 2$ 继续运算；",{"type":170,"tag":189,"props":251,"children":252},{},[253],{"type":176,"value":254},"$2;mod;2 = 0$，得余数 $0$，取结果 $2;/;2 = 1$ 继续运算；",{"type":170,"tag":189,"props":256,"children":257},{},[258],{"type":176,"value":259},"$1;mod;2 = 1$，得余数 $1$，结束运算；",{"type":170,"tag":189,"props":261,"children":262},{},[263],{"type":176,"value":264},"得 $(4)_{10}$ 的二进制结果：$(100)_2$",{"type":170,"tag":189,"props":266,"children":267},{},[268],{"type":176,"value":269},"得 $(4.1)_{10}$ 的二进制结果：$(100.0\\overline{0011})_2$，可以用 (4.1).toString(2) 验证一下。",{"type":170,"tag":171,"props":271,"children":273},{"id":272},"数字电路",[274],{"type":176,"value":272},{"type":170,"tag":178,"props":276,"children":278},{"id":277},"为什么减法要转换为加法的形式",[279],{"type":176,"value":280},"为什么减法要转换为加法的形式？",{"type":170,"tag":206,"props":282,"children":283},{},[284],{"type":176,"value":285},"负数在用原码表示时，需要在最高位带上符号。但是加减乘法作为最基础的运算，其电路应该设计得简单，识别\"符号位\"会让基础电路变得复杂，所以需要一种算法来把基础运算转换为二进制加法。使用反码计算减法会带来正负零的问题，使用补码则不会发生异常。",{"type":170,"tag":178,"props":287,"children":289},{"id":288},"什么是原码反码和补码",[290],{"type":176,"value":291},"什么是原码反码和补码？",{"type":170,"tag":185,"props":293,"children":294},{},[295,300,305],{"type":170,"tag":189,"props":296,"children":297},{},[298],{"type":176,"value":299},"最高位为符号位,其余为数值位，这是原码",{"type":170,"tag":189,"props":301,"children":302},{},[303],{"type":176,"value":304},"正数的反码为其本身，负数的反码为值位取反",{"type":170,"tag":189,"props":306,"children":307},{},[308],{"type":176,"value":309},"正数的补码为其本身，负数的补码为其反码加一（符号位不进位）",{"type":170,"tag":206,"props":311,"children":312},{},[313,315],{"type":176,"value":314},"见：",{"type":170,"tag":316,"props":317,"children":321},"a",{"href":318,"rel":319},"http://www.atoolbox.net/Tool.php?Id=952",[320],"nofollow",[322],{"type":176,"value":323},"原码/反码/补码计算器",{"type":170,"tag":178,"props":325,"children":327},{"id":326},"使用补码进行减法的示例",[328],{"type":176,"value":329},"使用补码进行减法的示例？",{"type":170,"tag":206,"props":331,"children":332},{},[333],{"type":176,"value":334},"以四位整形举例如下，计算表达式 $5 - 2$：",{"type":170,"tag":212,"props":336,"children":337},{},[338,343,348,353],{"type":170,"tag":189,"props":339,"children":340},{},[341],{"type":176,"value":342},"将减法用加法表示为 $5 + (-2)$。",{"type":170,"tag":189,"props":344,"children":345},{},[346],{"type":176,"value":347},"$5$ 是正数，直接得补码 $0101$。",{"type":170,"tag":189,"props":349,"children":350},{},[351],{"type":176,"value":352},"$-2$ 的原码是 $1010$，数值位取反得 $1101$，最后数值位加一得补码 $1110$。",{"type":170,"tag":189,"props":354,"children":355},{},[356],{"type":176,"value":357},"补码相加，$0101 + 1110$，得 $0011$，换算回十进制，答案是 $3$。",{"type":170,"tag":178,"props":359,"children":361},{"id":360},"_8-位补码的极值是多少",[362],{"type":176,"value":363},"8 位补码的极值是多少？",{"type":170,"tag":206,"props":365,"children":366},{},[367,369,375],{"type":176,"value":368},"8 位补码正数的最大值是 $01111111$，即 $(127)",{"type":170,"tag":370,"props":371,"children":372},"em",{},[373],{"type":176,"value":374},"{10}$。因为补码没有负零，所以其负数的最小值为 $-(127 - 1)",{"type":176,"value":376},"{10}$，即 $(-128)_{10}$",{"type":170,"tag":171,"props":378,"children":380},{"id":379},"todo",[381],{"type":176,"value":382},"TODO",{"type":170,"tag":178,"props":384,"children":386},{"id":385},"原码-反码-补码详解",[387],{"type":170,"tag":316,"props":388,"children":391},{"href":389,"rel":390},"https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html",[320],[392],{"type":176,"value":393},"原码, 反码, 补码详解",{"title":163,"searchDepth":395,"depth":395,"links":396},2,[397,398,399],{"id":173,"depth":395,"text":173},{"id":272,"depth":395,"text":272},{"id":379,"depth":395,"text":382},"markdown","content:6.maps:_computer:computer.md","content","6.maps/_computer/computer.md","6.maps/_computer/computer","md",[407,411],{"_path":408,"title":409,"description":410},"/maps/_company/company","公司","注册和经营的流程及注意事项",{"_path":412,"title":413,"description":414},"/maps/_computer/encoding","编码","编码是将信息从一种形式或格式转换为另一种形式或格式的过程。",1742958680129]