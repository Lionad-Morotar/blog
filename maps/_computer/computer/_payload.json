[{"data":1,"prerenderedAt":418},["ShallowReactive",2],{"navigation":3,"/maps/_computer/computer":161,"/maps/_computer/computer-surround":409},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":403,"_id":404,"_source":405,"_file":406,"_stem":407,"_extension":408},"/maps/_computer/computer","_computer",false,true,"","Computer Mind Map","计算机基础知识导图，包含进制转换、数字电路设计、原码反码补码等核心概念的详细解析。",{"type":170,"children":171,"toc":397},"root",[172,180,187,202,208,214,273,278,284,289,295,313,327,333,338,361,367,380,386],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"进制",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":184},"h4",{"id":183},"十进制如何转二进制",[185],{"type":179,"value":186},"十进制如何转二进制？",{"type":173,"tag":188,"props":189,"children":190},"ul",{},[191,197],{"type":173,"tag":192,"props":193,"children":194},"li",{},[195],{"type":179,"value":196},"整数除二倒序取余",{"type":173,"tag":192,"props":198,"children":199},{},[200],{"type":179,"value":201},"小数乘二顺序取整",{"type":173,"tag":181,"props":203,"children":205},{"id":204},"十进制转二进制的示例",[206],{"type":179,"value":207},"十进制转二进制的示例？",{"type":173,"tag":209,"props":210,"children":211},"p",{},[212],{"type":179,"value":213},"以 $(4.1)_{10}$ 为例，先算小数部分，再算整数部分：",{"type":173,"tag":215,"props":216,"children":217},"ol",{},[218,223,228,233,238,243,248,253,258,263,268],{"type":173,"tag":192,"props":219,"children":220},{},[221],{"type":179,"value":222},"$0.1;*;2;=;0.2$，得整数位 $0$，取小数位 $0.2$ 继续运算；",{"type":173,"tag":192,"props":224,"children":225},{},[226],{"type":179,"value":227},"$0.2;*;2;=;0.4$，得整数位 $0$，取小数位 $0.4$ 继续运算；",{"type":173,"tag":192,"props":229,"children":230},{},[231],{"type":179,"value":232},"$0.4;*;2;=;0.8$，得整数位 $0$，取小数位 $0.8$ 继续运算；",{"type":173,"tag":192,"props":234,"children":235},{},[236],{"type":179,"value":237},"$0.8;*;2;=;1.6$，得整数位 $1$，取小数位 $0.6$ 继续运算；",{"type":173,"tag":192,"props":239,"children":240},{},[241],{"type":179,"value":242},"$0.6;*;2;=;1.2$，得整数位 $1$，取小数位 $0.2$ 继续运算（从第二步开始循环）；",{"type":173,"tag":192,"props":244,"children":245},{},[246],{"type":179,"value":247},"得 $(0.1)_{10}$ 转为二进制的结果：$(0.0\\overline{0011})_2$",{"type":173,"tag":192,"props":249,"children":250},{},[251],{"type":179,"value":252},"$4;mod;2 = 0$，得余数 $0$，取结果 $4;/;2 = 2$ 继续运算；",{"type":173,"tag":192,"props":254,"children":255},{},[256],{"type":179,"value":257},"$2;mod;2 = 0$，得余数 $0$，取结果 $2;/;2 = 1$ 继续运算；",{"type":173,"tag":192,"props":259,"children":260},{},[261],{"type":179,"value":262},"$1;mod;2 = 1$，得余数 $1$，结束运算；",{"type":173,"tag":192,"props":264,"children":265},{},[266],{"type":179,"value":267},"得 $(4)_{10}$ 的二进制结果：$(100)_2$",{"type":173,"tag":192,"props":269,"children":270},{},[271],{"type":179,"value":272},"得 $(4.1)_{10}$ 的二进制结果：$(100.0\\overline{0011})_2$，可以用 (4.1).toString(2) 验证一下。",{"type":173,"tag":174,"props":274,"children":276},{"id":275},"数字电路",[277],{"type":179,"value":275},{"type":173,"tag":181,"props":279,"children":281},{"id":280},"为什么减法要转换为加法的形式",[282],{"type":179,"value":283},"为什么减法要转换为加法的形式？",{"type":173,"tag":209,"props":285,"children":286},{},[287],{"type":179,"value":288},"负数在用原码表示时，需要在最高位带上符号。但是加减乘法作为最基础的运算，其电路应该设计得简单，识别\"符号位\"会让基础电路变得复杂，所以需要一种算法来把基础运算转换为二进制加法。使用反码计算减法会带来正负零的问题，使用补码则不会发生异常。",{"type":173,"tag":181,"props":290,"children":292},{"id":291},"什么是原码反码和补码",[293],{"type":179,"value":294},"什么是原码反码和补码？",{"type":173,"tag":188,"props":296,"children":297},{},[298,303,308],{"type":173,"tag":192,"props":299,"children":300},{},[301],{"type":179,"value":302},"最高位为符号位,其余为数值位，这是原码",{"type":173,"tag":192,"props":304,"children":305},{},[306],{"type":179,"value":307},"正数的反码为其本身，负数的反码为值位取反",{"type":173,"tag":192,"props":309,"children":310},{},[311],{"type":179,"value":312},"正数的补码为其本身，负数的补码为其反码加一（符号位不进位）",{"type":173,"tag":209,"props":314,"children":315},{},[316,318],{"type":179,"value":317},"见：",{"type":173,"tag":319,"props":320,"children":324},"a",{"href":321,"rel":322},"http://www.atoolbox.net/Tool.php?Id=952",[323],"nofollow",[325],{"type":179,"value":326},"原码/反码/补码计算器",{"type":173,"tag":181,"props":328,"children":330},{"id":329},"使用补码进行减法的示例",[331],{"type":179,"value":332},"使用补码进行减法的示例？",{"type":173,"tag":209,"props":334,"children":335},{},[336],{"type":179,"value":337},"以四位整形举例如下，计算表达式 $5 - 2$：",{"type":173,"tag":215,"props":339,"children":340},{},[341,346,351,356],{"type":173,"tag":192,"props":342,"children":343},{},[344],{"type":179,"value":345},"将减法用加法表示为 $5 + (-2)$。",{"type":173,"tag":192,"props":347,"children":348},{},[349],{"type":179,"value":350},"$5$ 是正数，直接得补码 $0101$。",{"type":173,"tag":192,"props":352,"children":353},{},[354],{"type":179,"value":355},"$-2$ 的原码是 $1010$，数值位取反得 $1101$，最后数值位加一得补码 $1110$。",{"type":173,"tag":192,"props":357,"children":358},{},[359],{"type":179,"value":360},"补码相加，$0101 + 1110$，得 $0011$，换算回十进制，答案是 $3$。",{"type":173,"tag":181,"props":362,"children":364},{"id":363},"_8-位补码的极值是多少",[365],{"type":179,"value":366},"8 位补码的极值是多少？",{"type":173,"tag":209,"props":368,"children":369},{},[370,372,378],{"type":179,"value":371},"8 位补码正数的最大值是 $01111111$，即 $(127)",{"type":173,"tag":373,"props":374,"children":375},"em",{},[376],{"type":179,"value":377},"{10}$。因为补码没有负零，所以其负数的最小值为 $-(127 - 1)",{"type":179,"value":379},"{10}$，即 $(-128)_{10}$",{"type":173,"tag":174,"props":381,"children":383},{"id":382},"todo",[384],{"type":179,"value":385},"TODO",{"type":173,"tag":181,"props":387,"children":389},{"id":388},"原码-反码-补码详解",[390],{"type":173,"tag":319,"props":391,"children":394},{"href":392,"rel":393},"https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html",[323],[395],{"type":179,"value":396},"原码, 反码, 补码详解",{"title":166,"searchDepth":398,"depth":398,"links":399},2,[400,401,402],{"id":176,"depth":398,"text":176},{"id":275,"depth":398,"text":275},{"id":382,"depth":398,"text":385},"markdown","content:6.maps:_computer:computer.md","content","6.maps/_computer/computer.md","6.maps/_computer/computer","md",[410,414],{"_path":411,"title":412,"description":413},"/maps/_company/company","公司","注册和经营的流程及注意事项",{"_path":415,"title":416,"description":417},"/maps/_computer/encoding","编码","编码是将信息从一种形式或格式转换为另一种形式或格式的过程。",1754391504243]