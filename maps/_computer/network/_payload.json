[{"data":1,"prerenderedAt":1216},["ShallowReactive",2],{"navigation":3,"/maps/_computer/network":161,"/maps/_computer/network-surround":1208},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":1202,"_id":1203,"_source":1204,"_file":1205,"_stem":1206,"_extension":1207},"/maps/_computer/network","_computer",false,true,"","计算机网络","计算机网络基础知识全览，包含 TCP/IP、HTTP、HTTPS、TLS 等协议的详细解析，以及网络安全、CDN、跨域等实践内容。",{"type":170,"children":171,"toc":1183},"root",[172,191,197,204,210,219,225,231,236,248,254,262,268,273,281,287,292,300,306,311,319,325,330,348,360,366,371,394,400,406,564,570,575,580,585,591,596,602,607,615,625,631,636,642,647,653,658,681,686,691,696,701,721,727,732,740,751,757,768,773,796,801,808,813,819,827,841,847,854,859,864,869,875,880,887,893,898,906,912,918,929,935,940,948,954,959,970,976,981,986,992,997,1003,1017,1028,1034,1039,1052,1058,1064,1069,1074,1080,1085,1091,1096,1101,1107,1112,1118,1123,1129,1134,1154,1165,1170],{"type":173,"tag":174,"props":175,"children":176},"element","ul",{},[177],{"type":173,"tag":178,"props":179,"children":180},"li",{},[181],{"type":173,"tag":182,"props":183,"children":187},"a",{"href":184,"rel":185},"https://beej.us/guide/bgnet0/html/split/index.html",[186],"nofollow",[188],{"type":189,"value":190},"text","Beej's Guide to Network Concepts",{"type":173,"tag":192,"props":193,"children":195},"h2",{"id":194},"网络模型",[196],{"type":189,"value":194},{"type":173,"tag":198,"props":199,"children":201},"h4",{"id":200},"各网络层有哪些代表性的协议",[202],{"type":189,"value":203},"各网络层有哪些代表性的协议？",{"type":173,"tag":205,"props":206,"children":207},"p",{},[208],{"type":189,"value":209},"应用层有 HTTP、DNS、FTP，表示层有 SSL、TSL、base64、MIDI、JPEG，会话层有 xxx，传输层则是 TCP、UDP，网络层有 IP，数据链路层 xxx，物理层有以太网协议。",{"type":173,"tag":205,"props":211,"children":212},{},[213],{"type":173,"tag":214,"props":215,"children":218},"img",{"alt":216,"src":217},"OSI 参考模型","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620033400.png?type=win11&w=60",[],{"type":173,"tag":192,"props":220,"children":222},{"id":221},"tcp",[223],{"type":189,"value":224},"TCP",{"type":173,"tag":198,"props":226,"children":228},{"id":227},"tcpip-是什么",[229],{"type":189,"value":230},"TCP/IP 是什么？",{"type":173,"tag":205,"props":232,"children":233},{},[234],{"type":189,"value":235},"TCP/IP 协议是一个协议集。TCP/IP 包括了应用层、传输层、网络层、数据链路层和网络层，是一个四层体系结构。各层有代表性的协议有 HTTP、DNS，TLS，IP 和 xxx。",{"type":173,"tag":205,"props":237,"children":238},{},[239,241],{"type":189,"value":240},"TODO，",{"type":173,"tag":182,"props":242,"children":245},{"href":243,"rel":244},"https://developer.51cto.com/article/597961.html",[186],[246],{"type":189,"value":247},"终于有人能把 TCP/IP 协议讲的明明白白了！",{"type":173,"tag":198,"props":249,"children":251},{"id":250},"tcp-header-由哪些部分组成",[252],{"type":189,"value":253},"TCP Header 由哪些部分组成？",{"type":173,"tag":205,"props":255,"children":256},{},[257],{"type":173,"tag":214,"props":258,"children":261},{"alt":259,"src":260},"TCP Header","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731153510.png?type=win11&w=60",[],{"type":173,"tag":198,"props":263,"children":265},{"id":264},"三次握手具体过程",[266],{"type":189,"value":267},"三次握手具体过程？",{"type":173,"tag":205,"props":269,"children":270},{},[271],{"type":189,"value":272},"从三次握手图示可以发现，仅仅是连接的建立，就需要大量时间消耗。客户端想发送数据，至少要等 1.5xRTT；服务端想发送数据，至少要 2xRTT。",{"type":173,"tag":205,"props":274,"children":275},{},[276],{"type":173,"tag":214,"props":277,"children":280},{"alt":278,"src":279},"Three-way Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731162450.png?type=win11&w=40",[],{"type":173,"tag":198,"props":282,"children":284},{"id":283},"tcp-fast-open-如何优化握手过程",[285],{"type":189,"value":286},"TCP Fast Open 如何优化握手过程？",{"type":173,"tag":205,"props":288,"children":289},{},[290],{"type":189,"value":291},"TFO 规定服务器第一次返回 ACK 时，携带一个用以标志客户端身份的 Cookie。后续客户端发送 SYN 建立连接的时候带上这个 Cookie，服务端确认身份之后，就能直接返回数据了（节约了 1.5 RTT）。",{"type":173,"tag":205,"props":293,"children":294},{},[295],{"type":173,"tag":214,"props":296,"children":299},{"alt":297,"src":298},"TFO","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807054219.png?type=win11&w=80",[],{"type":173,"tag":198,"props":301,"children":303},{"id":302},"四次挥手的具体过程",[304],{"type":189,"value":305},"四次挥手的具体过程？",{"type":173,"tag":205,"props":307,"children":308},{},[309],{"type":189,"value":310},"四次挥手如下所示。为什么建立连接要三次，而断开连接要四次请求呢？从图中可以看出，接收到 FIN 请求时，服务端立即返回 ACK 表示收到请求，但是要等自己这边剩余一些工作（可能时未发送完的请求内容）完成之后，才会返回 FIN。",{"type":173,"tag":205,"props":312,"children":313},{},[314],{"type":173,"tag":214,"props":315,"children":318},{"alt":316,"src":317},"Four-way Wavehand","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731165331.png?type=win11&w=40",[],{"type":173,"tag":198,"props":320,"children":322},{"id":321},"tcp-链接中如果某端出故障了会怎么办",[323],{"type":189,"value":324},"TCP 链接中如果某端出故障了会怎么办？",{"type":173,"tag":205,"props":326,"children":327},{},[328],{"type":189,"value":329},"会通过计时器来保证链接的稳定性。",{"type":173,"tag":174,"props":331,"children":332},{},[333,338,343],{"type":173,"tag":178,"props":334,"children":335},{},[336],{"type":189,"value":337},"超时重传计时器：对方没有返回 ACK 时，发送方需要重新发送数据。一般计时器的时间选择 2RTT。",{"type":173,"tag":178,"props":339,"children":340},{},[341],{"type":189,"value":342},"2MSL 定时器：主动断开连接的一方发送 FIN 后需要等待 2MSL 时间。因为如果服务端没有收到最后一个 ACK，它将重新发送 FIN。",{"type":173,"tag":178,"props":344,"children":345},{},[346],{"type":189,"value":347},"保活计时器：每当接收方收到消息，将计时器重设为两小时。计时器到期时，每 75s 发送一次探测报文段，如果连续 10 次都没有被响应则断开连接。",{"type":173,"tag":205,"props":349,"children":350},{},[351,353],{"type":189,"value":352},"见：",{"type":173,"tag":182,"props":354,"children":357},{"href":355,"rel":356},"https://www.cnblogs.com/13224ACMer/p/6616960.html",[186],[358],{"type":189,"value":359},"TCP 四种计时器",{"type":173,"tag":192,"props":361,"children":363},{"id":362},"udp",[364],{"type":189,"value":365},"UDP",{"type":173,"tag":205,"props":367,"children":368},{},[369],{"type":189,"value":370},"UDP，即 User Datagram Protocol 用户数据报协议。数据报不保证信息的传达是否到位，所以 UDP 也被普遍称作 Unreliable Datagram Protocol。",{"type":173,"tag":174,"props":372,"children":373},{},[374,379,384,389],{"type":173,"tag":178,"props":375,"children":376},{},[377],{"type":189,"value":378},"不保证消息交付",{"type":173,"tag":178,"props":380,"children":381},{},[382],{"type":189,"value":383},"不保证交付顺序",{"type":173,"tag":178,"props":385,"children":386},{},[387],{"type":189,"value":388},"不跟踪连接状态",{"type":173,"tag":178,"props":390,"children":391},{},[392],{"type":189,"value":393},"不需要拥塞控制",{"type":173,"tag":192,"props":395,"children":397},{"id":396},"http",[398],{"type":189,"value":399},"HTTP",{"type":173,"tag":198,"props":401,"children":403},{"id":402},"有哪些常见的状态码",[404],{"type":189,"value":405},"有哪些常见的状态码？",{"type":173,"tag":407,"props":408,"children":409},"table",{},[410,429],{"type":173,"tag":411,"props":412,"children":413},"thead",{},[414],{"type":173,"tag":415,"props":416,"children":417},"tr",{},[418,424],{"type":173,"tag":419,"props":420,"children":421},"th",{},[422],{"type":189,"value":423},"状态码",{"type":173,"tag":419,"props":425,"children":426},{},[427],{"type":189,"value":428},"描述",{"type":173,"tag":430,"props":431,"children":432},"tbody",{},[433,447,460,473,486,499,512,525,538,551],{"type":173,"tag":415,"props":434,"children":435},{},[436,442],{"type":173,"tag":437,"props":438,"children":439},"td",{},[440],{"type":189,"value":441},"200",{"type":173,"tag":437,"props":443,"children":444},{},[445],{"type":189,"value":446},"成功并返回数据",{"type":173,"tag":415,"props":448,"children":449},{},[450,455],{"type":173,"tag":437,"props":451,"children":452},{},[453],{"type":189,"value":454},"301",{"type":173,"tag":437,"props":456,"children":457},{},[458],{"type":189,"value":459},"永久转移，重定向",{"type":173,"tag":415,"props":461,"children":462},{},[463,468],{"type":173,"tag":437,"props":464,"children":465},{},[466],{"type":189,"value":467},"302",{"type":173,"tag":437,"props":469,"children":470},{},[471],{"type":189,"value":472},"临时重定向",{"type":173,"tag":415,"props":474,"children":475},{},[476,481],{"type":173,"tag":437,"props":477,"children":478},{},[479],{"type":189,"value":480},"303",{"type":173,"tag":437,"props":482,"children":483},{},[484],{"type":189,"value":485},"临时重定向（客户端必须使用 Get 方法重新请求资源）",{"type":173,"tag":415,"props":487,"children":488},{},[489,494],{"type":173,"tag":437,"props":490,"children":491},{},[492],{"type":189,"value":493},"304",{"type":173,"tag":437,"props":495,"children":496},{},[497],{"type":189,"value":498},"资源未修改，可使用缓存",{"type":173,"tag":415,"props":500,"children":501},{},[502,507],{"type":173,"tag":437,"props":503,"children":504},{},[505],{"type":189,"value":506},"400",{"type":173,"tag":437,"props":508,"children":509},{},[510],{"type":189,"value":511},"请求语法错误",{"type":173,"tag":415,"props":513,"children":514},{},[515,520],{"type":173,"tag":437,"props":516,"children":517},{},[518],{"type":189,"value":519},"401",{"type":173,"tag":437,"props":521,"children":522},{},[523],{"type":189,"value":524},"要求身份认证",{"type":173,"tag":415,"props":526,"children":527},{},[528,533],{"type":173,"tag":437,"props":529,"children":530},{},[531],{"type":189,"value":532},"403",{"type":173,"tag":437,"props":534,"children":535},{},[536],{"type":189,"value":537},"请求拒绝",{"type":173,"tag":415,"props":539,"children":540},{},[541,546],{"type":173,"tag":437,"props":542,"children":543},{},[544],{"type":189,"value":545},"404",{"type":173,"tag":437,"props":547,"children":548},{},[549],{"type":189,"value":550},"资源不存在",{"type":173,"tag":415,"props":552,"children":553},{},[554,559],{"type":173,"tag":437,"props":555,"children":556},{},[557],{"type":189,"value":558},"500",{"type":173,"tag":437,"props":560,"children":561},{},[562],{"type":189,"value":563},"服务器错误",{"type":173,"tag":198,"props":565,"children":567},{"id":566},"http-报文由哪些部分组成",[568],{"type":189,"value":569},"HTTP 报文由哪些部分组成？",{"type":173,"tag":205,"props":571,"children":572},{},[573],{"type":189,"value":574},"请求报文由请求行、请求头、空行和请求数据组成，相应报文类似。",{"type":173,"tag":205,"props":576,"children":577},{},[578],{"type":189,"value":579},"请求报文实例：",{"type":173,"tag":205,"props":581,"children":582},{},[583],{"type":189,"value":584},"相应报文实例：",{"type":173,"tag":198,"props":586,"children":588},{"id":587},"http-11-对比-http-10-做了哪些改进",[589],{"type":189,"value":590},"HTTP 1.1 对比 HTTP 1.0 做了哪些改进？",{"type":173,"tag":205,"props":592,"children":593},{},[594],{"type":189,"value":595},"长链接（keep-alive）、断点续传、HTTP 缓存。",{"type":173,"tag":198,"props":597,"children":599},{"id":598},"http-缓存分几种",[600],{"type":189,"value":601},"HTTP 缓存分几种？",{"type":173,"tag":205,"props":603,"children":604},{},[605],{"type":189,"value":606},"分强缓存和协商缓存：Expires、Cache-Control、Last-Modified、Etag。",{"type":173,"tag":205,"props":608,"children":609},{},[610],{"type":173,"tag":214,"props":611,"children":614},{"alt":612,"src":613},"HTTP Cache","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220630205606.png?type=win11&w=60",[],{"type":173,"tag":205,"props":616,"children":617},{},[618,619],{"type":189,"value":240},{"type":173,"tag":182,"props":620,"children":623},{"href":621,"rel":622},"https://imweb.io/topic/55c6f9bac222e3af6ce235b9",[186],[624],{"type":189,"value":621},{"type":173,"tag":198,"props":626,"children":628},{"id":627},"强缓存和协商缓存的主要区别是",[629],{"type":189,"value":630},"强缓存和协商缓存的主要区别是？",{"type":173,"tag":205,"props":632,"children":633},{},[634],{"type":189,"value":635},"强缓存是一但匹配就无条件使用缓存，而面对协商缓存的资源，浏览器需要向服务端发请求，对比资源是否变更，并依靠服务端的响应来判断是否使用缓存。如果资源同时应用了强缓存和协商缓存，那么浏览器优先使用强缓存。",{"type":173,"tag":198,"props":637,"children":639},{"id":638},"no-store-和-no-cache-的区别",[640],{"type":189,"value":641},"no-store 和 no-cache 的区别？",{"type":173,"tag":205,"props":643,"children":644},{},[645],{"type":189,"value":646},"no-store 告诉客户端每次都在服务器取最新的资源。no-cache 也要求每次都要重新请求，但服务器可能返回 304 告诉客户端资源未改变。",{"type":173,"tag":198,"props":648,"children":650},{"id":649},"http2-的改进在哪里",[651],{"type":189,"value":652},"HTTP2 的改进在哪里？",{"type":173,"tag":205,"props":654,"children":655},{},[656],{"type":189,"value":657},"HTTP/2 主要包含以下几个方面的变化，显著增强了性能，也增加了安全性。",{"type":173,"tag":174,"props":659,"children":660},{},[661,666,671,676],{"type":173,"tag":178,"props":662,"children":663},{},[664],{"type":189,"value":665},"二进制分帧层",{"type":173,"tag":178,"props":667,"children":668},{},[669],{"type":189,"value":670},"头部压缩（HPACK、Huffman）",{"type":173,"tag":178,"props":672,"children":673},{},[674],{"type":189,"value":675},"多路复用",{"type":173,"tag":178,"props":677,"children":678},{},[679],{"type":189,"value":680},"服务端推送",{"type":173,"tag":205,"props":682,"children":683},{},[684],{"type":189,"value":685},"二进制分帧层是在应用层（HTTP）和传输层（TCP、UDP）之间新增的一个层级关系。二进制分帧层将传输的 HTTP 消息分割为更小的帧，并采用二进制格式编码传输。帧分为头部帧和消息帧。这意味着 HTTP/2 请求的所有内容都是二进制传输的。",{"type":173,"tag":205,"props":687,"children":688},{},[689],{"type":189,"value":690},"HTTP 头部被转为帧之前，会通过维护一个表结构，通过序号记录已发送的键值对。这是一种索引算法，叫 HPACK。具体的表结构分静态表和动态表，静态表给一些常用的头部标号了号，直接使用就好，动态表则是根据发送的内容动态确定的记号。需要被发送具体内容会被哈夫曼编码以减小体积。",{"type":173,"tag":205,"props":692,"children":693},{},[694],{"type":189,"value":695},"多路复用是指，多个 HTTP 请求可以在同一个 TCP 连接中并行传输。这和 HTTP 1.1 的 Connection：keep-alive 不同，keep-alive 虽然复用 TCP 连接，但是多个响应之间是串行的。",{"type":173,"tag":205,"props":697,"children":698},{},[699],{"type":189,"value":700},"建立连接后，双方通过交换 SETTING 帧，以确认双向的流量窗口控制大小。然后开始发送帧。帧可以在一个连接中根据优先级发送，或是被乱序发送，响应方也能乱序接收。由于流是双向的，只要服务端 SETTING 帧设置的流量窗口大小不为 0，服务端可按照同源策略推送资源给客户端。",{"type":173,"tag":205,"props":702,"children":703},{},[704,705,712,714],{"type":189,"value":352},{"type":173,"tag":182,"props":706,"children":709},{"href":707,"rel":708},"https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.5.3",[186],[710],{"type":189,"value":711},"HTTP/2 和 HTTP/1.X 相比的新特性",{"type":189,"value":713},"、",{"type":173,"tag":182,"props":715,"children":718},{"href":716,"rel":717},"https://blog.csdn.net/gaoliang1719/article/details/106346201/",[186],[719],{"type":189,"value":720},"HTTP/2 协议之头部压缩",{"type":173,"tag":198,"props":722,"children":724},{"id":723},"http3-相比-http2-改变了什么东西",[725],{"type":189,"value":726},"HTTP3 相比 HTTP2 改变了什么东西？",{"type":173,"tag":205,"props":728,"children":729},{},[730],{"type":189,"value":731},"HTTP3 使用全新的传输层协议 QUIC，实现了 H2 中的流式传输（HTTP2）、多路复用（TCP）、流量控制（TCP）以及可靠性（TCP）等内容，其网络层协议应用的是 UDP 而不是 TCP，本意是用来解决 TCP 建立链接需要  1.5 RTT 延迟的问题。这种改善在移动端更加有效。",{"type":173,"tag":205,"props":733,"children":734},{},[735],{"type":173,"tag":214,"props":736,"children":739},{"alt":737,"src":738},"HTTP3 VS HTTP2 VS HTTP1.1","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220621003527.png?type=draw&w=80",[],{"type":173,"tag":205,"props":741,"children":742},{},[743,744],{"type":189,"value":352},{"type":173,"tag":182,"props":745,"children":748},{"href":746,"rel":747},"https://mp.weixin.qq.com/s/40YBEWZBaHakDuRuh27fMg",[186],[749],{"type":189,"value":750},"HTTP3 发布了！",{"type":173,"tag":192,"props":752,"children":754},{"id":753},"tls",[755],{"type":189,"value":756},"TLS",{"type":173,"tag":205,"props":758,"children":759},{},[760,761],{"type":189,"value":240},{"type":173,"tag":182,"props":762,"children":765},{"href":763,"rel":764},"https://www.oschina.net/translate/rfc-8446-aka-tls-1-3",[186],[766],{"type":189,"value":767},"详细介绍 RFC 8446（即 TLS 1.3）",{"type":173,"tag":205,"props":769,"children":770},{},[771],{"type":189,"value":772},"TLS 是一种混合式加密系统，同时使用对称加密和非对称加密。它使用非对称加密以加密对称加密所需的密钥。它有多个版本。TLS 1.3 是一种比起 TLS1.2 而言更清晰、更快速、更安全的现代化安全协议。TLS 1.2 有两点问题：1. 包括 POODLE 在内的众多可行漏洞；2. 性能低。为了改善这些问题，IETF 在 2013 年，着手 TLS 1.3 的讨论，主要改进：",{"type":173,"tag":174,"props":774,"children":775},{},[776,781,786,791],{"type":173,"tag":178,"props":777,"children":778},{},[779],{"type":189,"value":780},"减少握手时间",{"type":173,"tag":178,"props":782,"children":783},{},[784],{"type":189,"value":785},"加密更多的握手",{"type":173,"tag":178,"props":787,"children":788},{},[789],{"type":189,"value":790},"改善跨协议攻击的弹性",{"type":173,"tag":178,"props":792,"children":793},{},[794],{"type":189,"value":795},"删除遗留特征",{"type":173,"tag":205,"props":797,"children":798},{},[799],{"type":189,"value":800},"经过 4 年的争论。最终，形成了 RFC 8446 规范。",{"type":173,"tag":802,"props":803,"children":805},"h3",{"id":804},"tls-12-的缺陷",[806],{"type":189,"value":807},"TLS 1.2 的缺陷",{"type":173,"tag":205,"props":809,"children":810},{},[811],{"type":189,"value":812},"TLS 1.2 使用的加密方式有缺陷。其中，非对称加密有如 RSA 和 Diffie-Hellman 协议。",{"type":173,"tag":198,"props":814,"children":816},{"id":815},"rsa",[817],{"type":189,"value":818},"RSA",{"type":173,"tag":205,"props":820,"children":821},{},[822],{"type":173,"tag":214,"props":823,"children":826},{"alt":824,"src":825},"RSA Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082140.png?w=70",[],{"type":173,"tag":205,"props":828,"children":829},{},[830,832,839],{"type":189,"value":831},"RSA 不保证前向保密。即，如果有人记录了加密对话，然后获取服务器的 RSA 私钥，他们可以将对话解密。而攻击者可能只需 ",{"type":173,"tag":182,"props":833,"children":836},{"href":834,"rel":835},"https://www.wikiwand.com/zh/%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E",[186],[837],{"type":189,"value":838},"HeartBleed 漏洞",{"type":189,"value":840},"（缓存区过读）就可以顺利窃取私钥。",{"type":173,"tag":198,"props":842,"children":844},{"id":843},"diffie-hellman",[845],{"type":189,"value":846},"Diffie-Hellman",{"type":173,"tag":205,"props":848,"children":849},{},[850],{"type":173,"tag":214,"props":851,"children":853},{"alt":846,"src":852},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082812.png?w=70",[],{"type":173,"tag":205,"props":855,"children":856},{},[857],{"type":189,"value":858},"Diffie-Hellman 的缺陷在于，协议的某些参数不安全，且能够被操纵设置；不安全的参数能导致加密更容易被破解。",{"type":173,"tag":198,"props":860,"children":862},{"id":861},"对称加密缺陷",[863],{"type":189,"value":861},{"type":173,"tag":205,"props":865,"children":866},{},[867],{"type":189,"value":868},"TLS 1.2 的对称加密使用的 CBC 模式密码和流式密码也有缺陷。",{"type":173,"tag":198,"props":870,"children":872},{"id":871},"downgrade-attack",[873],{"type":189,"value":874},"Downgrade Attack",{"type":173,"tag":205,"props":876,"children":877},{},[878],{"type":189,"value":879},"由于 TLS 1.2 握手协商密钥的部分没有加密。所以中间人可以拦截客户端的请求，选择发送方和接收方都支持的弱密码，伪造请求。",{"type":173,"tag":205,"props":881,"children":882},{},[883],{"type":173,"tag":214,"props":884,"children":886},{"alt":874,"src":885},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807090034.png?w=70",[],{"type":173,"tag":802,"props":888,"children":890},{"id":889},"_0-rtt",[891],{"type":189,"value":892},"0-RTT",{"type":173,"tag":205,"props":894,"children":895},{},[896],{"type":189,"value":897},"TLS 1.3 中，通讯双方可以得到一个“恢复主密钥”的密钥，用于从中断的连接中直接恢复通讯。但是有被拦截导致重放攻击的风险。",{"type":173,"tag":205,"props":899,"children":900},{},[901],{"type":173,"tag":214,"props":902,"children":905},{"alt":903,"src":904},"0-RTT 重放攻击","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807081140.png?w=70",[],{"type":173,"tag":192,"props":907,"children":909},{"id":908},"https",[910],{"type":189,"value":911},"HTTPS",{"type":173,"tag":802,"props":913,"children":915},{"id":914},"links",[916],{"type":189,"value":917},"Links",{"type":173,"tag":205,"props":919,"children":920},{},[921,922],{"type":189,"value":240},{"type":173,"tag":182,"props":923,"children":926},{"href":924,"rel":925},"https://zhuanlan.zhihu.com/p/26682342",[186],[927],{"type":189,"value":928},"深入理解 HTTPS 原理、过程与实践",{"type":173,"tag":198,"props":930,"children":932},{"id":931},"https-的握手过程是怎样的",[933],{"type":189,"value":934},"HTTPS 的握手过程是怎样的？",{"type":173,"tag":205,"props":936,"children":937},{},[938],{"type":189,"value":939},"总的来说是一个非对称加密+对称加密的过程。客户端通过一个随机数加上服务器的公钥来生成预主密钥，然后双方再通过 Client Hello 和 Server Hello 时的两个随机数生成会话密钥。生成预主密钥的过程是非对称加密的，因为只有服务端用私钥才能解得客户端的随机数。而之后使用会话密钥主要是出于性能考虑。",{"type":173,"tag":205,"props":941,"children":942},{},[943],{"type":173,"tag":214,"props":944,"children":947},{"alt":945,"src":946},"HTTPS 握手过程","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620024738.png",[],{"type":173,"tag":198,"props":949,"children":951},{"id":950},"ca-怎么解决中间人问题",[952],{"type":189,"value":953},"CA 怎么解决中间人问题？",{"type":173,"tag":205,"props":955,"children":956},{},[957],{"type":189,"value":958},"CA 主要是用来防范服务器端返回 Server Hello 前就和客户端提供了假的公钥。CA 是一个可信的第三方机构，客户端想要服务器的公钥，需要从 CA 获得。CA 返回公钥以及数字签名。客户端只要拿到公钥后根据 CA 公钥对其计算获得摘要，再将摘要和签名进行对比，就能知道是否拿到了可信的公钥。",{"type":173,"tag":205,"props":960,"children":961},{},[962,963],{"type":189,"value":352},{"type":173,"tag":182,"props":964,"children":967},{"href":965,"rel":966},"https://www.jianshu.com/p/9de06222793b",[186],[968],{"type":189,"value":969},"HTTPS CA 原理",{"type":173,"tag":198,"props":971,"children":973},{"id":972},"数字签名是什么",[974],{"type":189,"value":975},"数字签名是什么？",{"type":173,"tag":205,"props":977,"children":978},{},[979],{"type":189,"value":980},"数字签名是只有信息发送者才能产生的一段文本，信息接收方可以通过签名计算出接受到的文本是否经过了修改。如果我要发送 A，我会用私钥将 A 进行加密获得 B，并把 A 和 B 同时发送过去。B 就是数字签名。因为我的公钥是公开的，所以接受方可以通过使用我的公钥去计算 A，如果获得和 B 一致的结果，那么说明信息没有被篡改。",{"type":173,"tag":192,"props":982,"children":984},{"id":983},"攻防",[985],{"type":189,"value":983},{"type":173,"tag":198,"props":987,"children":989},{"id":988},"https-降级攻击的原理是什么",[990],{"type":189,"value":991},"HTTPS 降级攻击的原理是什么？",{"type":173,"tag":205,"props":993,"children":994},{},[995],{"type":189,"value":996},"客服端与服务端协商加密协议的过程当中，如果攻击者拦截了客户端（或操控客户端）并代替它向服务端协商使用仅支持有漏洞的协议。如果服务端同意了，那么建立连接后，攻击者就能使用该协议的已知漏洞的破解手段，去破解通讯内容了。",{"type":173,"tag":198,"props":998,"children":1000},{"id":999},"syn-攻击的基本原理是什么",[1001],{"type":189,"value":1002},"SYN 攻击的基本原理是什么？",{"type":173,"tag":205,"props":1004,"children":1005},{},[1006,1008,1015],{"type":189,"value":1007},"SYN 洪水攻击是 DDOS 攻击中最常见的攻击类型。攻击者向服务器发送大量伪造的 TCP 连接请求，而源 IP 是伪造的。由于服务器收不到伪造源回应的 ACK 数据包，就会不断重发。一般应对方式是：减少重发次数、使用 ",{"type":173,"tag":182,"props":1009,"children":1012},{"href":1010,"rel":1011},"https://baike.baidu.com/item/syn%20cookie/6898884?fr=aladdin",[186],[1013],{"type":189,"value":1014},"SYN Cookie",{"type":189,"value":1016},"、增加 backlog 队列长度、限制 SYN 并发数。",{"type":173,"tag":205,"props":1018,"children":1019},{},[1020,1021],{"type":189,"value":352},{"type":173,"tag":182,"props":1022,"children":1025},{"href":1023,"rel":1024},"https://www.qycn.com/about/hd/2049.html",[186],[1026],{"type":189,"value":1027},"服务器遭到 SYN 攻击该如何处理呢？",{"type":173,"tag":198,"props":1029,"children":1031},{"id":1030},"请求头加-csrf-参数为什么能防止-csrf-攻击",[1032],{"type":189,"value":1033},"请求头加 CSRF 参数为什么能防止 CSRF 攻击？",{"type":173,"tag":205,"props":1035,"children":1036},{},[1037],{"type":189,"value":1038},"跨站请求伪造是攻击者通过在钓鱼站点发起被钓网站请求（如图片地址），以达到攻击目的。防御方式一般有两种：",{"type":173,"tag":174,"props":1040,"children":1041},{},[1042,1047],{"type":173,"tag":178,"props":1043,"children":1044},{},[1045],{"type":189,"value":1046},"使用 SameSite Cookie，禁用第三方 Cookie",{"type":173,"tag":178,"props":1048,"children":1049},{},[1050],{"type":189,"value":1051},"在请求头中加入 CSRF Token，这样攻击者使用钓鱼站点发起请求时，由于不能设置请求头，所以请求在服务端会被拒绝",{"type":173,"tag":192,"props":1053,"children":1055},{"id":1054},"cdn",[1056],{"type":189,"value":1057},"CDN",{"type":173,"tag":198,"props":1059,"children":1061},{"id":1060},"cdn-有什么好处",[1062],{"type":189,"value":1063},"CDN 有什么好处？",{"type":173,"tag":205,"props":1065,"children":1066},{},[1067],{"type":189,"value":1068},"对页面加载而言，CDN 可以减少请求时间、突破浏览器同域的 TCP 并发数、节约 Cookie 带宽。",{"type":173,"tag":192,"props":1070,"children":1072},{"id":1071},"浏览器",[1073],{"type":189,"value":1071},{"type":173,"tag":198,"props":1075,"children":1077},{"id":1076},"url-由哪些部分组成",[1078],{"type":189,"value":1079},"URL 由哪些部分组成？",{"type":173,"tag":205,"props":1081,"children":1082},{},[1083],{"type":189,"value":1084},"协议头、域名、端口、目录、文件名（index.html）、页面锚、参数。",{"type":173,"tag":198,"props":1086,"children":1088},{"id":1087},"怎么做跨域",[1089],{"type":189,"value":1090},"怎么做跨域？",{"type":173,"tag":205,"props":1092,"children":1093},{},[1094],{"type":189,"value":1095},"用代理服务器、CORS、iFrame 或者 WebSocket 都可以。",{"type":173,"tag":205,"props":1097,"children":1098},{},[1099],{"type":189,"value":1100},"服务器可以忽略同源限制；WebSocket 和 CORS 不受同源影响；iFrame 需要浏览器加载一个跨域页面，然后和主页面用 postMessage 或者哈希监听的方式通信，让 iFrame 中的脚本代替主页面发送请求。",{"type":173,"tag":198,"props":1102,"children":1104},{"id":1103},"正向代理和反向代理的区别是",[1105],{"type":189,"value":1106},"正向代理和反向代理的区别是？",{"type":173,"tag":205,"props":1108,"children":1109},{},[1110],{"type":189,"value":1111},"正向代理为用户服务，反向代理为服务器服务，分别对应“VPN”和“负载均衡”的概念。",{"type":173,"tag":198,"props":1113,"children":1115},{"id":1114},"cors-运作流程是怎样的",[1116],{"type":189,"value":1117},"CORS 运作流程是怎样的？",{"type":173,"tag":205,"props":1119,"children":1120},{},[1121],{"type":189,"value":1122},"CORS 即跨域资源共享机制。浏览器在请求资源前通过携带 Origin 字段的 OPTIONS 请求向服务器索取设置有 Access-Control-Allow-Methods、Access-Control-Allow-Headers、Access-Control-Allow-Origin 的响应。在得到响应的允许后再继续发送请求。",{"type":173,"tag":198,"props":1124,"children":1126},{"id":1125},"什么是私有网络请求攻击",[1127],{"type":189,"value":1128},"什么是私有网络请求攻击？",{"type":173,"tag":205,"props":1130,"children":1131},{},[1132],{"type":189,"value":1133},"在内网域名向 localhost 发起请求就算一种私有网络请求。而恶意代码通过向比浏览器当前浏览页面的域名 IP 更私密的 IP 地址发起请求，以达到获取信息或攻击手段的方式就是私有网络请求攻击。",{"type":173,"tag":205,"props":1135,"children":1136},{},[1137,1139,1146,1148],{"type":189,"value":1138},"自 Chrome 96 后， Chrome 开始实施私有网络控制策略，需要部署以下两个请求头以解除控制：",{"type":173,"tag":1140,"props":1141,"children":1143},"code",{"className":1142},[],[1144],{"type":189,"value":1145},"Access-Control-Request-Private-Network: true",{"type":189,"value":1147}," 和 ",{"type":173,"tag":1140,"props":1149,"children":1151},{"className":1150},[],[1152],{"type":189,"value":1153},"Access-Control-Allow-Private-Network: true",{"type":173,"tag":205,"props":1155,"children":1156},{},[1157,1158],{"type":189,"value":352},{"type":173,"tag":182,"props":1159,"children":1162},{"href":1160,"rel":1161},"https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&mid=2247491913&idx=1&sn=2bb0a28358c02a8ec1832781205df72c&chksm=c2e11462f5969d74fac277131e1ba8c417ec86754b2f1b2dbe8e238ca27d5c2eaebe602ec803&token=1851580176&lang=zh_CN&scene=21#wechat_redirect",[186],[1163],{"type":189,"value":1164},"Chrome 重大更新，CORS 增加了两个新的请求头？ |  code 秘密花园",{"type":173,"tag":192,"props":1166,"children":1168},{"id":1167},"阅读更多",[1169],{"type":189,"value":1167},{"type":173,"tag":174,"props":1171,"children":1172},{},[1173],{"type":173,"tag":178,"props":1174,"children":1175},{},[1176],{"type":173,"tag":182,"props":1177,"children":1180},{"href":1178,"rel":1179},"https://juejin.im/post/6844903518826921998",[186],[1181],{"type":189,"value":1182},"为你的网站带上帽子 | 使用 helmet 保护 Express 应用",{"title":166,"searchDepth":1184,"depth":1184,"links":1185},2,[1186,1187,1188,1189,1190,1195,1198,1199,1200,1201],{"id":194,"depth":1184,"text":194},{"id":221,"depth":1184,"text":224},{"id":362,"depth":1184,"text":365},{"id":396,"depth":1184,"text":399},{"id":753,"depth":1184,"text":756,"children":1191},[1192,1194],{"id":804,"depth":1193,"text":807},3,{"id":889,"depth":1193,"text":892},{"id":908,"depth":1184,"text":911,"children":1196},[1197],{"id":914,"depth":1193,"text":917},{"id":983,"depth":1184,"text":983},{"id":1054,"depth":1184,"text":1057},{"id":1071,"depth":1184,"text":1071},{"id":1167,"depth":1184,"text":1167},"markdown","content:6.maps:_computer:network.md","content","6.maps/_computer/network.md","6.maps/_computer/network","md",[1209,1213],{"_path":1210,"title":1211,"description":1212},"/maps/_computer/encoding/hash-collision","哈希冲突","哈希冲突是指两个不同的键值被哈希函数映射到了同一个位置。",{"_path":1214,"title":1215,"description":166},"/maps/_computer/segments/http-request-example","Http Request Example",1755216245219]