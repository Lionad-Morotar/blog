[{"data":1,"prerenderedAt":1414},["Reactive",2],{"navigation":3,"/maps/_computer/network":389,"/maps/_computer/network-surround":1407},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":390,"_dir":391,"_draft":392,"_partial":393,"_locale":394,"title":395,"description":394,"body":396,"_type":1402,"_id":1403,"_source":1404,"_file":1405,"_extension":1406},"/maps/_computer/network","_computer",false,true,"","计算机网络",{"type":397,"children":398,"toc":1383},"root",[399,406,412,419,425,434,440,446,451,465,471,479,485,490,498,504,509,517,523,528,536,542,547,567,579,585,590,613,619,625,627,785,791,796,801,803,808,809,815,820,826,831,839,849,855,860,866,871,877,882,905,910,915,920,925,945,951,956,964,975,981,992,997,1020,1025,1032,1037,1043,1051,1065,1071,1078,1083,1088,1093,1099,1104,1111,1117,1122,1130,1136,1142,1153,1159,1164,1172,1178,1183,1194,1200,1205,1210,1216,1221,1227,1241,1252,1258,1264,1269,1274,1280,1285,1291,1296,1301,1307,1312,1318,1323,1329,1334,1354,1365,1370],{"type":400,"tag":401,"props":402,"children":403},"element","h1",{"id":395},[404],{"type":405,"value":395},"text",{"type":400,"tag":407,"props":408,"children":410},"h2",{"id":409},"网络模型",[411],{"type":405,"value":409},{"type":400,"tag":413,"props":414,"children":416},"h4",{"id":415},"各网络层有哪些代表性的协议",[417],{"type":405,"value":418},"各网络层有哪些代表性的协议？",{"type":400,"tag":420,"props":421,"children":422},"p",{},[423],{"type":405,"value":424},"应用层有 HTTP、DNS、FTP，表示层有 SSL、TSL、base64、MIDI、JPEG，会话层有 xxx，传输层则是 TCP、UDP，网络层有 IP，数据链路层 xxx，物理层有以太网协议。",{"type":400,"tag":420,"props":426,"children":427},{},[428],{"type":400,"tag":429,"props":430,"children":433},"img",{"alt":431,"src":432},"OSI 参考模型","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620033400.png?type=win11&w=60",[],{"type":400,"tag":407,"props":435,"children":437},{"id":436},"tcp",[438],{"type":405,"value":439},"TCP",{"type":400,"tag":413,"props":441,"children":443},{"id":442},"tcpip-是什么",[444],{"type":405,"value":445},"TCP/IP 是什么？",{"type":400,"tag":420,"props":447,"children":448},{},[449],{"type":405,"value":450},"TCP/IP 协议是一个协议集。TCP/IP 包括了应用层、传输层、网络层、数据链路层和网络层，是一个四层体系结构。各层有代表性的协议有 HTTP、DNS，TLS，IP 和 xxx。",{"type":400,"tag":420,"props":452,"children":453},{},[454,456],{"type":405,"value":455},"TODO，",{"type":400,"tag":457,"props":458,"children":462},"a",{"href":459,"rel":460},"https://developer.51cto.com/article/597961.html",[461],"nofollow",[463],{"type":405,"value":464},"终于有人能把 TCP/IP 协议讲的明明白白了！",{"type":400,"tag":413,"props":466,"children":468},{"id":467},"tcp-header-由哪些部分组成",[469],{"type":405,"value":470},"TCP Header 由哪些部分组成？",{"type":400,"tag":420,"props":472,"children":473},{},[474],{"type":400,"tag":429,"props":475,"children":478},{"alt":476,"src":477},"TCP Header","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731153510.png?type=win11&w=60",[],{"type":400,"tag":413,"props":480,"children":482},{"id":481},"三次握手具体过程",[483],{"type":405,"value":484},"三次握手具体过程？",{"type":400,"tag":420,"props":486,"children":487},{},[488],{"type":405,"value":489},"从三次握手图示可以发现，仅仅是连接的建立，就需要大量时间消耗。客户端想发送数据，至少要等 1.5xRTT；服务端想发送数据，至少要 2xRTT。",{"type":400,"tag":420,"props":491,"children":492},{},[493],{"type":400,"tag":429,"props":494,"children":497},{"alt":495,"src":496},"Three-way Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731162450.png?type=win11&w=40",[],{"type":400,"tag":413,"props":499,"children":501},{"id":500},"tcp-fast-open-如何优化握手过程",[502],{"type":405,"value":503},"TCP Fast Open 如何优化握手过程？",{"type":400,"tag":420,"props":505,"children":506},{},[507],{"type":405,"value":508},"TFO 规定服务器第一次返回 ACK 时，携带一个用以标志客户端身份的 Cookie。后续客户端发送 SYN 建立连接的时候带上这个 Cookie，服务端确认身份之后，就能直接返回数据了（节约了 1.5 RTT）。",{"type":400,"tag":420,"props":510,"children":511},{},[512],{"type":400,"tag":429,"props":513,"children":516},{"alt":514,"src":515},"TFO","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807054219.png?type=win11&w=80",[],{"type":400,"tag":413,"props":518,"children":520},{"id":519},"四次挥手的具体过程",[521],{"type":405,"value":522},"四次挥手的具体过程？",{"type":400,"tag":420,"props":524,"children":525},{},[526],{"type":405,"value":527},"四次挥手如下所示。为什么建立连接要三次，而断开连接要四次请求呢？从图中可以看出，接收到 FIN 请求时，服务端立即返回 ACK 表示收到请求，但是要等自己这边剩余一些工作（可能时未发送完的请求内容）完成之后，才会返回 FIN。",{"type":400,"tag":420,"props":529,"children":530},{},[531],{"type":400,"tag":429,"props":532,"children":535},{"alt":533,"src":534},"Four-way Wavehand","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731165331.png?type=win11&w=40",[],{"type":400,"tag":413,"props":537,"children":539},{"id":538},"tcp-链接中如果某端出故障了会怎么办",[540],{"type":405,"value":541},"TCP 链接中如果某端出故障了会怎么办？",{"type":400,"tag":420,"props":543,"children":544},{},[545],{"type":405,"value":546},"会通过计时器来保证链接的稳定性。",{"type":400,"tag":548,"props":549,"children":550},"ul",{},[551,557,562],{"type":400,"tag":552,"props":553,"children":554},"li",{},[555],{"type":405,"value":556},"超时重传计时器：对方没有返回 ACK 时，发送方需要重新发送数据。一般计时器的时间选择 2RTT。",{"type":400,"tag":552,"props":558,"children":559},{},[560],{"type":405,"value":561},"2MSL 定时器：主动断开连接的一方发送 FIN 后需要等待 2MSL 时间。因为如果服务端没有收到最后一个 ACK，它将重新发送 FIN。",{"type":400,"tag":552,"props":563,"children":564},{},[565],{"type":405,"value":566},"保活计时器：每当接收方收到消息，将计时器重设为两小时。计时器到期时，每 75s 发送一次探测报文段，如果连续 10 次都没有被响应则断开连接。",{"type":400,"tag":420,"props":568,"children":569},{},[570,572],{"type":405,"value":571},"见：",{"type":400,"tag":457,"props":573,"children":576},{"href":574,"rel":575},"https://www.cnblogs.com/13224ACMer/p/6616960.html",[461],[577],{"type":405,"value":578},"TCP 四种计时器",{"type":400,"tag":407,"props":580,"children":582},{"id":581},"udp",[583],{"type":405,"value":584},"UDP",{"type":400,"tag":420,"props":586,"children":587},{},[588],{"type":405,"value":589},"UDP，即 User Datagram Protocol 用户数据报协议。数据报不保证信息的传达是否到位，所以 UDP 也被普遍称作 Unreliable Datagram Protocol。",{"type":400,"tag":548,"props":591,"children":592},{},[593,598,603,608],{"type":400,"tag":552,"props":594,"children":595},{},[596],{"type":405,"value":597},"不保证消息交付",{"type":400,"tag":552,"props":599,"children":600},{},[601],{"type":405,"value":602},"不保证交付顺序",{"type":400,"tag":552,"props":604,"children":605},{},[606],{"type":405,"value":607},"不跟踪连接状态",{"type":400,"tag":552,"props":609,"children":610},{},[611],{"type":405,"value":612},"不需要拥塞控制",{"type":400,"tag":407,"props":614,"children":616},{"id":615},"http",[617],{"type":405,"value":618},"HTTP",{"type":400,"tag":413,"props":620,"children":622},{"id":621},"有哪些常见的状态码",[623],{"type":405,"value":624},"有哪些常见的状态码？",{"type":405,"value":626},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":628,"props":629,"children":630},"table",{},[631,650],{"type":400,"tag":632,"props":633,"children":634},"thead",{},[635],{"type":400,"tag":636,"props":637,"children":638},"tr",{},[639,645],{"type":400,"tag":640,"props":641,"children":642},"th",{},[643],{"type":405,"value":644},"状态码",{"type":400,"tag":640,"props":646,"children":647},{},[648],{"type":405,"value":649},"描述",{"type":400,"tag":651,"props":652,"children":653},"tbody",{},[654,668,681,694,707,720,733,746,759,772],{"type":400,"tag":636,"props":655,"children":656},{},[657,663],{"type":400,"tag":658,"props":659,"children":660},"td",{},[661],{"type":405,"value":662},"200",{"type":400,"tag":658,"props":664,"children":665},{},[666],{"type":405,"value":667},"成功并返回数据",{"type":400,"tag":636,"props":669,"children":670},{},[671,676],{"type":400,"tag":658,"props":672,"children":673},{},[674],{"type":405,"value":675},"301",{"type":400,"tag":658,"props":677,"children":678},{},[679],{"type":405,"value":680},"永久转移，重定向",{"type":400,"tag":636,"props":682,"children":683},{},[684,689],{"type":400,"tag":658,"props":685,"children":686},{},[687],{"type":405,"value":688},"302",{"type":400,"tag":658,"props":690,"children":691},{},[692],{"type":405,"value":693},"临时重定向",{"type":400,"tag":636,"props":695,"children":696},{},[697,702],{"type":400,"tag":658,"props":698,"children":699},{},[700],{"type":405,"value":701},"303",{"type":400,"tag":658,"props":703,"children":704},{},[705],{"type":405,"value":706},"临时重定向（客户端必须使用 Get 方法重新请求资源）",{"type":400,"tag":636,"props":708,"children":709},{},[710,715],{"type":400,"tag":658,"props":711,"children":712},{},[713],{"type":405,"value":714},"304",{"type":400,"tag":658,"props":716,"children":717},{},[718],{"type":405,"value":719},"资源未修改，可使用缓存",{"type":400,"tag":636,"props":721,"children":722},{},[723,728],{"type":400,"tag":658,"props":724,"children":725},{},[726],{"type":405,"value":727},"400",{"type":400,"tag":658,"props":729,"children":730},{},[731],{"type":405,"value":732},"请求语法错误",{"type":400,"tag":636,"props":734,"children":735},{},[736,741],{"type":400,"tag":658,"props":737,"children":738},{},[739],{"type":405,"value":740},"401",{"type":400,"tag":658,"props":742,"children":743},{},[744],{"type":405,"value":745},"要求身份认证",{"type":400,"tag":636,"props":747,"children":748},{},[749,754],{"type":400,"tag":658,"props":750,"children":751},{},[752],{"type":405,"value":753},"403",{"type":400,"tag":658,"props":755,"children":756},{},[757],{"type":405,"value":758},"请求拒绝",{"type":400,"tag":636,"props":760,"children":761},{},[762,767],{"type":400,"tag":658,"props":763,"children":764},{},[765],{"type":405,"value":766},"404",{"type":400,"tag":658,"props":768,"children":769},{},[770],{"type":405,"value":771},"资源不存在",{"type":400,"tag":636,"props":773,"children":774},{},[775,780],{"type":400,"tag":658,"props":776,"children":777},{},[778],{"type":405,"value":779},"500",{"type":400,"tag":658,"props":781,"children":782},{},[783],{"type":405,"value":784},"服务器错误",{"type":400,"tag":413,"props":786,"children":788},{"id":787},"http-报文由哪些部分组成",[789],{"type":405,"value":790},"HTTP 报文由哪些部分组成？",{"type":400,"tag":420,"props":792,"children":793},{},[794],{"type":405,"value":795},"请求报文由请求行、请求头、空行和请求数据组成，相应报文类似。",{"type":400,"tag":420,"props":797,"children":798},{},[799],{"type":405,"value":800},"请求报文实例：",{"type":405,"value":802},"\n\n",{"type":400,"tag":420,"props":804,"children":805},{},[806],{"type":405,"value":807},"相应报文实例：",{"type":405,"value":802},{"type":400,"tag":413,"props":810,"children":812},{"id":811},"http-11-对比-http-10-做了哪些改进",[813],{"type":405,"value":814},"HTTP 1.1 对比 HTTP 1.0 做了哪些改进？",{"type":400,"tag":420,"props":816,"children":817},{},[818],{"type":405,"value":819},"长链接（keep-alive）、断点续传、HTTP 缓存。",{"type":400,"tag":413,"props":821,"children":823},{"id":822},"http-缓存分几种",[824],{"type":405,"value":825},"HTTP 缓存分几种？",{"type":400,"tag":420,"props":827,"children":828},{},[829],{"type":405,"value":830},"分强缓存和协商缓存：Expires、Cache-Control、Last-Modified、Etag。",{"type":400,"tag":420,"props":832,"children":833},{},[834],{"type":400,"tag":429,"props":835,"children":838},{"alt":836,"src":837},"HTTP Cache","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220630205606.png?type=win11&w=60",[],{"type":400,"tag":420,"props":840,"children":841},{},[842,843],{"type":405,"value":455},{"type":400,"tag":457,"props":844,"children":847},{"href":845,"rel":846},"https://imweb.io/topic/55c6f9bac222e3af6ce235b9",[461],[848],{"type":405,"value":845},{"type":400,"tag":413,"props":850,"children":852},{"id":851},"强缓存和协商缓存的主要区别是",[853],{"type":405,"value":854},"强缓存和协商缓存的主要区别是？",{"type":400,"tag":420,"props":856,"children":857},{},[858],{"type":405,"value":859},"强缓存是一但匹配就无条件使用缓存，而面对协商缓存的资源，浏览器需要向服务端发请求，对比资源是否变更，并依靠服务端的响应来判断是否使用缓存。如果资源同时应用了强缓存和协商缓存，那么浏览器优先使用强缓存。",{"type":400,"tag":413,"props":861,"children":863},{"id":862},"no-store-和-no-cache-的区别",[864],{"type":405,"value":865},"no-store 和 no-cache 的区别？",{"type":400,"tag":420,"props":867,"children":868},{},[869],{"type":405,"value":870},"no-store 告诉客户端每次都在服务器取最新的资源。no-cache 也要求每次都要重新请求，但服务器可能返回 304 告诉客户端资源未改变。",{"type":400,"tag":413,"props":872,"children":874},{"id":873},"http2-的改进在哪里",[875],{"type":405,"value":876},"HTTP2 的改进在哪里？",{"type":400,"tag":420,"props":878,"children":879},{},[880],{"type":405,"value":881},"HTTP/2 主要包含以下几个方面的变化，显著增强了性能，也增加了安全性。",{"type":400,"tag":548,"props":883,"children":884},{},[885,890,895,900],{"type":400,"tag":552,"props":886,"children":887},{},[888],{"type":405,"value":889},"二进制分帧层",{"type":400,"tag":552,"props":891,"children":892},{},[893],{"type":405,"value":894},"头部压缩（HPACK、Huffman）",{"type":400,"tag":552,"props":896,"children":897},{},[898],{"type":405,"value":899},"多路复用",{"type":400,"tag":552,"props":901,"children":902},{},[903],{"type":405,"value":904},"服务端推送",{"type":400,"tag":420,"props":906,"children":907},{},[908],{"type":405,"value":909},"二进制分帧层是在应用层（HTTP）和传输层（TCP、UDP）之间新增的一个层级关系。二进制分帧层将传输的 HTTP 消息分割为更小的帧，并采用二进制格式编码传输。帧分为头部帧和消息帧。这意味着 HTTP/2 请求的所有内容都是二进制传输的。",{"type":400,"tag":420,"props":911,"children":912},{},[913],{"type":405,"value":914},"HTTP 头部被转为帧之前，会通过维护一个表结构，通过序号记录已发送的键值对。这是一种索引算法，叫 HPACK。具体的表结构分静态表和动态表，静态表给一些常用的头部标号了号，直接使用就好，动态表则是根据发送的内容动态确定的记号。需要被发送具体内容会被哈夫曼编码以减小体积。",{"type":400,"tag":420,"props":916,"children":917},{},[918],{"type":405,"value":919},"多路复用是指，多个 HTTP 请求可以在同一个 TCP 连接中并行传输。这和 HTTP 1.1 的 Connection：keep-alive 不同，keep-alive 虽然复用 TCP 连接，但是多个响应之间是串行的。",{"type":400,"tag":420,"props":921,"children":922},{},[923],{"type":405,"value":924},"建立连接后，双方通过交换 SETTING 帧，以确认双向的流量窗口控制大小。然后开始发送帧。帧可以在一个连接中根据优先级发送，或是被乱序发送，响应方也能乱序接收。由于流是双向的，只要服务端 SETTING 帧设置的流量窗口大小不为 0，服务端可按照同源策略推送资源给客户端。",{"type":400,"tag":420,"props":926,"children":927},{},[928,929,936,938],{"type":405,"value":571},{"type":400,"tag":457,"props":930,"children":933},{"href":931,"rel":932},"https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.5.3",[461],[934],{"type":405,"value":935},"HTTP/2 和 HTTP/1.X 相比的新特性",{"type":405,"value":937},"、",{"type":400,"tag":457,"props":939,"children":942},{"href":940,"rel":941},"https://blog.csdn.net/gaoliang1719/article/details/106346201/",[461],[943],{"type":405,"value":944},"HTTP/2 协议之头部压缩",{"type":400,"tag":413,"props":946,"children":948},{"id":947},"http3-相比-http2-改变了什么东西",[949],{"type":405,"value":950},"HTTP3 相比 HTTP2 改变了什么东西？",{"type":400,"tag":420,"props":952,"children":953},{},[954],{"type":405,"value":955},"HTTP3 使用全新的传输层协议 QUIC，实现了 H2 中的流式传输（HTTP2）、多路复用（TCP）、流量控制（TCP）以及可靠性（TCP）等内容，其网络层协议应用的是 UDP 而不是 TCP，本意是用来解决 TCP 建立链接需要  1.5 RTT 延迟的问题。这种改善在移动端更加有效。",{"type":400,"tag":420,"props":957,"children":958},{},[959],{"type":400,"tag":429,"props":960,"children":963},{"alt":961,"src":962},"HTTP3 VS HTTP2 VS HTTP1.1","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220621003527.png?type=draw&w=80",[],{"type":400,"tag":420,"props":965,"children":966},{},[967,968],{"type":405,"value":571},{"type":400,"tag":457,"props":969,"children":972},{"href":970,"rel":971},"https://mp.weixin.qq.com/s/40YBEWZBaHakDuRuh27fMg",[461],[973],{"type":405,"value":974},"HTTP3 发布了！",{"type":400,"tag":407,"props":976,"children":978},{"id":977},"tls",[979],{"type":405,"value":980},"TLS",{"type":400,"tag":420,"props":982,"children":983},{},[984,985],{"type":405,"value":455},{"type":400,"tag":457,"props":986,"children":989},{"href":987,"rel":988},"https://www.oschina.net/translate/rfc-8446-aka-tls-1-3",[461],[990],{"type":405,"value":991},"详细介绍 RFC 8446（即 TLS 1.3）",{"type":400,"tag":420,"props":993,"children":994},{},[995],{"type":405,"value":996},"TLS 是一种混合式加密系统，同时使用对称加密和非对称加密。它使用非对称加密以加密对称加密所需的密钥。它有多个版本。TLS 1.3 是一种比起 TLS1.2 而言更清晰、更快速、更安全的现代化安全协议。TLS 1.2 有两点问题：1. 包括 POODLE 在内的众多可行漏洞；2. 性能低。为了改善这些问题，IETF 在 2013 年，着手 TLS 1.3 的讨论，主要改进：",{"type":400,"tag":548,"props":998,"children":999},{},[1000,1005,1010,1015],{"type":400,"tag":552,"props":1001,"children":1002},{},[1003],{"type":405,"value":1004},"减少握手时间",{"type":400,"tag":552,"props":1006,"children":1007},{},[1008],{"type":405,"value":1009},"加密更多的握手",{"type":400,"tag":552,"props":1011,"children":1012},{},[1013],{"type":405,"value":1014},"改善跨协议攻击的弹性",{"type":400,"tag":552,"props":1016,"children":1017},{},[1018],{"type":405,"value":1019},"删除遗留特征",{"type":400,"tag":420,"props":1021,"children":1022},{},[1023],{"type":405,"value":1024},"经过 4 年的争论。最终，形成了 RFC 8446 规范。",{"type":400,"tag":1026,"props":1027,"children":1029},"h3",{"id":1028},"tls-12-的缺陷",[1030],{"type":405,"value":1031},"TLS 1.2 的缺陷",{"type":400,"tag":420,"props":1033,"children":1034},{},[1035],{"type":405,"value":1036},"TLS 1.2 使用的加密方式有缺陷。其中，非对称加密有如 RSA 和 Diffie-Hellman 协议。",{"type":400,"tag":413,"props":1038,"children":1040},{"id":1039},"rsa",[1041],{"type":405,"value":1042},"RSA",{"type":400,"tag":420,"props":1044,"children":1045},{},[1046],{"type":400,"tag":429,"props":1047,"children":1050},{"alt":1048,"src":1049},"RSA Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082140.png?w=70",[],{"type":400,"tag":420,"props":1052,"children":1053},{},[1054,1056,1063],{"type":405,"value":1055},"RSA 不保证前向保密。即，如果有人记录了加密对话，然后获取服务器的 RSA 私钥，他们可以将对话解密。而攻击者可能只需 ",{"type":400,"tag":457,"props":1057,"children":1060},{"href":1058,"rel":1059},"https://www.wikiwand.com/zh/%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E",[461],[1061],{"type":405,"value":1062},"HeartBleed 漏洞",{"type":405,"value":1064},"（缓存区过读）就可以顺利窃取私钥。",{"type":400,"tag":413,"props":1066,"children":1068},{"id":1067},"diffie-hellman",[1069],{"type":405,"value":1070},"Diffie-Hellman",{"type":400,"tag":420,"props":1072,"children":1073},{},[1074],{"type":400,"tag":429,"props":1075,"children":1077},{"alt":1070,"src":1076},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082812.png?w=70",[],{"type":400,"tag":420,"props":1079,"children":1080},{},[1081],{"type":405,"value":1082},"Diffie-Hellman 的缺陷在于，协议的某些参数不安全，且能够被操纵设置；不安全的参数能导致加密更容易被破解。",{"type":400,"tag":413,"props":1084,"children":1086},{"id":1085},"对称加密缺陷",[1087],{"type":405,"value":1085},{"type":400,"tag":420,"props":1089,"children":1090},{},[1091],{"type":405,"value":1092},"TLS 1.2 的对称加密使用的 CBC 模式密码和流式密码也有缺陷。",{"type":400,"tag":413,"props":1094,"children":1096},{"id":1095},"downgrade-attack",[1097],{"type":405,"value":1098},"Downgrade Attack",{"type":400,"tag":420,"props":1100,"children":1101},{},[1102],{"type":405,"value":1103},"由于 TLS 1.2 握手协商密钥的部分没有加密。所以中间人可以拦截客户端的请求，选择发送方和接收方都支持的弱密码，伪造请求。",{"type":400,"tag":420,"props":1105,"children":1106},{},[1107],{"type":400,"tag":429,"props":1108,"children":1110},{"alt":1098,"src":1109},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807090034.png?w=70",[],{"type":400,"tag":1026,"props":1112,"children":1114},{"id":1113},"_0-rtt",[1115],{"type":405,"value":1116},"0-RTT",{"type":400,"tag":420,"props":1118,"children":1119},{},[1120],{"type":405,"value":1121},"TLS 1.3 中，通讯双方可以得到一个“恢复主密钥”的密钥，用于从中断的连接中直接恢复通讯。但是有被拦截导致重放攻击的风险。",{"type":400,"tag":420,"props":1123,"children":1124},{},[1125],{"type":400,"tag":429,"props":1126,"children":1129},{"alt":1127,"src":1128},"0-RTT 重放攻击","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807081140.png?w=70",[],{"type":400,"tag":407,"props":1131,"children":1133},{"id":1132},"https",[1134],{"type":405,"value":1135},"HTTPS",{"type":400,"tag":1026,"props":1137,"children":1139},{"id":1138},"links",[1140],{"type":405,"value":1141},"Links",{"type":400,"tag":420,"props":1143,"children":1144},{},[1145,1146],{"type":405,"value":455},{"type":400,"tag":457,"props":1147,"children":1150},{"href":1148,"rel":1149},"https://zhuanlan.zhihu.com/p/26682342",[461],[1151],{"type":405,"value":1152},"深入理解 HTTPS 原理、过程与实践",{"type":400,"tag":413,"props":1154,"children":1156},{"id":1155},"https-的握手过程是怎样的",[1157],{"type":405,"value":1158},"HTTPS 的握手过程是怎样的？",{"type":400,"tag":420,"props":1160,"children":1161},{},[1162],{"type":405,"value":1163},"总的来说是一个非对称加密+对称加密的过程。客户端通过一个随机数加上服务器的公钥来生成预主密钥，然后双方再通过 Client Hello 和 Server Hello 时的两个随机数生成会话密钥。生成预主密钥的过程是非对称加密的，因为只有服务端用私钥才能解得客户端的随机数。而之后使用会话密钥主要是出于性能考虑。",{"type":400,"tag":420,"props":1165,"children":1166},{},[1167],{"type":400,"tag":429,"props":1168,"children":1171},{"alt":1169,"src":1170},"HTTPS 握手过程","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620024738.png",[],{"type":400,"tag":413,"props":1173,"children":1175},{"id":1174},"ca-怎么解决中间人问题",[1176],{"type":405,"value":1177},"CA 怎么解决中间人问题？",{"type":400,"tag":420,"props":1179,"children":1180},{},[1181],{"type":405,"value":1182},"CA 主要是用来防范服务器端返回 Server Hello 前就和客户端提供了假的公钥。CA 是一个可信的第三方机构，客户端想要服务器的公钥，需要从 CA 获得。CA 返回公钥以及数字签名。客户端只要拿到公钥后根据 CA 公钥对其计算获得摘要，再将摘要和签名进行对比，就能知道是否拿到了可信的公钥。",{"type":400,"tag":420,"props":1184,"children":1185},{},[1186,1187],{"type":405,"value":571},{"type":400,"tag":457,"props":1188,"children":1191},{"href":1189,"rel":1190},"https://www.jianshu.com/p/9de06222793b",[461],[1192],{"type":405,"value":1193},"HTTPS CA 原理",{"type":400,"tag":413,"props":1195,"children":1197},{"id":1196},"数字签名是什么",[1198],{"type":405,"value":1199},"数字签名是什么？",{"type":400,"tag":420,"props":1201,"children":1202},{},[1203],{"type":405,"value":1204},"数字签名是只有信息发送者才能产生的一段文本，信息接收方可以通过签名计算出接受到的文本是否经过了修改。如果我要发送 A，我会用私钥将 A 进行加密获得 B，并把 A 和 B 同时发送过去。B 就是数字签名。因为我的公钥是公开的，所以接受方可以通过使用我的公钥去计算 A，如果获得和 B 一致的结果，那么说明信息没有被篡改。",{"type":400,"tag":407,"props":1206,"children":1208},{"id":1207},"攻防",[1209],{"type":405,"value":1207},{"type":400,"tag":413,"props":1211,"children":1213},{"id":1212},"https-降级攻击的原理是什么",[1214],{"type":405,"value":1215},"HTTPS 降级攻击的原理是什么？",{"type":400,"tag":420,"props":1217,"children":1218},{},[1219],{"type":405,"value":1220},"客服端与服务端协商加密协议的过程当中，如果攻击者拦截了客户端（或操控客户端）并代替它向服务端协商使用仅支持有漏洞的协议。如果服务端同意了，那么建立连接后，攻击者就能使用该协议的已知漏洞的破解手段，去破解通讯内容了。",{"type":400,"tag":413,"props":1222,"children":1224},{"id":1223},"syn-攻击的基本原理是什么",[1225],{"type":405,"value":1226},"SYN 攻击的基本原理是什么？",{"type":400,"tag":420,"props":1228,"children":1229},{},[1230,1232,1239],{"type":405,"value":1231},"SYN 洪水攻击是 DDOS 攻击中最常见的攻击类型。攻击者向服务器发送大量伪造的 TCP 连接请求，而源 IP 是伪造的。由于服务器收不到伪造源回应的 ACK 数据包，就会不断重发。一般应对方式是：减少重发次数、使用 ",{"type":400,"tag":457,"props":1233,"children":1236},{"href":1234,"rel":1235},"https://baike.baidu.com/item/syn%20cookie/6898884?fr=aladdin",[461],[1237],{"type":405,"value":1238},"SYN Cookie",{"type":405,"value":1240},"、增加 backlog 队列长度、限制 SYN 并发数。",{"type":400,"tag":420,"props":1242,"children":1243},{},[1244,1245],{"type":405,"value":571},{"type":400,"tag":457,"props":1246,"children":1249},{"href":1247,"rel":1248},"https://www.qycn.com/about/hd/2049.html",[461],[1250],{"type":405,"value":1251},"服务器遭到 SYN 攻击该如何处理呢？",{"type":400,"tag":407,"props":1253,"children":1255},{"id":1254},"cdn",[1256],{"type":405,"value":1257},"CDN",{"type":400,"tag":413,"props":1259,"children":1261},{"id":1260},"cdn-有什么好处",[1262],{"type":405,"value":1263},"CDN 有什么好处？",{"type":400,"tag":420,"props":1265,"children":1266},{},[1267],{"type":405,"value":1268},"对页面加载而言，CDN 可以减少请求时间、突破浏览器同域的 TCP 并发数、节约 Cookie 带宽。",{"type":400,"tag":407,"props":1270,"children":1272},{"id":1271},"浏览器",[1273],{"type":405,"value":1271},{"type":400,"tag":413,"props":1275,"children":1277},{"id":1276},"url-由哪些部分组成",[1278],{"type":405,"value":1279},"URL 由哪些部分组成？",{"type":400,"tag":420,"props":1281,"children":1282},{},[1283],{"type":405,"value":1284},"协议头、域名、端口、目录、文件名（index.html）、页面锚、参数。",{"type":400,"tag":413,"props":1286,"children":1288},{"id":1287},"怎么做跨域",[1289],{"type":405,"value":1290},"怎么做跨域？",{"type":400,"tag":420,"props":1292,"children":1293},{},[1294],{"type":405,"value":1295},"用代理服务器、CORS、iFrame 或者 WebSocket 都可以。",{"type":400,"tag":420,"props":1297,"children":1298},{},[1299],{"type":405,"value":1300},"服务器可以忽略同源限制；WebSocket 和 CORS 不受同源影响；iFrame 需要浏览器加载一个跨域页面，然后和主页面用 postMessage 或者哈希监听的方式通信，让 iFrame 中的脚本代替主页面发送请求。",{"type":400,"tag":413,"props":1302,"children":1304},{"id":1303},"正向代理和反向代理的区别是",[1305],{"type":405,"value":1306},"正向代理和反向代理的区别是？",{"type":400,"tag":420,"props":1308,"children":1309},{},[1310],{"type":405,"value":1311},"正向代理为用户服务，反向代理为服务器服务，分别对应“VPN”和“负载均衡”的概念。",{"type":400,"tag":413,"props":1313,"children":1315},{"id":1314},"cors-运作流程是怎样的",[1316],{"type":405,"value":1317},"CORS 运作流程是怎样的？",{"type":400,"tag":420,"props":1319,"children":1320},{},[1321],{"type":405,"value":1322},"CORS 即跨域资源共享机制。浏览器在请求资源前通过携带 Origin 字段的 OPTIONS 请求向服务器索取设置有 Access-Control-Allow-Methods、Access-Control-Allow-Headers、Access-Control-Allow-Origin 的响应。在得到响应的允许后再继续发送请求。",{"type":400,"tag":413,"props":1324,"children":1326},{"id":1325},"什么是私有网络请求攻击",[1327],{"type":405,"value":1328},"什么是私有网络请求攻击？",{"type":400,"tag":420,"props":1330,"children":1331},{},[1332],{"type":405,"value":1333},"在内网域名向 localhost 发起请求就算一种私有网络请求。而恶意代码通过向比浏览器当前浏览页面的域名 IP 更私密的 IP 地址发起请求，以达到获取信息或攻击手段的方式就是私有网络请求攻击。",{"type":400,"tag":420,"props":1335,"children":1336},{},[1337,1339,1346,1348],{"type":405,"value":1338},"自 Chrome 96 后， Chrome 开始实施私有网络控制策略，需要部署以下两个请求头以解除控制：",{"type":400,"tag":1340,"props":1341,"children":1343},"code",{"className":1342},[],[1344],{"type":405,"value":1345},"Access-Control-Request-Private-Network: true",{"type":405,"value":1347}," 和 ",{"type":400,"tag":1340,"props":1349,"children":1351},{"className":1350},[],[1352],{"type":405,"value":1353},"Access-Control-Allow-Private-Network: true",{"type":400,"tag":420,"props":1355,"children":1356},{},[1357,1358],{"type":405,"value":571},{"type":400,"tag":457,"props":1359,"children":1362},{"href":1360,"rel":1361},"https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&mid=2247491913&idx=1&sn=2bb0a28358c02a8ec1832781205df72c&chksm=c2e11462f5969d74fac277131e1ba8c417ec86754b2f1b2dbe8e238ca27d5c2eaebe602ec803&token=1851580176&lang=zh_CN&scene=21#wechat_redirect",[461],[1363],{"type":405,"value":1364},"Chrome 重大更新，CORS 增加了两个新的请求头？ |  code 秘密花园",{"type":400,"tag":407,"props":1366,"children":1368},{"id":1367},"阅读更多",[1369],{"type":405,"value":1367},{"type":400,"tag":548,"props":1371,"children":1372},{},[1373],{"type":400,"tag":552,"props":1374,"children":1375},{},[1376],{"type":400,"tag":457,"props":1377,"children":1380},{"href":1378,"rel":1379},"https://juejin.im/post/6844903518826921998",[461],[1381],{"type":405,"value":1382},"为你的网站带上帽子 | 使用 helmet 保护 Express 应用",{"title":394,"searchDepth":1384,"depth":1384,"links":1385},2,[1386,1387,1388,1389,1390,1395,1398,1399,1400,1401],{"id":409,"depth":1384,"text":409},{"id":436,"depth":1384,"text":439},{"id":581,"depth":1384,"text":584},{"id":615,"depth":1384,"text":618},{"id":977,"depth":1384,"text":980,"children":1391},[1392,1394],{"id":1028,"depth":1393,"text":1031},3,{"id":1113,"depth":1393,"text":1116},{"id":1132,"depth":1384,"text":1135,"children":1396},[1397],{"id":1138,"depth":1393,"text":1141},{"id":1207,"depth":1384,"text":1207},{"id":1254,"depth":1384,"text":1257},{"id":1271,"depth":1384,"text":1271},{"id":1367,"depth":1384,"text":1367},"markdown","content:6.maps:_computer:network.md","content","6.maps/_computer/network.md","md",[1408,1411],{"_path":1409,"title":1410,"description":394},"/maps/_computer/computer","Computer Mind Map",{"_path":1412,"title":1413,"description":394},"/maps/_computer/security","Security Mind Map",1711862604123]