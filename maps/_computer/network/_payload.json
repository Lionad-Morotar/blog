[{"data":1,"prerenderedAt":1198},["ShallowReactive",2],{"navigation":3,"/maps/_computer/network":155,"/maps/_computer/network-surround":1189},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":1183,"_id":1184,"_source":1185,"_file":1186,"_stem":1187,"_extension":1188},"/maps/_computer/network","_computer",false,true,"","计算机网络","计算机网络基础知识全览，包含 TCP/IP、HTTP、HTTPS、TLS 等协议的详细解析，以及网络安全、CDN、跨域等实践内容。",{"type":164,"children":165,"toc":1164},"root",[166,174,181,187,196,202,208,213,227,233,241,247,252,260,266,271,279,285,290,298,304,309,329,341,347,352,375,381,387,545,551,556,561,566,572,577,583,588,596,606,612,617,623,628,634,639,662,667,672,677,682,702,708,713,721,732,738,749,754,777,782,789,794,800,808,822,828,835,840,845,850,856,861,868,874,879,887,893,899,910,916,921,929,935,940,951,957,962,967,973,978,984,998,1009,1015,1020,1033,1039,1045,1050,1055,1061,1066,1072,1077,1082,1088,1093,1099,1104,1110,1115,1135,1146,1151],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"网络模型",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":178},"h4",{"id":177},"各网络层有哪些代表性的协议",[179],{"type":173,"value":180},"各网络层有哪些代表性的协议？",{"type":167,"tag":182,"props":183,"children":184},"p",{},[185],{"type":173,"value":186},"应用层有 HTTP、DNS、FTP，表示层有 SSL、TSL、base64、MIDI、JPEG，会话层有 xxx，传输层则是 TCP、UDP，网络层有 IP，数据链路层 xxx，物理层有以太网协议。",{"type":167,"tag":182,"props":188,"children":189},{},[190],{"type":167,"tag":191,"props":192,"children":195},"img",{"alt":193,"src":194},"OSI 参考模型","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620033400.png?type=win11&w=60",[],{"type":167,"tag":168,"props":197,"children":199},{"id":198},"tcp",[200],{"type":173,"value":201},"TCP",{"type":167,"tag":175,"props":203,"children":205},{"id":204},"tcpip-是什么",[206],{"type":173,"value":207},"TCP/IP 是什么？",{"type":167,"tag":182,"props":209,"children":210},{},[211],{"type":173,"value":212},"TCP/IP 协议是一个协议集。TCP/IP 包括了应用层、传输层、网络层、数据链路层和网络层，是一个四层体系结构。各层有代表性的协议有 HTTP、DNS，TLS，IP 和 xxx。",{"type":167,"tag":182,"props":214,"children":215},{},[216,218],{"type":173,"value":217},"TODO，",{"type":167,"tag":219,"props":220,"children":224},"a",{"href":221,"rel":222},"https://developer.51cto.com/article/597961.html",[223],"nofollow",[225],{"type":173,"value":226},"终于有人能把 TCP/IP 协议讲的明明白白了！",{"type":167,"tag":175,"props":228,"children":230},{"id":229},"tcp-header-由哪些部分组成",[231],{"type":173,"value":232},"TCP Header 由哪些部分组成？",{"type":167,"tag":182,"props":234,"children":235},{},[236],{"type":167,"tag":191,"props":237,"children":240},{"alt":238,"src":239},"TCP Header","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731153510.png?type=win11&w=60",[],{"type":167,"tag":175,"props":242,"children":244},{"id":243},"三次握手具体过程",[245],{"type":173,"value":246},"三次握手具体过程？",{"type":167,"tag":182,"props":248,"children":249},{},[250],{"type":173,"value":251},"从三次握手图示可以发现，仅仅是连接的建立，就需要大量时间消耗。客户端想发送数据，至少要等 1.5xRTT；服务端想发送数据，至少要 2xRTT。",{"type":167,"tag":182,"props":253,"children":254},{},[255],{"type":167,"tag":191,"props":256,"children":259},{"alt":257,"src":258},"Three-way Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731162450.png?type=win11&w=40",[],{"type":167,"tag":175,"props":261,"children":263},{"id":262},"tcp-fast-open-如何优化握手过程",[264],{"type":173,"value":265},"TCP Fast Open 如何优化握手过程？",{"type":167,"tag":182,"props":267,"children":268},{},[269],{"type":173,"value":270},"TFO 规定服务器第一次返回 ACK 时，携带一个用以标志客户端身份的 Cookie。后续客户端发送 SYN 建立连接的时候带上这个 Cookie，服务端确认身份之后，就能直接返回数据了（节约了 1.5 RTT）。",{"type":167,"tag":182,"props":272,"children":273},{},[274],{"type":167,"tag":191,"props":275,"children":278},{"alt":276,"src":277},"TFO","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807054219.png?type=win11&w=80",[],{"type":167,"tag":175,"props":280,"children":282},{"id":281},"四次挥手的具体过程",[283],{"type":173,"value":284},"四次挥手的具体过程？",{"type":167,"tag":182,"props":286,"children":287},{},[288],{"type":173,"value":289},"四次挥手如下所示。为什么建立连接要三次，而断开连接要四次请求呢？从图中可以看出，接收到 FIN 请求时，服务端立即返回 ACK 表示收到请求，但是要等自己这边剩余一些工作（可能时未发送完的请求内容）完成之后，才会返回 FIN。",{"type":167,"tag":182,"props":291,"children":292},{},[293],{"type":167,"tag":191,"props":294,"children":297},{"alt":295,"src":296},"Four-way Wavehand","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731165331.png?type=win11&w=40",[],{"type":167,"tag":175,"props":299,"children":301},{"id":300},"tcp-链接中如果某端出故障了会怎么办",[302],{"type":173,"value":303},"TCP 链接中如果某端出故障了会怎么办？",{"type":167,"tag":182,"props":305,"children":306},{},[307],{"type":173,"value":308},"会通过计时器来保证链接的稳定性。",{"type":167,"tag":310,"props":311,"children":312},"ul",{},[313,319,324],{"type":167,"tag":314,"props":315,"children":316},"li",{},[317],{"type":173,"value":318},"超时重传计时器：对方没有返回 ACK 时，发送方需要重新发送数据。一般计时器的时间选择 2RTT。",{"type":167,"tag":314,"props":320,"children":321},{},[322],{"type":173,"value":323},"2MSL 定时器：主动断开连接的一方发送 FIN 后需要等待 2MSL 时间。因为如果服务端没有收到最后一个 ACK，它将重新发送 FIN。",{"type":167,"tag":314,"props":325,"children":326},{},[327],{"type":173,"value":328},"保活计时器：每当接收方收到消息，将计时器重设为两小时。计时器到期时，每 75s 发送一次探测报文段，如果连续 10 次都没有被响应则断开连接。",{"type":167,"tag":182,"props":330,"children":331},{},[332,334],{"type":173,"value":333},"见：",{"type":167,"tag":219,"props":335,"children":338},{"href":336,"rel":337},"https://www.cnblogs.com/13224ACMer/p/6616960.html",[223],[339],{"type":173,"value":340},"TCP 四种计时器",{"type":167,"tag":168,"props":342,"children":344},{"id":343},"udp",[345],{"type":173,"value":346},"UDP",{"type":167,"tag":182,"props":348,"children":349},{},[350],{"type":173,"value":351},"UDP，即 User Datagram Protocol 用户数据报协议。数据报不保证信息的传达是否到位，所以 UDP 也被普遍称作 Unreliable Datagram Protocol。",{"type":167,"tag":310,"props":353,"children":354},{},[355,360,365,370],{"type":167,"tag":314,"props":356,"children":357},{},[358],{"type":173,"value":359},"不保证消息交付",{"type":167,"tag":314,"props":361,"children":362},{},[363],{"type":173,"value":364},"不保证交付顺序",{"type":167,"tag":314,"props":366,"children":367},{},[368],{"type":173,"value":369},"不跟踪连接状态",{"type":167,"tag":314,"props":371,"children":372},{},[373],{"type":173,"value":374},"不需要拥塞控制",{"type":167,"tag":168,"props":376,"children":378},{"id":377},"http",[379],{"type":173,"value":380},"HTTP",{"type":167,"tag":175,"props":382,"children":384},{"id":383},"有哪些常见的状态码",[385],{"type":173,"value":386},"有哪些常见的状态码？",{"type":167,"tag":388,"props":389,"children":390},"table",{},[391,410],{"type":167,"tag":392,"props":393,"children":394},"thead",{},[395],{"type":167,"tag":396,"props":397,"children":398},"tr",{},[399,405],{"type":167,"tag":400,"props":401,"children":402},"th",{},[403],{"type":173,"value":404},"状态码",{"type":167,"tag":400,"props":406,"children":407},{},[408],{"type":173,"value":409},"描述",{"type":167,"tag":411,"props":412,"children":413},"tbody",{},[414,428,441,454,467,480,493,506,519,532],{"type":167,"tag":396,"props":415,"children":416},{},[417,423],{"type":167,"tag":418,"props":419,"children":420},"td",{},[421],{"type":173,"value":422},"200",{"type":167,"tag":418,"props":424,"children":425},{},[426],{"type":173,"value":427},"成功并返回数据",{"type":167,"tag":396,"props":429,"children":430},{},[431,436],{"type":167,"tag":418,"props":432,"children":433},{},[434],{"type":173,"value":435},"301",{"type":167,"tag":418,"props":437,"children":438},{},[439],{"type":173,"value":440},"永久转移，重定向",{"type":167,"tag":396,"props":442,"children":443},{},[444,449],{"type":167,"tag":418,"props":445,"children":446},{},[447],{"type":173,"value":448},"302",{"type":167,"tag":418,"props":450,"children":451},{},[452],{"type":173,"value":453},"临时重定向",{"type":167,"tag":396,"props":455,"children":456},{},[457,462],{"type":167,"tag":418,"props":458,"children":459},{},[460],{"type":173,"value":461},"303",{"type":167,"tag":418,"props":463,"children":464},{},[465],{"type":173,"value":466},"临时重定向（客户端必须使用 Get 方法重新请求资源）",{"type":167,"tag":396,"props":468,"children":469},{},[470,475],{"type":167,"tag":418,"props":471,"children":472},{},[473],{"type":173,"value":474},"304",{"type":167,"tag":418,"props":476,"children":477},{},[478],{"type":173,"value":479},"资源未修改，可使用缓存",{"type":167,"tag":396,"props":481,"children":482},{},[483,488],{"type":167,"tag":418,"props":484,"children":485},{},[486],{"type":173,"value":487},"400",{"type":167,"tag":418,"props":489,"children":490},{},[491],{"type":173,"value":492},"请求语法错误",{"type":167,"tag":396,"props":494,"children":495},{},[496,501],{"type":167,"tag":418,"props":497,"children":498},{},[499],{"type":173,"value":500},"401",{"type":167,"tag":418,"props":502,"children":503},{},[504],{"type":173,"value":505},"要求身份认证",{"type":167,"tag":396,"props":507,"children":508},{},[509,514],{"type":167,"tag":418,"props":510,"children":511},{},[512],{"type":173,"value":513},"403",{"type":167,"tag":418,"props":515,"children":516},{},[517],{"type":173,"value":518},"请求拒绝",{"type":167,"tag":396,"props":520,"children":521},{},[522,527],{"type":167,"tag":418,"props":523,"children":524},{},[525],{"type":173,"value":526},"404",{"type":167,"tag":418,"props":528,"children":529},{},[530],{"type":173,"value":531},"资源不存在",{"type":167,"tag":396,"props":533,"children":534},{},[535,540],{"type":167,"tag":418,"props":536,"children":537},{},[538],{"type":173,"value":539},"500",{"type":167,"tag":418,"props":541,"children":542},{},[543],{"type":173,"value":544},"服务器错误",{"type":167,"tag":175,"props":546,"children":548},{"id":547},"http-报文由哪些部分组成",[549],{"type":173,"value":550},"HTTP 报文由哪些部分组成？",{"type":167,"tag":182,"props":552,"children":553},{},[554],{"type":173,"value":555},"请求报文由请求行、请求头、空行和请求数据组成，相应报文类似。",{"type":167,"tag":182,"props":557,"children":558},{},[559],{"type":173,"value":560},"请求报文实例：",{"type":167,"tag":182,"props":562,"children":563},{},[564],{"type":173,"value":565},"相应报文实例：",{"type":167,"tag":175,"props":567,"children":569},{"id":568},"http-11-对比-http-10-做了哪些改进",[570],{"type":173,"value":571},"HTTP 1.1 对比 HTTP 1.0 做了哪些改进？",{"type":167,"tag":182,"props":573,"children":574},{},[575],{"type":173,"value":576},"长链接（keep-alive）、断点续传、HTTP 缓存。",{"type":167,"tag":175,"props":578,"children":580},{"id":579},"http-缓存分几种",[581],{"type":173,"value":582},"HTTP 缓存分几种？",{"type":167,"tag":182,"props":584,"children":585},{},[586],{"type":173,"value":587},"分强缓存和协商缓存：Expires、Cache-Control、Last-Modified、Etag。",{"type":167,"tag":182,"props":589,"children":590},{},[591],{"type":167,"tag":191,"props":592,"children":595},{"alt":593,"src":594},"HTTP Cache","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220630205606.png?type=win11&w=60",[],{"type":167,"tag":182,"props":597,"children":598},{},[599,600],{"type":173,"value":217},{"type":167,"tag":219,"props":601,"children":604},{"href":602,"rel":603},"https://imweb.io/topic/55c6f9bac222e3af6ce235b9",[223],[605],{"type":173,"value":602},{"type":167,"tag":175,"props":607,"children":609},{"id":608},"强缓存和协商缓存的主要区别是",[610],{"type":173,"value":611},"强缓存和协商缓存的主要区别是？",{"type":167,"tag":182,"props":613,"children":614},{},[615],{"type":173,"value":616},"强缓存是一但匹配就无条件使用缓存，而面对协商缓存的资源，浏览器需要向服务端发请求，对比资源是否变更，并依靠服务端的响应来判断是否使用缓存。如果资源同时应用了强缓存和协商缓存，那么浏览器优先使用强缓存。",{"type":167,"tag":175,"props":618,"children":620},{"id":619},"no-store-和-no-cache-的区别",[621],{"type":173,"value":622},"no-store 和 no-cache 的区别？",{"type":167,"tag":182,"props":624,"children":625},{},[626],{"type":173,"value":627},"no-store 告诉客户端每次都在服务器取最新的资源。no-cache 也要求每次都要重新请求，但服务器可能返回 304 告诉客户端资源未改变。",{"type":167,"tag":175,"props":629,"children":631},{"id":630},"http2-的改进在哪里",[632],{"type":173,"value":633},"HTTP2 的改进在哪里？",{"type":167,"tag":182,"props":635,"children":636},{},[637],{"type":173,"value":638},"HTTP/2 主要包含以下几个方面的变化，显著增强了性能，也增加了安全性。",{"type":167,"tag":310,"props":640,"children":641},{},[642,647,652,657],{"type":167,"tag":314,"props":643,"children":644},{},[645],{"type":173,"value":646},"二进制分帧层",{"type":167,"tag":314,"props":648,"children":649},{},[650],{"type":173,"value":651},"头部压缩（HPACK、Huffman）",{"type":167,"tag":314,"props":653,"children":654},{},[655],{"type":173,"value":656},"多路复用",{"type":167,"tag":314,"props":658,"children":659},{},[660],{"type":173,"value":661},"服务端推送",{"type":167,"tag":182,"props":663,"children":664},{},[665],{"type":173,"value":666},"二进制分帧层是在应用层（HTTP）和传输层（TCP、UDP）之间新增的一个层级关系。二进制分帧层将传输的 HTTP 消息分割为更小的帧，并采用二进制格式编码传输。帧分为头部帧和消息帧。这意味着 HTTP/2 请求的所有内容都是二进制传输的。",{"type":167,"tag":182,"props":668,"children":669},{},[670],{"type":173,"value":671},"HTTP 头部被转为帧之前，会通过维护一个表结构，通过序号记录已发送的键值对。这是一种索引算法，叫 HPACK。具体的表结构分静态表和动态表，静态表给一些常用的头部标号了号，直接使用就好，动态表则是根据发送的内容动态确定的记号。需要被发送具体内容会被哈夫曼编码以减小体积。",{"type":167,"tag":182,"props":673,"children":674},{},[675],{"type":173,"value":676},"多路复用是指，多个 HTTP 请求可以在同一个 TCP 连接中并行传输。这和 HTTP 1.1 的 Connection：keep-alive 不同，keep-alive 虽然复用 TCP 连接，但是多个响应之间是串行的。",{"type":167,"tag":182,"props":678,"children":679},{},[680],{"type":173,"value":681},"建立连接后，双方通过交换 SETTING 帧，以确认双向的流量窗口控制大小。然后开始发送帧。帧可以在一个连接中根据优先级发送，或是被乱序发送，响应方也能乱序接收。由于流是双向的，只要服务端 SETTING 帧设置的流量窗口大小不为 0，服务端可按照同源策略推送资源给客户端。",{"type":167,"tag":182,"props":683,"children":684},{},[685,686,693,695],{"type":173,"value":333},{"type":167,"tag":219,"props":687,"children":690},{"href":688,"rel":689},"https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.5.3",[223],[691],{"type":173,"value":692},"HTTP/2 和 HTTP/1.X 相比的新特性",{"type":173,"value":694},"、",{"type":167,"tag":219,"props":696,"children":699},{"href":697,"rel":698},"https://blog.csdn.net/gaoliang1719/article/details/106346201/",[223],[700],{"type":173,"value":701},"HTTP/2 协议之头部压缩",{"type":167,"tag":175,"props":703,"children":705},{"id":704},"http3-相比-http2-改变了什么东西",[706],{"type":173,"value":707},"HTTP3 相比 HTTP2 改变了什么东西？",{"type":167,"tag":182,"props":709,"children":710},{},[711],{"type":173,"value":712},"HTTP3 使用全新的传输层协议 QUIC，实现了 H2 中的流式传输（HTTP2）、多路复用（TCP）、流量控制（TCP）以及可靠性（TCP）等内容，其网络层协议应用的是 UDP 而不是 TCP，本意是用来解决 TCP 建立链接需要  1.5 RTT 延迟的问题。这种改善在移动端更加有效。",{"type":167,"tag":182,"props":714,"children":715},{},[716],{"type":167,"tag":191,"props":717,"children":720},{"alt":718,"src":719},"HTTP3 VS HTTP2 VS HTTP1.1","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220621003527.png?type=draw&w=80",[],{"type":167,"tag":182,"props":722,"children":723},{},[724,725],{"type":173,"value":333},{"type":167,"tag":219,"props":726,"children":729},{"href":727,"rel":728},"https://mp.weixin.qq.com/s/40YBEWZBaHakDuRuh27fMg",[223],[730],{"type":173,"value":731},"HTTP3 发布了！",{"type":167,"tag":168,"props":733,"children":735},{"id":734},"tls",[736],{"type":173,"value":737},"TLS",{"type":167,"tag":182,"props":739,"children":740},{},[741,742],{"type":173,"value":217},{"type":167,"tag":219,"props":743,"children":746},{"href":744,"rel":745},"https://www.oschina.net/translate/rfc-8446-aka-tls-1-3",[223],[747],{"type":173,"value":748},"详细介绍 RFC 8446（即 TLS 1.3）",{"type":167,"tag":182,"props":750,"children":751},{},[752],{"type":173,"value":753},"TLS 是一种混合式加密系统，同时使用对称加密和非对称加密。它使用非对称加密以加密对称加密所需的密钥。它有多个版本。TLS 1.3 是一种比起 TLS1.2 而言更清晰、更快速、更安全的现代化安全协议。TLS 1.2 有两点问题：1. 包括 POODLE 在内的众多可行漏洞；2. 性能低。为了改善这些问题，IETF 在 2013 年，着手 TLS 1.3 的讨论，主要改进：",{"type":167,"tag":310,"props":755,"children":756},{},[757,762,767,772],{"type":167,"tag":314,"props":758,"children":759},{},[760],{"type":173,"value":761},"减少握手时间",{"type":167,"tag":314,"props":763,"children":764},{},[765],{"type":173,"value":766},"加密更多的握手",{"type":167,"tag":314,"props":768,"children":769},{},[770],{"type":173,"value":771},"改善跨协议攻击的弹性",{"type":167,"tag":314,"props":773,"children":774},{},[775],{"type":173,"value":776},"删除遗留特征",{"type":167,"tag":182,"props":778,"children":779},{},[780],{"type":173,"value":781},"经过 4 年的争论。最终，形成了 RFC 8446 规范。",{"type":167,"tag":783,"props":784,"children":786},"h3",{"id":785},"tls-12-的缺陷",[787],{"type":173,"value":788},"TLS 1.2 的缺陷",{"type":167,"tag":182,"props":790,"children":791},{},[792],{"type":173,"value":793},"TLS 1.2 使用的加密方式有缺陷。其中，非对称加密有如 RSA 和 Diffie-Hellman 协议。",{"type":167,"tag":175,"props":795,"children":797},{"id":796},"rsa",[798],{"type":173,"value":799},"RSA",{"type":167,"tag":182,"props":801,"children":802},{},[803],{"type":167,"tag":191,"props":804,"children":807},{"alt":805,"src":806},"RSA Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082140.png?w=70",[],{"type":167,"tag":182,"props":809,"children":810},{},[811,813,820],{"type":173,"value":812},"RSA 不保证前向保密。即，如果有人记录了加密对话，然后获取服务器的 RSA 私钥，他们可以将对话解密。而攻击者可能只需 ",{"type":167,"tag":219,"props":814,"children":817},{"href":815,"rel":816},"https://www.wikiwand.com/zh/%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E",[223],[818],{"type":173,"value":819},"HeartBleed 漏洞",{"type":173,"value":821},"（缓存区过读）就可以顺利窃取私钥。",{"type":167,"tag":175,"props":823,"children":825},{"id":824},"diffie-hellman",[826],{"type":173,"value":827},"Diffie-Hellman",{"type":167,"tag":182,"props":829,"children":830},{},[831],{"type":167,"tag":191,"props":832,"children":834},{"alt":827,"src":833},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082812.png?w=70",[],{"type":167,"tag":182,"props":836,"children":837},{},[838],{"type":173,"value":839},"Diffie-Hellman 的缺陷在于，协议的某些参数不安全，且能够被操纵设置；不安全的参数能导致加密更容易被破解。",{"type":167,"tag":175,"props":841,"children":843},{"id":842},"对称加密缺陷",[844],{"type":173,"value":842},{"type":167,"tag":182,"props":846,"children":847},{},[848],{"type":173,"value":849},"TLS 1.2 的对称加密使用的 CBC 模式密码和流式密码也有缺陷。",{"type":167,"tag":175,"props":851,"children":853},{"id":852},"downgrade-attack",[854],{"type":173,"value":855},"Downgrade Attack",{"type":167,"tag":182,"props":857,"children":858},{},[859],{"type":173,"value":860},"由于 TLS 1.2 握手协商密钥的部分没有加密。所以中间人可以拦截客户端的请求，选择发送方和接收方都支持的弱密码，伪造请求。",{"type":167,"tag":182,"props":862,"children":863},{},[864],{"type":167,"tag":191,"props":865,"children":867},{"alt":855,"src":866},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807090034.png?w=70",[],{"type":167,"tag":783,"props":869,"children":871},{"id":870},"_0-rtt",[872],{"type":173,"value":873},"0-RTT",{"type":167,"tag":182,"props":875,"children":876},{},[877],{"type":173,"value":878},"TLS 1.3 中，通讯双方可以得到一个“恢复主密钥”的密钥，用于从中断的连接中直接恢复通讯。但是有被拦截导致重放攻击的风险。",{"type":167,"tag":182,"props":880,"children":881},{},[882],{"type":167,"tag":191,"props":883,"children":886},{"alt":884,"src":885},"0-RTT 重放攻击","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807081140.png?w=70",[],{"type":167,"tag":168,"props":888,"children":890},{"id":889},"https",[891],{"type":173,"value":892},"HTTPS",{"type":167,"tag":783,"props":894,"children":896},{"id":895},"links",[897],{"type":173,"value":898},"Links",{"type":167,"tag":182,"props":900,"children":901},{},[902,903],{"type":173,"value":217},{"type":167,"tag":219,"props":904,"children":907},{"href":905,"rel":906},"https://zhuanlan.zhihu.com/p/26682342",[223],[908],{"type":173,"value":909},"深入理解 HTTPS 原理、过程与实践",{"type":167,"tag":175,"props":911,"children":913},{"id":912},"https-的握手过程是怎样的",[914],{"type":173,"value":915},"HTTPS 的握手过程是怎样的？",{"type":167,"tag":182,"props":917,"children":918},{},[919],{"type":173,"value":920},"总的来说是一个非对称加密+对称加密的过程。客户端通过一个随机数加上服务器的公钥来生成预主密钥，然后双方再通过 Client Hello 和 Server Hello 时的两个随机数生成会话密钥。生成预主密钥的过程是非对称加密的，因为只有服务端用私钥才能解得客户端的随机数。而之后使用会话密钥主要是出于性能考虑。",{"type":167,"tag":182,"props":922,"children":923},{},[924],{"type":167,"tag":191,"props":925,"children":928},{"alt":926,"src":927},"HTTPS 握手过程","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620024738.png",[],{"type":167,"tag":175,"props":930,"children":932},{"id":931},"ca-怎么解决中间人问题",[933],{"type":173,"value":934},"CA 怎么解决中间人问题？",{"type":167,"tag":182,"props":936,"children":937},{},[938],{"type":173,"value":939},"CA 主要是用来防范服务器端返回 Server Hello 前就和客户端提供了假的公钥。CA 是一个可信的第三方机构，客户端想要服务器的公钥，需要从 CA 获得。CA 返回公钥以及数字签名。客户端只要拿到公钥后根据 CA 公钥对其计算获得摘要，再将摘要和签名进行对比，就能知道是否拿到了可信的公钥。",{"type":167,"tag":182,"props":941,"children":942},{},[943,944],{"type":173,"value":333},{"type":167,"tag":219,"props":945,"children":948},{"href":946,"rel":947},"https://www.jianshu.com/p/9de06222793b",[223],[949],{"type":173,"value":950},"HTTPS CA 原理",{"type":167,"tag":175,"props":952,"children":954},{"id":953},"数字签名是什么",[955],{"type":173,"value":956},"数字签名是什么？",{"type":167,"tag":182,"props":958,"children":959},{},[960],{"type":173,"value":961},"数字签名是只有信息发送者才能产生的一段文本，信息接收方可以通过签名计算出接受到的文本是否经过了修改。如果我要发送 A，我会用私钥将 A 进行加密获得 B，并把 A 和 B 同时发送过去。B 就是数字签名。因为我的公钥是公开的，所以接受方可以通过使用我的公钥去计算 A，如果获得和 B 一致的结果，那么说明信息没有被篡改。",{"type":167,"tag":168,"props":963,"children":965},{"id":964},"攻防",[966],{"type":173,"value":964},{"type":167,"tag":175,"props":968,"children":970},{"id":969},"https-降级攻击的原理是什么",[971],{"type":173,"value":972},"HTTPS 降级攻击的原理是什么？",{"type":167,"tag":182,"props":974,"children":975},{},[976],{"type":173,"value":977},"客服端与服务端协商加密协议的过程当中，如果攻击者拦截了客户端（或操控客户端）并代替它向服务端协商使用仅支持有漏洞的协议。如果服务端同意了，那么建立连接后，攻击者就能使用该协议的已知漏洞的破解手段，去破解通讯内容了。",{"type":167,"tag":175,"props":979,"children":981},{"id":980},"syn-攻击的基本原理是什么",[982],{"type":173,"value":983},"SYN 攻击的基本原理是什么？",{"type":167,"tag":182,"props":985,"children":986},{},[987,989,996],{"type":173,"value":988},"SYN 洪水攻击是 DDOS 攻击中最常见的攻击类型。攻击者向服务器发送大量伪造的 TCP 连接请求，而源 IP 是伪造的。由于服务器收不到伪造源回应的 ACK 数据包，就会不断重发。一般应对方式是：减少重发次数、使用 ",{"type":167,"tag":219,"props":990,"children":993},{"href":991,"rel":992},"https://baike.baidu.com/item/syn%20cookie/6898884?fr=aladdin",[223],[994],{"type":173,"value":995},"SYN Cookie",{"type":173,"value":997},"、增加 backlog 队列长度、限制 SYN 并发数。",{"type":167,"tag":182,"props":999,"children":1000},{},[1001,1002],{"type":173,"value":333},{"type":167,"tag":219,"props":1003,"children":1006},{"href":1004,"rel":1005},"https://www.qycn.com/about/hd/2049.html",[223],[1007],{"type":173,"value":1008},"服务器遭到 SYN 攻击该如何处理呢？",{"type":167,"tag":175,"props":1010,"children":1012},{"id":1011},"请求头加-csrf-参数为什么能防止-csrf-攻击",[1013],{"type":173,"value":1014},"请求头加 CSRF 参数为什么能防止 CSRF 攻击？",{"type":167,"tag":182,"props":1016,"children":1017},{},[1018],{"type":173,"value":1019},"跨站请求伪造是攻击者通过在钓鱼站点发起被钓网站请求（如图片地址），以达到攻击目的。防御方式一般有两种：",{"type":167,"tag":310,"props":1021,"children":1022},{},[1023,1028],{"type":167,"tag":314,"props":1024,"children":1025},{},[1026],{"type":173,"value":1027},"使用 SameSite Cookie，禁用第三方 Cookie",{"type":167,"tag":314,"props":1029,"children":1030},{},[1031],{"type":173,"value":1032},"在请求头中加入 CSRF Token，这样攻击者使用钓鱼站点发起请求时，由于不能设置请求头，所以请求在服务端会被拒绝",{"type":167,"tag":168,"props":1034,"children":1036},{"id":1035},"cdn",[1037],{"type":173,"value":1038},"CDN",{"type":167,"tag":175,"props":1040,"children":1042},{"id":1041},"cdn-有什么好处",[1043],{"type":173,"value":1044},"CDN 有什么好处？",{"type":167,"tag":182,"props":1046,"children":1047},{},[1048],{"type":173,"value":1049},"对页面加载而言，CDN 可以减少请求时间、突破浏览器同域的 TCP 并发数、节约 Cookie 带宽。",{"type":167,"tag":168,"props":1051,"children":1053},{"id":1052},"浏览器",[1054],{"type":173,"value":1052},{"type":167,"tag":175,"props":1056,"children":1058},{"id":1057},"url-由哪些部分组成",[1059],{"type":173,"value":1060},"URL 由哪些部分组成？",{"type":167,"tag":182,"props":1062,"children":1063},{},[1064],{"type":173,"value":1065},"协议头、域名、端口、目录、文件名（index.html）、页面锚、参数。",{"type":167,"tag":175,"props":1067,"children":1069},{"id":1068},"怎么做跨域",[1070],{"type":173,"value":1071},"怎么做跨域？",{"type":167,"tag":182,"props":1073,"children":1074},{},[1075],{"type":173,"value":1076},"用代理服务器、CORS、iFrame 或者 WebSocket 都可以。",{"type":167,"tag":182,"props":1078,"children":1079},{},[1080],{"type":173,"value":1081},"服务器可以忽略同源限制；WebSocket 和 CORS 不受同源影响；iFrame 需要浏览器加载一个跨域页面，然后和主页面用 postMessage 或者哈希监听的方式通信，让 iFrame 中的脚本代替主页面发送请求。",{"type":167,"tag":175,"props":1083,"children":1085},{"id":1084},"正向代理和反向代理的区别是",[1086],{"type":173,"value":1087},"正向代理和反向代理的区别是？",{"type":167,"tag":182,"props":1089,"children":1090},{},[1091],{"type":173,"value":1092},"正向代理为用户服务，反向代理为服务器服务，分别对应“VPN”和“负载均衡”的概念。",{"type":167,"tag":175,"props":1094,"children":1096},{"id":1095},"cors-运作流程是怎样的",[1097],{"type":173,"value":1098},"CORS 运作流程是怎样的？",{"type":167,"tag":182,"props":1100,"children":1101},{},[1102],{"type":173,"value":1103},"CORS 即跨域资源共享机制。浏览器在请求资源前通过携带 Origin 字段的 OPTIONS 请求向服务器索取设置有 Access-Control-Allow-Methods、Access-Control-Allow-Headers、Access-Control-Allow-Origin 的响应。在得到响应的允许后再继续发送请求。",{"type":167,"tag":175,"props":1105,"children":1107},{"id":1106},"什么是私有网络请求攻击",[1108],{"type":173,"value":1109},"什么是私有网络请求攻击？",{"type":167,"tag":182,"props":1111,"children":1112},{},[1113],{"type":173,"value":1114},"在内网域名向 localhost 发起请求就算一种私有网络请求。而恶意代码通过向比浏览器当前浏览页面的域名 IP 更私密的 IP 地址发起请求，以达到获取信息或攻击手段的方式就是私有网络请求攻击。",{"type":167,"tag":182,"props":1116,"children":1117},{},[1118,1120,1127,1129],{"type":173,"value":1119},"自 Chrome 96 后， Chrome 开始实施私有网络控制策略，需要部署以下两个请求头以解除控制：",{"type":167,"tag":1121,"props":1122,"children":1124},"code",{"className":1123},[],[1125],{"type":173,"value":1126},"Access-Control-Request-Private-Network: true",{"type":173,"value":1128}," 和 ",{"type":167,"tag":1121,"props":1130,"children":1132},{"className":1131},[],[1133],{"type":173,"value":1134},"Access-Control-Allow-Private-Network: true",{"type":167,"tag":182,"props":1136,"children":1137},{},[1138,1139],{"type":173,"value":333},{"type":167,"tag":219,"props":1140,"children":1143},{"href":1141,"rel":1142},"https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&mid=2247491913&idx=1&sn=2bb0a28358c02a8ec1832781205df72c&chksm=c2e11462f5969d74fac277131e1ba8c417ec86754b2f1b2dbe8e238ca27d5c2eaebe602ec803&token=1851580176&lang=zh_CN&scene=21#wechat_redirect",[223],[1144],{"type":173,"value":1145},"Chrome 重大更新，CORS 增加了两个新的请求头？ |  code 秘密花园",{"type":167,"tag":168,"props":1147,"children":1149},{"id":1148},"阅读更多",[1150],{"type":173,"value":1148},{"type":167,"tag":310,"props":1152,"children":1153},{},[1154],{"type":167,"tag":314,"props":1155,"children":1156},{},[1157],{"type":167,"tag":219,"props":1158,"children":1161},{"href":1159,"rel":1160},"https://juejin.im/post/6844903518826921998",[223],[1162],{"type":173,"value":1163},"为你的网站带上帽子 | 使用 helmet 保护 Express 应用",{"title":160,"searchDepth":1165,"depth":1165,"links":1166},2,[1167,1168,1169,1170,1171,1176,1179,1180,1181,1182],{"id":170,"depth":1165,"text":170},{"id":198,"depth":1165,"text":201},{"id":343,"depth":1165,"text":346},{"id":377,"depth":1165,"text":380},{"id":734,"depth":1165,"text":737,"children":1172},[1173,1175],{"id":785,"depth":1174,"text":788},3,{"id":870,"depth":1174,"text":873},{"id":889,"depth":1165,"text":892,"children":1177},[1178],{"id":895,"depth":1174,"text":898},{"id":964,"depth":1165,"text":964},{"id":1035,"depth":1165,"text":1038},{"id":1052,"depth":1165,"text":1052},{"id":1148,"depth":1165,"text":1148},"markdown","content:6.maps:_computer:network.md","content","6.maps/_computer/network.md","6.maps/_computer/network","md",[1190,1194],{"_path":1191,"title":1192,"description":1193},"/maps/_computer/encoding/hash-collision","哈希冲突","哈希冲突是指两个不同的键值被哈希函数映射到了同一个位置。",{"_path":1195,"title":1196,"description":1197},"/maps/_computer/security","Security Mind Map","网络安全知识导图，包含 XSS、CSRF、CSS Exfiltration 等常见攻击手段的原理分析和防范措施。",1742348683197]