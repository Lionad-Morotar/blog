[{"data":1,"prerenderedAt":1201},["ShallowReactive",2],{"navigation":3,"/maps/_computer/network":158,"/maps/_computer/network-surround":1192},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":1186,"_id":1187,"_source":1188,"_file":1189,"_stem":1190,"_extension":1191},"/maps/_computer/network","_computer",false,true,"","计算机网络","计算机网络基础知识全览，包含 TCP/IP、HTTP、HTTPS、TLS 等协议的详细解析，以及网络安全、CDN、跨域等实践内容。",{"type":167,"children":168,"toc":1167},"root",[169,177,184,190,199,205,211,216,230,236,244,250,255,263,269,274,282,288,293,301,307,312,332,344,350,355,378,384,390,548,554,559,564,569,575,580,586,591,599,609,615,620,626,631,637,642,665,670,675,680,685,705,711,716,724,735,741,752,757,780,785,792,797,803,811,825,831,838,843,848,853,859,864,871,877,882,890,896,902,913,919,924,932,938,943,954,960,965,970,976,981,987,1001,1012,1018,1023,1036,1042,1048,1053,1058,1064,1069,1075,1080,1085,1091,1096,1102,1107,1113,1118,1138,1149,1154],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"网络模型",[175],{"type":176,"value":173},"text",{"type":170,"tag":178,"props":179,"children":181},"h4",{"id":180},"各网络层有哪些代表性的协议",[182],{"type":176,"value":183},"各网络层有哪些代表性的协议？",{"type":170,"tag":185,"props":186,"children":187},"p",{},[188],{"type":176,"value":189},"应用层有 HTTP、DNS、FTP，表示层有 SSL、TSL、base64、MIDI、JPEG，会话层有 xxx，传输层则是 TCP、UDP，网络层有 IP，数据链路层 xxx，物理层有以太网协议。",{"type":170,"tag":185,"props":191,"children":192},{},[193],{"type":170,"tag":194,"props":195,"children":198},"img",{"alt":196,"src":197},"OSI 参考模型","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620033400.png?type=win11&w=60",[],{"type":170,"tag":171,"props":200,"children":202},{"id":201},"tcp",[203],{"type":176,"value":204},"TCP",{"type":170,"tag":178,"props":206,"children":208},{"id":207},"tcpip-是什么",[209],{"type":176,"value":210},"TCP/IP 是什么？",{"type":170,"tag":185,"props":212,"children":213},{},[214],{"type":176,"value":215},"TCP/IP 协议是一个协议集。TCP/IP 包括了应用层、传输层、网络层、数据链路层和网络层，是一个四层体系结构。各层有代表性的协议有 HTTP、DNS，TLS，IP 和 xxx。",{"type":170,"tag":185,"props":217,"children":218},{},[219,221],{"type":176,"value":220},"TODO，",{"type":170,"tag":222,"props":223,"children":227},"a",{"href":224,"rel":225},"https://developer.51cto.com/article/597961.html",[226],"nofollow",[228],{"type":176,"value":229},"终于有人能把 TCP/IP 协议讲的明明白白了！",{"type":170,"tag":178,"props":231,"children":233},{"id":232},"tcp-header-由哪些部分组成",[234],{"type":176,"value":235},"TCP Header 由哪些部分组成？",{"type":170,"tag":185,"props":237,"children":238},{},[239],{"type":170,"tag":194,"props":240,"children":243},{"alt":241,"src":242},"TCP Header","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731153510.png?type=win11&w=60",[],{"type":170,"tag":178,"props":245,"children":247},{"id":246},"三次握手具体过程",[248],{"type":176,"value":249},"三次握手具体过程？",{"type":170,"tag":185,"props":251,"children":252},{},[253],{"type":176,"value":254},"从三次握手图示可以发现，仅仅是连接的建立，就需要大量时间消耗。客户端想发送数据，至少要等 1.5xRTT；服务端想发送数据，至少要 2xRTT。",{"type":170,"tag":185,"props":256,"children":257},{},[258],{"type":170,"tag":194,"props":259,"children":262},{"alt":260,"src":261},"Three-way Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731162450.png?type=win11&w=40",[],{"type":170,"tag":178,"props":264,"children":266},{"id":265},"tcp-fast-open-如何优化握手过程",[267],{"type":176,"value":268},"TCP Fast Open 如何优化握手过程？",{"type":170,"tag":185,"props":270,"children":271},{},[272],{"type":176,"value":273},"TFO 规定服务器第一次返回 ACK 时，携带一个用以标志客户端身份的 Cookie。后续客户端发送 SYN 建立连接的时候带上这个 Cookie，服务端确认身份之后，就能直接返回数据了（节约了 1.5 RTT）。",{"type":170,"tag":185,"props":275,"children":276},{},[277],{"type":170,"tag":194,"props":278,"children":281},{"alt":279,"src":280},"TFO","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807054219.png?type=win11&w=80",[],{"type":170,"tag":178,"props":283,"children":285},{"id":284},"四次挥手的具体过程",[286],{"type":176,"value":287},"四次挥手的具体过程？",{"type":170,"tag":185,"props":289,"children":290},{},[291],{"type":176,"value":292},"四次挥手如下所示。为什么建立连接要三次，而断开连接要四次请求呢？从图中可以看出，接收到 FIN 请求时，服务端立即返回 ACK 表示收到请求，但是要等自己这边剩余一些工作（可能时未发送完的请求内容）完成之后，才会返回 FIN。",{"type":170,"tag":185,"props":294,"children":295},{},[296],{"type":170,"tag":194,"props":297,"children":300},{"alt":298,"src":299},"Four-way Wavehand","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200731165331.png?type=win11&w=40",[],{"type":170,"tag":178,"props":302,"children":304},{"id":303},"tcp-链接中如果某端出故障了会怎么办",[305],{"type":176,"value":306},"TCP 链接中如果某端出故障了会怎么办？",{"type":170,"tag":185,"props":308,"children":309},{},[310],{"type":176,"value":311},"会通过计时器来保证链接的稳定性。",{"type":170,"tag":313,"props":314,"children":315},"ul",{},[316,322,327],{"type":170,"tag":317,"props":318,"children":319},"li",{},[320],{"type":176,"value":321},"超时重传计时器：对方没有返回 ACK 时，发送方需要重新发送数据。一般计时器的时间选择 2RTT。",{"type":170,"tag":317,"props":323,"children":324},{},[325],{"type":176,"value":326},"2MSL 定时器：主动断开连接的一方发送 FIN 后需要等待 2MSL 时间。因为如果服务端没有收到最后一个 ACK，它将重新发送 FIN。",{"type":170,"tag":317,"props":328,"children":329},{},[330],{"type":176,"value":331},"保活计时器：每当接收方收到消息，将计时器重设为两小时。计时器到期时，每 75s 发送一次探测报文段，如果连续 10 次都没有被响应则断开连接。",{"type":170,"tag":185,"props":333,"children":334},{},[335,337],{"type":176,"value":336},"见：",{"type":170,"tag":222,"props":338,"children":341},{"href":339,"rel":340},"https://www.cnblogs.com/13224ACMer/p/6616960.html",[226],[342],{"type":176,"value":343},"TCP 四种计时器",{"type":170,"tag":171,"props":345,"children":347},{"id":346},"udp",[348],{"type":176,"value":349},"UDP",{"type":170,"tag":185,"props":351,"children":352},{},[353],{"type":176,"value":354},"UDP，即 User Datagram Protocol 用户数据报协议。数据报不保证信息的传达是否到位，所以 UDP 也被普遍称作 Unreliable Datagram Protocol。",{"type":170,"tag":313,"props":356,"children":357},{},[358,363,368,373],{"type":170,"tag":317,"props":359,"children":360},{},[361],{"type":176,"value":362},"不保证消息交付",{"type":170,"tag":317,"props":364,"children":365},{},[366],{"type":176,"value":367},"不保证交付顺序",{"type":170,"tag":317,"props":369,"children":370},{},[371],{"type":176,"value":372},"不跟踪连接状态",{"type":170,"tag":317,"props":374,"children":375},{},[376],{"type":176,"value":377},"不需要拥塞控制",{"type":170,"tag":171,"props":379,"children":381},{"id":380},"http",[382],{"type":176,"value":383},"HTTP",{"type":170,"tag":178,"props":385,"children":387},{"id":386},"有哪些常见的状态码",[388],{"type":176,"value":389},"有哪些常见的状态码？",{"type":170,"tag":391,"props":392,"children":393},"table",{},[394,413],{"type":170,"tag":395,"props":396,"children":397},"thead",{},[398],{"type":170,"tag":399,"props":400,"children":401},"tr",{},[402,408],{"type":170,"tag":403,"props":404,"children":405},"th",{},[406],{"type":176,"value":407},"状态码",{"type":170,"tag":403,"props":409,"children":410},{},[411],{"type":176,"value":412},"描述",{"type":170,"tag":414,"props":415,"children":416},"tbody",{},[417,431,444,457,470,483,496,509,522,535],{"type":170,"tag":399,"props":418,"children":419},{},[420,426],{"type":170,"tag":421,"props":422,"children":423},"td",{},[424],{"type":176,"value":425},"200",{"type":170,"tag":421,"props":427,"children":428},{},[429],{"type":176,"value":430},"成功并返回数据",{"type":170,"tag":399,"props":432,"children":433},{},[434,439],{"type":170,"tag":421,"props":435,"children":436},{},[437],{"type":176,"value":438},"301",{"type":170,"tag":421,"props":440,"children":441},{},[442],{"type":176,"value":443},"永久转移，重定向",{"type":170,"tag":399,"props":445,"children":446},{},[447,452],{"type":170,"tag":421,"props":448,"children":449},{},[450],{"type":176,"value":451},"302",{"type":170,"tag":421,"props":453,"children":454},{},[455],{"type":176,"value":456},"临时重定向",{"type":170,"tag":399,"props":458,"children":459},{},[460,465],{"type":170,"tag":421,"props":461,"children":462},{},[463],{"type":176,"value":464},"303",{"type":170,"tag":421,"props":466,"children":467},{},[468],{"type":176,"value":469},"临时重定向（客户端必须使用 Get 方法重新请求资源）",{"type":170,"tag":399,"props":471,"children":472},{},[473,478],{"type":170,"tag":421,"props":474,"children":475},{},[476],{"type":176,"value":477},"304",{"type":170,"tag":421,"props":479,"children":480},{},[481],{"type":176,"value":482},"资源未修改，可使用缓存",{"type":170,"tag":399,"props":484,"children":485},{},[486,491],{"type":170,"tag":421,"props":487,"children":488},{},[489],{"type":176,"value":490},"400",{"type":170,"tag":421,"props":492,"children":493},{},[494],{"type":176,"value":495},"请求语法错误",{"type":170,"tag":399,"props":497,"children":498},{},[499,504],{"type":170,"tag":421,"props":500,"children":501},{},[502],{"type":176,"value":503},"401",{"type":170,"tag":421,"props":505,"children":506},{},[507],{"type":176,"value":508},"要求身份认证",{"type":170,"tag":399,"props":510,"children":511},{},[512,517],{"type":170,"tag":421,"props":513,"children":514},{},[515],{"type":176,"value":516},"403",{"type":170,"tag":421,"props":518,"children":519},{},[520],{"type":176,"value":521},"请求拒绝",{"type":170,"tag":399,"props":523,"children":524},{},[525,530],{"type":170,"tag":421,"props":526,"children":527},{},[528],{"type":176,"value":529},"404",{"type":170,"tag":421,"props":531,"children":532},{},[533],{"type":176,"value":534},"资源不存在",{"type":170,"tag":399,"props":536,"children":537},{},[538,543],{"type":170,"tag":421,"props":539,"children":540},{},[541],{"type":176,"value":542},"500",{"type":170,"tag":421,"props":544,"children":545},{},[546],{"type":176,"value":547},"服务器错误",{"type":170,"tag":178,"props":549,"children":551},{"id":550},"http-报文由哪些部分组成",[552],{"type":176,"value":553},"HTTP 报文由哪些部分组成？",{"type":170,"tag":185,"props":555,"children":556},{},[557],{"type":176,"value":558},"请求报文由请求行、请求头、空行和请求数据组成，相应报文类似。",{"type":170,"tag":185,"props":560,"children":561},{},[562],{"type":176,"value":563},"请求报文实例：",{"type":170,"tag":185,"props":565,"children":566},{},[567],{"type":176,"value":568},"相应报文实例：",{"type":170,"tag":178,"props":570,"children":572},{"id":571},"http-11-对比-http-10-做了哪些改进",[573],{"type":176,"value":574},"HTTP 1.1 对比 HTTP 1.0 做了哪些改进？",{"type":170,"tag":185,"props":576,"children":577},{},[578],{"type":176,"value":579},"长链接（keep-alive）、断点续传、HTTP 缓存。",{"type":170,"tag":178,"props":581,"children":583},{"id":582},"http-缓存分几种",[584],{"type":176,"value":585},"HTTP 缓存分几种？",{"type":170,"tag":185,"props":587,"children":588},{},[589],{"type":176,"value":590},"分强缓存和协商缓存：Expires、Cache-Control、Last-Modified、Etag。",{"type":170,"tag":185,"props":592,"children":593},{},[594],{"type":170,"tag":194,"props":595,"children":598},{"alt":596,"src":597},"HTTP Cache","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220630205606.png?type=win11&w=60",[],{"type":170,"tag":185,"props":600,"children":601},{},[602,603],{"type":176,"value":220},{"type":170,"tag":222,"props":604,"children":607},{"href":605,"rel":606},"https://imweb.io/topic/55c6f9bac222e3af6ce235b9",[226],[608],{"type":176,"value":605},{"type":170,"tag":178,"props":610,"children":612},{"id":611},"强缓存和协商缓存的主要区别是",[613],{"type":176,"value":614},"强缓存和协商缓存的主要区别是？",{"type":170,"tag":185,"props":616,"children":617},{},[618],{"type":176,"value":619},"强缓存是一但匹配就无条件使用缓存，而面对协商缓存的资源，浏览器需要向服务端发请求，对比资源是否变更，并依靠服务端的响应来判断是否使用缓存。如果资源同时应用了强缓存和协商缓存，那么浏览器优先使用强缓存。",{"type":170,"tag":178,"props":621,"children":623},{"id":622},"no-store-和-no-cache-的区别",[624],{"type":176,"value":625},"no-store 和 no-cache 的区别？",{"type":170,"tag":185,"props":627,"children":628},{},[629],{"type":176,"value":630},"no-store 告诉客户端每次都在服务器取最新的资源。no-cache 也要求每次都要重新请求，但服务器可能返回 304 告诉客户端资源未改变。",{"type":170,"tag":178,"props":632,"children":634},{"id":633},"http2-的改进在哪里",[635],{"type":176,"value":636},"HTTP2 的改进在哪里？",{"type":170,"tag":185,"props":638,"children":639},{},[640],{"type":176,"value":641},"HTTP/2 主要包含以下几个方面的变化，显著增强了性能，也增加了安全性。",{"type":170,"tag":313,"props":643,"children":644},{},[645,650,655,660],{"type":170,"tag":317,"props":646,"children":647},{},[648],{"type":176,"value":649},"二进制分帧层",{"type":170,"tag":317,"props":651,"children":652},{},[653],{"type":176,"value":654},"头部压缩（HPACK、Huffman）",{"type":170,"tag":317,"props":656,"children":657},{},[658],{"type":176,"value":659},"多路复用",{"type":170,"tag":317,"props":661,"children":662},{},[663],{"type":176,"value":664},"服务端推送",{"type":170,"tag":185,"props":666,"children":667},{},[668],{"type":176,"value":669},"二进制分帧层是在应用层（HTTP）和传输层（TCP、UDP）之间新增的一个层级关系。二进制分帧层将传输的 HTTP 消息分割为更小的帧，并采用二进制格式编码传输。帧分为头部帧和消息帧。这意味着 HTTP/2 请求的所有内容都是二进制传输的。",{"type":170,"tag":185,"props":671,"children":672},{},[673],{"type":176,"value":674},"HTTP 头部被转为帧之前，会通过维护一个表结构，通过序号记录已发送的键值对。这是一种索引算法，叫 HPACK。具体的表结构分静态表和动态表，静态表给一些常用的头部标号了号，直接使用就好，动态表则是根据发送的内容动态确定的记号。需要被发送具体内容会被哈夫曼编码以减小体积。",{"type":170,"tag":185,"props":676,"children":677},{},[678],{"type":176,"value":679},"多路复用是指，多个 HTTP 请求可以在同一个 TCP 连接中并行传输。这和 HTTP 1.1 的 Connection：keep-alive 不同，keep-alive 虽然复用 TCP 连接，但是多个响应之间是串行的。",{"type":170,"tag":185,"props":681,"children":682},{},[683],{"type":176,"value":684},"建立连接后，双方通过交换 SETTING 帧，以确认双向的流量窗口控制大小。然后开始发送帧。帧可以在一个连接中根据优先级发送，或是被乱序发送，响应方也能乱序接收。由于流是双向的，只要服务端 SETTING 帧设置的流量窗口大小不为 0，服务端可按照同源策略推送资源给客户端。",{"type":170,"tag":185,"props":686,"children":687},{},[688,689,696,698],{"type":176,"value":336},{"type":170,"tag":222,"props":690,"children":693},{"href":691,"rel":692},"https://coffe1891.gitbook.io/frontend-hard-mode-interview/1/1.5.3",[226],[694],{"type":176,"value":695},"HTTP/2 和 HTTP/1.X 相比的新特性",{"type":176,"value":697},"、",{"type":170,"tag":222,"props":699,"children":702},{"href":700,"rel":701},"https://blog.csdn.net/gaoliang1719/article/details/106346201/",[226],[703],{"type":176,"value":704},"HTTP/2 协议之头部压缩",{"type":170,"tag":178,"props":706,"children":708},{"id":707},"http3-相比-http2-改变了什么东西",[709],{"type":176,"value":710},"HTTP3 相比 HTTP2 改变了什么东西？",{"type":170,"tag":185,"props":712,"children":713},{},[714],{"type":176,"value":715},"HTTP3 使用全新的传输层协议 QUIC，实现了 H2 中的流式传输（HTTP2）、多路复用（TCP）、流量控制（TCP）以及可靠性（TCP）等内容，其网络层协议应用的是 UDP 而不是 TCP，本意是用来解决 TCP 建立链接需要  1.5 RTT 延迟的问题。这种改善在移动端更加有效。",{"type":170,"tag":185,"props":717,"children":718},{},[719],{"type":170,"tag":194,"props":720,"children":723},{"alt":721,"src":722},"HTTP3 VS HTTP2 VS HTTP1.1","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220621003527.png?type=draw&w=80",[],{"type":170,"tag":185,"props":725,"children":726},{},[727,728],{"type":176,"value":336},{"type":170,"tag":222,"props":729,"children":732},{"href":730,"rel":731},"https://mp.weixin.qq.com/s/40YBEWZBaHakDuRuh27fMg",[226],[733],{"type":176,"value":734},"HTTP3 发布了！",{"type":170,"tag":171,"props":736,"children":738},{"id":737},"tls",[739],{"type":176,"value":740},"TLS",{"type":170,"tag":185,"props":742,"children":743},{},[744,745],{"type":176,"value":220},{"type":170,"tag":222,"props":746,"children":749},{"href":747,"rel":748},"https://www.oschina.net/translate/rfc-8446-aka-tls-1-3",[226],[750],{"type":176,"value":751},"详细介绍 RFC 8446（即 TLS 1.3）",{"type":170,"tag":185,"props":753,"children":754},{},[755],{"type":176,"value":756},"TLS 是一种混合式加密系统，同时使用对称加密和非对称加密。它使用非对称加密以加密对称加密所需的密钥。它有多个版本。TLS 1.3 是一种比起 TLS1.2 而言更清晰、更快速、更安全的现代化安全协议。TLS 1.2 有两点问题：1. 包括 POODLE 在内的众多可行漏洞；2. 性能低。为了改善这些问题，IETF 在 2013 年，着手 TLS 1.3 的讨论，主要改进：",{"type":170,"tag":313,"props":758,"children":759},{},[760,765,770,775],{"type":170,"tag":317,"props":761,"children":762},{},[763],{"type":176,"value":764},"减少握手时间",{"type":170,"tag":317,"props":766,"children":767},{},[768],{"type":176,"value":769},"加密更多的握手",{"type":170,"tag":317,"props":771,"children":772},{},[773],{"type":176,"value":774},"改善跨协议攻击的弹性",{"type":170,"tag":317,"props":776,"children":777},{},[778],{"type":176,"value":779},"删除遗留特征",{"type":170,"tag":185,"props":781,"children":782},{},[783],{"type":176,"value":784},"经过 4 年的争论。最终，形成了 RFC 8446 规范。",{"type":170,"tag":786,"props":787,"children":789},"h3",{"id":788},"tls-12-的缺陷",[790],{"type":176,"value":791},"TLS 1.2 的缺陷",{"type":170,"tag":185,"props":793,"children":794},{},[795],{"type":176,"value":796},"TLS 1.2 使用的加密方式有缺陷。其中，非对称加密有如 RSA 和 Diffie-Hellman 协议。",{"type":170,"tag":178,"props":798,"children":800},{"id":799},"rsa",[801],{"type":176,"value":802},"RSA",{"type":170,"tag":185,"props":804,"children":805},{},[806],{"type":170,"tag":194,"props":807,"children":810},{"alt":808,"src":809},"RSA Handshake","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082140.png?w=70",[],{"type":170,"tag":185,"props":812,"children":813},{},[814,816,823],{"type":176,"value":815},"RSA 不保证前向保密。即，如果有人记录了加密对话，然后获取服务器的 RSA 私钥，他们可以将对话解密。而攻击者可能只需 ",{"type":170,"tag":222,"props":817,"children":820},{"href":818,"rel":819},"https://www.wikiwand.com/zh/%E5%BF%83%E8%84%8F%E5%87%BA%E8%A1%80%E6%BC%8F%E6%B4%9E",[226],[821],{"type":176,"value":822},"HeartBleed 漏洞",{"type":176,"value":824},"（缓存区过读）就可以顺利窃取私钥。",{"type":170,"tag":178,"props":826,"children":828},{"id":827},"diffie-hellman",[829],{"type":176,"value":830},"Diffie-Hellman",{"type":170,"tag":185,"props":832,"children":833},{},[834],{"type":170,"tag":194,"props":835,"children":837},{"alt":830,"src":836},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807082812.png?w=70",[],{"type":170,"tag":185,"props":839,"children":840},{},[841],{"type":176,"value":842},"Diffie-Hellman 的缺陷在于，协议的某些参数不安全，且能够被操纵设置；不安全的参数能导致加密更容易被破解。",{"type":170,"tag":178,"props":844,"children":846},{"id":845},"对称加密缺陷",[847],{"type":176,"value":845},{"type":170,"tag":185,"props":849,"children":850},{},[851],{"type":176,"value":852},"TLS 1.2 的对称加密使用的 CBC 模式密码和流式密码也有缺陷。",{"type":170,"tag":178,"props":854,"children":856},{"id":855},"downgrade-attack",[857],{"type":176,"value":858},"Downgrade Attack",{"type":170,"tag":185,"props":860,"children":861},{},[862],{"type":176,"value":863},"由于 TLS 1.2 握手协商密钥的部分没有加密。所以中间人可以拦截客户端的请求，选择发送方和接收方都支持的弱密码，伪造请求。",{"type":170,"tag":185,"props":865,"children":866},{},[867],{"type":170,"tag":194,"props":868,"children":870},{"alt":858,"src":869},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807090034.png?w=70",[],{"type":170,"tag":786,"props":872,"children":874},{"id":873},"_0-rtt",[875],{"type":176,"value":876},"0-RTT",{"type":170,"tag":185,"props":878,"children":879},{},[880],{"type":176,"value":881},"TLS 1.3 中，通讯双方可以得到一个“恢复主密钥”的密钥，用于从中断的连接中直接恢复通讯。但是有被拦截导致重放攻击的风险。",{"type":170,"tag":185,"props":883,"children":884},{},[885],{"type":170,"tag":194,"props":886,"children":889},{"alt":887,"src":888},"0-RTT 重放攻击","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20200807081140.png?w=70",[],{"type":170,"tag":171,"props":891,"children":893},{"id":892},"https",[894],{"type":176,"value":895},"HTTPS",{"type":170,"tag":786,"props":897,"children":899},{"id":898},"links",[900],{"type":176,"value":901},"Links",{"type":170,"tag":185,"props":903,"children":904},{},[905,906],{"type":176,"value":220},{"type":170,"tag":222,"props":907,"children":910},{"href":908,"rel":909},"https://zhuanlan.zhihu.com/p/26682342",[226],[911],{"type":176,"value":912},"深入理解 HTTPS 原理、过程与实践",{"type":170,"tag":178,"props":914,"children":916},{"id":915},"https-的握手过程是怎样的",[917],{"type":176,"value":918},"HTTPS 的握手过程是怎样的？",{"type":170,"tag":185,"props":920,"children":921},{},[922],{"type":176,"value":923},"总的来说是一个非对称加密+对称加密的过程。客户端通过一个随机数加上服务器的公钥来生成预主密钥，然后双方再通过 Client Hello 和 Server Hello 时的两个随机数生成会话密钥。生成预主密钥的过程是非对称加密的，因为只有服务端用私钥才能解得客户端的随机数。而之后使用会话密钥主要是出于性能考虑。",{"type":170,"tag":185,"props":925,"children":926},{},[927],{"type":170,"tag":194,"props":928,"children":931},{"alt":929,"src":930},"HTTPS 握手过程","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220620024738.png",[],{"type":170,"tag":178,"props":933,"children":935},{"id":934},"ca-怎么解决中间人问题",[936],{"type":176,"value":937},"CA 怎么解决中间人问题？",{"type":170,"tag":185,"props":939,"children":940},{},[941],{"type":176,"value":942},"CA 主要是用来防范服务器端返回 Server Hello 前就和客户端提供了假的公钥。CA 是一个可信的第三方机构，客户端想要服务器的公钥，需要从 CA 获得。CA 返回公钥以及数字签名。客户端只要拿到公钥后根据 CA 公钥对其计算获得摘要，再将摘要和签名进行对比，就能知道是否拿到了可信的公钥。",{"type":170,"tag":185,"props":944,"children":945},{},[946,947],{"type":176,"value":336},{"type":170,"tag":222,"props":948,"children":951},{"href":949,"rel":950},"https://www.jianshu.com/p/9de06222793b",[226],[952],{"type":176,"value":953},"HTTPS CA 原理",{"type":170,"tag":178,"props":955,"children":957},{"id":956},"数字签名是什么",[958],{"type":176,"value":959},"数字签名是什么？",{"type":170,"tag":185,"props":961,"children":962},{},[963],{"type":176,"value":964},"数字签名是只有信息发送者才能产生的一段文本，信息接收方可以通过签名计算出接受到的文本是否经过了修改。如果我要发送 A，我会用私钥将 A 进行加密获得 B，并把 A 和 B 同时发送过去。B 就是数字签名。因为我的公钥是公开的，所以接受方可以通过使用我的公钥去计算 A，如果获得和 B 一致的结果，那么说明信息没有被篡改。",{"type":170,"tag":171,"props":966,"children":968},{"id":967},"攻防",[969],{"type":176,"value":967},{"type":170,"tag":178,"props":971,"children":973},{"id":972},"https-降级攻击的原理是什么",[974],{"type":176,"value":975},"HTTPS 降级攻击的原理是什么？",{"type":170,"tag":185,"props":977,"children":978},{},[979],{"type":176,"value":980},"客服端与服务端协商加密协议的过程当中，如果攻击者拦截了客户端（或操控客户端）并代替它向服务端协商使用仅支持有漏洞的协议。如果服务端同意了，那么建立连接后，攻击者就能使用该协议的已知漏洞的破解手段，去破解通讯内容了。",{"type":170,"tag":178,"props":982,"children":984},{"id":983},"syn-攻击的基本原理是什么",[985],{"type":176,"value":986},"SYN 攻击的基本原理是什么？",{"type":170,"tag":185,"props":988,"children":989},{},[990,992,999],{"type":176,"value":991},"SYN 洪水攻击是 DDOS 攻击中最常见的攻击类型。攻击者向服务器发送大量伪造的 TCP 连接请求，而源 IP 是伪造的。由于服务器收不到伪造源回应的 ACK 数据包，就会不断重发。一般应对方式是：减少重发次数、使用 ",{"type":170,"tag":222,"props":993,"children":996},{"href":994,"rel":995},"https://baike.baidu.com/item/syn%20cookie/6898884?fr=aladdin",[226],[997],{"type":176,"value":998},"SYN Cookie",{"type":176,"value":1000},"、增加 backlog 队列长度、限制 SYN 并发数。",{"type":170,"tag":185,"props":1002,"children":1003},{},[1004,1005],{"type":176,"value":336},{"type":170,"tag":222,"props":1006,"children":1009},{"href":1007,"rel":1008},"https://www.qycn.com/about/hd/2049.html",[226],[1010],{"type":176,"value":1011},"服务器遭到 SYN 攻击该如何处理呢？",{"type":170,"tag":178,"props":1013,"children":1015},{"id":1014},"请求头加-csrf-参数为什么能防止-csrf-攻击",[1016],{"type":176,"value":1017},"请求头加 CSRF 参数为什么能防止 CSRF 攻击？",{"type":170,"tag":185,"props":1019,"children":1020},{},[1021],{"type":176,"value":1022},"跨站请求伪造是攻击者通过在钓鱼站点发起被钓网站请求（如图片地址），以达到攻击目的。防御方式一般有两种：",{"type":170,"tag":313,"props":1024,"children":1025},{},[1026,1031],{"type":170,"tag":317,"props":1027,"children":1028},{},[1029],{"type":176,"value":1030},"使用 SameSite Cookie，禁用第三方 Cookie",{"type":170,"tag":317,"props":1032,"children":1033},{},[1034],{"type":176,"value":1035},"在请求头中加入 CSRF Token，这样攻击者使用钓鱼站点发起请求时，由于不能设置请求头，所以请求在服务端会被拒绝",{"type":170,"tag":171,"props":1037,"children":1039},{"id":1038},"cdn",[1040],{"type":176,"value":1041},"CDN",{"type":170,"tag":178,"props":1043,"children":1045},{"id":1044},"cdn-有什么好处",[1046],{"type":176,"value":1047},"CDN 有什么好处？",{"type":170,"tag":185,"props":1049,"children":1050},{},[1051],{"type":176,"value":1052},"对页面加载而言，CDN 可以减少请求时间、突破浏览器同域的 TCP 并发数、节约 Cookie 带宽。",{"type":170,"tag":171,"props":1054,"children":1056},{"id":1055},"浏览器",[1057],{"type":176,"value":1055},{"type":170,"tag":178,"props":1059,"children":1061},{"id":1060},"url-由哪些部分组成",[1062],{"type":176,"value":1063},"URL 由哪些部分组成？",{"type":170,"tag":185,"props":1065,"children":1066},{},[1067],{"type":176,"value":1068},"协议头、域名、端口、目录、文件名（index.html）、页面锚、参数。",{"type":170,"tag":178,"props":1070,"children":1072},{"id":1071},"怎么做跨域",[1073],{"type":176,"value":1074},"怎么做跨域？",{"type":170,"tag":185,"props":1076,"children":1077},{},[1078],{"type":176,"value":1079},"用代理服务器、CORS、iFrame 或者 WebSocket 都可以。",{"type":170,"tag":185,"props":1081,"children":1082},{},[1083],{"type":176,"value":1084},"服务器可以忽略同源限制；WebSocket 和 CORS 不受同源影响；iFrame 需要浏览器加载一个跨域页面，然后和主页面用 postMessage 或者哈希监听的方式通信，让 iFrame 中的脚本代替主页面发送请求。",{"type":170,"tag":178,"props":1086,"children":1088},{"id":1087},"正向代理和反向代理的区别是",[1089],{"type":176,"value":1090},"正向代理和反向代理的区别是？",{"type":170,"tag":185,"props":1092,"children":1093},{},[1094],{"type":176,"value":1095},"正向代理为用户服务，反向代理为服务器服务，分别对应“VPN”和“负载均衡”的概念。",{"type":170,"tag":178,"props":1097,"children":1099},{"id":1098},"cors-运作流程是怎样的",[1100],{"type":176,"value":1101},"CORS 运作流程是怎样的？",{"type":170,"tag":185,"props":1103,"children":1104},{},[1105],{"type":176,"value":1106},"CORS 即跨域资源共享机制。浏览器在请求资源前通过携带 Origin 字段的 OPTIONS 请求向服务器索取设置有 Access-Control-Allow-Methods、Access-Control-Allow-Headers、Access-Control-Allow-Origin 的响应。在得到响应的允许后再继续发送请求。",{"type":170,"tag":178,"props":1108,"children":1110},{"id":1109},"什么是私有网络请求攻击",[1111],{"type":176,"value":1112},"什么是私有网络请求攻击？",{"type":170,"tag":185,"props":1114,"children":1115},{},[1116],{"type":176,"value":1117},"在内网域名向 localhost 发起请求就算一种私有网络请求。而恶意代码通过向比浏览器当前浏览页面的域名 IP 更私密的 IP 地址发起请求，以达到获取信息或攻击手段的方式就是私有网络请求攻击。",{"type":170,"tag":185,"props":1119,"children":1120},{},[1121,1123,1130,1132],{"type":176,"value":1122},"自 Chrome 96 后， Chrome 开始实施私有网络控制策略，需要部署以下两个请求头以解除控制：",{"type":170,"tag":1124,"props":1125,"children":1127},"code",{"className":1126},[],[1128],{"type":176,"value":1129},"Access-Control-Request-Private-Network: true",{"type":176,"value":1131}," 和 ",{"type":170,"tag":1124,"props":1133,"children":1135},{"className":1134},[],[1136],{"type":176,"value":1137},"Access-Control-Allow-Private-Network: true",{"type":170,"tag":185,"props":1139,"children":1140},{},[1141,1142],{"type":176,"value":336},{"type":170,"tag":222,"props":1143,"children":1146},{"href":1144,"rel":1145},"https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&mid=2247491913&idx=1&sn=2bb0a28358c02a8ec1832781205df72c&chksm=c2e11462f5969d74fac277131e1ba8c417ec86754b2f1b2dbe8e238ca27d5c2eaebe602ec803&token=1851580176&lang=zh_CN&scene=21#wechat_redirect",[226],[1147],{"type":176,"value":1148},"Chrome 重大更新，CORS 增加了两个新的请求头？ |  code 秘密花园",{"type":170,"tag":171,"props":1150,"children":1152},{"id":1151},"阅读更多",[1153],{"type":176,"value":1151},{"type":170,"tag":313,"props":1155,"children":1156},{},[1157],{"type":170,"tag":317,"props":1158,"children":1159},{},[1160],{"type":170,"tag":222,"props":1161,"children":1164},{"href":1162,"rel":1163},"https://juejin.im/post/6844903518826921998",[226],[1165],{"type":176,"value":1166},"为你的网站带上帽子 | 使用 helmet 保护 Express 应用",{"title":163,"searchDepth":1168,"depth":1168,"links":1169},2,[1170,1171,1172,1173,1174,1179,1182,1183,1184,1185],{"id":173,"depth":1168,"text":173},{"id":201,"depth":1168,"text":204},{"id":346,"depth":1168,"text":349},{"id":380,"depth":1168,"text":383},{"id":737,"depth":1168,"text":740,"children":1175},[1176,1178],{"id":788,"depth":1177,"text":791},3,{"id":873,"depth":1177,"text":876},{"id":892,"depth":1168,"text":895,"children":1180},[1181],{"id":898,"depth":1177,"text":901},{"id":967,"depth":1168,"text":967},{"id":1038,"depth":1168,"text":1041},{"id":1055,"depth":1168,"text":1055},{"id":1151,"depth":1168,"text":1151},"markdown","content:6.maps:_computer:network.md","content","6.maps/_computer/network.md","6.maps/_computer/network","md",[1193,1197],{"_path":1194,"title":1195,"description":1196},"/maps/_computer/encoding/hash-collision","哈希冲突","哈希冲突是指两个不同的键值被哈希函数映射到了同一个位置。",{"_path":1198,"title":1199,"description":1200},"/maps/_computer/security","Security Mind Map","网络安全知识导图，包含 XSS、CSRF、CSS Exfiltration 等常见攻击手段的原理分析和防范措施。",1742958680110]