[{"data":1,"prerenderedAt":335},["ShallowReactive",2],{"navigation":3,"/maps/_computer/encoding/hash-collision":155,"/maps/_computer/encoding/hash-collision-surround":326},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":320,"_id":321,"_source":322,"_file":323,"_stem":324,"_extension":325},"/maps/_computer/encoding/hash-collision","encoding",false,true,"","哈希冲突","哈希冲突是指两个不同的键值被哈希函数映射到了同一个位置。",{"type":164,"children":165,"toc":315},"root",[166,174,193,199,214,229,234,239,247,262,267,274,279,284,297,302],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"线性寻址",[172],{"type":173,"value":170},"text",{"type":167,"tag":175,"props":176,"children":178},"h4",{"id":177},"cuckoo-hashing",[179],{"type":167,"tag":180,"props":181,"children":185},"a",{"href":182,"rel":183},"https://codecapsule.com/2013/07/20/cuckoo-hashing/",[184],"nofollow",[186],{"type":167,"tag":187,"props":188,"children":190},"i",{"title":189},"布谷鸟哈希、杜鹃哈希",[191],{"type":173,"value":192},"Cuckoo Hashing",{"type":167,"tag":194,"props":195,"children":196},"p",{},[197],{"type":173,"value":198},"最初的布谷鸟哈希使用了 hash1() 和 hash2() 两个哈希函数以及 T1、T2 两个表来存放键值对。它保证大多数键值对能在 T1 或 T2 中的一次哈希中就被找到（O(1)），这要优于某种情况下需要连续查找十几个位置的线性寻址方法。不过其弱势也很明显，其插入非常消耗性能，因为要对入口进行重排。如果 hash1(x) 在 T1 和 hash2(x) 在 T2 的位置都被占了，那么选择其中一个表中的元素如 T1 中的 y，用 x 把 y 的位置占了（鸠占鹊巢），然后继续计算 hash2(y) 在 T2 的位置。如果此时又遇到了碰撞，则继续递归地计算鸠占鹊巢（用 y 占新元素然后再找新元素的位置）。当然，如果计算了一堆位置仍然有碰撞存在，那只能选择给桶扩容了。一般情况下，会在负载因子大于 0.5 时主动扩容。而多个表带来了另外一个问题，布谷鸟哈希需要在多个位置寻找元素，这这些位置并不是临近的。在硬件上，其读取速度取决于硬盘随机读取速度。",{"type":167,"tag":200,"props":201,"children":202},"ul",{},[203],{"type":167,"tag":204,"props":205,"children":206},"li",{},[207],{"type":167,"tag":180,"props":208,"children":211},{"href":209,"rel":210},"https://www.bilibili.com/video/BV1dh411x761",[184],[212],{"type":173,"value":213},"CMU 15-445/645 数据库-LEC6-04-3-布谷鸟哈希",{"type":167,"tag":175,"props":215,"children":217},{"id":216},"hopscotch-hashing",[218],{"type":167,"tag":180,"props":219,"children":222},{"href":220,"rel":221},"https://codecapsule.com/2013/08/11/hopscotch-hashing/",[184],[223],{"type":167,"tag":187,"props":224,"children":226},{"title":225},"跳房子哈希",[227],{"type":173,"value":228},"Hopscotch hashing",{"type":167,"tag":194,"props":230,"children":231},{},[232],{"type":173,"value":233},"跳房子哈希规定每一个桶都拥有其在储存顺序中接下来 H 个位置的邻域，当出现碰撞时，值会储存到桶或其邻域中，这保证了常数级的读取时间，且相比布谷鸟哈希提高了缓存利用率。",{"type":167,"tag":194,"props":235,"children":236},{},[237],{"type":173,"value":238},"在给新元素寻找空位时，使用线性寻址。如果找到的这个空位的地址不在初始位置或其邻域中，那么回溯 H 个地址并逐个检查这些地址能否于空位进行交换。如果不会把值抛出其对应的邻域，就能交换，这样一来空位就离其初始地址要近一些。一直交换，直到能把新元素储存到其初始位置的邻域中。",{"type":167,"tag":194,"props":240,"children":241},{},[242],{"type":167,"tag":243,"props":244,"children":246},"img",{"alt":225,"src":245},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220323203225.png?w=60",[],{"type":167,"tag":175,"props":248,"children":250},{"id":249},"robin-hood-hashing",[251],{"type":167,"tag":180,"props":252,"children":255},{"href":253,"rel":254},"https://codecapsule.com/2013/11/11/robin-hood-hashing/",[184],[256],{"type":167,"tag":187,"props":257,"children":259},{"title":258},"罗宾汉哈希",[260],{"type":173,"value":261},"Robin Hood hashing",{"type":167,"tag":194,"props":263,"children":264},{},[265],{"type":173,"value":266},"罗宾汉哈希记录下每一个元素其储存位置与初始位置的偏移量 DIB，并在插入新元素时对比这些偏移量。它使用线性寻址逐个对比当前位置与新元素的 DIB，并把 DIB 更大的那个储存当前位置，然后继续扫描，直到放下所有元素。这种算法会使得所有元素距离的 DIB 的方差较小，让读取时间解决常数级。",{"type":167,"tag":194,"props":268,"children":269},{},[270],{"type":167,"tag":243,"props":271,"children":273},{"alt":258,"src":272},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220323210710.png?w=60",[],{"type":167,"tag":194,"props":275,"children":276},{},[277],{"type":173,"value":278},"判断元素是否在表中的算法会比其它哈希稍微繁琐一些，因为它使用线性扫描会得到四种情况：找到该元素、找到空桶、找到某扫描元素其 DIB 小于当前扫描距离、找到某扫描元素其 DIB 大于等于当前扫描距离。其中，找到某不等于该元素的元素，如果其 DIB 大于等于当前扫描距离，则需要继续线性扫描，直到遇见剩下三种情况才能分辨该元素是否位于表中，停止扫描。",{"type":167,"tag":194,"props":280,"children":281},{},[282],{"type":173,"value":283},"为了使删除元素不需要像插入元素那样交换入口的位置，一般会给删除的对象打一个墓碑标记，以在后续插入时将它当作一个空元素。Emmanuel 还介绍了一种性能更好的删除方法，向后移位法，见原文引用。",{"type":167,"tag":200,"props":285,"children":286},{},[287],{"type":167,"tag":204,"props":288,"children":289},{},[290],{"type":167,"tag":180,"props":291,"children":294},{"href":292,"rel":293},"https://www.bilibili.com/video/BV1RL4y1v7vQ",[184],[295],{"type":173,"value":296},"CMU 15-445/645 数据库-LEC6-04-2-罗宾汉哈希",{"type":167,"tag":168,"props":298,"children":300},{"id":299},"平方探测",[301],{"type":173,"value":299},{"type":167,"tag":200,"props":303,"children":304},{},[305],{"type":167,"tag":204,"props":306,"children":307},{},[308],{"type":167,"tag":180,"props":309,"children":312},{"href":310,"rel":311},"https://www.bilibili.com/video/BV1qJ411k7wc",[184],[313],{"type":173,"value":314},"平方探测法",{"title":160,"searchDepth":316,"depth":316,"links":317},2,[318,319],{"id":170,"depth":316,"text":170},{"id":299,"depth":316,"text":299},"markdown","content:6.maps:_computer:encoding:hash-collision.md","content","6.maps/_computer/encoding/hash-collision.md","6.maps/_computer/encoding/hash-collision","md",[327,331],{"_path":328,"title":329,"description":330},"/maps/_computer/encoding/emoji","Emoji","Emoji 是一种表情符号，是一种用来在电子通信中传达情感的符号。",{"_path":332,"title":333,"description":334},"/maps/_computer/network","计算机网络","计算机网络基础知识全览，包含 TCP/IP、HTTP、HTTPS、TLS 等协议的详细解析，以及网络安全、CDN、跨域等实践内容。",1742348692964]