[{"data":1,"prerenderedAt":1117},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":161,"/maps/_hire/intern-surround":1108},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":1102,"_id":1103,"_source":1104,"_file":1105,"_stem":1106,"_extension":1107},"/maps/_hire/intern","_hire",false,true,"","前端笔试题库","面向实习生或 B 端 3~5 年经验前端",{"type":170,"children":171,"toc":1096},"root",[172,180,186,199,205,210,230,240,245,249,262,272,277,281,298,308,313,326,330,338,349,354,358,366,376,381,389,409,414,419,438,453,458,463,477,481,503,508,522,526,539,544,558,572,577,591,605,616,630,644,648,656,661,667,681,686,691,705,719,724,915,928,942,947,952,984,989,995,1009,1023,1029,1043,1057,1063,1077,1091],{"type":173,"tag":174,"props":175,"children":176},"element","style",{},[177],{"type":178,"value":179},"text","\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":173,"tag":181,"props":182,"children":184},"h2",{"id":183},"算法题",[185],{"type":178,"value":183},{"type":173,"tag":187,"props":188,"children":190},"h4",{"id":189},"简单-斐波那契数列",[191],{"type":173,"tag":192,"props":193,"children":197},"a",{"href":194,"rel":195},"https://leetcode.cn/problems/fibonacci-number/",[196],"nofollow",[198],{"type":178,"value":189},{"type":173,"tag":200,"props":201,"children":202},"p",{},[203],{"type":178,"value":204},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":173,"tag":200,"props":206,"children":207},{},[208],{"type":178,"value":209},"后续提问方向：",{"type":173,"tag":211,"props":212,"children":213},"ul",{},[214,225],{"type":173,"tag":215,"props":216,"children":217},"li",{},[218],{"type":173,"tag":192,"props":219,"children":222},{"href":220,"rel":221},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[196],[223],{"type":178,"value":224},"简单-非递归解法（递推）",{"type":173,"tag":215,"props":226,"children":227},{},[228],{"type":178,"value":229},"简单-时间复杂度最小的解法（枚举）",{"type":173,"tag":187,"props":231,"children":233},{"id":232},"简单-合并有序链表",[234],{"type":173,"tag":192,"props":235,"children":238},{"href":236,"rel":237},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[196],[239],{"type":178,"value":232},{"type":173,"tag":200,"props":241,"children":242},{},[243],{"type":178,"value":244},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":173,"tag":200,"props":246,"children":247},{},[248],{"type":178,"value":209},{"type":173,"tag":211,"props":250,"children":251},{},[252],{"type":173,"tag":215,"props":253,"children":254},{},[255],{"type":173,"tag":192,"props":256,"children":259},{"href":257,"rel":258},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[196],[260],{"type":178,"value":261},"简单-空间复杂度最小的解法（迭代）",{"type":173,"tag":187,"props":263,"children":265},{"id":264},"简单-反转链表",[266],{"type":173,"tag":192,"props":267,"children":270},{"href":268,"rel":269},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[196],[271],{"type":178,"value":264},{"type":173,"tag":200,"props":273,"children":274},{},[275],{"type":178,"value":276},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":173,"tag":200,"props":278,"children":279},{},[280],{"type":178,"value":209},{"type":173,"tag":211,"props":282,"children":283},{},[284,293],{"type":173,"tag":215,"props":285,"children":286},{},[287],{"type":173,"tag":192,"props":288,"children":291},{"href":289,"rel":290},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[196],[292],{"type":178,"value":261},{"type":173,"tag":215,"props":294,"children":295},{},[296],{"type":178,"value":297},"中等-环形链表或包含环的链表的反转",{"type":173,"tag":187,"props":299,"children":301},{"id":300},"中等-有效的括号字符串",[302],{"type":173,"tag":192,"props":303,"children":306},{"href":304,"rel":305},"https://leetcode.cn/problems/valid-parenthesis-string/",[196],[307],{"type":178,"value":300},{"type":173,"tag":200,"props":309,"children":310},{},[311],{"type":178,"value":312},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":173,"tag":211,"props":314,"children":315},{},[316,321],{"type":173,"tag":215,"props":317,"children":318},{},[319],{"type":178,"value":320},"\")(()))\"          =>  false",{"type":173,"tag":215,"props":322,"children":323},{},[324],{"type":178,"value":325},"\"(())((()())())\"  =>  true",{"type":173,"tag":200,"props":327,"children":328},{},[329],{"type":178,"value":209},{"type":173,"tag":211,"props":331,"children":332},{},[333],{"type":173,"tag":215,"props":334,"children":335},{},[336],{"type":178,"value":337},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":173,"tag":187,"props":339,"children":341},{"id":340},"中等-数组第-k-个最大元素",[342],{"type":173,"tag":192,"props":343,"children":346},{"href":344,"rel":345},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[196],[347],{"type":178,"value":348},"中等-数组第 K 个最大元素",{"type":173,"tag":200,"props":350,"children":351},{},[352],{"type":178,"value":353},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":173,"tag":200,"props":355,"children":356},{},[357],{"type":178,"value":209},{"type":173,"tag":211,"props":359,"children":360},{},[361],{"type":173,"tag":215,"props":362,"children":363},{},[364],{"type":178,"value":365},"困难-使用时间复杂度为 O(n) 的解法。",{"type":173,"tag":187,"props":367,"children":369},{"id":368},"中等-二叉树的层序遍历",[370],{"type":173,"tag":192,"props":371,"children":374},{"href":372,"rel":373},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[196],[375],{"type":178,"value":368},{"type":173,"tag":200,"props":377,"children":378},{},[379],{"type":178,"value":380},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":173,"tag":200,"props":382,"children":383},{},[384],{"type":173,"tag":385,"props":386,"children":388},"img",{"alt":166,"src":387},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":173,"tag":200,"props":390,"children":391},{},[392,394,400,402,407],{"type":178,"value":393},"输入：如上图所示。输出：[[3],",{"type":173,"tag":395,"props":396,"children":397},"span",{},[398],{"type":178,"value":399},"9,20",{"type":178,"value":401},",",{"type":173,"tag":395,"props":403,"children":404},{},[405],{"type":178,"value":406},"15,7",{"type":178,"value":408},"]",{"type":173,"tag":181,"props":410,"children":412},{"id":411},"编程题",[413],{"type":178,"value":411},{"type":173,"tag":187,"props":415,"children":417},{"id":416},"简单-bind",[418],{"type":178,"value":416},{"type":173,"tag":420,"props":421,"children":422},"details",{},[423,425,431,432],{"type":178,"value":424},"\n  ",{"type":173,"tag":426,"props":427,"children":428},"summary",{},[429],{"type":178,"value":430},"用例",{"type":178,"value":424},{"type":173,"tag":433,"props":434,"children":435},"highlight",{},[436],{"type":178,"value":437},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":173,"tag":420,"props":439,"children":440},{},[441,442,447,448],{"type":178,"value":424},{"type":173,"tag":426,"props":443,"children":444},{},[445],{"type":178,"value":446},"参考实现",{"type":178,"value":424},{"type":173,"tag":433,"props":449,"children":450},{},[451],{"type":178,"value":452},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":173,"tag":187,"props":454,"children":456},{"id":455},"中等-instanceof",[457],{"type":178,"value":455},{"type":173,"tag":200,"props":459,"children":460},{},[461],{"type":178,"value":462},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":173,"tag":420,"props":464,"children":465},{},[466,467,471,472],{"type":178,"value":424},{"type":173,"tag":426,"props":468,"children":469},{},[470],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":473,"children":474},{},[475],{"type":178,"value":476},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":173,"tag":200,"props":478,"children":479},{},[480],{"type":178,"value":209},{"type":173,"tag":211,"props":482,"children":483},{},[484,489],{"type":173,"tag":215,"props":485,"children":486},{},[487],{"type":178,"value":488},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":173,"tag":215,"props":490,"children":491},{},[492,494,501],{"type":178,"value":493},"偏门-创造一个类 God 使得 ",{"type":173,"tag":495,"props":496,"children":498},"code",{"className":497},[],[499],{"type":178,"value":500},"null instanceof God",{"type":178,"value":502}," 为真",{"type":173,"tag":187,"props":504,"children":506},{"id":505},"中等-深拷贝函数",[507],{"type":178,"value":505},{"type":173,"tag":420,"props":509,"children":510},{},[511,512,516,517],{"type":178,"value":424},{"type":173,"tag":426,"props":513,"children":514},{},[515],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":518,"children":519},{},[520],{"type":178,"value":521},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":173,"tag":200,"props":523,"children":524},{},[525],{"type":178,"value":209},{"type":173,"tag":211,"props":527,"children":528},{},[529,534],{"type":173,"tag":215,"props":530,"children":531},{},[532],{"type":178,"value":533},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":173,"tag":215,"props":535,"children":536},{},[537],{"type":178,"value":538},"中等-如何处理对象间循环引用",{"type":173,"tag":187,"props":540,"children":542},{"id":541},"中等-柯里化函数",[543],{"type":178,"value":541},{"type":173,"tag":420,"props":545,"children":546},{},[547,548,552,553],{"type":178,"value":424},{"type":173,"tag":426,"props":549,"children":550},{},[551],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":554,"children":555},{},[556],{"type":178,"value":557},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":173,"tag":420,"props":559,"children":560},{},[561,562,566,567],{"type":178,"value":424},{"type":173,"tag":426,"props":563,"children":564},{},[565],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":568,"children":569},{},[570],{"type":178,"value":571},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":173,"tag":187,"props":573,"children":575},{"id":574},"中等-列表数据转树结构",[576],{"type":178,"value":574},{"type":173,"tag":420,"props":578,"children":579},{},[580,581,585,586],{"type":178,"value":424},{"type":173,"tag":426,"props":582,"children":583},{},[584],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":587,"children":588},{},[589],{"type":178,"value":590},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":173,"tag":420,"props":592,"children":593},{},[594,595,599,600],{"type":178,"value":424},{"type":173,"tag":426,"props":596,"children":597},{},[598],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":601,"children":602},{},[603],{"type":178,"value":604},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":173,"tag":187,"props":606,"children":608},{"id":607},"中等-promisemapseries",[609],{"type":173,"tag":192,"props":610,"children":613},{"href":611,"rel":612},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[196],[614],{"type":178,"value":615},"中等-Promise.mapSeries",{"type":173,"tag":420,"props":617,"children":618},{},[619,620,624,625],{"type":178,"value":424},{"type":173,"tag":426,"props":621,"children":622},{},[623],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":626,"children":627},{},[628],{"type":178,"value":629},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":173,"tag":420,"props":631,"children":632},{},[633,634,638,639],{"type":178,"value":424},{"type":173,"tag":426,"props":635,"children":636},{},[637],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":640,"children":641},{},[642],{"type":178,"value":643},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":173,"tag":200,"props":645,"children":646},{},[647],{"type":178,"value":209},{"type":173,"tag":211,"props":649,"children":650},{},[651],{"type":173,"tag":215,"props":652,"children":653},{},[654],{"type":178,"value":655},"困难-给实现加上类型（TypeScript）",{"type":173,"tag":181,"props":657,"children":659},{"id":658},"综合题",[660],{"type":178,"value":658},{"type":173,"tag":187,"props":662,"children":664},{"id":663},"简单-统计当前页面用到的所有-html-标签的种类",[665],{"type":178,"value":666},"简单-统计当前页面用到的所有 HTML 标签的种类",{"type":173,"tag":420,"props":668,"children":669},{},[670,671,675,676],{"type":178,"value":424},{"type":173,"tag":426,"props":672,"children":673},{},[674],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":677,"children":678},{},[679],{"type":178,"value":680},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":173,"tag":187,"props":682,"children":684},{"id":683},"中等-商品排序",[685],{"type":178,"value":683},{"type":173,"tag":200,"props":687,"children":688},{},[689],{"type":178,"value":690},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":173,"tag":420,"props":692,"children":693},{},[694,695,699,700],{"type":178,"value":424},{"type":173,"tag":426,"props":696,"children":697},{},[698],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":701,"children":702},{},[703],{"type":178,"value":704},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":173,"tag":420,"props":706,"children":707},{},[708,709,713,714],{"type":178,"value":424},{"type":173,"tag":426,"props":710,"children":711},{},[712],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":715,"children":716},{},[717],{"type":178,"value":718},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":173,"tag":187,"props":720,"children":722},{"id":721},"困难-给定以下递归函数提问",[723],{"type":178,"value":721},{"type":173,"tag":725,"props":726,"children":730},"pre",{"className":727,"code":728,"language":729,"meta":166,"style":166},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[731],{"type":173,"tag":495,"props":732,"children":733},{"__ignoreMap":166},[734,773,839,874,883,905],{"type":173,"tag":395,"props":735,"children":738},{"class":736,"line":737},"line",1,[739,745,751,757,763,768],{"type":173,"tag":395,"props":740,"children":742},{"style":741},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[743],{"type":178,"value":744},"function",{"type":173,"tag":395,"props":746,"children":748},{"style":747},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[749],{"type":178,"value":750}," recur",{"type":173,"tag":395,"props":752,"children":754},{"style":753},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[755],{"type":178,"value":756},"(",{"type":173,"tag":395,"props":758,"children":760},{"style":759},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[761],{"type":178,"value":762},"n",{"type":173,"tag":395,"props":764,"children":765},{"style":753},[766],{"type":178,"value":767},")",{"type":173,"tag":395,"props":769,"children":770},{"style":753},[771],{"type":178,"value":772}," {\n",{"type":173,"tag":395,"props":774,"children":776},{"class":736,"line":775},2,[777,783,789,794,800,806,811,816,821,826,830,834],{"type":173,"tag":395,"props":778,"children":780},{"style":779},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[781],{"type":178,"value":782},"    if",{"type":173,"tag":395,"props":784,"children":786},{"style":785},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[787],{"type":178,"value":788}," (",{"type":173,"tag":395,"props":790,"children":792},{"style":791},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[793],{"type":178,"value":762},{"type":173,"tag":395,"props":795,"children":797},{"style":796},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[798],{"type":178,"value":799}," ===",{"type":173,"tag":395,"props":801,"children":803},{"style":802},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[804],{"type":178,"value":805}," 0",{"type":173,"tag":395,"props":807,"children":808},{"style":785},[809],{"type":178,"value":810},") ",{"type":173,"tag":395,"props":812,"children":813},{"style":791},[814],{"type":178,"value":815},"console",{"type":173,"tag":395,"props":817,"children":818},{"style":753},[819],{"type":178,"value":820},".",{"type":173,"tag":395,"props":822,"children":823},{"style":747},[824],{"type":178,"value":825},"log",{"type":173,"tag":395,"props":827,"children":828},{"style":785},[829],{"type":178,"value":756},{"type":173,"tag":395,"props":831,"children":832},{"style":791},[833],{"type":178,"value":762},{"type":173,"tag":395,"props":835,"children":836},{"style":785},[837],{"type":178,"value":838},")\n",{"type":173,"tag":395,"props":840,"children":842},{"class":736,"line":841},3,[843,848,852,856,860,865,870],{"type":173,"tag":395,"props":844,"children":845},{"style":779},[846],{"type":178,"value":847},"    else",{"type":173,"tag":395,"props":849,"children":850},{"style":747},[851],{"type":178,"value":750},{"type":173,"tag":395,"props":853,"children":854},{"style":785},[855],{"type":178,"value":756},{"type":173,"tag":395,"props":857,"children":858},{"style":791},[859],{"type":178,"value":762},{"type":173,"tag":395,"props":861,"children":862},{"style":796},[863],{"type":178,"value":864}," -",{"type":173,"tag":395,"props":866,"children":867},{"style":802},[868],{"type":178,"value":869}," 1",{"type":173,"tag":395,"props":871,"children":872},{"style":785},[873],{"type":178,"value":838},{"type":173,"tag":395,"props":875,"children":877},{"class":736,"line":876},4,[878],{"type":173,"tag":395,"props":879,"children":880},{"style":753},[881],{"type":178,"value":882},"}\n",{"type":173,"tag":395,"props":884,"children":886},{"class":736,"line":885},5,[887,892,896,901],{"type":173,"tag":395,"props":888,"children":889},{"style":747},[890],{"type":178,"value":891},"recur",{"type":173,"tag":395,"props":893,"children":894},{"style":791},[895],{"type":178,"value":756},{"type":173,"tag":395,"props":897,"children":898},{"style":802},[899],{"type":178,"value":900},"500000",{"type":173,"tag":395,"props":902,"children":903},{"style":791},[904],{"type":178,"value":838},{"type":173,"tag":395,"props":906,"children":908},{"class":736,"line":907},6,[909],{"type":173,"tag":395,"props":910,"children":912},{"style":911},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[913],{"type":178,"value":914},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":173,"tag":211,"props":916,"children":917},{},[918,923],{"type":173,"tag":215,"props":919,"children":920},{},[921],{"type":178,"value":922},"简单-将该函数转换为循环的写法避免栈溢出",{"type":173,"tag":215,"props":924,"children":925},{},[926],{"type":178,"value":927},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":173,"tag":420,"props":929,"children":930},{},[931,932,936,937],{"type":178,"value":424},{"type":173,"tag":426,"props":933,"children":934},{},[935],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":938,"children":939},{},[940],{"type":178,"value":941},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":173,"tag":187,"props":943,"children":945},{"id":944},"困难-商品全排列",[946],{"type":178,"value":944},{"type":173,"tag":200,"props":948,"children":949},{},[950],{"type":178,"value":951},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":173,"tag":420,"props":953,"children":954},{},[955,956,961,962],{"type":178,"value":424},{"type":173,"tag":426,"props":957,"children":958},{},[959],{"type":178,"value":960},"基础代码及用例",{"type":178,"value":424},{"type":173,"tag":200,"props":963,"children":964},{},[965,967,971,973,983],{"type":178,"value":966},"\n    ",{"type":173,"tag":385,"props":968,"children":970},{"src":969},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":178,"value":972},"\n    代码地址：",{"type":173,"tag":192,"props":974,"children":980},{"href":975,"rel":976,"target":979},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[977,978],"noopener","noreferrer","_blank",[981],{"type":178,"value":982},"Element Plus Playground",{"type":178,"value":424},{"type":173,"tag":181,"props":985,"children":987},{"id":986},"类型编程",[988],{"type":178,"value":986},{"type":173,"tag":187,"props":990,"children":992},{"id":991},"简单-omit",[993],{"type":178,"value":994},"简单-Omit",{"type":173,"tag":420,"props":996,"children":997},{},[998,999,1003,1004],{"type":178,"value":424},{"type":173,"tag":426,"props":1000,"children":1001},{},[1002],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":1005,"children":1006},{},[1007],{"type":178,"value":1008},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":173,"tag":420,"props":1010,"children":1011},{},[1012,1013,1017,1018],{"type":178,"value":424},{"type":173,"tag":426,"props":1014,"children":1015},{},[1016],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":1019,"children":1020},{},[1021],{"type":178,"value":1022},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":173,"tag":187,"props":1024,"children":1026},{"id":1025},"简单-trim",[1027],{"type":178,"value":1028},"简单-Trim",{"type":173,"tag":420,"props":1030,"children":1031},{},[1032,1033,1037,1038],{"type":178,"value":424},{"type":173,"tag":426,"props":1034,"children":1035},{},[1036],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":1039,"children":1040},{},[1041],{"type":178,"value":1042},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":173,"tag":420,"props":1044,"children":1045},{},[1046,1047,1051,1052],{"type":178,"value":424},{"type":173,"tag":426,"props":1048,"children":1049},{},[1050],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":1053,"children":1054},{},[1055],{"type":178,"value":1056},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":173,"tag":187,"props":1058,"children":1060},{"id":1059},"中等-deepreadonly",[1061],{"type":178,"value":1062},"中等-DeepReadonly",{"type":173,"tag":420,"props":1064,"children":1065},{},[1066,1067,1071,1072],{"type":178,"value":424},{"type":173,"tag":426,"props":1068,"children":1069},{},[1070],{"type":178,"value":430},{"type":178,"value":424},{"type":173,"tag":433,"props":1073,"children":1074},{},[1075],{"type":178,"value":1076},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":173,"tag":420,"props":1078,"children":1079},{},[1080,1081,1085,1086],{"type":178,"value":424},{"type":173,"tag":426,"props":1082,"children":1083},{},[1084],{"type":178,"value":446},{"type":178,"value":424},{"type":173,"tag":433,"props":1087,"children":1088},{},[1089],{"type":178,"value":1090},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":173,"tag":174,"props":1092,"children":1093},{},[1094],{"type":178,"value":1095},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":775,"depth":775,"links":1097},[1098,1099,1100,1101],{"id":183,"depth":775,"text":183},{"id":411,"depth":775,"text":411},{"id":658,"depth":775,"text":658},{"id":986,"depth":775,"text":986},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1109,1113],{"_path":1110,"title":1111,"description":1112},"/maps/_hardware/ssd","SSD（Solid State Driver）","SSD 是一种基于闪存技术的硬盘，相比传统的机械硬盘，它具有更快的读写速度、更低的延迟、更小的体积和更低的功耗。",{"_path":1114,"title":1115,"description":1116},"/maps/_hire/interview/questions/overall","面试题库","前端开发面试题集合，包含软件工程、算法数据结构等多个技术领域的经典面试题。",1761757110087]