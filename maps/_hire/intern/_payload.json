[{"data":1,"prerenderedAt":1369},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":410,"/maps/_hire/intern-surround":1361},[4,32,83,102,129,135,141,147,393,399,405],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96,99],{"title":88,"_path":89},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":91,"_path":92},"🌐 AnySort","/tools/anysort",{"title":94,"_path":95},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":97,"_path":98},"👓 Crapto","/tools/crypto-inline",{"title":100,"_path":101},"🖨️ any-to-base64","/tools/any-to-base64",{"title":103,"_path":104,"children":105},"吉他剧场 / Music","/music",[106,108,111,114,117,120,123,126],{"title":107,"_path":104},"🎸 FingerStyle！",{"title":109,"_path":110},"🌬️ 等待的风","/music/wind",{"title":112,"_path":113},"💕 约定的海洋","/music/ocean",{"title":115,"_path":116},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":118,"_path":119},"🌏 残酷天使的行动纲领","/music/eva",{"title":121,"_path":122},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":124,"_path":125},"🍷 Wu Wei","/music/wu-wei",{"title":127,"_path":128},"🌅 无题","/music/untitled",{"title":130,"_path":131,"children":132},"画点什么 / Paint","/paint",[133],{"title":134,"_path":131},"🚧 正在施工",{"title":136,"_path":137,"children":138},"读书笔记 / Notes","/books",[139],{"title":140,"_path":137},"📕 读书笔记",{"title":142,"_path":143,"children":144},"知识地图 / Maps","/maps",[145],{"title":146,"_path":143},"🏁 知识地图",{"title":148,"_path":149,"children":150},"零散的笔记 / Gists","/gists",[151,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"title":152,"_path":149},"🧊 Gists",{"title":154,"_path":155},"网站的可访问性","/gists/accessibility",{"title":157,"_path":158},"Bit","/gists/bit",{"title":160,"_path":161},"图片模糊","/gists/blur",{"title":163,"_path":164},"渲染相关笔记","/gists/c4d",{"title":166,"_path":167},"CDN 问题记录","/gists/cdn",{"title":169,"_path":170},"消毒剂","/gists/cleaner",{"title":172,"_path":173},"Windows Command","/gists/cmd",{"title":175,"_path":176},"Command","/gists/command",{"title":178,"_path":179},"复杂科学","/gists/complexity-science",{"title":181,"_path":182},"GitHub Copilot","/gists/copilot",{"title":184,"_path":185},"宇宙","/gists/cosmos",{"title":187,"_path":188},"C++","/gists/cpp",{"title":190,"_path":191},"Data Structure","/gists/data-structure",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"设计模式","/gists/design-patterns",{"title":199,"_path":200},"Developer Experience","/gists/developer-experience",{"title":202,"_path":203},"Device Metrics","/gists/device-metrix",{"title":205,"_path":206},"数字化转型","/gists/digital-transformation",{"title":208,"_path":209},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":211,"_path":212},"正则表达式","/gists/eegex",{"title":214,"_path":215},"Emoji","/gists/emoji",{"title":217,"_path":218},"工程","/gists/engineering",{"title":220,"_path":221},"熵","/gists/entropy",{"title":223,"_path":224},"Environment","/gists/environment",{"title":226,"_path":227},"Erlang","/gists/erlang",{"title":229,"_path":230},"逃离塔克夫","/gists/escape-from-tarkov",{"title":232,"_path":233},"ESNext (ES6-ES11)","/gists/esnext",{"title":235,"_path":236},"Eval！","/gists/eval",{"title":238,"_path":239},"Flutter","/gists/flutter",{"title":241,"_path":242},"字体","/gists/font",{"title":244,"_path":245},"JS 函数式编程","/gists/functional",{"title":247,"_path":248},"游戏化","/gists/gamification",{"title":250,"_path":251},"Google C++ Standard","/gists/google-cpp-standard",{"title":253,"_path":254},"双向链接完全体","/gists/graph",{"title":256,"_path":257},"Hardwares","/gists/hardwares",{"title":259,"_path":260},"哈希冲突","/gists/hash-collision",{"title":262,"_path":263},"信息设计","/gists/information-design",{"title":265,"_path":266},"InstantPage","/gists/instant.page",{"title":268,"_path":269},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":271,"_path":272},"KVStore","/gists/key-value-db",{"title":274,"_path":275},"Kubernetes","/gists/kubernetes",{"title":277,"_path":278},"Makefile","/gists/makefile",{"title":280,"_path":281},"Markdown Inline Style","/gists/markdown-nice",{"title":283,"_path":284},"小程序","/gists/miniapp",{"title":286,"_path":287},"减小页面快照体积","/gists/minify-html",{"title":289,"_path":290},"mklink","/gists/mklink",{"title":292,"_path":293},"Mock","/gists/mock",{"title":295,"_path":296},"多人协作系统","/gists/multiplayer",{"title":298,"_path":299},"多端应用","/gists/multy-end-app",{"title":301,"_path":302},"神经科学","/gists/neuroscience",{"title":304,"_path":305},"OO","/gists/oo",{"title":307,"_path":308},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":310,"_path":311},"PInvoke","/gists/pinvoke",{"title":313,"_path":314},"像素","/gists/pixel",{"title":316,"_path":317},"PowerShell","/gists/powershell",{"title":319,"_path":320},"量子","/gists/quantum",{"title":322,"_path":323},"保持好奇心","/gists/questions",{"title":325,"_path":326},"React Native","/gists/react-native",{"title":328,"_path":329},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":331,"_path":332},"SEO","/gists/seo",{"title":334,"_path":335},"Shader","/gists/shader",{"title":337,"_path":338},"Shape Up","/gists/shape-up",{"title":340,"_path":341},"睡觉","/gists/sleep",{"title":343,"_path":344},"记录奇怪的问题","/gists/solved",{"title":346,"_path":347},"States","/gists/states",{"title":349,"_path":350},"Storage","/gists/storage",{"title":352,"_path":353},"音视频流处理","/gists/stream-cli",{"title":355,"_path":356},"Symbol","/gists/symbol",{"title":358,"_path":359},"系统论","/gists/systems-theory",{"title":361,"_path":362},"Taro","/gists/taro",{"title":364,"_path":365},"任务切片","/gists/task-slice",{"title":367,"_path":368},"技术偏好","/gists/tech-dudge",{"title":370,"_path":371},"Untitled","/gists/untitled",{"title":373,"_path":374},"可变字体","/gists/variable-font",{"title":376,"_path":377},"视觉错觉","/gists/visual-illusion",{"title":379,"_path":380},"SS(SSR)","/gists/vpn",{"title":382,"_path":383},"VS Code 插件开发","/gists/vscode-plugin",{"title":385,"_path":386},"Web Components","/gists/web-components",{"title":388,"_path":389},"Windows","/gists/windows",{"title":391,"_path":392},"查缺补漏","/gists/wrong",{"title":394,"_path":395,"children":396},"代码笔记 / Gists","/source-code",[397],{"title":398,"_path":395},"🚄 代码笔记",{"title":400,"_path":401,"children":402},"我 / Abount","/hire",[403],{"title":404,"_path":401},"📬 技术简历",{"title":406,"_path":407,"children":408},"todo","/todo",[409],{"title":406,"_path":407},{"_path":411,"_dir":412,"_draft":413,"_partial":414,"_locale":415,"title":416,"description":415,"body":417,"_type":1355,"_id":1356,"_source":1357,"_file":1358,"_stem":1359,"_extension":1360},"/maps/_hire/intern","_hire",false,true,"","面试题题库",{"type":418,"children":419,"toc":1349},"root",[420,427,433,439,452,458,463,483,493,498,502,515,525,530,534,551,561,566,579,583,591,602,607,611,619,629,634,642,662,667,672,691,706,711,716,730,734,756,761,775,779,792,797,811,825,830,844,858,869,883,897,901,909,914,920,934,939,944,958,972,977,1168,1181,1195,1200,1205,1237,1242,1248,1262,1276,1282,1296,1310,1316,1330,1344],{"type":421,"tag":422,"props":423,"children":424},"element","h1",{"id":416},[425],{"type":426,"value":416},"text",{"type":421,"tag":428,"props":429,"children":430},"style",{},[431],{"type":426,"value":432},"\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":421,"tag":434,"props":435,"children":437},"h2",{"id":436},"算法题",[438],{"type":426,"value":436},{"type":421,"tag":440,"props":441,"children":443},"h4",{"id":442},"简单-斐波那契数列",[444],{"type":421,"tag":445,"props":446,"children":450},"a",{"href":447,"rel":448},"https://leetcode.cn/problems/fibonacci-number/",[449],"nofollow",[451],{"type":426,"value":442},{"type":421,"tag":453,"props":454,"children":455},"p",{},[456],{"type":426,"value":457},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":421,"tag":453,"props":459,"children":460},{},[461],{"type":426,"value":462},"后续提问方向：",{"type":421,"tag":464,"props":465,"children":466},"ul",{},[467,478],{"type":421,"tag":468,"props":469,"children":470},"li",{},[471],{"type":421,"tag":445,"props":472,"children":475},{"href":473,"rel":474},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[449],[476],{"type":426,"value":477},"简单-非递归解法（递推）",{"type":421,"tag":468,"props":479,"children":480},{},[481],{"type":426,"value":482},"简单-时间复杂度最小的解法（枚举）",{"type":421,"tag":440,"props":484,"children":486},{"id":485},"简单-合并有序链表",[487],{"type":421,"tag":445,"props":488,"children":491},{"href":489,"rel":490},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[449],[492],{"type":426,"value":485},{"type":421,"tag":453,"props":494,"children":495},{},[496],{"type":426,"value":497},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":421,"tag":453,"props":499,"children":500},{},[501],{"type":426,"value":462},{"type":421,"tag":464,"props":503,"children":504},{},[505],{"type":421,"tag":468,"props":506,"children":507},{},[508],{"type":421,"tag":445,"props":509,"children":512},{"href":510,"rel":511},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[449],[513],{"type":426,"value":514},"简单-空间复杂度最小的解法（迭代）",{"type":421,"tag":440,"props":516,"children":518},{"id":517},"简单-反转链表",[519],{"type":421,"tag":445,"props":520,"children":523},{"href":521,"rel":522},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[449],[524],{"type":426,"value":517},{"type":421,"tag":453,"props":526,"children":527},{},[528],{"type":426,"value":529},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":421,"tag":453,"props":531,"children":532},{},[533],{"type":426,"value":462},{"type":421,"tag":464,"props":535,"children":536},{},[537,546],{"type":421,"tag":468,"props":538,"children":539},{},[540],{"type":421,"tag":445,"props":541,"children":544},{"href":542,"rel":543},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[449],[545],{"type":426,"value":514},{"type":421,"tag":468,"props":547,"children":548},{},[549],{"type":426,"value":550},"中等-环形链表或包含环的链表的反转",{"type":421,"tag":440,"props":552,"children":554},{"id":553},"中等-有效的括号字符串",[555],{"type":421,"tag":445,"props":556,"children":559},{"href":557,"rel":558},"https://leetcode.cn/problems/valid-parenthesis-string/",[449],[560],{"type":426,"value":553},{"type":421,"tag":453,"props":562,"children":563},{},[564],{"type":426,"value":565},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":421,"tag":464,"props":567,"children":568},{},[569,574],{"type":421,"tag":468,"props":570,"children":571},{},[572],{"type":426,"value":573},"\")(()))\"          =>  false",{"type":421,"tag":468,"props":575,"children":576},{},[577],{"type":426,"value":578},"\"(())((()())())\"  =>  true",{"type":421,"tag":453,"props":580,"children":581},{},[582],{"type":426,"value":462},{"type":421,"tag":464,"props":584,"children":585},{},[586],{"type":421,"tag":468,"props":587,"children":588},{},[589],{"type":426,"value":590},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":421,"tag":440,"props":592,"children":594},{"id":593},"中等-数组第k个最大元素",[595],{"type":421,"tag":445,"props":596,"children":599},{"href":597,"rel":598},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[449],[600],{"type":426,"value":601},"中等-数组第K个最大元素",{"type":421,"tag":453,"props":603,"children":604},{},[605],{"type":426,"value":606},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":421,"tag":453,"props":608,"children":609},{},[610],{"type":426,"value":462},{"type":421,"tag":464,"props":612,"children":613},{},[614],{"type":421,"tag":468,"props":615,"children":616},{},[617],{"type":426,"value":618},"困难-使用时间复杂度为 O(n) 的解法。",{"type":421,"tag":440,"props":620,"children":622},{"id":621},"中等-二叉树的层序遍历",[623],{"type":421,"tag":445,"props":624,"children":627},{"href":625,"rel":626},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[449],[628],{"type":426,"value":621},{"type":421,"tag":453,"props":630,"children":631},{},[632],{"type":426,"value":633},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":421,"tag":453,"props":635,"children":636},{},[637],{"type":421,"tag":638,"props":639,"children":641},"img",{"alt":415,"src":640},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":421,"tag":453,"props":643,"children":644},{},[645,647,653,655,660],{"type":426,"value":646},"输入：如上图所示。输出：[[3],",{"type":421,"tag":648,"props":649,"children":650},"span",{},[651],{"type":426,"value":652},"9,20",{"type":426,"value":654},",",{"type":421,"tag":648,"props":656,"children":657},{},[658],{"type":426,"value":659},"15,7",{"type":426,"value":661},"]",{"type":421,"tag":434,"props":663,"children":665},{"id":664},"编程题",[666],{"type":426,"value":664},{"type":421,"tag":440,"props":668,"children":670},{"id":669},"简单-bind",[671],{"type":426,"value":669},{"type":421,"tag":673,"props":674,"children":675},"details",{},[676,678,684,685],{"type":426,"value":677},"\n  ",{"type":421,"tag":679,"props":680,"children":681},"summary",{},[682],{"type":426,"value":683},"用例",{"type":426,"value":677},{"type":421,"tag":686,"props":687,"children":688},"highlight",{},[689],{"type":426,"value":690},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":421,"tag":673,"props":692,"children":693},{},[694,695,700,701],{"type":426,"value":677},{"type":421,"tag":679,"props":696,"children":697},{},[698],{"type":426,"value":699},"参考实现",{"type":426,"value":677},{"type":421,"tag":686,"props":702,"children":703},{},[704],{"type":426,"value":705},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":421,"tag":440,"props":707,"children":709},{"id":708},"中等-instanceof",[710],{"type":426,"value":708},{"type":421,"tag":453,"props":712,"children":713},{},[714],{"type":426,"value":715},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":421,"tag":673,"props":717,"children":718},{},[719,720,724,725],{"type":426,"value":677},{"type":421,"tag":679,"props":721,"children":722},{},[723],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":726,"children":727},{},[728],{"type":426,"value":729},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":421,"tag":453,"props":731,"children":732},{},[733],{"type":426,"value":462},{"type":421,"tag":464,"props":735,"children":736},{},[737,742],{"type":421,"tag":468,"props":738,"children":739},{},[740],{"type":426,"value":741},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":421,"tag":468,"props":743,"children":744},{},[745,747,754],{"type":426,"value":746},"偏门-创造一个类 God 使得 ",{"type":421,"tag":748,"props":749,"children":751},"code",{"className":750},[],[752],{"type":426,"value":753},"null instanceof God",{"type":426,"value":755}," 为真",{"type":421,"tag":440,"props":757,"children":759},{"id":758},"中等-深拷贝函数",[760],{"type":426,"value":758},{"type":421,"tag":673,"props":762,"children":763},{},[764,765,769,770],{"type":426,"value":677},{"type":421,"tag":679,"props":766,"children":767},{},[768],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":771,"children":772},{},[773],{"type":426,"value":774},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":421,"tag":453,"props":776,"children":777},{},[778],{"type":426,"value":462},{"type":421,"tag":464,"props":780,"children":781},{},[782,787],{"type":421,"tag":468,"props":783,"children":784},{},[785],{"type":426,"value":786},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":421,"tag":468,"props":788,"children":789},{},[790],{"type":426,"value":791},"中等-如何处理对象间循环引用",{"type":421,"tag":440,"props":793,"children":795},{"id":794},"中等-柯里化函数",[796],{"type":426,"value":794},{"type":421,"tag":673,"props":798,"children":799},{},[800,801,805,806],{"type":426,"value":677},{"type":421,"tag":679,"props":802,"children":803},{},[804],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":807,"children":808},{},[809],{"type":426,"value":810},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":421,"tag":673,"props":812,"children":813},{},[814,815,819,820],{"type":426,"value":677},{"type":421,"tag":679,"props":816,"children":817},{},[818],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":821,"children":822},{},[823],{"type":426,"value":824},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":421,"tag":440,"props":826,"children":828},{"id":827},"中等-列表数据转树结构",[829],{"type":426,"value":827},{"type":421,"tag":673,"props":831,"children":832},{},[833,834,838,839],{"type":426,"value":677},{"type":421,"tag":679,"props":835,"children":836},{},[837],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":840,"children":841},{},[842],{"type":426,"value":843},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":421,"tag":673,"props":845,"children":846},{},[847,848,852,853],{"type":426,"value":677},{"type":421,"tag":679,"props":849,"children":850},{},[851],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":854,"children":855},{},[856],{"type":426,"value":857},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":421,"tag":440,"props":859,"children":861},{"id":860},"中等-promisemapseries",[862],{"type":421,"tag":445,"props":863,"children":866},{"href":864,"rel":865},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[449],[867],{"type":426,"value":868},"中等-Promise.mapSeries",{"type":421,"tag":673,"props":870,"children":871},{},[872,873,877,878],{"type":426,"value":677},{"type":421,"tag":679,"props":874,"children":875},{},[876],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":879,"children":880},{},[881],{"type":426,"value":882},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":421,"tag":673,"props":884,"children":885},{},[886,887,891,892],{"type":426,"value":677},{"type":421,"tag":679,"props":888,"children":889},{},[890],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":893,"children":894},{},[895],{"type":426,"value":896},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":421,"tag":453,"props":898,"children":899},{},[900],{"type":426,"value":462},{"type":421,"tag":464,"props":902,"children":903},{},[904],{"type":421,"tag":468,"props":905,"children":906},{},[907],{"type":426,"value":908},"困难-给实现加上类型（TypeScript）",{"type":421,"tag":434,"props":910,"children":912},{"id":911},"综合题",[913],{"type":426,"value":911},{"type":421,"tag":440,"props":915,"children":917},{"id":916},"简单-统计当前页面用到的所有html标签的种类",[918],{"type":426,"value":919},"简单-统计当前页面用到的所有HTML标签的种类",{"type":421,"tag":673,"props":921,"children":922},{},[923,924,928,929],{"type":426,"value":677},{"type":421,"tag":679,"props":925,"children":926},{},[927],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":930,"children":931},{},[932],{"type":426,"value":933},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":421,"tag":440,"props":935,"children":937},{"id":936},"中等-商品排序",[938],{"type":426,"value":936},{"type":421,"tag":453,"props":940,"children":941},{},[942],{"type":426,"value":943},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":421,"tag":673,"props":945,"children":946},{},[947,948,952,953],{"type":426,"value":677},{"type":421,"tag":679,"props":949,"children":950},{},[951],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":954,"children":955},{},[956],{"type":426,"value":957},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":421,"tag":673,"props":959,"children":960},{},[961,962,966,967],{"type":426,"value":677},{"type":421,"tag":679,"props":963,"children":964},{},[965],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":968,"children":969},{},[970],{"type":426,"value":971},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":421,"tag":440,"props":973,"children":975},{"id":974},"困难-给定以下递归函数提问",[976],{"type":426,"value":974},{"type":421,"tag":978,"props":979,"children":983},"pre",{"className":980,"code":981,"language":982,"meta":415,"style":415},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[984],{"type":421,"tag":748,"props":985,"children":986},{"__ignoreMap":415},[987,1026,1092,1127,1136,1158],{"type":421,"tag":648,"props":988,"children":991},{"class":989,"line":990},"line",1,[992,998,1004,1010,1016,1021],{"type":421,"tag":648,"props":993,"children":995},{"style":994},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[996],{"type":426,"value":997},"function",{"type":421,"tag":648,"props":999,"children":1001},{"style":1000},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[1002],{"type":426,"value":1003}," recur",{"type":421,"tag":648,"props":1005,"children":1007},{"style":1006},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1008],{"type":426,"value":1009},"(",{"type":421,"tag":648,"props":1011,"children":1013},{"style":1012},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1014],{"type":426,"value":1015},"n",{"type":421,"tag":648,"props":1017,"children":1018},{"style":1006},[1019],{"type":426,"value":1020},")",{"type":421,"tag":648,"props":1022,"children":1023},{"style":1006},[1024],{"type":426,"value":1025}," {\n",{"type":421,"tag":648,"props":1027,"children":1029},{"class":989,"line":1028},2,[1030,1036,1042,1047,1053,1059,1064,1069,1074,1079,1083,1087],{"type":421,"tag":648,"props":1031,"children":1033},{"style":1032},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1034],{"type":426,"value":1035},"    if",{"type":421,"tag":648,"props":1037,"children":1039},{"style":1038},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1040],{"type":426,"value":1041}," (",{"type":421,"tag":648,"props":1043,"children":1045},{"style":1044},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1046],{"type":426,"value":1015},{"type":421,"tag":648,"props":1048,"children":1050},{"style":1049},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[1051],{"type":426,"value":1052}," ===",{"type":421,"tag":648,"props":1054,"children":1056},{"style":1055},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1057],{"type":426,"value":1058}," 0",{"type":421,"tag":648,"props":1060,"children":1061},{"style":1038},[1062],{"type":426,"value":1063},") ",{"type":421,"tag":648,"props":1065,"children":1066},{"style":1044},[1067],{"type":426,"value":1068},"console",{"type":421,"tag":648,"props":1070,"children":1071},{"style":1006},[1072],{"type":426,"value":1073},".",{"type":421,"tag":648,"props":1075,"children":1076},{"style":1000},[1077],{"type":426,"value":1078},"log",{"type":421,"tag":648,"props":1080,"children":1081},{"style":1038},[1082],{"type":426,"value":1009},{"type":421,"tag":648,"props":1084,"children":1085},{"style":1044},[1086],{"type":426,"value":1015},{"type":421,"tag":648,"props":1088,"children":1089},{"style":1038},[1090],{"type":426,"value":1091},")\n",{"type":421,"tag":648,"props":1093,"children":1095},{"class":989,"line":1094},3,[1096,1101,1105,1109,1113,1118,1123],{"type":421,"tag":648,"props":1097,"children":1098},{"style":1032},[1099],{"type":426,"value":1100},"    else",{"type":421,"tag":648,"props":1102,"children":1103},{"style":1000},[1104],{"type":426,"value":1003},{"type":421,"tag":648,"props":1106,"children":1107},{"style":1038},[1108],{"type":426,"value":1009},{"type":421,"tag":648,"props":1110,"children":1111},{"style":1044},[1112],{"type":426,"value":1015},{"type":421,"tag":648,"props":1114,"children":1115},{"style":1049},[1116],{"type":426,"value":1117}," -",{"type":421,"tag":648,"props":1119,"children":1120},{"style":1055},[1121],{"type":426,"value":1122}," 1",{"type":421,"tag":648,"props":1124,"children":1125},{"style":1038},[1126],{"type":426,"value":1091},{"type":421,"tag":648,"props":1128,"children":1130},{"class":989,"line":1129},4,[1131],{"type":421,"tag":648,"props":1132,"children":1133},{"style":1006},[1134],{"type":426,"value":1135},"}\n",{"type":421,"tag":648,"props":1137,"children":1139},{"class":989,"line":1138},5,[1140,1145,1149,1154],{"type":421,"tag":648,"props":1141,"children":1142},{"style":1000},[1143],{"type":426,"value":1144},"recur",{"type":421,"tag":648,"props":1146,"children":1147},{"style":1044},[1148],{"type":426,"value":1009},{"type":421,"tag":648,"props":1150,"children":1151},{"style":1055},[1152],{"type":426,"value":1153},"500000",{"type":421,"tag":648,"props":1155,"children":1156},{"style":1044},[1157],{"type":426,"value":1091},{"type":421,"tag":648,"props":1159,"children":1161},{"class":989,"line":1160},6,[1162],{"type":421,"tag":648,"props":1163,"children":1165},{"style":1164},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[1166],{"type":426,"value":1167},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":421,"tag":464,"props":1169,"children":1170},{},[1171,1176],{"type":421,"tag":468,"props":1172,"children":1173},{},[1174],{"type":426,"value":1175},"简单-将该函数转换为循环的写法避免栈溢出",{"type":421,"tag":468,"props":1177,"children":1178},{},[1179],{"type":426,"value":1180},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":421,"tag":673,"props":1182,"children":1183},{},[1184,1185,1189,1190],{"type":426,"value":677},{"type":421,"tag":679,"props":1186,"children":1187},{},[1188],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":1191,"children":1192},{},[1193],{"type":426,"value":1194},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":421,"tag":440,"props":1196,"children":1198},{"id":1197},"困难-商品全排列",[1199],{"type":426,"value":1197},{"type":421,"tag":453,"props":1201,"children":1202},{},[1203],{"type":426,"value":1204},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":421,"tag":673,"props":1206,"children":1207},{},[1208,1209,1214,1215],{"type":426,"value":677},{"type":421,"tag":679,"props":1210,"children":1211},{},[1212],{"type":426,"value":1213},"基础代码及用例",{"type":426,"value":677},{"type":421,"tag":453,"props":1216,"children":1217},{},[1218,1220,1224,1226,1236],{"type":426,"value":1219},"\n    ",{"type":421,"tag":638,"props":1221,"children":1223},{"src":1222},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":426,"value":1225},"\n    代码地址：",{"type":421,"tag":445,"props":1227,"children":1233},{"href":1228,"rel":1229,"target":1232},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[1230,1231],"noopener","noreferrer","_blank",[1234],{"type":426,"value":1235},"Element Plus Playground",{"type":426,"value":677},{"type":421,"tag":434,"props":1238,"children":1240},{"id":1239},"类型编程",[1241],{"type":426,"value":1239},{"type":421,"tag":440,"props":1243,"children":1245},{"id":1244},"简单-omit",[1246],{"type":426,"value":1247},"简单-Omit",{"type":421,"tag":673,"props":1249,"children":1250},{},[1251,1252,1256,1257],{"type":426,"value":677},{"type":421,"tag":679,"props":1253,"children":1254},{},[1255],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":1258,"children":1259},{},[1260],{"type":426,"value":1261},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":421,"tag":673,"props":1263,"children":1264},{},[1265,1266,1270,1271],{"type":426,"value":677},{"type":421,"tag":679,"props":1267,"children":1268},{},[1269],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":1272,"children":1273},{},[1274],{"type":426,"value":1275},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":421,"tag":440,"props":1277,"children":1279},{"id":1278},"简单-trim",[1280],{"type":426,"value":1281},"简单-Trim",{"type":421,"tag":673,"props":1283,"children":1284},{},[1285,1286,1290,1291],{"type":426,"value":677},{"type":421,"tag":679,"props":1287,"children":1288},{},[1289],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":1292,"children":1293},{},[1294],{"type":426,"value":1295},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":421,"tag":673,"props":1297,"children":1298},{},[1299,1300,1304,1305],{"type":426,"value":677},{"type":421,"tag":679,"props":1301,"children":1302},{},[1303],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":1306,"children":1307},{},[1308],{"type":426,"value":1309},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":421,"tag":440,"props":1311,"children":1313},{"id":1312},"中等-deepreadonly",[1314],{"type":426,"value":1315},"中等-DeepReadonly",{"type":421,"tag":673,"props":1317,"children":1318},{},[1319,1320,1324,1325],{"type":426,"value":677},{"type":421,"tag":679,"props":1321,"children":1322},{},[1323],{"type":426,"value":683},{"type":426,"value":677},{"type":421,"tag":686,"props":1326,"children":1327},{},[1328],{"type":426,"value":1329},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":421,"tag":673,"props":1331,"children":1332},{},[1333,1334,1338,1339],{"type":426,"value":677},{"type":421,"tag":679,"props":1335,"children":1336},{},[1337],{"type":426,"value":699},{"type":426,"value":677},{"type":421,"tag":686,"props":1340,"children":1341},{},[1342],{"type":426,"value":1343},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":421,"tag":428,"props":1345,"children":1346},{},[1347],{"type":426,"value":1348},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":415,"searchDepth":1028,"depth":1028,"links":1350},[1351,1352,1353,1354],{"id":436,"depth":1028,"text":436},{"id":664,"depth":1028,"text":664},{"id":911,"depth":1028,"text":911},{"id":1239,"depth":1028,"text":1239},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1362,1366],{"_path":1363,"title":1364,"description":1365},"/maps/_frontend/w3c/security/subresource-integrity","Subresource Integrity","子资源完整性协议允许浏览器通过检查哈希值来判断资源是否经过篡改。",{"_path":1367,"title":1368,"description":415},"/maps/_hire/interview/questions/overall","题库",1732808132963]