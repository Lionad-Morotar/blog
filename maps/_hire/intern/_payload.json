[{"data":1,"prerenderedAt":1344},["Reactive",2],{"navigation":3,"/maps/_hire/intern":386,"/maps/_hire/intern-surround":1336},[4,32,80,96,123,129,135,369,375,381],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"Bit","/gists/bit",{"title":148,"_path":149},"图片模糊","/gists/blur",{"title":151,"_path":152},"渲染相关笔记","/gists/c4d",{"title":154,"_path":155},"CDN 问题记录","/gists/cdn",{"title":157,"_path":158},"消毒剂","/gists/cleaner",{"title":160,"_path":161},"Windows Command","/gists/cmd",{"title":163,"_path":164},"Command","/gists/command",{"title":166,"_path":167},"复杂科学","/gists/complexity-science",{"title":169,"_path":170},"宇宙","/gists/cosmos",{"title":172,"_path":173},"C++","/gists/cpp",{"title":175,"_path":176},"Data Structure","/gists/data-structure",{"title":178,"_path":179},"DEPRESSION","/gists/depression",{"title":181,"_path":182},"设计模式","/gists/design-patterns",{"title":184,"_path":185},"Developer Experience","/gists/developer-experience",{"title":187,"_path":188},"Device Metrics","/gists/device-metrix",{"title":190,"_path":191},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":193,"_path":194},"正则表达式","/gists/eegex",{"title":196,"_path":197},"Emoji","/gists/emoji",{"title":199,"_path":200},"工程","/gists/engineering",{"title":202,"_path":203},"熵","/gists/entropy",{"title":205,"_path":206},"Environment","/gists/environment",{"title":208,"_path":209},"Erlang","/gists/erlang",{"title":211,"_path":212},"逃离塔克夫","/gists/escape-from-tarkov",{"title":214,"_path":215},"ESNext (ES6-ES11)","/gists/esnext",{"title":217,"_path":218},"Eval！","/gists/eval",{"title":220,"_path":221},"Flutter","/gists/flutter",{"title":223,"_path":224},"字体","/gists/font",{"title":226,"_path":227},"JS 函数式编程","/gists/functional",{"title":229,"_path":230},"Google C++ Standard","/gists/google-cpp-standard",{"title":232,"_path":233},"双向链接完全体","/gists/graph",{"title":235,"_path":236},"Hardwares","/gists/hardwares",{"title":238,"_path":239},"哈希冲突","/gists/hash-collision",{"title":241,"_path":242},"信息设计","/gists/information-design",{"title":244,"_path":245},"InstantPage","/gists/instant.page",{"title":247,"_path":248},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":250,"_path":251},"KVStore","/gists/key-value-db",{"title":253,"_path":254},"Kubernetes","/gists/kubernetes",{"title":256,"_path":257},"Makefile","/gists/makefile",{"title":259,"_path":260},"Markdown Inline Style","/gists/markdown-nice",{"title":262,"_path":263},"小程序","/gists/miniapp",{"title":265,"_path":266},"减小页面快照体积","/gists/minify-html",{"title":268,"_path":269},"mklink","/gists/mklink",{"title":271,"_path":272},"Mock","/gists/mock",{"title":274,"_path":275},"多端应用","/gists/multy-end-app",{"title":277,"_path":278},"神经科学","/gists/neuroscience",{"title":280,"_path":281},"OO","/gists/oo",{"title":283,"_path":284},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":286,"_path":287},"人物","/gists/person",{"title":289,"_path":290},"PInvoke","/gists/pinvoke",{"title":292,"_path":293},"像素","/gists/pixel",{"title":295,"_path":296},"PowerShell","/gists/powershell",{"title":298,"_path":299},"量子","/gists/quantum",{"title":301,"_path":302},"保持好奇心","/gists/questions",{"title":304,"_path":305},"React Native","/gists/react-native",{"title":307,"_path":308},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":310,"_path":311},"SEO","/gists/seo",{"title":313,"_path":314},"Shader","/gists/shader",{"title":316,"_path":317},"Shape Up","/gists/shape-up",{"title":319,"_path":320},"睡觉","/gists/sleep",{"title":322,"_path":323},"States","/gists/states",{"title":325,"_path":326},"Storage","/gists/storage",{"title":328,"_path":329},"音视频流处理","/gists/stream-cli",{"title":331,"_path":332},"Symbol","/gists/symbol",{"title":334,"_path":335},"系统论","/gists/systems-theory",{"title":337,"_path":338},"Taro","/gists/taro",{"title":340,"_path":341},"任务切片","/gists/task-slice",{"title":343,"_path":344},"技术偏好","/gists/tech-dudge",{"title":346,"_path":347},"Untitled","/gists/untitled",{"title":349,"_path":350},"可变字体","/gists/variable-font",{"title":352,"_path":353},"视觉错觉","/gists/visual-illusion",{"title":355,"_path":356},"SS(SSR)","/gists/vpn",{"title":358,"_path":359},"VS Code 插件开发","/gists/vscode-plugin",{"title":361,"_path":362},"Web Components","/gists/web-components",{"title":364,"_path":365},"Windows","/gists/windows",{"title":367,"_path":368},"查缺补漏","/gists/wrong",{"title":370,"_path":371,"children":372},"代码笔记 / Gists","/source-code",[373],{"title":374,"_path":371},"🚄 代码笔记",{"title":376,"_path":377,"children":378},"我 / Abount","/hire",[379],{"title":380,"_path":377},"📬 技术简历",{"title":382,"_path":383,"children":384},"todo","/todo",[385],{"title":382,"_path":383},{"_path":387,"_dir":388,"_draft":389,"_partial":390,"_locale":391,"title":392,"description":391,"body":393,"_type":1331,"_id":1332,"_source":1333,"_file":1334,"_extension":1335},"/maps/_hire/intern","_hire",false,true,"","面试题题库",{"type":394,"children":395,"toc":1325},"root",[396,403,409,415,428,434,439,459,469,474,478,491,501,506,510,527,537,542,555,559,567,578,583,587,595,605,610,618,638,643,648,667,682,687,692,706,710,732,737,751,755,768,773,787,801,806,820,834,845,859,873,877,885,890,896,910,915,920,934,948,953,1144,1157,1171,1176,1181,1213,1218,1224,1238,1252,1258,1272,1286,1292,1306,1320],{"type":397,"tag":398,"props":399,"children":400},"element","h1",{"id":392},[401],{"type":402,"value":392},"text",{"type":397,"tag":404,"props":405,"children":406},"style",{},[407],{"type":402,"value":408},"\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":397,"tag":410,"props":411,"children":413},"h2",{"id":412},"算法题",[414],{"type":402,"value":412},{"type":397,"tag":416,"props":417,"children":419},"h4",{"id":418},"简单-斐波那契数列",[420],{"type":397,"tag":421,"props":422,"children":426},"a",{"href":423,"rel":424},"https://leetcode.cn/problems/fibonacci-number/",[425],"nofollow",[427],{"type":402,"value":418},{"type":397,"tag":429,"props":430,"children":431},"p",{},[432],{"type":402,"value":433},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":397,"tag":429,"props":435,"children":436},{},[437],{"type":402,"value":438},"后续提问方向：",{"type":397,"tag":440,"props":441,"children":442},"ul",{},[443,454],{"type":397,"tag":444,"props":445,"children":446},"li",{},[447],{"type":397,"tag":421,"props":448,"children":451},{"href":449,"rel":450},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[425],[452],{"type":402,"value":453},"简单-非递归解法（递推）",{"type":397,"tag":444,"props":455,"children":456},{},[457],{"type":402,"value":458},"简单-时间复杂度最小的解法（枚举）",{"type":397,"tag":416,"props":460,"children":462},{"id":461},"简单-合并有序链表",[463],{"type":397,"tag":421,"props":464,"children":467},{"href":465,"rel":466},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[425],[468],{"type":402,"value":461},{"type":397,"tag":429,"props":470,"children":471},{},[472],{"type":402,"value":473},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":397,"tag":429,"props":475,"children":476},{},[477],{"type":402,"value":438},{"type":397,"tag":440,"props":479,"children":480},{},[481],{"type":397,"tag":444,"props":482,"children":483},{},[484],{"type":397,"tag":421,"props":485,"children":488},{"href":486,"rel":487},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[425],[489],{"type":402,"value":490},"简单-空间复杂度最小的解法（迭代）",{"type":397,"tag":416,"props":492,"children":494},{"id":493},"简单-反转链表",[495],{"type":397,"tag":421,"props":496,"children":499},{"href":497,"rel":498},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[425],[500],{"type":402,"value":493},{"type":397,"tag":429,"props":502,"children":503},{},[504],{"type":402,"value":505},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":397,"tag":429,"props":507,"children":508},{},[509],{"type":402,"value":438},{"type":397,"tag":440,"props":511,"children":512},{},[513,522],{"type":397,"tag":444,"props":514,"children":515},{},[516],{"type":397,"tag":421,"props":517,"children":520},{"href":518,"rel":519},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[425],[521],{"type":402,"value":490},{"type":397,"tag":444,"props":523,"children":524},{},[525],{"type":402,"value":526},"中等-环形链表或包含环的链表的反转",{"type":397,"tag":416,"props":528,"children":530},{"id":529},"中等-有效的括号字符串",[531],{"type":397,"tag":421,"props":532,"children":535},{"href":533,"rel":534},"https://leetcode.cn/problems/valid-parenthesis-string/",[425],[536],{"type":402,"value":529},{"type":397,"tag":429,"props":538,"children":539},{},[540],{"type":402,"value":541},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":397,"tag":440,"props":543,"children":544},{},[545,550],{"type":397,"tag":444,"props":546,"children":547},{},[548],{"type":402,"value":549},"\")(()))\"          =>  false",{"type":397,"tag":444,"props":551,"children":552},{},[553],{"type":402,"value":554},"\"(())((()())())\"  =>  true",{"type":397,"tag":429,"props":556,"children":557},{},[558],{"type":402,"value":438},{"type":397,"tag":440,"props":560,"children":561},{},[562],{"type":397,"tag":444,"props":563,"children":564},{},[565],{"type":402,"value":566},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":397,"tag":416,"props":568,"children":570},{"id":569},"中等-数组第k个最大元素",[571],{"type":397,"tag":421,"props":572,"children":575},{"href":573,"rel":574},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[425],[576],{"type":402,"value":577},"中等-数组第K个最大元素",{"type":397,"tag":429,"props":579,"children":580},{},[581],{"type":402,"value":582},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":397,"tag":429,"props":584,"children":585},{},[586],{"type":402,"value":438},{"type":397,"tag":440,"props":588,"children":589},{},[590],{"type":397,"tag":444,"props":591,"children":592},{},[593],{"type":402,"value":594},"困难-使用时间复杂度为 O(n) 的解法。",{"type":397,"tag":416,"props":596,"children":598},{"id":597},"中等-二叉树的层序遍历",[599],{"type":397,"tag":421,"props":600,"children":603},{"href":601,"rel":602},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[425],[604],{"type":402,"value":597},{"type":397,"tag":429,"props":606,"children":607},{},[608],{"type":402,"value":609},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":397,"tag":429,"props":611,"children":612},{},[613],{"type":397,"tag":614,"props":615,"children":617},"img",{"alt":391,"src":616},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":397,"tag":429,"props":619,"children":620},{},[621,623,629,631,636],{"type":402,"value":622},"输入：如上图所示。输出：[[3],",{"type":397,"tag":624,"props":625,"children":626},"span",{},[627],{"type":402,"value":628},"9,20",{"type":402,"value":630},",",{"type":397,"tag":624,"props":632,"children":633},{},[634],{"type":402,"value":635},"15,7",{"type":402,"value":637},"]",{"type":397,"tag":410,"props":639,"children":641},{"id":640},"编程题",[642],{"type":402,"value":640},{"type":397,"tag":416,"props":644,"children":646},{"id":645},"简单-bind",[647],{"type":402,"value":645},{"type":397,"tag":649,"props":650,"children":651},"details",{},[652,654,660,661],{"type":402,"value":653},"\n  ",{"type":397,"tag":655,"props":656,"children":657},"summary",{},[658],{"type":402,"value":659},"用例",{"type":402,"value":653},{"type":397,"tag":662,"props":663,"children":664},"highlight",{},[665],{"type":402,"value":666},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":397,"tag":649,"props":668,"children":669},{},[670,671,676,677],{"type":402,"value":653},{"type":397,"tag":655,"props":672,"children":673},{},[674],{"type":402,"value":675},"参考实现",{"type":402,"value":653},{"type":397,"tag":662,"props":678,"children":679},{},[680],{"type":402,"value":681},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":397,"tag":416,"props":683,"children":685},{"id":684},"中等-instanceof",[686],{"type":402,"value":684},{"type":397,"tag":429,"props":688,"children":689},{},[690],{"type":402,"value":691},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":397,"tag":649,"props":693,"children":694},{},[695,696,700,701],{"type":402,"value":653},{"type":397,"tag":655,"props":697,"children":698},{},[699],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":702,"children":703},{},[704],{"type":402,"value":705},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":397,"tag":429,"props":707,"children":708},{},[709],{"type":402,"value":438},{"type":397,"tag":440,"props":711,"children":712},{},[713,718],{"type":397,"tag":444,"props":714,"children":715},{},[716],{"type":402,"value":717},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":397,"tag":444,"props":719,"children":720},{},[721,723,730],{"type":402,"value":722},"偏门-创造一个类 God 使得 ",{"type":397,"tag":724,"props":725,"children":727},"code",{"className":726},[],[728],{"type":402,"value":729},"null instanceof God",{"type":402,"value":731}," 为真",{"type":397,"tag":416,"props":733,"children":735},{"id":734},"中等-深拷贝函数",[736],{"type":402,"value":734},{"type":397,"tag":649,"props":738,"children":739},{},[740,741,745,746],{"type":402,"value":653},{"type":397,"tag":655,"props":742,"children":743},{},[744],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":747,"children":748},{},[749],{"type":402,"value":750},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":397,"tag":429,"props":752,"children":753},{},[754],{"type":402,"value":438},{"type":397,"tag":440,"props":756,"children":757},{},[758,763],{"type":397,"tag":444,"props":759,"children":760},{},[761],{"type":402,"value":762},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":397,"tag":444,"props":764,"children":765},{},[766],{"type":402,"value":767},"中等-如何处理对象间循环引用",{"type":397,"tag":416,"props":769,"children":771},{"id":770},"中等-柯里化函数",[772],{"type":402,"value":770},{"type":397,"tag":649,"props":774,"children":775},{},[776,777,781,782],{"type":402,"value":653},{"type":397,"tag":655,"props":778,"children":779},{},[780],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":783,"children":784},{},[785],{"type":402,"value":786},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":397,"tag":649,"props":788,"children":789},{},[790,791,795,796],{"type":402,"value":653},{"type":397,"tag":655,"props":792,"children":793},{},[794],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":797,"children":798},{},[799],{"type":402,"value":800},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":397,"tag":416,"props":802,"children":804},{"id":803},"中等-列表数据转树结构",[805],{"type":402,"value":803},{"type":397,"tag":649,"props":807,"children":808},{},[809,810,814,815],{"type":402,"value":653},{"type":397,"tag":655,"props":811,"children":812},{},[813],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":816,"children":817},{},[818],{"type":402,"value":819},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":397,"tag":649,"props":821,"children":822},{},[823,824,828,829],{"type":402,"value":653},{"type":397,"tag":655,"props":825,"children":826},{},[827],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":830,"children":831},{},[832],{"type":402,"value":833},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":397,"tag":416,"props":835,"children":837},{"id":836},"中等-promisemapseries",[838],{"type":397,"tag":421,"props":839,"children":842},{"href":840,"rel":841},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[425],[843],{"type":402,"value":844},"中等-Promise.mapSeries",{"type":397,"tag":649,"props":846,"children":847},{},[848,849,853,854],{"type":402,"value":653},{"type":397,"tag":655,"props":850,"children":851},{},[852],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":855,"children":856},{},[857],{"type":402,"value":858},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":397,"tag":649,"props":860,"children":861},{},[862,863,867,868],{"type":402,"value":653},{"type":397,"tag":655,"props":864,"children":865},{},[866],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":869,"children":870},{},[871],{"type":402,"value":872},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":397,"tag":429,"props":874,"children":875},{},[876],{"type":402,"value":438},{"type":397,"tag":440,"props":878,"children":879},{},[880],{"type":397,"tag":444,"props":881,"children":882},{},[883],{"type":402,"value":884},"困难-给实现加上类型（TypeScript）",{"type":397,"tag":410,"props":886,"children":888},{"id":887},"综合题",[889],{"type":402,"value":887},{"type":397,"tag":416,"props":891,"children":893},{"id":892},"简单-统计当前页面用到的所有html标签的种类",[894],{"type":402,"value":895},"简单-统计当前页面用到的所有HTML标签的种类",{"type":397,"tag":649,"props":897,"children":898},{},[899,900,904,905],{"type":402,"value":653},{"type":397,"tag":655,"props":901,"children":902},{},[903],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":906,"children":907},{},[908],{"type":402,"value":909},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":397,"tag":416,"props":911,"children":913},{"id":912},"中等-商品排序",[914],{"type":402,"value":912},{"type":397,"tag":429,"props":916,"children":917},{},[918],{"type":402,"value":919},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":397,"tag":649,"props":921,"children":922},{},[923,924,928,929],{"type":402,"value":653},{"type":397,"tag":655,"props":925,"children":926},{},[927],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":930,"children":931},{},[932],{"type":402,"value":933},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":397,"tag":649,"props":935,"children":936},{},[937,938,942,943],{"type":402,"value":653},{"type":397,"tag":655,"props":939,"children":940},{},[941],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":944,"children":945},{},[946],{"type":402,"value":947},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":397,"tag":416,"props":949,"children":951},{"id":950},"困难-给定以下递归函数提问",[952],{"type":402,"value":950},{"type":397,"tag":954,"props":955,"children":959},"pre",{"className":956,"code":957,"language":958,"meta":391,"style":391},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[960],{"type":397,"tag":724,"props":961,"children":962},{"__ignoreMap":391},[963,1002,1068,1103,1112,1134],{"type":397,"tag":624,"props":964,"children":967},{"class":965,"line":966},"line",1,[968,974,980,986,992,997],{"type":397,"tag":624,"props":969,"children":971},{"style":970},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[972],{"type":402,"value":973},"function",{"type":397,"tag":624,"props":975,"children":977},{"style":976},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[978],{"type":402,"value":979}," recur",{"type":397,"tag":624,"props":981,"children":983},{"style":982},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[984],{"type":402,"value":985},"(",{"type":397,"tag":624,"props":987,"children":989},{"style":988},"--shiki-light:#90A4AE;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#FD971F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[990],{"type":402,"value":991},"n",{"type":397,"tag":624,"props":993,"children":994},{"style":982},[995],{"type":402,"value":996},")",{"type":397,"tag":624,"props":998,"children":999},{"style":982},[1000],{"type":402,"value":1001}," {\n",{"type":397,"tag":624,"props":1003,"children":1005},{"class":965,"line":1004},2,[1006,1012,1018,1023,1029,1035,1040,1045,1050,1055,1059,1063],{"type":397,"tag":624,"props":1007,"children":1009},{"style":1008},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[1010],{"type":402,"value":1011},"    if",{"type":397,"tag":624,"props":1013,"children":1015},{"style":1014},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1016],{"type":402,"value":1017}," (",{"type":397,"tag":624,"props":1019,"children":1021},{"style":1020},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1022],{"type":402,"value":991},{"type":397,"tag":624,"props":1024,"children":1026},{"style":1025},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[1027],{"type":402,"value":1028}," ===",{"type":397,"tag":624,"props":1030,"children":1032},{"style":1031},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1033],{"type":402,"value":1034}," 0",{"type":397,"tag":624,"props":1036,"children":1037},{"style":1014},[1038],{"type":402,"value":1039},") ",{"type":397,"tag":624,"props":1041,"children":1042},{"style":1020},[1043],{"type":402,"value":1044},"console",{"type":397,"tag":624,"props":1046,"children":1047},{"style":982},[1048],{"type":402,"value":1049},".",{"type":397,"tag":624,"props":1051,"children":1052},{"style":976},[1053],{"type":402,"value":1054},"log",{"type":397,"tag":624,"props":1056,"children":1057},{"style":1014},[1058],{"type":402,"value":985},{"type":397,"tag":624,"props":1060,"children":1061},{"style":1020},[1062],{"type":402,"value":991},{"type":397,"tag":624,"props":1064,"children":1065},{"style":1014},[1066],{"type":402,"value":1067},")\n",{"type":397,"tag":624,"props":1069,"children":1071},{"class":965,"line":1070},3,[1072,1077,1081,1085,1089,1094,1099],{"type":397,"tag":624,"props":1073,"children":1074},{"style":1008},[1075],{"type":402,"value":1076},"    else",{"type":397,"tag":624,"props":1078,"children":1079},{"style":976},[1080],{"type":402,"value":979},{"type":397,"tag":624,"props":1082,"children":1083},{"style":1014},[1084],{"type":402,"value":985},{"type":397,"tag":624,"props":1086,"children":1087},{"style":1020},[1088],{"type":402,"value":991},{"type":397,"tag":624,"props":1090,"children":1091},{"style":1025},[1092],{"type":402,"value":1093}," -",{"type":397,"tag":624,"props":1095,"children":1096},{"style":1031},[1097],{"type":402,"value":1098}," 1",{"type":397,"tag":624,"props":1100,"children":1101},{"style":1014},[1102],{"type":402,"value":1067},{"type":397,"tag":624,"props":1104,"children":1106},{"class":965,"line":1105},4,[1107],{"type":397,"tag":624,"props":1108,"children":1109},{"style":982},[1110],{"type":402,"value":1111},"}\n",{"type":397,"tag":624,"props":1113,"children":1115},{"class":965,"line":1114},5,[1116,1121,1125,1130],{"type":397,"tag":624,"props":1117,"children":1118},{"style":976},[1119],{"type":402,"value":1120},"recur",{"type":397,"tag":624,"props":1122,"children":1123},{"style":1020},[1124],{"type":402,"value":985},{"type":397,"tag":624,"props":1126,"children":1127},{"style":1031},[1128],{"type":402,"value":1129},"500000",{"type":397,"tag":624,"props":1131,"children":1132},{"style":1020},[1133],{"type":402,"value":1067},{"type":397,"tag":624,"props":1135,"children":1137},{"class":965,"line":1136},6,[1138],{"type":397,"tag":624,"props":1139,"children":1141},{"style":1140},"--shiki-light:#90A4AE;--shiki-default:#6A737D;--shiki-dark:#6A737D;--shiki-sepia:#88846F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[1142],{"type":402,"value":1143},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":397,"tag":440,"props":1145,"children":1146},{},[1147,1152],{"type":397,"tag":444,"props":1148,"children":1149},{},[1150],{"type":402,"value":1151},"简单-将该函数转换为循环的写法避免栈溢出",{"type":397,"tag":444,"props":1153,"children":1154},{},[1155],{"type":402,"value":1156},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":397,"tag":649,"props":1158,"children":1159},{},[1160,1161,1165,1166],{"type":402,"value":653},{"type":397,"tag":655,"props":1162,"children":1163},{},[1164],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":1167,"children":1168},{},[1169],{"type":402,"value":1170},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":397,"tag":416,"props":1172,"children":1174},{"id":1173},"困难-商品全排列",[1175],{"type":402,"value":1173},{"type":397,"tag":429,"props":1177,"children":1178},{},[1179],{"type":402,"value":1180},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":397,"tag":649,"props":1182,"children":1183},{},[1184,1185,1190,1191],{"type":402,"value":653},{"type":397,"tag":655,"props":1186,"children":1187},{},[1188],{"type":402,"value":1189},"基础代码及用例",{"type":402,"value":653},{"type":397,"tag":429,"props":1192,"children":1193},{},[1194,1196,1200,1202,1212],{"type":402,"value":1195},"\n    ",{"type":397,"tag":614,"props":1197,"children":1199},{"src":1198},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":402,"value":1201},"\n    代码地址：",{"type":397,"tag":421,"props":1203,"children":1209},{"href":1204,"rel":1205,"target":1208},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[1206,1207],"noopener","noreferrer","_blank",[1210],{"type":402,"value":1211},"Element Plus Playground",{"type":402,"value":653},{"type":397,"tag":410,"props":1214,"children":1216},{"id":1215},"类型编程",[1217],{"type":402,"value":1215},{"type":397,"tag":416,"props":1219,"children":1221},{"id":1220},"简单-omit",[1222],{"type":402,"value":1223},"简单-Omit",{"type":397,"tag":649,"props":1225,"children":1226},{},[1227,1228,1232,1233],{"type":402,"value":653},{"type":397,"tag":655,"props":1229,"children":1230},{},[1231],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":1234,"children":1235},{},[1236],{"type":402,"value":1237},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":397,"tag":649,"props":1239,"children":1240},{},[1241,1242,1246,1247],{"type":402,"value":653},{"type":397,"tag":655,"props":1243,"children":1244},{},[1245],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":1248,"children":1249},{},[1250],{"type":402,"value":1251},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":397,"tag":416,"props":1253,"children":1255},{"id":1254},"简单-trim",[1256],{"type":402,"value":1257},"简单-Trim",{"type":397,"tag":649,"props":1259,"children":1260},{},[1261,1262,1266,1267],{"type":402,"value":653},{"type":397,"tag":655,"props":1263,"children":1264},{},[1265],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":1268,"children":1269},{},[1270],{"type":402,"value":1271},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":397,"tag":649,"props":1273,"children":1274},{},[1275,1276,1280,1281],{"type":402,"value":653},{"type":397,"tag":655,"props":1277,"children":1278},{},[1279],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":1282,"children":1283},{},[1284],{"type":402,"value":1285},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":397,"tag":416,"props":1287,"children":1289},{"id":1288},"中等-deepreadonly",[1290],{"type":402,"value":1291},"中等-DeepReadonly",{"type":397,"tag":649,"props":1293,"children":1294},{},[1295,1296,1300,1301],{"type":402,"value":653},{"type":397,"tag":655,"props":1297,"children":1298},{},[1299],{"type":402,"value":659},{"type":402,"value":653},{"type":397,"tag":662,"props":1302,"children":1303},{},[1304],{"type":402,"value":1305},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":397,"tag":649,"props":1307,"children":1308},{},[1309,1310,1314,1315],{"type":402,"value":653},{"type":397,"tag":655,"props":1311,"children":1312},{},[1313],{"type":402,"value":675},{"type":402,"value":653},{"type":397,"tag":662,"props":1316,"children":1317},{},[1318],{"type":402,"value":1319},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":397,"tag":404,"props":1321,"children":1322},{},[1323],{"type":402,"value":1324},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":391,"searchDepth":1004,"depth":1004,"links":1326},[1327,1328,1329,1330],{"id":412,"depth":1004,"text":412},{"id":640,"depth":1004,"text":640},{"id":887,"depth":1004,"text":887},{"id":1215,"depth":1004,"text":1215},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","md",[1337,1341],{"_path":1338,"title":1339,"description":1340},"/maps/_frontend/w3c/security/subresource-integrity","Subresource Integrity","子资源完整性协议允许浏览器通过检查哈希值来判断资源是否经过篡改。",{"_path":1342,"title":1343,"description":391},"/maps/_hire/interview/questions/overall","题库",1710257739518]