[{"data":1,"prerenderedAt":1349},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":393,"/maps/_hire/intern-surround":1340},[4,35,86,105,132,138,144,150,387],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"数字化转型","/gists/digital-transformation",{"title":205,"_path":206},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":208,"_path":209},"正则表达式","/gists/eegex",{"title":211,"_path":212},"Emoji","/gists/emoji",{"title":214,"_path":215},"工程","/gists/engineering",{"title":217,"_path":218},"熵","/gists/entropy",{"title":220,"_path":221},"Environment","/gists/environment",{"title":223,"_path":224},"Erlang","/gists/erlang",{"title":226,"_path":227},"逃离塔克夫","/gists/escape-from-tarkov",{"title":229,"_path":230},"ESNext (ES6-ES11)","/gists/esnext",{"title":232,"_path":233},"Eval！","/gists/eval",{"title":235,"_path":236},"Flutter","/gists/flutter",{"title":238,"_path":239},"字体","/gists/font",{"title":241,"_path":242},"JS 函数式编程","/gists/functional",{"title":244,"_path":245},"游戏化","/gists/gamification",{"title":247,"_path":248},"Google C++ Standard","/gists/google-cpp-standard",{"title":250,"_path":251},"双向链接完全体","/gists/graph",{"title":253,"_path":254},"Hardwares","/gists/hardwares",{"title":256,"_path":257},"哈希冲突","/gists/hash-collision",{"title":259,"_path":260},"信息设计","/gists/information-design",{"title":262,"_path":263},"InstantPage","/gists/instant.page",{"title":265,"_path":266},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":268,"_path":269},"KVStore","/gists/key-value-db",{"title":271,"_path":272},"Kubernetes","/gists/kubernetes",{"title":274,"_path":275},"Makefile","/gists/makefile",{"title":277,"_path":278},"Markdown Inline Style","/gists/markdown-nice",{"title":280,"_path":281},"小程序","/gists/miniapp",{"title":283,"_path":284},"减小页面快照体积","/gists/minify-html",{"title":286,"_path":287},"mklink","/gists/mklink",{"title":289,"_path":290},"Mock","/gists/mock",{"title":292,"_path":293},"多人协作系统","/gists/multiplayer",{"title":295,"_path":296},"多端应用","/gists/multy-end-app",{"title":298,"_path":299},"神经科学","/gists/neuroscience",{"title":301,"_path":302},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":304,"_path":305},"PInvoke","/gists/pinvoke",{"title":307,"_path":308},"像素","/gists/pixel",{"title":310,"_path":311},"PowerShell","/gists/powershell",{"title":313,"_path":314},"量子","/gists/quantum",{"title":316,"_path":317},"保持好奇心","/gists/questions",{"title":319,"_path":320},"React Native","/gists/react-native",{"title":322,"_path":323},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":325,"_path":326},"SEO","/gists/seo",{"title":328,"_path":329},"Shader","/gists/shader",{"title":331,"_path":332},"Shape Up","/gists/shape-up",{"title":334,"_path":335},"睡觉","/gists/sleep",{"title":337,"_path":338},"记录奇怪的问题","/gists/solved",{"title":340,"_path":341},"States","/gists/states",{"title":343,"_path":344},"Storage","/gists/storage",{"title":346,"_path":347},"音视频流处理","/gists/stream-cli",{"title":349,"_path":350},"Symbol","/gists/symbol",{"title":352,"_path":353},"系统论","/gists/systems-theory",{"title":355,"_path":356},"Taro","/gists/taro",{"title":358,"_path":359},"任务切片","/gists/task-slice",{"title":361,"_path":362},"技术偏好","/gists/tech-dudge",{"title":364,"_path":365},"Untitled","/gists/untitled",{"title":367,"_path":368},"可变字体","/gists/variable-font",{"title":370,"_path":371},"视觉错觉","/gists/visual-illusion",{"title":373,"_path":374},"SS(SSR)","/gists/vpn",{"title":376,"_path":377},"VS Code 插件开发","/gists/vscode-plugin",{"title":379,"_path":380},"Web Components","/gists/web-components",{"title":382,"_path":383},"Windows","/gists/windows",{"title":385,"_path":386},"查缺补漏","/gists/wrong",{"title":388,"_path":389,"children":390},"我 / About","/hire",[391],{"title":392,"_path":389},"📬 技术简历",{"_path":394,"_dir":395,"_draft":396,"_partial":397,"_locale":398,"title":399,"description":400,"body":401,"_type":1334,"_id":1335,"_source":1336,"_file":1337,"_stem":1338,"_extension":1339},"/maps/_hire/intern","_hire",false,true,"","前端笔试题库","面向实习生或 B 端 3~5 年经验前端",{"type":402,"children":403,"toc":1328},"root",[404,412,418,431,437,442,462,472,477,481,494,504,509,513,530,540,545,558,562,570,581,586,590,598,608,613,621,641,646,651,670,685,690,695,709,713,735,740,754,758,771,776,790,804,809,823,837,848,862,876,880,888,893,899,913,918,923,937,951,956,1147,1160,1174,1179,1184,1216,1221,1227,1241,1255,1261,1275,1289,1295,1309,1323],{"type":405,"tag":406,"props":407,"children":408},"element","style",{},[409],{"type":410,"value":411},"text","\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":405,"tag":413,"props":414,"children":416},"h2",{"id":415},"算法题",[417],{"type":410,"value":415},{"type":405,"tag":419,"props":420,"children":422},"h4",{"id":421},"简单-斐波那契数列",[423],{"type":405,"tag":424,"props":425,"children":429},"a",{"href":426,"rel":427},"https://leetcode.cn/problems/fibonacci-number/",[428],"nofollow",[430],{"type":410,"value":421},{"type":405,"tag":432,"props":433,"children":434},"p",{},[435],{"type":410,"value":436},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":405,"tag":432,"props":438,"children":439},{},[440],{"type":410,"value":441},"后续提问方向：",{"type":405,"tag":443,"props":444,"children":445},"ul",{},[446,457],{"type":405,"tag":447,"props":448,"children":449},"li",{},[450],{"type":405,"tag":424,"props":451,"children":454},{"href":452,"rel":453},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[428],[455],{"type":410,"value":456},"简单-非递归解法（递推）",{"type":405,"tag":447,"props":458,"children":459},{},[460],{"type":410,"value":461},"简单-时间复杂度最小的解法（枚举）",{"type":405,"tag":419,"props":463,"children":465},{"id":464},"简单-合并有序链表",[466],{"type":405,"tag":424,"props":467,"children":470},{"href":468,"rel":469},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[428],[471],{"type":410,"value":464},{"type":405,"tag":432,"props":473,"children":474},{},[475],{"type":410,"value":476},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":405,"tag":432,"props":478,"children":479},{},[480],{"type":410,"value":441},{"type":405,"tag":443,"props":482,"children":483},{},[484],{"type":405,"tag":447,"props":485,"children":486},{},[487],{"type":405,"tag":424,"props":488,"children":491},{"href":489,"rel":490},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[428],[492],{"type":410,"value":493},"简单-空间复杂度最小的解法（迭代）",{"type":405,"tag":419,"props":495,"children":497},{"id":496},"简单-反转链表",[498],{"type":405,"tag":424,"props":499,"children":502},{"href":500,"rel":501},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[428],[503],{"type":410,"value":496},{"type":405,"tag":432,"props":505,"children":506},{},[507],{"type":410,"value":508},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":405,"tag":432,"props":510,"children":511},{},[512],{"type":410,"value":441},{"type":405,"tag":443,"props":514,"children":515},{},[516,525],{"type":405,"tag":447,"props":517,"children":518},{},[519],{"type":405,"tag":424,"props":520,"children":523},{"href":521,"rel":522},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[428],[524],{"type":410,"value":493},{"type":405,"tag":447,"props":526,"children":527},{},[528],{"type":410,"value":529},"中等-环形链表或包含环的链表的反转",{"type":405,"tag":419,"props":531,"children":533},{"id":532},"中等-有效的括号字符串",[534],{"type":405,"tag":424,"props":535,"children":538},{"href":536,"rel":537},"https://leetcode.cn/problems/valid-parenthesis-string/",[428],[539],{"type":410,"value":532},{"type":405,"tag":432,"props":541,"children":542},{},[543],{"type":410,"value":544},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":405,"tag":443,"props":546,"children":547},{},[548,553],{"type":405,"tag":447,"props":549,"children":550},{},[551],{"type":410,"value":552},"\")(()))\"          =>  false",{"type":405,"tag":447,"props":554,"children":555},{},[556],{"type":410,"value":557},"\"(())((()())())\"  =>  true",{"type":405,"tag":432,"props":559,"children":560},{},[561],{"type":410,"value":441},{"type":405,"tag":443,"props":563,"children":564},{},[565],{"type":405,"tag":447,"props":566,"children":567},{},[568],{"type":410,"value":569},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":405,"tag":419,"props":571,"children":573},{"id":572},"中等-数组第-k-个最大元素",[574],{"type":405,"tag":424,"props":575,"children":578},{"href":576,"rel":577},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[428],[579],{"type":410,"value":580},"中等-数组第 K 个最大元素",{"type":405,"tag":432,"props":582,"children":583},{},[584],{"type":410,"value":585},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":405,"tag":432,"props":587,"children":588},{},[589],{"type":410,"value":441},{"type":405,"tag":443,"props":591,"children":592},{},[593],{"type":405,"tag":447,"props":594,"children":595},{},[596],{"type":410,"value":597},"困难-使用时间复杂度为 O(n) 的解法。",{"type":405,"tag":419,"props":599,"children":601},{"id":600},"中等-二叉树的层序遍历",[602],{"type":405,"tag":424,"props":603,"children":606},{"href":604,"rel":605},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[428],[607],{"type":410,"value":600},{"type":405,"tag":432,"props":609,"children":610},{},[611],{"type":410,"value":612},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":405,"tag":432,"props":614,"children":615},{},[616],{"type":405,"tag":617,"props":618,"children":620},"img",{"alt":398,"src":619},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":405,"tag":432,"props":622,"children":623},{},[624,626,632,634,639],{"type":410,"value":625},"输入：如上图所示。输出：[[3],",{"type":405,"tag":627,"props":628,"children":629},"span",{},[630],{"type":410,"value":631},"9,20",{"type":410,"value":633},",",{"type":405,"tag":627,"props":635,"children":636},{},[637],{"type":410,"value":638},"15,7",{"type":410,"value":640},"]",{"type":405,"tag":413,"props":642,"children":644},{"id":643},"编程题",[645],{"type":410,"value":643},{"type":405,"tag":419,"props":647,"children":649},{"id":648},"简单-bind",[650],{"type":410,"value":648},{"type":405,"tag":652,"props":653,"children":654},"details",{},[655,657,663,664],{"type":410,"value":656},"\n  ",{"type":405,"tag":658,"props":659,"children":660},"summary",{},[661],{"type":410,"value":662},"用例",{"type":410,"value":656},{"type":405,"tag":665,"props":666,"children":667},"highlight",{},[668],{"type":410,"value":669},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":405,"tag":652,"props":671,"children":672},{},[673,674,679,680],{"type":410,"value":656},{"type":405,"tag":658,"props":675,"children":676},{},[677],{"type":410,"value":678},"参考实现",{"type":410,"value":656},{"type":405,"tag":665,"props":681,"children":682},{},[683],{"type":410,"value":684},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":405,"tag":419,"props":686,"children":688},{"id":687},"中等-instanceof",[689],{"type":410,"value":687},{"type":405,"tag":432,"props":691,"children":692},{},[693],{"type":410,"value":694},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":405,"tag":652,"props":696,"children":697},{},[698,699,703,704],{"type":410,"value":656},{"type":405,"tag":658,"props":700,"children":701},{},[702],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":705,"children":706},{},[707],{"type":410,"value":708},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":405,"tag":432,"props":710,"children":711},{},[712],{"type":410,"value":441},{"type":405,"tag":443,"props":714,"children":715},{},[716,721],{"type":405,"tag":447,"props":717,"children":718},{},[719],{"type":410,"value":720},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":405,"tag":447,"props":722,"children":723},{},[724,726,733],{"type":410,"value":725},"偏门-创造一个类 God 使得 ",{"type":405,"tag":727,"props":728,"children":730},"code",{"className":729},[],[731],{"type":410,"value":732},"null instanceof God",{"type":410,"value":734}," 为真",{"type":405,"tag":419,"props":736,"children":738},{"id":737},"中等-深拷贝函数",[739],{"type":410,"value":737},{"type":405,"tag":652,"props":741,"children":742},{},[743,744,748,749],{"type":410,"value":656},{"type":405,"tag":658,"props":745,"children":746},{},[747],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":750,"children":751},{},[752],{"type":410,"value":753},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":405,"tag":432,"props":755,"children":756},{},[757],{"type":410,"value":441},{"type":405,"tag":443,"props":759,"children":760},{},[761,766],{"type":405,"tag":447,"props":762,"children":763},{},[764],{"type":410,"value":765},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":405,"tag":447,"props":767,"children":768},{},[769],{"type":410,"value":770},"中等-如何处理对象间循环引用",{"type":405,"tag":419,"props":772,"children":774},{"id":773},"中等-柯里化函数",[775],{"type":410,"value":773},{"type":405,"tag":652,"props":777,"children":778},{},[779,780,784,785],{"type":410,"value":656},{"type":405,"tag":658,"props":781,"children":782},{},[783],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":786,"children":787},{},[788],{"type":410,"value":789},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":405,"tag":652,"props":791,"children":792},{},[793,794,798,799],{"type":410,"value":656},{"type":405,"tag":658,"props":795,"children":796},{},[797],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":800,"children":801},{},[802],{"type":410,"value":803},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":405,"tag":419,"props":805,"children":807},{"id":806},"中等-列表数据转树结构",[808],{"type":410,"value":806},{"type":405,"tag":652,"props":810,"children":811},{},[812,813,817,818],{"type":410,"value":656},{"type":405,"tag":658,"props":814,"children":815},{},[816],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":819,"children":820},{},[821],{"type":410,"value":822},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":405,"tag":652,"props":824,"children":825},{},[826,827,831,832],{"type":410,"value":656},{"type":405,"tag":658,"props":828,"children":829},{},[830],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":833,"children":834},{},[835],{"type":410,"value":836},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":405,"tag":419,"props":838,"children":840},{"id":839},"中等-promisemapseries",[841],{"type":405,"tag":424,"props":842,"children":845},{"href":843,"rel":844},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[428],[846],{"type":410,"value":847},"中等-Promise.mapSeries",{"type":405,"tag":652,"props":849,"children":850},{},[851,852,856,857],{"type":410,"value":656},{"type":405,"tag":658,"props":853,"children":854},{},[855],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":858,"children":859},{},[860],{"type":410,"value":861},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":405,"tag":652,"props":863,"children":864},{},[865,866,870,871],{"type":410,"value":656},{"type":405,"tag":658,"props":867,"children":868},{},[869],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":872,"children":873},{},[874],{"type":410,"value":875},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":405,"tag":432,"props":877,"children":878},{},[879],{"type":410,"value":441},{"type":405,"tag":443,"props":881,"children":882},{},[883],{"type":405,"tag":447,"props":884,"children":885},{},[886],{"type":410,"value":887},"困难-给实现加上类型（TypeScript）",{"type":405,"tag":413,"props":889,"children":891},{"id":890},"综合题",[892],{"type":410,"value":890},{"type":405,"tag":419,"props":894,"children":896},{"id":895},"简单-统计当前页面用到的所有-html-标签的种类",[897],{"type":410,"value":898},"简单-统计当前页面用到的所有 HTML 标签的种类",{"type":405,"tag":652,"props":900,"children":901},{},[902,903,907,908],{"type":410,"value":656},{"type":405,"tag":658,"props":904,"children":905},{},[906],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":909,"children":910},{},[911],{"type":410,"value":912},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":405,"tag":419,"props":914,"children":916},{"id":915},"中等-商品排序",[917],{"type":410,"value":915},{"type":405,"tag":432,"props":919,"children":920},{},[921],{"type":410,"value":922},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":405,"tag":652,"props":924,"children":925},{},[926,927,931,932],{"type":410,"value":656},{"type":405,"tag":658,"props":928,"children":929},{},[930],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":933,"children":934},{},[935],{"type":410,"value":936},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":405,"tag":652,"props":938,"children":939},{},[940,941,945,946],{"type":410,"value":656},{"type":405,"tag":658,"props":942,"children":943},{},[944],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":947,"children":948},{},[949],{"type":410,"value":950},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":405,"tag":419,"props":952,"children":954},{"id":953},"困难-给定以下递归函数提问",[955],{"type":410,"value":953},{"type":405,"tag":957,"props":958,"children":962},"pre",{"className":959,"code":960,"language":961,"meta":398,"style":398},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[963],{"type":405,"tag":727,"props":964,"children":965},{"__ignoreMap":398},[966,1005,1071,1106,1115,1137],{"type":405,"tag":627,"props":967,"children":970},{"class":968,"line":969},"line",1,[971,977,983,989,995,1000],{"type":405,"tag":627,"props":972,"children":974},{"style":973},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[975],{"type":410,"value":976},"function",{"type":405,"tag":627,"props":978,"children":980},{"style":979},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[981],{"type":410,"value":982}," recur",{"type":405,"tag":627,"props":984,"children":986},{"style":985},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[987],{"type":410,"value":988},"(",{"type":405,"tag":627,"props":990,"children":992},{"style":991},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[993],{"type":410,"value":994},"n",{"type":405,"tag":627,"props":996,"children":997},{"style":985},[998],{"type":410,"value":999},")",{"type":405,"tag":627,"props":1001,"children":1002},{"style":985},[1003],{"type":410,"value":1004}," {\n",{"type":405,"tag":627,"props":1006,"children":1008},{"class":968,"line":1007},2,[1009,1015,1021,1026,1032,1038,1043,1048,1053,1058,1062,1066],{"type":405,"tag":627,"props":1010,"children":1012},{"style":1011},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1013],{"type":410,"value":1014},"    if",{"type":405,"tag":627,"props":1016,"children":1018},{"style":1017},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1019],{"type":410,"value":1020}," (",{"type":405,"tag":627,"props":1022,"children":1024},{"style":1023},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1025],{"type":410,"value":994},{"type":405,"tag":627,"props":1027,"children":1029},{"style":1028},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[1030],{"type":410,"value":1031}," ===",{"type":405,"tag":627,"props":1033,"children":1035},{"style":1034},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1036],{"type":410,"value":1037}," 0",{"type":405,"tag":627,"props":1039,"children":1040},{"style":1017},[1041],{"type":410,"value":1042},") ",{"type":405,"tag":627,"props":1044,"children":1045},{"style":1023},[1046],{"type":410,"value":1047},"console",{"type":405,"tag":627,"props":1049,"children":1050},{"style":985},[1051],{"type":410,"value":1052},".",{"type":405,"tag":627,"props":1054,"children":1055},{"style":979},[1056],{"type":410,"value":1057},"log",{"type":405,"tag":627,"props":1059,"children":1060},{"style":1017},[1061],{"type":410,"value":988},{"type":405,"tag":627,"props":1063,"children":1064},{"style":1023},[1065],{"type":410,"value":994},{"type":405,"tag":627,"props":1067,"children":1068},{"style":1017},[1069],{"type":410,"value":1070},")\n",{"type":405,"tag":627,"props":1072,"children":1074},{"class":968,"line":1073},3,[1075,1080,1084,1088,1092,1097,1102],{"type":405,"tag":627,"props":1076,"children":1077},{"style":1011},[1078],{"type":410,"value":1079},"    else",{"type":405,"tag":627,"props":1081,"children":1082},{"style":979},[1083],{"type":410,"value":982},{"type":405,"tag":627,"props":1085,"children":1086},{"style":1017},[1087],{"type":410,"value":988},{"type":405,"tag":627,"props":1089,"children":1090},{"style":1023},[1091],{"type":410,"value":994},{"type":405,"tag":627,"props":1093,"children":1094},{"style":1028},[1095],{"type":410,"value":1096}," -",{"type":405,"tag":627,"props":1098,"children":1099},{"style":1034},[1100],{"type":410,"value":1101}," 1",{"type":405,"tag":627,"props":1103,"children":1104},{"style":1017},[1105],{"type":410,"value":1070},{"type":405,"tag":627,"props":1107,"children":1109},{"class":968,"line":1108},4,[1110],{"type":405,"tag":627,"props":1111,"children":1112},{"style":985},[1113],{"type":410,"value":1114},"}\n",{"type":405,"tag":627,"props":1116,"children":1118},{"class":968,"line":1117},5,[1119,1124,1128,1133],{"type":405,"tag":627,"props":1120,"children":1121},{"style":979},[1122],{"type":410,"value":1123},"recur",{"type":405,"tag":627,"props":1125,"children":1126},{"style":1023},[1127],{"type":410,"value":988},{"type":405,"tag":627,"props":1129,"children":1130},{"style":1034},[1131],{"type":410,"value":1132},"500000",{"type":405,"tag":627,"props":1134,"children":1135},{"style":1023},[1136],{"type":410,"value":1070},{"type":405,"tag":627,"props":1138,"children":1140},{"class":968,"line":1139},6,[1141],{"type":405,"tag":627,"props":1142,"children":1144},{"style":1143},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[1145],{"type":410,"value":1146},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":405,"tag":443,"props":1148,"children":1149},{},[1150,1155],{"type":405,"tag":447,"props":1151,"children":1152},{},[1153],{"type":410,"value":1154},"简单-将该函数转换为循环的写法避免栈溢出",{"type":405,"tag":447,"props":1156,"children":1157},{},[1158],{"type":410,"value":1159},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":405,"tag":652,"props":1161,"children":1162},{},[1163,1164,1168,1169],{"type":410,"value":656},{"type":405,"tag":658,"props":1165,"children":1166},{},[1167],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":1170,"children":1171},{},[1172],{"type":410,"value":1173},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":405,"tag":419,"props":1175,"children":1177},{"id":1176},"困难-商品全排列",[1178],{"type":410,"value":1176},{"type":405,"tag":432,"props":1180,"children":1181},{},[1182],{"type":410,"value":1183},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":405,"tag":652,"props":1185,"children":1186},{},[1187,1188,1193,1194],{"type":410,"value":656},{"type":405,"tag":658,"props":1189,"children":1190},{},[1191],{"type":410,"value":1192},"基础代码及用例",{"type":410,"value":656},{"type":405,"tag":432,"props":1195,"children":1196},{},[1197,1199,1203,1205,1215],{"type":410,"value":1198},"\n    ",{"type":405,"tag":617,"props":1200,"children":1202},{"src":1201},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":410,"value":1204},"\n    代码地址：",{"type":405,"tag":424,"props":1206,"children":1212},{"href":1207,"rel":1208,"target":1211},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[1209,1210],"noopener","noreferrer","_blank",[1213],{"type":410,"value":1214},"Element Plus Playground",{"type":410,"value":656},{"type":405,"tag":413,"props":1217,"children":1219},{"id":1218},"类型编程",[1220],{"type":410,"value":1218},{"type":405,"tag":419,"props":1222,"children":1224},{"id":1223},"简单-omit",[1225],{"type":410,"value":1226},"简单-Omit",{"type":405,"tag":652,"props":1228,"children":1229},{},[1230,1231,1235,1236],{"type":410,"value":656},{"type":405,"tag":658,"props":1232,"children":1233},{},[1234],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":1237,"children":1238},{},[1239],{"type":410,"value":1240},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":405,"tag":652,"props":1242,"children":1243},{},[1244,1245,1249,1250],{"type":410,"value":656},{"type":405,"tag":658,"props":1246,"children":1247},{},[1248],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":1251,"children":1252},{},[1253],{"type":410,"value":1254},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":405,"tag":419,"props":1256,"children":1258},{"id":1257},"简单-trim",[1259],{"type":410,"value":1260},"简单-Trim",{"type":405,"tag":652,"props":1262,"children":1263},{},[1264,1265,1269,1270],{"type":410,"value":656},{"type":405,"tag":658,"props":1266,"children":1267},{},[1268],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":1271,"children":1272},{},[1273],{"type":410,"value":1274},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":405,"tag":652,"props":1276,"children":1277},{},[1278,1279,1283,1284],{"type":410,"value":656},{"type":405,"tag":658,"props":1280,"children":1281},{},[1282],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":1285,"children":1286},{},[1287],{"type":410,"value":1288},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":405,"tag":419,"props":1290,"children":1292},{"id":1291},"中等-deepreadonly",[1293],{"type":410,"value":1294},"中等-DeepReadonly",{"type":405,"tag":652,"props":1296,"children":1297},{},[1298,1299,1303,1304],{"type":410,"value":656},{"type":405,"tag":658,"props":1300,"children":1301},{},[1302],{"type":410,"value":662},{"type":410,"value":656},{"type":405,"tag":665,"props":1305,"children":1306},{},[1307],{"type":410,"value":1308},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":405,"tag":652,"props":1310,"children":1311},{},[1312,1313,1317,1318],{"type":410,"value":656},{"type":405,"tag":658,"props":1314,"children":1315},{},[1316],{"type":410,"value":678},{"type":410,"value":656},{"type":405,"tag":665,"props":1319,"children":1320},{},[1321],{"type":410,"value":1322},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":405,"tag":406,"props":1324,"children":1325},{},[1326],{"type":410,"value":1327},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":398,"searchDepth":1007,"depth":1007,"links":1329},[1330,1331,1332,1333],{"id":415,"depth":1007,"text":415},{"id":643,"depth":1007,"text":643},{"id":890,"depth":1007,"text":890},{"id":1218,"depth":1007,"text":1218},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1341,1345],{"_path":1342,"title":1343,"description":1344},"/maps/_frontend/w3c/security/subresource-integrity","Subresource Integrity","子资源完整性协议允许浏览器通过检查哈希值来判断资源是否经过篡改。",{"_path":1346,"title":1347,"description":1348},"/maps/_hire/interview/questions/overall","面试题库","前端开发面试题集合，包含软件工程、算法数据结构等多个技术领域的经典面试题。",1741604956411]