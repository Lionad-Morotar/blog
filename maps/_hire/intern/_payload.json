[{"data":1,"prerenderedAt":1340},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":384,"/maps/_hire/intern-surround":1331},[4,35,86,105,132,138,144,150,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":205,"_path":206},"正则表达式","/gists/eegex",{"title":208,"_path":209},"Emoji","/gists/emoji",{"title":211,"_path":212},"工程","/gists/engineering",{"title":214,"_path":215},"熵","/gists/entropy",{"title":217,"_path":218},"Environment","/gists/environment",{"title":220,"_path":221},"Erlang","/gists/erlang",{"title":223,"_path":224},"逃离塔克夫","/gists/escape-from-tarkov",{"title":226,"_path":227},"ESNext (ES6-ES11)","/gists/esnext",{"title":229,"_path":230},"Eval！","/gists/eval",{"title":232,"_path":233},"Flutter","/gists/flutter",{"title":235,"_path":236},"字体","/gists/font",{"title":238,"_path":239},"JS 函数式编程","/gists/functional",{"title":241,"_path":242},"游戏化","/gists/gamification",{"title":244,"_path":245},"Google C++ Standard","/gists/google-cpp-standard",{"title":247,"_path":248},"双向链接完全体","/gists/graph",{"title":250,"_path":251},"Hardwares","/gists/hardwares",{"title":253,"_path":254},"哈希冲突","/gists/hash-collision",{"title":256,"_path":257},"信息设计","/gists/information-design",{"title":259,"_path":260},"InstantPage","/gists/instant.page",{"title":262,"_path":263},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":265,"_path":266},"KVStore","/gists/key-value-db",{"title":268,"_path":269},"Kubernetes","/gists/kubernetes",{"title":271,"_path":272},"Makefile","/gists/makefile",{"title":274,"_path":275},"Markdown Inline Style","/gists/markdown-nice",{"title":277,"_path":278},"减小页面快照体积","/gists/minify-html",{"title":280,"_path":281},"mklink","/gists/mklink",{"title":283,"_path":284},"Mock","/gists/mock",{"title":286,"_path":287},"多人协作系统","/gists/multiplayer",{"title":289,"_path":290},"多端应用","/gists/multy-end-app",{"title":292,"_path":293},"神经科学","/gists/neuroscience",{"title":295,"_path":296},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":298,"_path":299},"PInvoke","/gists/pinvoke",{"title":301,"_path":302},"像素","/gists/pixel",{"title":304,"_path":305},"PowerShell","/gists/powershell",{"title":307,"_path":308},"量子","/gists/quantum",{"title":310,"_path":311},"保持好奇心","/gists/questions",{"title":313,"_path":314},"React Native","/gists/react-native",{"title":316,"_path":317},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":319,"_path":320},"SEO","/gists/seo",{"title":322,"_path":323},"Shader","/gists/shader",{"title":325,"_path":326},"Shape Up","/gists/shape-up",{"title":328,"_path":329},"睡觉","/gists/sleep",{"title":331,"_path":332},"记录奇怪的问题","/gists/solved",{"title":334,"_path":335},"States","/gists/states",{"title":337,"_path":338},"Storage","/gists/storage",{"title":340,"_path":341},"音视频流处理","/gists/stream-cli",{"title":343,"_path":344},"Symbol","/gists/symbol",{"title":346,"_path":347},"系统论","/gists/systems-theory",{"title":349,"_path":350},"任务切片","/gists/task-slice",{"title":352,"_path":353},"技术偏好","/gists/tech-dudge",{"title":355,"_path":356},"Untitled","/gists/untitled",{"title":358,"_path":359},"可变字体","/gists/variable-font",{"title":361,"_path":362},"视觉错觉","/gists/visual-illusion",{"title":364,"_path":365},"SS(SSR)","/gists/vpn",{"title":367,"_path":368},"VS Code 插件开发","/gists/vscode-plugin",{"title":370,"_path":371},"Web Components","/gists/web-components",{"title":373,"_path":374},"Windows","/gists/windows",{"title":376,"_path":377},"查缺补漏","/gists/wrong",{"title":379,"_path":380,"children":381},"我 / About","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"_path":385,"_dir":386,"_draft":387,"_partial":388,"_locale":389,"title":390,"description":391,"body":392,"_type":1325,"_id":1326,"_source":1327,"_file":1328,"_stem":1329,"_extension":1330},"/maps/_hire/intern","_hire",false,true,"","前端笔试题库","面向实习生或 B 端 3~5 年经验前端",{"type":393,"children":394,"toc":1319},"root",[395,403,409,422,428,433,453,463,468,472,485,495,500,504,521,531,536,549,553,561,572,577,581,589,599,604,612,632,637,642,661,676,681,686,700,704,726,731,745,749,762,767,781,795,800,814,828,839,853,867,871,879,884,890,904,909,914,928,942,947,1138,1151,1165,1170,1175,1207,1212,1218,1232,1246,1252,1266,1280,1286,1300,1314],{"type":396,"tag":397,"props":398,"children":399},"element","style",{},[400],{"type":401,"value":402},"text","\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":396,"tag":404,"props":405,"children":407},"h2",{"id":406},"算法题",[408],{"type":401,"value":406},{"type":396,"tag":410,"props":411,"children":413},"h4",{"id":412},"简单-斐波那契数列",[414],{"type":396,"tag":415,"props":416,"children":420},"a",{"href":417,"rel":418},"https://leetcode.cn/problems/fibonacci-number/",[419],"nofollow",[421],{"type":401,"value":412},{"type":396,"tag":423,"props":424,"children":425},"p",{},[426],{"type":401,"value":427},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":396,"tag":423,"props":429,"children":430},{},[431],{"type":401,"value":432},"后续提问方向：",{"type":396,"tag":434,"props":435,"children":436},"ul",{},[437,448],{"type":396,"tag":438,"props":439,"children":440},"li",{},[441],{"type":396,"tag":415,"props":442,"children":445},{"href":443,"rel":444},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[419],[446],{"type":401,"value":447},"简单-非递归解法（递推）",{"type":396,"tag":438,"props":449,"children":450},{},[451],{"type":401,"value":452},"简单-时间复杂度最小的解法（枚举）",{"type":396,"tag":410,"props":454,"children":456},{"id":455},"简单-合并有序链表",[457],{"type":396,"tag":415,"props":458,"children":461},{"href":459,"rel":460},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[419],[462],{"type":401,"value":455},{"type":396,"tag":423,"props":464,"children":465},{},[466],{"type":401,"value":467},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":396,"tag":423,"props":469,"children":470},{},[471],{"type":401,"value":432},{"type":396,"tag":434,"props":473,"children":474},{},[475],{"type":396,"tag":438,"props":476,"children":477},{},[478],{"type":396,"tag":415,"props":479,"children":482},{"href":480,"rel":481},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[419],[483],{"type":401,"value":484},"简单-空间复杂度最小的解法（迭代）",{"type":396,"tag":410,"props":486,"children":488},{"id":487},"简单-反转链表",[489],{"type":396,"tag":415,"props":490,"children":493},{"href":491,"rel":492},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[419],[494],{"type":401,"value":487},{"type":396,"tag":423,"props":496,"children":497},{},[498],{"type":401,"value":499},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":396,"tag":423,"props":501,"children":502},{},[503],{"type":401,"value":432},{"type":396,"tag":434,"props":505,"children":506},{},[507,516],{"type":396,"tag":438,"props":508,"children":509},{},[510],{"type":396,"tag":415,"props":511,"children":514},{"href":512,"rel":513},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[419],[515],{"type":401,"value":484},{"type":396,"tag":438,"props":517,"children":518},{},[519],{"type":401,"value":520},"中等-环形链表或包含环的链表的反转",{"type":396,"tag":410,"props":522,"children":524},{"id":523},"中等-有效的括号字符串",[525],{"type":396,"tag":415,"props":526,"children":529},{"href":527,"rel":528},"https://leetcode.cn/problems/valid-parenthesis-string/",[419],[530],{"type":401,"value":523},{"type":396,"tag":423,"props":532,"children":533},{},[534],{"type":401,"value":535},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":396,"tag":434,"props":537,"children":538},{},[539,544],{"type":396,"tag":438,"props":540,"children":541},{},[542],{"type":401,"value":543},"\")(()))\"          =>  false",{"type":396,"tag":438,"props":545,"children":546},{},[547],{"type":401,"value":548},"\"(())((()())())\"  =>  true",{"type":396,"tag":423,"props":550,"children":551},{},[552],{"type":401,"value":432},{"type":396,"tag":434,"props":554,"children":555},{},[556],{"type":396,"tag":438,"props":557,"children":558},{},[559],{"type":401,"value":560},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":396,"tag":410,"props":562,"children":564},{"id":563},"中等-数组第-k-个最大元素",[565],{"type":396,"tag":415,"props":566,"children":569},{"href":567,"rel":568},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[419],[570],{"type":401,"value":571},"中等-数组第 K 个最大元素",{"type":396,"tag":423,"props":573,"children":574},{},[575],{"type":401,"value":576},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":396,"tag":423,"props":578,"children":579},{},[580],{"type":401,"value":432},{"type":396,"tag":434,"props":582,"children":583},{},[584],{"type":396,"tag":438,"props":585,"children":586},{},[587],{"type":401,"value":588},"困难-使用时间复杂度为 O(n) 的解法。",{"type":396,"tag":410,"props":590,"children":592},{"id":591},"中等-二叉树的层序遍历",[593],{"type":396,"tag":415,"props":594,"children":597},{"href":595,"rel":596},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[419],[598],{"type":401,"value":591},{"type":396,"tag":423,"props":600,"children":601},{},[602],{"type":401,"value":603},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":396,"tag":423,"props":605,"children":606},{},[607],{"type":396,"tag":608,"props":609,"children":611},"img",{"alt":389,"src":610},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":396,"tag":423,"props":613,"children":614},{},[615,617,623,625,630],{"type":401,"value":616},"输入：如上图所示。输出：[[3],",{"type":396,"tag":618,"props":619,"children":620},"span",{},[621],{"type":401,"value":622},"9,20",{"type":401,"value":624},",",{"type":396,"tag":618,"props":626,"children":627},{},[628],{"type":401,"value":629},"15,7",{"type":401,"value":631},"]",{"type":396,"tag":404,"props":633,"children":635},{"id":634},"编程题",[636],{"type":401,"value":634},{"type":396,"tag":410,"props":638,"children":640},{"id":639},"简单-bind",[641],{"type":401,"value":639},{"type":396,"tag":643,"props":644,"children":645},"details",{},[646,648,654,655],{"type":401,"value":647},"\n  ",{"type":396,"tag":649,"props":650,"children":651},"summary",{},[652],{"type":401,"value":653},"用例",{"type":401,"value":647},{"type":396,"tag":656,"props":657,"children":658},"highlight",{},[659],{"type":401,"value":660},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":396,"tag":643,"props":662,"children":663},{},[664,665,670,671],{"type":401,"value":647},{"type":396,"tag":649,"props":666,"children":667},{},[668],{"type":401,"value":669},"参考实现",{"type":401,"value":647},{"type":396,"tag":656,"props":672,"children":673},{},[674],{"type":401,"value":675},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":396,"tag":410,"props":677,"children":679},{"id":678},"中等-instanceof",[680],{"type":401,"value":678},{"type":396,"tag":423,"props":682,"children":683},{},[684],{"type":401,"value":685},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":396,"tag":643,"props":687,"children":688},{},[689,690,694,695],{"type":401,"value":647},{"type":396,"tag":649,"props":691,"children":692},{},[693],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":696,"children":697},{},[698],{"type":401,"value":699},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":396,"tag":423,"props":701,"children":702},{},[703],{"type":401,"value":432},{"type":396,"tag":434,"props":705,"children":706},{},[707,712],{"type":396,"tag":438,"props":708,"children":709},{},[710],{"type":401,"value":711},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":396,"tag":438,"props":713,"children":714},{},[715,717,724],{"type":401,"value":716},"偏门-创造一个类 God 使得 ",{"type":396,"tag":718,"props":719,"children":721},"code",{"className":720},[],[722],{"type":401,"value":723},"null instanceof God",{"type":401,"value":725}," 为真",{"type":396,"tag":410,"props":727,"children":729},{"id":728},"中等-深拷贝函数",[730],{"type":401,"value":728},{"type":396,"tag":643,"props":732,"children":733},{},[734,735,739,740],{"type":401,"value":647},{"type":396,"tag":649,"props":736,"children":737},{},[738],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":741,"children":742},{},[743],{"type":401,"value":744},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":396,"tag":423,"props":746,"children":747},{},[748],{"type":401,"value":432},{"type":396,"tag":434,"props":750,"children":751},{},[752,757],{"type":396,"tag":438,"props":753,"children":754},{},[755],{"type":401,"value":756},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":396,"tag":438,"props":758,"children":759},{},[760],{"type":401,"value":761},"中等-如何处理对象间循环引用",{"type":396,"tag":410,"props":763,"children":765},{"id":764},"中等-柯里化函数",[766],{"type":401,"value":764},{"type":396,"tag":643,"props":768,"children":769},{},[770,771,775,776],{"type":401,"value":647},{"type":396,"tag":649,"props":772,"children":773},{},[774],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":777,"children":778},{},[779],{"type":401,"value":780},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":396,"tag":643,"props":782,"children":783},{},[784,785,789,790],{"type":401,"value":647},{"type":396,"tag":649,"props":786,"children":787},{},[788],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":791,"children":792},{},[793],{"type":401,"value":794},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":396,"tag":410,"props":796,"children":798},{"id":797},"中等-列表数据转树结构",[799],{"type":401,"value":797},{"type":396,"tag":643,"props":801,"children":802},{},[803,804,808,809],{"type":401,"value":647},{"type":396,"tag":649,"props":805,"children":806},{},[807],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":810,"children":811},{},[812],{"type":401,"value":813},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":396,"tag":643,"props":815,"children":816},{},[817,818,822,823],{"type":401,"value":647},{"type":396,"tag":649,"props":819,"children":820},{},[821],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":824,"children":825},{},[826],{"type":401,"value":827},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":396,"tag":410,"props":829,"children":831},{"id":830},"中等-promisemapseries",[832],{"type":396,"tag":415,"props":833,"children":836},{"href":834,"rel":835},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[419],[837],{"type":401,"value":838},"中等-Promise.mapSeries",{"type":396,"tag":643,"props":840,"children":841},{},[842,843,847,848],{"type":401,"value":647},{"type":396,"tag":649,"props":844,"children":845},{},[846],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":849,"children":850},{},[851],{"type":401,"value":852},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":396,"tag":643,"props":854,"children":855},{},[856,857,861,862],{"type":401,"value":647},{"type":396,"tag":649,"props":858,"children":859},{},[860],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":863,"children":864},{},[865],{"type":401,"value":866},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":396,"tag":423,"props":868,"children":869},{},[870],{"type":401,"value":432},{"type":396,"tag":434,"props":872,"children":873},{},[874],{"type":396,"tag":438,"props":875,"children":876},{},[877],{"type":401,"value":878},"困难-给实现加上类型（TypeScript）",{"type":396,"tag":404,"props":880,"children":882},{"id":881},"综合题",[883],{"type":401,"value":881},{"type":396,"tag":410,"props":885,"children":887},{"id":886},"简单-统计当前页面用到的所有-html-标签的种类",[888],{"type":401,"value":889},"简单-统计当前页面用到的所有 HTML 标签的种类",{"type":396,"tag":643,"props":891,"children":892},{},[893,894,898,899],{"type":401,"value":647},{"type":396,"tag":649,"props":895,"children":896},{},[897],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":900,"children":901},{},[902],{"type":401,"value":903},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":396,"tag":410,"props":905,"children":907},{"id":906},"中等-商品排序",[908],{"type":401,"value":906},{"type":396,"tag":423,"props":910,"children":911},{},[912],{"type":401,"value":913},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":396,"tag":643,"props":915,"children":916},{},[917,918,922,923],{"type":401,"value":647},{"type":396,"tag":649,"props":919,"children":920},{},[921],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":924,"children":925},{},[926],{"type":401,"value":927},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":396,"tag":643,"props":929,"children":930},{},[931,932,936,937],{"type":401,"value":647},{"type":396,"tag":649,"props":933,"children":934},{},[935],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":938,"children":939},{},[940],{"type":401,"value":941},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":396,"tag":410,"props":943,"children":945},{"id":944},"困难-给定以下递归函数提问",[946],{"type":401,"value":944},{"type":396,"tag":948,"props":949,"children":953},"pre",{"className":950,"code":951,"language":952,"meta":389,"style":389},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[954],{"type":396,"tag":718,"props":955,"children":956},{"__ignoreMap":389},[957,996,1062,1097,1106,1128],{"type":396,"tag":618,"props":958,"children":961},{"class":959,"line":960},"line",1,[962,968,974,980,986,991],{"type":396,"tag":618,"props":963,"children":965},{"style":964},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[966],{"type":401,"value":967},"function",{"type":396,"tag":618,"props":969,"children":971},{"style":970},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[972],{"type":401,"value":973}," recur",{"type":396,"tag":618,"props":975,"children":977},{"style":976},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[978],{"type":401,"value":979},"(",{"type":396,"tag":618,"props":981,"children":983},{"style":982},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[984],{"type":401,"value":985},"n",{"type":396,"tag":618,"props":987,"children":988},{"style":976},[989],{"type":401,"value":990},")",{"type":396,"tag":618,"props":992,"children":993},{"style":976},[994],{"type":401,"value":995}," {\n",{"type":396,"tag":618,"props":997,"children":999},{"class":959,"line":998},2,[1000,1006,1012,1017,1023,1029,1034,1039,1044,1049,1053,1057],{"type":396,"tag":618,"props":1001,"children":1003},{"style":1002},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1004],{"type":401,"value":1005},"    if",{"type":396,"tag":618,"props":1007,"children":1009},{"style":1008},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1010],{"type":401,"value":1011}," (",{"type":396,"tag":618,"props":1013,"children":1015},{"style":1014},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1016],{"type":401,"value":985},{"type":396,"tag":618,"props":1018,"children":1020},{"style":1019},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[1021],{"type":401,"value":1022}," ===",{"type":396,"tag":618,"props":1024,"children":1026},{"style":1025},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1027],{"type":401,"value":1028}," 0",{"type":396,"tag":618,"props":1030,"children":1031},{"style":1008},[1032],{"type":401,"value":1033},") ",{"type":396,"tag":618,"props":1035,"children":1036},{"style":1014},[1037],{"type":401,"value":1038},"console",{"type":396,"tag":618,"props":1040,"children":1041},{"style":976},[1042],{"type":401,"value":1043},".",{"type":396,"tag":618,"props":1045,"children":1046},{"style":970},[1047],{"type":401,"value":1048},"log",{"type":396,"tag":618,"props":1050,"children":1051},{"style":1008},[1052],{"type":401,"value":979},{"type":396,"tag":618,"props":1054,"children":1055},{"style":1014},[1056],{"type":401,"value":985},{"type":396,"tag":618,"props":1058,"children":1059},{"style":1008},[1060],{"type":401,"value":1061},")\n",{"type":396,"tag":618,"props":1063,"children":1065},{"class":959,"line":1064},3,[1066,1071,1075,1079,1083,1088,1093],{"type":396,"tag":618,"props":1067,"children":1068},{"style":1002},[1069],{"type":401,"value":1070},"    else",{"type":396,"tag":618,"props":1072,"children":1073},{"style":970},[1074],{"type":401,"value":973},{"type":396,"tag":618,"props":1076,"children":1077},{"style":1008},[1078],{"type":401,"value":979},{"type":396,"tag":618,"props":1080,"children":1081},{"style":1014},[1082],{"type":401,"value":985},{"type":396,"tag":618,"props":1084,"children":1085},{"style":1019},[1086],{"type":401,"value":1087}," -",{"type":396,"tag":618,"props":1089,"children":1090},{"style":1025},[1091],{"type":401,"value":1092}," 1",{"type":396,"tag":618,"props":1094,"children":1095},{"style":1008},[1096],{"type":401,"value":1061},{"type":396,"tag":618,"props":1098,"children":1100},{"class":959,"line":1099},4,[1101],{"type":396,"tag":618,"props":1102,"children":1103},{"style":976},[1104],{"type":401,"value":1105},"}\n",{"type":396,"tag":618,"props":1107,"children":1109},{"class":959,"line":1108},5,[1110,1115,1119,1124],{"type":396,"tag":618,"props":1111,"children":1112},{"style":970},[1113],{"type":401,"value":1114},"recur",{"type":396,"tag":618,"props":1116,"children":1117},{"style":1014},[1118],{"type":401,"value":979},{"type":396,"tag":618,"props":1120,"children":1121},{"style":1025},[1122],{"type":401,"value":1123},"500000",{"type":396,"tag":618,"props":1125,"children":1126},{"style":1014},[1127],{"type":401,"value":1061},{"type":396,"tag":618,"props":1129,"children":1131},{"class":959,"line":1130},6,[1132],{"type":396,"tag":618,"props":1133,"children":1135},{"style":1134},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[1136],{"type":401,"value":1137},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":396,"tag":434,"props":1139,"children":1140},{},[1141,1146],{"type":396,"tag":438,"props":1142,"children":1143},{},[1144],{"type":401,"value":1145},"简单-将该函数转换为循环的写法避免栈溢出",{"type":396,"tag":438,"props":1147,"children":1148},{},[1149],{"type":401,"value":1150},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":396,"tag":643,"props":1152,"children":1153},{},[1154,1155,1159,1160],{"type":401,"value":647},{"type":396,"tag":649,"props":1156,"children":1157},{},[1158],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":1161,"children":1162},{},[1163],{"type":401,"value":1164},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":396,"tag":410,"props":1166,"children":1168},{"id":1167},"困难-商品全排列",[1169],{"type":401,"value":1167},{"type":396,"tag":423,"props":1171,"children":1172},{},[1173],{"type":401,"value":1174},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":396,"tag":643,"props":1176,"children":1177},{},[1178,1179,1184,1185],{"type":401,"value":647},{"type":396,"tag":649,"props":1180,"children":1181},{},[1182],{"type":401,"value":1183},"基础代码及用例",{"type":401,"value":647},{"type":396,"tag":423,"props":1186,"children":1187},{},[1188,1190,1194,1196,1206],{"type":401,"value":1189},"\n    ",{"type":396,"tag":608,"props":1191,"children":1193},{"src":1192},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":401,"value":1195},"\n    代码地址：",{"type":396,"tag":415,"props":1197,"children":1203},{"href":1198,"rel":1199,"target":1202},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[1200,1201],"noopener","noreferrer","_blank",[1204],{"type":401,"value":1205},"Element Plus Playground",{"type":401,"value":647},{"type":396,"tag":404,"props":1208,"children":1210},{"id":1209},"类型编程",[1211],{"type":401,"value":1209},{"type":396,"tag":410,"props":1213,"children":1215},{"id":1214},"简单-omit",[1216],{"type":401,"value":1217},"简单-Omit",{"type":396,"tag":643,"props":1219,"children":1220},{},[1221,1222,1226,1227],{"type":401,"value":647},{"type":396,"tag":649,"props":1223,"children":1224},{},[1225],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":1228,"children":1229},{},[1230],{"type":401,"value":1231},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":396,"tag":643,"props":1233,"children":1234},{},[1235,1236,1240,1241],{"type":401,"value":647},{"type":396,"tag":649,"props":1237,"children":1238},{},[1239],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":1242,"children":1243},{},[1244],{"type":401,"value":1245},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":396,"tag":410,"props":1247,"children":1249},{"id":1248},"简单-trim",[1250],{"type":401,"value":1251},"简单-Trim",{"type":396,"tag":643,"props":1253,"children":1254},{},[1255,1256,1260,1261],{"type":401,"value":647},{"type":396,"tag":649,"props":1257,"children":1258},{},[1259],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":1262,"children":1263},{},[1264],{"type":401,"value":1265},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":396,"tag":643,"props":1267,"children":1268},{},[1269,1270,1274,1275],{"type":401,"value":647},{"type":396,"tag":649,"props":1271,"children":1272},{},[1273],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":1276,"children":1277},{},[1278],{"type":401,"value":1279},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":396,"tag":410,"props":1281,"children":1283},{"id":1282},"中等-deepreadonly",[1284],{"type":401,"value":1285},"中等-DeepReadonly",{"type":396,"tag":643,"props":1287,"children":1288},{},[1289,1290,1294,1295],{"type":401,"value":647},{"type":396,"tag":649,"props":1291,"children":1292},{},[1293],{"type":401,"value":653},{"type":401,"value":647},{"type":396,"tag":656,"props":1296,"children":1297},{},[1298],{"type":401,"value":1299},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":396,"tag":643,"props":1301,"children":1302},{},[1303,1304,1308,1309],{"type":401,"value":647},{"type":396,"tag":649,"props":1305,"children":1306},{},[1307],{"type":401,"value":669},{"type":401,"value":647},{"type":396,"tag":656,"props":1310,"children":1311},{},[1312],{"type":401,"value":1313},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":396,"tag":397,"props":1315,"children":1316},{},[1317],{"type":401,"value":1318},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":389,"searchDepth":998,"depth":998,"links":1320},[1321,1322,1323,1324],{"id":406,"depth":998,"text":406},{"id":634,"depth":998,"text":634},{"id":881,"depth":998,"text":881},{"id":1209,"depth":998,"text":1209},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1332,1336],{"_path":1333,"title":1334,"description":1335},"/maps/_frontend/w3c/security/subresource-integrity","Subresource Integrity","子资源完整性协议允许浏览器通过检查哈希值来判断资源是否经过篡改。",{"_path":1337,"title":1338,"description":1339},"/maps/_hire/interview/questions/overall","面试题库","前端开发面试题集合，包含软件工程、算法数据结构等多个技术领域的经典面试题。",1742040368158]