[{"data":1,"prerenderedAt":1111},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":155,"/maps/_hire/intern-surround":1102},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":1096,"_id":1097,"_source":1098,"_file":1099,"_stem":1100,"_extension":1101},"/maps/_hire/intern","_hire",false,true,"","前端笔试题库","面向实习生或 B 端 3~5 年经验前端",{"type":164,"children":165,"toc":1090},"root",[166,174,180,193,199,204,224,234,239,243,256,266,271,275,292,302,307,320,324,332,343,348,352,360,370,375,383,403,408,413,432,447,452,457,471,475,497,502,516,520,533,538,552,566,571,585,599,610,624,638,642,650,655,661,675,680,685,699,713,718,909,922,936,941,946,978,983,989,1003,1017,1023,1037,1051,1057,1071,1085],{"type":167,"tag":168,"props":169,"children":170},"element","style",{},[171],{"type":172,"value":173},"text","\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":167,"tag":175,"props":176,"children":178},"h2",{"id":177},"算法题",[179],{"type":172,"value":177},{"type":167,"tag":181,"props":182,"children":184},"h4",{"id":183},"简单-斐波那契数列",[185],{"type":167,"tag":186,"props":187,"children":191},"a",{"href":188,"rel":189},"https://leetcode.cn/problems/fibonacci-number/",[190],"nofollow",[192],{"type":172,"value":183},{"type":167,"tag":194,"props":195,"children":196},"p",{},[197],{"type":172,"value":198},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":167,"tag":194,"props":200,"children":201},{},[202],{"type":172,"value":203},"后续提问方向：",{"type":167,"tag":205,"props":206,"children":207},"ul",{},[208,219],{"type":167,"tag":209,"props":210,"children":211},"li",{},[212],{"type":167,"tag":186,"props":213,"children":216},{"href":214,"rel":215},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[190],[217],{"type":172,"value":218},"简单-非递归解法（递推）",{"type":167,"tag":209,"props":220,"children":221},{},[222],{"type":172,"value":223},"简单-时间复杂度最小的解法（枚举）",{"type":167,"tag":181,"props":225,"children":227},{"id":226},"简单-合并有序链表",[228],{"type":167,"tag":186,"props":229,"children":232},{"href":230,"rel":231},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[190],[233],{"type":172,"value":226},{"type":167,"tag":194,"props":235,"children":236},{},[237],{"type":172,"value":238},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":167,"tag":194,"props":240,"children":241},{},[242],{"type":172,"value":203},{"type":167,"tag":205,"props":244,"children":245},{},[246],{"type":167,"tag":209,"props":247,"children":248},{},[249],{"type":167,"tag":186,"props":250,"children":253},{"href":251,"rel":252},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[190],[254],{"type":172,"value":255},"简单-空间复杂度最小的解法（迭代）",{"type":167,"tag":181,"props":257,"children":259},{"id":258},"简单-反转链表",[260],{"type":167,"tag":186,"props":261,"children":264},{"href":262,"rel":263},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[190],[265],{"type":172,"value":258},{"type":167,"tag":194,"props":267,"children":268},{},[269],{"type":172,"value":270},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":167,"tag":194,"props":272,"children":273},{},[274],{"type":172,"value":203},{"type":167,"tag":205,"props":276,"children":277},{},[278,287],{"type":167,"tag":209,"props":279,"children":280},{},[281],{"type":167,"tag":186,"props":282,"children":285},{"href":283,"rel":284},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[190],[286],{"type":172,"value":255},{"type":167,"tag":209,"props":288,"children":289},{},[290],{"type":172,"value":291},"中等-环形链表或包含环的链表的反转",{"type":167,"tag":181,"props":293,"children":295},{"id":294},"中等-有效的括号字符串",[296],{"type":167,"tag":186,"props":297,"children":300},{"href":298,"rel":299},"https://leetcode.cn/problems/valid-parenthesis-string/",[190],[301],{"type":172,"value":294},{"type":167,"tag":194,"props":303,"children":304},{},[305],{"type":172,"value":306},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":167,"tag":205,"props":308,"children":309},{},[310,315],{"type":167,"tag":209,"props":311,"children":312},{},[313],{"type":172,"value":314},"\")(()))\"          =>  false",{"type":167,"tag":209,"props":316,"children":317},{},[318],{"type":172,"value":319},"\"(())((()())())\"  =>  true",{"type":167,"tag":194,"props":321,"children":322},{},[323],{"type":172,"value":203},{"type":167,"tag":205,"props":325,"children":326},{},[327],{"type":167,"tag":209,"props":328,"children":329},{},[330],{"type":172,"value":331},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":167,"tag":181,"props":333,"children":335},{"id":334},"中等-数组第-k-个最大元素",[336],{"type":167,"tag":186,"props":337,"children":340},{"href":338,"rel":339},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[190],[341],{"type":172,"value":342},"中等-数组第 K 个最大元素",{"type":167,"tag":194,"props":344,"children":345},{},[346],{"type":172,"value":347},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":167,"tag":194,"props":349,"children":350},{},[351],{"type":172,"value":203},{"type":167,"tag":205,"props":353,"children":354},{},[355],{"type":167,"tag":209,"props":356,"children":357},{},[358],{"type":172,"value":359},"困难-使用时间复杂度为 O(n) 的解法。",{"type":167,"tag":181,"props":361,"children":363},{"id":362},"中等-二叉树的层序遍历",[364],{"type":167,"tag":186,"props":365,"children":368},{"href":366,"rel":367},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[190],[369],{"type":172,"value":362},{"type":167,"tag":194,"props":371,"children":372},{},[373],{"type":172,"value":374},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":167,"tag":194,"props":376,"children":377},{},[378],{"type":167,"tag":379,"props":380,"children":382},"img",{"alt":160,"src":381},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":167,"tag":194,"props":384,"children":385},{},[386,388,394,396,401],{"type":172,"value":387},"输入：如上图所示。输出：[[3],",{"type":167,"tag":389,"props":390,"children":391},"span",{},[392],{"type":172,"value":393},"9,20",{"type":172,"value":395},",",{"type":167,"tag":389,"props":397,"children":398},{},[399],{"type":172,"value":400},"15,7",{"type":172,"value":402},"]",{"type":167,"tag":175,"props":404,"children":406},{"id":405},"编程题",[407],{"type":172,"value":405},{"type":167,"tag":181,"props":409,"children":411},{"id":410},"简单-bind",[412],{"type":172,"value":410},{"type":167,"tag":414,"props":415,"children":416},"details",{},[417,419,425,426],{"type":172,"value":418},"\n  ",{"type":167,"tag":420,"props":421,"children":422},"summary",{},[423],{"type":172,"value":424},"用例",{"type":172,"value":418},{"type":167,"tag":427,"props":428,"children":429},"highlight",{},[430],{"type":172,"value":431},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":167,"tag":414,"props":433,"children":434},{},[435,436,441,442],{"type":172,"value":418},{"type":167,"tag":420,"props":437,"children":438},{},[439],{"type":172,"value":440},"参考实现",{"type":172,"value":418},{"type":167,"tag":427,"props":443,"children":444},{},[445],{"type":172,"value":446},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":167,"tag":181,"props":448,"children":450},{"id":449},"中等-instanceof",[451],{"type":172,"value":449},{"type":167,"tag":194,"props":453,"children":454},{},[455],{"type":172,"value":456},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":167,"tag":414,"props":458,"children":459},{},[460,461,465,466],{"type":172,"value":418},{"type":167,"tag":420,"props":462,"children":463},{},[464],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":467,"children":468},{},[469],{"type":172,"value":470},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":167,"tag":194,"props":472,"children":473},{},[474],{"type":172,"value":203},{"type":167,"tag":205,"props":476,"children":477},{},[478,483],{"type":167,"tag":209,"props":479,"children":480},{},[481],{"type":172,"value":482},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":167,"tag":209,"props":484,"children":485},{},[486,488,495],{"type":172,"value":487},"偏门-创造一个类 God 使得 ",{"type":167,"tag":489,"props":490,"children":492},"code",{"className":491},[],[493],{"type":172,"value":494},"null instanceof God",{"type":172,"value":496}," 为真",{"type":167,"tag":181,"props":498,"children":500},{"id":499},"中等-深拷贝函数",[501],{"type":172,"value":499},{"type":167,"tag":414,"props":503,"children":504},{},[505,506,510,511],{"type":172,"value":418},{"type":167,"tag":420,"props":507,"children":508},{},[509],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":512,"children":513},{},[514],{"type":172,"value":515},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":167,"tag":194,"props":517,"children":518},{},[519],{"type":172,"value":203},{"type":167,"tag":205,"props":521,"children":522},{},[523,528],{"type":167,"tag":209,"props":524,"children":525},{},[526],{"type":172,"value":527},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":167,"tag":209,"props":529,"children":530},{},[531],{"type":172,"value":532},"中等-如何处理对象间循环引用",{"type":167,"tag":181,"props":534,"children":536},{"id":535},"中等-柯里化函数",[537],{"type":172,"value":535},{"type":167,"tag":414,"props":539,"children":540},{},[541,542,546,547],{"type":172,"value":418},{"type":167,"tag":420,"props":543,"children":544},{},[545],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":548,"children":549},{},[550],{"type":172,"value":551},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":167,"tag":414,"props":553,"children":554},{},[555,556,560,561],{"type":172,"value":418},{"type":167,"tag":420,"props":557,"children":558},{},[559],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":562,"children":563},{},[564],{"type":172,"value":565},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":167,"tag":181,"props":567,"children":569},{"id":568},"中等-列表数据转树结构",[570],{"type":172,"value":568},{"type":167,"tag":414,"props":572,"children":573},{},[574,575,579,580],{"type":172,"value":418},{"type":167,"tag":420,"props":576,"children":577},{},[578],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":581,"children":582},{},[583],{"type":172,"value":584},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":167,"tag":414,"props":586,"children":587},{},[588,589,593,594],{"type":172,"value":418},{"type":167,"tag":420,"props":590,"children":591},{},[592],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":595,"children":596},{},[597],{"type":172,"value":598},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":167,"tag":181,"props":600,"children":602},{"id":601},"中等-promisemapseries",[603],{"type":167,"tag":186,"props":604,"children":607},{"href":605,"rel":606},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[190],[608],{"type":172,"value":609},"中等-Promise.mapSeries",{"type":167,"tag":414,"props":611,"children":612},{},[613,614,618,619],{"type":172,"value":418},{"type":167,"tag":420,"props":615,"children":616},{},[617],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":620,"children":621},{},[622],{"type":172,"value":623},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":167,"tag":414,"props":625,"children":626},{},[627,628,632,633],{"type":172,"value":418},{"type":167,"tag":420,"props":629,"children":630},{},[631],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":634,"children":635},{},[636],{"type":172,"value":637},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":167,"tag":194,"props":639,"children":640},{},[641],{"type":172,"value":203},{"type":167,"tag":205,"props":643,"children":644},{},[645],{"type":167,"tag":209,"props":646,"children":647},{},[648],{"type":172,"value":649},"困难-给实现加上类型（TypeScript）",{"type":167,"tag":175,"props":651,"children":653},{"id":652},"综合题",[654],{"type":172,"value":652},{"type":167,"tag":181,"props":656,"children":658},{"id":657},"简单-统计当前页面用到的所有-html-标签的种类",[659],{"type":172,"value":660},"简单-统计当前页面用到的所有 HTML 标签的种类",{"type":167,"tag":414,"props":662,"children":663},{},[664,665,669,670],{"type":172,"value":418},{"type":167,"tag":420,"props":666,"children":667},{},[668],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":671,"children":672},{},[673],{"type":172,"value":674},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":167,"tag":181,"props":676,"children":678},{"id":677},"中等-商品排序",[679],{"type":172,"value":677},{"type":167,"tag":194,"props":681,"children":682},{},[683],{"type":172,"value":684},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":167,"tag":414,"props":686,"children":687},{},[688,689,693,694],{"type":172,"value":418},{"type":167,"tag":420,"props":690,"children":691},{},[692],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":695,"children":696},{},[697],{"type":172,"value":698},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":167,"tag":414,"props":700,"children":701},{},[702,703,707,708],{"type":172,"value":418},{"type":167,"tag":420,"props":704,"children":705},{},[706],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":709,"children":710},{},[711],{"type":172,"value":712},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":167,"tag":181,"props":714,"children":716},{"id":715},"困难-给定以下递归函数提问",[717],{"type":172,"value":715},{"type":167,"tag":719,"props":720,"children":724},"pre",{"className":721,"code":722,"language":723,"meta":160,"style":160},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[725],{"type":167,"tag":489,"props":726,"children":727},{"__ignoreMap":160},[728,767,833,868,877,899],{"type":167,"tag":389,"props":729,"children":732},{"class":730,"line":731},"line",1,[733,739,745,751,757,762],{"type":167,"tag":389,"props":734,"children":736},{"style":735},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[737],{"type":172,"value":738},"function",{"type":167,"tag":389,"props":740,"children":742},{"style":741},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[743],{"type":172,"value":744}," recur",{"type":167,"tag":389,"props":746,"children":748},{"style":747},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[749],{"type":172,"value":750},"(",{"type":167,"tag":389,"props":752,"children":754},{"style":753},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[755],{"type":172,"value":756},"n",{"type":167,"tag":389,"props":758,"children":759},{"style":747},[760],{"type":172,"value":761},")",{"type":167,"tag":389,"props":763,"children":764},{"style":747},[765],{"type":172,"value":766}," {\n",{"type":167,"tag":389,"props":768,"children":770},{"class":730,"line":769},2,[771,777,783,788,794,800,805,810,815,820,824,828],{"type":167,"tag":389,"props":772,"children":774},{"style":773},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[775],{"type":172,"value":776},"    if",{"type":167,"tag":389,"props":778,"children":780},{"style":779},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[781],{"type":172,"value":782}," (",{"type":167,"tag":389,"props":784,"children":786},{"style":785},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[787],{"type":172,"value":756},{"type":167,"tag":389,"props":789,"children":791},{"style":790},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[792],{"type":172,"value":793}," ===",{"type":167,"tag":389,"props":795,"children":797},{"style":796},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[798],{"type":172,"value":799}," 0",{"type":167,"tag":389,"props":801,"children":802},{"style":779},[803],{"type":172,"value":804},") ",{"type":167,"tag":389,"props":806,"children":807},{"style":785},[808],{"type":172,"value":809},"console",{"type":167,"tag":389,"props":811,"children":812},{"style":747},[813],{"type":172,"value":814},".",{"type":167,"tag":389,"props":816,"children":817},{"style":741},[818],{"type":172,"value":819},"log",{"type":167,"tag":389,"props":821,"children":822},{"style":779},[823],{"type":172,"value":750},{"type":167,"tag":389,"props":825,"children":826},{"style":785},[827],{"type":172,"value":756},{"type":167,"tag":389,"props":829,"children":830},{"style":779},[831],{"type":172,"value":832},")\n",{"type":167,"tag":389,"props":834,"children":836},{"class":730,"line":835},3,[837,842,846,850,854,859,864],{"type":167,"tag":389,"props":838,"children":839},{"style":773},[840],{"type":172,"value":841},"    else",{"type":167,"tag":389,"props":843,"children":844},{"style":741},[845],{"type":172,"value":744},{"type":167,"tag":389,"props":847,"children":848},{"style":779},[849],{"type":172,"value":750},{"type":167,"tag":389,"props":851,"children":852},{"style":785},[853],{"type":172,"value":756},{"type":167,"tag":389,"props":855,"children":856},{"style":790},[857],{"type":172,"value":858}," -",{"type":167,"tag":389,"props":860,"children":861},{"style":796},[862],{"type":172,"value":863}," 1",{"type":167,"tag":389,"props":865,"children":866},{"style":779},[867],{"type":172,"value":832},{"type":167,"tag":389,"props":869,"children":871},{"class":730,"line":870},4,[872],{"type":167,"tag":389,"props":873,"children":874},{"style":747},[875],{"type":172,"value":876},"}\n",{"type":167,"tag":389,"props":878,"children":880},{"class":730,"line":879},5,[881,886,890,895],{"type":167,"tag":389,"props":882,"children":883},{"style":741},[884],{"type":172,"value":885},"recur",{"type":167,"tag":389,"props":887,"children":888},{"style":785},[889],{"type":172,"value":750},{"type":167,"tag":389,"props":891,"children":892},{"style":796},[893],{"type":172,"value":894},"500000",{"type":167,"tag":389,"props":896,"children":897},{"style":785},[898],{"type":172,"value":832},{"type":167,"tag":389,"props":900,"children":902},{"class":730,"line":901},6,[903],{"type":167,"tag":389,"props":904,"children":906},{"style":905},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[907],{"type":172,"value":908},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":167,"tag":205,"props":910,"children":911},{},[912,917],{"type":167,"tag":209,"props":913,"children":914},{},[915],{"type":172,"value":916},"简单-将该函数转换为循环的写法避免栈溢出",{"type":167,"tag":209,"props":918,"children":919},{},[920],{"type":172,"value":921},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":167,"tag":414,"props":923,"children":924},{},[925,926,930,931],{"type":172,"value":418},{"type":167,"tag":420,"props":927,"children":928},{},[929],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":932,"children":933},{},[934],{"type":172,"value":935},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":167,"tag":181,"props":937,"children":939},{"id":938},"困难-商品全排列",[940],{"type":172,"value":938},{"type":167,"tag":194,"props":942,"children":943},{},[944],{"type":172,"value":945},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":167,"tag":414,"props":947,"children":948},{},[949,950,955,956],{"type":172,"value":418},{"type":167,"tag":420,"props":951,"children":952},{},[953],{"type":172,"value":954},"基础代码及用例",{"type":172,"value":418},{"type":167,"tag":194,"props":957,"children":958},{},[959,961,965,967,977],{"type":172,"value":960},"\n    ",{"type":167,"tag":379,"props":962,"children":964},{"src":963},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":172,"value":966},"\n    代码地址：",{"type":167,"tag":186,"props":968,"children":974},{"href":969,"rel":970,"target":973},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[971,972],"noopener","noreferrer","_blank",[975],{"type":172,"value":976},"Element Plus Playground",{"type":172,"value":418},{"type":167,"tag":175,"props":979,"children":981},{"id":980},"类型编程",[982],{"type":172,"value":980},{"type":167,"tag":181,"props":984,"children":986},{"id":985},"简单-omit",[987],{"type":172,"value":988},"简单-Omit",{"type":167,"tag":414,"props":990,"children":991},{},[992,993,997,998],{"type":172,"value":418},{"type":167,"tag":420,"props":994,"children":995},{},[996],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":999,"children":1000},{},[1001],{"type":172,"value":1002},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":167,"tag":414,"props":1004,"children":1005},{},[1006,1007,1011,1012],{"type":172,"value":418},{"type":167,"tag":420,"props":1008,"children":1009},{},[1010],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":1013,"children":1014},{},[1015],{"type":172,"value":1016},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":167,"tag":181,"props":1018,"children":1020},{"id":1019},"简单-trim",[1021],{"type":172,"value":1022},"简单-Trim",{"type":167,"tag":414,"props":1024,"children":1025},{},[1026,1027,1031,1032],{"type":172,"value":418},{"type":167,"tag":420,"props":1028,"children":1029},{},[1030],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":1033,"children":1034},{},[1035],{"type":172,"value":1036},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":167,"tag":414,"props":1038,"children":1039},{},[1040,1041,1045,1046],{"type":172,"value":418},{"type":167,"tag":420,"props":1042,"children":1043},{},[1044],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":1047,"children":1048},{},[1049],{"type":172,"value":1050},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":167,"tag":181,"props":1052,"children":1054},{"id":1053},"中等-deepreadonly",[1055],{"type":172,"value":1056},"中等-DeepReadonly",{"type":167,"tag":414,"props":1058,"children":1059},{},[1060,1061,1065,1066],{"type":172,"value":418},{"type":167,"tag":420,"props":1062,"children":1063},{},[1064],{"type":172,"value":424},{"type":172,"value":418},{"type":167,"tag":427,"props":1067,"children":1068},{},[1069],{"type":172,"value":1070},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":167,"tag":414,"props":1072,"children":1073},{},[1074,1075,1079,1080],{"type":172,"value":418},{"type":167,"tag":420,"props":1076,"children":1077},{},[1078],{"type":172,"value":440},{"type":172,"value":418},{"type":167,"tag":427,"props":1081,"children":1082},{},[1083],{"type":172,"value":1084},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":167,"tag":168,"props":1086,"children":1087},{},[1088],{"type":172,"value":1089},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":769,"depth":769,"links":1091},[1092,1093,1094,1095],{"id":177,"depth":769,"text":177},{"id":405,"depth":769,"text":405},{"id":652,"depth":769,"text":652},{"id":980,"depth":769,"text":980},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1103,1107],{"_path":1104,"title":1105,"description":1106},"/maps/_hardware/ssd","SSD（Solid State Driver）","SSD 是一种基于闪存技术的硬盘，相比传统的机械硬盘，它具有更快的读写速度、更低的延迟、更小的体积和更低的功耗。",{"_path":1108,"title":1109,"description":1110},"/maps/_hire/interview/questions/overall","面试题库","前端开发面试题集合，包含软件工程、算法数据结构等多个技术领域的经典面试题。",1742745242609]