[{"data":1,"prerenderedAt":1114},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":158,"/maps/_hire/intern-surround":1105},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":1099,"_id":1100,"_source":1101,"_file":1102,"_stem":1103,"_extension":1104},"/maps/_hire/intern","_hire",false,true,"","前端笔试题库","面向实习生或 B 端 3~5 年经验前端",{"type":167,"children":168,"toc":1093},"root",[169,177,183,196,202,207,227,237,242,246,259,269,274,278,295,305,310,323,327,335,346,351,355,363,373,378,386,406,411,416,435,450,455,460,474,478,500,505,519,523,536,541,555,569,574,588,602,613,627,641,645,653,658,664,678,683,688,702,716,721,912,925,939,944,949,981,986,992,1006,1020,1026,1040,1054,1060,1074,1088],{"type":170,"tag":171,"props":172,"children":173},"element","style",{},[174],{"type":175,"value":176},"text","\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":170,"tag":178,"props":179,"children":181},"h2",{"id":180},"算法题",[182],{"type":175,"value":180},{"type":170,"tag":184,"props":185,"children":187},"h4",{"id":186},"简单-斐波那契数列",[188],{"type":170,"tag":189,"props":190,"children":194},"a",{"href":191,"rel":192},"https://leetcode.cn/problems/fibonacci-number/",[193],"nofollow",[195],{"type":175,"value":186},{"type":170,"tag":197,"props":198,"children":199},"p",{},[200],{"type":175,"value":201},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":170,"tag":197,"props":203,"children":204},{},[205],{"type":175,"value":206},"后续提问方向：",{"type":170,"tag":208,"props":209,"children":210},"ul",{},[211,222],{"type":170,"tag":212,"props":213,"children":214},"li",{},[215],{"type":170,"tag":189,"props":216,"children":219},{"href":217,"rel":218},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[193],[220],{"type":175,"value":221},"简单-非递归解法（递推）",{"type":170,"tag":212,"props":223,"children":224},{},[225],{"type":175,"value":226},"简单-时间复杂度最小的解法（枚举）",{"type":170,"tag":184,"props":228,"children":230},{"id":229},"简单-合并有序链表",[231],{"type":170,"tag":189,"props":232,"children":235},{"href":233,"rel":234},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[193],[236],{"type":175,"value":229},{"type":170,"tag":197,"props":238,"children":239},{},[240],{"type":175,"value":241},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":170,"tag":197,"props":243,"children":244},{},[245],{"type":175,"value":206},{"type":170,"tag":208,"props":247,"children":248},{},[249],{"type":170,"tag":212,"props":250,"children":251},{},[252],{"type":170,"tag":189,"props":253,"children":256},{"href":254,"rel":255},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[193],[257],{"type":175,"value":258},"简单-空间复杂度最小的解法（迭代）",{"type":170,"tag":184,"props":260,"children":262},{"id":261},"简单-反转链表",[263],{"type":170,"tag":189,"props":264,"children":267},{"href":265,"rel":266},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[193],[268],{"type":175,"value":261},{"type":170,"tag":197,"props":270,"children":271},{},[272],{"type":175,"value":273},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":170,"tag":197,"props":275,"children":276},{},[277],{"type":175,"value":206},{"type":170,"tag":208,"props":279,"children":280},{},[281,290],{"type":170,"tag":212,"props":282,"children":283},{},[284],{"type":170,"tag":189,"props":285,"children":288},{"href":286,"rel":287},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[193],[289],{"type":175,"value":258},{"type":170,"tag":212,"props":291,"children":292},{},[293],{"type":175,"value":294},"中等-环形链表或包含环的链表的反转",{"type":170,"tag":184,"props":296,"children":298},{"id":297},"中等-有效的括号字符串",[299],{"type":170,"tag":189,"props":300,"children":303},{"href":301,"rel":302},"https://leetcode.cn/problems/valid-parenthesis-string/",[193],[304],{"type":175,"value":297},{"type":170,"tag":197,"props":306,"children":307},{},[308],{"type":175,"value":309},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":170,"tag":208,"props":311,"children":312},{},[313,318],{"type":170,"tag":212,"props":314,"children":315},{},[316],{"type":175,"value":317},"\")(()))\"          =>  false",{"type":170,"tag":212,"props":319,"children":320},{},[321],{"type":175,"value":322},"\"(())((()())())\"  =>  true",{"type":170,"tag":197,"props":324,"children":325},{},[326],{"type":175,"value":206},{"type":170,"tag":208,"props":328,"children":329},{},[330],{"type":170,"tag":212,"props":331,"children":332},{},[333],{"type":175,"value":334},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":170,"tag":184,"props":336,"children":338},{"id":337},"中等-数组第-k-个最大元素",[339],{"type":170,"tag":189,"props":340,"children":343},{"href":341,"rel":342},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[193],[344],{"type":175,"value":345},"中等-数组第 K 个最大元素",{"type":170,"tag":197,"props":347,"children":348},{},[349],{"type":175,"value":350},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":170,"tag":197,"props":352,"children":353},{},[354],{"type":175,"value":206},{"type":170,"tag":208,"props":356,"children":357},{},[358],{"type":170,"tag":212,"props":359,"children":360},{},[361],{"type":175,"value":362},"困难-使用时间复杂度为 O(n) 的解法。",{"type":170,"tag":184,"props":364,"children":366},{"id":365},"中等-二叉树的层序遍历",[367],{"type":170,"tag":189,"props":368,"children":371},{"href":369,"rel":370},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[193],[372],{"type":175,"value":365},{"type":170,"tag":197,"props":374,"children":375},{},[376],{"type":175,"value":377},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":170,"tag":197,"props":379,"children":380},{},[381],{"type":170,"tag":382,"props":383,"children":385},"img",{"alt":163,"src":384},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":170,"tag":197,"props":387,"children":388},{},[389,391,397,399,404],{"type":175,"value":390},"输入：如上图所示。输出：[[3],",{"type":170,"tag":392,"props":393,"children":394},"span",{},[395],{"type":175,"value":396},"9,20",{"type":175,"value":398},",",{"type":170,"tag":392,"props":400,"children":401},{},[402],{"type":175,"value":403},"15,7",{"type":175,"value":405},"]",{"type":170,"tag":178,"props":407,"children":409},{"id":408},"编程题",[410],{"type":175,"value":408},{"type":170,"tag":184,"props":412,"children":414},{"id":413},"简单-bind",[415],{"type":175,"value":413},{"type":170,"tag":417,"props":418,"children":419},"details",{},[420,422,428,429],{"type":175,"value":421},"\n  ",{"type":170,"tag":423,"props":424,"children":425},"summary",{},[426],{"type":175,"value":427},"用例",{"type":175,"value":421},{"type":170,"tag":430,"props":431,"children":432},"highlight",{},[433],{"type":175,"value":434},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":170,"tag":417,"props":436,"children":437},{},[438,439,444,445],{"type":175,"value":421},{"type":170,"tag":423,"props":440,"children":441},{},[442],{"type":175,"value":443},"参考实现",{"type":175,"value":421},{"type":170,"tag":430,"props":446,"children":447},{},[448],{"type":175,"value":449},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":170,"tag":184,"props":451,"children":453},{"id":452},"中等-instanceof",[454],{"type":175,"value":452},{"type":170,"tag":197,"props":456,"children":457},{},[458],{"type":175,"value":459},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":170,"tag":417,"props":461,"children":462},{},[463,464,468,469],{"type":175,"value":421},{"type":170,"tag":423,"props":465,"children":466},{},[467],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":470,"children":471},{},[472],{"type":175,"value":473},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":170,"tag":197,"props":475,"children":476},{},[477],{"type":175,"value":206},{"type":170,"tag":208,"props":479,"children":480},{},[481,486],{"type":170,"tag":212,"props":482,"children":483},{},[484],{"type":175,"value":485},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":170,"tag":212,"props":487,"children":488},{},[489,491,498],{"type":175,"value":490},"偏门-创造一个类 God 使得 ",{"type":170,"tag":492,"props":493,"children":495},"code",{"className":494},[],[496],{"type":175,"value":497},"null instanceof God",{"type":175,"value":499}," 为真",{"type":170,"tag":184,"props":501,"children":503},{"id":502},"中等-深拷贝函数",[504],{"type":175,"value":502},{"type":170,"tag":417,"props":506,"children":507},{},[508,509,513,514],{"type":175,"value":421},{"type":170,"tag":423,"props":510,"children":511},{},[512],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":515,"children":516},{},[517],{"type":175,"value":518},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":170,"tag":197,"props":520,"children":521},{},[522],{"type":175,"value":206},{"type":170,"tag":208,"props":524,"children":525},{},[526,531],{"type":170,"tag":212,"props":527,"children":528},{},[529],{"type":175,"value":530},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":170,"tag":212,"props":532,"children":533},{},[534],{"type":175,"value":535},"中等-如何处理对象间循环引用",{"type":170,"tag":184,"props":537,"children":539},{"id":538},"中等-柯里化函数",[540],{"type":175,"value":538},{"type":170,"tag":417,"props":542,"children":543},{},[544,545,549,550],{"type":175,"value":421},{"type":170,"tag":423,"props":546,"children":547},{},[548],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":551,"children":552},{},[553],{"type":175,"value":554},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":170,"tag":417,"props":556,"children":557},{},[558,559,563,564],{"type":175,"value":421},{"type":170,"tag":423,"props":560,"children":561},{},[562],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":565,"children":566},{},[567],{"type":175,"value":568},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":170,"tag":184,"props":570,"children":572},{"id":571},"中等-列表数据转树结构",[573],{"type":175,"value":571},{"type":170,"tag":417,"props":575,"children":576},{},[577,578,582,583],{"type":175,"value":421},{"type":170,"tag":423,"props":579,"children":580},{},[581],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":584,"children":585},{},[586],{"type":175,"value":587},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":170,"tag":417,"props":589,"children":590},{},[591,592,596,597],{"type":175,"value":421},{"type":170,"tag":423,"props":593,"children":594},{},[595],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":598,"children":599},{},[600],{"type":175,"value":601},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":170,"tag":184,"props":603,"children":605},{"id":604},"中等-promisemapseries",[606],{"type":170,"tag":189,"props":607,"children":610},{"href":608,"rel":609},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[193],[611],{"type":175,"value":612},"中等-Promise.mapSeries",{"type":170,"tag":417,"props":614,"children":615},{},[616,617,621,622],{"type":175,"value":421},{"type":170,"tag":423,"props":618,"children":619},{},[620],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":623,"children":624},{},[625],{"type":175,"value":626},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":170,"tag":417,"props":628,"children":629},{},[630,631,635,636],{"type":175,"value":421},{"type":170,"tag":423,"props":632,"children":633},{},[634],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":637,"children":638},{},[639],{"type":175,"value":640},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":170,"tag":197,"props":642,"children":643},{},[644],{"type":175,"value":206},{"type":170,"tag":208,"props":646,"children":647},{},[648],{"type":170,"tag":212,"props":649,"children":650},{},[651],{"type":175,"value":652},"困难-给实现加上类型（TypeScript）",{"type":170,"tag":178,"props":654,"children":656},{"id":655},"综合题",[657],{"type":175,"value":655},{"type":170,"tag":184,"props":659,"children":661},{"id":660},"简单-统计当前页面用到的所有-html-标签的种类",[662],{"type":175,"value":663},"简单-统计当前页面用到的所有 HTML 标签的种类",{"type":170,"tag":417,"props":665,"children":666},{},[667,668,672,673],{"type":175,"value":421},{"type":170,"tag":423,"props":669,"children":670},{},[671],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":674,"children":675},{},[676],{"type":175,"value":677},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":170,"tag":184,"props":679,"children":681},{"id":680},"中等-商品排序",[682],{"type":175,"value":680},{"type":170,"tag":197,"props":684,"children":685},{},[686],{"type":175,"value":687},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":170,"tag":417,"props":689,"children":690},{},[691,692,696,697],{"type":175,"value":421},{"type":170,"tag":423,"props":693,"children":694},{},[695],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":698,"children":699},{},[700],{"type":175,"value":701},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":170,"tag":417,"props":703,"children":704},{},[705,706,710,711],{"type":175,"value":421},{"type":170,"tag":423,"props":707,"children":708},{},[709],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":712,"children":713},{},[714],{"type":175,"value":715},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":170,"tag":184,"props":717,"children":719},{"id":718},"困难-给定以下递归函数提问",[720],{"type":175,"value":718},{"type":170,"tag":722,"props":723,"children":727},"pre",{"className":724,"code":725,"language":726,"meta":163,"style":163},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[728],{"type":170,"tag":492,"props":729,"children":730},{"__ignoreMap":163},[731,770,836,871,880,902],{"type":170,"tag":392,"props":732,"children":735},{"class":733,"line":734},"line",1,[736,742,748,754,760,765],{"type":170,"tag":392,"props":737,"children":739},{"style":738},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[740],{"type":175,"value":741},"function",{"type":170,"tag":392,"props":743,"children":745},{"style":744},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[746],{"type":175,"value":747}," recur",{"type":170,"tag":392,"props":749,"children":751},{"style":750},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[752],{"type":175,"value":753},"(",{"type":170,"tag":392,"props":755,"children":757},{"style":756},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[758],{"type":175,"value":759},"n",{"type":170,"tag":392,"props":761,"children":762},{"style":750},[763],{"type":175,"value":764},")",{"type":170,"tag":392,"props":766,"children":767},{"style":750},[768],{"type":175,"value":769}," {\n",{"type":170,"tag":392,"props":771,"children":773},{"class":733,"line":772},2,[774,780,786,791,797,803,808,813,818,823,827,831],{"type":170,"tag":392,"props":775,"children":777},{"style":776},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[778],{"type":175,"value":779},"    if",{"type":170,"tag":392,"props":781,"children":783},{"style":782},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[784],{"type":175,"value":785}," (",{"type":170,"tag":392,"props":787,"children":789},{"style":788},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[790],{"type":175,"value":759},{"type":170,"tag":392,"props":792,"children":794},{"style":793},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[795],{"type":175,"value":796}," ===",{"type":170,"tag":392,"props":798,"children":800},{"style":799},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[801],{"type":175,"value":802}," 0",{"type":170,"tag":392,"props":804,"children":805},{"style":782},[806],{"type":175,"value":807},") ",{"type":170,"tag":392,"props":809,"children":810},{"style":788},[811],{"type":175,"value":812},"console",{"type":170,"tag":392,"props":814,"children":815},{"style":750},[816],{"type":175,"value":817},".",{"type":170,"tag":392,"props":819,"children":820},{"style":744},[821],{"type":175,"value":822},"log",{"type":170,"tag":392,"props":824,"children":825},{"style":782},[826],{"type":175,"value":753},{"type":170,"tag":392,"props":828,"children":829},{"style":788},[830],{"type":175,"value":759},{"type":170,"tag":392,"props":832,"children":833},{"style":782},[834],{"type":175,"value":835},")\n",{"type":170,"tag":392,"props":837,"children":839},{"class":733,"line":838},3,[840,845,849,853,857,862,867],{"type":170,"tag":392,"props":841,"children":842},{"style":776},[843],{"type":175,"value":844},"    else",{"type":170,"tag":392,"props":846,"children":847},{"style":744},[848],{"type":175,"value":747},{"type":170,"tag":392,"props":850,"children":851},{"style":782},[852],{"type":175,"value":753},{"type":170,"tag":392,"props":854,"children":855},{"style":788},[856],{"type":175,"value":759},{"type":170,"tag":392,"props":858,"children":859},{"style":793},[860],{"type":175,"value":861}," -",{"type":170,"tag":392,"props":863,"children":864},{"style":799},[865],{"type":175,"value":866}," 1",{"type":170,"tag":392,"props":868,"children":869},{"style":782},[870],{"type":175,"value":835},{"type":170,"tag":392,"props":872,"children":874},{"class":733,"line":873},4,[875],{"type":170,"tag":392,"props":876,"children":877},{"style":750},[878],{"type":175,"value":879},"}\n",{"type":170,"tag":392,"props":881,"children":883},{"class":733,"line":882},5,[884,889,893,898],{"type":170,"tag":392,"props":885,"children":886},{"style":744},[887],{"type":175,"value":888},"recur",{"type":170,"tag":392,"props":890,"children":891},{"style":788},[892],{"type":175,"value":753},{"type":170,"tag":392,"props":894,"children":895},{"style":799},[896],{"type":175,"value":897},"500000",{"type":170,"tag":392,"props":899,"children":900},{"style":788},[901],{"type":175,"value":835},{"type":170,"tag":392,"props":903,"children":905},{"class":733,"line":904},6,[906],{"type":170,"tag":392,"props":907,"children":909},{"style":908},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[910],{"type":175,"value":911},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":170,"tag":208,"props":913,"children":914},{},[915,920],{"type":170,"tag":212,"props":916,"children":917},{},[918],{"type":175,"value":919},"简单-将该函数转换为循环的写法避免栈溢出",{"type":170,"tag":212,"props":921,"children":922},{},[923],{"type":175,"value":924},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":170,"tag":417,"props":926,"children":927},{},[928,929,933,934],{"type":175,"value":421},{"type":170,"tag":423,"props":930,"children":931},{},[932],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":935,"children":936},{},[937],{"type":175,"value":938},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":170,"tag":184,"props":940,"children":942},{"id":941},"困难-商品全排列",[943],{"type":175,"value":941},{"type":170,"tag":197,"props":945,"children":946},{},[947],{"type":175,"value":948},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":170,"tag":417,"props":950,"children":951},{},[952,953,958,959],{"type":175,"value":421},{"type":170,"tag":423,"props":954,"children":955},{},[956],{"type":175,"value":957},"基础代码及用例",{"type":175,"value":421},{"type":170,"tag":197,"props":960,"children":961},{},[962,964,968,970,980],{"type":175,"value":963},"\n    ",{"type":170,"tag":382,"props":965,"children":967},{"src":966},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":175,"value":969},"\n    代码地址：",{"type":170,"tag":189,"props":971,"children":977},{"href":972,"rel":973,"target":976},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[974,975],"noopener","noreferrer","_blank",[978],{"type":175,"value":979},"Element Plus Playground",{"type":175,"value":421},{"type":170,"tag":178,"props":982,"children":984},{"id":983},"类型编程",[985],{"type":175,"value":983},{"type":170,"tag":184,"props":987,"children":989},{"id":988},"简单-omit",[990],{"type":175,"value":991},"简单-Omit",{"type":170,"tag":417,"props":993,"children":994},{},[995,996,1000,1001],{"type":175,"value":421},{"type":170,"tag":423,"props":997,"children":998},{},[999],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":1002,"children":1003},{},[1004],{"type":175,"value":1005},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":170,"tag":417,"props":1007,"children":1008},{},[1009,1010,1014,1015],{"type":175,"value":421},{"type":170,"tag":423,"props":1011,"children":1012},{},[1013],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":1016,"children":1017},{},[1018],{"type":175,"value":1019},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":170,"tag":184,"props":1021,"children":1023},{"id":1022},"简单-trim",[1024],{"type":175,"value":1025},"简单-Trim",{"type":170,"tag":417,"props":1027,"children":1028},{},[1029,1030,1034,1035],{"type":175,"value":421},{"type":170,"tag":423,"props":1031,"children":1032},{},[1033],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":1036,"children":1037},{},[1038],{"type":175,"value":1039},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":170,"tag":417,"props":1041,"children":1042},{},[1043,1044,1048,1049],{"type":175,"value":421},{"type":170,"tag":423,"props":1045,"children":1046},{},[1047],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":1050,"children":1051},{},[1052],{"type":175,"value":1053},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":170,"tag":184,"props":1055,"children":1057},{"id":1056},"中等-deepreadonly",[1058],{"type":175,"value":1059},"中等-DeepReadonly",{"type":170,"tag":417,"props":1061,"children":1062},{},[1063,1064,1068,1069],{"type":175,"value":421},{"type":170,"tag":423,"props":1065,"children":1066},{},[1067],{"type":175,"value":427},{"type":175,"value":421},{"type":170,"tag":430,"props":1070,"children":1071},{},[1072],{"type":175,"value":1073},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":170,"tag":417,"props":1075,"children":1076},{},[1077,1078,1082,1083],{"type":175,"value":421},{"type":170,"tag":423,"props":1079,"children":1080},{},[1081],{"type":175,"value":443},{"type":175,"value":421},{"type":170,"tag":430,"props":1084,"children":1085},{},[1086],{"type":175,"value":1087},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":170,"tag":171,"props":1089,"children":1090},{},[1091],{"type":175,"value":1092},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":772,"depth":772,"links":1094},[1095,1096,1097,1098],{"id":180,"depth":772,"text":180},{"id":408,"depth":772,"text":408},{"id":655,"depth":772,"text":655},{"id":983,"depth":772,"text":983},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1106,1110],{"_path":1107,"title":1108,"description":1109},"/maps/_hardware/ssd","SSD（Solid State Driver）","SSD 是一种基于闪存技术的硬盘，相比传统的机械硬盘，它具有更快的读写速度、更低的延迟、更小的体积和更低的功耗。",{"_path":1111,"title":1112,"description":1113},"/maps/_hire/interview/questions/overall","面试题库","前端开发面试题集合，包含软件工程、算法数据结构等多个技术领域的经典面试题。",1748756314645]