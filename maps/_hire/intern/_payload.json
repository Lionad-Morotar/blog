[{"data":1,"prerenderedAt":1375},["ShallowReactive",2],{"navigation":3,"/maps/_hire/intern":416,"/maps/_hire/intern-surround":1367},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / Abount","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":417,"_dir":418,"_draft":419,"_partial":420,"_locale":421,"title":422,"description":421,"body":423,"_type":1361,"_id":1362,"_source":1363,"_file":1364,"_stem":1365,"_extension":1366},"/maps/_hire/intern","_hire",false,true,"","面试题题库",{"type":424,"children":425,"toc":1355},"root",[426,433,439,445,458,464,469,489,499,504,508,521,531,536,540,557,567,572,585,589,597,608,613,617,625,635,640,648,668,673,678,697,712,717,722,736,740,762,767,781,785,798,803,817,831,836,850,864,875,889,903,907,915,920,926,940,945,950,964,978,983,1174,1187,1201,1206,1211,1243,1248,1254,1268,1282,1288,1302,1316,1322,1336,1350],{"type":427,"tag":428,"props":429,"children":430},"element","h1",{"id":422},[431],{"type":432,"value":422},"text",{"type":427,"tag":434,"props":435,"children":436},"style",{},[437],{"type":432,"value":438},"\n  h4 a {\n    text-decoration: underline !important;\n    text-decoration-color: #b2b2b2 !important;\n  }\n  h4 a:hover {\n    text-decoration-color: #c62222 !important;\n  }\n",{"type":427,"tag":440,"props":441,"children":443},"h2",{"id":442},"算法题",[444],{"type":432,"value":442},{"type":427,"tag":446,"props":447,"children":449},"h4",{"id":448},"简单-斐波那契数列",[450],{"type":427,"tag":451,"props":452,"children":456},"a",{"href":453,"rel":454},"https://leetcode.cn/problems/fibonacci-number/",[455],"nofollow",[457],{"type":432,"value":448},{"type":427,"tag":459,"props":460,"children":461},"p",{},[462],{"type":432,"value":463},"斐波那契数列指以 0、1、1、2、3、5、8... 之后每一项都是前面两项数字之和这种规律排列的数组。给定 n，计算数列第 n 项的值。",{"type":427,"tag":459,"props":465,"children":466},{},[467],{"type":432,"value":468},"后续提问方向：",{"type":427,"tag":470,"props":471,"children":472},"ul",{},[473,484],{"type":427,"tag":474,"props":475,"children":476},"li",{},[477],{"type":427,"tag":451,"props":478,"children":481},{"href":479,"rel":480},"https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",[455],[482],{"type":432,"value":483},"简单-非递归解法（递推）",{"type":427,"tag":474,"props":485,"children":486},{},[487],{"type":432,"value":488},"简单-时间复杂度最小的解法（枚举）",{"type":427,"tag":446,"props":490,"children":492},{"id":491},"简单-合并有序链表",[493],{"type":427,"tag":451,"props":494,"children":497},{"href":495,"rel":496},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/",[455],[498],{"type":432,"value":491},{"type":427,"tag":459,"props":500,"children":501},{},[502],{"type":432,"value":503},"输入两个有序的链表的头节点，返回合并好的链表的头节点。如输入 1->2->4 和 1->3->4，输出 1->1->2->3->4->4",{"type":427,"tag":459,"props":505,"children":506},{},[507],{"type":432,"value":468},{"type":427,"tag":470,"props":509,"children":510},{},[511],{"type":427,"tag":474,"props":512,"children":513},{},[514],{"type":427,"tag":451,"props":515,"children":518},{"href":516,"rel":517},"https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/he-bing-liang-ge-pai-xu-de-lian-biao-by-g3z6g/#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E8%BF%AD%E4%BB%A3",[455],[519],{"type":432,"value":520},"简单-空间复杂度最小的解法（迭代）",{"type":427,"tag":446,"props":522,"children":524},{"id":523},"简单-反转链表",[525],{"type":427,"tag":451,"props":526,"children":529},{"href":527,"rel":528},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/submissions/",[455],[530],{"type":432,"value":523},{"type":427,"tag":459,"props":532,"children":533},{},[534],{"type":432,"value":535},"输入一个链表的头节点，输出该链表反转后的头节点。如输入 1->2->3，输出 3->2->1",{"type":427,"tag":459,"props":537,"children":538},{},[539],{"type":432,"value":468},{"type":427,"tag":470,"props":541,"children":542},{},[543,552],{"type":427,"tag":474,"props":544,"children":545},{},[546],{"type":427,"tag":451,"props":547,"children":550},{"href":548,"rel":549},"https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3",[455],[551],{"type":432,"value":520},{"type":427,"tag":474,"props":553,"children":554},{},[555],{"type":432,"value":556},"中等-环形链表或包含环的链表的反转",{"type":427,"tag":446,"props":558,"children":560},{"id":559},"中等-有效的括号字符串",[561],{"type":427,"tag":451,"props":562,"children":565},{"href":563,"rel":564},"https://leetcode.cn/problems/valid-parenthesis-string/",[455],[566],{"type":432,"value":559},{"type":427,"tag":459,"props":568,"children":569},{},[570],{"type":432,"value":571},"给定由 '('、')'、两种字符的字符串，验证左右括号是否配对。",{"type":427,"tag":470,"props":573,"children":574},{},[575,580],{"type":427,"tag":474,"props":576,"children":577},{},[578],{"type":432,"value":579},"\")(()))\"          =>  false",{"type":427,"tag":474,"props":581,"children":582},{},[583],{"type":432,"value":584},"\"(())((()())())\"  =>  true",{"type":427,"tag":459,"props":586,"children":587},{},[588],{"type":432,"value":468},{"type":427,"tag":470,"props":590,"children":591},{},[592],{"type":427,"tag":474,"props":593,"children":594},{},[595],{"type":432,"value":596},"困难-增加星号字符，\"*\"，可作为单个左括号或单个右括号或空字符串使用，测试用例“(((((())*)))()))(()((*()*(*)))(*)()”",{"type":427,"tag":446,"props":598,"children":600},{"id":599},"中等-数组第k个最大元素",[601],{"type":427,"tag":451,"props":602,"children":605},{"href":603,"rel":604},"https://leetcode.cn/problems/kth-largest-element-in-an-array/",[455],[606],{"type":432,"value":607},"中等-数组第K个最大元素",{"type":427,"tag":459,"props":609,"children":610},{},[611],{"type":432,"value":612},"给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。",{"type":427,"tag":459,"props":614,"children":615},{},[616],{"type":432,"value":468},{"type":427,"tag":470,"props":618,"children":619},{},[620],{"type":427,"tag":474,"props":621,"children":622},{},[623],{"type":432,"value":624},"困难-使用时间复杂度为 O(n) 的解法。",{"type":427,"tag":446,"props":626,"children":628},{"id":627},"中等-二叉树的层序遍历",[629],{"type":427,"tag":451,"props":630,"children":633},{"href":631,"rel":632},"https://leetcode.cn/problems/binary-tree-level-order-traversal/",[455],[634],{"type":432,"value":627},{"type":427,"tag":459,"props":636,"children":637},{},[638],{"type":432,"value":639},"给定二叉树的根节点 root，返回树的层序遍历的结果。",{"type":427,"tag":459,"props":641,"children":642},{},[643],{"type":427,"tag":644,"props":645,"children":647},"img",{"alt":421,"src":646},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812013637.png",[],{"type":427,"tag":459,"props":649,"children":650},{},[651,653,659,661,666],{"type":432,"value":652},"输入：如上图所示。输出：[[3],",{"type":427,"tag":654,"props":655,"children":656},"span",{},[657],{"type":432,"value":658},"9,20",{"type":432,"value":660},",",{"type":427,"tag":654,"props":662,"children":663},{},[664],{"type":432,"value":665},"15,7",{"type":432,"value":667},"]",{"type":427,"tag":440,"props":669,"children":671},{"id":670},"编程题",[672],{"type":432,"value":670},{"type":427,"tag":446,"props":674,"children":676},{"id":675},"简单-bind",[677],{"type":432,"value":675},{"type":427,"tag":679,"props":680,"children":681},"details",{},[682,684,690,691],{"type":432,"value":683},"\n  ",{"type":427,"tag":685,"props":686,"children":687},"summary",{},[688],{"type":432,"value":689},"用例",{"type":432,"value":683},{"type":427,"tag":692,"props":693,"children":694},"highlight",{},[695],{"type":432,"value":696},"\n    const a = {\n      name: 'a',\n      say() {\n        console.log(this.name)\n      },\n    }\n    const c = {\n      name: 'c',\n    }\n    a.say.bind(c)() // \"c\"\n  ",{"type":427,"tag":679,"props":698,"children":699},{},[700,701,706,707],{"type":432,"value":683},{"type":427,"tag":685,"props":702,"children":703},{},[704],{"type":432,"value":705},"参考实现",{"type":432,"value":683},{"type":427,"tag":692,"props":708,"children":709},{},[710],{"type":432,"value":711},"\n    Function.prototype.bind = function bind(context = globalThis) {\n      const fn = this\n      context.fn = fn\n      return (...args) => {\n        const res = context.fn(...args)\n        delete context.fn\n        return res\n      }\n    }\n  ",{"type":427,"tag":446,"props":713,"children":715},{"id":714},"中等-instanceof",[716],{"type":432,"value":714},{"type":427,"tag":459,"props":718,"children":719},{},[720],{"type":432,"value":721},"instanceof 运算符先通过检测类的 Symbol.hasInstance 来判断对象是否是类实例，如果没有相应方法则检测构造器的原型在不在对象的原型链上。",{"type":427,"tag":679,"props":723,"children":724},{},[725,726,730,731],{"type":432,"value":683},{"type":427,"tag":685,"props":727,"children":728},{},[729],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":732,"children":733},{},[734],{"type":432,"value":735},"\n    function _instanceof (val, fn) {\n      const hasInstance = fn[Symbol.hasInstance]\n      if (hasInstance) {\n        return fn[Symbol.hasInstance](val)\n      }\n      const proto = fn.prototype\n      while ((val = Object.getPrototypeOf(val))) {\n        if (val === proto) {\n          return true\n        }\n      }\n      return false\n    }\n  ",{"type":427,"tag":459,"props":737,"children":738},{},[739],{"type":432,"value":468},{"type":427,"tag":470,"props":741,"children":742},{},[743,748],{"type":427,"tag":474,"props":744,"children":745},{},[746],{"type":432,"value":747},"困难-有哪些判断类型的方法？各有什么优缺点？",{"type":427,"tag":474,"props":749,"children":750},{},[751,753,760],{"type":432,"value":752},"偏门-创造一个类 God 使得 ",{"type":427,"tag":754,"props":755,"children":757},"code",{"className":756},[],[758],{"type":432,"value":759},"null instanceof God",{"type":432,"value":761}," 为真",{"type":427,"tag":446,"props":763,"children":765},{"id":764},"中等-深拷贝函数",[766],{"type":432,"value":764},{"type":427,"tag":679,"props":768,"children":769},{},[770,771,775,776],{"type":432,"value":683},{"type":427,"tag":685,"props":772,"children":773},{},[774],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":777,"children":778},{},[779],{"type":432,"value":780},"\n    function cloneDeep (obj) {\n      if (typeof obj !== 'object') {\n        return obj\n      }\n      if (obj instanceof Array) {\n        return obj.map(cloneDeep)\n      }\n      return Object.entries(obj).reduce((h, [k, v]) => {\n        h[k] = cloneDeep(v)\n        return h\n      }, {})\n    }\n  ",{"type":427,"tag":459,"props":782,"children":783},{},[784],{"type":432,"value":468},{"type":427,"tag":470,"props":786,"children":787},{},[788,793],{"type":427,"tag":474,"props":789,"children":790},{},[791],{"type":432,"value":792},"中等-如何支持多种类型，如 Function、Symbol、Undefined、RegExp、Math",{"type":427,"tag":474,"props":794,"children":795},{},[796],{"type":432,"value":797},"中等-如何处理对象间循环引用",{"type":427,"tag":446,"props":799,"children":801},{"id":800},"中等-柯里化函数",[802],{"type":432,"value":800},{"type":427,"tag":679,"props":804,"children":805},{},[806,807,811,812],{"type":432,"value":683},{"type":427,"tag":685,"props":808,"children":809},{},[810],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":813,"children":814},{},[815],{"type":432,"value":816},"\n    const add = curry(function (a, b) {  return a + b })\n    const add5 = add(5)\n    add5(6) // 11\n  ",{"type":427,"tag":679,"props":818,"children":819},{},[820,821,825,826],{"type":432,"value":683},{"type":427,"tag":685,"props":822,"children":823},{},[824],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":827,"children":828},{},[829],{"type":432,"value":830},"\n    const curry = (fn, ...args) => {\n      if (args.length >= fn.length) {\n        return fn.apply(null, args)\n      } else {\n        const newFn = (...extraArgs) => curry(fn, ...args, ...extraArgs)\n        Object.defineProperty(newFn, 'length', { value: fn.length - args.length })\n        return newFn\n      }\n    }\n  ",{"type":427,"tag":446,"props":832,"children":834},{"id":833},"中等-列表数据转树结构",[835],{"type":432,"value":833},{"type":427,"tag":679,"props":837,"children":838},{},[839,840,844,845],{"type":432,"value":683},{"type":427,"tag":685,"props":841,"children":842},{},[843],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":846,"children":847},{},[848],{"type":432,"value":849},"\n    // 输入\n    [\n      {\n        id: \"1\",\n        name: \"page\",\n      },\n      {\n        name: \"page-name\",\n        id: \"2\",\n        parent: \"1\",\n      },\n      {\n        name: \"text\",\n        id: \"3\",\n        parent: \"2\",\n      },\n      {\n        name: \"text\",\n        id: \"4\",\n        parent: \"2\",\n      }\n    ]\n    // 输出\n    [\n      {\n        \"id\": \"1\",\n        \"name\": \"page\",\n        \"components\": [\n          {\n            \"name\": \"page-name\",\n            \"id\": \"2\",\n            \"parent\": \"1\",\n            \"components\": [\n              {\n                \"name\": \"text\",\n                \"id\": \"3\",\n                \"parent\": \"2\",\n              },\n              {\n                \"name\": \"text\",\n                \"id\": \"4\",\n                \"parent\": \"2\",\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  ",{"type":427,"tag":679,"props":851,"children":852},{},[853,854,858,859],{"type":432,"value":683},{"type":427,"tag":685,"props":855,"children":856},{},[857],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":860,"children":861},{},[862],{"type":432,"value":863},"\n    function toTree (data) {\n      data = data || []\n      const map = {}\n      const roots = []\n      data.map(x => map[x.id] = x)\n      data.map(x => {\n        if (map[x.parent]) {\n          map[x.parent].components = map[x.parent].components || []\n          map[x.parent].components.push(x)\n        } else {\n          roots.push(x)\n        }\n      })\n      return roots\n    }\n  ",{"type":427,"tag":446,"props":865,"children":867},{"id":866},"中等-promisemapseries",[868],{"type":427,"tag":451,"props":869,"children":872},{"href":870,"rel":871},"http://bluebirdjs.com/docs/api/promise.mapseries.html",[455],[873],{"type":432,"value":874},"中等-Promise.mapSeries",{"type":427,"tag":679,"props":876,"children":877},{},[878,879,883,884],{"type":432,"value":683},{"type":427,"tag":685,"props":880,"children":881},{},[882],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":885,"children":886},{},[887],{"type":432,"value":888},"\n  const fileNames = [\"1.txt\", Promise.resolve(\"2.txt\"), \"3.txt\"]\n  Promise.mapSeries(fileNames, function(fileName, index, arrayLength) {\n      return fs.readFileAsync(fileName).then(function() {\n          return fileName + \"!\"\n      });\n  }).then(function(result) {\n      console.log(result)\n      // [\"1.txt!\", \"2.txt!\", \"3.txt!\"]\n  })\n  ",{"type":427,"tag":679,"props":890,"children":891},{},[892,893,897,898],{"type":432,"value":683},{"type":427,"tag":685,"props":894,"children":895},{},[896],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":899,"children":900},{},[901],{"type":432,"value":902},"\n    Promise.mapSeries = (arr, fn) => {\n      if (!Array.isArray(arr)) {\n        throw new TypeError(`Promise.mapSeries requires array, but got ${typeof arr}`)\n      }\n      return new Promise(async (resolve) => {\n        const results = []\n        for (let i = 0; i \u003C arr.length; i++) {\n          const val = await Promise.resolve(arr[i])\n          results[i] = await fn(val, i, arr.length)\n        }\n        resolve(results)\n      })\n    }\n  ",{"type":427,"tag":459,"props":904,"children":905},{},[906],{"type":432,"value":468},{"type":427,"tag":470,"props":908,"children":909},{},[910],{"type":427,"tag":474,"props":911,"children":912},{},[913],{"type":432,"value":914},"困难-给实现加上类型（TypeScript）",{"type":427,"tag":440,"props":916,"children":918},{"id":917},"综合题",[919],{"type":432,"value":917},{"type":427,"tag":446,"props":921,"children":923},{"id":922},"简单-统计当前页面用到的所有html标签的种类",[924],{"type":432,"value":925},"简单-统计当前页面用到的所有HTML标签的种类",{"type":427,"tag":679,"props":927,"children":928},{},[929,930,934,935],{"type":432,"value":683},{"type":427,"tag":685,"props":931,"children":932},{},[933],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":936,"children":937},{},[938],{"type":432,"value":939},"\n    [...new Set([...document.querySelectorAll('*')].map(x => x.tagName))]\n    // ['HTML', 'DIV', 'SPAN', ...]\n  ",{"type":427,"tag":446,"props":941,"children":943},{"id":942},"中等-商品排序",[944],{"type":432,"value":942},{"type":427,"tag":459,"props":946,"children":947},{},[948],{"type":432,"value":949},"设计一个支持扩展的排序函数。使得给定的食物列表按照价格升序、评分降序的顺序排列。",{"type":427,"tag":679,"props":951,"children":952},{},[953,954,958,959],{"type":432,"value":683},{"type":427,"tag":685,"props":955,"children":956},{},[957],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":960,"children":961},{},[962],{"type":432,"value":963},"\n    const food = [\n      { name: \"Suger\", price: 1, rating: 3 },\n      { name: \"Chocolate\", price: 3, rating: 4 },\n      { name: \"Burger\", price: 3, rating: 2 },\n      { name: \"Cola\", price: 1, rating: 5 },\n      { name: \"Pizza\", price: 5, rating: 3 },\n    ]\n    food.sort(yourSortFunction)\n    // [{\"name\": \"Cola\",\"price\": 1,\"rating\": 5},\n    //  {\"name\": \"Suger\",\"price\": 1,\"rating\": 3},\n    //  {\"name\": \"Chocolate\",\"price\": 3,\"rating\": 4},\n    //  {\"name\": \"Burger\",\"price\": 3,\"rating\": 2},\n    //  {\"name\": \"Pizza\",\"price\": 5,\"rating\": 3}]\n  ",{"type":427,"tag":679,"props":965,"children":966},{},[967,968,972,973],{"type":432,"value":683},{"type":427,"tag":685,"props":969,"children":970},{},[971],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":974,"children":975},{},[976],{"type":432,"value":977},"\n    const sort = map => compareFn => (a, b) => compareFn(map(a), map(b))\n    const flipComparison = fn => (a, b) => -fn(a, b)\n    const byValue = (a, b) => a - b\n    const byPrice = sort(e => e.price)(byValue)\n    const byRating = sort(e => e.rating)(flipComparison(byValue))\n    const sortFlattend = sortFns => (a, b) => sortFns.reduce((sortResult, fn) => sortResult || fn(a,b), 0)\n    const byPriceThenRating = sortFlattend([byPrice, byRating])\n    // food.sort(byPriceThenRating)\n  ",{"type":427,"tag":446,"props":979,"children":981},{"id":980},"困难-给定以下递归函数提问",[982],{"type":432,"value":980},{"type":427,"tag":984,"props":985,"children":989},"pre",{"className":986,"code":987,"language":988,"meta":421,"style":421},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","function recur(n) {\n    if (n === 0) console.log(n)\n    else recur(n - 1)\n}\nrecur(500000)\n// >>> RangeError: Maximum call stack size exceeded\n","js",[990],{"type":427,"tag":754,"props":991,"children":992},{"__ignoreMap":421},[993,1032,1098,1133,1142,1164],{"type":427,"tag":654,"props":994,"children":997},{"class":995,"line":996},"line",1,[998,1004,1010,1016,1022,1027],{"type":427,"tag":654,"props":999,"children":1001},{"style":1000},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[1002],{"type":432,"value":1003},"function",{"type":427,"tag":654,"props":1005,"children":1007},{"style":1006},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[1008],{"type":432,"value":1009}," recur",{"type":427,"tag":654,"props":1011,"children":1013},{"style":1012},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1014],{"type":432,"value":1015},"(",{"type":427,"tag":654,"props":1017,"children":1019},{"style":1018},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1020],{"type":432,"value":1021},"n",{"type":427,"tag":654,"props":1023,"children":1024},{"style":1012},[1025],{"type":432,"value":1026},")",{"type":427,"tag":654,"props":1028,"children":1029},{"style":1012},[1030],{"type":432,"value":1031}," {\n",{"type":427,"tag":654,"props":1033,"children":1035},{"class":995,"line":1034},2,[1036,1042,1048,1053,1059,1065,1070,1075,1080,1085,1089,1093],{"type":427,"tag":654,"props":1037,"children":1039},{"style":1038},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1040],{"type":432,"value":1041},"    if",{"type":427,"tag":654,"props":1043,"children":1045},{"style":1044},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1046],{"type":432,"value":1047}," (",{"type":427,"tag":654,"props":1049,"children":1051},{"style":1050},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1052],{"type":432,"value":1021},{"type":427,"tag":654,"props":1054,"children":1056},{"style":1055},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[1057],{"type":432,"value":1058}," ===",{"type":427,"tag":654,"props":1060,"children":1062},{"style":1061},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1063],{"type":432,"value":1064}," 0",{"type":427,"tag":654,"props":1066,"children":1067},{"style":1044},[1068],{"type":432,"value":1069},") ",{"type":427,"tag":654,"props":1071,"children":1072},{"style":1050},[1073],{"type":432,"value":1074},"console",{"type":427,"tag":654,"props":1076,"children":1077},{"style":1012},[1078],{"type":432,"value":1079},".",{"type":427,"tag":654,"props":1081,"children":1082},{"style":1006},[1083],{"type":432,"value":1084},"log",{"type":427,"tag":654,"props":1086,"children":1087},{"style":1044},[1088],{"type":432,"value":1015},{"type":427,"tag":654,"props":1090,"children":1091},{"style":1050},[1092],{"type":432,"value":1021},{"type":427,"tag":654,"props":1094,"children":1095},{"style":1044},[1096],{"type":432,"value":1097},")\n",{"type":427,"tag":654,"props":1099,"children":1101},{"class":995,"line":1100},3,[1102,1107,1111,1115,1119,1124,1129],{"type":427,"tag":654,"props":1103,"children":1104},{"style":1038},[1105],{"type":432,"value":1106},"    else",{"type":427,"tag":654,"props":1108,"children":1109},{"style":1006},[1110],{"type":432,"value":1009},{"type":427,"tag":654,"props":1112,"children":1113},{"style":1044},[1114],{"type":432,"value":1015},{"type":427,"tag":654,"props":1116,"children":1117},{"style":1050},[1118],{"type":432,"value":1021},{"type":427,"tag":654,"props":1120,"children":1121},{"style":1055},[1122],{"type":432,"value":1123}," -",{"type":427,"tag":654,"props":1125,"children":1126},{"style":1061},[1127],{"type":432,"value":1128}," 1",{"type":427,"tag":654,"props":1130,"children":1131},{"style":1044},[1132],{"type":432,"value":1097},{"type":427,"tag":654,"props":1134,"children":1136},{"class":995,"line":1135},4,[1137],{"type":427,"tag":654,"props":1138,"children":1139},{"style":1012},[1140],{"type":432,"value":1141},"}\n",{"type":427,"tag":654,"props":1143,"children":1145},{"class":995,"line":1144},5,[1146,1151,1155,1160],{"type":427,"tag":654,"props":1147,"children":1148},{"style":1006},[1149],{"type":432,"value":1150},"recur",{"type":427,"tag":654,"props":1152,"children":1153},{"style":1050},[1154],{"type":432,"value":1015},{"type":427,"tag":654,"props":1156,"children":1157},{"style":1061},[1158],{"type":432,"value":1159},"500000",{"type":427,"tag":654,"props":1161,"children":1162},{"style":1050},[1163],{"type":432,"value":1097},{"type":427,"tag":654,"props":1165,"children":1167},{"class":995,"line":1166},6,[1168],{"type":427,"tag":654,"props":1169,"children":1171},{"style":1170},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[1172],{"type":432,"value":1173},"// >>> RangeError: Maximum call stack size exceeded\n",{"type":427,"tag":470,"props":1175,"children":1176},{},[1177,1182],{"type":427,"tag":474,"props":1178,"children":1179},{},[1180],{"type":432,"value":1181},"简单-将该函数转换为循环的写法避免栈溢出",{"type":427,"tag":474,"props":1183,"children":1184},{},[1185],{"type":432,"value":1186},"困难-使用任意循环以外的方法改写函数避免栈溢出",{"type":427,"tag":679,"props":1188,"children":1189},{},[1190,1191,1195,1196],{"type":432,"value":683},{"type":427,"tag":685,"props":1192,"children":1193},{},[1194],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":1197,"children":1198},{},[1199],{"type":432,"value":1200},"\n    function recur(n) {\n      if (n === 0) console.log(n)\n      else return () => recur(n - 1)\n    }\n    function trampoline(fn) {\n      let res = () => fn()\n      while (res instanceof Function) {\n          res = res()\n      }\n      return res\n    }\n    trampoline(recur(50000000)) // 0\n  ",{"type":427,"tag":446,"props":1202,"children":1204},{"id":1203},"困难-商品全排列",[1205],{"type":432,"value":1203},{"type":427,"tag":459,"props":1207,"children":1208},{},[1209],{"type":432,"value":1210},"任意技术栈。给定商品的规格信息以及库存列表，实现商品的全排列表格。表格行首有 checkbox，表格能多选，但如果库存中没有此行的商品规格则此行不能被选中。",{"type":427,"tag":679,"props":1212,"children":1213},{},[1214,1215,1220,1221],{"type":432,"value":683},{"type":427,"tag":685,"props":1216,"children":1217},{},[1218],{"type":432,"value":1219},"基础代码及用例",{"type":432,"value":683},{"type":427,"tag":459,"props":1222,"children":1223},{},[1224,1226,1230,1232,1242],{"type":432,"value":1225},"\n    ",{"type":427,"tag":644,"props":1227,"children":1229},{"src":1228},"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220812105700.png",[],{"type":432,"value":1231},"\n    代码地址：",{"type":427,"tag":451,"props":1233,"children":1239},{"href":1234,"rel":1235,"target":1238},"https://element-plus.run/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8ZWwtdGFibGUgOmRhdGE9XCJ0YWJsZURhdGFcIiBzdHlsZT1cIndpZHRoOiAxMDAlXCI+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiB0eXBlPVwic2VsZWN0aW9uXCIgd2lkdGg9XCI1NVwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwibmFtZVwiIGxhYmVsPVwi5ZCN56ewXCIgd2lkdGg9XCIxODBcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cImNvbG9yXCIgbGFiZWw9XCLpopzoibJcIiAvPlxuICAgIDxlbC10YWJsZS1jb2x1bW4gcHJvcD1cInNhbGVzZXRcIiBsYWJlbD1cIuWll+mkkFwiIC8+XG4gICAgPGVsLXRhYmxlLWNvbHVtbiBwcm9wPVwic2l6ZVwiIGxhYmVsPVwi5YaF5a2YXCIgLz5cbiAgPC9lbC10YWJsZT5cbjwvdGVtcGxhdGU+XG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNldHVwPlxuICAvLyDllYblk4HlsZ7mgKfmmI7nu4ZcbiAgY29uc3Qgc3BlY0xpc3QgPSBbXG4gICAgeyB0aXRsZTogXCLpopzoibJcIiwga2V5OiAnY29sb3InLCBsaXN0OiBbXCLnuqLoibJcIiwgXCLntKvoibJcIiwgXCLnmb3oibJcIiwgXCLpu5HoibJcIl0gfSxcbiAgICB7IHRpdGxlOiBcIuWll+mkkFwiLCBrZXk6ICdzYWxlc2V0JywgbGlzdDogW1wi5aWX6aSQ5LiAXCIsIFwi5aWX6aSQ5LqMXCIsIFwi5aWX6aSQ5LiJXCJdIH0sXG4gICAgeyB0aXRsZTogXCLlhoXlrZhcIiwga2V5OiAnc2l6ZScsIGxpc3Q6IFtcIjY0R1wiLCBcIjEyOEdcIiwgXCIyNTZHXCJdIH1cbiAgXVxuICAvLyDliankvZnlupPlrZjliJfooahcbiAgY29uc3Qgc3RvcmFnZSA9IFtcbiAgICB7IGlkOiBcIjFcIiwgc3BlY3M6IFtcIue0q+iJslwiLCBcIuWll+mkkOS4gFwiLCBcIjY0R1wiXSB9LFxuICAgIHsgaWQ6IFwiMlwiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LiAXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiM1wiLCBzcGVjczogW1wi57Sr6ImyXCIsIFwi5aWX6aSQ5LqMXCIsIFwiMTI4R1wiXSB9LFxuICAgIHsgaWQ6IFwiNFwiLCBzcGVjczogW1wi6buR6ImyXCIsIFwi5aWX6aSQ5LiJXCIsIFwiMjU2R1wiXSB9XG4gIF1cbiAgY29uc3QgdGFibGVEYXRhID0gW11cbjwvc2NyaXB0PlxuIiwiaW1wb3J0X21hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge31cbn0iLCJfbyI6e319",[1236,1237],"noopener","noreferrer","_blank",[1240],{"type":432,"value":1241},"Element Plus Playground",{"type":432,"value":683},{"type":427,"tag":440,"props":1244,"children":1246},{"id":1245},"类型编程",[1247],{"type":432,"value":1245},{"type":427,"tag":446,"props":1249,"children":1251},{"id":1250},"简单-omit",[1252],{"type":432,"value":1253},"简单-Omit",{"type":427,"tag":679,"props":1255,"children":1256},{},[1257,1258,1262,1263],{"type":432,"value":683},{"type":427,"tag":685,"props":1259,"children":1260},{},[1261],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":1264,"children":1265},{},[1266],{"type":432,"value":1267},"\n    interface Todo {\n      title: string\n      description: string\n      completed: boolean\n    }\n    type TodoPreview = MyOmit\u003CTodo, 'description' | 'title'>\n    const todo: TodoPreview = {\n      completed: false,\n    }\n  ",{"type":427,"tag":679,"props":1269,"children":1270},{},[1271,1272,1276,1277],{"type":432,"value":683},{"type":427,"tag":685,"props":1273,"children":1274},{},[1275],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":1278,"children":1279},{},[1280],{"type":432,"value":1281},"\n    type MyOmit\u003CT, K extends keyof T> = {\n      [P in Exclude\u003Ckeyof T, K>]: T[P]\n    }\n  ",{"type":427,"tag":446,"props":1283,"children":1285},{"id":1284},"简单-trim",[1286],{"type":432,"value":1287},"简单-Trim",{"type":427,"tag":679,"props":1289,"children":1290},{},[1291,1292,1296,1297],{"type":432,"value":683},{"type":427,"tag":685,"props":1293,"children":1294},{},[1295],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":1298,"children":1299},{},[1300],{"type":432,"value":1301},"\n    // trimed expected to be 'Hello World'\n    type trimed = Trim\u003C'  Hello World  '>\n  ",{"type":427,"tag":679,"props":1303,"children":1304},{},[1305,1306,1310,1311],{"type":432,"value":683},{"type":427,"tag":685,"props":1307,"children":1308},{},[1309],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":1312,"children":1313},{},[1314],{"type":432,"value":1315},"\n    type Trim\u003CS extends string> = S extends\n      | `${' ' | '\\t' | '\\n'}${infer Rest}`\n      | `${infer Rest}${' ' | '\\t' | '\\n'}`\n      ? Trim\u003CRest>\n      : S\n  ",{"type":427,"tag":446,"props":1317,"children":1319},{"id":1318},"中等-deepreadonly",[1320],{"type":432,"value":1321},"中等-DeepReadonly",{"type":427,"tag":679,"props":1323,"children":1324},{},[1325,1326,1330,1331],{"type":432,"value":683},{"type":427,"tag":685,"props":1327,"children":1328},{},[1329],{"type":432,"value":689},{"type":432,"value":683},{"type":427,"tag":692,"props":1332,"children":1333},{},[1334],{"type":432,"value":1335},"\n    type X = { \n      x: { \n        a: 1\n        b: 'hi'\n      }\n      y: 'hey'\n    }\n    type Expected = { \n      readonly x: { \n        readonly a: 1\n        readonly b: 'hi'\n      }\n      readonly y: 'hey' \n    }\n    type Todo = DeepReadonly\u003CX> // should be same as `Expected`\n  ",{"type":427,"tag":679,"props":1337,"children":1338},{},[1339,1340,1344,1345],{"type":432,"value":683},{"type":427,"tag":685,"props":1341,"children":1342},{},[1343],{"type":432,"value":705},{"type":432,"value":683},{"type":427,"tag":692,"props":1346,"children":1347},{},[1348],{"type":432,"value":1349},"\n    type DeepReadonly\u003CT extends any> = {\n      readonly [P in keyof T]: T[P] extends (...args: any[]) => any\n        ? T[P]\n        : DeepReadonly\u003CT[P]>\n    }\n  ",{"type":427,"tag":434,"props":1351,"children":1352},{},[1353],{"type":432,"value":1354},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":421,"searchDepth":1034,"depth":1034,"links":1356},[1357,1358,1359,1360],{"id":442,"depth":1034,"text":442},{"id":670,"depth":1034,"text":670},{"id":917,"depth":1034,"text":917},{"id":1245,"depth":1034,"text":1245},"markdown","content:6.maps:_hire:intern.md","content","6.maps/_hire/intern.md","6.maps/_hire/intern","md",[1368,1372],{"_path":1369,"title":1370,"description":1371},"/maps/_frontend/w3c/security/subresource-integrity","Subresource Integrity","子资源完整性协议允许浏览器通过检查哈希值来判断资源是否经过篡改。",{"_path":1373,"title":1374,"description":421},"/maps/_hire/interview/questions/overall","题库",1738452611082]