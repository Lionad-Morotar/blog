[{"data":1,"prerenderedAt":552},["ShallowReactive",2],{"navigation":3,"/maps/_workflow/linter/eslint":161,"/maps/_workflow/linter/eslint-surround":543},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":537,"_id":538,"_source":539,"_file":540,"_stem":541,"_extension":542},"/maps/_workflow/linter/eslint","linter",false,true,"","ESLint","ESLint 是 JavaScript 和 TypeScript 的代码质量检查工具，帮助开发者保持代码风格一致性和减少错误。",{"type":170,"children":171,"toc":530},"root",[172,180,187,202,207,220,225,230,241,246,252,300,306,387,392,398,411,417,430,436,461,466,477,483,488,494,505,510,516],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"版本",[178],{"type":179,"value":176},"text",{"type":173,"tag":181,"props":182,"children":184},"h4",{"id":183},"如何迁移到-flat-config",[185],{"type":179,"value":186},"如何迁移到 Flat Config？",{"type":173,"tag":188,"props":189,"children":190},"p",{},[191,193],{"type":179,"value":192},"见：",{"type":173,"tag":194,"props":195,"children":199},"a",{"href":196,"rel":197},"https://zh-hans.eslint.org/docs/latest/use/configure/migration-guide",[198],"nofollow",[200],{"type":179,"value":201},"配置迁移指南@eslint",{"type":173,"tag":174,"props":203,"children":205},{"id":204},"工具类库",[206],{"type":179,"value":204},{"type":173,"tag":181,"props":208,"children":210},{"id":209},"rushstackeslint-patch-有什么作用",[211,218],{"type":173,"tag":212,"props":213,"children":215},"code",{"className":214},[],[216],{"type":179,"value":217},"rushstack/eslint-patch",{"type":179,"value":219}," 有什么作用？",{"type":173,"tag":188,"props":221,"children":222},{},[223],{"type":179,"value":224},"最主要的功能是为 ESLint 带来现代的模块解析功能。它加载了 .eslintrc.js 并在内存中修改了 ESLint 引擎，使其插件解析器引用模块的路径是相对于引用配置文件，而不是项目根目录，这可以增强 monorepo 下的开发体验。",{"type":173,"tag":188,"props":226,"children":227},{},[228],{"type":179,"value":229},"到了 Flat Config 时代，ESLint 的插件寻址路径已经改为相对于配置文件所在目录，而不是项目根目录。",{"type":173,"tag":188,"props":231,"children":232},{},[233,234],{"type":179,"value":192},{"type":173,"tag":194,"props":235,"children":238},{"href":236,"rel":237},"https://github.com/microsoft/rushstack/tree/main/eslint/eslint-patch",[198],[239],{"type":179,"value":240},"rushstack/eslint-patch@github",{"type":173,"tag":174,"props":242,"children":244},{"id":243},"配置",[245],{"type":179,"value":243},{"type":173,"tag":181,"props":247,"children":249},{"id":248},"配置分为哪些类型",[250],{"type":179,"value":251},"配置分为哪些类型？",{"type":173,"tag":253,"props":254,"children":255},"ul",{},[256,271,276,281,295],{"type":173,"tag":257,"props":258,"children":259},"li",{},[260,262,269],{"type":179,"value":261},"解析器配置（parer）：包含处理器和解析器，处理器用于获取文本中可解析内容，解析器用于将内容解析为 ",{"type":173,"tag":194,"props":263,"children":266},{"href":264,"rel":265},"https://eslint.org/docs/latest/extend/custom-parsers#ast-specification",[198],[267],{"type":179,"value":268},"ESLint AST",{"type":179,"value":270},"。",{"type":173,"tag":257,"props":272,"children":273},{},[274],{"type":179,"value":275},"环境配置（env）：指定代码运行的环境项如 node、browser，以及设置全局变量 global。",{"type":173,"tag":257,"props":277,"children":278},{},[279],{"type":179,"value":280},"规则配置（rules）：指定代码检查的规则项，如 no-unused-vars、eqeqeq 等。",{"type":173,"tag":257,"props":282,"children":283},{},[284,286,293],{"type":179,"value":285},"共享设置（settings）：所有规则都可以访问的共享设置项，如给 ",{"type":173,"tag":194,"props":287,"children":290},{"href":288,"rel":289},"https://github.com/element-plus/element-plus/blob/49e1d594fa7cbabdbf3958591d44c9e456563005/internal/eslint-config/index.js#L21",[198],[291],{"type":179,"value":292},"import-x/resolver",{"type":179,"value":294}," 配置需要解析的文件类型。",{"type":173,"tag":257,"props":296,"children":297},{},[298],{"type":179,"value":299},"插件配置（plugins）：扩展 ESLint 的功能，包含插件和规则。",{"type":173,"tag":181,"props":301,"children":303},{"id":302},"eslint-配置的优先级和覆盖规则是怎样的",[304],{"type":179,"value":305},"ESLint 配置的优先级和覆盖规则是怎样的？",{"type":173,"tag":253,"props":307,"children":308},{},[309,342,374],{"type":173,"tag":257,"props":310,"children":311},{},[312,314,320,322,328,329,335,336],{"type":179,"value":313},"文件内联配置：",{"type":173,"tag":212,"props":315,"children":317},{"className":316},[],[318],{"type":179,"value":319},"/* eslint-disabled */",{"type":179,"value":321},"、",{"type":173,"tag":212,"props":323,"children":325},{"className":324},[],[326],{"type":179,"value":327},"/* global */",{"type":179,"value":321},{"type":173,"tag":212,"props":330,"children":332},{"className":331},[],[333],{"type":179,"value":334},"/* eslint xxx: \"off\" */",{"type":179,"value":321},{"type":173,"tag":212,"props":337,"children":339},{"className":338},[],[340],{"type":179,"value":341},"/* eslint-env node */",{"type":173,"tag":257,"props":343,"children":344},{},[345,347,353,354,360,361,367,368],{"type":179,"value":346},"命令行选项：",{"type":173,"tag":212,"props":348,"children":350},{"className":349},[],[351],{"type":179,"value":352},"--global",{"type":179,"value":321},{"type":173,"tag":212,"props":355,"children":357},{"className":356},[],[358],{"type":179,"value":359},"--rule",{"type":179,"value":321},{"type":173,"tag":212,"props":362,"children":364},{"className":363},[],[365],{"type":179,"value":366},"--env",{"type":179,"value":321},{"type":173,"tag":212,"props":369,"children":371},{"className":370},[],[372],{"type":179,"value":373},"--config",{"type":173,"tag":257,"props":375,"children":376},{},[377,379,385],{"type":179,"value":378},"文件配置：首先寻找和校验文件同目录的文件配置和 package.json eslintConfig 配置，没找到则向上级目录寻找，直到根目录，或找到包括 ",{"type":173,"tag":212,"props":380,"children":382},{"className":381},[],[383],{"type":179,"value":384},"root: true",{"type":179,"value":386}," 的配置",{"type":173,"tag":188,"props":388,"children":389},{},[390],{"type":179,"value":391},"Flat Config 配置不存在向上级目录寻找的情况。",{"type":173,"tag":181,"props":393,"children":395},{"id":394},"eslint-相对-glob-模式的坑",[396],{"type":179,"value":397},"ESLint 相对 glob 模式的坑？",{"type":173,"tag":188,"props":399,"children":400},{},[401,403,409],{"type":179,"value":402},"使用相对 glob 模式如 ",{"type":173,"tag":212,"props":404,"children":406},{"className":405},[],[407],{"type":179,"value":408},"**/*.js",{"type":179,"value":410}," 时，如果使用配置文件模式，那么相对路径是相对于配置文件所在目录；如果使用 CLI 传入配置（--config）那么相对路径是相对命令执行的工作目录。",{"type":173,"tag":181,"props":412,"children":414},{"id":413},"为什么-eslint8-废弃了个人配置文件",[415],{"type":179,"value":416},"为什么 ESLint@8 废弃了个人配置文件？",{"type":173,"tag":188,"props":418,"children":419},{},[420,422,428],{"type":179,"value":421},"个人配置文件指 ",{"type":173,"tag":212,"props":423,"children":425},{"className":424},[],[426],{"type":179,"value":427},"~",{"type":179,"value":429}," 目录（用户主目录）下的配置文件，如果 ESLint 在项目中找不到配置文件，那么将自动搜寻用户主目录下的配置文件。但是配置文件这种形式难以共享和修改（因为它从用户主目录下 node_modules 加载共享配置和解析器，而在项目目录加载插件），所以在 ESLint@8 被废弃。",{"type":173,"tag":181,"props":431,"children":433},{"id":432},"如何配置全局变量",[434],{"type":179,"value":435},"如何配置全局变量？",{"type":173,"tag":253,"props":437,"children":438},{},[439,456],{"type":173,"tag":257,"props":440,"children":441},{},[442,443,449,450],{"type":179,"value":313},{"type":173,"tag":212,"props":444,"children":446},{"className":445},[],[447],{"type":179,"value":448},"/* global x1, x2:writable */",{"type":179,"value":321},{"type":173,"tag":212,"props":451,"children":453},{"className":452},[],[454],{"type":179,"value":455},"/* eslint-env es2022, node, mocha */",{"type":173,"tag":257,"props":457,"children":458},{},[459],{"type":179,"value":460},"使用配置文件或 eslintConfig 中的 env 字段",{"type":173,"tag":188,"props":462,"children":463},{},[464],{"type":179,"value":465},"注意，如果直接更改 parserOptions 的 ecmaVersion 而不更改 env 配置，是不会支持对应版本 ES 规范的全局变量的，因为 parserOptions 的 ecmaVersion 只是告诉 ESLint 使用哪个版本的 ECMAScript 语法解析代码。",{"type":173,"tag":188,"props":467,"children":468},{},[469,470],{"type":179,"value":192},{"type":173,"tag":194,"props":471,"children":474},{"href":472,"rel":473},"https://zh-hans.eslint.org/docs/latest/use/configure/language-options#-7",[198],[475],{"type":179,"value":476},"ESLint parserOptions",{"type":173,"tag":181,"props":478,"children":480},{"id":479},"配置和插件有什么区别",[481],{"type":179,"value":482},"配置和插件有什么区别？",{"type":173,"tag":188,"props":484,"children":485},{},[486],{"type":179,"value":487},"配置是 ESLint 的规则和选项的集合（eslint-config-airbnb），而插件是扩展 ESLint 功能的模块（eslint-plugin-vue），插件可以包含自定义规则、解析器和共享配置。",{"type":173,"tag":181,"props":489,"children":491},{"id":490},"共享配置如何实现",[492],{"type":179,"value":493},"共享配置如何实现？",{"type":173,"tag":188,"props":495,"children":496},{},[497,498],{"type":179,"value":192},{"type":173,"tag":194,"props":499,"children":502},{"href":500,"rel":501},"https://github.com/pi-ray/eslint-config",[198],[503],{"type":179,"value":504},"p-ray/eslint-config",{"type":173,"tag":174,"props":506,"children":508},{"id":507},"性能",[509],{"type":179,"value":507},{"type":173,"tag":181,"props":511,"children":513},{"id":512},"关于性能的指摘",[514],{"type":179,"value":515},"关于性能的指摘？",{"type":173,"tag":188,"props":517,"children":518},{},[519,521,528],{"type":179,"value":520},"社区有一些 Rust 化的替代品，如 RSLint（已停更）。ESLint 内部也讨论过 Rust 化的可能性，见 ",{"type":173,"tag":194,"props":522,"children":525},{"href":523,"rel":524},"https://github.com/eslint/eslint/discussions/16557",[198],[526],{"type":179,"value":527},"Complete rewrite of ESLint",{"type":179,"value":529},"，ESLint 作为一个通用的代码检查器，其核心流程（包括解析路径、修复错误、报告错误等）并不慢，慢的是特殊的插件以及在单线程环境中运行解析器并创建巨大的抽象语法树。",{"title":166,"searchDepth":531,"depth":531,"links":532},2,[533,534,535,536],{"id":176,"depth":531,"text":176},{"id":204,"depth":531,"text":204},{"id":243,"depth":531,"text":243},{"id":507,"depth":531,"text":507},"markdown","content:6.maps:_workflow:linter:eslint.md","content","6.maps/_workflow/linter/eslint.md","6.maps/_workflow/linter/eslint","md",[544,548],{"_path":545,"title":546,"description":547},"/maps/_workflow/fe-engineering","前端工程化","前端工程化的最佳实践和工具，帮助提升开发效率和代码质量",{"_path":549,"title":550,"description":551},"/maps/_workflow/linter","Linter","Linter 是代码质量检查工具，帮助开发者保持代码风格一致性和减少错误。",1753070000722]