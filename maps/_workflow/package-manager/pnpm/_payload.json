[{"data":1,"prerenderedAt":1762},["ShallowReactive",2],{"navigation":3,"/maps/_workflow/package-manager/pnpm":161,"/maps/_workflow/package-manager/pnpm-surround":1753},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":1747,"_id":1748,"_source":1749,"_file":1750,"_stem":1751,"_extension":1752},"/maps/_workflow/package-manager/pnpm","package-manager",false,true,"","pnpm","pnpm 是一个快速、省空间的包管理器",{"type":170,"children":171,"toc":1742},"root",[172,181,188,202,208,218,223,229,240,251,257,262,316,322,327,332,337,355,359,364,370,381,930,944,949,955,986,992,1073,1106,1115,1135,1141,1193,1235,1244,1255,1261,1266,1289,1340,1346,1351,1357,1385,1391,1415,1426,1431,1437,1442,1503,1509,1514,1522,1534,1540,1545,1558,1563,1574,1580,1657,1663,1676,1684,1695,1701,1706,1717,1723,1728,1736],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"api-细节和配置项",[178],{"type":179,"value":180},"text","API 细节和配置项",{"type":173,"tag":182,"props":183,"children":185},"h4",{"id":184},"pnpm-import",[186],{"type":179,"value":187},"pnpm import",{"type":173,"tag":189,"props":190,"children":191},"p",{},[192,194,200],{"type":179,"value":193},"使用 ",{"type":173,"tag":195,"props":196,"children":198},"code",{"className":197},[],[199],{"type":179,"value":187},{"type":179,"value":201}," 可以将 package-lock、npm-shrinkwrap 和 yarn.lock 转换为 pnpm-lock 文件。",{"type":173,"tag":182,"props":203,"children":205},{"id":204},"pnpm-fetch",[206],{"type":179,"value":207},"pnpm fetch",{"type":173,"tag":189,"props":209,"children":210},{},[211,216],{"type":173,"tag":195,"props":212,"children":214},{"className":213},[],[215],{"type":179,"value":207},{"type":179,"value":217}," 它跳过了 package.json 文件，允许项目在只有 pnpm-lock 文件的情况下创建 .pnpm 虚拟仓库。这有利于 docker 构建，因为 package.json 经常因为非依赖变化的改动而改动，导致 docker layer 失效。",{"type":173,"tag":189,"props":219,"children":220},{},[221],{"type":179,"value":222},"相比 yarn 和 npm，在脱离 package.json 的情况下，单靠 package-lock（或 yarn-lock），yarn 和 npm 没有办法确定依赖版本，因为其 package-lock 中，依赖的版本号不是固定版本号。",{"type":173,"tag":182,"props":224,"children":226},{"id":225},"pnpm-why",[227],{"type":179,"value":228},"pnpm why",{"type":173,"tag":189,"props":230,"children":231},{},[232,233,238],{"type":179,"value":193},{"type":173,"tag":195,"props":234,"children":236},{"className":235},[],[237],{"type":179,"value":228},{"type":179,"value":239}," 可以列出项目内依赖了某个依赖的依赖，比如说找到项目内使用了 lodash 的包。",{"type":173,"tag":241,"props":242,"children":246},"pre",{"code":243,"language":179,"meta":166,"className":244},"dependencies:\nelement-plus 2.2.20\n├── lodash 4.17.21\n└─┬ lodash-unified 1.0.3\n  └── lodash 4.17.21 peer\n...\n",[245],"language-text",[247],{"type":173,"tag":195,"props":248,"children":249},{"__ignoreMap":166},[250],{"type":179,"value":243},{"type":173,"tag":182,"props":252,"children":254},{"id":253},"pnpm-run",[255],{"type":179,"value":256},"pnpm run",{"type":173,"tag":189,"props":258,"children":259},{},[260],{"type":179,"value":261},"与其它包管理器的一些区别：",{"type":173,"tag":263,"props":264,"children":265},"ol",{},[266,292,297],{"type":173,"tag":267,"props":268,"children":269},"li",{},[270,276,278,284,286],{"type":173,"tag":195,"props":271,"children":273},{"className":272},[],[274],{"type":179,"value":275},"pnpm run script-name",{"type":179,"value":277},"，如果 ",{"type":173,"tag":195,"props":279,"children":281},{"className":280},[],[282],{"type":179,"value":283},"script-name",{"type":179,"value":285}," 没有和 pnpm 内置指令冲突，则可以省略 ",{"type":173,"tag":195,"props":287,"children":289},{"className":288},[],[290],{"type":179,"value":291},"run",{"type":173,"tag":267,"props":293,"children":294},{},[295],{"type":179,"value":296},"run 指令默认不会执行 pre 和 post 钩子函数，因为 pnpm 认为这使任务流更难理解",{"type":173,"tag":267,"props":298,"children":299},{},[300,306,308,314],{"type":173,"tag":195,"props":301,"children":303},{"className":302},[],[304],{"type":179,"value":305},"shell-emulator",{"type":179,"value":307}," 选项启用后，将使用 JS 解析指令，这使得在不兼容 POSIX 的环境执行类似 ",{"type":173,"tag":195,"props":309,"children":311},{"className":310},[],[312],{"type":179,"value":313},"NODE_ENV=test node ./index",{"type":179,"value":315}," 的指令会报错的系统也能正常运行这种指令",{"type":173,"tag":182,"props":317,"children":319},{"id":318},"pnpm-pack",[320],{"type":179,"value":321},"pnpm pack",{"type":173,"tag":189,"props":323,"children":324},{},[325],{"type":179,"value":326},"将项目打包为 tarball 压缩包（.tgz）。打包的文件范围和 pnpm publish 一样。",{"type":173,"tag":182,"props":328,"children":330},{"id":329},"shared-workspace-lockfile",[331],{"type":179,"value":329},{"type":173,"tag":189,"props":333,"children":334},{},[335],{"type":179,"value":336},"在 workspace 间共享一份 package-lock 文件。这个配置开启后，所有子包的依赖都会被提升到 workspace 根目录，这带来了几个好处：",{"type":173,"tag":263,"props":338,"children":339},{},[340,345,350],{"type":173,"tag":267,"props":341,"children":342},{},[343],{"type":179,"value":344},"所有依赖都是单例的",{"type":173,"tag":267,"props":346,"children":347},{},[348],{"type":179,"value":349},"更快的安装速度（相比 pnpm install -r）",{"type":173,"tag":267,"props":351,"children":352},{},[353],{"type":179,"value":354},"修改的文件总数更少，利于 Code Review",{"type":173,"tag":182,"props":356,"children":357},{"id":305},[358],{"type":179,"value":305},{"type":173,"tag":189,"props":360,"children":361},{},[362],{"type":179,"value":363},"解析 package.json 中的 scripts 时，是否使用内置的 JS 实现的解析器，已支持跨平台语法。默认关闭。",{"type":173,"tag":182,"props":365,"children":367},{"id":366},"pnpmfilecjs",[368],{"type":179,"value":369},".pnpmfile.cjs",{"type":173,"tag":189,"props":371,"children":372},{},[373,374,379],{"type":179,"value":193},{"type":173,"tag":195,"props":375,"children":377},{"className":376},[],[378],{"type":179,"value":369},{"type":179,"value":380}," 文件提供的 readPackage 和 afterAllResolved 钩子函数可以分别介入依赖元信息解析（minifest）和依赖安装完准备输出 lock 文件的过程。",{"type":173,"tag":241,"props":382,"children":386},{"code":383,"language":384,"meta":166,"className":385,"style":166},"function readPackage(pkg, context) {\n  // Override the manifest of foo@1.x after downloading it from the registry\n  if (pkg.name === 'foo' && pkg.version.startsWith('1.')) {\n    // Replace bar@x.x.x with bar@2.0.0\n    pkg.dependencies = {\n      ...pkg.dependencies,\n      bar: '^2.0.0'\n    }\n    context.log('bar@1 => bar@2 in dependencies of foo')\n  }\n  \n  // This will change any packages using baz@x.x.x to use baz@1.2.3\n  if (pkg.dependencies.baz) {\n    pkg.dependencies.baz = '1.2.3';\n  }\n  \n  return pkg\n}\n\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\n","js","language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai",[387],{"type":173,"tag":195,"props":388,"children":389},{"__ignoreMap":166},[390,440,450,559,568,595,621,649,658,698,707,716,725,767,813,821,829,843,852,861,888,905,914,922],{"type":173,"tag":391,"props":392,"children":395},"span",{"class":393,"line":394},"line",1,[396,402,408,414,420,425,430,435],{"type":173,"tag":391,"props":397,"children":399},{"style":398},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[400],{"type":179,"value":401},"function",{"type":173,"tag":391,"props":403,"children":405},{"style":404},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[406],{"type":179,"value":407}," readPackage",{"type":173,"tag":391,"props":409,"children":411},{"style":410},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[412],{"type":179,"value":413},"(",{"type":173,"tag":391,"props":415,"children":417},{"style":416},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[418],{"type":179,"value":419},"pkg",{"type":173,"tag":391,"props":421,"children":422},{"style":410},[423],{"type":179,"value":424},",",{"type":173,"tag":391,"props":426,"children":427},{"style":416},[428],{"type":179,"value":429}," context",{"type":173,"tag":391,"props":431,"children":432},{"style":410},[433],{"type":179,"value":434},")",{"type":173,"tag":391,"props":436,"children":437},{"style":410},[438],{"type":179,"value":439}," {\n",{"type":173,"tag":391,"props":441,"children":443},{"class":393,"line":442},2,[444],{"type":173,"tag":391,"props":445,"children":447},{"style":446},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[448],{"type":179,"value":449},"  // Override the manifest of foo@1.x after downloading it from the registry\n",{"type":173,"tag":391,"props":451,"children":453},{"class":393,"line":452},3,[454,460,466,471,476,481,487,493,499,504,509,514,518,523,527,532,536,540,545,549,554],{"type":173,"tag":391,"props":455,"children":457},{"style":456},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[458],{"type":179,"value":459},"  if",{"type":173,"tag":391,"props":461,"children":463},{"style":462},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[464],{"type":179,"value":465}," (",{"type":173,"tag":391,"props":467,"children":469},{"style":468},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[470],{"type":179,"value":419},{"type":173,"tag":391,"props":472,"children":473},{"style":410},[474],{"type":179,"value":475},".",{"type":173,"tag":391,"props":477,"children":478},{"style":468},[479],{"type":179,"value":480},"name",{"type":173,"tag":391,"props":482,"children":484},{"style":483},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[485],{"type":179,"value":486}," ===",{"type":173,"tag":391,"props":488,"children":490},{"style":489},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[491],{"type":179,"value":492}," '",{"type":173,"tag":391,"props":494,"children":496},{"style":495},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[497],{"type":179,"value":498},"foo",{"type":173,"tag":391,"props":500,"children":501},{"style":489},[502],{"type":179,"value":503},"'",{"type":173,"tag":391,"props":505,"children":506},{"style":483},[507],{"type":179,"value":508}," &&",{"type":173,"tag":391,"props":510,"children":511},{"style":468},[512],{"type":179,"value":513}," pkg",{"type":173,"tag":391,"props":515,"children":516},{"style":410},[517],{"type":179,"value":475},{"type":173,"tag":391,"props":519,"children":520},{"style":468},[521],{"type":179,"value":522},"version",{"type":173,"tag":391,"props":524,"children":525},{"style":410},[526],{"type":179,"value":475},{"type":173,"tag":391,"props":528,"children":529},{"style":404},[530],{"type":179,"value":531},"startsWith",{"type":173,"tag":391,"props":533,"children":534},{"style":462},[535],{"type":179,"value":413},{"type":173,"tag":391,"props":537,"children":538},{"style":489},[539],{"type":179,"value":503},{"type":173,"tag":391,"props":541,"children":542},{"style":495},[543],{"type":179,"value":544},"1.",{"type":173,"tag":391,"props":546,"children":547},{"style":489},[548],{"type":179,"value":503},{"type":173,"tag":391,"props":550,"children":551},{"style":462},[552],{"type":179,"value":553},")) ",{"type":173,"tag":391,"props":555,"children":556},{"style":410},[557],{"type":179,"value":558},"{\n",{"type":173,"tag":391,"props":560,"children":562},{"class":393,"line":561},4,[563],{"type":173,"tag":391,"props":564,"children":565},{"style":446},[566],{"type":179,"value":567},"    // Replace bar@x.x.x with bar@2.0.0\n",{"type":173,"tag":391,"props":569,"children":571},{"class":393,"line":570},5,[572,577,581,586,591],{"type":173,"tag":391,"props":573,"children":574},{"style":468},[575],{"type":179,"value":576},"    pkg",{"type":173,"tag":391,"props":578,"children":579},{"style":410},[580],{"type":179,"value":475},{"type":173,"tag":391,"props":582,"children":583},{"style":468},[584],{"type":179,"value":585},"dependencies",{"type":173,"tag":391,"props":587,"children":588},{"style":483},[589],{"type":179,"value":590}," =",{"type":173,"tag":391,"props":592,"children":593},{"style":410},[594],{"type":179,"value":439},{"type":173,"tag":391,"props":596,"children":598},{"class":393,"line":597},6,[599,604,608,612,616],{"type":173,"tag":391,"props":600,"children":601},{"style":483},[602],{"type":179,"value":603},"      ...",{"type":173,"tag":391,"props":605,"children":606},{"style":468},[607],{"type":179,"value":419},{"type":173,"tag":391,"props":609,"children":610},{"style":410},[611],{"type":179,"value":475},{"type":173,"tag":391,"props":613,"children":614},{"style":468},[615],{"type":179,"value":585},{"type":173,"tag":391,"props":617,"children":618},{"style":410},[619],{"type":179,"value":620},",\n",{"type":173,"tag":391,"props":622,"children":624},{"class":393,"line":623},7,[625,630,635,639,644],{"type":173,"tag":391,"props":626,"children":627},{"style":462},[628],{"type":179,"value":629},"      bar",{"type":173,"tag":391,"props":631,"children":632},{"style":410},[633],{"type":179,"value":634},":",{"type":173,"tag":391,"props":636,"children":637},{"style":489},[638],{"type":179,"value":492},{"type":173,"tag":391,"props":640,"children":641},{"style":495},[642],{"type":179,"value":643},"^2.0.0",{"type":173,"tag":391,"props":645,"children":646},{"style":489},[647],{"type":179,"value":648},"'\n",{"type":173,"tag":391,"props":650,"children":652},{"class":393,"line":651},8,[653],{"type":173,"tag":391,"props":654,"children":655},{"style":410},[656],{"type":179,"value":657},"    }\n",{"type":173,"tag":391,"props":659,"children":661},{"class":393,"line":660},9,[662,667,671,676,680,684,689,693],{"type":173,"tag":391,"props":663,"children":664},{"style":468},[665],{"type":179,"value":666},"    context",{"type":173,"tag":391,"props":668,"children":669},{"style":410},[670],{"type":179,"value":475},{"type":173,"tag":391,"props":672,"children":673},{"style":404},[674],{"type":179,"value":675},"log",{"type":173,"tag":391,"props":677,"children":678},{"style":462},[679],{"type":179,"value":413},{"type":173,"tag":391,"props":681,"children":682},{"style":489},[683],{"type":179,"value":503},{"type":173,"tag":391,"props":685,"children":686},{"style":495},[687],{"type":179,"value":688},"bar@1 => bar@2 in dependencies of foo",{"type":173,"tag":391,"props":690,"children":691},{"style":489},[692],{"type":179,"value":503},{"type":173,"tag":391,"props":694,"children":695},{"style":462},[696],{"type":179,"value":697},")\n",{"type":173,"tag":391,"props":699,"children":701},{"class":393,"line":700},10,[702],{"type":173,"tag":391,"props":703,"children":704},{"style":410},[705],{"type":179,"value":706},"  }\n",{"type":173,"tag":391,"props":708,"children":710},{"class":393,"line":709},11,[711],{"type":173,"tag":391,"props":712,"children":713},{"style":462},[714],{"type":179,"value":715},"  \n",{"type":173,"tag":391,"props":717,"children":719},{"class":393,"line":718},12,[720],{"type":173,"tag":391,"props":721,"children":722},{"style":446},[723],{"type":179,"value":724},"  // This will change any packages using baz@x.x.x to use baz@1.2.3\n",{"type":173,"tag":391,"props":726,"children":728},{"class":393,"line":727},13,[729,733,737,741,745,749,753,758,763],{"type":173,"tag":391,"props":730,"children":731},{"style":456},[732],{"type":179,"value":459},{"type":173,"tag":391,"props":734,"children":735},{"style":462},[736],{"type":179,"value":465},{"type":173,"tag":391,"props":738,"children":739},{"style":468},[740],{"type":179,"value":419},{"type":173,"tag":391,"props":742,"children":743},{"style":410},[744],{"type":179,"value":475},{"type":173,"tag":391,"props":746,"children":747},{"style":468},[748],{"type":179,"value":585},{"type":173,"tag":391,"props":750,"children":751},{"style":410},[752],{"type":179,"value":475},{"type":173,"tag":391,"props":754,"children":755},{"style":468},[756],{"type":179,"value":757},"baz",{"type":173,"tag":391,"props":759,"children":760},{"style":462},[761],{"type":179,"value":762},") ",{"type":173,"tag":391,"props":764,"children":765},{"style":410},[766],{"type":179,"value":558},{"type":173,"tag":391,"props":768,"children":770},{"class":393,"line":769},14,[771,775,779,783,787,791,795,799,804,808],{"type":173,"tag":391,"props":772,"children":773},{"style":468},[774],{"type":179,"value":576},{"type":173,"tag":391,"props":776,"children":777},{"style":410},[778],{"type":179,"value":475},{"type":173,"tag":391,"props":780,"children":781},{"style":468},[782],{"type":179,"value":585},{"type":173,"tag":391,"props":784,"children":785},{"style":410},[786],{"type":179,"value":475},{"type":173,"tag":391,"props":788,"children":789},{"style":468},[790],{"type":179,"value":757},{"type":173,"tag":391,"props":792,"children":793},{"style":483},[794],{"type":179,"value":590},{"type":173,"tag":391,"props":796,"children":797},{"style":489},[798],{"type":179,"value":492},{"type":173,"tag":391,"props":800,"children":801},{"style":495},[802],{"type":179,"value":803},"1.2.3",{"type":173,"tag":391,"props":805,"children":806},{"style":489},[807],{"type":179,"value":503},{"type":173,"tag":391,"props":809,"children":810},{"style":410},[811],{"type":179,"value":812},";\n",{"type":173,"tag":391,"props":814,"children":816},{"class":393,"line":815},15,[817],{"type":173,"tag":391,"props":818,"children":819},{"style":410},[820],{"type":179,"value":706},{"type":173,"tag":391,"props":822,"children":824},{"class":393,"line":823},16,[825],{"type":173,"tag":391,"props":826,"children":827},{"style":462},[828],{"type":179,"value":715},{"type":173,"tag":391,"props":830,"children":832},{"class":393,"line":831},17,[833,838],{"type":173,"tag":391,"props":834,"children":835},{"style":456},[836],{"type":179,"value":837},"  return",{"type":173,"tag":391,"props":839,"children":840},{"style":468},[841],{"type":179,"value":842}," pkg\n",{"type":173,"tag":391,"props":844,"children":846},{"class":393,"line":845},18,[847],{"type":173,"tag":391,"props":848,"children":849},{"style":410},[850],{"type":179,"value":851},"}\n",{"type":173,"tag":391,"props":853,"children":855},{"class":393,"line":854},19,[856],{"type":173,"tag":391,"props":857,"children":858},{"emptyLinePlaceholder":165},[859],{"type":179,"value":860},"\n",{"type":173,"tag":391,"props":862,"children":864},{"class":393,"line":863},20,[865,871,875,880,884],{"type":173,"tag":391,"props":866,"children":868},{"style":867},"--shiki-light:#39ADB5;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[869],{"type":179,"value":870},"module",{"type":173,"tag":391,"props":872,"children":873},{"style":410},[874],{"type":179,"value":475},{"type":173,"tag":391,"props":876,"children":877},{"style":867},[878],{"type":179,"value":879},"exports",{"type":173,"tag":391,"props":881,"children":882},{"style":483},[883],{"type":179,"value":590},{"type":173,"tag":391,"props":885,"children":886},{"style":410},[887],{"type":179,"value":439},{"type":173,"tag":391,"props":889,"children":891},{"class":393,"line":890},21,[892,897,901],{"type":173,"tag":391,"props":893,"children":894},{"style":462},[895],{"type":179,"value":896},"  hooks",{"type":173,"tag":391,"props":898,"children":899},{"style":410},[900],{"type":179,"value":634},{"type":173,"tag":391,"props":902,"children":903},{"style":410},[904],{"type":179,"value":439},{"type":173,"tag":391,"props":906,"children":908},{"class":393,"line":907},22,[909],{"type":173,"tag":391,"props":910,"children":911},{"style":468},[912],{"type":179,"value":913},"    readPackage\n",{"type":173,"tag":391,"props":915,"children":917},{"class":393,"line":916},23,[918],{"type":173,"tag":391,"props":919,"children":920},{"style":410},[921],{"type":179,"value":706},{"type":173,"tag":391,"props":923,"children":925},{"class":393,"line":924},24,[926],{"type":173,"tag":391,"props":927,"children":928},{"style":410},[929],{"type":179,"value":851},{"type":173,"tag":189,"props":931,"children":932},{},[933,935],{"type":179,"value":934},"见：",{"type":173,"tag":936,"props":937,"children":941},"a",{"href":938,"rel":939},"https://pnpm.io/pnpmfile",[940],"nofollow",[942],{"type":179,"value":943},"pnpmfile",{"type":173,"tag":174,"props":945,"children":947},{"id":946},"原理",[948],{"type":179,"value":946},{"type":173,"tag":182,"props":950,"children":952},{"id":951},"显著的优点",[953],{"type":179,"value":954},"显著的优点？",{"type":173,"tag":263,"props":956,"children":957},{},[958,963,968,981],{"type":173,"tag":267,"props":959,"children":960},{},[961],{"type":179,"value":962},"省磁盘空间，使用软硬链接和符号链接节约空间。",{"type":173,"tag":267,"props":964,"children":965},{},[966],{"type":179,"value":967},"安装依赖快，因为处理链接要比处理文件快，并且每个包的解析、下载和写入磁盘这三个阶段是分离的。",{"type":173,"tag":267,"props":969,"children":970},{},[971,973,979],{"type":179,"value":972},"内建支持 monorepo，所有命令支持 ",{"type":173,"tag":195,"props":974,"children":976},{"className":975},[],[977],{"type":179,"value":978},"--filter",{"type":179,"value":980}," 过滤包。",{"type":173,"tag":267,"props":982,"children":983},{},[984],{"type":179,"value":985},"依赖严格，避免幽灵依赖和依赖分身问题。",{"type":173,"tag":182,"props":987,"children":989},{"id":988},"依赖的层次结构是怎样的",[990],{"type":179,"value":991},"依赖的层次结构是怎样的？",{"type":173,"tag":189,"props":993,"children":994},{},[995,997,1003,1005,1011,1013,1019,1021,1027,1029,1034,1036,1041,1043,1048,1050,1056,1058,1063,1065,1071],{"type":179,"value":996},"当项目文件读取 ",{"type":173,"tag":195,"props":998,"children":1000},{"className":999},[],[1001],{"type":179,"value":1002},"bar",{"type":179,"value":1004}," 时，直接读取 ",{"type":173,"tag":195,"props":1006,"children":1008},{"className":1007},[],[1009],{"type":179,"value":1010},"node_modules/bar",{"type":179,"value":1012},"，但它其实是 ",{"type":173,"tag":195,"props":1014,"children":1016},{"className":1015},[],[1017],{"type":179,"value":1018},".pnpm",{"type":179,"value":1020}," 文件夹下 ",{"type":173,"tag":195,"props":1022,"children":1024},{"className":1023},[],[1025],{"type":179,"value":1026},"bar/node_modules/bar",{"type":179,"value":1028}," 的一个符号链接。也就是说，他的真实的地址在 ",{"type":173,"tag":195,"props":1030,"children":1032},{"className":1031},[],[1033],{"type":179,"value":1018},{"type":179,"value":1035}," 文件夹下。这样一来，当 ",{"type":173,"tag":195,"props":1037,"children":1039},{"className":1038},[],[1040],{"type":179,"value":1002},{"type":179,"value":1042}," 读取它的依赖的时候（项目的依赖的依赖），会在 ",{"type":173,"tag":195,"props":1044,"children":1046},{"className":1045},[],[1047],{"type":179,"value":1002},{"type":179,"value":1049}," 的上层目录即 ",{"type":173,"tag":195,"props":1051,"children":1053},{"className":1052},[],[1054],{"type":179,"value":1055},"bar/node_modules",{"type":179,"value":1057}," 找到 ",{"type":173,"tag":195,"props":1059,"children":1061},{"className":1060},[],[1062],{"type":179,"value":498},{"type":179,"value":1064}," 这个依赖。项目文件没法读取 ",{"type":173,"tag":195,"props":1066,"children":1068},{"className":1067},[],[1069],{"type":179,"value":1070},"bar/node_modules/foo",{"type":179,"value":1072}," 所以避免了幽灵依赖问题。",{"type":173,"tag":189,"props":1074,"children":1075},{},[1076,1081,1083,1089,1091,1096,1098,1104],{"type":173,"tag":195,"props":1077,"children":1079},{"className":1078},[],[1080],{"type":179,"value":1070},{"type":179,"value":1082}," 要怎么找到它的依赖呢？它的真实地址在项目 ·（和官网的图有出入），所以 foo 也只能读取它自己的子依赖，即 ",{"type":173,"tag":195,"props":1084,"children":1086},{"className":1085},[],[1087],{"type":179,"value":1088},"node_modules/.pnpm/foo/node_modules",{"type":179,"value":1090},"。如果有依赖依赖了同一份（同一版本）的 ",{"type":173,"tag":195,"props":1092,"children":1094},{"className":1093},[],[1095],{"type":179,"value":498},{"type":179,"value":1097},"，那么它们的真实地址都是一样的 ",{"type":173,"tag":195,"props":1099,"children":1101},{"className":1100},[],[1102],{"type":179,"value":1103},"node_modules/.pnpm/foo/node_modules/foo",{"type":179,"value":1105},"，这样就避免依赖分身问题。",{"type":173,"tag":189,"props":1107,"children":1108},{},[1109],{"type":173,"tag":1110,"props":1111,"children":1114},"img",{"alt":1112,"src":1113},"Modules Mapping in pnpm","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220317192927.png",[],{"type":173,"tag":189,"props":1116,"children":1117},{},[1118,1119,1126,1128],{"type":179,"value":934},{"type":173,"tag":936,"props":1120,"children":1123},{"href":1121,"rel":1122},"https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way",[940],[1124],{"type":179,"value":1125},"Flat node_modules is not the only way | @pnpm",{"type":179,"value":1127},"、",{"type":173,"tag":936,"props":1129,"children":1132},{"href":1130,"rel":1131},"https://pnpm.io/symlinked-node-modules-structure",[940],[1133],{"type":179,"value":1134},"Symlinked node_modules structure | @pnpm",{"type":173,"tag":182,"props":1136,"children":1138},{"id":1137},"如何处理同级依赖",[1139],{"type":179,"value":1140},"如何处理同级依赖？",{"type":173,"tag":189,"props":1142,"children":1143},{},[1144,1146,1152,1154,1160,1162,1168,1170,1176,1178,1184,1185,1191],{"type":179,"value":1145},"当项目的两个包 A、B 依赖依赖了同一版本的 C，但是却安装了不同版本的 C 的同级依赖 D@1.0 和 D@1.1，这时，A 依赖的 C 的真实地址是 ",{"type":173,"tag":195,"props":1147,"children":1149},{"className":1148},[],[1150],{"type":179,"value":1151},".pnpm/C_D@1.0/node_modules/C",{"type":179,"value":1153},"，B 依赖的 C 的真实地址是 ",{"type":173,"tag":195,"props":1155,"children":1157},{"className":1156},[],[1158],{"type":179,"value":1159},".pnpm/C_D@1.1/node_modules/C",{"type":179,"value":1161},"。这样一来，两个 C 在读取其同级依赖时，分别读取了 ",{"type":173,"tag":195,"props":1163,"children":1165},{"className":1164},[],[1166],{"type":179,"value":1167},".pnpm/C_D@1.0/node_modules/D",{"type":179,"value":1169}," 和 ",{"type":173,"tag":195,"props":1171,"children":1173},{"className":1172},[],[1174],{"type":179,"value":1175},".pnpm/C_D@1.1/node_modules/D@1.0",{"type":179,"value":1177},"，分别对应真实地址 ",{"type":173,"tag":195,"props":1179,"children":1181},{"className":1180},[],[1182],{"type":179,"value":1183},".pnpm/D@1.0/node_modules/D",{"type":179,"value":1169},{"type":173,"tag":195,"props":1186,"children":1188},{"className":1187},[],[1189],{"type":179,"value":1190},".pnpm/D@1.1/node_modules/D",{"type":179,"value":1192},"。",{"type":173,"tag":189,"props":1194,"children":1195},{},[1196,1198,1204,1205,1211,1213,1219,1220,1225,1227,1233],{"type":179,"value":1197},"当同级依赖的深度增加时，层级结构也随之变得复杂。如果某个依赖 A 依赖了同一个 B，但是 B 子依赖 C 的版本不同（C@1.0 和 C@1.1），这样就创造出了指数级增长的软链数量。为了保证 B 能分别访问两个 C，B 的符号链接的被链接地址会有 ",{"type":173,"tag":195,"props":1199,"children":1201},{"className":1200},[],[1202],{"type":179,"value":1203},".pnpm/B_C@1.0/node_modules/B",{"type":179,"value":1169},{"type":173,"tag":195,"props":1206,"children":1208},{"className":1207},[],[1209],{"type":179,"value":1210},".pnpm/B_C@1.1/node_modules/B",{"type":179,"value":1212},"，而为此，A 的被链接地址也会有两个，",{"type":173,"tag":195,"props":1214,"children":1216},{"className":1215},[],[1217],{"type":179,"value":1218},".pnpm/A_C@1.0/node_modules/A",{"type":179,"value":1169},{"type":173,"tag":195,"props":1221,"children":1223},{"className":1222},[],[1224],{"type":179,"value":1218},{"type":179,"value":1226},"。从不同的 A 的被链接地址的上级目录 ",{"type":173,"tag":195,"props":1228,"children":1230},{"className":1229},[],[1231],{"type":179,"value":1232},"node_modules",{"type":179,"value":1234}," 可以读取到不同的 B 的被链目录，从不同的 B 可以读取到不同的 C。",{"type":173,"tag":241,"props":1236,"children":1239},{"code":1237,"language":179,"meta":166,"className":1238},"node_modules\n└── .pnpm\n    ├── a@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.0.0/node_modules/b\n    ├── a@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.1.0/node_modules/b\n    ├── b@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.0.0/node_modules/c\n    ├── b@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.1.0/node_modules/c\n    ├── c@1.0.0\n    ├── c@1.1.0\n",[245],[1240],{"type":173,"tag":195,"props":1241,"children":1242},{"__ignoreMap":166},[1243],{"type":179,"value":1237},{"type":173,"tag":189,"props":1245,"children":1246},{},[1247,1248],{"type":179,"value":934},{"type":173,"tag":936,"props":1249,"children":1252},{"href":1250,"rel":1251},"https://pnpm.io/how-peers-are-resolved",[940],[1253],{"type":179,"value":1254},"How peers are resolved | @pnpm",{"type":173,"tag":182,"props":1256,"children":1258},{"id":1257},"怎样兼容-nodejs-模块加载顺序",[1259],{"type":179,"value":1260},"怎样兼容 NodeJS 模块加载顺序？",{"type":173,"tag":189,"props":1262,"children":1263},{},[1264],{"type":179,"value":1265},"不论系统自带的模块，NodeJS 加载模块的顺序是这样的：",{"type":173,"tag":263,"props":1267,"children":1268},{},[1269,1274,1279,1284],{"type":173,"tag":267,"props":1270,"children":1271},{},[1272],{"type":179,"value":1273},"读取本文件夹中 node_modules 中对应名字的文件夹的 package.json，并寻找 main 字段对应的路径",{"type":173,"tag":267,"props":1275,"children":1276},{},[1277],{"type":179,"value":1278},"读取本文件夹中 node_modules 中对应名字的 js 文件",{"type":173,"tag":267,"props":1280,"children":1281},{},[1282],{"type":179,"value":1283},"读取本文件夹中 node_modules 中对应名字文件夹中的 index.js 文件",{"type":173,"tag":267,"props":1285,"children":1286},{},[1287],{"type":179,"value":1288},"跳出本文件夹，继续前三个步骤",{"type":173,"tag":189,"props":1290,"children":1291},{},[1292,1294,1299,1301,1307,1309,1315,1317,1322,1324,1330,1332,1338],{"type":179,"value":1293},"因为项目 ",{"type":173,"tag":195,"props":1295,"children":1297},{"className":1296},[],[1298],{"type":179,"value":1010},{"type":179,"value":1300}," 是 ",{"type":173,"tag":195,"props":1302,"children":1304},{"className":1303},[],[1305],{"type":179,"value":1306},".pnpm/bar/node_modules/bar",{"type":179,"value":1308}," 的符号链接，所以项目文件可以直接读取 ",{"type":173,"tag":195,"props":1310,"children":1312},{"className":1311},[],[1313],{"type":179,"value":1314},"node_modules/bar/x.js",{"type":179,"value":1316},"。同时，如果 ",{"type":173,"tag":195,"props":1318,"children":1320},{"className":1319},[],[1321],{"type":179,"value":1314},{"type":179,"value":1323}," 需要加载 ",{"type":173,"tag":195,"props":1325,"children":1327},{"className":1326},[],[1328],{"type":179,"value":1329},"foo/x.js",{"type":179,"value":1331},"，那么在上述步骤的第 4 步，就能找到 ",{"type":173,"tag":195,"props":1333,"children":1335},{"className":1334},[],[1336],{"type":179,"value":1337},".pnpm/bar/node_modules/foo/x.js",{"type":179,"value":1339}," 文件。",{"type":173,"tag":182,"props":1341,"children":1343},{"id":1342},"为什么其模块层次只是比较严格的semistrict",[1344],{"type":179,"value":1345},"为什么其模块层次只是“比较严格的”（semistrict）？",{"type":173,"tag":189,"props":1347,"children":1348},{},[1349],{"type":179,"value":1350},"由 NodeJS 模块加载规则可知，在 pnpm 创造的依赖层次下，一个依赖的子依赖间仍有相互访问的能力。",{"type":173,"tag":182,"props":1352,"children":1354},{"id":1353},"为什么能节约磁盘空间",[1355],{"type":179,"value":1356},"为什么能节约磁盘空间？",{"type":173,"tag":189,"props":1358,"children":1359},{},[1360,1362,1368,1370,1376,1378,1384],{"type":179,"value":1361},"由 pnpm 创造的 node_modules 层级结构可以知道，所有依赖的符号链接的真实地址都在 ",{"type":173,"tag":195,"props":1363,"children":1365},{"className":1364},[],[1366],{"type":179,"value":1367},".pnpm/package-name/node_modules/package-name",{"type":179,"value":1369}," 这个文件夹中。这种文件夹会通过硬链接的形式链接到 ",{"type":173,"tag":195,"props":1371,"children":1373},{"className":1372},[],[1374],{"type":179,"value":1375},"user-document/.pnpm-store",{"type":179,"value":1377}," 中，所以相同的包只会存一份，也就是 ",{"type":173,"tag":195,"props":1379,"children":1381},{"className":1380},[],[1382],{"type":179,"value":1383},".pnpm-store/package-name",{"type":179,"value":1192},{"type":173,"tag":182,"props":1386,"children":1388},{"id":1387},"软硬链接有什么问题",[1389],{"type":179,"value":1390},"软硬链接有什么问题？",{"type":173,"tag":1392,"props":1393,"children":1394},"ul",{},[1395,1400,1405,1410],{"type":173,"tag":267,"props":1396,"children":1397},{},[1398],{"type":179,"value":1399},"特定的软链结构会导致某些应用出现死循环",{"type":173,"tag":267,"props":1401,"children":1402},{},[1403],{"type":179,"value":1404},"硬链接是同一份文件，不便调试",{"type":173,"tag":267,"props":1406,"children":1407},{},[1408],{"type":179,"value":1409},"软链接在非 SSD 上的读写会有性能损耗",{"type":173,"tag":267,"props":1411,"children":1412},{},[1413],{"type":179,"value":1414},"pnpm 创造的 node_modules 层级结构会破坏某些依赖依赖了相对路径的依赖的逻辑",{"type":173,"tag":189,"props":1416,"children":1417},{},[1418,1419],{"type":179,"value":934},{"type":173,"tag":936,"props":1420,"children":1423},{"href":1421,"rel":1422},"https://zhuanlan.zhihu.com/p/553804414",[940],[1424],{"type":179,"value":1425},"精读 pnpm",{"type":173,"tag":174,"props":1427,"children":1429},{"id":1428},"常见问题",[1430],{"type":179,"value":1428},{"type":173,"tag":182,"props":1432,"children":1434},{"id":1433},"pnpm-找不到全局路径的解决方法",[1435],{"type":179,"value":1436},"PNPM 找不到全局路径的解决方法？",{"type":173,"tag":189,"props":1438,"children":1439},{},[1440],{"type":179,"value":1441},"尽管设置了全局变量，也重新安装了最新版本 PNPM，也执行了 pnpm setup，却仍然报错找不到全局路径的临时解决方案：",{"type":173,"tag":241,"props":1443,"children":1447},{"code":1444,"language":1445,"meta":166,"className":1446,"style":166},"$PNPM_HOME=\"\u003Cpath>\" | pnpm install -g xxx\n","powershell","language-powershell shiki shiki-themes material-theme-lighter github-light github-dark monokai",[1448],{"type":173,"tag":195,"props":1449,"children":1450},{"__ignoreMap":166},[1451],{"type":173,"tag":391,"props":1452,"children":1453},{"class":393,"line":394},[1454,1459,1464,1469,1474,1479,1483,1488,1493,1498],{"type":173,"tag":391,"props":1455,"children":1456},{"style":410},[1457],{"type":179,"value":1458},"$",{"type":173,"tag":391,"props":1460,"children":1461},{"style":468},[1462],{"type":179,"value":1463},"PNPM_HOME",{"type":173,"tag":391,"props":1465,"children":1466},{"style":483},[1467],{"type":179,"value":1468},"=",{"type":173,"tag":391,"props":1470,"children":1471},{"style":489},[1472],{"type":179,"value":1473},"\"",{"type":173,"tag":391,"props":1475,"children":1476},{"style":495},[1477],{"type":179,"value":1478},"\u003Cpath>",{"type":173,"tag":391,"props":1480,"children":1481},{"style":489},[1482],{"type":179,"value":1473},{"type":173,"tag":391,"props":1484,"children":1485},{"style":483},[1486],{"type":179,"value":1487}," |",{"type":173,"tag":391,"props":1489,"children":1490},{"style":468},[1491],{"type":179,"value":1492}," pnpm install ",{"type":173,"tag":391,"props":1494,"children":1495},{"style":483},[1496],{"type":179,"value":1497},"-",{"type":173,"tag":391,"props":1499,"children":1500},{"style":468},[1501],{"type":179,"value":1502},"g xxx\n",{"type":173,"tag":182,"props":1504,"children":1506},{"id":1505},"pnpm-速度变慢了",[1507],{"type":179,"value":1508},"PNPM 速度变慢了？",{"type":173,"tag":189,"props":1510,"children":1511},{},[1512],{"type":179,"value":1513},"今天逛官网时，偶然发现 Readme 中的 benchmark 过时了。它说“要比 Yarn Classic 和 npm “快两倍以上，但是从 benchmark 来看，他要比 Yarn 和 npm 慢了不少。以后启用 NodeJS 20 以上时，如果问题得不到改善，我应该会重新选择 npm 而不是 pnpm，鉴于幽灵依赖和依赖分身带来的问题是可排查可解决的，而速度是解决不了的问题。",{"type":173,"tag":189,"props":1515,"children":1516},{},[1517],{"type":173,"tag":1110,"props":1518,"children":1521},{"alt":1519,"src":1520},"pnpm vs npm vs yarn benchmark","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20230605235736.png",[],{"type":173,"tag":189,"props":1523,"children":1524},{},[1525,1527],{"type":179,"value":1526},"相关见：",{"type":173,"tag":936,"props":1528,"children":1531},{"href":1529,"rel":1530},"https://github.com/pnpm/pnpm/issues/6447",[940],[1532],{"type":179,"value":1533},"pnpm seems to be consistently slower than yarn (classic)",{"type":173,"tag":182,"props":1535,"children":1537},{"id":1536},"和-bun-在安装速度上的对比",[1538],{"type":179,"value":1539},"和 Bun 在安装速度上的对比？",{"type":173,"tag":189,"props":1541,"children":1542},{},[1543],{"type":179,"value":1544},"有锁文件、本地缓存，无 node_modules 的情况下，bun 要比 pnpm 安装至少快 3 倍。",{"type":173,"tag":1392,"props":1546,"children":1547},{},[1548,1553],{"type":173,"tag":267,"props":1549,"children":1550},{},[1551],{"type":179,"value":1552},"一个原因是 pnpm、yarn 等工具会在安装时请求最新的 metadata，而 bun 使用的 metadata 源于本地缓存的 metadata。",{"type":173,"tag":267,"props":1554,"children":1555},{},[1556],{"type":179,"value":1557},"另一个原因是 pnpm 在创建 node_modules 层次结构是使用了大量的 symlink，相比其他包管理工具仅使用复制或 hardlink 有更多系统调用。",{"type":173,"tag":189,"props":1559,"children":1560},{},[1561],{"type":179,"value":1562},"所以如果想使 pnpm 更快的安装，可以使用 prefer-offline 选项，以及，node-linker=hoisted 也许有用。",{"type":173,"tag":189,"props":1564,"children":1565},{},[1566,1567],{"type":179,"value":934},{"type":173,"tag":936,"props":1568,"children":1571},{"href":1569,"rel":1570},"https://github.com/pnpm/pnpm/issues/7391",[940],[1572],{"type":179,"value":1573},"Bun.sh-like Module Resolution",{"type":173,"tag":182,"props":1575,"children":1577},{"id":1576},"关于-v8-版本的变化",[1578],{"type":179,"value":1579},"关于 V8 版本的变化？",{"type":173,"tag":1392,"props":1581,"children":1582},{},[1583,1602,1618,1629,1634,1639,1644],{"type":173,"tag":267,"props":1584,"children":1585},{},[1586,1592,1594,1600],{"type":173,"tag":195,"props":1587,"children":1589},{"className":1588},[],[1590],{"type":179,"value":1591},"resolve-peers-from-workspace-root",{"type":179,"value":1593}," is ",{"type":173,"tag":195,"props":1595,"children":1597},{"className":1596},[],[1598],{"type":179,"value":1599},"true",{"type":179,"value":1601}," by default",{"type":173,"tag":267,"props":1603,"children":1604},{},[1605,1611,1612,1617],{"type":173,"tag":195,"props":1606,"children":1608},{"className":1607},[],[1609],{"type":179,"value":1610},"auto-install-peers",{"type":179,"value":1593},{"type":173,"tag":195,"props":1613,"children":1615},{"className":1614},[],[1616],{"type":179,"value":1599},{"type":179,"value":1601},{"type":173,"tag":267,"props":1619,"children":1620},{},[1621,1627],{"type":173,"tag":195,"props":1622,"children":1624},{"className":1623},[],[1625],{"type":179,"value":1626},"dedupe-peer-dependents",{"type":179,"value":1628}," set to true by default",{"type":173,"tag":267,"props":1630,"children":1631},{},[1632],{"type":179,"value":1633},"停止 NodeJS 14 的支持",{"type":173,"tag":267,"props":1635,"children":1636},{},[1637],{"type":179,"value":1638},"lockfile v6 by default",{"type":173,"tag":267,"props":1640,"children":1641},{},[1642],{"type":179,"value":1643},"resolution mode（prebundle、time-based、lowest-direct）default set to lowest-based，需要注意手动升级，尤其是在没有锁文件的情况",{"type":173,"tag":267,"props":1645,"children":1646},{},[1647,1649,1655],{"type":179,"value":1648},"only deply ",{"type":173,"tag":195,"props":1650,"children":1652},{"className":1651},[],[1653],{"type":179,"value":1654},"files",{"type":179,"value":1656}," field when the field exist",{"type":173,"tag":182,"props":1658,"children":1660},{"id":1659},"pnp-模式下的依赖提升设置",[1661],{"type":179,"value":1662},"PnP 模式下的依赖提升设置？",{"type":173,"tag":189,"props":1664,"children":1665},{},[1666,1668,1674],{"type":179,"value":1667},"默认的 node_modules 依赖的层级处于严格和不严格之间的水平（semi-strict）。使用最严格的设置需要打开 PnP 模式，因为在 monorepo 中 PnP 模式中，就算开启了 ",{"type":173,"tag":195,"props":1669,"children":1671},{"className":1670},[],[1672],{"type":179,"value":1673},"hoist=false",{"type":179,"value":1675}," 也不会禁用 workspace root 的依赖",{"type":173,"tag":241,"props":1677,"children":1679},{"code":1678},"node-linker=pnp\nsymlink=false\n",[1680],{"type":173,"tag":195,"props":1681,"children":1682},{"__ignoreMap":166},[1683],{"type":179,"value":1678},{"type":173,"tag":189,"props":1685,"children":1686},{},[1687,1688],{"type":179,"value":934},{"type":173,"tag":936,"props":1689,"children":1692},{"href":1690,"rel":1691},"https://pnpm.io/blog/2020/10/17/node-modules-configuration-options-with-pnpm",[940],[1693],{"type":179,"value":1694},"Node-Modules configuration options with pnpm",{"type":173,"tag":182,"props":1696,"children":1698},{"id":1697},"在-windows-dev-driver-上可能会碰到的问题",[1699],{"type":179,"value":1700},"在 Windows Dev Driver 上可能会碰到的问题？",{"type":173,"tag":189,"props":1702,"children":1703},{},[1704],{"type":179,"value":1705},"2024 年初 pnpm 实现了 Dev Driver 上的 Copy on Write 功能，但可能会碰到变慢的问题。",{"type":173,"tag":189,"props":1707,"children":1708},{},[1709,1710],{"type":179,"value":934},{"type":173,"tag":936,"props":1711,"children":1714},{"href":1712,"rel":1713},"https://github.com/pnpm/pnpm/issues/7547",[940],[1715],{"type":179,"value":1716},"pnpm lately slow and pnpx stuck at installing deps using executable package",{"type":173,"tag":182,"props":1718,"children":1720},{"id":1719},"下载多份二进制代码的问题",[1721],{"type":179,"value":1722},"下载多份二进制代码的问题？",{"type":173,"tag":189,"props":1724,"children":1725},{},[1726],{"type":179,"value":1727},"目前应该是所有包管理器都有这种问题，但是不知道怎么解决。",{"type":173,"tag":189,"props":1729,"children":1730},{},[1731],{"type":173,"tag":1110,"props":1732,"children":1735},{"alt":1733,"src":1734},"sass-embedded 下载了多份二进制代码","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202503200412724.png",[],{"type":173,"tag":1737,"props":1738,"children":1739},"style",{},[1740],{"type":179,"value":1741},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":442,"depth":442,"links":1743},[1744,1745,1746],{"id":176,"depth":442,"text":180},{"id":946,"depth":442,"text":946},{"id":1428,"depth":442,"text":1428},"markdown","content:6.maps:_workflow:package-manager:pnpm.md","content","6.maps/_workflow/package-manager/pnpm.md","6.maps/_workflow/package-manager/pnpm","md",[1754,1758],{"_path":1755,"title":1756,"description":1757},"/maps/_workflow/package-manager/npm","NPM","NPM 包管理器完整指南，包含 package.json 配置、镜像源管理、依赖安装等核心功能的详细说明。",{"_path":1759,"title":1760,"description":1761},"/maps/_workflow/packer","打包工具","前端打包工具全景图，涵盖 Vite、Webpack、Rollup、tsup、Unbuild、Rome 等主流工具的特性对比和使用说明。",1754391514213]