[{"data":1,"prerenderedAt":1753},["ShallowReactive",2],{"navigation":3,"/maps/_workflow/package-manager/pnpm":161,"/maps/_workflow/package-manager/pnpm-surround":1744},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":168,"body":169,"_type":1738,"_id":1739,"_source":1740,"_file":1741,"_stem":1742,"_extension":1743},"/maps/_workflow/package-manager/pnpm","package-manager",false,true,"","pnpm","pnpm 是一个快速、省空间的包管理器",{"type":170,"children":171,"toc":1733},"root",[172,181,188,202,208,218,223,229,240,251,257,262,316,322,327,332,337,355,361,372,921,935,940,946,977,983,1064,1097,1106,1126,1132,1184,1226,1235,1246,1252,1257,1280,1331,1337,1342,1348,1376,1382,1406,1417,1422,1428,1433,1494,1500,1505,1513,1525,1531,1536,1549,1554,1565,1571,1648,1654,1667,1675,1686,1692,1697,1708,1714,1719,1727],{"type":173,"tag":174,"props":175,"children":177},"element","h2",{"id":176},"api-细节和配置项",[178],{"type":179,"value":180},"text","API 细节和配置项",{"type":173,"tag":182,"props":183,"children":185},"h4",{"id":184},"pnpm-import",[186],{"type":179,"value":187},"pnpm import",{"type":173,"tag":189,"props":190,"children":191},"p",{},[192,194,200],{"type":179,"value":193},"使用 ",{"type":173,"tag":195,"props":196,"children":198},"code",{"className":197},[],[199],{"type":179,"value":187},{"type":179,"value":201}," 可以将 package-lock、npm-shrinkwrap 和 yarn.lock 转换为 pnpm-lock 文件。",{"type":173,"tag":182,"props":203,"children":205},{"id":204},"pnpm-fetch",[206],{"type":179,"value":207},"pnpm fetch",{"type":173,"tag":189,"props":209,"children":210},{},[211,216],{"type":173,"tag":195,"props":212,"children":214},{"className":213},[],[215],{"type":179,"value":207},{"type":179,"value":217}," 它跳过了 package.json 文件，允许项目在只有 pnpm-lock 文件的情况下创建 .pnpm 虚拟仓库。这有利于 docker 构建，因为 package.json 经常因为非依赖变化的改动而改动，导致 docker layer 失效。",{"type":173,"tag":189,"props":219,"children":220},{},[221],{"type":179,"value":222},"相比 yarn 和 npm，在脱离 package.json 的情况下，单靠 package-lock（或 yarn-lock），yarn 和 npm 没有办法确定依赖版本，因为其 package-lock 中，依赖的版本号不是固定版本号。",{"type":173,"tag":182,"props":224,"children":226},{"id":225},"pnpm-why",[227],{"type":179,"value":228},"pnpm why",{"type":173,"tag":189,"props":230,"children":231},{},[232,233,238],{"type":179,"value":193},{"type":173,"tag":195,"props":234,"children":236},{"className":235},[],[237],{"type":179,"value":228},{"type":179,"value":239}," 可以列出项目内依赖了某个依赖的依赖，比如说找到项目内使用了 lodash 的包。",{"type":173,"tag":241,"props":242,"children":246},"pre",{"code":243,"language":179,"meta":166,"className":244},"dependencies:\nelement-plus 2.2.20\n├── lodash 4.17.21\n└─┬ lodash-unified 1.0.3\n  └── lodash 4.17.21 peer\n...\n",[245],"language-text",[247],{"type":173,"tag":195,"props":248,"children":249},{"__ignoreMap":166},[250],{"type":179,"value":243},{"type":173,"tag":182,"props":252,"children":254},{"id":253},"pnpm-run",[255],{"type":179,"value":256},"pnpm run",{"type":173,"tag":189,"props":258,"children":259},{},[260],{"type":179,"value":261},"与其它包管理器的一些区别：",{"type":173,"tag":263,"props":264,"children":265},"ol",{},[266,292,297],{"type":173,"tag":267,"props":268,"children":269},"li",{},[270,276,278,284,286],{"type":173,"tag":195,"props":271,"children":273},{"className":272},[],[274],{"type":179,"value":275},"pnpm run script-name",{"type":179,"value":277},"，如果 ",{"type":173,"tag":195,"props":279,"children":281},{"className":280},[],[282],{"type":179,"value":283},"script-name",{"type":179,"value":285}," 没有和 pnpm 内置指令冲突，则可以省略 ",{"type":173,"tag":195,"props":287,"children":289},{"className":288},[],[290],{"type":179,"value":291},"run",{"type":173,"tag":267,"props":293,"children":294},{},[295],{"type":179,"value":296},"run 指令默认不会执行 pre 和 post 钩子函数，因为 pnpm 认为这使任务流更难理解",{"type":173,"tag":267,"props":298,"children":299},{},[300,306,308,314],{"type":173,"tag":195,"props":301,"children":303},{"className":302},[],[304],{"type":179,"value":305},"shell-emulator",{"type":179,"value":307}," 选项启用后，将使用 JS 解析指令，这使得在不兼容 POSIX 的环境执行类似 ",{"type":173,"tag":195,"props":309,"children":311},{"className":310},[],[312],{"type":179,"value":313},"NODE_ENV=test node ./index",{"type":179,"value":315}," 的指令会报错的系统也能正常运行这种指令",{"type":173,"tag":182,"props":317,"children":319},{"id":318},"pnpm-pack",[320],{"type":179,"value":321},"pnpm pack",{"type":173,"tag":189,"props":323,"children":324},{},[325],{"type":179,"value":326},"将项目打包为 tarball 压缩包（.tgz）。打包的文件范围和 pnpm publish 一样。",{"type":173,"tag":182,"props":328,"children":330},{"id":329},"shared-workspace-lockfile",[331],{"type":179,"value":329},{"type":173,"tag":189,"props":333,"children":334},{},[335],{"type":179,"value":336},"在 workspace 间共享一份 package-lock 文件。这个配置开启后，所有子包的依赖都会被提升到 workspace 根目录，这带来了几个好处：",{"type":173,"tag":263,"props":338,"children":339},{},[340,345,350],{"type":173,"tag":267,"props":341,"children":342},{},[343],{"type":179,"value":344},"所有依赖都是单例的",{"type":173,"tag":267,"props":346,"children":347},{},[348],{"type":179,"value":349},"更快的安装速度（相比 pnpm install -r）",{"type":173,"tag":267,"props":351,"children":352},{},[353],{"type":179,"value":354},"修改的文件总数更少，利于 Code Review",{"type":173,"tag":182,"props":356,"children":358},{"id":357},"pnpmfilecjs",[359],{"type":179,"value":360},".pnpmfile.cjs",{"type":173,"tag":189,"props":362,"children":363},{},[364,365,370],{"type":179,"value":193},{"type":173,"tag":195,"props":366,"children":368},{"className":367},[],[369],{"type":179,"value":360},{"type":179,"value":371}," 文件提供的 readPackage 和 afterAllResolved 钩子函数可以分别介入依赖元信息解析（minifest）和依赖安装完准备输出 lock 文件的过程。",{"type":173,"tag":241,"props":373,"children":377},{"code":374,"language":375,"meta":166,"className":376,"style":166},"function readPackage(pkg, context) {\n  // Override the manifest of foo@1.x after downloading it from the registry\n  if (pkg.name === 'foo' && pkg.version.startsWith('1.')) {\n    // Replace bar@x.x.x with bar@2.0.0\n    pkg.dependencies = {\n      ...pkg.dependencies,\n      bar: '^2.0.0'\n    }\n    context.log('bar@1 => bar@2 in dependencies of foo')\n  }\n  \n  // This will change any packages using baz@x.x.x to use baz@1.2.3\n  if (pkg.dependencies.baz) {\n    pkg.dependencies.baz = '1.2.3';\n  }\n  \n  return pkg\n}\n\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\n","js","language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai",[378],{"type":173,"tag":195,"props":379,"children":380},{"__ignoreMap":166},[381,431,441,550,559,586,612,640,649,689,698,707,716,758,804,812,820,834,843,852,879,896,905,913],{"type":173,"tag":382,"props":383,"children":386},"span",{"class":384,"line":385},"line",1,[387,393,399,405,411,416,421,426],{"type":173,"tag":382,"props":388,"children":390},{"style":389},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[391],{"type":179,"value":392},"function",{"type":173,"tag":382,"props":394,"children":396},{"style":395},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[397],{"type":179,"value":398}," readPackage",{"type":173,"tag":382,"props":400,"children":402},{"style":401},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[403],{"type":179,"value":404},"(",{"type":173,"tag":382,"props":406,"children":408},{"style":407},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[409],{"type":179,"value":410},"pkg",{"type":173,"tag":382,"props":412,"children":413},{"style":401},[414],{"type":179,"value":415},",",{"type":173,"tag":382,"props":417,"children":418},{"style":407},[419],{"type":179,"value":420}," context",{"type":173,"tag":382,"props":422,"children":423},{"style":401},[424],{"type":179,"value":425},")",{"type":173,"tag":382,"props":427,"children":428},{"style":401},[429],{"type":179,"value":430}," {\n",{"type":173,"tag":382,"props":432,"children":434},{"class":384,"line":433},2,[435],{"type":173,"tag":382,"props":436,"children":438},{"style":437},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[439],{"type":179,"value":440},"  // Override the manifest of foo@1.x after downloading it from the registry\n",{"type":173,"tag":382,"props":442,"children":444},{"class":384,"line":443},3,[445,451,457,462,467,472,478,484,490,495,500,505,509,514,518,523,527,531,536,540,545],{"type":173,"tag":382,"props":446,"children":448},{"style":447},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[449],{"type":179,"value":450},"  if",{"type":173,"tag":382,"props":452,"children":454},{"style":453},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[455],{"type":179,"value":456}," (",{"type":173,"tag":382,"props":458,"children":460},{"style":459},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[461],{"type":179,"value":410},{"type":173,"tag":382,"props":463,"children":464},{"style":401},[465],{"type":179,"value":466},".",{"type":173,"tag":382,"props":468,"children":469},{"style":459},[470],{"type":179,"value":471},"name",{"type":173,"tag":382,"props":473,"children":475},{"style":474},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[476],{"type":179,"value":477}," ===",{"type":173,"tag":382,"props":479,"children":481},{"style":480},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[482],{"type":179,"value":483}," '",{"type":173,"tag":382,"props":485,"children":487},{"style":486},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[488],{"type":179,"value":489},"foo",{"type":173,"tag":382,"props":491,"children":492},{"style":480},[493],{"type":179,"value":494},"'",{"type":173,"tag":382,"props":496,"children":497},{"style":474},[498],{"type":179,"value":499}," &&",{"type":173,"tag":382,"props":501,"children":502},{"style":459},[503],{"type":179,"value":504}," pkg",{"type":173,"tag":382,"props":506,"children":507},{"style":401},[508],{"type":179,"value":466},{"type":173,"tag":382,"props":510,"children":511},{"style":459},[512],{"type":179,"value":513},"version",{"type":173,"tag":382,"props":515,"children":516},{"style":401},[517],{"type":179,"value":466},{"type":173,"tag":382,"props":519,"children":520},{"style":395},[521],{"type":179,"value":522},"startsWith",{"type":173,"tag":382,"props":524,"children":525},{"style":453},[526],{"type":179,"value":404},{"type":173,"tag":382,"props":528,"children":529},{"style":480},[530],{"type":179,"value":494},{"type":173,"tag":382,"props":532,"children":533},{"style":486},[534],{"type":179,"value":535},"1.",{"type":173,"tag":382,"props":537,"children":538},{"style":480},[539],{"type":179,"value":494},{"type":173,"tag":382,"props":541,"children":542},{"style":453},[543],{"type":179,"value":544},")) ",{"type":173,"tag":382,"props":546,"children":547},{"style":401},[548],{"type":179,"value":549},"{\n",{"type":173,"tag":382,"props":551,"children":553},{"class":384,"line":552},4,[554],{"type":173,"tag":382,"props":555,"children":556},{"style":437},[557],{"type":179,"value":558},"    // Replace bar@x.x.x with bar@2.0.0\n",{"type":173,"tag":382,"props":560,"children":562},{"class":384,"line":561},5,[563,568,572,577,582],{"type":173,"tag":382,"props":564,"children":565},{"style":459},[566],{"type":179,"value":567},"    pkg",{"type":173,"tag":382,"props":569,"children":570},{"style":401},[571],{"type":179,"value":466},{"type":173,"tag":382,"props":573,"children":574},{"style":459},[575],{"type":179,"value":576},"dependencies",{"type":173,"tag":382,"props":578,"children":579},{"style":474},[580],{"type":179,"value":581}," =",{"type":173,"tag":382,"props":583,"children":584},{"style":401},[585],{"type":179,"value":430},{"type":173,"tag":382,"props":587,"children":589},{"class":384,"line":588},6,[590,595,599,603,607],{"type":173,"tag":382,"props":591,"children":592},{"style":474},[593],{"type":179,"value":594},"      ...",{"type":173,"tag":382,"props":596,"children":597},{"style":459},[598],{"type":179,"value":410},{"type":173,"tag":382,"props":600,"children":601},{"style":401},[602],{"type":179,"value":466},{"type":173,"tag":382,"props":604,"children":605},{"style":459},[606],{"type":179,"value":576},{"type":173,"tag":382,"props":608,"children":609},{"style":401},[610],{"type":179,"value":611},",\n",{"type":173,"tag":382,"props":613,"children":615},{"class":384,"line":614},7,[616,621,626,630,635],{"type":173,"tag":382,"props":617,"children":618},{"style":453},[619],{"type":179,"value":620},"      bar",{"type":173,"tag":382,"props":622,"children":623},{"style":401},[624],{"type":179,"value":625},":",{"type":173,"tag":382,"props":627,"children":628},{"style":480},[629],{"type":179,"value":483},{"type":173,"tag":382,"props":631,"children":632},{"style":486},[633],{"type":179,"value":634},"^2.0.0",{"type":173,"tag":382,"props":636,"children":637},{"style":480},[638],{"type":179,"value":639},"'\n",{"type":173,"tag":382,"props":641,"children":643},{"class":384,"line":642},8,[644],{"type":173,"tag":382,"props":645,"children":646},{"style":401},[647],{"type":179,"value":648},"    }\n",{"type":173,"tag":382,"props":650,"children":652},{"class":384,"line":651},9,[653,658,662,667,671,675,680,684],{"type":173,"tag":382,"props":654,"children":655},{"style":459},[656],{"type":179,"value":657},"    context",{"type":173,"tag":382,"props":659,"children":660},{"style":401},[661],{"type":179,"value":466},{"type":173,"tag":382,"props":663,"children":664},{"style":395},[665],{"type":179,"value":666},"log",{"type":173,"tag":382,"props":668,"children":669},{"style":453},[670],{"type":179,"value":404},{"type":173,"tag":382,"props":672,"children":673},{"style":480},[674],{"type":179,"value":494},{"type":173,"tag":382,"props":676,"children":677},{"style":486},[678],{"type":179,"value":679},"bar@1 => bar@2 in dependencies of foo",{"type":173,"tag":382,"props":681,"children":682},{"style":480},[683],{"type":179,"value":494},{"type":173,"tag":382,"props":685,"children":686},{"style":453},[687],{"type":179,"value":688},")\n",{"type":173,"tag":382,"props":690,"children":692},{"class":384,"line":691},10,[693],{"type":173,"tag":382,"props":694,"children":695},{"style":401},[696],{"type":179,"value":697},"  }\n",{"type":173,"tag":382,"props":699,"children":701},{"class":384,"line":700},11,[702],{"type":173,"tag":382,"props":703,"children":704},{"style":453},[705],{"type":179,"value":706},"  \n",{"type":173,"tag":382,"props":708,"children":710},{"class":384,"line":709},12,[711],{"type":173,"tag":382,"props":712,"children":713},{"style":437},[714],{"type":179,"value":715},"  // This will change any packages using baz@x.x.x to use baz@1.2.3\n",{"type":173,"tag":382,"props":717,"children":719},{"class":384,"line":718},13,[720,724,728,732,736,740,744,749,754],{"type":173,"tag":382,"props":721,"children":722},{"style":447},[723],{"type":179,"value":450},{"type":173,"tag":382,"props":725,"children":726},{"style":453},[727],{"type":179,"value":456},{"type":173,"tag":382,"props":729,"children":730},{"style":459},[731],{"type":179,"value":410},{"type":173,"tag":382,"props":733,"children":734},{"style":401},[735],{"type":179,"value":466},{"type":173,"tag":382,"props":737,"children":738},{"style":459},[739],{"type":179,"value":576},{"type":173,"tag":382,"props":741,"children":742},{"style":401},[743],{"type":179,"value":466},{"type":173,"tag":382,"props":745,"children":746},{"style":459},[747],{"type":179,"value":748},"baz",{"type":173,"tag":382,"props":750,"children":751},{"style":453},[752],{"type":179,"value":753},") ",{"type":173,"tag":382,"props":755,"children":756},{"style":401},[757],{"type":179,"value":549},{"type":173,"tag":382,"props":759,"children":761},{"class":384,"line":760},14,[762,766,770,774,778,782,786,790,795,799],{"type":173,"tag":382,"props":763,"children":764},{"style":459},[765],{"type":179,"value":567},{"type":173,"tag":382,"props":767,"children":768},{"style":401},[769],{"type":179,"value":466},{"type":173,"tag":382,"props":771,"children":772},{"style":459},[773],{"type":179,"value":576},{"type":173,"tag":382,"props":775,"children":776},{"style":401},[777],{"type":179,"value":466},{"type":173,"tag":382,"props":779,"children":780},{"style":459},[781],{"type":179,"value":748},{"type":173,"tag":382,"props":783,"children":784},{"style":474},[785],{"type":179,"value":581},{"type":173,"tag":382,"props":787,"children":788},{"style":480},[789],{"type":179,"value":483},{"type":173,"tag":382,"props":791,"children":792},{"style":486},[793],{"type":179,"value":794},"1.2.3",{"type":173,"tag":382,"props":796,"children":797},{"style":480},[798],{"type":179,"value":494},{"type":173,"tag":382,"props":800,"children":801},{"style":401},[802],{"type":179,"value":803},";\n",{"type":173,"tag":382,"props":805,"children":807},{"class":384,"line":806},15,[808],{"type":173,"tag":382,"props":809,"children":810},{"style":401},[811],{"type":179,"value":697},{"type":173,"tag":382,"props":813,"children":815},{"class":384,"line":814},16,[816],{"type":173,"tag":382,"props":817,"children":818},{"style":453},[819],{"type":179,"value":706},{"type":173,"tag":382,"props":821,"children":823},{"class":384,"line":822},17,[824,829],{"type":173,"tag":382,"props":825,"children":826},{"style":447},[827],{"type":179,"value":828},"  return",{"type":173,"tag":382,"props":830,"children":831},{"style":459},[832],{"type":179,"value":833}," pkg\n",{"type":173,"tag":382,"props":835,"children":837},{"class":384,"line":836},18,[838],{"type":173,"tag":382,"props":839,"children":840},{"style":401},[841],{"type":179,"value":842},"}\n",{"type":173,"tag":382,"props":844,"children":846},{"class":384,"line":845},19,[847],{"type":173,"tag":382,"props":848,"children":849},{"emptyLinePlaceholder":165},[850],{"type":179,"value":851},"\n",{"type":173,"tag":382,"props":853,"children":855},{"class":384,"line":854},20,[856,862,866,871,875],{"type":173,"tag":382,"props":857,"children":859},{"style":858},"--shiki-light:#39ADB5;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[860],{"type":179,"value":861},"module",{"type":173,"tag":382,"props":863,"children":864},{"style":401},[865],{"type":179,"value":466},{"type":173,"tag":382,"props":867,"children":868},{"style":858},[869],{"type":179,"value":870},"exports",{"type":173,"tag":382,"props":872,"children":873},{"style":474},[874],{"type":179,"value":581},{"type":173,"tag":382,"props":876,"children":877},{"style":401},[878],{"type":179,"value":430},{"type":173,"tag":382,"props":880,"children":882},{"class":384,"line":881},21,[883,888,892],{"type":173,"tag":382,"props":884,"children":885},{"style":453},[886],{"type":179,"value":887},"  hooks",{"type":173,"tag":382,"props":889,"children":890},{"style":401},[891],{"type":179,"value":625},{"type":173,"tag":382,"props":893,"children":894},{"style":401},[895],{"type":179,"value":430},{"type":173,"tag":382,"props":897,"children":899},{"class":384,"line":898},22,[900],{"type":173,"tag":382,"props":901,"children":902},{"style":459},[903],{"type":179,"value":904},"    readPackage\n",{"type":173,"tag":382,"props":906,"children":908},{"class":384,"line":907},23,[909],{"type":173,"tag":382,"props":910,"children":911},{"style":401},[912],{"type":179,"value":697},{"type":173,"tag":382,"props":914,"children":916},{"class":384,"line":915},24,[917],{"type":173,"tag":382,"props":918,"children":919},{"style":401},[920],{"type":179,"value":842},{"type":173,"tag":189,"props":922,"children":923},{},[924,926],{"type":179,"value":925},"见：",{"type":173,"tag":927,"props":928,"children":932},"a",{"href":929,"rel":930},"https://pnpm.io/pnpmfile",[931],"nofollow",[933],{"type":179,"value":934},"pnpmfile",{"type":173,"tag":174,"props":936,"children":938},{"id":937},"原理",[939],{"type":179,"value":937},{"type":173,"tag":182,"props":941,"children":943},{"id":942},"显著的优点",[944],{"type":179,"value":945},"显著的优点？",{"type":173,"tag":263,"props":947,"children":948},{},[949,954,959,972],{"type":173,"tag":267,"props":950,"children":951},{},[952],{"type":179,"value":953},"省磁盘空间，使用软硬链接和符号链接节约空间。",{"type":173,"tag":267,"props":955,"children":956},{},[957],{"type":179,"value":958},"安装依赖快，因为处理链接要比处理文件快，并且每个包的解析、下载和写入磁盘这三个阶段是分离的。",{"type":173,"tag":267,"props":960,"children":961},{},[962,964,970],{"type":179,"value":963},"内建支持 monorepo，所有命令支持 ",{"type":173,"tag":195,"props":965,"children":967},{"className":966},[],[968],{"type":179,"value":969},"--filter",{"type":179,"value":971}," 过滤包。",{"type":173,"tag":267,"props":973,"children":974},{},[975],{"type":179,"value":976},"依赖严格，避免幽灵依赖和依赖分身问题。",{"type":173,"tag":182,"props":978,"children":980},{"id":979},"依赖的层次结构是怎样的",[981],{"type":179,"value":982},"依赖的层次结构是怎样的？",{"type":173,"tag":189,"props":984,"children":985},{},[986,988,994,996,1002,1004,1010,1012,1018,1020,1025,1027,1032,1034,1039,1041,1047,1049,1054,1056,1062],{"type":179,"value":987},"当项目文件读取 ",{"type":173,"tag":195,"props":989,"children":991},{"className":990},[],[992],{"type":179,"value":993},"bar",{"type":179,"value":995}," 时，直接读取 ",{"type":173,"tag":195,"props":997,"children":999},{"className":998},[],[1000],{"type":179,"value":1001},"node_modules/bar",{"type":179,"value":1003},"，但它其实是 ",{"type":173,"tag":195,"props":1005,"children":1007},{"className":1006},[],[1008],{"type":179,"value":1009},".pnpm",{"type":179,"value":1011}," 文件夹下 ",{"type":173,"tag":195,"props":1013,"children":1015},{"className":1014},[],[1016],{"type":179,"value":1017},"bar/node_modules/bar",{"type":179,"value":1019}," 的一个符号链接。也就是说，他的真实的地址在 ",{"type":173,"tag":195,"props":1021,"children":1023},{"className":1022},[],[1024],{"type":179,"value":1009},{"type":179,"value":1026}," 文件夹下。这样一来，当 ",{"type":173,"tag":195,"props":1028,"children":1030},{"className":1029},[],[1031],{"type":179,"value":993},{"type":179,"value":1033}," 读取它的依赖的时候（项目的依赖的依赖），会在 ",{"type":173,"tag":195,"props":1035,"children":1037},{"className":1036},[],[1038],{"type":179,"value":993},{"type":179,"value":1040}," 的上层目录即 ",{"type":173,"tag":195,"props":1042,"children":1044},{"className":1043},[],[1045],{"type":179,"value":1046},"bar/node_modules",{"type":179,"value":1048}," 找到 ",{"type":173,"tag":195,"props":1050,"children":1052},{"className":1051},[],[1053],{"type":179,"value":489},{"type":179,"value":1055}," 这个依赖。项目文件没法读取 ",{"type":173,"tag":195,"props":1057,"children":1059},{"className":1058},[],[1060],{"type":179,"value":1061},"bar/node_modules/foo",{"type":179,"value":1063}," 所以避免了幽灵依赖问题。",{"type":173,"tag":189,"props":1065,"children":1066},{},[1067,1072,1074,1080,1082,1087,1089,1095],{"type":173,"tag":195,"props":1068,"children":1070},{"className":1069},[],[1071],{"type":179,"value":1061},{"type":179,"value":1073}," 要怎么找到它的依赖呢？它的真实地址在项目 ·（和官网的图有出入），所以 foo 也只能读取它自己的子依赖，即 ",{"type":173,"tag":195,"props":1075,"children":1077},{"className":1076},[],[1078],{"type":179,"value":1079},"node_modules/.pnpm/foo/node_modules",{"type":179,"value":1081},"。如果有依赖依赖了同一份（同一版本）的 ",{"type":173,"tag":195,"props":1083,"children":1085},{"className":1084},[],[1086],{"type":179,"value":489},{"type":179,"value":1088},"，那么它们的真实地址都是一样的 ",{"type":173,"tag":195,"props":1090,"children":1092},{"className":1091},[],[1093],{"type":179,"value":1094},"node_modules/.pnpm/foo/node_modules/foo",{"type":179,"value":1096},"，这样就避免依赖分身问题。",{"type":173,"tag":189,"props":1098,"children":1099},{},[1100],{"type":173,"tag":1101,"props":1102,"children":1105},"img",{"alt":1103,"src":1104},"Modules Mapping in pnpm","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220317192927.png",[],{"type":173,"tag":189,"props":1107,"children":1108},{},[1109,1110,1117,1119],{"type":179,"value":925},{"type":173,"tag":927,"props":1111,"children":1114},{"href":1112,"rel":1113},"https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way",[931],[1115],{"type":179,"value":1116},"Flat node_modules is not the only way | @pnpm",{"type":179,"value":1118},"、",{"type":173,"tag":927,"props":1120,"children":1123},{"href":1121,"rel":1122},"https://pnpm.io/symlinked-node-modules-structure",[931],[1124],{"type":179,"value":1125},"Symlinked node_modules structure | @pnpm",{"type":173,"tag":182,"props":1127,"children":1129},{"id":1128},"如何处理同级依赖",[1130],{"type":179,"value":1131},"如何处理同级依赖？",{"type":173,"tag":189,"props":1133,"children":1134},{},[1135,1137,1143,1145,1151,1153,1159,1161,1167,1169,1175,1176,1182],{"type":179,"value":1136},"当项目的两个包 A、B 依赖依赖了同一版本的 C，但是却安装了不同版本的 C 的同级依赖 D@1.0 和 D@1.1，这时，A 依赖的 C 的真实地址是 ",{"type":173,"tag":195,"props":1138,"children":1140},{"className":1139},[],[1141],{"type":179,"value":1142},".pnpm/C_D@1.0/node_modules/C",{"type":179,"value":1144},"，B 依赖的 C 的真实地址是 ",{"type":173,"tag":195,"props":1146,"children":1148},{"className":1147},[],[1149],{"type":179,"value":1150},".pnpm/C_D@1.1/node_modules/C",{"type":179,"value":1152},"。这样一来，两个 C 在读取其同级依赖时，分别读取了 ",{"type":173,"tag":195,"props":1154,"children":1156},{"className":1155},[],[1157],{"type":179,"value":1158},".pnpm/C_D@1.0/node_modules/D",{"type":179,"value":1160}," 和 ",{"type":173,"tag":195,"props":1162,"children":1164},{"className":1163},[],[1165],{"type":179,"value":1166},".pnpm/C_D@1.1/node_modules/D@1.0",{"type":179,"value":1168},"，分别对应真实地址 ",{"type":173,"tag":195,"props":1170,"children":1172},{"className":1171},[],[1173],{"type":179,"value":1174},".pnpm/D@1.0/node_modules/D",{"type":179,"value":1160},{"type":173,"tag":195,"props":1177,"children":1179},{"className":1178},[],[1180],{"type":179,"value":1181},".pnpm/D@1.1/node_modules/D",{"type":179,"value":1183},"。",{"type":173,"tag":189,"props":1185,"children":1186},{},[1187,1189,1195,1196,1202,1204,1210,1211,1216,1218,1224],{"type":179,"value":1188},"当同级依赖的深度增加时，层级结构也随之变得复杂。如果某个依赖 A 依赖了同一个 B，但是 B 子依赖 C 的版本不同（C@1.0 和 C@1.1），这样就创造出了指数级增长的软链数量。为了保证 B 能分别访问两个 C，B 的符号链接的被链接地址会有 ",{"type":173,"tag":195,"props":1190,"children":1192},{"className":1191},[],[1193],{"type":179,"value":1194},".pnpm/B_C@1.0/node_modules/B",{"type":179,"value":1160},{"type":173,"tag":195,"props":1197,"children":1199},{"className":1198},[],[1200],{"type":179,"value":1201},".pnpm/B_C@1.1/node_modules/B",{"type":179,"value":1203},"，而为此，A 的被链接地址也会有两个，",{"type":173,"tag":195,"props":1205,"children":1207},{"className":1206},[],[1208],{"type":179,"value":1209},".pnpm/A_C@1.0/node_modules/A",{"type":179,"value":1160},{"type":173,"tag":195,"props":1212,"children":1214},{"className":1213},[],[1215],{"type":179,"value":1209},{"type":179,"value":1217},"。从不同的 A 的被链接地址的上级目录 ",{"type":173,"tag":195,"props":1219,"children":1221},{"className":1220},[],[1222],{"type":179,"value":1223},"node_modules",{"type":179,"value":1225}," 可以读取到不同的 B 的被链目录，从不同的 B 可以读取到不同的 C。",{"type":173,"tag":241,"props":1227,"children":1230},{"code":1228,"language":179,"meta":166,"className":1229},"node_modules\n└── .pnpm\n    ├── a@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.0.0/node_modules/b\n    ├── a@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.1.0/node_modules/b\n    ├── b@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.0.0/node_modules/c\n    ├── b@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.1.0/node_modules/c\n    ├── c@1.0.0\n    ├── c@1.1.0\n",[245],[1231],{"type":173,"tag":195,"props":1232,"children":1233},{"__ignoreMap":166},[1234],{"type":179,"value":1228},{"type":173,"tag":189,"props":1236,"children":1237},{},[1238,1239],{"type":179,"value":925},{"type":173,"tag":927,"props":1240,"children":1243},{"href":1241,"rel":1242},"https://pnpm.io/how-peers-are-resolved",[931],[1244],{"type":179,"value":1245},"How peers are resolved | @pnpm",{"type":173,"tag":182,"props":1247,"children":1249},{"id":1248},"怎样兼容-nodejs-模块加载顺序",[1250],{"type":179,"value":1251},"怎样兼容 NodeJS 模块加载顺序？",{"type":173,"tag":189,"props":1253,"children":1254},{},[1255],{"type":179,"value":1256},"不论系统自带的模块，NodeJS 加载模块的顺序是这样的：",{"type":173,"tag":263,"props":1258,"children":1259},{},[1260,1265,1270,1275],{"type":173,"tag":267,"props":1261,"children":1262},{},[1263],{"type":179,"value":1264},"读取本文件夹中 node_modules 中对应名字的文件夹的 package.json，并寻找 main 字段对应的路径",{"type":173,"tag":267,"props":1266,"children":1267},{},[1268],{"type":179,"value":1269},"读取本文件夹中 node_modules 中对应名字的 js 文件",{"type":173,"tag":267,"props":1271,"children":1272},{},[1273],{"type":179,"value":1274},"读取本文件夹中 node_modules 中对应名字文件夹中的 index.js 文件",{"type":173,"tag":267,"props":1276,"children":1277},{},[1278],{"type":179,"value":1279},"跳出本文件夹，继续前三个步骤",{"type":173,"tag":189,"props":1281,"children":1282},{},[1283,1285,1290,1292,1298,1300,1306,1308,1313,1315,1321,1323,1329],{"type":179,"value":1284},"因为项目 ",{"type":173,"tag":195,"props":1286,"children":1288},{"className":1287},[],[1289],{"type":179,"value":1001},{"type":179,"value":1291}," 是 ",{"type":173,"tag":195,"props":1293,"children":1295},{"className":1294},[],[1296],{"type":179,"value":1297},".pnpm/bar/node_modules/bar",{"type":179,"value":1299}," 的符号链接，所以项目文件可以直接读取 ",{"type":173,"tag":195,"props":1301,"children":1303},{"className":1302},[],[1304],{"type":179,"value":1305},"node_modules/bar/x.js",{"type":179,"value":1307},"。同时，如果 ",{"type":173,"tag":195,"props":1309,"children":1311},{"className":1310},[],[1312],{"type":179,"value":1305},{"type":179,"value":1314}," 需要加载 ",{"type":173,"tag":195,"props":1316,"children":1318},{"className":1317},[],[1319],{"type":179,"value":1320},"foo/x.js",{"type":179,"value":1322},"，那么在上述步骤的第 4 步，就能找到 ",{"type":173,"tag":195,"props":1324,"children":1326},{"className":1325},[],[1327],{"type":179,"value":1328},".pnpm/bar/node_modules/foo/x.js",{"type":179,"value":1330}," 文件。",{"type":173,"tag":182,"props":1332,"children":1334},{"id":1333},"为什么其模块层次只是比较严格的semistrict",[1335],{"type":179,"value":1336},"为什么其模块层次只是“比较严格的”（semistrict）？",{"type":173,"tag":189,"props":1338,"children":1339},{},[1340],{"type":179,"value":1341},"由 NodeJS 模块加载规则可知，在 pnpm 创造的依赖层次下，一个依赖的子依赖间仍有相互访问的能力。",{"type":173,"tag":182,"props":1343,"children":1345},{"id":1344},"为什么能节约磁盘空间",[1346],{"type":179,"value":1347},"为什么能节约磁盘空间？",{"type":173,"tag":189,"props":1349,"children":1350},{},[1351,1353,1359,1361,1367,1369,1375],{"type":179,"value":1352},"由 pnpm 创造的 node_modules 层级结构可以知道，所有依赖的符号链接的真实地址都在 ",{"type":173,"tag":195,"props":1354,"children":1356},{"className":1355},[],[1357],{"type":179,"value":1358},".pnpm/package-name/node_modules/package-name",{"type":179,"value":1360}," 这个文件夹中。这种文件夹会通过硬链接的形式链接到 ",{"type":173,"tag":195,"props":1362,"children":1364},{"className":1363},[],[1365],{"type":179,"value":1366},"user-document/.pnpm-store",{"type":179,"value":1368}," 中，所以相同的包只会存一份，也就是 ",{"type":173,"tag":195,"props":1370,"children":1372},{"className":1371},[],[1373],{"type":179,"value":1374},".pnpm-store/package-name",{"type":179,"value":1183},{"type":173,"tag":182,"props":1377,"children":1379},{"id":1378},"软硬链接有什么问题",[1380],{"type":179,"value":1381},"软硬链接有什么问题？",{"type":173,"tag":1383,"props":1384,"children":1385},"ul",{},[1386,1391,1396,1401],{"type":173,"tag":267,"props":1387,"children":1388},{},[1389],{"type":179,"value":1390},"特定的软链结构会导致某些应用出现死循环",{"type":173,"tag":267,"props":1392,"children":1393},{},[1394],{"type":179,"value":1395},"硬链接是同一份文件，不便调试",{"type":173,"tag":267,"props":1397,"children":1398},{},[1399],{"type":179,"value":1400},"软链接在非 SSD 上的读写会有性能损耗",{"type":173,"tag":267,"props":1402,"children":1403},{},[1404],{"type":179,"value":1405},"pnpm 创造的 node_modules 层级结构会破坏某些依赖依赖了相对路径的依赖的逻辑",{"type":173,"tag":189,"props":1407,"children":1408},{},[1409,1410],{"type":179,"value":925},{"type":173,"tag":927,"props":1411,"children":1414},{"href":1412,"rel":1413},"https://zhuanlan.zhihu.com/p/553804414",[931],[1415],{"type":179,"value":1416},"精读 pnpm",{"type":173,"tag":174,"props":1418,"children":1420},{"id":1419},"常见问题",[1421],{"type":179,"value":1419},{"type":173,"tag":182,"props":1423,"children":1425},{"id":1424},"pnpm-找不到全局路径的解决方法",[1426],{"type":179,"value":1427},"PNPM 找不到全局路径的解决方法？",{"type":173,"tag":189,"props":1429,"children":1430},{},[1431],{"type":179,"value":1432},"尽管设置了全局变量，也重新安装了最新版本 PNPM，也执行了 pnpm setup，却仍然报错找不到全局路径的临时解决方案：",{"type":173,"tag":241,"props":1434,"children":1438},{"code":1435,"language":1436,"meta":166,"className":1437,"style":166},"$PNPM_HOME=\"\u003Cpath>\" | pnpm install -g xxx\n","powershell","language-powershell shiki shiki-themes material-theme-lighter github-light github-dark monokai",[1439],{"type":173,"tag":195,"props":1440,"children":1441},{"__ignoreMap":166},[1442],{"type":173,"tag":382,"props":1443,"children":1444},{"class":384,"line":385},[1445,1450,1455,1460,1465,1470,1474,1479,1484,1489],{"type":173,"tag":382,"props":1446,"children":1447},{"style":401},[1448],{"type":179,"value":1449},"$",{"type":173,"tag":382,"props":1451,"children":1452},{"style":459},[1453],{"type":179,"value":1454},"PNPM_HOME",{"type":173,"tag":382,"props":1456,"children":1457},{"style":474},[1458],{"type":179,"value":1459},"=",{"type":173,"tag":382,"props":1461,"children":1462},{"style":480},[1463],{"type":179,"value":1464},"\"",{"type":173,"tag":382,"props":1466,"children":1467},{"style":486},[1468],{"type":179,"value":1469},"\u003Cpath>",{"type":173,"tag":382,"props":1471,"children":1472},{"style":480},[1473],{"type":179,"value":1464},{"type":173,"tag":382,"props":1475,"children":1476},{"style":474},[1477],{"type":179,"value":1478}," |",{"type":173,"tag":382,"props":1480,"children":1481},{"style":459},[1482],{"type":179,"value":1483}," pnpm install ",{"type":173,"tag":382,"props":1485,"children":1486},{"style":474},[1487],{"type":179,"value":1488},"-",{"type":173,"tag":382,"props":1490,"children":1491},{"style":459},[1492],{"type":179,"value":1493},"g xxx\n",{"type":173,"tag":182,"props":1495,"children":1497},{"id":1496},"pnpm-速度变慢了",[1498],{"type":179,"value":1499},"PNPM 速度变慢了？",{"type":173,"tag":189,"props":1501,"children":1502},{},[1503],{"type":179,"value":1504},"今天逛官网时，偶然发现 Readme 中的 benchmark 过时了。它说“要比 Yarn Classic 和 npm “快两倍以上，但是从 benchmark 来看，他要比 Yarn 和 npm 慢了不少。以后启用 NodeJS 20 以上时，如果问题得不到改善，我应该会重新选择 npm 而不是 pnpm，鉴于幽灵依赖和依赖分身带来的问题是可排查可解决的，而速度是解决不了的问题。",{"type":173,"tag":189,"props":1506,"children":1507},{},[1508],{"type":173,"tag":1101,"props":1509,"children":1512},{"alt":1510,"src":1511},"pnpm vs npm vs yarn benchmark","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20230605235736.png",[],{"type":173,"tag":189,"props":1514,"children":1515},{},[1516,1518],{"type":179,"value":1517},"相关见：",{"type":173,"tag":927,"props":1519,"children":1522},{"href":1520,"rel":1521},"https://github.com/pnpm/pnpm/issues/6447",[931],[1523],{"type":179,"value":1524},"pnpm seems to be consistently slower than yarn (classic)",{"type":173,"tag":182,"props":1526,"children":1528},{"id":1527},"和-bun-在安装速度上的对比",[1529],{"type":179,"value":1530},"和 Bun 在安装速度上的对比？",{"type":173,"tag":189,"props":1532,"children":1533},{},[1534],{"type":179,"value":1535},"有锁文件、本地缓存，无 node_modules 的情况下，bun 要比 pnpm 安装至少快 3 倍。",{"type":173,"tag":1383,"props":1537,"children":1538},{},[1539,1544],{"type":173,"tag":267,"props":1540,"children":1541},{},[1542],{"type":179,"value":1543},"一个原因是 pnpm、yarn 等工具会在安装时请求最新的 metadata，而 bun 使用的 metadata 源于本地缓存的 metadata。",{"type":173,"tag":267,"props":1545,"children":1546},{},[1547],{"type":179,"value":1548},"另一个原因是 pnpm 在创建 node_modules 层次结构是使用了大量的 symlink，相比其他包管理工具仅使用复制或 hardlink 有更多系统调用。",{"type":173,"tag":189,"props":1550,"children":1551},{},[1552],{"type":179,"value":1553},"所以如果想使 pnpm 更快的安装，可以使用 prefer-offline 选项，以及，node-linker=hoisted 也许有用。",{"type":173,"tag":189,"props":1555,"children":1556},{},[1557,1558],{"type":179,"value":925},{"type":173,"tag":927,"props":1559,"children":1562},{"href":1560,"rel":1561},"https://github.com/pnpm/pnpm/issues/7391",[931],[1563],{"type":179,"value":1564},"Bun.sh-like Module Resolution",{"type":173,"tag":182,"props":1566,"children":1568},{"id":1567},"关于-v8-版本的变化",[1569],{"type":179,"value":1570},"关于 V8 版本的变化？",{"type":173,"tag":1383,"props":1572,"children":1573},{},[1574,1593,1609,1620,1625,1630,1635],{"type":173,"tag":267,"props":1575,"children":1576},{},[1577,1583,1585,1591],{"type":173,"tag":195,"props":1578,"children":1580},{"className":1579},[],[1581],{"type":179,"value":1582},"resolve-peers-from-workspace-root",{"type":179,"value":1584}," is ",{"type":173,"tag":195,"props":1586,"children":1588},{"className":1587},[],[1589],{"type":179,"value":1590},"true",{"type":179,"value":1592}," by default",{"type":173,"tag":267,"props":1594,"children":1595},{},[1596,1602,1603,1608],{"type":173,"tag":195,"props":1597,"children":1599},{"className":1598},[],[1600],{"type":179,"value":1601},"auto-install-peers",{"type":179,"value":1584},{"type":173,"tag":195,"props":1604,"children":1606},{"className":1605},[],[1607],{"type":179,"value":1590},{"type":179,"value":1592},{"type":173,"tag":267,"props":1610,"children":1611},{},[1612,1618],{"type":173,"tag":195,"props":1613,"children":1615},{"className":1614},[],[1616],{"type":179,"value":1617},"dedupe-peer-dependents",{"type":179,"value":1619}," set to true by default",{"type":173,"tag":267,"props":1621,"children":1622},{},[1623],{"type":179,"value":1624},"停止 NodeJS 14 的支持",{"type":173,"tag":267,"props":1626,"children":1627},{},[1628],{"type":179,"value":1629},"lockfile v6 by default",{"type":173,"tag":267,"props":1631,"children":1632},{},[1633],{"type":179,"value":1634},"resolution mode（prebundle、time-based、lowest-direct）default set to lowest-based，需要注意手动升级，尤其是在没有锁文件的情况",{"type":173,"tag":267,"props":1636,"children":1637},{},[1638,1640,1646],{"type":179,"value":1639},"only deply ",{"type":173,"tag":195,"props":1641,"children":1643},{"className":1642},[],[1644],{"type":179,"value":1645},"files",{"type":179,"value":1647}," field when the field exist",{"type":173,"tag":182,"props":1649,"children":1651},{"id":1650},"pnp-模式下的依赖提升设置",[1652],{"type":179,"value":1653},"PnP 模式下的依赖提升设置？",{"type":173,"tag":189,"props":1655,"children":1656},{},[1657,1659,1665],{"type":179,"value":1658},"默认的 node_modules 依赖的层级处于严格和不严格之间的水平（semi-strict）。使用最严格的设置需要打开 PnP 模式，因为在 monorepo 中 PnP 模式中，就算开启了 ",{"type":173,"tag":195,"props":1660,"children":1662},{"className":1661},[],[1663],{"type":179,"value":1664},"hoist=false",{"type":179,"value":1666}," 也不会禁用 workspace root 的依赖",{"type":173,"tag":241,"props":1668,"children":1670},{"code":1669},"node-linker=pnp\nsymlink=false\n",[1671],{"type":173,"tag":195,"props":1672,"children":1673},{"__ignoreMap":166},[1674],{"type":179,"value":1669},{"type":173,"tag":189,"props":1676,"children":1677},{},[1678,1679],{"type":179,"value":925},{"type":173,"tag":927,"props":1680,"children":1683},{"href":1681,"rel":1682},"https://pnpm.io/blog/2020/10/17/node-modules-configuration-options-with-pnpm",[931],[1684],{"type":179,"value":1685},"Node-Modules configuration options with pnpm",{"type":173,"tag":182,"props":1687,"children":1689},{"id":1688},"在-windows-dev-driver-上可能会碰到的问题",[1690],{"type":179,"value":1691},"在 Windows Dev Driver 上可能会碰到的问题？",{"type":173,"tag":189,"props":1693,"children":1694},{},[1695],{"type":179,"value":1696},"2024 年初 pnpm 实现了 Dev Driver 上的 Copy on Write 功能，但可能会碰到变慢的问题。",{"type":173,"tag":189,"props":1698,"children":1699},{},[1700,1701],{"type":179,"value":925},{"type":173,"tag":927,"props":1702,"children":1705},{"href":1703,"rel":1704},"https://github.com/pnpm/pnpm/issues/7547",[931],[1706],{"type":179,"value":1707},"pnpm lately slow and pnpx stuck at installing deps using executable package",{"type":173,"tag":182,"props":1709,"children":1711},{"id":1710},"下载多份二进制代码的问题",[1712],{"type":179,"value":1713},"下载多份二进制代码的问题？",{"type":173,"tag":189,"props":1715,"children":1716},{},[1717],{"type":179,"value":1718},"目前应该是所有包管理器都有这种问题，但是不知道怎么解决。",{"type":173,"tag":189,"props":1720,"children":1721},{},[1722],{"type":173,"tag":1101,"props":1723,"children":1726},{"alt":1724,"src":1725},"sass-embedded 下载了多份二进制代码","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202503200412724.png",[],{"type":173,"tag":1728,"props":1729,"children":1730},"style",{},[1731],{"type":179,"value":1732},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":433,"depth":433,"links":1734},[1735,1736,1737],{"id":176,"depth":433,"text":180},{"id":937,"depth":433,"text":937},{"id":1419,"depth":433,"text":1419},"markdown","content:6.maps:_workflow:package-manager:pnpm.md","content","6.maps/_workflow/package-manager/pnpm.md","6.maps/_workflow/package-manager/pnpm","md",[1745,1749],{"_path":1746,"title":1747,"description":1748},"/maps/_workflow/package-manager/npm","NPM","NPM 包管理器完整指南，包含 package.json 配置、镜像源管理、依赖安装等核心功能的详细说明。",{"_path":1750,"title":1751,"description":1752},"/maps/_workflow/packer","打包工具","前端打包工具全景图，涵盖 Vite、Webpack、Rollup、tsup、Unbuild、Rome 等主流工具的特性对比和使用说明。",1749722337545]