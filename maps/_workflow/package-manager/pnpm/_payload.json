[{"data":1,"prerenderedAt":1728},["ShallowReactive",2],{"navigation":3,"/maps/_workflow/package-manager/pnpm":155,"/maps/_workflow/package-manager/pnpm-surround":1719},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":162,"body":163,"_type":1713,"_id":1714,"_source":1715,"_file":1716,"_stem":1717,"_extension":1718},"/maps/_workflow/package-manager/pnpm","package-manager",false,true,"","pnpm","pnpm 是一个快速、省空间的包管理器",{"type":164,"children":165,"toc":1708},"root",[166,175,182,196,202,212,217,223,234,245,251,256,310,316,321,326,331,349,355,366,915,929,934,940,971,977,1058,1091,1100,1120,1126,1178,1220,1229,1240,1246,1251,1274,1325,1331,1336,1342,1370,1376,1400,1411,1416,1422,1427,1488,1494,1499,1507,1519,1525,1530,1543,1548,1559,1565,1642,1648,1661,1669,1680,1686,1691,1702],{"type":167,"tag":168,"props":169,"children":171},"element","h2",{"id":170},"api-细节和配置项",[172],{"type":173,"value":174},"text","API 细节和配置项",{"type":167,"tag":176,"props":177,"children":179},"h4",{"id":178},"pnpm-import",[180],{"type":173,"value":181},"pnpm import",{"type":167,"tag":183,"props":184,"children":185},"p",{},[186,188,194],{"type":173,"value":187},"使用 ",{"type":167,"tag":189,"props":190,"children":192},"code",{"className":191},[],[193],{"type":173,"value":181},{"type":173,"value":195}," 可以将 package-lock、npm-shrinkwrap 和 yarn.lock 转换为 pnpm-lock 文件。",{"type":167,"tag":176,"props":197,"children":199},{"id":198},"pnpm-fetch",[200],{"type":173,"value":201},"pnpm fetch",{"type":167,"tag":183,"props":203,"children":204},{},[205,210],{"type":167,"tag":189,"props":206,"children":208},{"className":207},[],[209],{"type":173,"value":201},{"type":173,"value":211}," 它跳过了 package.json 文件，允许项目在只有 pnpm-lock 文件的情况下创建 .pnpm 虚拟仓库。这有利于 docker 构建，因为 package.json 经常因为非依赖变化的改动而改动，导致 docker layer 失效。",{"type":167,"tag":183,"props":213,"children":214},{},[215],{"type":173,"value":216},"相比 yarn 和 npm，在脱离 package.json 的情况下，单靠 package-lock（或 yarn-lock），yarn 和 npm 没有办法确定依赖版本，因为其 package-lock 中，依赖的版本号不是固定版本号。",{"type":167,"tag":176,"props":218,"children":220},{"id":219},"pnpm-why",[221],{"type":173,"value":222},"pnpm why",{"type":167,"tag":183,"props":224,"children":225},{},[226,227,232],{"type":173,"value":187},{"type":167,"tag":189,"props":228,"children":230},{"className":229},[],[231],{"type":173,"value":222},{"type":173,"value":233}," 可以列出项目内依赖了某个依赖的依赖，比如说找到项目内使用了 lodash 的包。",{"type":167,"tag":235,"props":236,"children":240},"pre",{"code":237,"language":173,"meta":160,"className":238},"dependencies:\nelement-plus 2.2.20\n├── lodash 4.17.21\n└─┬ lodash-unified 1.0.3\n  └── lodash 4.17.21 peer\n...\n",[239],"language-text",[241],{"type":167,"tag":189,"props":242,"children":243},{"__ignoreMap":160},[244],{"type":173,"value":237},{"type":167,"tag":176,"props":246,"children":248},{"id":247},"pnpm-run",[249],{"type":173,"value":250},"pnpm run",{"type":167,"tag":183,"props":252,"children":253},{},[254],{"type":173,"value":255},"与其它包管理器的一些区别：",{"type":167,"tag":257,"props":258,"children":259},"ol",{},[260,286,291],{"type":167,"tag":261,"props":262,"children":263},"li",{},[264,270,272,278,280],{"type":167,"tag":189,"props":265,"children":267},{"className":266},[],[268],{"type":173,"value":269},"pnpm run script-name",{"type":173,"value":271},"，如果 ",{"type":167,"tag":189,"props":273,"children":275},{"className":274},[],[276],{"type":173,"value":277},"script-name",{"type":173,"value":279}," 没有和 pnpm 内置指令冲突，则可以省略 ",{"type":167,"tag":189,"props":281,"children":283},{"className":282},[],[284],{"type":173,"value":285},"run",{"type":167,"tag":261,"props":287,"children":288},{},[289],{"type":173,"value":290},"run 指令默认不会执行 pre 和 post 钩子函数，因为 pnpm 认为这使任务流更难理解",{"type":167,"tag":261,"props":292,"children":293},{},[294,300,302,308],{"type":167,"tag":189,"props":295,"children":297},{"className":296},[],[298],{"type":173,"value":299},"shell-emulator",{"type":173,"value":301}," 选项启用后，将使用 JS 解析指令，这使得在不兼容 POSIX 的环境执行类似 ",{"type":167,"tag":189,"props":303,"children":305},{"className":304},[],[306],{"type":173,"value":307},"NODE_ENV=test node ./index",{"type":173,"value":309}," 的指令会报错的系统也能正常运行这种指令",{"type":167,"tag":176,"props":311,"children":313},{"id":312},"pnpm-pack",[314],{"type":173,"value":315},"pnpm pack",{"type":167,"tag":183,"props":317,"children":318},{},[319],{"type":173,"value":320},"将项目打包为 tarball 压缩包（.tgz）。打包的文件范围和 pnpm publish 一样。",{"type":167,"tag":176,"props":322,"children":324},{"id":323},"shared-workspace-lockfile",[325],{"type":173,"value":323},{"type":167,"tag":183,"props":327,"children":328},{},[329],{"type":173,"value":330},"在 workspace 间共享一份 package-lock 文件。这个配置开启后，所有子包的依赖都会被提升到 workspace 根目录，这带来了几个好处：",{"type":167,"tag":257,"props":332,"children":333},{},[334,339,344],{"type":167,"tag":261,"props":335,"children":336},{},[337],{"type":173,"value":338},"所有依赖都是单例的",{"type":167,"tag":261,"props":340,"children":341},{},[342],{"type":173,"value":343},"更快的安装速度（相比 pnpm install -r）",{"type":167,"tag":261,"props":345,"children":346},{},[347],{"type":173,"value":348},"修改的文件总数更少，利于 Code Review",{"type":167,"tag":176,"props":350,"children":352},{"id":351},"pnpmfilecjs",[353],{"type":173,"value":354},".pnpmfile.cjs",{"type":167,"tag":183,"props":356,"children":357},{},[358,359,364],{"type":173,"value":187},{"type":167,"tag":189,"props":360,"children":362},{"className":361},[],[363],{"type":173,"value":354},{"type":173,"value":365}," 文件提供的 readPackage 和 afterAllResolved 钩子函数可以分别介入依赖元信息解析（minifest）和依赖安装完准备输出 lock 文件的过程。",{"type":167,"tag":235,"props":367,"children":371},{"code":368,"language":369,"meta":160,"className":370,"style":160},"function readPackage(pkg, context) {\n  // Override the manifest of foo@1.x after downloading it from the registry\n  if (pkg.name === 'foo' && pkg.version.startsWith('1.')) {\n    // Replace bar@x.x.x with bar@2.0.0\n    pkg.dependencies = {\n      ...pkg.dependencies,\n      bar: '^2.0.0'\n    }\n    context.log('bar@1 => bar@2 in dependencies of foo')\n  }\n  \n  // This will change any packages using baz@x.x.x to use baz@1.2.3\n  if (pkg.dependencies.baz) {\n    pkg.dependencies.baz = '1.2.3';\n  }\n  \n  return pkg\n}\n\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\n","js","language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai",[372],{"type":167,"tag":189,"props":373,"children":374},{"__ignoreMap":160},[375,425,435,544,553,580,606,634,643,683,692,701,710,752,798,806,814,828,837,846,873,890,899,907],{"type":167,"tag":376,"props":377,"children":380},"span",{"class":378,"line":379},"line",1,[381,387,393,399,405,410,415,420],{"type":167,"tag":376,"props":382,"children":384},{"style":383},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[385],{"type":173,"value":386},"function",{"type":167,"tag":376,"props":388,"children":390},{"style":389},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[391],{"type":173,"value":392}," readPackage",{"type":167,"tag":376,"props":394,"children":396},{"style":395},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[397],{"type":173,"value":398},"(",{"type":167,"tag":376,"props":400,"children":402},{"style":401},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[403],{"type":173,"value":404},"pkg",{"type":167,"tag":376,"props":406,"children":407},{"style":395},[408],{"type":173,"value":409},",",{"type":167,"tag":376,"props":411,"children":412},{"style":401},[413],{"type":173,"value":414}," context",{"type":167,"tag":376,"props":416,"children":417},{"style":395},[418],{"type":173,"value":419},")",{"type":167,"tag":376,"props":421,"children":422},{"style":395},[423],{"type":173,"value":424}," {\n",{"type":167,"tag":376,"props":426,"children":428},{"class":378,"line":427},2,[429],{"type":167,"tag":376,"props":430,"children":432},{"style":431},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[433],{"type":173,"value":434},"  // Override the manifest of foo@1.x after downloading it from the registry\n",{"type":167,"tag":376,"props":436,"children":438},{"class":378,"line":437},3,[439,445,451,456,461,466,472,478,484,489,494,499,503,508,512,517,521,525,530,534,539],{"type":167,"tag":376,"props":440,"children":442},{"style":441},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[443],{"type":173,"value":444},"  if",{"type":167,"tag":376,"props":446,"children":448},{"style":447},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[449],{"type":173,"value":450}," (",{"type":167,"tag":376,"props":452,"children":454},{"style":453},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[455],{"type":173,"value":404},{"type":167,"tag":376,"props":457,"children":458},{"style":395},[459],{"type":173,"value":460},".",{"type":167,"tag":376,"props":462,"children":463},{"style":453},[464],{"type":173,"value":465},"name",{"type":167,"tag":376,"props":467,"children":469},{"style":468},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[470],{"type":173,"value":471}," ===",{"type":167,"tag":376,"props":473,"children":475},{"style":474},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[476],{"type":173,"value":477}," '",{"type":167,"tag":376,"props":479,"children":481},{"style":480},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[482],{"type":173,"value":483},"foo",{"type":167,"tag":376,"props":485,"children":486},{"style":474},[487],{"type":173,"value":488},"'",{"type":167,"tag":376,"props":490,"children":491},{"style":468},[492],{"type":173,"value":493}," &&",{"type":167,"tag":376,"props":495,"children":496},{"style":453},[497],{"type":173,"value":498}," pkg",{"type":167,"tag":376,"props":500,"children":501},{"style":395},[502],{"type":173,"value":460},{"type":167,"tag":376,"props":504,"children":505},{"style":453},[506],{"type":173,"value":507},"version",{"type":167,"tag":376,"props":509,"children":510},{"style":395},[511],{"type":173,"value":460},{"type":167,"tag":376,"props":513,"children":514},{"style":389},[515],{"type":173,"value":516},"startsWith",{"type":167,"tag":376,"props":518,"children":519},{"style":447},[520],{"type":173,"value":398},{"type":167,"tag":376,"props":522,"children":523},{"style":474},[524],{"type":173,"value":488},{"type":167,"tag":376,"props":526,"children":527},{"style":480},[528],{"type":173,"value":529},"1.",{"type":167,"tag":376,"props":531,"children":532},{"style":474},[533],{"type":173,"value":488},{"type":167,"tag":376,"props":535,"children":536},{"style":447},[537],{"type":173,"value":538},")) ",{"type":167,"tag":376,"props":540,"children":541},{"style":395},[542],{"type":173,"value":543},"{\n",{"type":167,"tag":376,"props":545,"children":547},{"class":378,"line":546},4,[548],{"type":167,"tag":376,"props":549,"children":550},{"style":431},[551],{"type":173,"value":552},"    // Replace bar@x.x.x with bar@2.0.0\n",{"type":167,"tag":376,"props":554,"children":556},{"class":378,"line":555},5,[557,562,566,571,576],{"type":167,"tag":376,"props":558,"children":559},{"style":453},[560],{"type":173,"value":561},"    pkg",{"type":167,"tag":376,"props":563,"children":564},{"style":395},[565],{"type":173,"value":460},{"type":167,"tag":376,"props":567,"children":568},{"style":453},[569],{"type":173,"value":570},"dependencies",{"type":167,"tag":376,"props":572,"children":573},{"style":468},[574],{"type":173,"value":575}," =",{"type":167,"tag":376,"props":577,"children":578},{"style":395},[579],{"type":173,"value":424},{"type":167,"tag":376,"props":581,"children":583},{"class":378,"line":582},6,[584,589,593,597,601],{"type":167,"tag":376,"props":585,"children":586},{"style":468},[587],{"type":173,"value":588},"      ...",{"type":167,"tag":376,"props":590,"children":591},{"style":453},[592],{"type":173,"value":404},{"type":167,"tag":376,"props":594,"children":595},{"style":395},[596],{"type":173,"value":460},{"type":167,"tag":376,"props":598,"children":599},{"style":453},[600],{"type":173,"value":570},{"type":167,"tag":376,"props":602,"children":603},{"style":395},[604],{"type":173,"value":605},",\n",{"type":167,"tag":376,"props":607,"children":609},{"class":378,"line":608},7,[610,615,620,624,629],{"type":167,"tag":376,"props":611,"children":612},{"style":447},[613],{"type":173,"value":614},"      bar",{"type":167,"tag":376,"props":616,"children":617},{"style":395},[618],{"type":173,"value":619},":",{"type":167,"tag":376,"props":621,"children":622},{"style":474},[623],{"type":173,"value":477},{"type":167,"tag":376,"props":625,"children":626},{"style":480},[627],{"type":173,"value":628},"^2.0.0",{"type":167,"tag":376,"props":630,"children":631},{"style":474},[632],{"type":173,"value":633},"'\n",{"type":167,"tag":376,"props":635,"children":637},{"class":378,"line":636},8,[638],{"type":167,"tag":376,"props":639,"children":640},{"style":395},[641],{"type":173,"value":642},"    }\n",{"type":167,"tag":376,"props":644,"children":646},{"class":378,"line":645},9,[647,652,656,661,665,669,674,678],{"type":167,"tag":376,"props":648,"children":649},{"style":453},[650],{"type":173,"value":651},"    context",{"type":167,"tag":376,"props":653,"children":654},{"style":395},[655],{"type":173,"value":460},{"type":167,"tag":376,"props":657,"children":658},{"style":389},[659],{"type":173,"value":660},"log",{"type":167,"tag":376,"props":662,"children":663},{"style":447},[664],{"type":173,"value":398},{"type":167,"tag":376,"props":666,"children":667},{"style":474},[668],{"type":173,"value":488},{"type":167,"tag":376,"props":670,"children":671},{"style":480},[672],{"type":173,"value":673},"bar@1 => bar@2 in dependencies of foo",{"type":167,"tag":376,"props":675,"children":676},{"style":474},[677],{"type":173,"value":488},{"type":167,"tag":376,"props":679,"children":680},{"style":447},[681],{"type":173,"value":682},")\n",{"type":167,"tag":376,"props":684,"children":686},{"class":378,"line":685},10,[687],{"type":167,"tag":376,"props":688,"children":689},{"style":395},[690],{"type":173,"value":691},"  }\n",{"type":167,"tag":376,"props":693,"children":695},{"class":378,"line":694},11,[696],{"type":167,"tag":376,"props":697,"children":698},{"style":447},[699],{"type":173,"value":700},"  \n",{"type":167,"tag":376,"props":702,"children":704},{"class":378,"line":703},12,[705],{"type":167,"tag":376,"props":706,"children":707},{"style":431},[708],{"type":173,"value":709},"  // This will change any packages using baz@x.x.x to use baz@1.2.3\n",{"type":167,"tag":376,"props":711,"children":713},{"class":378,"line":712},13,[714,718,722,726,730,734,738,743,748],{"type":167,"tag":376,"props":715,"children":716},{"style":441},[717],{"type":173,"value":444},{"type":167,"tag":376,"props":719,"children":720},{"style":447},[721],{"type":173,"value":450},{"type":167,"tag":376,"props":723,"children":724},{"style":453},[725],{"type":173,"value":404},{"type":167,"tag":376,"props":727,"children":728},{"style":395},[729],{"type":173,"value":460},{"type":167,"tag":376,"props":731,"children":732},{"style":453},[733],{"type":173,"value":570},{"type":167,"tag":376,"props":735,"children":736},{"style":395},[737],{"type":173,"value":460},{"type":167,"tag":376,"props":739,"children":740},{"style":453},[741],{"type":173,"value":742},"baz",{"type":167,"tag":376,"props":744,"children":745},{"style":447},[746],{"type":173,"value":747},") ",{"type":167,"tag":376,"props":749,"children":750},{"style":395},[751],{"type":173,"value":543},{"type":167,"tag":376,"props":753,"children":755},{"class":378,"line":754},14,[756,760,764,768,772,776,780,784,789,793],{"type":167,"tag":376,"props":757,"children":758},{"style":453},[759],{"type":173,"value":561},{"type":167,"tag":376,"props":761,"children":762},{"style":395},[763],{"type":173,"value":460},{"type":167,"tag":376,"props":765,"children":766},{"style":453},[767],{"type":173,"value":570},{"type":167,"tag":376,"props":769,"children":770},{"style":395},[771],{"type":173,"value":460},{"type":167,"tag":376,"props":773,"children":774},{"style":453},[775],{"type":173,"value":742},{"type":167,"tag":376,"props":777,"children":778},{"style":468},[779],{"type":173,"value":575},{"type":167,"tag":376,"props":781,"children":782},{"style":474},[783],{"type":173,"value":477},{"type":167,"tag":376,"props":785,"children":786},{"style":480},[787],{"type":173,"value":788},"1.2.3",{"type":167,"tag":376,"props":790,"children":791},{"style":474},[792],{"type":173,"value":488},{"type":167,"tag":376,"props":794,"children":795},{"style":395},[796],{"type":173,"value":797},";\n",{"type":167,"tag":376,"props":799,"children":801},{"class":378,"line":800},15,[802],{"type":167,"tag":376,"props":803,"children":804},{"style":395},[805],{"type":173,"value":691},{"type":167,"tag":376,"props":807,"children":809},{"class":378,"line":808},16,[810],{"type":167,"tag":376,"props":811,"children":812},{"style":447},[813],{"type":173,"value":700},{"type":167,"tag":376,"props":815,"children":817},{"class":378,"line":816},17,[818,823],{"type":167,"tag":376,"props":819,"children":820},{"style":441},[821],{"type":173,"value":822},"  return",{"type":167,"tag":376,"props":824,"children":825},{"style":453},[826],{"type":173,"value":827}," pkg\n",{"type":167,"tag":376,"props":829,"children":831},{"class":378,"line":830},18,[832],{"type":167,"tag":376,"props":833,"children":834},{"style":395},[835],{"type":173,"value":836},"}\n",{"type":167,"tag":376,"props":838,"children":840},{"class":378,"line":839},19,[841],{"type":167,"tag":376,"props":842,"children":843},{"emptyLinePlaceholder":159},[844],{"type":173,"value":845},"\n",{"type":167,"tag":376,"props":847,"children":849},{"class":378,"line":848},20,[850,856,860,865,869],{"type":167,"tag":376,"props":851,"children":853},{"style":852},"--shiki-light:#39ADB5;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[854],{"type":173,"value":855},"module",{"type":167,"tag":376,"props":857,"children":858},{"style":395},[859],{"type":173,"value":460},{"type":167,"tag":376,"props":861,"children":862},{"style":852},[863],{"type":173,"value":864},"exports",{"type":167,"tag":376,"props":866,"children":867},{"style":468},[868],{"type":173,"value":575},{"type":167,"tag":376,"props":870,"children":871},{"style":395},[872],{"type":173,"value":424},{"type":167,"tag":376,"props":874,"children":876},{"class":378,"line":875},21,[877,882,886],{"type":167,"tag":376,"props":878,"children":879},{"style":447},[880],{"type":173,"value":881},"  hooks",{"type":167,"tag":376,"props":883,"children":884},{"style":395},[885],{"type":173,"value":619},{"type":167,"tag":376,"props":887,"children":888},{"style":395},[889],{"type":173,"value":424},{"type":167,"tag":376,"props":891,"children":893},{"class":378,"line":892},22,[894],{"type":167,"tag":376,"props":895,"children":896},{"style":453},[897],{"type":173,"value":898},"    readPackage\n",{"type":167,"tag":376,"props":900,"children":902},{"class":378,"line":901},23,[903],{"type":167,"tag":376,"props":904,"children":905},{"style":395},[906],{"type":173,"value":691},{"type":167,"tag":376,"props":908,"children":910},{"class":378,"line":909},24,[911],{"type":167,"tag":376,"props":912,"children":913},{"style":395},[914],{"type":173,"value":836},{"type":167,"tag":183,"props":916,"children":917},{},[918,920],{"type":173,"value":919},"见：",{"type":167,"tag":921,"props":922,"children":926},"a",{"href":923,"rel":924},"https://pnpm.io/pnpmfile",[925],"nofollow",[927],{"type":173,"value":928},"pnpmfile",{"type":167,"tag":168,"props":930,"children":932},{"id":931},"原理",[933],{"type":173,"value":931},{"type":167,"tag":176,"props":935,"children":937},{"id":936},"显著的优点",[938],{"type":173,"value":939},"显著的优点？",{"type":167,"tag":257,"props":941,"children":942},{},[943,948,953,966],{"type":167,"tag":261,"props":944,"children":945},{},[946],{"type":173,"value":947},"省磁盘空间，使用软硬链接和符号链接节约空间。",{"type":167,"tag":261,"props":949,"children":950},{},[951],{"type":173,"value":952},"安装依赖快，因为处理链接要比处理文件快，并且每个包的解析、下载和写入磁盘这三个阶段是分离的。",{"type":167,"tag":261,"props":954,"children":955},{},[956,958,964],{"type":173,"value":957},"内建支持 monorepo，所有命令支持 ",{"type":167,"tag":189,"props":959,"children":961},{"className":960},[],[962],{"type":173,"value":963},"--filter",{"type":173,"value":965}," 过滤包。",{"type":167,"tag":261,"props":967,"children":968},{},[969],{"type":173,"value":970},"依赖严格，避免幽灵依赖和依赖分身问题。",{"type":167,"tag":176,"props":972,"children":974},{"id":973},"依赖的层次结构是怎样的",[975],{"type":173,"value":976},"依赖的层次结构是怎样的？",{"type":167,"tag":183,"props":978,"children":979},{},[980,982,988,990,996,998,1004,1006,1012,1014,1019,1021,1026,1028,1033,1035,1041,1043,1048,1050,1056],{"type":173,"value":981},"当项目文件读取 ",{"type":167,"tag":189,"props":983,"children":985},{"className":984},[],[986],{"type":173,"value":987},"bar",{"type":173,"value":989}," 时，直接读取 ",{"type":167,"tag":189,"props":991,"children":993},{"className":992},[],[994],{"type":173,"value":995},"node_modules/bar",{"type":173,"value":997},"，但它其实是 ",{"type":167,"tag":189,"props":999,"children":1001},{"className":1000},[],[1002],{"type":173,"value":1003},".pnpm",{"type":173,"value":1005}," 文件夹下 ",{"type":167,"tag":189,"props":1007,"children":1009},{"className":1008},[],[1010],{"type":173,"value":1011},"bar/node_modules/bar",{"type":173,"value":1013}," 的一个符号链接。也就是说，他的真实的地址在 ",{"type":167,"tag":189,"props":1015,"children":1017},{"className":1016},[],[1018],{"type":173,"value":1003},{"type":173,"value":1020}," 文件夹下。这样一来，当 ",{"type":167,"tag":189,"props":1022,"children":1024},{"className":1023},[],[1025],{"type":173,"value":987},{"type":173,"value":1027}," 读取它的依赖的时候（项目的依赖的依赖），会在 ",{"type":167,"tag":189,"props":1029,"children":1031},{"className":1030},[],[1032],{"type":173,"value":987},{"type":173,"value":1034}," 的上层目录即 ",{"type":167,"tag":189,"props":1036,"children":1038},{"className":1037},[],[1039],{"type":173,"value":1040},"bar/node_modules",{"type":173,"value":1042}," 找到 ",{"type":167,"tag":189,"props":1044,"children":1046},{"className":1045},[],[1047],{"type":173,"value":483},{"type":173,"value":1049}," 这个依赖。项目文件没法读取 ",{"type":167,"tag":189,"props":1051,"children":1053},{"className":1052},[],[1054],{"type":173,"value":1055},"bar/node_modules/foo",{"type":173,"value":1057}," 所以避免了幽灵依赖问题。",{"type":167,"tag":183,"props":1059,"children":1060},{},[1061,1066,1068,1074,1076,1081,1083,1089],{"type":167,"tag":189,"props":1062,"children":1064},{"className":1063},[],[1065],{"type":173,"value":1055},{"type":173,"value":1067}," 要怎么找到它的依赖呢？它的真实地址在项目 ·（和官网的图有出入），所以 foo 也只能读取它自己的子依赖，即 ",{"type":167,"tag":189,"props":1069,"children":1071},{"className":1070},[],[1072],{"type":173,"value":1073},"node_modules/.pnpm/foo/node_modules",{"type":173,"value":1075},"。如果有依赖依赖了同一份（同一版本）的 ",{"type":167,"tag":189,"props":1077,"children":1079},{"className":1078},[],[1080],{"type":173,"value":483},{"type":173,"value":1082},"，那么它们的真实地址都是一样的 ",{"type":167,"tag":189,"props":1084,"children":1086},{"className":1085},[],[1087],{"type":173,"value":1088},"node_modules/.pnpm/foo/node_modules/foo",{"type":173,"value":1090},"，这样就避免依赖分身问题。",{"type":167,"tag":183,"props":1092,"children":1093},{},[1094],{"type":167,"tag":1095,"props":1096,"children":1099},"img",{"alt":1097,"src":1098},"Modules Mapping in pnpm","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220317192927.png",[],{"type":167,"tag":183,"props":1101,"children":1102},{},[1103,1104,1111,1113],{"type":173,"value":919},{"type":167,"tag":921,"props":1105,"children":1108},{"href":1106,"rel":1107},"https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way",[925],[1109],{"type":173,"value":1110},"Flat node_modules is not the only way | @pnpm",{"type":173,"value":1112},"、",{"type":167,"tag":921,"props":1114,"children":1117},{"href":1115,"rel":1116},"https://pnpm.io/symlinked-node-modules-structure",[925],[1118],{"type":173,"value":1119},"Symlinked node_modules structure | @pnpm",{"type":167,"tag":176,"props":1121,"children":1123},{"id":1122},"如何处理同级依赖",[1124],{"type":173,"value":1125},"如何处理同级依赖？",{"type":167,"tag":183,"props":1127,"children":1128},{},[1129,1131,1137,1139,1145,1147,1153,1155,1161,1163,1169,1170,1176],{"type":173,"value":1130},"当项目的两个包 A、B 依赖依赖了同一版本的 C，但是却安装了不同版本的 C 的同级依赖 D@1.0 和 D@1.1，这时，A 依赖的 C 的真实地址是 ",{"type":167,"tag":189,"props":1132,"children":1134},{"className":1133},[],[1135],{"type":173,"value":1136},".pnpm/C_D@1.0/node_modules/C",{"type":173,"value":1138},"，B 依赖的 C 的真实地址是 ",{"type":167,"tag":189,"props":1140,"children":1142},{"className":1141},[],[1143],{"type":173,"value":1144},".pnpm/C_D@1.1/node_modules/C",{"type":173,"value":1146},"。这样一来，两个 C 在读取其同级依赖时，分别读取了 ",{"type":167,"tag":189,"props":1148,"children":1150},{"className":1149},[],[1151],{"type":173,"value":1152},".pnpm/C_D@1.0/node_modules/D",{"type":173,"value":1154}," 和 ",{"type":167,"tag":189,"props":1156,"children":1158},{"className":1157},[],[1159],{"type":173,"value":1160},".pnpm/C_D@1.1/node_modules/D@1.0",{"type":173,"value":1162},"，分别对应真实地址 ",{"type":167,"tag":189,"props":1164,"children":1166},{"className":1165},[],[1167],{"type":173,"value":1168},".pnpm/D@1.0/node_modules/D",{"type":173,"value":1154},{"type":167,"tag":189,"props":1171,"children":1173},{"className":1172},[],[1174],{"type":173,"value":1175},".pnpm/D@1.1/node_modules/D",{"type":173,"value":1177},"。",{"type":167,"tag":183,"props":1179,"children":1180},{},[1181,1183,1189,1190,1196,1198,1204,1205,1210,1212,1218],{"type":173,"value":1182},"当同级依赖的深度增加时，层级结构也随之变得复杂。如果某个依赖 A 依赖了同一个 B，但是 B 子依赖 C 的版本不同（C@1.0 和 C@1.1），这样就创造出了指数级增长的软链数量。为了保证 B 能分别访问两个 C，B 的符号链接的被链接地址会有 ",{"type":167,"tag":189,"props":1184,"children":1186},{"className":1185},[],[1187],{"type":173,"value":1188},".pnpm/B_C@1.0/node_modules/B",{"type":173,"value":1154},{"type":167,"tag":189,"props":1191,"children":1193},{"className":1192},[],[1194],{"type":173,"value":1195},".pnpm/B_C@1.1/node_modules/B",{"type":173,"value":1197},"，而为此，A 的被链接地址也会有两个，",{"type":167,"tag":189,"props":1199,"children":1201},{"className":1200},[],[1202],{"type":173,"value":1203},".pnpm/A_C@1.0/node_modules/A",{"type":173,"value":1154},{"type":167,"tag":189,"props":1206,"children":1208},{"className":1207},[],[1209],{"type":173,"value":1203},{"type":173,"value":1211},"。从不同的 A 的被链接地址的上级目录 ",{"type":167,"tag":189,"props":1213,"children":1215},{"className":1214},[],[1216],{"type":173,"value":1217},"node_modules",{"type":173,"value":1219}," 可以读取到不同的 B 的被链目录，从不同的 B 可以读取到不同的 C。",{"type":167,"tag":235,"props":1221,"children":1224},{"code":1222,"language":173,"meta":160,"className":1223},"node_modules\n└── .pnpm\n    ├── a@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.0.0/node_modules/b\n    ├── a@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.1.0/node_modules/b\n    ├── b@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.0.0/node_modules/c\n    ├── b@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.1.0/node_modules/c\n    ├── c@1.0.0\n    ├── c@1.1.0\n",[239],[1225],{"type":167,"tag":189,"props":1226,"children":1227},{"__ignoreMap":160},[1228],{"type":173,"value":1222},{"type":167,"tag":183,"props":1230,"children":1231},{},[1232,1233],{"type":173,"value":919},{"type":167,"tag":921,"props":1234,"children":1237},{"href":1235,"rel":1236},"https://pnpm.io/how-peers-are-resolved",[925],[1238],{"type":173,"value":1239},"How peers are resolved | @pnpm",{"type":167,"tag":176,"props":1241,"children":1243},{"id":1242},"怎样兼容-nodejs-模块加载顺序",[1244],{"type":173,"value":1245},"怎样兼容 NodeJS 模块加载顺序？",{"type":167,"tag":183,"props":1247,"children":1248},{},[1249],{"type":173,"value":1250},"不论系统自带的模块，NodeJS 加载模块的顺序是这样的：",{"type":167,"tag":257,"props":1252,"children":1253},{},[1254,1259,1264,1269],{"type":167,"tag":261,"props":1255,"children":1256},{},[1257],{"type":173,"value":1258},"读取本文件夹中 node_modules 中对应名字的文件夹的 package.json，并寻找 main 字段对应的路径",{"type":167,"tag":261,"props":1260,"children":1261},{},[1262],{"type":173,"value":1263},"读取本文件夹中 node_modules 中对应名字的 js 文件",{"type":167,"tag":261,"props":1265,"children":1266},{},[1267],{"type":173,"value":1268},"读取本文件夹中 node_modules 中对应名字文件夹中的 index.js 文件",{"type":167,"tag":261,"props":1270,"children":1271},{},[1272],{"type":173,"value":1273},"跳出本文件夹，继续前三个步骤",{"type":167,"tag":183,"props":1275,"children":1276},{},[1277,1279,1284,1286,1292,1294,1300,1302,1307,1309,1315,1317,1323],{"type":173,"value":1278},"因为项目 ",{"type":167,"tag":189,"props":1280,"children":1282},{"className":1281},[],[1283],{"type":173,"value":995},{"type":173,"value":1285}," 是 ",{"type":167,"tag":189,"props":1287,"children":1289},{"className":1288},[],[1290],{"type":173,"value":1291},".pnpm/bar/node_modules/bar",{"type":173,"value":1293}," 的符号链接，所以项目文件可以直接读取 ",{"type":167,"tag":189,"props":1295,"children":1297},{"className":1296},[],[1298],{"type":173,"value":1299},"node_modules/bar/x.js",{"type":173,"value":1301},"。同时，如果 ",{"type":167,"tag":189,"props":1303,"children":1305},{"className":1304},[],[1306],{"type":173,"value":1299},{"type":173,"value":1308}," 需要加载 ",{"type":167,"tag":189,"props":1310,"children":1312},{"className":1311},[],[1313],{"type":173,"value":1314},"foo/x.js",{"type":173,"value":1316},"，那么在上述步骤的第 4 步，就能找到 ",{"type":167,"tag":189,"props":1318,"children":1320},{"className":1319},[],[1321],{"type":173,"value":1322},".pnpm/bar/node_modules/foo/x.js",{"type":173,"value":1324}," 文件。",{"type":167,"tag":176,"props":1326,"children":1328},{"id":1327},"为什么其模块层次只是比较严格的semistrict",[1329],{"type":173,"value":1330},"为什么其模块层次只是“比较严格的”（semistrict）？",{"type":167,"tag":183,"props":1332,"children":1333},{},[1334],{"type":173,"value":1335},"由 NodeJS 模块加载规则可知，在 pnpm 创造的依赖层次下，一个依赖的子依赖间仍有相互访问的能力。",{"type":167,"tag":176,"props":1337,"children":1339},{"id":1338},"为什么能节约磁盘空间",[1340],{"type":173,"value":1341},"为什么能节约磁盘空间？",{"type":167,"tag":183,"props":1343,"children":1344},{},[1345,1347,1353,1355,1361,1363,1369],{"type":173,"value":1346},"由 pnpm 创造的 node_modules 层级结构可以知道，所有依赖的符号链接的真实地址都在 ",{"type":167,"tag":189,"props":1348,"children":1350},{"className":1349},[],[1351],{"type":173,"value":1352},".pnpm/package-name/node_modules/package-name",{"type":173,"value":1354}," 这个文件夹中。这种文件夹会通过硬链接的形式链接到 ",{"type":167,"tag":189,"props":1356,"children":1358},{"className":1357},[],[1359],{"type":173,"value":1360},"user-document/.pnpm-store",{"type":173,"value":1362}," 中，所以相同的包只会存一份，也就是 ",{"type":167,"tag":189,"props":1364,"children":1366},{"className":1365},[],[1367],{"type":173,"value":1368},".pnpm-store/package-name",{"type":173,"value":1177},{"type":167,"tag":176,"props":1371,"children":1373},{"id":1372},"软硬链接有什么问题",[1374],{"type":173,"value":1375},"软硬链接有什么问题？",{"type":167,"tag":1377,"props":1378,"children":1379},"ul",{},[1380,1385,1390,1395],{"type":167,"tag":261,"props":1381,"children":1382},{},[1383],{"type":173,"value":1384},"特定的软链结构会导致某些应用出现死循环",{"type":167,"tag":261,"props":1386,"children":1387},{},[1388],{"type":173,"value":1389},"硬链接是同一份文件，不便调试",{"type":167,"tag":261,"props":1391,"children":1392},{},[1393],{"type":173,"value":1394},"软链接在非 SSD 上的读写会有性能损耗",{"type":167,"tag":261,"props":1396,"children":1397},{},[1398],{"type":173,"value":1399},"pnpm 创造的 node_modules 层级结构会破坏某些依赖依赖了相对路径的依赖的逻辑",{"type":167,"tag":183,"props":1401,"children":1402},{},[1403,1404],{"type":173,"value":919},{"type":167,"tag":921,"props":1405,"children":1408},{"href":1406,"rel":1407},"https://zhuanlan.zhihu.com/p/553804414",[925],[1409],{"type":173,"value":1410},"精读 pnpm",{"type":167,"tag":168,"props":1412,"children":1414},{"id":1413},"常见问题",[1415],{"type":173,"value":1413},{"type":167,"tag":176,"props":1417,"children":1419},{"id":1418},"pnpm-找不到全局路径的解决方法",[1420],{"type":173,"value":1421},"PNPM 找不到全局路径的解决方法？",{"type":167,"tag":183,"props":1423,"children":1424},{},[1425],{"type":173,"value":1426},"尽管设置了全局变量，也重新安装了最新版本 PNPM，也执行了 pnpm setup，却仍然报错找不到全局路径的临时解决方案：",{"type":167,"tag":235,"props":1428,"children":1432},{"code":1429,"language":1430,"meta":160,"className":1431,"style":160},"$PNPM_HOME=\"\u003Cpath>\" | pnpm install -g xxx\n","powershell","language-powershell shiki shiki-themes material-theme-lighter github-light github-dark monokai",[1433],{"type":167,"tag":189,"props":1434,"children":1435},{"__ignoreMap":160},[1436],{"type":167,"tag":376,"props":1437,"children":1438},{"class":378,"line":379},[1439,1444,1449,1454,1459,1464,1468,1473,1478,1483],{"type":167,"tag":376,"props":1440,"children":1441},{"style":395},[1442],{"type":173,"value":1443},"$",{"type":167,"tag":376,"props":1445,"children":1446},{"style":453},[1447],{"type":173,"value":1448},"PNPM_HOME",{"type":167,"tag":376,"props":1450,"children":1451},{"style":468},[1452],{"type":173,"value":1453},"=",{"type":167,"tag":376,"props":1455,"children":1456},{"style":474},[1457],{"type":173,"value":1458},"\"",{"type":167,"tag":376,"props":1460,"children":1461},{"style":480},[1462],{"type":173,"value":1463},"\u003Cpath>",{"type":167,"tag":376,"props":1465,"children":1466},{"style":474},[1467],{"type":173,"value":1458},{"type":167,"tag":376,"props":1469,"children":1470},{"style":468},[1471],{"type":173,"value":1472}," |",{"type":167,"tag":376,"props":1474,"children":1475},{"style":453},[1476],{"type":173,"value":1477}," pnpm install ",{"type":167,"tag":376,"props":1479,"children":1480},{"style":468},[1481],{"type":173,"value":1482},"-",{"type":167,"tag":376,"props":1484,"children":1485},{"style":453},[1486],{"type":173,"value":1487},"g xxx\n",{"type":167,"tag":176,"props":1489,"children":1491},{"id":1490},"pnpm-速度变慢了",[1492],{"type":173,"value":1493},"PNPM 速度变慢了？",{"type":167,"tag":183,"props":1495,"children":1496},{},[1497],{"type":173,"value":1498},"今天逛官网时，偶然发现 Readme 中的 benchmark 过时了。它说“要比 Yarn Classic 和 npm “快两倍以上，但是从 benchmark 来看，他要比 Yarn 和 npm 慢了不少。以后启用 NodeJS 20 以上时，如果问题得不到改善，我应该会重新选择 npm 而不是 pnpm，鉴于幽灵依赖和依赖分身带来的问题是可排查可解决的，而速度是解决不了的问题。",{"type":167,"tag":183,"props":1500,"children":1501},{},[1502],{"type":167,"tag":1095,"props":1503,"children":1506},{"alt":1504,"src":1505},"pnpm vs npm vs yarn benchmark","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20230605235736.png",[],{"type":167,"tag":183,"props":1508,"children":1509},{},[1510,1512],{"type":173,"value":1511},"相关见：",{"type":167,"tag":921,"props":1513,"children":1516},{"href":1514,"rel":1515},"https://github.com/pnpm/pnpm/issues/6447",[925],[1517],{"type":173,"value":1518},"pnpm seems to be consistently slower than yarn (classic)",{"type":167,"tag":176,"props":1520,"children":1522},{"id":1521},"和-bun-在安装速度上的对比",[1523],{"type":173,"value":1524},"和 Bun 在安装速度上的对比？",{"type":167,"tag":183,"props":1526,"children":1527},{},[1528],{"type":173,"value":1529},"有锁文件、本地缓存，无 node_modules 的情况下，bun 要比 pnpm 安装至少快 3 倍。",{"type":167,"tag":1377,"props":1531,"children":1532},{},[1533,1538],{"type":167,"tag":261,"props":1534,"children":1535},{},[1536],{"type":173,"value":1537},"一个原因是 pnpm、yarn 等工具会在安装时请求最新的 metadata，而 bun 使用的 metadata 源于本地缓存的 metadata。",{"type":167,"tag":261,"props":1539,"children":1540},{},[1541],{"type":173,"value":1542},"另一个原因是 pnpm 在创建 node_modules 层次结构是使用了大量的 symlink，相比其他包管理工具仅使用复制或 hardlink 有更多系统调用。",{"type":167,"tag":183,"props":1544,"children":1545},{},[1546],{"type":173,"value":1547},"所以如果想使 pnpm 更快的安装，可以使用 prefer-offline 选项，以及，node-linker=hoisted 也许有用。",{"type":167,"tag":183,"props":1549,"children":1550},{},[1551,1552],{"type":173,"value":919},{"type":167,"tag":921,"props":1553,"children":1556},{"href":1554,"rel":1555},"https://github.com/pnpm/pnpm/issues/7391",[925],[1557],{"type":173,"value":1558},"Bun.sh-like Module Resolution",{"type":167,"tag":176,"props":1560,"children":1562},{"id":1561},"关于-v8-版本的变化",[1563],{"type":173,"value":1564},"关于 V8 版本的变化？",{"type":167,"tag":1377,"props":1566,"children":1567},{},[1568,1587,1603,1614,1619,1624,1629],{"type":167,"tag":261,"props":1569,"children":1570},{},[1571,1577,1579,1585],{"type":167,"tag":189,"props":1572,"children":1574},{"className":1573},[],[1575],{"type":173,"value":1576},"resolve-peers-from-workspace-root",{"type":173,"value":1578}," is ",{"type":167,"tag":189,"props":1580,"children":1582},{"className":1581},[],[1583],{"type":173,"value":1584},"true",{"type":173,"value":1586}," by default",{"type":167,"tag":261,"props":1588,"children":1589},{},[1590,1596,1597,1602],{"type":167,"tag":189,"props":1591,"children":1593},{"className":1592},[],[1594],{"type":173,"value":1595},"auto-install-peers",{"type":173,"value":1578},{"type":167,"tag":189,"props":1598,"children":1600},{"className":1599},[],[1601],{"type":173,"value":1584},{"type":173,"value":1586},{"type":167,"tag":261,"props":1604,"children":1605},{},[1606,1612],{"type":167,"tag":189,"props":1607,"children":1609},{"className":1608},[],[1610],{"type":173,"value":1611},"dedupe-peer-dependents",{"type":173,"value":1613}," set to true by default",{"type":167,"tag":261,"props":1615,"children":1616},{},[1617],{"type":173,"value":1618},"停止 NodeJS 14 的支持",{"type":167,"tag":261,"props":1620,"children":1621},{},[1622],{"type":173,"value":1623},"lockfile v6 by default",{"type":167,"tag":261,"props":1625,"children":1626},{},[1627],{"type":173,"value":1628},"resolution mode（prebundle、time-based、lowest-direct）default set to lowest-based，需要注意手动升级，尤其是在没有锁文件的情况",{"type":167,"tag":261,"props":1630,"children":1631},{},[1632,1634,1640],{"type":173,"value":1633},"only deply ",{"type":167,"tag":189,"props":1635,"children":1637},{"className":1636},[],[1638],{"type":173,"value":1639},"files",{"type":173,"value":1641}," field when the field exist",{"type":167,"tag":176,"props":1643,"children":1645},{"id":1644},"pnp-模式下的依赖提升设置",[1646],{"type":173,"value":1647},"PnP 模式下的依赖提升设置？",{"type":167,"tag":183,"props":1649,"children":1650},{},[1651,1653,1659],{"type":173,"value":1652},"默认的 node_modules 依赖的层级处于严格和不严格之间的水平（semi-strict）。使用最严格的设置需要打开 PnP 模式，因为在 monorepo 中 PnP 模式中，就算开启了 ",{"type":167,"tag":189,"props":1654,"children":1656},{"className":1655},[],[1657],{"type":173,"value":1658},"hoist=false",{"type":173,"value":1660}," 也不会禁用 workspace root 的依赖",{"type":167,"tag":235,"props":1662,"children":1664},{"code":1663},"node-linker=pnp\nsymlink=false\n",[1665],{"type":167,"tag":189,"props":1666,"children":1667},{"__ignoreMap":160},[1668],{"type":173,"value":1663},{"type":167,"tag":183,"props":1670,"children":1671},{},[1672,1673],{"type":173,"value":919},{"type":167,"tag":921,"props":1674,"children":1677},{"href":1675,"rel":1676},"https://pnpm.io/blog/2020/10/17/node-modules-configuration-options-with-pnpm",[925],[1678],{"type":173,"value":1679},"Node-Modules configuration options with pnpm",{"type":167,"tag":176,"props":1681,"children":1683},{"id":1682},"在-windows-dev-driver-上可能会碰到的问题",[1684],{"type":173,"value":1685},"在 Windows Dev Driver 上可能会碰到的问题？",{"type":167,"tag":183,"props":1687,"children":1688},{},[1689],{"type":173,"value":1690},"2024 年初 pnpm 实现了 Dev Driver 上的 Copy on Write 功能，但可能会碰到变慢的问题。",{"type":167,"tag":183,"props":1692,"children":1693},{},[1694,1695],{"type":173,"value":919},{"type":167,"tag":921,"props":1696,"children":1699},{"href":1697,"rel":1698},"https://github.com/pnpm/pnpm/issues/7547",[925],[1700],{"type":173,"value":1701},"pnpm lately slow and pnpx stuck at installing deps using executable package",{"type":167,"tag":1703,"props":1704,"children":1705},"style",{},[1706],{"type":173,"value":1707},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":427,"depth":427,"links":1709},[1710,1711,1712],{"id":170,"depth":427,"text":174},{"id":931,"depth":427,"text":931},{"id":1413,"depth":427,"text":1413},"markdown","content:6.maps:_workflow:package-manager:pnpm.md","content","6.maps/_workflow/package-manager/pnpm.md","6.maps/_workflow/package-manager/pnpm","md",[1720,1724],{"_path":1721,"title":1722,"description":1723},"/maps/_workflow/package-manager/npm","NPM","NPM 包管理器完整指南，包含 package.json 配置、镜像源管理、依赖安装等核心功能的详细说明。",{"_path":1725,"title":1726,"description":1727},"/maps/_workflow/packer","打包工具","前端打包工具全景图，涵盖 Vite、Webpack、Rollup、tsup、Unbuild、Rome 等主流工具的特性对比和使用说明。",1742348691776]