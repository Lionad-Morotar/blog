[{"data":1,"prerenderedAt":1750},["ShallowReactive",2],{"navigation":3,"/maps/_workflow/package-manager/pnpm":158,"/maps/_workflow/package-manager/pnpm-surround":1741},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":165,"body":166,"_type":1735,"_id":1736,"_source":1737,"_file":1738,"_stem":1739,"_extension":1740},"/maps/_workflow/package-manager/pnpm","package-manager",false,true,"","pnpm","pnpm 是一个快速、省空间的包管理器",{"type":167,"children":168,"toc":1730},"root",[169,178,185,199,205,215,220,226,237,248,254,259,313,319,324,329,334,352,358,369,918,932,937,943,974,980,1061,1094,1103,1123,1129,1181,1223,1232,1243,1249,1254,1277,1328,1334,1339,1345,1373,1379,1403,1414,1419,1425,1430,1491,1497,1502,1510,1522,1528,1533,1546,1551,1562,1568,1645,1651,1664,1672,1683,1689,1694,1705,1711,1716,1724],{"type":170,"tag":171,"props":172,"children":174},"element","h2",{"id":173},"api-细节和配置项",[175],{"type":176,"value":177},"text","API 细节和配置项",{"type":170,"tag":179,"props":180,"children":182},"h4",{"id":181},"pnpm-import",[183],{"type":176,"value":184},"pnpm import",{"type":170,"tag":186,"props":187,"children":188},"p",{},[189,191,197],{"type":176,"value":190},"使用 ",{"type":170,"tag":192,"props":193,"children":195},"code",{"className":194},[],[196],{"type":176,"value":184},{"type":176,"value":198}," 可以将 package-lock、npm-shrinkwrap 和 yarn.lock 转换为 pnpm-lock 文件。",{"type":170,"tag":179,"props":200,"children":202},{"id":201},"pnpm-fetch",[203],{"type":176,"value":204},"pnpm fetch",{"type":170,"tag":186,"props":206,"children":207},{},[208,213],{"type":170,"tag":192,"props":209,"children":211},{"className":210},[],[212],{"type":176,"value":204},{"type":176,"value":214}," 它跳过了 package.json 文件，允许项目在只有 pnpm-lock 文件的情况下创建 .pnpm 虚拟仓库。这有利于 docker 构建，因为 package.json 经常因为非依赖变化的改动而改动，导致 docker layer 失效。",{"type":170,"tag":186,"props":216,"children":217},{},[218],{"type":176,"value":219},"相比 yarn 和 npm，在脱离 package.json 的情况下，单靠 package-lock（或 yarn-lock），yarn 和 npm 没有办法确定依赖版本，因为其 package-lock 中，依赖的版本号不是固定版本号。",{"type":170,"tag":179,"props":221,"children":223},{"id":222},"pnpm-why",[224],{"type":176,"value":225},"pnpm why",{"type":170,"tag":186,"props":227,"children":228},{},[229,230,235],{"type":176,"value":190},{"type":170,"tag":192,"props":231,"children":233},{"className":232},[],[234],{"type":176,"value":225},{"type":176,"value":236}," 可以列出项目内依赖了某个依赖的依赖，比如说找到项目内使用了 lodash 的包。",{"type":170,"tag":238,"props":239,"children":243},"pre",{"code":240,"language":176,"meta":163,"className":241},"dependencies:\nelement-plus 2.2.20\n├── lodash 4.17.21\n└─┬ lodash-unified 1.0.3\n  └── lodash 4.17.21 peer\n...\n",[242],"language-text",[244],{"type":170,"tag":192,"props":245,"children":246},{"__ignoreMap":163},[247],{"type":176,"value":240},{"type":170,"tag":179,"props":249,"children":251},{"id":250},"pnpm-run",[252],{"type":176,"value":253},"pnpm run",{"type":170,"tag":186,"props":255,"children":256},{},[257],{"type":176,"value":258},"与其它包管理器的一些区别：",{"type":170,"tag":260,"props":261,"children":262},"ol",{},[263,289,294],{"type":170,"tag":264,"props":265,"children":266},"li",{},[267,273,275,281,283],{"type":170,"tag":192,"props":268,"children":270},{"className":269},[],[271],{"type":176,"value":272},"pnpm run script-name",{"type":176,"value":274},"，如果 ",{"type":170,"tag":192,"props":276,"children":278},{"className":277},[],[279],{"type":176,"value":280},"script-name",{"type":176,"value":282}," 没有和 pnpm 内置指令冲突，则可以省略 ",{"type":170,"tag":192,"props":284,"children":286},{"className":285},[],[287],{"type":176,"value":288},"run",{"type":170,"tag":264,"props":290,"children":291},{},[292],{"type":176,"value":293},"run 指令默认不会执行 pre 和 post 钩子函数，因为 pnpm 认为这使任务流更难理解",{"type":170,"tag":264,"props":295,"children":296},{},[297,303,305,311],{"type":170,"tag":192,"props":298,"children":300},{"className":299},[],[301],{"type":176,"value":302},"shell-emulator",{"type":176,"value":304}," 选项启用后，将使用 JS 解析指令，这使得在不兼容 POSIX 的环境执行类似 ",{"type":170,"tag":192,"props":306,"children":308},{"className":307},[],[309],{"type":176,"value":310},"NODE_ENV=test node ./index",{"type":176,"value":312}," 的指令会报错的系统也能正常运行这种指令",{"type":170,"tag":179,"props":314,"children":316},{"id":315},"pnpm-pack",[317],{"type":176,"value":318},"pnpm pack",{"type":170,"tag":186,"props":320,"children":321},{},[322],{"type":176,"value":323},"将项目打包为 tarball 压缩包（.tgz）。打包的文件范围和 pnpm publish 一样。",{"type":170,"tag":179,"props":325,"children":327},{"id":326},"shared-workspace-lockfile",[328],{"type":176,"value":326},{"type":170,"tag":186,"props":330,"children":331},{},[332],{"type":176,"value":333},"在 workspace 间共享一份 package-lock 文件。这个配置开启后，所有子包的依赖都会被提升到 workspace 根目录，这带来了几个好处：",{"type":170,"tag":260,"props":335,"children":336},{},[337,342,347],{"type":170,"tag":264,"props":338,"children":339},{},[340],{"type":176,"value":341},"所有依赖都是单例的",{"type":170,"tag":264,"props":343,"children":344},{},[345],{"type":176,"value":346},"更快的安装速度（相比 pnpm install -r）",{"type":170,"tag":264,"props":348,"children":349},{},[350],{"type":176,"value":351},"修改的文件总数更少，利于 Code Review",{"type":170,"tag":179,"props":353,"children":355},{"id":354},"pnpmfilecjs",[356],{"type":176,"value":357},".pnpmfile.cjs",{"type":170,"tag":186,"props":359,"children":360},{},[361,362,367],{"type":176,"value":190},{"type":170,"tag":192,"props":363,"children":365},{"className":364},[],[366],{"type":176,"value":357},{"type":176,"value":368}," 文件提供的 readPackage 和 afterAllResolved 钩子函数可以分别介入依赖元信息解析（minifest）和依赖安装完准备输出 lock 文件的过程。",{"type":170,"tag":238,"props":370,"children":374},{"code":371,"language":372,"meta":163,"className":373,"style":163},"function readPackage(pkg, context) {\n  // Override the manifest of foo@1.x after downloading it from the registry\n  if (pkg.name === 'foo' && pkg.version.startsWith('1.')) {\n    // Replace bar@x.x.x with bar@2.0.0\n    pkg.dependencies = {\n      ...pkg.dependencies,\n      bar: '^2.0.0'\n    }\n    context.log('bar@1 => bar@2 in dependencies of foo')\n  }\n  \n  // This will change any packages using baz@x.x.x to use baz@1.2.3\n  if (pkg.dependencies.baz) {\n    pkg.dependencies.baz = '1.2.3';\n  }\n  \n  return pkg\n}\n\nmodule.exports = {\n  hooks: {\n    readPackage\n  }\n}\n","js","language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai",[375],{"type":170,"tag":192,"props":376,"children":377},{"__ignoreMap":163},[378,428,438,547,556,583,609,637,646,686,695,704,713,755,801,809,817,831,840,849,876,893,902,910],{"type":170,"tag":379,"props":380,"children":383},"span",{"class":381,"line":382},"line",1,[384,390,396,402,408,413,418,423],{"type":170,"tag":379,"props":385,"children":387},{"style":386},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[388],{"type":176,"value":389},"function",{"type":170,"tag":379,"props":391,"children":393},{"style":392},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[394],{"type":176,"value":395}," readPackage",{"type":170,"tag":379,"props":397,"children":399},{"style":398},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[400],{"type":176,"value":401},"(",{"type":170,"tag":379,"props":403,"children":405},{"style":404},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[406],{"type":176,"value":407},"pkg",{"type":170,"tag":379,"props":409,"children":410},{"style":398},[411],{"type":176,"value":412},",",{"type":170,"tag":379,"props":414,"children":415},{"style":404},[416],{"type":176,"value":417}," context",{"type":170,"tag":379,"props":419,"children":420},{"style":398},[421],{"type":176,"value":422},")",{"type":170,"tag":379,"props":424,"children":425},{"style":398},[426],{"type":176,"value":427}," {\n",{"type":170,"tag":379,"props":429,"children":431},{"class":381,"line":430},2,[432],{"type":170,"tag":379,"props":433,"children":435},{"style":434},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[436],{"type":176,"value":437},"  // Override the manifest of foo@1.x after downloading it from the registry\n",{"type":170,"tag":379,"props":439,"children":441},{"class":381,"line":440},3,[442,448,454,459,464,469,475,481,487,492,497,502,506,511,515,520,524,528,533,537,542],{"type":170,"tag":379,"props":443,"children":445},{"style":444},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[446],{"type":176,"value":447},"  if",{"type":170,"tag":379,"props":449,"children":451},{"style":450},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[452],{"type":176,"value":453}," (",{"type":170,"tag":379,"props":455,"children":457},{"style":456},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[458],{"type":176,"value":407},{"type":170,"tag":379,"props":460,"children":461},{"style":398},[462],{"type":176,"value":463},".",{"type":170,"tag":379,"props":465,"children":466},{"style":456},[467],{"type":176,"value":468},"name",{"type":170,"tag":379,"props":470,"children":472},{"style":471},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[473],{"type":176,"value":474}," ===",{"type":170,"tag":379,"props":476,"children":478},{"style":477},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[479],{"type":176,"value":480}," '",{"type":170,"tag":379,"props":482,"children":484},{"style":483},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[485],{"type":176,"value":486},"foo",{"type":170,"tag":379,"props":488,"children":489},{"style":477},[490],{"type":176,"value":491},"'",{"type":170,"tag":379,"props":493,"children":494},{"style":471},[495],{"type":176,"value":496}," &&",{"type":170,"tag":379,"props":498,"children":499},{"style":456},[500],{"type":176,"value":501}," pkg",{"type":170,"tag":379,"props":503,"children":504},{"style":398},[505],{"type":176,"value":463},{"type":170,"tag":379,"props":507,"children":508},{"style":456},[509],{"type":176,"value":510},"version",{"type":170,"tag":379,"props":512,"children":513},{"style":398},[514],{"type":176,"value":463},{"type":170,"tag":379,"props":516,"children":517},{"style":392},[518],{"type":176,"value":519},"startsWith",{"type":170,"tag":379,"props":521,"children":522},{"style":450},[523],{"type":176,"value":401},{"type":170,"tag":379,"props":525,"children":526},{"style":477},[527],{"type":176,"value":491},{"type":170,"tag":379,"props":529,"children":530},{"style":483},[531],{"type":176,"value":532},"1.",{"type":170,"tag":379,"props":534,"children":535},{"style":477},[536],{"type":176,"value":491},{"type":170,"tag":379,"props":538,"children":539},{"style":450},[540],{"type":176,"value":541},")) ",{"type":170,"tag":379,"props":543,"children":544},{"style":398},[545],{"type":176,"value":546},"{\n",{"type":170,"tag":379,"props":548,"children":550},{"class":381,"line":549},4,[551],{"type":170,"tag":379,"props":552,"children":553},{"style":434},[554],{"type":176,"value":555},"    // Replace bar@x.x.x with bar@2.0.0\n",{"type":170,"tag":379,"props":557,"children":559},{"class":381,"line":558},5,[560,565,569,574,579],{"type":170,"tag":379,"props":561,"children":562},{"style":456},[563],{"type":176,"value":564},"    pkg",{"type":170,"tag":379,"props":566,"children":567},{"style":398},[568],{"type":176,"value":463},{"type":170,"tag":379,"props":570,"children":571},{"style":456},[572],{"type":176,"value":573},"dependencies",{"type":170,"tag":379,"props":575,"children":576},{"style":471},[577],{"type":176,"value":578}," =",{"type":170,"tag":379,"props":580,"children":581},{"style":398},[582],{"type":176,"value":427},{"type":170,"tag":379,"props":584,"children":586},{"class":381,"line":585},6,[587,592,596,600,604],{"type":170,"tag":379,"props":588,"children":589},{"style":471},[590],{"type":176,"value":591},"      ...",{"type":170,"tag":379,"props":593,"children":594},{"style":456},[595],{"type":176,"value":407},{"type":170,"tag":379,"props":597,"children":598},{"style":398},[599],{"type":176,"value":463},{"type":170,"tag":379,"props":601,"children":602},{"style":456},[603],{"type":176,"value":573},{"type":170,"tag":379,"props":605,"children":606},{"style":398},[607],{"type":176,"value":608},",\n",{"type":170,"tag":379,"props":610,"children":612},{"class":381,"line":611},7,[613,618,623,627,632],{"type":170,"tag":379,"props":614,"children":615},{"style":450},[616],{"type":176,"value":617},"      bar",{"type":170,"tag":379,"props":619,"children":620},{"style":398},[621],{"type":176,"value":622},":",{"type":170,"tag":379,"props":624,"children":625},{"style":477},[626],{"type":176,"value":480},{"type":170,"tag":379,"props":628,"children":629},{"style":483},[630],{"type":176,"value":631},"^2.0.0",{"type":170,"tag":379,"props":633,"children":634},{"style":477},[635],{"type":176,"value":636},"'\n",{"type":170,"tag":379,"props":638,"children":640},{"class":381,"line":639},8,[641],{"type":170,"tag":379,"props":642,"children":643},{"style":398},[644],{"type":176,"value":645},"    }\n",{"type":170,"tag":379,"props":647,"children":649},{"class":381,"line":648},9,[650,655,659,664,668,672,677,681],{"type":170,"tag":379,"props":651,"children":652},{"style":456},[653],{"type":176,"value":654},"    context",{"type":170,"tag":379,"props":656,"children":657},{"style":398},[658],{"type":176,"value":463},{"type":170,"tag":379,"props":660,"children":661},{"style":392},[662],{"type":176,"value":663},"log",{"type":170,"tag":379,"props":665,"children":666},{"style":450},[667],{"type":176,"value":401},{"type":170,"tag":379,"props":669,"children":670},{"style":477},[671],{"type":176,"value":491},{"type":170,"tag":379,"props":673,"children":674},{"style":483},[675],{"type":176,"value":676},"bar@1 => bar@2 in dependencies of foo",{"type":170,"tag":379,"props":678,"children":679},{"style":477},[680],{"type":176,"value":491},{"type":170,"tag":379,"props":682,"children":683},{"style":450},[684],{"type":176,"value":685},")\n",{"type":170,"tag":379,"props":687,"children":689},{"class":381,"line":688},10,[690],{"type":170,"tag":379,"props":691,"children":692},{"style":398},[693],{"type":176,"value":694},"  }\n",{"type":170,"tag":379,"props":696,"children":698},{"class":381,"line":697},11,[699],{"type":170,"tag":379,"props":700,"children":701},{"style":450},[702],{"type":176,"value":703},"  \n",{"type":170,"tag":379,"props":705,"children":707},{"class":381,"line":706},12,[708],{"type":170,"tag":379,"props":709,"children":710},{"style":434},[711],{"type":176,"value":712},"  // This will change any packages using baz@x.x.x to use baz@1.2.3\n",{"type":170,"tag":379,"props":714,"children":716},{"class":381,"line":715},13,[717,721,725,729,733,737,741,746,751],{"type":170,"tag":379,"props":718,"children":719},{"style":444},[720],{"type":176,"value":447},{"type":170,"tag":379,"props":722,"children":723},{"style":450},[724],{"type":176,"value":453},{"type":170,"tag":379,"props":726,"children":727},{"style":456},[728],{"type":176,"value":407},{"type":170,"tag":379,"props":730,"children":731},{"style":398},[732],{"type":176,"value":463},{"type":170,"tag":379,"props":734,"children":735},{"style":456},[736],{"type":176,"value":573},{"type":170,"tag":379,"props":738,"children":739},{"style":398},[740],{"type":176,"value":463},{"type":170,"tag":379,"props":742,"children":743},{"style":456},[744],{"type":176,"value":745},"baz",{"type":170,"tag":379,"props":747,"children":748},{"style":450},[749],{"type":176,"value":750},") ",{"type":170,"tag":379,"props":752,"children":753},{"style":398},[754],{"type":176,"value":546},{"type":170,"tag":379,"props":756,"children":758},{"class":381,"line":757},14,[759,763,767,771,775,779,783,787,792,796],{"type":170,"tag":379,"props":760,"children":761},{"style":456},[762],{"type":176,"value":564},{"type":170,"tag":379,"props":764,"children":765},{"style":398},[766],{"type":176,"value":463},{"type":170,"tag":379,"props":768,"children":769},{"style":456},[770],{"type":176,"value":573},{"type":170,"tag":379,"props":772,"children":773},{"style":398},[774],{"type":176,"value":463},{"type":170,"tag":379,"props":776,"children":777},{"style":456},[778],{"type":176,"value":745},{"type":170,"tag":379,"props":780,"children":781},{"style":471},[782],{"type":176,"value":578},{"type":170,"tag":379,"props":784,"children":785},{"style":477},[786],{"type":176,"value":480},{"type":170,"tag":379,"props":788,"children":789},{"style":483},[790],{"type":176,"value":791},"1.2.3",{"type":170,"tag":379,"props":793,"children":794},{"style":477},[795],{"type":176,"value":491},{"type":170,"tag":379,"props":797,"children":798},{"style":398},[799],{"type":176,"value":800},";\n",{"type":170,"tag":379,"props":802,"children":804},{"class":381,"line":803},15,[805],{"type":170,"tag":379,"props":806,"children":807},{"style":398},[808],{"type":176,"value":694},{"type":170,"tag":379,"props":810,"children":812},{"class":381,"line":811},16,[813],{"type":170,"tag":379,"props":814,"children":815},{"style":450},[816],{"type":176,"value":703},{"type":170,"tag":379,"props":818,"children":820},{"class":381,"line":819},17,[821,826],{"type":170,"tag":379,"props":822,"children":823},{"style":444},[824],{"type":176,"value":825},"  return",{"type":170,"tag":379,"props":827,"children":828},{"style":456},[829],{"type":176,"value":830}," pkg\n",{"type":170,"tag":379,"props":832,"children":834},{"class":381,"line":833},18,[835],{"type":170,"tag":379,"props":836,"children":837},{"style":398},[838],{"type":176,"value":839},"}\n",{"type":170,"tag":379,"props":841,"children":843},{"class":381,"line":842},19,[844],{"type":170,"tag":379,"props":845,"children":846},{"emptyLinePlaceholder":162},[847],{"type":176,"value":848},"\n",{"type":170,"tag":379,"props":850,"children":852},{"class":381,"line":851},20,[853,859,863,868,872],{"type":170,"tag":379,"props":854,"children":856},{"style":855},"--shiki-light:#39ADB5;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[857],{"type":176,"value":858},"module",{"type":170,"tag":379,"props":860,"children":861},{"style":398},[862],{"type":176,"value":463},{"type":170,"tag":379,"props":864,"children":865},{"style":855},[866],{"type":176,"value":867},"exports",{"type":170,"tag":379,"props":869,"children":870},{"style":471},[871],{"type":176,"value":578},{"type":170,"tag":379,"props":873,"children":874},{"style":398},[875],{"type":176,"value":427},{"type":170,"tag":379,"props":877,"children":879},{"class":381,"line":878},21,[880,885,889],{"type":170,"tag":379,"props":881,"children":882},{"style":450},[883],{"type":176,"value":884},"  hooks",{"type":170,"tag":379,"props":886,"children":887},{"style":398},[888],{"type":176,"value":622},{"type":170,"tag":379,"props":890,"children":891},{"style":398},[892],{"type":176,"value":427},{"type":170,"tag":379,"props":894,"children":896},{"class":381,"line":895},22,[897],{"type":170,"tag":379,"props":898,"children":899},{"style":456},[900],{"type":176,"value":901},"    readPackage\n",{"type":170,"tag":379,"props":903,"children":905},{"class":381,"line":904},23,[906],{"type":170,"tag":379,"props":907,"children":908},{"style":398},[909],{"type":176,"value":694},{"type":170,"tag":379,"props":911,"children":913},{"class":381,"line":912},24,[914],{"type":170,"tag":379,"props":915,"children":916},{"style":398},[917],{"type":176,"value":839},{"type":170,"tag":186,"props":919,"children":920},{},[921,923],{"type":176,"value":922},"见：",{"type":170,"tag":924,"props":925,"children":929},"a",{"href":926,"rel":927},"https://pnpm.io/pnpmfile",[928],"nofollow",[930],{"type":176,"value":931},"pnpmfile",{"type":170,"tag":171,"props":933,"children":935},{"id":934},"原理",[936],{"type":176,"value":934},{"type":170,"tag":179,"props":938,"children":940},{"id":939},"显著的优点",[941],{"type":176,"value":942},"显著的优点？",{"type":170,"tag":260,"props":944,"children":945},{},[946,951,956,969],{"type":170,"tag":264,"props":947,"children":948},{},[949],{"type":176,"value":950},"省磁盘空间，使用软硬链接和符号链接节约空间。",{"type":170,"tag":264,"props":952,"children":953},{},[954],{"type":176,"value":955},"安装依赖快，因为处理链接要比处理文件快，并且每个包的解析、下载和写入磁盘这三个阶段是分离的。",{"type":170,"tag":264,"props":957,"children":958},{},[959,961,967],{"type":176,"value":960},"内建支持 monorepo，所有命令支持 ",{"type":170,"tag":192,"props":962,"children":964},{"className":963},[],[965],{"type":176,"value":966},"--filter",{"type":176,"value":968}," 过滤包。",{"type":170,"tag":264,"props":970,"children":971},{},[972],{"type":176,"value":973},"依赖严格，避免幽灵依赖和依赖分身问题。",{"type":170,"tag":179,"props":975,"children":977},{"id":976},"依赖的层次结构是怎样的",[978],{"type":176,"value":979},"依赖的层次结构是怎样的？",{"type":170,"tag":186,"props":981,"children":982},{},[983,985,991,993,999,1001,1007,1009,1015,1017,1022,1024,1029,1031,1036,1038,1044,1046,1051,1053,1059],{"type":176,"value":984},"当项目文件读取 ",{"type":170,"tag":192,"props":986,"children":988},{"className":987},[],[989],{"type":176,"value":990},"bar",{"type":176,"value":992}," 时，直接读取 ",{"type":170,"tag":192,"props":994,"children":996},{"className":995},[],[997],{"type":176,"value":998},"node_modules/bar",{"type":176,"value":1000},"，但它其实是 ",{"type":170,"tag":192,"props":1002,"children":1004},{"className":1003},[],[1005],{"type":176,"value":1006},".pnpm",{"type":176,"value":1008}," 文件夹下 ",{"type":170,"tag":192,"props":1010,"children":1012},{"className":1011},[],[1013],{"type":176,"value":1014},"bar/node_modules/bar",{"type":176,"value":1016}," 的一个符号链接。也就是说，他的真实的地址在 ",{"type":170,"tag":192,"props":1018,"children":1020},{"className":1019},[],[1021],{"type":176,"value":1006},{"type":176,"value":1023}," 文件夹下。这样一来，当 ",{"type":170,"tag":192,"props":1025,"children":1027},{"className":1026},[],[1028],{"type":176,"value":990},{"type":176,"value":1030}," 读取它的依赖的时候（项目的依赖的依赖），会在 ",{"type":170,"tag":192,"props":1032,"children":1034},{"className":1033},[],[1035],{"type":176,"value":990},{"type":176,"value":1037}," 的上层目录即 ",{"type":170,"tag":192,"props":1039,"children":1041},{"className":1040},[],[1042],{"type":176,"value":1043},"bar/node_modules",{"type":176,"value":1045}," 找到 ",{"type":170,"tag":192,"props":1047,"children":1049},{"className":1048},[],[1050],{"type":176,"value":486},{"type":176,"value":1052}," 这个依赖。项目文件没法读取 ",{"type":170,"tag":192,"props":1054,"children":1056},{"className":1055},[],[1057],{"type":176,"value":1058},"bar/node_modules/foo",{"type":176,"value":1060}," 所以避免了幽灵依赖问题。",{"type":170,"tag":186,"props":1062,"children":1063},{},[1064,1069,1071,1077,1079,1084,1086,1092],{"type":170,"tag":192,"props":1065,"children":1067},{"className":1066},[],[1068],{"type":176,"value":1058},{"type":176,"value":1070}," 要怎么找到它的依赖呢？它的真实地址在项目 ·（和官网的图有出入），所以 foo 也只能读取它自己的子依赖，即 ",{"type":170,"tag":192,"props":1072,"children":1074},{"className":1073},[],[1075],{"type":176,"value":1076},"node_modules/.pnpm/foo/node_modules",{"type":176,"value":1078},"。如果有依赖依赖了同一份（同一版本）的 ",{"type":170,"tag":192,"props":1080,"children":1082},{"className":1081},[],[1083],{"type":176,"value":486},{"type":176,"value":1085},"，那么它们的真实地址都是一样的 ",{"type":170,"tag":192,"props":1087,"children":1089},{"className":1088},[],[1090],{"type":176,"value":1091},"node_modules/.pnpm/foo/node_modules/foo",{"type":176,"value":1093},"，这样就避免依赖分身问题。",{"type":170,"tag":186,"props":1095,"children":1096},{},[1097],{"type":170,"tag":1098,"props":1099,"children":1102},"img",{"alt":1100,"src":1101},"Modules Mapping in pnpm","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220317192927.png",[],{"type":170,"tag":186,"props":1104,"children":1105},{},[1106,1107,1114,1116],{"type":176,"value":922},{"type":170,"tag":924,"props":1108,"children":1111},{"href":1109,"rel":1110},"https://pnpm.io/blog/2020/05/27/flat-node-modules-is-not-the-only-way",[928],[1112],{"type":176,"value":1113},"Flat node_modules is not the only way | @pnpm",{"type":176,"value":1115},"、",{"type":170,"tag":924,"props":1117,"children":1120},{"href":1118,"rel":1119},"https://pnpm.io/symlinked-node-modules-structure",[928],[1121],{"type":176,"value":1122},"Symlinked node_modules structure | @pnpm",{"type":170,"tag":179,"props":1124,"children":1126},{"id":1125},"如何处理同级依赖",[1127],{"type":176,"value":1128},"如何处理同级依赖？",{"type":170,"tag":186,"props":1130,"children":1131},{},[1132,1134,1140,1142,1148,1150,1156,1158,1164,1166,1172,1173,1179],{"type":176,"value":1133},"当项目的两个包 A、B 依赖依赖了同一版本的 C，但是却安装了不同版本的 C 的同级依赖 D@1.0 和 D@1.1，这时，A 依赖的 C 的真实地址是 ",{"type":170,"tag":192,"props":1135,"children":1137},{"className":1136},[],[1138],{"type":176,"value":1139},".pnpm/C_D@1.0/node_modules/C",{"type":176,"value":1141},"，B 依赖的 C 的真实地址是 ",{"type":170,"tag":192,"props":1143,"children":1145},{"className":1144},[],[1146],{"type":176,"value":1147},".pnpm/C_D@1.1/node_modules/C",{"type":176,"value":1149},"。这样一来，两个 C 在读取其同级依赖时，分别读取了 ",{"type":170,"tag":192,"props":1151,"children":1153},{"className":1152},[],[1154],{"type":176,"value":1155},".pnpm/C_D@1.0/node_modules/D",{"type":176,"value":1157}," 和 ",{"type":170,"tag":192,"props":1159,"children":1161},{"className":1160},[],[1162],{"type":176,"value":1163},".pnpm/C_D@1.1/node_modules/D@1.0",{"type":176,"value":1165},"，分别对应真实地址 ",{"type":170,"tag":192,"props":1167,"children":1169},{"className":1168},[],[1170],{"type":176,"value":1171},".pnpm/D@1.0/node_modules/D",{"type":176,"value":1157},{"type":170,"tag":192,"props":1174,"children":1176},{"className":1175},[],[1177],{"type":176,"value":1178},".pnpm/D@1.1/node_modules/D",{"type":176,"value":1180},"。",{"type":170,"tag":186,"props":1182,"children":1183},{},[1184,1186,1192,1193,1199,1201,1207,1208,1213,1215,1221],{"type":176,"value":1185},"当同级依赖的深度增加时，层级结构也随之变得复杂。如果某个依赖 A 依赖了同一个 B，但是 B 子依赖 C 的版本不同（C@1.0 和 C@1.1），这样就创造出了指数级增长的软链数量。为了保证 B 能分别访问两个 C，B 的符号链接的被链接地址会有 ",{"type":170,"tag":192,"props":1187,"children":1189},{"className":1188},[],[1190],{"type":176,"value":1191},".pnpm/B_C@1.0/node_modules/B",{"type":176,"value":1157},{"type":170,"tag":192,"props":1194,"children":1196},{"className":1195},[],[1197],{"type":176,"value":1198},".pnpm/B_C@1.1/node_modules/B",{"type":176,"value":1200},"，而为此，A 的被链接地址也会有两个，",{"type":170,"tag":192,"props":1202,"children":1204},{"className":1203},[],[1205],{"type":176,"value":1206},".pnpm/A_C@1.0/node_modules/A",{"type":176,"value":1157},{"type":170,"tag":192,"props":1209,"children":1211},{"className":1210},[],[1212],{"type":176,"value":1206},{"type":176,"value":1214},"。从不同的 A 的被链接地址的上级目录 ",{"type":170,"tag":192,"props":1216,"children":1218},{"className":1217},[],[1219],{"type":176,"value":1220},"node_modules",{"type":176,"value":1222}," 可以读取到不同的 B 的被链目录，从不同的 B 可以读取到不同的 C。",{"type":170,"tag":238,"props":1224,"children":1227},{"code":1225,"language":176,"meta":163,"className":1226},"node_modules\n└── .pnpm\n    ├── a@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.0.0/node_modules/b\n    ├── a@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── a\n    │       └── b -> ../../b@1.0.0_c@1.1.0/node_modules/b\n    ├── b@1.0.0_c@1.0.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.0.0/node_modules/c\n    ├── b@1.0.0_c@1.1.0\n    │   └── node_modules\n    │       ├── b\n    │       └── c -> ../../c@1.1.0/node_modules/c\n    ├── c@1.0.0\n    ├── c@1.1.0\n",[242],[1228],{"type":170,"tag":192,"props":1229,"children":1230},{"__ignoreMap":163},[1231],{"type":176,"value":1225},{"type":170,"tag":186,"props":1233,"children":1234},{},[1235,1236],{"type":176,"value":922},{"type":170,"tag":924,"props":1237,"children":1240},{"href":1238,"rel":1239},"https://pnpm.io/how-peers-are-resolved",[928],[1241],{"type":176,"value":1242},"How peers are resolved | @pnpm",{"type":170,"tag":179,"props":1244,"children":1246},{"id":1245},"怎样兼容-nodejs-模块加载顺序",[1247],{"type":176,"value":1248},"怎样兼容 NodeJS 模块加载顺序？",{"type":170,"tag":186,"props":1250,"children":1251},{},[1252],{"type":176,"value":1253},"不论系统自带的模块，NodeJS 加载模块的顺序是这样的：",{"type":170,"tag":260,"props":1255,"children":1256},{},[1257,1262,1267,1272],{"type":170,"tag":264,"props":1258,"children":1259},{},[1260],{"type":176,"value":1261},"读取本文件夹中 node_modules 中对应名字的文件夹的 package.json，并寻找 main 字段对应的路径",{"type":170,"tag":264,"props":1263,"children":1264},{},[1265],{"type":176,"value":1266},"读取本文件夹中 node_modules 中对应名字的 js 文件",{"type":170,"tag":264,"props":1268,"children":1269},{},[1270],{"type":176,"value":1271},"读取本文件夹中 node_modules 中对应名字文件夹中的 index.js 文件",{"type":170,"tag":264,"props":1273,"children":1274},{},[1275],{"type":176,"value":1276},"跳出本文件夹，继续前三个步骤",{"type":170,"tag":186,"props":1278,"children":1279},{},[1280,1282,1287,1289,1295,1297,1303,1305,1310,1312,1318,1320,1326],{"type":176,"value":1281},"因为项目 ",{"type":170,"tag":192,"props":1283,"children":1285},{"className":1284},[],[1286],{"type":176,"value":998},{"type":176,"value":1288}," 是 ",{"type":170,"tag":192,"props":1290,"children":1292},{"className":1291},[],[1293],{"type":176,"value":1294},".pnpm/bar/node_modules/bar",{"type":176,"value":1296}," 的符号链接，所以项目文件可以直接读取 ",{"type":170,"tag":192,"props":1298,"children":1300},{"className":1299},[],[1301],{"type":176,"value":1302},"node_modules/bar/x.js",{"type":176,"value":1304},"。同时，如果 ",{"type":170,"tag":192,"props":1306,"children":1308},{"className":1307},[],[1309],{"type":176,"value":1302},{"type":176,"value":1311}," 需要加载 ",{"type":170,"tag":192,"props":1313,"children":1315},{"className":1314},[],[1316],{"type":176,"value":1317},"foo/x.js",{"type":176,"value":1319},"，那么在上述步骤的第 4 步，就能找到 ",{"type":170,"tag":192,"props":1321,"children":1323},{"className":1322},[],[1324],{"type":176,"value":1325},".pnpm/bar/node_modules/foo/x.js",{"type":176,"value":1327}," 文件。",{"type":170,"tag":179,"props":1329,"children":1331},{"id":1330},"为什么其模块层次只是比较严格的semistrict",[1332],{"type":176,"value":1333},"为什么其模块层次只是“比较严格的”（semistrict）？",{"type":170,"tag":186,"props":1335,"children":1336},{},[1337],{"type":176,"value":1338},"由 NodeJS 模块加载规则可知，在 pnpm 创造的依赖层次下，一个依赖的子依赖间仍有相互访问的能力。",{"type":170,"tag":179,"props":1340,"children":1342},{"id":1341},"为什么能节约磁盘空间",[1343],{"type":176,"value":1344},"为什么能节约磁盘空间？",{"type":170,"tag":186,"props":1346,"children":1347},{},[1348,1350,1356,1358,1364,1366,1372],{"type":176,"value":1349},"由 pnpm 创造的 node_modules 层级结构可以知道，所有依赖的符号链接的真实地址都在 ",{"type":170,"tag":192,"props":1351,"children":1353},{"className":1352},[],[1354],{"type":176,"value":1355},".pnpm/package-name/node_modules/package-name",{"type":176,"value":1357}," 这个文件夹中。这种文件夹会通过硬链接的形式链接到 ",{"type":170,"tag":192,"props":1359,"children":1361},{"className":1360},[],[1362],{"type":176,"value":1363},"user-document/.pnpm-store",{"type":176,"value":1365}," 中，所以相同的包只会存一份，也就是 ",{"type":170,"tag":192,"props":1367,"children":1369},{"className":1368},[],[1370],{"type":176,"value":1371},".pnpm-store/package-name",{"type":176,"value":1180},{"type":170,"tag":179,"props":1374,"children":1376},{"id":1375},"软硬链接有什么问题",[1377],{"type":176,"value":1378},"软硬链接有什么问题？",{"type":170,"tag":1380,"props":1381,"children":1382},"ul",{},[1383,1388,1393,1398],{"type":170,"tag":264,"props":1384,"children":1385},{},[1386],{"type":176,"value":1387},"特定的软链结构会导致某些应用出现死循环",{"type":170,"tag":264,"props":1389,"children":1390},{},[1391],{"type":176,"value":1392},"硬链接是同一份文件，不便调试",{"type":170,"tag":264,"props":1394,"children":1395},{},[1396],{"type":176,"value":1397},"软链接在非 SSD 上的读写会有性能损耗",{"type":170,"tag":264,"props":1399,"children":1400},{},[1401],{"type":176,"value":1402},"pnpm 创造的 node_modules 层级结构会破坏某些依赖依赖了相对路径的依赖的逻辑",{"type":170,"tag":186,"props":1404,"children":1405},{},[1406,1407],{"type":176,"value":922},{"type":170,"tag":924,"props":1408,"children":1411},{"href":1409,"rel":1410},"https://zhuanlan.zhihu.com/p/553804414",[928],[1412],{"type":176,"value":1413},"精读 pnpm",{"type":170,"tag":171,"props":1415,"children":1417},{"id":1416},"常见问题",[1418],{"type":176,"value":1416},{"type":170,"tag":179,"props":1420,"children":1422},{"id":1421},"pnpm-找不到全局路径的解决方法",[1423],{"type":176,"value":1424},"PNPM 找不到全局路径的解决方法？",{"type":170,"tag":186,"props":1426,"children":1427},{},[1428],{"type":176,"value":1429},"尽管设置了全局变量，也重新安装了最新版本 PNPM，也执行了 pnpm setup，却仍然报错找不到全局路径的临时解决方案：",{"type":170,"tag":238,"props":1431,"children":1435},{"code":1432,"language":1433,"meta":163,"className":1434,"style":163},"$PNPM_HOME=\"\u003Cpath>\" | pnpm install -g xxx\n","powershell","language-powershell shiki shiki-themes material-theme-lighter github-light github-dark monokai",[1436],{"type":170,"tag":192,"props":1437,"children":1438},{"__ignoreMap":163},[1439],{"type":170,"tag":379,"props":1440,"children":1441},{"class":381,"line":382},[1442,1447,1452,1457,1462,1467,1471,1476,1481,1486],{"type":170,"tag":379,"props":1443,"children":1444},{"style":398},[1445],{"type":176,"value":1446},"$",{"type":170,"tag":379,"props":1448,"children":1449},{"style":456},[1450],{"type":176,"value":1451},"PNPM_HOME",{"type":170,"tag":379,"props":1453,"children":1454},{"style":471},[1455],{"type":176,"value":1456},"=",{"type":170,"tag":379,"props":1458,"children":1459},{"style":477},[1460],{"type":176,"value":1461},"\"",{"type":170,"tag":379,"props":1463,"children":1464},{"style":483},[1465],{"type":176,"value":1466},"\u003Cpath>",{"type":170,"tag":379,"props":1468,"children":1469},{"style":477},[1470],{"type":176,"value":1461},{"type":170,"tag":379,"props":1472,"children":1473},{"style":471},[1474],{"type":176,"value":1475}," |",{"type":170,"tag":379,"props":1477,"children":1478},{"style":456},[1479],{"type":176,"value":1480}," pnpm install ",{"type":170,"tag":379,"props":1482,"children":1483},{"style":471},[1484],{"type":176,"value":1485},"-",{"type":170,"tag":379,"props":1487,"children":1488},{"style":456},[1489],{"type":176,"value":1490},"g xxx\n",{"type":170,"tag":179,"props":1492,"children":1494},{"id":1493},"pnpm-速度变慢了",[1495],{"type":176,"value":1496},"PNPM 速度变慢了？",{"type":170,"tag":186,"props":1498,"children":1499},{},[1500],{"type":176,"value":1501},"今天逛官网时，偶然发现 Readme 中的 benchmark 过时了。它说“要比 Yarn Classic 和 npm “快两倍以上，但是从 benchmark 来看，他要比 Yarn 和 npm 慢了不少。以后启用 NodeJS 20 以上时，如果问题得不到改善，我应该会重新选择 npm 而不是 pnpm，鉴于幽灵依赖和依赖分身带来的问题是可排查可解决的，而速度是解决不了的问题。",{"type":170,"tag":186,"props":1503,"children":1504},{},[1505],{"type":170,"tag":1098,"props":1506,"children":1509},{"alt":1507,"src":1508},"pnpm vs npm vs yarn benchmark","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20230605235736.png",[],{"type":170,"tag":186,"props":1511,"children":1512},{},[1513,1515],{"type":176,"value":1514},"相关见：",{"type":170,"tag":924,"props":1516,"children":1519},{"href":1517,"rel":1518},"https://github.com/pnpm/pnpm/issues/6447",[928],[1520],{"type":176,"value":1521},"pnpm seems to be consistently slower than yarn (classic)",{"type":170,"tag":179,"props":1523,"children":1525},{"id":1524},"和-bun-在安装速度上的对比",[1526],{"type":176,"value":1527},"和 Bun 在安装速度上的对比？",{"type":170,"tag":186,"props":1529,"children":1530},{},[1531],{"type":176,"value":1532},"有锁文件、本地缓存，无 node_modules 的情况下，bun 要比 pnpm 安装至少快 3 倍。",{"type":170,"tag":1380,"props":1534,"children":1535},{},[1536,1541],{"type":170,"tag":264,"props":1537,"children":1538},{},[1539],{"type":176,"value":1540},"一个原因是 pnpm、yarn 等工具会在安装时请求最新的 metadata，而 bun 使用的 metadata 源于本地缓存的 metadata。",{"type":170,"tag":264,"props":1542,"children":1543},{},[1544],{"type":176,"value":1545},"另一个原因是 pnpm 在创建 node_modules 层次结构是使用了大量的 symlink，相比其他包管理工具仅使用复制或 hardlink 有更多系统调用。",{"type":170,"tag":186,"props":1547,"children":1548},{},[1549],{"type":176,"value":1550},"所以如果想使 pnpm 更快的安装，可以使用 prefer-offline 选项，以及，node-linker=hoisted 也许有用。",{"type":170,"tag":186,"props":1552,"children":1553},{},[1554,1555],{"type":176,"value":922},{"type":170,"tag":924,"props":1556,"children":1559},{"href":1557,"rel":1558},"https://github.com/pnpm/pnpm/issues/7391",[928],[1560],{"type":176,"value":1561},"Bun.sh-like Module Resolution",{"type":170,"tag":179,"props":1563,"children":1565},{"id":1564},"关于-v8-版本的变化",[1566],{"type":176,"value":1567},"关于 V8 版本的变化？",{"type":170,"tag":1380,"props":1569,"children":1570},{},[1571,1590,1606,1617,1622,1627,1632],{"type":170,"tag":264,"props":1572,"children":1573},{},[1574,1580,1582,1588],{"type":170,"tag":192,"props":1575,"children":1577},{"className":1576},[],[1578],{"type":176,"value":1579},"resolve-peers-from-workspace-root",{"type":176,"value":1581}," is ",{"type":170,"tag":192,"props":1583,"children":1585},{"className":1584},[],[1586],{"type":176,"value":1587},"true",{"type":176,"value":1589}," by default",{"type":170,"tag":264,"props":1591,"children":1592},{},[1593,1599,1600,1605],{"type":170,"tag":192,"props":1594,"children":1596},{"className":1595},[],[1597],{"type":176,"value":1598},"auto-install-peers",{"type":176,"value":1581},{"type":170,"tag":192,"props":1601,"children":1603},{"className":1602},[],[1604],{"type":176,"value":1587},{"type":176,"value":1589},{"type":170,"tag":264,"props":1607,"children":1608},{},[1609,1615],{"type":170,"tag":192,"props":1610,"children":1612},{"className":1611},[],[1613],{"type":176,"value":1614},"dedupe-peer-dependents",{"type":176,"value":1616}," set to true by default",{"type":170,"tag":264,"props":1618,"children":1619},{},[1620],{"type":176,"value":1621},"停止 NodeJS 14 的支持",{"type":170,"tag":264,"props":1623,"children":1624},{},[1625],{"type":176,"value":1626},"lockfile v6 by default",{"type":170,"tag":264,"props":1628,"children":1629},{},[1630],{"type":176,"value":1631},"resolution mode（prebundle、time-based、lowest-direct）default set to lowest-based，需要注意手动升级，尤其是在没有锁文件的情况",{"type":170,"tag":264,"props":1633,"children":1634},{},[1635,1637,1643],{"type":176,"value":1636},"only deply ",{"type":170,"tag":192,"props":1638,"children":1640},{"className":1639},[],[1641],{"type":176,"value":1642},"files",{"type":176,"value":1644}," field when the field exist",{"type":170,"tag":179,"props":1646,"children":1648},{"id":1647},"pnp-模式下的依赖提升设置",[1649],{"type":176,"value":1650},"PnP 模式下的依赖提升设置？",{"type":170,"tag":186,"props":1652,"children":1653},{},[1654,1656,1662],{"type":176,"value":1655},"默认的 node_modules 依赖的层级处于严格和不严格之间的水平（semi-strict）。使用最严格的设置需要打开 PnP 模式，因为在 monorepo 中 PnP 模式中，就算开启了 ",{"type":170,"tag":192,"props":1657,"children":1659},{"className":1658},[],[1660],{"type":176,"value":1661},"hoist=false",{"type":176,"value":1663}," 也不会禁用 workspace root 的依赖",{"type":170,"tag":238,"props":1665,"children":1667},{"code":1666},"node-linker=pnp\nsymlink=false\n",[1668],{"type":170,"tag":192,"props":1669,"children":1670},{"__ignoreMap":163},[1671],{"type":176,"value":1666},{"type":170,"tag":186,"props":1673,"children":1674},{},[1675,1676],{"type":176,"value":922},{"type":170,"tag":924,"props":1677,"children":1680},{"href":1678,"rel":1679},"https://pnpm.io/blog/2020/10/17/node-modules-configuration-options-with-pnpm",[928],[1681],{"type":176,"value":1682},"Node-Modules configuration options with pnpm",{"type":170,"tag":179,"props":1684,"children":1686},{"id":1685},"在-windows-dev-driver-上可能会碰到的问题",[1687],{"type":176,"value":1688},"在 Windows Dev Driver 上可能会碰到的问题？",{"type":170,"tag":186,"props":1690,"children":1691},{},[1692],{"type":176,"value":1693},"2024 年初 pnpm 实现了 Dev Driver 上的 Copy on Write 功能，但可能会碰到变慢的问题。",{"type":170,"tag":186,"props":1695,"children":1696},{},[1697,1698],{"type":176,"value":922},{"type":170,"tag":924,"props":1699,"children":1702},{"href":1700,"rel":1701},"https://github.com/pnpm/pnpm/issues/7547",[928],[1703],{"type":176,"value":1704},"pnpm lately slow and pnpx stuck at installing deps using executable package",{"type":170,"tag":179,"props":1706,"children":1708},{"id":1707},"下载多份二进制代码的问题",[1709],{"type":176,"value":1710},"下载多份二进制代码的问题？",{"type":170,"tag":186,"props":1712,"children":1713},{},[1714],{"type":176,"value":1715},"目前应该是所有包管理器都有这种问题，但是不知道怎么解决。",{"type":170,"tag":186,"props":1717,"children":1718},{},[1719],{"type":170,"tag":1098,"props":1720,"children":1723},{"alt":1721,"src":1722},"sass-embedded 下载了多份二进制代码","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/202503200412724.png",[],{"type":170,"tag":1725,"props":1726,"children":1727},"style",{},[1728],{"type":176,"value":1729},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":430,"depth":430,"links":1731},[1732,1733,1734],{"id":173,"depth":430,"text":177},{"id":934,"depth":430,"text":934},{"id":1416,"depth":430,"text":1416},"markdown","content:6.maps:_workflow:package-manager:pnpm.md","content","6.maps/_workflow/package-manager/pnpm.md","6.maps/_workflow/package-manager/pnpm","md",[1742,1746],{"_path":1743,"title":1744,"description":1745},"/maps/_workflow/package-manager/npm","NPM","NPM 包管理器完整指南，包含 package.json 配置、镜像源管理、依赖安装等核心功能的详细说明。",{"_path":1747,"title":1748,"description":1749},"/maps/_workflow/packer","打包工具","前端打包工具全景图，涵盖 Vite、Webpack、Rollup、tsup、Unbuild、Rome 等主流工具的特性对比和使用说明。",1748756320008]