[{"data":1,"prerenderedAt":873},["ShallowReactive",2],{"navigation":3,"/gists/design-patterns":416,"/gists/design-patterns-surround":870},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / Abount","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":203,"_dir":417,"_draft":418,"_partial":418,"_locale":419,"title":202,"description":420,"body":421,"_type":864,"_id":865,"_source":866,"_file":867,"_stem":868,"_extension":869},"gists",false,"","设计模式可以按照使用方式划分为：创建型模式、结构型模式和行为模式。",{"type":422,"children":423,"toc":858},"root",[424,431,436,456,462,468,473,482,487,492,497,505,510,515,520,528,533,538,543,551,556,561,566,574,579,584,589,597,602,607,615,620,625,630,638,643,648,653,661,666,671,676,681,689,694,699,707,712,717,725,730,735,740,745,753,758,763,771,776,784,789,794,799,807,812,817,822,830,835,840,845,853],{"type":425,"tag":426,"props":427,"children":428},"element","h1",{"id":202},[429],{"type":430,"value":202},"text",{"type":425,"tag":432,"props":433,"children":434},"p",{},[435],{"type":430,"value":420},{"type":425,"tag":437,"props":438,"children":439},"ul",{},[440,446,451],{"type":425,"tag":441,"props":442,"children":443},"li",{},[444],{"type":430,"value":445},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":425,"tag":441,"props":447,"children":448},{},[449],{"type":430,"value":450},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高校",{"type":425,"tag":441,"props":452,"children":453},{},[454],{"type":430,"value":455},"行为模式：提供对象间的沟通和职责分配",{"type":425,"tag":457,"props":458,"children":460},"h2",{"id":459},"创建型模式",[461],{"type":430,"value":459},{"type":425,"tag":463,"props":464,"children":466},"h4",{"id":465},"工厂",[467],{"type":430,"value":465},{"type":425,"tag":432,"props":469,"children":470},{},[471],{"type":430,"value":472},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":425,"tag":432,"props":474,"children":475},{},[476],{"type":425,"tag":477,"props":478,"children":481},"img",{"alt":479,"src":480},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":425,"tag":432,"props":483,"children":484},{},[485],{"type":430,"value":486},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":425,"tag":463,"props":488,"children":490},{"id":489},"抽象工厂",[491],{"type":430,"value":489},{"type":425,"tag":432,"props":493,"children":494},{},[495],{"type":430,"value":496},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":425,"tag":432,"props":498,"children":499},{},[500],{"type":425,"tag":477,"props":501,"children":504},{"alt":502,"src":503},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":425,"tag":432,"props":506,"children":507},{},[508],{"type":430,"value":509},"抽象工厂专注于生产一系列对象，举个例子，Weex 和 Web 版本的 ElementUI（假设有的话）就需要根据不同平台去初始化不同的具体工厂实例，再使用具体工厂实例去生成不同的组件。",{"type":425,"tag":463,"props":511,"children":513},{"id":512},"生成器",[514],{"type":430,"value":512},{"type":425,"tag":432,"props":516,"children":517},{},[518],{"type":430,"value":519},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。",{"type":425,"tag":432,"props":521,"children":522},{},[523],{"type":425,"tag":477,"props":524,"children":527},{"alt":525,"src":526},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":425,"tag":432,"props":529,"children":530},{},[531],{"type":430,"value":532},"从图中可以看到当前的主管结构和具体生成器是解耦的，也就是说客户端依赖具体生成器来获取生成结果，这在可能有产品不遵循通用生成器接口的时候有用。",{"type":425,"tag":463,"props":534,"children":536},{"id":535},"原型",[537],{"type":430,"value":535},{"type":425,"tag":432,"props":539,"children":540},{},[541],{"type":430,"value":542},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":425,"tag":432,"props":544,"children":545},{},[546],{"type":425,"tag":477,"props":547,"children":550},{"alt":548,"src":549},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":425,"tag":432,"props":552,"children":553},{},[554],{"type":430,"value":555},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":425,"tag":463,"props":557,"children":559},{"id":558},"单例",[560],{"type":430,"value":558},{"type":425,"tag":432,"props":562,"children":563},{},[564],{"type":430,"value":565},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":425,"tag":432,"props":567,"children":568},{},[569],{"type":425,"tag":477,"props":570,"children":573},{"alt":571,"src":572},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":425,"tag":457,"props":575,"children":577},{"id":576},"结构型模式",[578],{"type":430,"value":576},{"type":425,"tag":463,"props":580,"children":582},{"id":581},"适配器",[583],{"type":430,"value":581},{"type":425,"tag":432,"props":585,"children":586},{},[587],{"type":430,"value":588},"适配器使接口不兼容的对象能够相互合作。",{"type":425,"tag":432,"props":590,"children":591},{},[592],{"type":425,"tag":477,"props":593,"children":596},{"alt":594,"src":595},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":425,"tag":463,"props":598,"children":600},{"id":599},"桥接",[601],{"type":430,"value":599},{"type":425,"tag":432,"props":603,"children":604},{},[605],{"type":430,"value":606},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与OO中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":425,"tag":432,"props":608,"children":609},{},[610],{"type":425,"tag":477,"props":611,"children":614},{"alt":612,"src":613},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":425,"tag":432,"props":616,"children":617},{},[618],{"type":430,"value":619},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":425,"tag":463,"props":621,"children":623},{"id":622},"组合",[624],{"type":430,"value":622},{"type":425,"tag":432,"props":626,"children":627},{},[628],{"type":430,"value":629},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":425,"tag":432,"props":631,"children":632},{},[633],{"type":425,"tag":477,"props":634,"children":637},{"alt":635,"src":636},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":425,"tag":432,"props":639,"children":640},{},[641],{"type":430,"value":642},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":425,"tag":463,"props":644,"children":646},{"id":645},"装饰",[647],{"type":430,"value":645},{"type":425,"tag":432,"props":649,"children":650},{},[651],{"type":430,"value":652},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":425,"tag":432,"props":654,"children":655},{},[656],{"type":425,"tag":477,"props":657,"children":660},{"alt":658,"src":659},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":425,"tag":432,"props":662,"children":663},{},[664],{"type":430,"value":665},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":425,"tag":432,"props":667,"children":668},{},[669],{"type":430,"value":670},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":425,"tag":463,"props":672,"children":674},{"id":673},"外观",[675],{"type":430,"value":673},{"type":425,"tag":432,"props":677,"children":678},{},[679],{"type":430,"value":680},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":425,"tag":432,"props":682,"children":683},{},[684],{"type":425,"tag":477,"props":685,"children":688},{"alt":686,"src":687},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":425,"tag":463,"props":690,"children":692},{"id":691},"享元",[693],{"type":430,"value":691},{"type":425,"tag":432,"props":695,"children":696},{},[697],{"type":430,"value":698},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":425,"tag":432,"props":700,"children":701},{},[702],{"type":425,"tag":477,"props":703,"children":706},{"alt":704,"src":705},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":425,"tag":463,"props":708,"children":710},{"id":709},"代理",[711],{"type":430,"value":709},{"type":425,"tag":432,"props":713,"children":714},{},[715],{"type":430,"value":716},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":425,"tag":432,"props":718,"children":719},{},[720],{"type":425,"tag":477,"props":721,"children":724},{"alt":722,"src":723},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":425,"tag":432,"props":726,"children":727},{},[728],{"type":430,"value":729},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":425,"tag":457,"props":731,"children":733},{"id":732},"行为模式",[734],{"type":430,"value":732},{"type":425,"tag":463,"props":736,"children":738},{"id":737},"责任链",[739],{"type":430,"value":737},{"type":425,"tag":432,"props":741,"children":742},{},[743],{"type":430,"value":744},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":425,"tag":432,"props":746,"children":747},{},[748],{"type":425,"tag":477,"props":749,"children":752},{"alt":750,"src":751},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":425,"tag":463,"props":754,"children":756},{"id":755},"命令",[757],{"type":430,"value":755},{"type":425,"tag":432,"props":759,"children":760},{},[761],{"type":430,"value":762},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":425,"tag":432,"props":764,"children":765},{},[766],{"type":425,"tag":477,"props":767,"children":770},{"alt":768,"src":769},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":425,"tag":432,"props":772,"children":773},{},[774],{"type":430,"value":775},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":425,"tag":432,"props":777,"children":778},{},[779],{"type":425,"tag":477,"props":780,"children":783},{"alt":781,"src":782},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":425,"tag":432,"props":785,"children":786},{},[787],{"type":430,"value":788},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":425,"tag":463,"props":790,"children":792},{"id":791},"中介者",[793],{"type":430,"value":791},{"type":425,"tag":432,"props":795,"children":796},{},[797],{"type":430,"value":798},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":425,"tag":432,"props":800,"children":801},{},[802],{"type":425,"tag":477,"props":803,"children":806},{"alt":804,"src":805},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":425,"tag":432,"props":808,"children":809},{},[810],{"type":430,"value":811},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":425,"tag":463,"props":813,"children":815},{"id":814},"备忘录",[816],{"type":430,"value":814},{"type":425,"tag":432,"props":818,"children":819},{},[820],{"type":430,"value":821},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":425,"tag":432,"props":823,"children":824},{},[825],{"type":425,"tag":477,"props":826,"children":829},{"alt":827,"src":828},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":425,"tag":432,"props":831,"children":832},{},[833],{"type":430,"value":834},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":425,"tag":463,"props":836,"children":838},{"id":837},"观察者",[839],{"type":430,"value":837},{"type":425,"tag":432,"props":841,"children":842},{},[843],{"type":430,"value":844},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":425,"tag":432,"props":846,"children":847},{},[848],{"type":425,"tag":477,"props":849,"children":852},{"alt":850,"src":851},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":425,"tag":432,"props":854,"children":855},{},[856],{"type":430,"value":857},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"title":419,"searchDepth":859,"depth":859,"links":860},2,[861,862,863],{"id":459,"depth":859,"text":459},{"id":576,"depth":859,"text":576},{"id":732,"depth":859,"text":732},"markdown","content:7.gists:design-patterns.md","content","7.gists/design-patterns.md","7.gists/design-patterns","md",[871,872],{"_path":200,"title":199,"description":419},{"_path":206,"title":205,"description":419},1736962885708]