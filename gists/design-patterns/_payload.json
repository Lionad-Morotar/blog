[{"data":1,"prerenderedAt":842},["Reactive",2],{"navigation":3,"/gists/design-patterns":386,"/gists/design-patterns-surround":839},[4,32,80,96,123,129,135,369,375,381],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"Bit","/gists/bit",{"title":148,"_path":149},"图片模糊","/gists/blur",{"title":151,"_path":152},"渲染相关笔记","/gists/c4d",{"title":154,"_path":155},"CDN 问题记录","/gists/cdn",{"title":157,"_path":158},"消毒剂","/gists/cleaner",{"title":160,"_path":161},"Windows Command","/gists/cmd",{"title":163,"_path":164},"Command","/gists/command",{"title":166,"_path":167},"复杂科学","/gists/complexity-science",{"title":169,"_path":170},"宇宙","/gists/cosmos",{"title":172,"_path":173},"C++","/gists/cpp",{"title":175,"_path":176},"Data Structure","/gists/data-structure",{"title":178,"_path":179},"DEPRESSION","/gists/depression",{"title":181,"_path":182},"设计模式","/gists/design-patterns",{"title":184,"_path":185},"Developer Experience","/gists/developer-experience",{"title":187,"_path":188},"Device Metrics","/gists/device-metrix",{"title":190,"_path":191},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":193,"_path":194},"正则表达式","/gists/eegex",{"title":196,"_path":197},"Emoji","/gists/emoji",{"title":199,"_path":200},"工程","/gists/engineering",{"title":202,"_path":203},"熵","/gists/entropy",{"title":205,"_path":206},"Environment","/gists/environment",{"title":208,"_path":209},"Erlang","/gists/erlang",{"title":211,"_path":212},"逃离塔克夫","/gists/escape-from-tarkov",{"title":214,"_path":215},"ESNext (ES6-ES11)","/gists/esnext",{"title":217,"_path":218},"Eval！","/gists/eval",{"title":220,"_path":221},"Flutter","/gists/flutter",{"title":223,"_path":224},"字体","/gists/font",{"title":226,"_path":227},"JS 函数式编程","/gists/functional",{"title":229,"_path":230},"Google C++ Standard","/gists/google-cpp-standard",{"title":232,"_path":233},"双向链接完全体","/gists/graph",{"title":235,"_path":236},"Hardwares","/gists/hardwares",{"title":238,"_path":239},"哈希冲突","/gists/hash-collision",{"title":241,"_path":242},"信息设计","/gists/information-design",{"title":244,"_path":245},"InstantPage","/gists/instant.page",{"title":247,"_path":248},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":250,"_path":251},"KVStore","/gists/key-value-db",{"title":253,"_path":254},"Kubernetes","/gists/kubernetes",{"title":256,"_path":257},"Makefile","/gists/makefile",{"title":259,"_path":260},"Markdown Inline Style","/gists/markdown-nice",{"title":262,"_path":263},"小程序","/gists/miniapp",{"title":265,"_path":266},"减小页面快照体积","/gists/minify-html",{"title":268,"_path":269},"mklink","/gists/mklink",{"title":271,"_path":272},"Mock","/gists/mock",{"title":274,"_path":275},"多端应用","/gists/multy-end-app",{"title":277,"_path":278},"神经科学","/gists/neuroscience",{"title":280,"_path":281},"OO","/gists/oo",{"title":283,"_path":284},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":286,"_path":287},"人物","/gists/person",{"title":289,"_path":290},"PInvoke","/gists/pinvoke",{"title":292,"_path":293},"像素","/gists/pixel",{"title":295,"_path":296},"PowerShell","/gists/powershell",{"title":298,"_path":299},"量子","/gists/quantum",{"title":301,"_path":302},"保持好奇心","/gists/questions",{"title":304,"_path":305},"React Native","/gists/react-native",{"title":307,"_path":308},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":310,"_path":311},"SEO","/gists/seo",{"title":313,"_path":314},"Shader","/gists/shader",{"title":316,"_path":317},"Shape Up","/gists/shape-up",{"title":319,"_path":320},"睡觉","/gists/sleep",{"title":322,"_path":323},"States","/gists/states",{"title":325,"_path":326},"Storage","/gists/storage",{"title":328,"_path":329},"音视频流处理","/gists/stream-cli",{"title":331,"_path":332},"Symbol","/gists/symbol",{"title":334,"_path":335},"系统论","/gists/systems-theory",{"title":337,"_path":338},"Taro","/gists/taro",{"title":340,"_path":341},"任务切片","/gists/task-slice",{"title":343,"_path":344},"技术偏好","/gists/tech-dudge",{"title":346,"_path":347},"Untitled","/gists/untitled",{"title":349,"_path":350},"可变字体","/gists/variable-font",{"title":352,"_path":353},"视觉错觉","/gists/visual-illusion",{"title":355,"_path":356},"SS(SSR)","/gists/vpn",{"title":358,"_path":359},"VS Code 插件开发","/gists/vscode-plugin",{"title":361,"_path":362},"Web Components","/gists/web-components",{"title":364,"_path":365},"Windows","/gists/windows",{"title":367,"_path":368},"查缺补漏","/gists/wrong",{"title":370,"_path":371,"children":372},"代码笔记 / Gists","/source-code",[373],{"title":374,"_path":371},"🚄 代码笔记",{"title":376,"_path":377,"children":378},"我 / Abount","/hire",[379],{"title":380,"_path":377},"📬 技术简历",{"title":382,"_path":383,"children":384},"todo","/todo",[385],{"title":382,"_path":383},{"_path":182,"_dir":387,"_draft":388,"_partial":388,"_locale":389,"title":181,"description":390,"body":391,"_type":834,"_id":835,"_source":836,"_file":837,"_extension":838},"gists",false,"","设计模式可以按照使用方式划分为：创建型模式、结构型模式和行为模式。",{"type":392,"children":393,"toc":828},"root",[394,401,406,426,432,438,443,452,457,462,467,475,480,485,490,498,503,508,513,521,526,531,536,544,549,554,559,567,572,577,585,590,595,600,608,613,618,623,631,636,641,646,651,659,664,669,677,682,687,695,700,705,710,715,723,728,733,741,746,754,759,764,769,777,782,787,792,800,805,810,815,823],{"type":395,"tag":396,"props":397,"children":398},"element","h1",{"id":181},[399],{"type":400,"value":181},"text",{"type":395,"tag":402,"props":403,"children":404},"p",{},[405],{"type":400,"value":390},{"type":395,"tag":407,"props":408,"children":409},"ul",{},[410,416,421],{"type":395,"tag":411,"props":412,"children":413},"li",{},[414],{"type":400,"value":415},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":395,"tag":411,"props":417,"children":418},{},[419],{"type":400,"value":420},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高校",{"type":395,"tag":411,"props":422,"children":423},{},[424],{"type":400,"value":425},"行为模式：提供对象间的沟通和职责分配",{"type":395,"tag":427,"props":428,"children":430},"h2",{"id":429},"创建型模式",[431],{"type":400,"value":429},{"type":395,"tag":433,"props":434,"children":436},"h4",{"id":435},"工厂",[437],{"type":400,"value":435},{"type":395,"tag":402,"props":439,"children":440},{},[441],{"type":400,"value":442},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":395,"tag":402,"props":444,"children":445},{},[446],{"type":395,"tag":447,"props":448,"children":451},"img",{"alt":449,"src":450},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":395,"tag":402,"props":453,"children":454},{},[455],{"type":400,"value":456},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":395,"tag":433,"props":458,"children":460},{"id":459},"抽象工厂",[461],{"type":400,"value":459},{"type":395,"tag":402,"props":463,"children":464},{},[465],{"type":400,"value":466},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":395,"tag":402,"props":468,"children":469},{},[470],{"type":395,"tag":447,"props":471,"children":474},{"alt":472,"src":473},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":395,"tag":402,"props":476,"children":477},{},[478],{"type":400,"value":479},"抽象工厂专注于生产一系列对象，举个例子，Weex 和 Web 版本的 ElementUI（假设有的话）就需要根据不同平台去初始化不同的具体工厂实例，再使用具体工厂实例去生成不同的组件。",{"type":395,"tag":433,"props":481,"children":483},{"id":482},"生成器",[484],{"type":400,"value":482},{"type":395,"tag":402,"props":486,"children":487},{},[488],{"type":400,"value":489},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。",{"type":395,"tag":402,"props":491,"children":492},{},[493],{"type":395,"tag":447,"props":494,"children":497},{"alt":495,"src":496},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":395,"tag":402,"props":499,"children":500},{},[501],{"type":400,"value":502},"从图中可以看到当前的主管结构和具体生成器是解耦的，也就是说客户端依赖具体生成器来获取生成结果，这在可能有产品不遵循通用生成器接口的时候有用。",{"type":395,"tag":433,"props":504,"children":506},{"id":505},"原型",[507],{"type":400,"value":505},{"type":395,"tag":402,"props":509,"children":510},{},[511],{"type":400,"value":512},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":395,"tag":402,"props":514,"children":515},{},[516],{"type":395,"tag":447,"props":517,"children":520},{"alt":518,"src":519},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":395,"tag":402,"props":522,"children":523},{},[524],{"type":400,"value":525},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":395,"tag":433,"props":527,"children":529},{"id":528},"单例",[530],{"type":400,"value":528},{"type":395,"tag":402,"props":532,"children":533},{},[534],{"type":400,"value":535},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":395,"tag":402,"props":537,"children":538},{},[539],{"type":395,"tag":447,"props":540,"children":543},{"alt":541,"src":542},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":395,"tag":427,"props":545,"children":547},{"id":546},"结构型模式",[548],{"type":400,"value":546},{"type":395,"tag":433,"props":550,"children":552},{"id":551},"适配器",[553],{"type":400,"value":551},{"type":395,"tag":402,"props":555,"children":556},{},[557],{"type":400,"value":558},"适配器使接口不兼容的对象能够相互合作。",{"type":395,"tag":402,"props":560,"children":561},{},[562],{"type":395,"tag":447,"props":563,"children":566},{"alt":564,"src":565},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":395,"tag":433,"props":568,"children":570},{"id":569},"桥接",[571],{"type":400,"value":569},{"type":395,"tag":402,"props":573,"children":574},{},[575],{"type":400,"value":576},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与OO中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":395,"tag":402,"props":578,"children":579},{},[580],{"type":395,"tag":447,"props":581,"children":584},{"alt":582,"src":583},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":395,"tag":402,"props":586,"children":587},{},[588],{"type":400,"value":589},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":395,"tag":433,"props":591,"children":593},{"id":592},"组合",[594],{"type":400,"value":592},{"type":395,"tag":402,"props":596,"children":597},{},[598],{"type":400,"value":599},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":395,"tag":402,"props":601,"children":602},{},[603],{"type":395,"tag":447,"props":604,"children":607},{"alt":605,"src":606},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":395,"tag":402,"props":609,"children":610},{},[611],{"type":400,"value":612},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":395,"tag":433,"props":614,"children":616},{"id":615},"装饰",[617],{"type":400,"value":615},{"type":395,"tag":402,"props":619,"children":620},{},[621],{"type":400,"value":622},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":395,"tag":402,"props":624,"children":625},{},[626],{"type":395,"tag":447,"props":627,"children":630},{"alt":628,"src":629},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":395,"tag":402,"props":632,"children":633},{},[634],{"type":400,"value":635},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":395,"tag":402,"props":637,"children":638},{},[639],{"type":400,"value":640},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":395,"tag":433,"props":642,"children":644},{"id":643},"外观",[645],{"type":400,"value":643},{"type":395,"tag":402,"props":647,"children":648},{},[649],{"type":400,"value":650},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":395,"tag":402,"props":652,"children":653},{},[654],{"type":395,"tag":447,"props":655,"children":658},{"alt":656,"src":657},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":395,"tag":433,"props":660,"children":662},{"id":661},"享元",[663],{"type":400,"value":661},{"type":395,"tag":402,"props":665,"children":666},{},[667],{"type":400,"value":668},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":395,"tag":402,"props":670,"children":671},{},[672],{"type":395,"tag":447,"props":673,"children":676},{"alt":674,"src":675},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":395,"tag":433,"props":678,"children":680},{"id":679},"代理",[681],{"type":400,"value":679},{"type":395,"tag":402,"props":683,"children":684},{},[685],{"type":400,"value":686},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":395,"tag":402,"props":688,"children":689},{},[690],{"type":395,"tag":447,"props":691,"children":694},{"alt":692,"src":693},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":395,"tag":402,"props":696,"children":697},{},[698],{"type":400,"value":699},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":395,"tag":427,"props":701,"children":703},{"id":702},"行为模式",[704],{"type":400,"value":702},{"type":395,"tag":433,"props":706,"children":708},{"id":707},"责任链",[709],{"type":400,"value":707},{"type":395,"tag":402,"props":711,"children":712},{},[713],{"type":400,"value":714},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":395,"tag":402,"props":716,"children":717},{},[718],{"type":395,"tag":447,"props":719,"children":722},{"alt":720,"src":721},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":395,"tag":433,"props":724,"children":726},{"id":725},"命令",[727],{"type":400,"value":725},{"type":395,"tag":402,"props":729,"children":730},{},[731],{"type":400,"value":732},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":395,"tag":402,"props":734,"children":735},{},[736],{"type":395,"tag":447,"props":737,"children":740},{"alt":738,"src":739},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":395,"tag":402,"props":742,"children":743},{},[744],{"type":400,"value":745},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":395,"tag":402,"props":747,"children":748},{},[749],{"type":395,"tag":447,"props":750,"children":753},{"alt":751,"src":752},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":395,"tag":402,"props":755,"children":756},{},[757],{"type":400,"value":758},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":395,"tag":433,"props":760,"children":762},{"id":761},"中介者",[763],{"type":400,"value":761},{"type":395,"tag":402,"props":765,"children":766},{},[767],{"type":400,"value":768},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":395,"tag":402,"props":770,"children":771},{},[772],{"type":395,"tag":447,"props":773,"children":776},{"alt":774,"src":775},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":395,"tag":402,"props":778,"children":779},{},[780],{"type":400,"value":781},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":395,"tag":433,"props":783,"children":785},{"id":784},"备忘录",[786],{"type":400,"value":784},{"type":395,"tag":402,"props":788,"children":789},{},[790],{"type":400,"value":791},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":395,"tag":402,"props":793,"children":794},{},[795],{"type":395,"tag":447,"props":796,"children":799},{"alt":797,"src":798},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":395,"tag":402,"props":801,"children":802},{},[803],{"type":400,"value":804},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":395,"tag":433,"props":806,"children":808},{"id":807},"观察者",[809],{"type":400,"value":807},{"type":395,"tag":402,"props":811,"children":812},{},[813],{"type":400,"value":814},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":395,"tag":402,"props":816,"children":817},{},[818],{"type":395,"tag":447,"props":819,"children":822},{"alt":820,"src":821},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":395,"tag":402,"props":824,"children":825},{},[826],{"type":400,"value":827},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"title":389,"searchDepth":829,"depth":829,"links":830},2,[831,832,833],{"id":429,"depth":829,"text":429},{"id":546,"depth":829,"text":546},{"id":702,"depth":829,"text":702},"markdown","content:7.gists:design-patterns.md","content","7.gists/design-patterns.md","md",[840,841],{"_path":179,"title":178,"description":389},{"_path":185,"title":184,"description":389},1710257709261]