[{"data":1,"prerenderedAt":845},["Reactive",2],{"navigation":3,"/gists/design-patterns":389,"/gists/design-patterns-surround":842},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":185,"_dir":390,"_draft":391,"_partial":391,"_locale":392,"title":184,"description":393,"body":394,"_type":837,"_id":838,"_source":839,"_file":840,"_extension":841},"gists",false,"","设计模式可以按照使用方式划分为：创建型模式、结构型模式和行为模式。",{"type":395,"children":396,"toc":831},"root",[397,404,409,429,435,441,446,455,460,465,470,478,483,488,493,501,506,511,516,524,529,534,539,547,552,557,562,570,575,580,588,593,598,603,611,616,621,626,634,639,644,649,654,662,667,672,680,685,690,698,703,708,713,718,726,731,736,744,749,757,762,767,772,780,785,790,795,803,808,813,818,826],{"type":398,"tag":399,"props":400,"children":401},"element","h1",{"id":184},[402],{"type":403,"value":184},"text",{"type":398,"tag":405,"props":406,"children":407},"p",{},[408],{"type":403,"value":393},{"type":398,"tag":410,"props":411,"children":412},"ul",{},[413,419,424],{"type":398,"tag":414,"props":415,"children":416},"li",{},[417],{"type":403,"value":418},"创建型模式：提供创建对象的机制，增加已有代码的灵活性和可复用性",{"type":398,"tag":414,"props":420,"children":421},{},[422],{"type":403,"value":423},"结构性模式：将对象和类组装成更大的结构，保证结构的灵活和高校",{"type":398,"tag":414,"props":425,"children":426},{},[427],{"type":403,"value":428},"行为模式：提供对象间的沟通和职责分配",{"type":398,"tag":430,"props":431,"children":433},"h2",{"id":432},"创建型模式",[434],{"type":403,"value":432},{"type":398,"tag":436,"props":437,"children":439},"h4",{"id":438},"工厂",[440],{"type":403,"value":438},{"type":398,"tag":405,"props":442,"children":443},{},[444],{"type":403,"value":445},"使用工厂模式时，父类提供一个创建对象的方法，允许子类决定实例化对象的具体类型。使用工厂模式可以避免创建者和具体产品之间的紧密耦合，你可以把具体的业务逻辑放到具体创建者中去实现，就算有新的业务逻辑，完全可以使用新的具体创建者去扩展工厂函数。",{"type":398,"tag":405,"props":447,"children":448},{},[449],{"type":398,"tag":450,"props":451,"children":454},"img",{"alt":452,"src":453},"工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/1bcb390f-a1bf-4cb0-8511-de8cecea11ce.svg",[],{"type":398,"tag":405,"props":456,"children":457},{},[458],{"type":403,"value":459},"一般来说，由于其复杂性低，工厂函数适合快速设计时使用，随后可以转化为抽象工厂、原型或者生成器模式。",{"type":398,"tag":436,"props":461,"children":463},{"id":462},"抽象工厂",[464],{"type":403,"value":462},{"type":398,"tag":405,"props":466,"children":467},{},[468],{"type":403,"value":469},"抽象工厂可以创建一系列相关的对象，而无需指定其具体类，可以将代码和具体创建者（业务逻辑）解耦。",{"type":398,"tag":405,"props":471,"children":472},{},[473],{"type":398,"tag":450,"props":474,"children":477},{"alt":475,"src":476},"抽象工厂结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a67af4bd-c5ff-472b-a6b4-2c4ea05460d4.svg",[],{"type":398,"tag":405,"props":479,"children":480},{},[481],{"type":403,"value":482},"抽象工厂专注于生产一系列对象，举个例子，Weex 和 Web 版本的 ElementUI（假设有的话）就需要根据不同平台去初始化不同的具体工厂实例，再使用具体工厂实例去生成不同的组件。",{"type":398,"tag":436,"props":484,"children":486},{"id":485},"生成器",[487],{"type":403,"value":485},{"type":398,"tag":405,"props":489,"children":490},{},[491],{"type":403,"value":492},"生成器模式允许使用相同的代码生成不同类型、不同形式的复杂对象，这些复杂对象的构造函数本需要非常多的参数来控制其构造细节，使用生成器模式可以避免这些无止尽的构造函数重载。由于生成器还解耦了构造的步骤，你也许需要一个主管类（Director）来封装这些构造步骤，使其与客户端解耦。",{"type":398,"tag":405,"props":494,"children":495},{},[496],{"type":398,"tag":450,"props":497,"children":500},{"alt":498,"src":499},"生成器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/bd255980-5c94-4d8a-8a6f-0b7149ade883.svg",[],{"type":398,"tag":405,"props":502,"children":503},{},[504],{"type":403,"value":505},"从图中可以看到当前的主管结构和具体生成器是解耦的，也就是说客户端依赖具体生成器来获取生成结果，这在可能有产品不遵循通用生成器接口的时候有用。",{"type":398,"tag":436,"props":507,"children":509},{"id":508},"原型",[510],{"type":403,"value":508},{"type":398,"tag":405,"props":512,"children":513},{},[514],{"type":403,"value":515},"原型模式使你能否复制已有对象，而无需依赖它们所属的类。通常，直接遍历并拷贝对象会丢失一些对象私有属性或是外部依赖变量，使用原型模式可以让你更便捷及高效地完成复制操作。直接调用已有对象，以复制一个新对象就像细胞的有丝分裂；你也可以通过提供一个注册表来维护一些基本的可用来复制的预生成对象，并提供搜索方法，方便客户端搜索它们  。",{"type":398,"tag":405,"props":517,"children":518},{},[519],{"type":398,"tag":450,"props":520,"children":523},{"alt":521,"src":522},"原型结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/a719383a-7761-4a72-90b9-ac83da7b47d8.svg",[],{"type":398,"tag":405,"props":525,"children":526},{},[527],{"type":403,"value":528},"原型模式有一个显著的缺陷便是，克隆包含循环引用的对象会变得非常麻烦。",{"type":398,"tag":436,"props":530,"children":532},{"id":531},"单例",[533],{"type":403,"value":531},{"type":398,"tag":405,"props":535,"children":536},{},[537],{"type":403,"value":538},"单例模式保证了一个类只有一个对象实例或为访问某实例提供了一个全局节点。使用单例能够方便的控制资源的调度。",{"type":398,"tag":405,"props":540,"children":541},{},[542],{"type":398,"tag":450,"props":543,"children":546},{"alt":544,"src":545},"单例结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/42fd4a01-5832-4c43-84c7-fda41402f2d4.svg",[],{"type":398,"tag":430,"props":548,"children":550},{"id":549},"结构型模式",[551],{"type":403,"value":549},{"type":398,"tag":436,"props":553,"children":555},{"id":554},"适配器",[556],{"type":403,"value":554},{"type":398,"tag":405,"props":558,"children":559},{},[560],{"type":403,"value":561},"适配器使接口不兼容的对象能够相互合作。",{"type":398,"tag":405,"props":563,"children":564},{},[565],{"type":398,"tag":450,"props":566,"children":569},{"alt":567,"src":568},"适配器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/f3a86005-1da5-4233-81e9-c0bddccc6c3c.svg",[],{"type":398,"tag":436,"props":571,"children":573},{"id":572},"桥接",[574],{"type":403,"value":572},{"type":398,"tag":405,"props":576,"children":577},{},[578],{"type":403,"value":579},"桥接可以将一个大类或者一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而在开发的时候分别使用。这里说的抽象和实现与OO中的名词不是一回事儿，更适合描述应该是：使用桥接模式意味着把一些基础函数以及用基础函数组合出来的更抽象的函数分别按照实现类和抽象类分开。",{"type":398,"tag":405,"props":581,"children":582},{},[583],{"type":398,"tag":450,"props":584,"children":587},{"alt":585,"src":586},"桥接结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/5de62e64-55e2-459b-8cf8-6d5a8914d17c.svg",[],{"type":398,"tag":405,"props":589,"children":590},{},[591],{"type":403,"value":592},"想象一下无论使用遥控器或是手机都能给电视或空调静音，在这里“静音”是抽象，而“减小音量”是抽象，一直减小音量就静音了，所以他们两是聚合的关系。",{"type":398,"tag":436,"props":594,"children":596},{"id":595},"组合",[597],{"type":403,"value":595},{"type":398,"tag":405,"props":599,"children":600},{},[601],{"type":403,"value":602},"使用组合模式将对象组合成树状结构，并且能够像使用独立对象一样使用他们。",{"type":398,"tag":405,"props":604,"children":605},{},[606],{"type":398,"tag":450,"props":607,"children":610},{"alt":608,"src":609},"组合结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/e0de9723-e348-41c9-9461-6ee6e5bd52ef.svg",[],{"type":398,"tag":405,"props":612,"children":613},{},[614],{"type":403,"value":615},"需要注意的是，如果核心模型能用树状结构表示，使用组合模式才有价值。容器（或组合）本身不完成具体工作，而是将请求递归地传递给自己的子项目，然后汇总结果。",{"type":398,"tag":436,"props":617,"children":619},{"id":618},"装饰",[620],{"type":403,"value":618},{"type":398,"tag":405,"props":622,"children":623},{},[624],{"type":403,"value":625},"装饰允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。",{"type":398,"tag":405,"props":627,"children":628},{},[629],{"type":398,"tag":450,"props":630,"children":633},{"alt":631,"src":632},"装饰器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/64b2e57c-5315-48f1-a7df-54ae6942b88c.svg",[],{"type":398,"tag":405,"props":635,"children":636},{},[637],{"type":403,"value":638},"咋一眼看起来装饰的类层次结构和组合的类层次结构很像，hhh",{"type":398,"tag":405,"props":640,"children":641},{},[642],{"type":403,"value":643},"感觉 OO 中的装饰器实现起来蹩脚，使用起来也糟心。为了封装对象，需要提前创建特定的类，明明用高阶函数 10 行就能封装好代码，还比类更简单明了！",{"type":398,"tag":436,"props":645,"children":647},{"id":646},"外观",[648],{"type":403,"value":646},{"type":398,"tag":405,"props":650,"children":651},{},[652],{"type":403,"value":653},"外观模式能为程序库、框架或其他复杂类提供一个简单的接口，这样初始化、编排之类的业务逻辑就能从客户端解耦开来。",{"type":398,"tag":405,"props":655,"children":656},{},[657],{"type":398,"tag":450,"props":658,"children":661},{"alt":659,"src":660},"外观结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/05f145a2-7048-4fb3-8fc3-5e5ac63f4f8d.svg",[],{"type":398,"tag":436,"props":663,"children":665},{"id":664},"享元",[666],{"type":403,"value":664},{"type":398,"tag":405,"props":668,"children":669},{},[670],{"type":403,"value":671},"享元通过共享多个对象中共有的相同状态，让你能在有限的内存容量中载入更多对象。这是一种优化手段，需要确定内存消耗问题无法使用其它更加友好的方式来解决时才好使用。",{"type":398,"tag":405,"props":673,"children":674},{},[675],{"type":398,"tag":450,"props":676,"children":679},{"alt":677,"src":678},"享元结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/04b754e1-4d9c-493f-ac37-86dea28e6316.svg",[],{"type":398,"tag":436,"props":681,"children":683},{"id":682},"代理",[684],{"type":403,"value":682},{"type":398,"tag":405,"props":686,"children":687},{},[688],{"type":403,"value":689},"代理能够让你提供对象的替代品或占位符，该替代品能够控制着原对象的访问，允许操作提交给对象前后进行一些处理。",{"type":398,"tag":405,"props":691,"children":692},{},[693],{"type":398,"tag":450,"props":694,"children":697},{"alt":695,"src":696},"代理结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/99d55f92-79b8-444f-875b-746f141206be.svg",[],{"type":398,"tag":405,"props":699,"children":700},{},[701],{"type":403,"value":702},"代理和装饰看起来非常相似，他们都实现了客户端想要的接口，封装对象并伪装成这个对象进行工作，但其实他们有着本质的差异：装饰增强对象，但需要由客户端主动使用装饰；代理重在请求拦截，一般来说它不会提交生成的主动权。",{"type":398,"tag":430,"props":704,"children":706},{"id":705},"行为模式",[707],{"type":403,"value":705},{"type":398,"tag":436,"props":709,"children":711},{"id":710},"责任链",[712],{"type":403,"value":710},{"type":398,"tag":405,"props":714,"children":715},{},[716],{"type":403,"value":717},"责任链使请求沿着处理者链进行发送，每个处理者均可对请求进行处理，或将其传递给链上的下一个处理者。",{"type":398,"tag":405,"props":719,"children":720},{},[721],{"type":398,"tag":450,"props":722,"children":725},{"alt":723,"src":724},"责任链结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/500057cf-a4b6-41b9-b0fb-8941ec0dfaa5.svg",[],{"type":398,"tag":436,"props":727,"children":729},{"id":728},"命令",[730],{"type":403,"value":728},{"type":398,"tag":405,"props":732,"children":733},{},[734],{"type":403,"value":735},"命令将请求转换为一个包含与请求相关的所有信息的独立对象。",{"type":398,"tag":405,"props":737,"children":738},{},[739],{"type":398,"tag":450,"props":740,"children":743},{"alt":741,"src":742},"命令结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/753bcbe8-863a-48df-949f-0d1be74bbefc.svg",[],{"type":398,"tag":405,"props":745,"children":746},{},[747],{"type":403,"value":748},"命令模式通常作为层与层之间的解耦层，比方说 Web 页面通过 HTTP 请求和服务器通信也算命令模式。",{"type":398,"tag":405,"props":750,"children":751},{},[752],{"type":398,"tag":450,"props":753,"children":756},{"alt":754,"src":755},"迭代器结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/8bf09139-dac6-4bac-9726-43e00873a06a.svg",[],{"type":398,"tag":405,"props":758,"children":759},{},[760],{"type":403,"value":761},"由于迭代器和集合之间紧密耦合，代码若逐渐发展为多对多的关系，那可能会对维护工作增加不小的难度。",{"type":398,"tag":436,"props":763,"children":765},{"id":764},"中介者",[766],{"type":403,"value":764},{"type":398,"tag":405,"props":768,"children":769},{},[770],{"type":403,"value":771},"使用中介者限制各个对象之间的交互行为，并强迫他们通过中介者进行合作，以减少对象间的相互依赖。",{"type":398,"tag":405,"props":773,"children":774},{},[775],{"type":398,"tag":450,"props":776,"children":779},{"alt":777,"src":778},"中介者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/883c48b2-91c4-46b3-a85f-1847dd44dd18.svg",[],{"type":398,"tag":405,"props":781,"children":782},{},[783],{"type":403,"value":784},"中介者和外观模式都有逐渐演化出上帝对象的风险。",{"type":398,"tag":436,"props":786,"children":788},{"id":787},"备忘录",[789],{"type":403,"value":787},{"type":398,"tag":405,"props":791,"children":792},{},[793],{"type":403,"value":794},"使用备忘录，在不暴露对象实现细节的情况下保存对象状态或恢复对象到之前的状态。",{"type":398,"tag":405,"props":796,"children":797},{},[798],{"type":398,"tag":450,"props":799,"children":802},{"alt":800,"src":801},"备忘录结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/723839a8-a6a1-4b46-a66a-e61ead876980.svg",[],{"type":398,"tag":405,"props":804,"children":805},{},[806],{"type":403,"value":807},"在传统 OO 语言中，备忘录总是有着复杂的结构，因为它需要使用类来隔离接口、封装状态，比方说，保存快照时，将对象内部的指取出来组装成新的 Memento 意味着需要掌控着对象权限的原发器来操作这件事情，如果你在编辑器中编辑文本，那么原发器就是编辑器。而在 JavaScript 中，往往 Memento 是和 Caretaker 绑定的，Caretaker 收到 Originator 的指令以维护保存的状态及状态列表。",{"type":398,"tag":436,"props":809,"children":811},{"id":810},"观察者",[812],{"type":403,"value":810},{"type":398,"tag":405,"props":814,"children":815},{},[816],{"type":403,"value":817},"观察者允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其它对象。",{"type":398,"tag":405,"props":819,"children":820},{},[821],{"type":398,"tag":450,"props":822,"children":825},{"alt":823,"src":824},"观察者结构","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6481a46f-cf16-4391-869b-8bacefa2ff5f.svg",[],{"type":398,"tag":405,"props":827,"children":828},{},[829],{"type":403,"value":830},"观察者模式中有一个不方便实现的地方就是订阅者的通知顺序该如何确定。",{"title":392,"searchDepth":832,"depth":832,"links":833},2,[834,835,836],{"id":432,"depth":832,"text":432},{"id":549,"depth":832,"text":549},{"id":705,"depth":832,"text":705},"markdown","content:7.gists:design-patterns.md","content","7.gists/design-patterns.md","md",[843,844],{"_path":182,"title":181,"description":392},{"_path":188,"title":187,"description":392},1718146379080]