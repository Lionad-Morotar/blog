[{"data":1,"prerenderedAt":941},["ShallowReactive",2],{"navigation":3,"/gists/google-cpp-standard":410,"/gists/google-cpp-standard-surround":937},[4,32,83,102,129,135,141,147,393,399,405],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96,99],{"title":88,"_path":89},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":91,"_path":92},"🌐 AnySort","/tools/anysort",{"title":94,"_path":95},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":97,"_path":98},"👓 Crapto","/tools/crypto-inline",{"title":100,"_path":101},"🖨️ any-to-base64","/tools/any-to-base64",{"title":103,"_path":104,"children":105},"吉他剧场 / Music","/music",[106,108,111,114,117,120,123,126],{"title":107,"_path":104},"🎸 FingerStyle！",{"title":109,"_path":110},"🌬️ 等待的风","/music/wind",{"title":112,"_path":113},"💕 约定的海洋","/music/ocean",{"title":115,"_path":116},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":118,"_path":119},"🌏 残酷天使的行动纲领","/music/eva",{"title":121,"_path":122},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":124,"_path":125},"🍷 Wu Wei","/music/wu-wei",{"title":127,"_path":128},"🌅 无题","/music/untitled",{"title":130,"_path":131,"children":132},"画点什么 / Paint","/paint",[133],{"title":134,"_path":131},"🚧 正在施工",{"title":136,"_path":137,"children":138},"读书笔记 / Notes","/books",[139],{"title":140,"_path":137},"📕 读书笔记",{"title":142,"_path":143,"children":144},"知识地图 / Maps","/maps",[145],{"title":146,"_path":143},"🏁 知识地图",{"title":148,"_path":149,"children":150},"零散的笔记 / Gists","/gists",[151,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"title":152,"_path":149},"🧊 Gists",{"title":154,"_path":155},"网站的可访问性","/gists/accessibility",{"title":157,"_path":158},"Bit","/gists/bit",{"title":160,"_path":161},"图片模糊","/gists/blur",{"title":163,"_path":164},"渲染相关笔记","/gists/c4d",{"title":166,"_path":167},"CDN 问题记录","/gists/cdn",{"title":169,"_path":170},"消毒剂","/gists/cleaner",{"title":172,"_path":173},"Windows Command","/gists/cmd",{"title":175,"_path":176},"Command","/gists/command",{"title":178,"_path":179},"复杂科学","/gists/complexity-science",{"title":181,"_path":182},"GitHub Copilot","/gists/copilot",{"title":184,"_path":185},"宇宙","/gists/cosmos",{"title":187,"_path":188},"C++","/gists/cpp",{"title":190,"_path":191},"Data Structure","/gists/data-structure",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"设计模式","/gists/design-patterns",{"title":199,"_path":200},"Developer Experience","/gists/developer-experience",{"title":202,"_path":203},"Device Metrics","/gists/device-metrix",{"title":205,"_path":206},"数字化转型","/gists/digital-transformation",{"title":208,"_path":209},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":211,"_path":212},"正则表达式","/gists/eegex",{"title":214,"_path":215},"Emoji","/gists/emoji",{"title":217,"_path":218},"工程","/gists/engineering",{"title":220,"_path":221},"熵","/gists/entropy",{"title":223,"_path":224},"Environment","/gists/environment",{"title":226,"_path":227},"Erlang","/gists/erlang",{"title":229,"_path":230},"逃离塔克夫","/gists/escape-from-tarkov",{"title":232,"_path":233},"ESNext (ES6-ES11)","/gists/esnext",{"title":235,"_path":236},"Eval！","/gists/eval",{"title":238,"_path":239},"Flutter","/gists/flutter",{"title":241,"_path":242},"字体","/gists/font",{"title":244,"_path":245},"JS 函数式编程","/gists/functional",{"title":247,"_path":248},"游戏化","/gists/gamification",{"title":250,"_path":251},"Google C++ Standard","/gists/google-cpp-standard",{"title":253,"_path":254},"双向链接完全体","/gists/graph",{"title":256,"_path":257},"Hardwares","/gists/hardwares",{"title":259,"_path":260},"哈希冲突","/gists/hash-collision",{"title":262,"_path":263},"信息设计","/gists/information-design",{"title":265,"_path":266},"InstantPage","/gists/instant.page",{"title":268,"_path":269},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":271,"_path":272},"KVStore","/gists/key-value-db",{"title":274,"_path":275},"Kubernetes","/gists/kubernetes",{"title":277,"_path":278},"Makefile","/gists/makefile",{"title":280,"_path":281},"Markdown Inline Style","/gists/markdown-nice",{"title":283,"_path":284},"小程序","/gists/miniapp",{"title":286,"_path":287},"减小页面快照体积","/gists/minify-html",{"title":289,"_path":290},"mklink","/gists/mklink",{"title":292,"_path":293},"Mock","/gists/mock",{"title":295,"_path":296},"多人协作系统","/gists/multiplayer",{"title":298,"_path":299},"多端应用","/gists/multy-end-app",{"title":301,"_path":302},"神经科学","/gists/neuroscience",{"title":304,"_path":305},"OO","/gists/oo",{"title":307,"_path":308},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":310,"_path":311},"PInvoke","/gists/pinvoke",{"title":313,"_path":314},"像素","/gists/pixel",{"title":316,"_path":317},"PowerShell","/gists/powershell",{"title":319,"_path":320},"量子","/gists/quantum",{"title":322,"_path":323},"保持好奇心","/gists/questions",{"title":325,"_path":326},"React Native","/gists/react-native",{"title":328,"_path":329},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":331,"_path":332},"SEO","/gists/seo",{"title":334,"_path":335},"Shader","/gists/shader",{"title":337,"_path":338},"Shape Up","/gists/shape-up",{"title":340,"_path":341},"睡觉","/gists/sleep",{"title":343,"_path":344},"记录奇怪的问题","/gists/solved",{"title":346,"_path":347},"States","/gists/states",{"title":349,"_path":350},"Storage","/gists/storage",{"title":352,"_path":353},"音视频流处理","/gists/stream-cli",{"title":355,"_path":356},"Symbol","/gists/symbol",{"title":358,"_path":359},"系统论","/gists/systems-theory",{"title":361,"_path":362},"Taro","/gists/taro",{"title":364,"_path":365},"任务切片","/gists/task-slice",{"title":367,"_path":368},"技术偏好","/gists/tech-dudge",{"title":370,"_path":371},"Untitled","/gists/untitled",{"title":373,"_path":374},"可变字体","/gists/variable-font",{"title":376,"_path":377},"视觉错觉","/gists/visual-illusion",{"title":379,"_path":380},"SS(SSR)","/gists/vpn",{"title":382,"_path":383},"VS Code 插件开发","/gists/vscode-plugin",{"title":385,"_path":386},"Web Components","/gists/web-components",{"title":388,"_path":389},"Windows","/gists/windows",{"title":391,"_path":392},"查缺补漏","/gists/wrong",{"title":394,"_path":395,"children":396},"代码笔记 / Gists","/source-code",[397],{"title":398,"_path":395},"🚄 代码笔记",{"title":400,"_path":401,"children":402},"我 / Abount","/hire",[403],{"title":404,"_path":401},"📬 技术简历",{"title":406,"_path":407,"children":408},"todo","/todo",[409],{"title":406,"_path":407},{"_path":251,"_dir":411,"_draft":412,"_partial":412,"_locale":413,"title":250,"description":414,"body":415,"_type":931,"_id":932,"_source":933,"_file":934,"_stem":935,"_extension":936},"gists",false,"","https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",{"type":416,"children":417,"toc":928},"root",[418,426,437,443,486,491,519,524,577,582,615,620,628,634,731,736,789,794,817,822,905,910],{"type":419,"tag":420,"props":421,"children":423},"element","h1",{"id":422},"google-c-standard",[424],{"type":425,"value":250},"text",{"type":419,"tag":427,"props":428,"children":429},"p",{},[430],{"type":419,"tag":431,"props":432,"children":435},"a",{"href":414,"rel":433},[434],"nofollow",[436],{"type":425,"value":414},{"type":419,"tag":438,"props":439,"children":441},"h4",{"id":440},"头文件",[442],{"type":425,"value":440},{"type":419,"tag":444,"props":445,"children":446},"ul",{},[447,453,471,476,481],{"type":419,"tag":448,"props":449,"children":450},"li",{},[451],{"type":425,"value":452},"头文件应该能够自给自足（self-contained,也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":419,"tag":448,"props":454,"children":455},{},[456,458,464,466],{"type":425,"value":457},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是: \u003CPROJECT>",{"type":419,"tag":459,"props":460,"children":461},"em",{},[462],{"type":425,"value":463},"\u003CPATH>",{"type":425,"value":465},"\u003CFILE>",{"type":419,"tag":459,"props":467,"children":468},{},[469],{"type":425,"value":470},"H",{"type":419,"tag":448,"props":472,"children":473},{},[474],{"type":425,"value":475},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":419,"tag":448,"props":477,"children":478},{},[479],{"type":425,"value":480},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":419,"tag":448,"props":482,"children":483},{},[484],{"type":425,"value":485},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":419,"tag":438,"props":487,"children":489},{"id":488},"作用域",[490],{"type":425,"value":488},{"type":419,"tag":444,"props":492,"children":493},{},[494,499,504,509,514],{"type":419,"tag":448,"props":495,"children":496},{},[497],{"type":425,"value":498},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":419,"tag":448,"props":500,"children":501},{},[502],{"type":425,"value":503},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":419,"tag":448,"props":505,"children":506},{},[507],{"type":425,"value":508},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":419,"tag":448,"props":510,"children":511},{},[512],{"type":425,"value":513},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":419,"tag":448,"props":515,"children":516},{},[517],{"type":425,"value":518},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":419,"tag":438,"props":520,"children":522},{"id":521},"类",[523],{"type":425,"value":521},{"type":419,"tag":444,"props":525,"children":526},{},[527,532,537,542,547,552,557,562,567,572],{"type":419,"tag":448,"props":528,"children":529},{},[530],{"type":425,"value":531},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":419,"tag":448,"props":533,"children":534},{},[535],{"type":425,"value":536},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":419,"tag":448,"props":538,"children":539},{},[540],{"type":425,"value":541},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":419,"tag":448,"props":543,"children":544},{},[545],{"type":425,"value":546},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":419,"tag":448,"props":548,"children":549},{},[550],{"type":425,"value":551},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":419,"tag":448,"props":553,"children":554},{},[555],{"type":425,"value":556},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类。",{"type":419,"tag":448,"props":558,"children":559},{},[560],{"type":425,"value":561},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 (不强制)。",{"type":419,"tag":448,"props":563,"children":564},{},[565],{"type":425,"value":566},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":419,"tag":448,"props":568,"children":569},{},[570],{"type":425,"value":571},"将所有数据成员声明为 private，除非是 static const 类型成员 (遵循 常量命名规则)。",{"type":419,"tag":448,"props":573,"children":574},{},[575],{"type":425,"value":576},"将相似的声明放在一起，将 public 部分放在最前。",{"type":419,"tag":438,"props":578,"children":580},{"id":579},"函数",[581],{"type":425,"value":579},{"type":419,"tag":444,"props":583,"children":584},{},[585,590,595,600,605,610],{"type":419,"tag":448,"props":586,"children":587},{},[588],{"type":425,"value":589},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":419,"tag":448,"props":591,"children":592},{},[593],{"type":425,"value":594},"倾向于编写简短，凝练的函数。",{"type":419,"tag":448,"props":596,"children":597},{},[598],{"type":425,"value":599},"所有按引用传递的参数必须加上 const。",{"type":419,"tag":448,"props":601,"children":602},{},[603],{"type":425,"value":604},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":419,"tag":448,"props":606,"children":607},{},[608],{"type":425,"value":609},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":419,"tag":448,"props":611,"children":612},{},[613],{"type":425,"value":614},"只有在常规写法 (返回类型前置) 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":419,"tag":438,"props":616,"children":618},{"id":617},"指针",[619],{"type":425,"value":617},{"type":419,"tag":444,"props":621,"children":622},{},[623],{"type":419,"tag":448,"props":624,"children":625},{},[626],{"type":425,"value":627},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":419,"tag":438,"props":629,"children":631},{"id":630},"其他-c-特性",[632],{"type":425,"value":633},"其他 C++ 特性",{"type":419,"tag":444,"props":635,"children":636},{},[637,641,646,651,656,661,666,671,676,681,686,691,696,701,706,711,716,721,726],{"type":419,"tag":448,"props":638,"children":639},{},[640],{"type":425,"value":599},{"type":419,"tag":448,"props":642,"children":643},{},[644],{"type":425,"value":645},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":419,"tag":448,"props":647,"children":648},{},[649],{"type":425,"value":650},"不允许使用变长数组和 alloca()。",{"type":419,"tag":448,"props":652,"children":653},{},[654],{"type":425,"value":655},"通常友元应该定义在同一文件内。",{"type":419,"tag":448,"props":657,"children":658},{},[659],{"type":425,"value":660},"不使用 C++ 异常。",{"type":419,"tag":448,"props":662,"children":663},{},[664],{"type":425,"value":665},"禁止使用 RTTI。",{"type":419,"tag":448,"props":667,"children":668},{},[669],{"type":425,"value":670},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式;",{"type":419,"tag":448,"props":672,"children":673},{},[674],{"type":425,"value":675},"只在记录日志时使用流。",{"type":419,"tag":448,"props":677,"children":678},{},[679],{"type":425,"value":680},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":419,"tag":448,"props":682,"children":683},{},[684],{"type":425,"value":685},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":419,"tag":448,"props":687,"children":688},{},[689],{"type":425,"value":690},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":419,"tag":448,"props":692,"children":693},{},[694],{"type":425,"value":695},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":419,"tag":448,"props":697,"children":698},{},[699],{"type":425,"value":700},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":419,"tag":448,"props":702,"children":703},{},[704],{"type":425,"value":705},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 (串) 用 '\\0'。",{"type":419,"tag":448,"props":707,"children":708},{},[709],{"type":425,"value":710},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":419,"tag":448,"props":712,"children":713},{},[714],{"type":425,"value":715},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":419,"tag":448,"props":717,"children":718},{},[719],{"type":425,"value":720},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":419,"tag":448,"props":722,"children":723},{},[724],{"type":425,"value":725},"不要使用复杂的模板编程",{"type":419,"tag":448,"props":727,"children":728},{},[729],{"type":425,"value":730},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":419,"tag":438,"props":732,"children":734},{"id":733},"命名约定",[735],{"type":425,"value":733},{"type":419,"tag":444,"props":737,"children":738},{},[739,744,749,754,759,764,769,774,779,784],{"type":419,"tag":448,"props":740,"children":741},{},[742],{"type":425,"value":743},"函数命名，变量命名，文件命名要有描述性; 少用缩写。",{"type":419,"tag":448,"props":745,"children":746},{},[747],{"type":425,"value":748},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":419,"tag":448,"props":750,"children":751},{},[752],{"type":425,"value":753},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":419,"tag":448,"props":755,"children":756},{},[757],{"type":425,"value":758},"变量 (包括函数参数) 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":419,"tag":448,"props":760,"children":761},{},[762],{"type":425,"value":763},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":419,"tag":448,"props":765,"children":766},{},[767],{"type":425,"value":768},"常规函数使用大小写混合。",{"type":419,"tag":448,"props":770,"children":771},{},[772],{"type":425,"value":773},"取值和设值函数则要求与变量名匹配。",{"type":419,"tag":448,"props":775,"children":776},{},[777],{"type":425,"value":778},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":419,"tag":448,"props":780,"children":781},{},[782],{"type":425,"value":783},"枚举的命名应当和 常量 一致。",{"type":419,"tag":448,"props":785,"children":786},{},[787],{"type":425,"value":788},"宏命名应使用全部大写加下划线分割单词。",{"type":419,"tag":438,"props":790,"children":792},{"id":791},"注释",[793],{"type":425,"value":791},{"type":419,"tag":444,"props":795,"children":796},{},[797,802,807,812],{"type":419,"tag":448,"props":798,"children":799},{},[800],{"type":425,"value":801},"在每一个文件开头加入版权公告。",{"type":419,"tag":448,"props":803,"children":804},{},[805],{"type":425,"value":806},"函数声明处的注释描述函数功能; 定义处的注释描述函数实现。",{"type":419,"tag":448,"props":808,"children":809},{},[810],{"type":425,"value":811},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":419,"tag":448,"props":813,"children":814},{},[815],{"type":425,"value":816},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":419,"tag":438,"props":818,"children":820},{"id":819},"格式化",[821],{"type":425,"value":819},{"type":419,"tag":444,"props":823,"children":824},{},[825,830,835,840,845,850,855,860,865,870,875,880,885,890,895,900],{"type":419,"tag":448,"props":826,"children":827},{},[828],{"type":425,"value":829},"每一行代码字符数不超过 80。",{"type":419,"tag":448,"props":831,"children":832},{},[833],{"type":425,"value":834},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":419,"tag":448,"props":836,"children":837},{},[838],{"type":425,"value":839},"只使用空格，每次缩进 2 个空格。",{"type":419,"tag":448,"props":841,"children":842},{},[843],{"type":425,"value":844},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":419,"tag":448,"props":846,"children":847},{},[848],{"type":425,"value":849},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":419,"tag":448,"props":851,"children":852},{},[853],{"type":425,"value":854},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":419,"tag":448,"props":856,"children":857},{},[858],{"type":425,"value":859},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":419,"tag":448,"props":861,"children":862},{},[863],{"type":425,"value":864},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":419,"tag":448,"props":866,"children":867},{},[868],{"type":425,"value":869},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":419,"tag":448,"props":871,"children":872},{},[873],{"type":425,"value":874},"布尔运算符如逻辑与总位于行尾:",{"type":419,"tag":448,"props":876,"children":877},{},[878],{"type":425,"value":879},"预处理指令不要缩进，从行首开始。",{"type":419,"tag":448,"props":881,"children":882},{},[883],{"type":425,"value":884},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":419,"tag":448,"props":886,"children":887},{},[888],{"type":425,"value":889},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":419,"tag":448,"props":891,"children":892},{},[893],{"type":425,"value":894},"命名空间内容不缩进。",{"type":419,"tag":448,"props":896,"children":897},{},[898],{"type":425,"value":899},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":419,"tag":448,"props":901,"children":902},{},[903],{"type":425,"value":904},"垂直留白越少越好。",{"type":419,"tag":438,"props":906,"children":908},{"id":907},"规则特例",[909],{"type":425,"value":907},{"type":419,"tag":444,"props":911,"children":912},{},[913,918,923],{"type":419,"tag":448,"props":914,"children":915},{},[916],{"type":425,"value":917},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":419,"tag":448,"props":919,"children":920},{},[921],{"type":425,"value":922},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":419,"tag":448,"props":924,"children":925},{},[926],{"type":425,"value":927},"运用常识和判断力，并且 保持一致。",{"title":413,"searchDepth":929,"depth":929,"links":930},2,[],"markdown","content:7.gists:google-cpp-standard.md","content","7.gists/google-cpp-standard.md","7.gists/google-cpp-standard","md",[938,940],{"_path":248,"title":247,"description":939},"游戏化是将游戏元素及游戏设计技术用于非游戏领域的设计",{"_path":254,"title":253,"description":413},1732808109504]