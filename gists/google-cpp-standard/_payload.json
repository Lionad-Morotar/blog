[{"data":1,"prerenderedAt":915},["Reactive",2],{"navigation":3,"/gists/google-cpp-standard":386,"/gists/google-cpp-standard-surround":912},[4,32,80,96,123,129,135,369,375,381],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"Bit","/gists/bit",{"title":148,"_path":149},"图片模糊","/gists/blur",{"title":151,"_path":152},"渲染相关笔记","/gists/c4d",{"title":154,"_path":155},"CDN 问题记录","/gists/cdn",{"title":157,"_path":158},"消毒剂","/gists/cleaner",{"title":160,"_path":161},"Windows Command","/gists/cmd",{"title":163,"_path":164},"Command","/gists/command",{"title":166,"_path":167},"复杂科学","/gists/complexity-science",{"title":169,"_path":170},"宇宙","/gists/cosmos",{"title":172,"_path":173},"C++","/gists/cpp",{"title":175,"_path":176},"Data Structure","/gists/data-structure",{"title":178,"_path":179},"DEPRESSION","/gists/depression",{"title":181,"_path":182},"设计模式","/gists/design-patterns",{"title":184,"_path":185},"Developer Experience","/gists/developer-experience",{"title":187,"_path":188},"Device Metrics","/gists/device-metrix",{"title":190,"_path":191},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":193,"_path":194},"正则表达式","/gists/eegex",{"title":196,"_path":197},"Emoji","/gists/emoji",{"title":199,"_path":200},"工程","/gists/engineering",{"title":202,"_path":203},"熵","/gists/entropy",{"title":205,"_path":206},"Environment","/gists/environment",{"title":208,"_path":209},"Erlang","/gists/erlang",{"title":211,"_path":212},"逃离塔克夫","/gists/escape-from-tarkov",{"title":214,"_path":215},"ESNext (ES6-ES11)","/gists/esnext",{"title":217,"_path":218},"Eval！","/gists/eval",{"title":220,"_path":221},"Flutter","/gists/flutter",{"title":223,"_path":224},"字体","/gists/font",{"title":226,"_path":227},"JS 函数式编程","/gists/functional",{"title":229,"_path":230},"Google C++ Standard","/gists/google-cpp-standard",{"title":232,"_path":233},"双向链接完全体","/gists/graph",{"title":235,"_path":236},"Hardwares","/gists/hardwares",{"title":238,"_path":239},"哈希冲突","/gists/hash-collision",{"title":241,"_path":242},"信息设计","/gists/information-design",{"title":244,"_path":245},"InstantPage","/gists/instant.page",{"title":247,"_path":248},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":250,"_path":251},"KVStore","/gists/key-value-db",{"title":253,"_path":254},"Kubernetes","/gists/kubernetes",{"title":256,"_path":257},"Makefile","/gists/makefile",{"title":259,"_path":260},"Markdown Inline Style","/gists/markdown-nice",{"title":262,"_path":263},"小程序","/gists/miniapp",{"title":265,"_path":266},"减小页面快照体积","/gists/minify-html",{"title":268,"_path":269},"mklink","/gists/mklink",{"title":271,"_path":272},"Mock","/gists/mock",{"title":274,"_path":275},"多端应用","/gists/multy-end-app",{"title":277,"_path":278},"神经科学","/gists/neuroscience",{"title":280,"_path":281},"OO","/gists/oo",{"title":283,"_path":284},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":286,"_path":287},"人物","/gists/person",{"title":289,"_path":290},"PInvoke","/gists/pinvoke",{"title":292,"_path":293},"像素","/gists/pixel",{"title":295,"_path":296},"PowerShell","/gists/powershell",{"title":298,"_path":299},"量子","/gists/quantum",{"title":301,"_path":302},"保持好奇心","/gists/questions",{"title":304,"_path":305},"React Native","/gists/react-native",{"title":307,"_path":308},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":310,"_path":311},"SEO","/gists/seo",{"title":313,"_path":314},"Shader","/gists/shader",{"title":316,"_path":317},"Shape Up","/gists/shape-up",{"title":319,"_path":320},"睡觉","/gists/sleep",{"title":322,"_path":323},"States","/gists/states",{"title":325,"_path":326},"Storage","/gists/storage",{"title":328,"_path":329},"音视频流处理","/gists/stream-cli",{"title":331,"_path":332},"Symbol","/gists/symbol",{"title":334,"_path":335},"系统论","/gists/systems-theory",{"title":337,"_path":338},"Taro","/gists/taro",{"title":340,"_path":341},"任务切片","/gists/task-slice",{"title":343,"_path":344},"技术偏好","/gists/tech-dudge",{"title":346,"_path":347},"Untitled","/gists/untitled",{"title":349,"_path":350},"可变字体","/gists/variable-font",{"title":352,"_path":353},"视觉错觉","/gists/visual-illusion",{"title":355,"_path":356},"SS(SSR)","/gists/vpn",{"title":358,"_path":359},"VS Code 插件开发","/gists/vscode-plugin",{"title":361,"_path":362},"Web Components","/gists/web-components",{"title":364,"_path":365},"Windows","/gists/windows",{"title":367,"_path":368},"查缺补漏","/gists/wrong",{"title":370,"_path":371,"children":372},"代码笔记 / Gists","/source-code",[373],{"title":374,"_path":371},"🚄 代码笔记",{"title":376,"_path":377,"children":378},"我 / Abount","/hire",[379],{"title":380,"_path":377},"📬 技术简历",{"title":382,"_path":383,"children":384},"todo","/todo",[385],{"title":382,"_path":383},{"_path":230,"_dir":387,"_draft":388,"_partial":388,"_locale":389,"title":229,"description":390,"body":391,"_type":907,"_id":908,"_source":909,"_file":910,"_extension":911},"gists",false,"","https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",{"type":392,"children":393,"toc":904},"root",[394,402,413,419,462,467,495,500,553,558,591,596,604,610,707,712,765,770,793,798,881,886],{"type":395,"tag":396,"props":397,"children":399},"element","h1",{"id":398},"google-c-standard",[400],{"type":401,"value":229},"text",{"type":395,"tag":403,"props":404,"children":405},"p",{},[406],{"type":395,"tag":407,"props":408,"children":411},"a",{"href":390,"rel":409},[410],"nofollow",[412],{"type":401,"value":390},{"type":395,"tag":414,"props":415,"children":417},"h4",{"id":416},"头文件",[418],{"type":401,"value":416},{"type":395,"tag":420,"props":421,"children":422},"ul",{},[423,429,447,452,457],{"type":395,"tag":424,"props":425,"children":426},"li",{},[427],{"type":401,"value":428},"头文件应该能够自给自足（self-contained,也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":395,"tag":424,"props":430,"children":431},{},[432,434,440,442],{"type":401,"value":433},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是: \u003CPROJECT>",{"type":395,"tag":435,"props":436,"children":437},"em",{},[438],{"type":401,"value":439},"\u003CPATH>",{"type":401,"value":441},"\u003CFILE>",{"type":395,"tag":435,"props":443,"children":444},{},[445],{"type":401,"value":446},"H",{"type":395,"tag":424,"props":448,"children":449},{},[450],{"type":401,"value":451},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":395,"tag":424,"props":453,"children":454},{},[455],{"type":401,"value":456},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":395,"tag":424,"props":458,"children":459},{},[460],{"type":401,"value":461},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":395,"tag":414,"props":463,"children":465},{"id":464},"作用域",[466],{"type":401,"value":464},{"type":395,"tag":420,"props":468,"children":469},{},[470,475,480,485,490],{"type":395,"tag":424,"props":471,"children":472},{},[473],{"type":401,"value":474},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":395,"tag":424,"props":476,"children":477},{},[478],{"type":401,"value":479},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":395,"tag":424,"props":481,"children":482},{},[483],{"type":401,"value":484},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":395,"tag":424,"props":486,"children":487},{},[488],{"type":401,"value":489},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":395,"tag":424,"props":491,"children":492},{},[493],{"type":401,"value":494},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":395,"tag":414,"props":496,"children":498},{"id":497},"类",[499],{"type":401,"value":497},{"type":395,"tag":420,"props":501,"children":502},{},[503,508,513,518,523,528,533,538,543,548],{"type":395,"tag":424,"props":504,"children":505},{},[506],{"type":401,"value":507},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":395,"tag":424,"props":509,"children":510},{},[511],{"type":401,"value":512},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":395,"tag":424,"props":514,"children":515},{},[516],{"type":401,"value":517},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":395,"tag":424,"props":519,"children":520},{},[521],{"type":401,"value":522},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":395,"tag":424,"props":524,"children":525},{},[526],{"type":401,"value":527},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":395,"tag":424,"props":529,"children":530},{},[531],{"type":401,"value":532},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类。",{"type":395,"tag":424,"props":534,"children":535},{},[536],{"type":401,"value":537},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 (不强制)。",{"type":395,"tag":424,"props":539,"children":540},{},[541],{"type":401,"value":542},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":395,"tag":424,"props":544,"children":545},{},[546],{"type":401,"value":547},"将所有数据成员声明为 private，除非是 static const 类型成员 (遵循 常量命名规则)。",{"type":395,"tag":424,"props":549,"children":550},{},[551],{"type":401,"value":552},"将相似的声明放在一起，将 public 部分放在最前。",{"type":395,"tag":414,"props":554,"children":556},{"id":555},"函数",[557],{"type":401,"value":555},{"type":395,"tag":420,"props":559,"children":560},{},[561,566,571,576,581,586],{"type":395,"tag":424,"props":562,"children":563},{},[564],{"type":401,"value":565},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":395,"tag":424,"props":567,"children":568},{},[569],{"type":401,"value":570},"倾向于编写简短，凝练的函数。",{"type":395,"tag":424,"props":572,"children":573},{},[574],{"type":401,"value":575},"所有按引用传递的参数必须加上 const。",{"type":395,"tag":424,"props":577,"children":578},{},[579],{"type":401,"value":580},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":395,"tag":424,"props":582,"children":583},{},[584],{"type":401,"value":585},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":395,"tag":424,"props":587,"children":588},{},[589],{"type":401,"value":590},"只有在常规写法 (返回类型前置) 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":395,"tag":414,"props":592,"children":594},{"id":593},"指针",[595],{"type":401,"value":593},{"type":395,"tag":420,"props":597,"children":598},{},[599],{"type":395,"tag":424,"props":600,"children":601},{},[602],{"type":401,"value":603},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":395,"tag":414,"props":605,"children":607},{"id":606},"其他-c-特性",[608],{"type":401,"value":609},"其他 C++ 特性",{"type":395,"tag":420,"props":611,"children":612},{},[613,617,622,627,632,637,642,647,652,657,662,667,672,677,682,687,692,697,702],{"type":395,"tag":424,"props":614,"children":615},{},[616],{"type":401,"value":575},{"type":395,"tag":424,"props":618,"children":619},{},[620],{"type":401,"value":621},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":395,"tag":424,"props":623,"children":624},{},[625],{"type":401,"value":626},"不允许使用变长数组和 alloca()。",{"type":395,"tag":424,"props":628,"children":629},{},[630],{"type":401,"value":631},"通常友元应该定义在同一文件内。",{"type":395,"tag":424,"props":633,"children":634},{},[635],{"type":401,"value":636},"不使用 C++ 异常。",{"type":395,"tag":424,"props":638,"children":639},{},[640],{"type":401,"value":641},"禁止使用 RTTI。",{"type":395,"tag":424,"props":643,"children":644},{},[645],{"type":401,"value":646},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式;",{"type":395,"tag":424,"props":648,"children":649},{},[650],{"type":401,"value":651},"只在记录日志时使用流。",{"type":395,"tag":424,"props":653,"children":654},{},[655],{"type":401,"value":656},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":395,"tag":424,"props":658,"children":659},{},[660],{"type":401,"value":661},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":395,"tag":424,"props":663,"children":664},{},[665],{"type":401,"value":666},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":395,"tag":424,"props":668,"children":669},{},[670],{"type":401,"value":671},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":395,"tag":424,"props":673,"children":674},{},[675],{"type":401,"value":676},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":395,"tag":424,"props":678,"children":679},{},[680],{"type":401,"value":681},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 (串) 用 '\\0'。",{"type":395,"tag":424,"props":683,"children":684},{},[685],{"type":401,"value":686},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":395,"tag":424,"props":688,"children":689},{},[690],{"type":401,"value":691},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":395,"tag":424,"props":693,"children":694},{},[695],{"type":401,"value":696},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":395,"tag":424,"props":698,"children":699},{},[700],{"type":401,"value":701},"不要使用复杂的模板编程",{"type":395,"tag":424,"props":703,"children":704},{},[705],{"type":401,"value":706},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":395,"tag":414,"props":708,"children":710},{"id":709},"命名约定",[711],{"type":401,"value":709},{"type":395,"tag":420,"props":713,"children":714},{},[715,720,725,730,735,740,745,750,755,760],{"type":395,"tag":424,"props":716,"children":717},{},[718],{"type":401,"value":719},"函数命名，变量命名，文件命名要有描述性; 少用缩写。",{"type":395,"tag":424,"props":721,"children":722},{},[723],{"type":401,"value":724},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":395,"tag":424,"props":726,"children":727},{},[728],{"type":401,"value":729},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":395,"tag":424,"props":731,"children":732},{},[733],{"type":401,"value":734},"变量 (包括函数参数) 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":395,"tag":424,"props":736,"children":737},{},[738],{"type":401,"value":739},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":395,"tag":424,"props":741,"children":742},{},[743],{"type":401,"value":744},"常规函数使用大小写混合。",{"type":395,"tag":424,"props":746,"children":747},{},[748],{"type":401,"value":749},"取值和设值函数则要求与变量名匹配。",{"type":395,"tag":424,"props":751,"children":752},{},[753],{"type":401,"value":754},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":395,"tag":424,"props":756,"children":757},{},[758],{"type":401,"value":759},"枚举的命名应当和 常量 一致。",{"type":395,"tag":424,"props":761,"children":762},{},[763],{"type":401,"value":764},"宏命名应使用全部大写加下划线分割单词。",{"type":395,"tag":414,"props":766,"children":768},{"id":767},"注释",[769],{"type":401,"value":767},{"type":395,"tag":420,"props":771,"children":772},{},[773,778,783,788],{"type":395,"tag":424,"props":774,"children":775},{},[776],{"type":401,"value":777},"在每一个文件开头加入版权公告。",{"type":395,"tag":424,"props":779,"children":780},{},[781],{"type":401,"value":782},"函数声明处的注释描述函数功能; 定义处的注释描述函数实现。",{"type":395,"tag":424,"props":784,"children":785},{},[786],{"type":401,"value":787},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":395,"tag":424,"props":789,"children":790},{},[791],{"type":401,"value":792},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":395,"tag":414,"props":794,"children":796},{"id":795},"格式化",[797],{"type":401,"value":795},{"type":395,"tag":420,"props":799,"children":800},{},[801,806,811,816,821,826,831,836,841,846,851,856,861,866,871,876],{"type":395,"tag":424,"props":802,"children":803},{},[804],{"type":401,"value":805},"每一行代码字符数不超过 80。",{"type":395,"tag":424,"props":807,"children":808},{},[809],{"type":401,"value":810},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":395,"tag":424,"props":812,"children":813},{},[814],{"type":401,"value":815},"只使用空格，每次缩进 2 个空格。",{"type":395,"tag":424,"props":817,"children":818},{},[819],{"type":401,"value":820},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":395,"tag":424,"props":822,"children":823},{},[824],{"type":401,"value":825},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":395,"tag":424,"props":827,"children":828},{},[829],{"type":401,"value":830},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":395,"tag":424,"props":832,"children":833},{},[834],{"type":401,"value":835},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":395,"tag":424,"props":837,"children":838},{},[839],{"type":401,"value":840},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":395,"tag":424,"props":842,"children":843},{},[844],{"type":401,"value":845},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":395,"tag":424,"props":847,"children":848},{},[849],{"type":401,"value":850},"布尔运算符如逻辑与总位于行尾:",{"type":395,"tag":424,"props":852,"children":853},{},[854],{"type":401,"value":855},"预处理指令不要缩进，从行首开始。",{"type":395,"tag":424,"props":857,"children":858},{},[859],{"type":401,"value":860},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":395,"tag":424,"props":862,"children":863},{},[864],{"type":401,"value":865},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":395,"tag":424,"props":867,"children":868},{},[869],{"type":401,"value":870},"命名空间内容不缩进。",{"type":395,"tag":424,"props":872,"children":873},{},[874],{"type":401,"value":875},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":395,"tag":424,"props":877,"children":878},{},[879],{"type":401,"value":880},"垂直留白越少越好。",{"type":395,"tag":414,"props":882,"children":884},{"id":883},"规则特例",[885],{"type":401,"value":883},{"type":395,"tag":420,"props":887,"children":888},{},[889,894,899],{"type":395,"tag":424,"props":890,"children":891},{},[892],{"type":401,"value":893},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":395,"tag":424,"props":895,"children":896},{},[897],{"type":401,"value":898},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":395,"tag":424,"props":900,"children":901},{},[902],{"type":401,"value":903},"运用常识和判断力，并且 保持一致。",{"title":389,"searchDepth":905,"depth":905,"links":906},2,[],"markdown","content:7.gists:google-cpp-standard.md","content","7.gists/google-cpp-standard.md","md",[913,914],{"_path":227,"title":226,"description":389},{"_path":233,"title":232,"description":389},1710257710569]