[{"data":1,"prerenderedAt":918},["Reactive",2],{"navigation":3,"/gists/google-cpp-standard":389,"/gists/google-cpp-standard-surround":915},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":233,"_dir":390,"_draft":391,"_partial":391,"_locale":392,"title":232,"description":393,"body":394,"_type":910,"_id":911,"_source":912,"_file":913,"_extension":914},"gists",false,"","https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",{"type":395,"children":396,"toc":907},"root",[397,405,416,422,465,470,498,503,556,561,594,599,607,613,710,715,768,773,796,801,884,889],{"type":398,"tag":399,"props":400,"children":402},"element","h1",{"id":401},"google-c-standard",[403],{"type":404,"value":232},"text",{"type":398,"tag":406,"props":407,"children":408},"p",{},[409],{"type":398,"tag":410,"props":411,"children":414},"a",{"href":393,"rel":412},[413],"nofollow",[415],{"type":404,"value":393},{"type":398,"tag":417,"props":418,"children":420},"h4",{"id":419},"头文件",[421],{"type":404,"value":419},{"type":398,"tag":423,"props":424,"children":425},"ul",{},[426,432,450,455,460],{"type":398,"tag":427,"props":428,"children":429},"li",{},[430],{"type":404,"value":431},"头文件应该能够自给自足（self-contained,也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":398,"tag":427,"props":433,"children":434},{},[435,437,443,445],{"type":404,"value":436},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是: \u003CPROJECT>",{"type":398,"tag":438,"props":439,"children":440},"em",{},[441],{"type":404,"value":442},"\u003CPATH>",{"type":404,"value":444},"\u003CFILE>",{"type":398,"tag":438,"props":446,"children":447},{},[448],{"type":404,"value":449},"H",{"type":398,"tag":427,"props":451,"children":452},{},[453],{"type":404,"value":454},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":398,"tag":427,"props":456,"children":457},{},[458],{"type":404,"value":459},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":398,"tag":427,"props":461,"children":462},{},[463],{"type":404,"value":464},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":398,"tag":417,"props":466,"children":468},{"id":467},"作用域",[469],{"type":404,"value":467},{"type":398,"tag":423,"props":471,"children":472},{},[473,478,483,488,493],{"type":398,"tag":427,"props":474,"children":475},{},[476],{"type":404,"value":477},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":398,"tag":427,"props":479,"children":480},{},[481],{"type":404,"value":482},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":398,"tag":427,"props":484,"children":485},{},[486],{"type":404,"value":487},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":398,"tag":427,"props":489,"children":490},{},[491],{"type":404,"value":492},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":398,"tag":427,"props":494,"children":495},{},[496],{"type":404,"value":497},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":398,"tag":417,"props":499,"children":501},{"id":500},"类",[502],{"type":404,"value":500},{"type":398,"tag":423,"props":504,"children":505},{},[506,511,516,521,526,531,536,541,546,551],{"type":398,"tag":427,"props":507,"children":508},{},[509],{"type":404,"value":510},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":398,"tag":427,"props":512,"children":513},{},[514],{"type":404,"value":515},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":398,"tag":427,"props":517,"children":518},{},[519],{"type":404,"value":520},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":398,"tag":427,"props":522,"children":523},{},[524],{"type":404,"value":525},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":398,"tag":427,"props":527,"children":528},{},[529],{"type":404,"value":530},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":398,"tag":427,"props":532,"children":533},{},[534],{"type":404,"value":535},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类。",{"type":398,"tag":427,"props":537,"children":538},{},[539],{"type":404,"value":540},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 (不强制)。",{"type":398,"tag":427,"props":542,"children":543},{},[544],{"type":404,"value":545},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":398,"tag":427,"props":547,"children":548},{},[549],{"type":404,"value":550},"将所有数据成员声明为 private，除非是 static const 类型成员 (遵循 常量命名规则)。",{"type":398,"tag":427,"props":552,"children":553},{},[554],{"type":404,"value":555},"将相似的声明放在一起，将 public 部分放在最前。",{"type":398,"tag":417,"props":557,"children":559},{"id":558},"函数",[560],{"type":404,"value":558},{"type":398,"tag":423,"props":562,"children":563},{},[564,569,574,579,584,589],{"type":398,"tag":427,"props":565,"children":566},{},[567],{"type":404,"value":568},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":398,"tag":427,"props":570,"children":571},{},[572],{"type":404,"value":573},"倾向于编写简短，凝练的函数。",{"type":398,"tag":427,"props":575,"children":576},{},[577],{"type":404,"value":578},"所有按引用传递的参数必须加上 const。",{"type":398,"tag":427,"props":580,"children":581},{},[582],{"type":404,"value":583},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":398,"tag":427,"props":585,"children":586},{},[587],{"type":404,"value":588},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":398,"tag":427,"props":590,"children":591},{},[592],{"type":404,"value":593},"只有在常规写法 (返回类型前置) 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":398,"tag":417,"props":595,"children":597},{"id":596},"指针",[598],{"type":404,"value":596},{"type":398,"tag":423,"props":600,"children":601},{},[602],{"type":398,"tag":427,"props":603,"children":604},{},[605],{"type":404,"value":606},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":398,"tag":417,"props":608,"children":610},{"id":609},"其他-c-特性",[611],{"type":404,"value":612},"其他 C++ 特性",{"type":398,"tag":423,"props":614,"children":615},{},[616,620,625,630,635,640,645,650,655,660,665,670,675,680,685,690,695,700,705],{"type":398,"tag":427,"props":617,"children":618},{},[619],{"type":404,"value":578},{"type":398,"tag":427,"props":621,"children":622},{},[623],{"type":404,"value":624},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":398,"tag":427,"props":626,"children":627},{},[628],{"type":404,"value":629},"不允许使用变长数组和 alloca()。",{"type":398,"tag":427,"props":631,"children":632},{},[633],{"type":404,"value":634},"通常友元应该定义在同一文件内。",{"type":398,"tag":427,"props":636,"children":637},{},[638],{"type":404,"value":639},"不使用 C++ 异常。",{"type":398,"tag":427,"props":641,"children":642},{},[643],{"type":404,"value":644},"禁止使用 RTTI。",{"type":398,"tag":427,"props":646,"children":647},{},[648],{"type":404,"value":649},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式;",{"type":398,"tag":427,"props":651,"children":652},{},[653],{"type":404,"value":654},"只在记录日志时使用流。",{"type":398,"tag":427,"props":656,"children":657},{},[658],{"type":404,"value":659},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":398,"tag":427,"props":661,"children":662},{},[663],{"type":404,"value":664},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":398,"tag":427,"props":666,"children":667},{},[668],{"type":404,"value":669},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":398,"tag":427,"props":671,"children":672},{},[673],{"type":404,"value":674},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":398,"tag":427,"props":676,"children":677},{},[678],{"type":404,"value":679},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":398,"tag":427,"props":681,"children":682},{},[683],{"type":404,"value":684},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 (串) 用 '\\0'。",{"type":398,"tag":427,"props":686,"children":687},{},[688],{"type":404,"value":689},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":398,"tag":427,"props":691,"children":692},{},[693],{"type":404,"value":694},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":398,"tag":427,"props":696,"children":697},{},[698],{"type":404,"value":699},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":398,"tag":427,"props":701,"children":702},{},[703],{"type":404,"value":704},"不要使用复杂的模板编程",{"type":398,"tag":427,"props":706,"children":707},{},[708],{"type":404,"value":709},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":398,"tag":417,"props":711,"children":713},{"id":712},"命名约定",[714],{"type":404,"value":712},{"type":398,"tag":423,"props":716,"children":717},{},[718,723,728,733,738,743,748,753,758,763],{"type":398,"tag":427,"props":719,"children":720},{},[721],{"type":404,"value":722},"函数命名，变量命名，文件命名要有描述性; 少用缩写。",{"type":398,"tag":427,"props":724,"children":725},{},[726],{"type":404,"value":727},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":398,"tag":427,"props":729,"children":730},{},[731],{"type":404,"value":732},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":398,"tag":427,"props":734,"children":735},{},[736],{"type":404,"value":737},"变量 (包括函数参数) 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":398,"tag":427,"props":739,"children":740},{},[741],{"type":404,"value":742},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":398,"tag":427,"props":744,"children":745},{},[746],{"type":404,"value":747},"常规函数使用大小写混合。",{"type":398,"tag":427,"props":749,"children":750},{},[751],{"type":404,"value":752},"取值和设值函数则要求与变量名匹配。",{"type":398,"tag":427,"props":754,"children":755},{},[756],{"type":404,"value":757},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":398,"tag":427,"props":759,"children":760},{},[761],{"type":404,"value":762},"枚举的命名应当和 常量 一致。",{"type":398,"tag":427,"props":764,"children":765},{},[766],{"type":404,"value":767},"宏命名应使用全部大写加下划线分割单词。",{"type":398,"tag":417,"props":769,"children":771},{"id":770},"注释",[772],{"type":404,"value":770},{"type":398,"tag":423,"props":774,"children":775},{},[776,781,786,791],{"type":398,"tag":427,"props":777,"children":778},{},[779],{"type":404,"value":780},"在每一个文件开头加入版权公告。",{"type":398,"tag":427,"props":782,"children":783},{},[784],{"type":404,"value":785},"函数声明处的注释描述函数功能; 定义处的注释描述函数实现。",{"type":398,"tag":427,"props":787,"children":788},{},[789],{"type":404,"value":790},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":398,"tag":427,"props":792,"children":793},{},[794],{"type":404,"value":795},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":398,"tag":417,"props":797,"children":799},{"id":798},"格式化",[800],{"type":404,"value":798},{"type":398,"tag":423,"props":802,"children":803},{},[804,809,814,819,824,829,834,839,844,849,854,859,864,869,874,879],{"type":398,"tag":427,"props":805,"children":806},{},[807],{"type":404,"value":808},"每一行代码字符数不超过 80。",{"type":398,"tag":427,"props":810,"children":811},{},[812],{"type":404,"value":813},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":398,"tag":427,"props":815,"children":816},{},[817],{"type":404,"value":818},"只使用空格，每次缩进 2 个空格。",{"type":398,"tag":427,"props":820,"children":821},{},[822],{"type":404,"value":823},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":398,"tag":427,"props":825,"children":826},{},[827],{"type":404,"value":828},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":398,"tag":427,"props":830,"children":831},{},[832],{"type":404,"value":833},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":398,"tag":427,"props":835,"children":836},{},[837],{"type":404,"value":838},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":398,"tag":427,"props":840,"children":841},{},[842],{"type":404,"value":843},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":398,"tag":427,"props":845,"children":846},{},[847],{"type":404,"value":848},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":398,"tag":427,"props":850,"children":851},{},[852],{"type":404,"value":853},"布尔运算符如逻辑与总位于行尾:",{"type":398,"tag":427,"props":855,"children":856},{},[857],{"type":404,"value":858},"预处理指令不要缩进，从行首开始。",{"type":398,"tag":427,"props":860,"children":861},{},[862],{"type":404,"value":863},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":398,"tag":427,"props":865,"children":866},{},[867],{"type":404,"value":868},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":398,"tag":427,"props":870,"children":871},{},[872],{"type":404,"value":873},"命名空间内容不缩进。",{"type":398,"tag":427,"props":875,"children":876},{},[877],{"type":404,"value":878},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":398,"tag":427,"props":880,"children":881},{},[882],{"type":404,"value":883},"垂直留白越少越好。",{"type":398,"tag":417,"props":885,"children":887},{"id":886},"规则特例",[888],{"type":404,"value":886},{"type":398,"tag":423,"props":890,"children":891},{},[892,897,902],{"type":398,"tag":427,"props":893,"children":894},{},[895],{"type":404,"value":896},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":398,"tag":427,"props":898,"children":899},{},[900],{"type":404,"value":901},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":398,"tag":427,"props":903,"children":904},{},[905],{"type":404,"value":906},"运用常识和判断力，并且 保持一致。",{"title":392,"searchDepth":908,"depth":908,"links":909},2,[],"markdown","content:7.gists:google-cpp-standard.md","content","7.gists/google-cpp-standard.md","md",[916,917],{"_path":230,"title":229,"description":392},{"_path":236,"title":235,"description":392},1711806180075]