[{"data":1,"prerenderedAt":924},["ShallowReactive",2],{"navigation":3,"/gists/google-cpp-standard":393,"/gists/google-cpp-standard-surround":920},[4,35,86,105,132,138,144,150,387],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"数字化转型","/gists/digital-transformation",{"title":205,"_path":206},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":208,"_path":209},"正则表达式","/gists/eegex",{"title":211,"_path":212},"Emoji","/gists/emoji",{"title":214,"_path":215},"工程","/gists/engineering",{"title":217,"_path":218},"熵","/gists/entropy",{"title":220,"_path":221},"Environment","/gists/environment",{"title":223,"_path":224},"Erlang","/gists/erlang",{"title":226,"_path":227},"逃离塔克夫","/gists/escape-from-tarkov",{"title":229,"_path":230},"ESNext (ES6-ES11)","/gists/esnext",{"title":232,"_path":233},"Eval！","/gists/eval",{"title":235,"_path":236},"Flutter","/gists/flutter",{"title":238,"_path":239},"字体","/gists/font",{"title":241,"_path":242},"JS 函数式编程","/gists/functional",{"title":244,"_path":245},"游戏化","/gists/gamification",{"title":247,"_path":248},"Google C++ Standard","/gists/google-cpp-standard",{"title":250,"_path":251},"双向链接完全体","/gists/graph",{"title":253,"_path":254},"Hardwares","/gists/hardwares",{"title":256,"_path":257},"哈希冲突","/gists/hash-collision",{"title":259,"_path":260},"信息设计","/gists/information-design",{"title":262,"_path":263},"InstantPage","/gists/instant.page",{"title":265,"_path":266},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":268,"_path":269},"KVStore","/gists/key-value-db",{"title":271,"_path":272},"Kubernetes","/gists/kubernetes",{"title":274,"_path":275},"Makefile","/gists/makefile",{"title":277,"_path":278},"Markdown Inline Style","/gists/markdown-nice",{"title":280,"_path":281},"小程序","/gists/miniapp",{"title":283,"_path":284},"减小页面快照体积","/gists/minify-html",{"title":286,"_path":287},"mklink","/gists/mklink",{"title":289,"_path":290},"Mock","/gists/mock",{"title":292,"_path":293},"多人协作系统","/gists/multiplayer",{"title":295,"_path":296},"多端应用","/gists/multy-end-app",{"title":298,"_path":299},"神经科学","/gists/neuroscience",{"title":301,"_path":302},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":304,"_path":305},"PInvoke","/gists/pinvoke",{"title":307,"_path":308},"像素","/gists/pixel",{"title":310,"_path":311},"PowerShell","/gists/powershell",{"title":313,"_path":314},"量子","/gists/quantum",{"title":316,"_path":317},"保持好奇心","/gists/questions",{"title":319,"_path":320},"React Native","/gists/react-native",{"title":322,"_path":323},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":325,"_path":326},"SEO","/gists/seo",{"title":328,"_path":329},"Shader","/gists/shader",{"title":331,"_path":332},"Shape Up","/gists/shape-up",{"title":334,"_path":335},"睡觉","/gists/sleep",{"title":337,"_path":338},"记录奇怪的问题","/gists/solved",{"title":340,"_path":341},"States","/gists/states",{"title":343,"_path":344},"Storage","/gists/storage",{"title":346,"_path":347},"音视频流处理","/gists/stream-cli",{"title":349,"_path":350},"Symbol","/gists/symbol",{"title":352,"_path":353},"系统论","/gists/systems-theory",{"title":355,"_path":356},"Taro","/gists/taro",{"title":358,"_path":359},"任务切片","/gists/task-slice",{"title":361,"_path":362},"技术偏好","/gists/tech-dudge",{"title":364,"_path":365},"Untitled","/gists/untitled",{"title":367,"_path":368},"可变字体","/gists/variable-font",{"title":370,"_path":371},"视觉错觉","/gists/visual-illusion",{"title":373,"_path":374},"SS(SSR)","/gists/vpn",{"title":376,"_path":377},"VS Code 插件开发","/gists/vscode-plugin",{"title":379,"_path":380},"Web Components","/gists/web-components",{"title":382,"_path":383},"Windows","/gists/windows",{"title":385,"_path":386},"查缺补漏","/gists/wrong",{"title":388,"_path":389,"children":390},"我 / About","/hire",[391],{"title":392,"_path":389},"📬 技术简历",{"_path":248,"_dir":394,"_draft":395,"_partial":395,"_locale":396,"title":247,"description":397,"body":398,"_type":914,"_id":915,"_source":916,"_file":917,"_stem":918,"_extension":919},"gists",false,"","https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",{"type":399,"children":400,"toc":911},"root",[401,409,420,426,469,474,502,507,560,565,598,603,611,617,714,719,772,777,800,805,888,893],{"type":402,"tag":403,"props":404,"children":406},"element","h1",{"id":405},"google-c-standard",[407],{"type":408,"value":247},"text",{"type":402,"tag":410,"props":411,"children":412},"p",{},[413],{"type":402,"tag":414,"props":415,"children":418},"a",{"href":397,"rel":416},[417],"nofollow",[419],{"type":408,"value":397},{"type":402,"tag":421,"props":422,"children":424},"h4",{"id":423},"头文件",[425],{"type":408,"value":423},{"type":402,"tag":427,"props":428,"children":429},"ul",{},[430,436,454,459,464],{"type":402,"tag":431,"props":432,"children":433},"li",{},[434],{"type":408,"value":435},"头文件应该能够自给自足（self-contained,也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":402,"tag":431,"props":437,"children":438},{},[439,441,447,449],{"type":408,"value":440},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是: \u003CPROJECT>",{"type":402,"tag":442,"props":443,"children":444},"em",{},[445],{"type":408,"value":446},"\u003CPATH>",{"type":408,"value":448},"\u003CFILE>",{"type":402,"tag":442,"props":450,"children":451},{},[452],{"type":408,"value":453},"H",{"type":402,"tag":431,"props":455,"children":456},{},[457],{"type":408,"value":458},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":402,"tag":431,"props":460,"children":461},{},[462],{"type":408,"value":463},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":402,"tag":431,"props":465,"children":466},{},[467],{"type":408,"value":468},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":402,"tag":421,"props":470,"children":472},{"id":471},"作用域",[473],{"type":408,"value":471},{"type":402,"tag":427,"props":475,"children":476},{},[477,482,487,492,497],{"type":402,"tag":431,"props":478,"children":479},{},[480],{"type":408,"value":481},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":402,"tag":431,"props":483,"children":484},{},[485],{"type":408,"value":486},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":402,"tag":431,"props":488,"children":489},{},[490],{"type":408,"value":491},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":402,"tag":431,"props":493,"children":494},{},[495],{"type":408,"value":496},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":402,"tag":431,"props":498,"children":499},{},[500],{"type":408,"value":501},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":402,"tag":421,"props":503,"children":505},{"id":504},"类",[506],{"type":408,"value":504},{"type":402,"tag":427,"props":508,"children":509},{},[510,515,520,525,530,535,540,545,550,555],{"type":402,"tag":431,"props":511,"children":512},{},[513],{"type":408,"value":514},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":402,"tag":431,"props":516,"children":517},{},[518],{"type":408,"value":519},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":402,"tag":431,"props":521,"children":522},{},[523],{"type":408,"value":524},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":402,"tag":431,"props":526,"children":527},{},[528],{"type":408,"value":529},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":402,"tag":431,"props":531,"children":532},{},[533],{"type":408,"value":534},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":402,"tag":431,"props":536,"children":537},{},[538],{"type":408,"value":539},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类。",{"type":402,"tag":431,"props":541,"children":542},{},[543],{"type":408,"value":544},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 (不强制)。",{"type":402,"tag":431,"props":546,"children":547},{},[548],{"type":408,"value":549},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":402,"tag":431,"props":551,"children":552},{},[553],{"type":408,"value":554},"将所有数据成员声明为 private，除非是 static const 类型成员 (遵循 常量命名规则)。",{"type":402,"tag":431,"props":556,"children":557},{},[558],{"type":408,"value":559},"将相似的声明放在一起，将 public 部分放在最前。",{"type":402,"tag":421,"props":561,"children":563},{"id":562},"函数",[564],{"type":408,"value":562},{"type":402,"tag":427,"props":566,"children":567},{},[568,573,578,583,588,593],{"type":402,"tag":431,"props":569,"children":570},{},[571],{"type":408,"value":572},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":402,"tag":431,"props":574,"children":575},{},[576],{"type":408,"value":577},"倾向于编写简短，凝练的函数。",{"type":402,"tag":431,"props":579,"children":580},{},[581],{"type":408,"value":582},"所有按引用传递的参数必须加上 const。",{"type":402,"tag":431,"props":584,"children":585},{},[586],{"type":408,"value":587},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":402,"tag":431,"props":589,"children":590},{},[591],{"type":408,"value":592},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":402,"tag":431,"props":594,"children":595},{},[596],{"type":408,"value":597},"只有在常规写法 (返回类型前置) 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":402,"tag":421,"props":599,"children":601},{"id":600},"指针",[602],{"type":408,"value":600},{"type":402,"tag":427,"props":604,"children":605},{},[606],{"type":402,"tag":431,"props":607,"children":608},{},[609],{"type":408,"value":610},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":402,"tag":421,"props":612,"children":614},{"id":613},"其他-c-特性",[615],{"type":408,"value":616},"其他 C++ 特性",{"type":402,"tag":427,"props":618,"children":619},{},[620,624,629,634,639,644,649,654,659,664,669,674,679,684,689,694,699,704,709],{"type":402,"tag":431,"props":621,"children":622},{},[623],{"type":408,"value":582},{"type":402,"tag":431,"props":625,"children":626},{},[627],{"type":408,"value":628},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":402,"tag":431,"props":630,"children":631},{},[632],{"type":408,"value":633},"不允许使用变长数组和 alloca()。",{"type":402,"tag":431,"props":635,"children":636},{},[637],{"type":408,"value":638},"通常友元应该定义在同一文件内。",{"type":402,"tag":431,"props":640,"children":641},{},[642],{"type":408,"value":643},"不使用 C++ 异常。",{"type":402,"tag":431,"props":645,"children":646},{},[647],{"type":408,"value":648},"禁止使用 RTTI。",{"type":402,"tag":431,"props":650,"children":651},{},[652],{"type":408,"value":653},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式;",{"type":402,"tag":431,"props":655,"children":656},{},[657],{"type":408,"value":658},"只在记录日志时使用流。",{"type":402,"tag":431,"props":660,"children":661},{},[662],{"type":408,"value":663},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":402,"tag":431,"props":665,"children":666},{},[667],{"type":408,"value":668},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":402,"tag":431,"props":670,"children":671},{},[672],{"type":408,"value":673},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":402,"tag":431,"props":675,"children":676},{},[677],{"type":408,"value":678},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":402,"tag":431,"props":680,"children":681},{},[682],{"type":408,"value":683},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":402,"tag":431,"props":685,"children":686},{},[687],{"type":408,"value":688},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 (串) 用 '\\0'。",{"type":402,"tag":431,"props":690,"children":691},{},[692],{"type":408,"value":693},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":402,"tag":431,"props":695,"children":696},{},[697],{"type":408,"value":698},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":402,"tag":431,"props":700,"children":701},{},[702],{"type":408,"value":703},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":402,"tag":431,"props":705,"children":706},{},[707],{"type":408,"value":708},"不要使用复杂的模板编程",{"type":402,"tag":431,"props":710,"children":711},{},[712],{"type":408,"value":713},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":402,"tag":421,"props":715,"children":717},{"id":716},"命名约定",[718],{"type":408,"value":716},{"type":402,"tag":427,"props":720,"children":721},{},[722,727,732,737,742,747,752,757,762,767],{"type":402,"tag":431,"props":723,"children":724},{},[725],{"type":408,"value":726},"函数命名，变量命名，文件命名要有描述性; 少用缩写。",{"type":402,"tag":431,"props":728,"children":729},{},[730],{"type":408,"value":731},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":402,"tag":431,"props":733,"children":734},{},[735],{"type":408,"value":736},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":402,"tag":431,"props":738,"children":739},{},[740],{"type":408,"value":741},"变量 (包括函数参数) 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":402,"tag":431,"props":743,"children":744},{},[745],{"type":408,"value":746},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":402,"tag":431,"props":748,"children":749},{},[750],{"type":408,"value":751},"常规函数使用大小写混合。",{"type":402,"tag":431,"props":753,"children":754},{},[755],{"type":408,"value":756},"取值和设值函数则要求与变量名匹配。",{"type":402,"tag":431,"props":758,"children":759},{},[760],{"type":408,"value":761},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":402,"tag":431,"props":763,"children":764},{},[765],{"type":408,"value":766},"枚举的命名应当和 常量 一致。",{"type":402,"tag":431,"props":768,"children":769},{},[770],{"type":408,"value":771},"宏命名应使用全部大写加下划线分割单词。",{"type":402,"tag":421,"props":773,"children":775},{"id":774},"注释",[776],{"type":408,"value":774},{"type":402,"tag":427,"props":778,"children":779},{},[780,785,790,795],{"type":402,"tag":431,"props":781,"children":782},{},[783],{"type":408,"value":784},"在每一个文件开头加入版权公告。",{"type":402,"tag":431,"props":786,"children":787},{},[788],{"type":408,"value":789},"函数声明处的注释描述函数功能; 定义处的注释描述函数实现。",{"type":402,"tag":431,"props":791,"children":792},{},[793],{"type":408,"value":794},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":402,"tag":431,"props":796,"children":797},{},[798],{"type":408,"value":799},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":402,"tag":421,"props":801,"children":803},{"id":802},"格式化",[804],{"type":408,"value":802},{"type":402,"tag":427,"props":806,"children":807},{},[808,813,818,823,828,833,838,843,848,853,858,863,868,873,878,883],{"type":402,"tag":431,"props":809,"children":810},{},[811],{"type":408,"value":812},"每一行代码字符数不超过 80。",{"type":402,"tag":431,"props":814,"children":815},{},[816],{"type":408,"value":817},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":402,"tag":431,"props":819,"children":820},{},[821],{"type":408,"value":822},"只使用空格，每次缩进 2 个空格。",{"type":402,"tag":431,"props":824,"children":825},{},[826],{"type":408,"value":827},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":402,"tag":431,"props":829,"children":830},{},[831],{"type":408,"value":832},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":402,"tag":431,"props":834,"children":835},{},[836],{"type":408,"value":837},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":402,"tag":431,"props":839,"children":840},{},[841],{"type":408,"value":842},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":402,"tag":431,"props":844,"children":845},{},[846],{"type":408,"value":847},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":402,"tag":431,"props":849,"children":850},{},[851],{"type":408,"value":852},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":402,"tag":431,"props":854,"children":855},{},[856],{"type":408,"value":857},"布尔运算符如逻辑与总位于行尾:",{"type":402,"tag":431,"props":859,"children":860},{},[861],{"type":408,"value":862},"预处理指令不要缩进，从行首开始。",{"type":402,"tag":431,"props":864,"children":865},{},[866],{"type":408,"value":867},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":402,"tag":431,"props":869,"children":870},{},[871],{"type":408,"value":872},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":402,"tag":431,"props":874,"children":875},{},[876],{"type":408,"value":877},"命名空间内容不缩进。",{"type":402,"tag":431,"props":879,"children":880},{},[881],{"type":408,"value":882},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":402,"tag":431,"props":884,"children":885},{},[886],{"type":408,"value":887},"垂直留白越少越好。",{"type":402,"tag":421,"props":889,"children":891},{"id":890},"规则特例",[892],{"type":408,"value":890},{"type":402,"tag":427,"props":894,"children":895},{},[896,901,906],{"type":402,"tag":431,"props":897,"children":898},{},[899],{"type":408,"value":900},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":402,"tag":431,"props":902,"children":903},{},[904],{"type":408,"value":905},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":402,"tag":431,"props":907,"children":908},{},[909],{"type":408,"value":910},"运用常识和判断力，并且 保持一致。",{"title":396,"searchDepth":912,"depth":912,"links":913},2,[],"markdown","content:7.gists:google-cpp-standard.md","content","7.gists/google-cpp-standard.md","7.gists/google-cpp-standard","md",[921,923],{"_path":245,"title":244,"description":922},"游戏化是将游戏元素及游戏设计技术用于非游戏领域的设计",{"_path":251,"title":250,"description":396},1741604945012]