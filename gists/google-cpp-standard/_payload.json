[{"data":1,"prerenderedAt":947},["ShallowReactive",2],{"navigation":3,"/gists/google-cpp-standard":416,"/gists/google-cpp-standard-surround":943},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / Abount","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":257,"_dir":417,"_draft":418,"_partial":418,"_locale":419,"title":256,"description":420,"body":421,"_type":937,"_id":938,"_source":939,"_file":940,"_stem":941,"_extension":942},"gists",false,"","https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/",{"type":422,"children":423,"toc":934},"root",[424,432,443,449,492,497,525,530,583,588,621,626,634,640,737,742,795,800,823,828,911,916],{"type":425,"tag":426,"props":427,"children":429},"element","h1",{"id":428},"google-c-standard",[430],{"type":431,"value":256},"text",{"type":425,"tag":433,"props":434,"children":435},"p",{},[436],{"type":425,"tag":437,"props":438,"children":441},"a",{"href":420,"rel":439},[440],"nofollow",[442],{"type":431,"value":420},{"type":425,"tag":444,"props":445,"children":447},"h4",{"id":446},"头文件",[448],{"type":431,"value":446},{"type":425,"tag":450,"props":451,"children":452},"ul",{},[453,459,477,482,487],{"type":425,"tag":454,"props":455,"children":456},"li",{},[457],{"type":431,"value":458},"头文件应该能够自给自足（self-contained,也就是可以作为第一个头文件被引入），以 .h 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法。",{"type":425,"tag":454,"props":460,"children":461},{},[462,464,470,472],{"type":431,"value":463},"所有头文件都应该有 #define 保护来防止头文件被多重包含，命名格式当是: \u003CPROJECT>",{"type":425,"tag":465,"props":466,"children":467},"em",{},[468],{"type":431,"value":469},"\u003CPATH>",{"type":431,"value":471},"\u003CFILE>",{"type":425,"tag":465,"props":473,"children":474},{},[475],{"type":431,"value":476},"H",{"type":425,"tag":454,"props":478,"children":479},{},[480],{"type":431,"value":481},"尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。",{"type":425,"tag":454,"props":483,"children":484},{},[485],{"type":431,"value":486},"只有当函数只有 10 行甚至更少时才将其定义为内联函数。",{"type":425,"tag":454,"props":488,"children":489},{},[490],{"type":431,"value":491},"使用标准的头文件包含顺序：相关头文件、C 库、C++ 库、其他库的头文件、本项目内的头文件。",{"type":425,"tag":444,"props":493,"children":495},{"id":494},"作用域",[496],{"type":431,"value":494},{"type":425,"tag":450,"props":498,"children":499},{},[500,505,510,515,520],{"type":425,"tag":454,"props":501,"children":502},{},[503],{"type":431,"value":504},"鼓励在 .cc 文件内使用匿名命名空间或 static 声明。使用具名的命名空间时，其名称可基于项目名或相对路径。禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。",{"type":425,"tag":454,"props":506,"children":507},{},[508],{"type":431,"value":509},"在 .cc 文件中定义一个不需要被外部引用的变量时，可以将它们放在匿名命名空间或声明为 static。但是不要在 .h 文件中这么做。",{"type":425,"tag":454,"props":511,"children":512},{},[513],{"type":431,"value":514},"使用静态成员函数或命名空间内的非成员函数，尽量不要用裸的全局函数。将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关。",{"type":425,"tag":454,"props":516,"children":517},{},[518],{"type":431,"value":519},"将函数变量尽可能置于最小作用域内，并在变量声明时进行初始化。",{"type":425,"tag":454,"props":521,"children":522},{},[523],{"type":431,"value":524},"禁止定义静态储存周期非 POD 变量，禁止使用含有副作用的函数初始化 POD 全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。",{"type":425,"tag":444,"props":526,"children":528},{"id":527},"类",[529],{"type":431,"value":527},{"type":425,"tag":450,"props":531,"children":532},{},[533,538,543,548,553,558,563,568,573,578],{"type":425,"tag":454,"props":534,"children":535},{},[536],{"type":431,"value":537},"不要在构造函数中调用虚函数，也不要在无法报出错误时进行可能失败的初始化。",{"type":425,"tag":454,"props":539,"children":540},{},[541],{"type":431,"value":542},"不要定义隐式类型转换。对于转换运算符和单参数构造函数，请使用 explicit 关键字。",{"type":425,"tag":454,"props":544,"children":545},{},[546],{"type":431,"value":547},"如果你的类型需要，就让它们支持拷贝 / 移动。否则，就把隐式产生的拷贝和移动函数禁用。",{"type":425,"tag":454,"props":549,"children":550},{},[551],{"type":431,"value":552},"仅当只有数据成员时使用 struct，其它一概使用 class。",{"type":425,"tag":454,"props":554,"children":555},{},[556],{"type":431,"value":557},"使用组合常常比使用继承更合理。如果使用继承的话，定义为 public 继承。",{"type":425,"tag":454,"props":559,"children":560},{},[561],{"type":431,"value":562},"真正需要用到多重实现继承的情况少之又少。只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的 纯接口类。",{"type":425,"tag":454,"props":564,"children":565},{},[566],{"type":431,"value":567},"接口是指只有纯虚函数和静态函数、没有非静态成员和非 protected 的构造函数的类，这些类以 Interface 为后缀 (不强制)。",{"type":425,"tag":454,"props":569,"children":570},{},[571],{"type":431,"value":572},"除少数特定环境外，不要重载运算符。也不要创建用户定义字面量。",{"type":425,"tag":454,"props":574,"children":575},{},[576],{"type":431,"value":577},"将所有数据成员声明为 private，除非是 static const 类型成员 (遵循 常量命名规则)。",{"type":425,"tag":454,"props":579,"children":580},{},[581],{"type":431,"value":582},"将相似的声明放在一起，将 public 部分放在最前。",{"type":425,"tag":444,"props":584,"children":586},{"id":585},"函数",[587],{"type":431,"value":585},{"type":425,"tag":450,"props":589,"children":590},{},[591,596,601,606,611,616],{"type":425,"tag":454,"props":592,"children":593},{},[594],{"type":431,"value":595},"我们倾向于按值返回， 否则按引用返回。 避免返回指针， 除非它可以为空。",{"type":425,"tag":454,"props":597,"children":598},{},[599],{"type":431,"value":600},"倾向于编写简短，凝练的函数。",{"type":425,"tag":454,"props":602,"children":603},{},[604],{"type":431,"value":605},"所有按引用传递的参数必须加上 const。",{"type":425,"tag":454,"props":607,"children":608},{},[609],{"type":431,"value":610},"若要使用函数重载，则必须能让读者一看调用点就胸有成竹，而不用花心思猜测调用的重载函数到底是哪一种。这一规则也适用于构造函数。",{"type":425,"tag":454,"props":612,"children":613},{},[614],{"type":431,"value":615},"只允许在非虚函数中使用缺省参数，且必须保证缺省参数的值始终一致。缺省参数与 函数重载 遵循同样的规则。一般情况下建议使用函数重载。",{"type":425,"tag":454,"props":617,"children":618},{},[619],{"type":431,"value":620},"只有在常规写法 (返回类型前置) 不便于书写或不便于阅读时使用返回类型后置语法。",{"type":425,"tag":444,"props":622,"children":624},{"id":623},"指针",[625],{"type":431,"value":623},{"type":425,"tag":450,"props":627,"children":628},{},[629],{"type":425,"tag":454,"props":630,"children":631},{},[632],{"type":431,"value":633},"动态分配出的对象最好有单一且固定的所有主，并通过智能指针传递所有权。",{"type":425,"tag":444,"props":635,"children":637},{"id":636},"其他-c-特性",[638],{"type":431,"value":639},"其他 C++ 特性",{"type":425,"tag":450,"props":641,"children":642},{},[643,647,652,657,662,667,672,677,682,687,692,697,702,707,712,717,722,727,732],{"type":425,"tag":454,"props":644,"children":645},{},[646],{"type":431,"value":605},{"type":425,"tag":454,"props":648,"children":649},{},[650],{"type":431,"value":651},"只在定义移动构造函数与移动赋值操作时使用右值引用。不要使用 std::forward。",{"type":425,"tag":454,"props":653,"children":654},{},[655],{"type":431,"value":656},"不允许使用变长数组和 alloca()。",{"type":425,"tag":454,"props":658,"children":659},{},[660],{"type":431,"value":661},"通常友元应该定义在同一文件内。",{"type":425,"tag":454,"props":663,"children":664},{},[665],{"type":431,"value":666},"不使用 C++ 异常。",{"type":425,"tag":454,"props":668,"children":669},{},[670],{"type":431,"value":671},"禁止使用 RTTI。",{"type":425,"tag":454,"props":673,"children":674},{},[675],{"type":431,"value":676},"使用 C++ 的类型转换，如 static_cast\u003C>()。不要使用 int y = (int)x 或 int y = int(x) 等转换方式;",{"type":425,"tag":454,"props":678,"children":679},{},[680],{"type":431,"value":681},"只在记录日志时使用流。",{"type":425,"tag":454,"props":683,"children":684},{},[685],{"type":431,"value":686},"对于迭代器和其他模板对象使用前缀形式 (++i) 的自增，自减运算符。",{"type":425,"tag":454,"props":688,"children":689},{},[690],{"type":431,"value":691},"我们强烈建议你在任何可能的情况下都要使用 const。此外有时改用 C++11 推出的 constexpr 更好。",{"type":425,"tag":454,"props":693,"children":694},{},[695],{"type":431,"value":696},"在 C++11 里，用 constexpr 来定义真正的常量，或实现常量初始化。",{"type":425,"tag":454,"props":698,"children":699},{},[700],{"type":431,"value":701},"C++ 内建整型中，仅使用 int。如果程序中需要不同大小的变量，可以使用 \u003Cstdint.h> 中长度精确的整型，如 int16_t。",{"type":425,"tag":454,"props":703,"children":704},{},[705],{"type":431,"value":706},"使用宏时要非常谨慎，尽量以内联函数，引用，枚举和常量代替之。",{"type":425,"tag":454,"props":708,"children":709},{},[710],{"type":431,"value":711},"整数用 0，实数用 0.0，指针用 nullptr 或 NULL，字符 (串) 用 '\\0'。",{"type":425,"tag":454,"props":713,"children":714},{},[715],{"type":431,"value":716},"尽可能用 sizeof(varname) 代替 sizeof(type)。",{"type":425,"tag":454,"props":718,"children":719},{},[720],{"type":431,"value":721},"用 auto 绕过烦琐的类型名，只要可读性好就继续用，别用在局部变量之外的地方。",{"type":425,"tag":454,"props":723,"children":724},{},[725],{"type":431,"value":726},"适当使用 lambda 表达式。别用默认 lambda 捕获，所有捕获都要显式写出来。",{"type":425,"tag":454,"props":728,"children":729},{},[730],{"type":431,"value":731},"不要使用复杂的模板编程",{"type":425,"tag":454,"props":733,"children":734},{},[735],{"type":431,"value":736},"只使用 Boost 中被认可的库，包括：Call Traits、Compressed Pair、BGL、Property Map、Iterator、Polygon、Bitmap、Statistic Distribution and Functions、Multi-index、Heap、Container。",{"type":425,"tag":444,"props":738,"children":740},{"id":739},"命名约定",[741],{"type":431,"value":739},{"type":425,"tag":450,"props":743,"children":744},{},[745,750,755,760,765,770,775,780,785,790],{"type":425,"tag":454,"props":746,"children":747},{},[748],{"type":431,"value":749},"函数命名，变量命名，文件命名要有描述性; 少用缩写。",{"type":425,"tag":454,"props":751,"children":752},{},[753],{"type":431,"value":754},"文件名要全部小写，可以包含下划线或连字符，依照项目的约定。如果没有约定，那么下划线更好。",{"type":425,"tag":454,"props":756,"children":757},{},[758],{"type":431,"value":759},"类型名称的每个单词首字母均大写，不包含下划线。",{"type":425,"tag":454,"props":761,"children":762},{},[763],{"type":431,"value":764},"变量 (包括函数参数) 和数据成员名一律小写，单词之间用下划线连接。类的成员变量以下划线结尾，但结构体的不用。",{"type":425,"tag":454,"props":766,"children":767},{},[768],{"type":431,"value":769},"声明为 constexpr 或 const 的变量，或在程序运行期间其值始终保持不变的，命名时以 “k” 开头，大小写混合。",{"type":425,"tag":454,"props":771,"children":772},{},[773],{"type":431,"value":774},"常规函数使用大小写混合。",{"type":425,"tag":454,"props":776,"children":777},{},[778],{"type":431,"value":779},"取值和设值函数则要求与变量名匹配。",{"type":425,"tag":454,"props":781,"children":782},{},[783],{"type":431,"value":784},"命名空间以小写字母命名。最高级命名空间的名字取决于项目名称。",{"type":425,"tag":454,"props":786,"children":787},{},[788],{"type":431,"value":789},"枚举的命名应当和 常量 一致。",{"type":425,"tag":454,"props":791,"children":792},{},[793],{"type":431,"value":794},"宏命名应使用全部大写加下划线分割单词。",{"type":425,"tag":444,"props":796,"children":798},{"id":797},"注释",[799],{"type":431,"value":797},{"type":425,"tag":450,"props":801,"children":802},{},[803,808,813,818],{"type":425,"tag":454,"props":804,"children":805},{},[806],{"type":431,"value":807},"在每一个文件开头加入版权公告。",{"type":425,"tag":454,"props":809,"children":810},{},[811],{"type":431,"value":812},"函数声明处的注释描述函数功能; 定义处的注释描述函数实现。",{"type":425,"tag":454,"props":814,"children":815},{},[816],{"type":431,"value":817},"对于代码中巧妙的，晦涩的，有趣的，重要的地方加以注释。",{"type":425,"tag":454,"props":819,"children":820},{},[821],{"type":431,"value":822},"对那些临时的，短期的解决方案，或已经够好但仍不完美的代码使用 TODO 注释；通过弃用注释（DEPRECATED comments）以标记某接口点已弃用；",{"type":425,"tag":444,"props":824,"children":826},{"id":825},"格式化",[827],{"type":431,"value":825},{"type":425,"tag":450,"props":829,"children":830},{},[831,836,841,846,851,856,861,866,871,876,881,886,891,896,901,906],{"type":425,"tag":454,"props":832,"children":833},{},[834],{"type":431,"value":835},"每一行代码字符数不超过 80。",{"type":425,"tag":454,"props":837,"children":838},{},[839],{"type":431,"value":840},"尽量不使用非 ASCII 字符，使用时必须使用 UTF-8 编码。",{"type":425,"tag":454,"props":842,"children":843},{},[844],{"type":431,"value":845},"只使用空格，每次缩进 2 个空格。",{"type":425,"tag":454,"props":847,"children":848},{},[849],{"type":431,"value":850},"返回类型和函数名在同一行，参数也尽量放在同一行，如果放不下就对形参分行，分行方式与 函数调用 一致。",{"type":425,"tag":454,"props":852,"children":853},{},[854],{"type":431,"value":855},"要么一行写完函数调用，要么在圆括号里对参数分行，要么参数另起一行且缩进四格。如果没有其它顾虑的话，尽可能精简行数，比如把多个参数适当地放在同一行里。",{"type":425,"tag":454,"props":857,"children":858},{},[859],{"type":431,"value":860},"怎么格式化函数调用，就怎么格式化 列表初始化。",{"type":425,"tag":454,"props":862,"children":863},{},[864],{"type":431,"value":865},"倾向于不在圆括号内使用空格。关键字 if 和 else 另起一行。",{"type":425,"tag":454,"props":867,"children":868},{},[869],{"type":431,"value":870},"switch 语句可以使用大括号分段，以表明 cases 之间不是连在一起的。在单语句循环里，括号可用可不用。空循环体应使用 {} 或 continue。",{"type":425,"tag":454,"props":872,"children":873},{},[874],{"type":431,"value":875},"句点或箭头前后不要有空格。指针/地址操作符 (*，&) 之后不能有空格。",{"type":425,"tag":454,"props":877,"children":878},{},[879],{"type":431,"value":880},"布尔运算符如逻辑与总位于行尾:",{"type":425,"tag":454,"props":882,"children":883},{},[884],{"type":431,"value":885},"预处理指令不要缩进，从行首开始。",{"type":425,"tag":454,"props":887,"children":888},{},[889],{"type":431,"value":890},"访问控制块的声明依次序是 public:，protected:，private:，每个都缩进 1 个空格。",{"type":425,"tag":454,"props":892,"children":893},{},[894],{"type":431,"value":895},"构造函数初始化列表放在同一行或按四格缩进并排多行。",{"type":425,"tag":454,"props":897,"children":898},{},[899],{"type":431,"value":900},"命名空间内容不缩进。",{"type":425,"tag":454,"props":902,"children":903},{},[904],{"type":431,"value":905},"水平留白的使用根据在代码中的位置决定。永远不要在行尾添加没意义的留白。",{"type":425,"tag":454,"props":907,"children":908},{},[909],{"type":431,"value":910},"垂直留白越少越好。",{"type":425,"tag":444,"props":912,"children":914},{"id":913},"规则特例",[915],{"type":431,"value":913},{"type":425,"tag":450,"props":917,"children":918},{},[919,924,929],{"type":425,"tag":454,"props":920,"children":921},{},[922],{"type":431,"value":923},"对于现有不符合既定编程风格的代码可以网开一面。",{"type":425,"tag":454,"props":925,"children":926},{},[927],{"type":431,"value":928},"Windows 程序员有自己的编程习惯，主要源于 Windows 头文件和其它 Microsoft 代码。",{"type":425,"tag":454,"props":930,"children":931},{},[932],{"type":431,"value":933},"运用常识和判断力，并且 保持一致。",{"title":419,"searchDepth":935,"depth":935,"links":936},2,[],"markdown","content:7.gists:google-cpp-standard.md","content","7.gists/google-cpp-standard.md","7.gists/google-cpp-standard","md",[944,946],{"_path":254,"title":253,"description":945},"游戏化是将游戏元素及游戏设计技术用于非游戏领域的设计",{"_path":260,"title":259,"description":419},1738321905523]