{"_path":"/maps/_oop/oop","_dir":"_oop","_draft":false,"_partial":true,"_locale":"","title":"面相对象编程","description":"面向对象编程是一种编程范式，它将数据和操作封装在对象中，对象之间通过消息传递进行通信。","body":{"type":"root","children":[{"type":"element","tag":"h4","props":{"id":"面向对象主要关注哪些方面"},"children":[{"type":"text","value":"面向对象主要关注哪些方面？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"四个核心概念：封装（Encapsulation）、继承（Inheritance）、多态（Polymorphism）、抽象（Abstraction）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://www.bilibili.com/video/BV1gb411w7eW","rel":["nofollow"]},"children":[{"type":"text","value":"JavaScript OOP 面向对象编程 @Mosh"}]},{"type":"text","value":"，非常基础，适合新手入门"}]},{"type":"element","tag":"h4","props":{"id":"面相对象和设计模式的关系"},"children":[{"type":"text","value":"面相对象和设计模式的关系？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般意义上的设计模式指的是在 OOP 编程范式的实践下总结出来的一些用来解决特定问题的代码设计经验。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"/maps/_software/design-patterns"},"children":[{"type":"text","value":"设计模式"}]}]},{"type":"element","tag":"h2","props":{"id":"uml"},"children":[{"type":"text","value":"UML"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"类之间的关系总的来说可以包含这几种："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A 依赖 B：对类 B 的修改会影响到类 A"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A 关联 B：对象 A 知道对象 B，类 A 依赖于类 B"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A 聚合 B：对象 A 由 B 构成，类 A 依赖于类 B"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A 组合 B：对象 A 由 B 构成且管理 B 的生命周期，类 A 依赖于类 B"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A 实现 B：对象 A 可视为对象 B，类 A 定义了接口 B 声明的方法，类 A 依赖于类 B"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A 继承 B：对象 A 可视为对象 B，类 A 继承类 B 的接口和实现，还可以对其扩展，类 A 依赖于类 B"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Class Relations","src":"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/b3612320-5822-48fc-8041-ead5c269f8e5.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Object Relations","src":"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/cff33e77-e9aa-48eb-ae0d-01dd1561abd0.svg"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"设计原则"},"children":[{"type":"text","value":"设计原则"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"什么是优秀的软件设计？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"显然，在不同的公司、不同的项目，软件设计并没有一个恒定的标准，不过总的来说我们会讨论代码复用以及代码的扩展性。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有几个基础的设计准则能帮助你做到这两点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"封装变化：找到程序中易变的内容并将其和不变的内容区分开来"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"面向接口：依赖抽象通常优于依赖具体"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"优先组合：组合优于继承，因为继承有着挺多保守诟病之处"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"SOLID 原则"}]}]},{"type":"element","tag":"h3","props":{"id":"组合优于继承"},"children":[{"type":"text","value":"组合优于继承"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"继承通常会引发大量问题："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"子类不能减少父类的接口，并且需要保证兼容"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"继承使状态逃离了父类的封装，子类和父类关系过于紧密"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"继承经常被滥用，导致平行继承体系的出现"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"假设你在售卖一些计算机，这些计算机包含笔记本，台式电脑以及算盘！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果使用继承的思路组织代码，你很可能对得到以下结构："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Computer Structure V1","src":"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/348faf14-874b-410d-b4b9-ff00b04ab14e.svg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用组合可以方便地把不同的“维度”之间的并行关联拆分出来，降低代码复杂度："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Computer Structure V2","src":"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/6cbffe1a-8efd-4de6-9ed3-bfef8392bab5.svg"},"children":[]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"uml","depth":2,"text":"UML"},{"id":"设计原则","depth":2,"text":"设计原则","children":[{"id":"组合优于继承","depth":3,"text":"组合优于继承"}]}]}},"_type":"markdown","_id":"content:6.maps:_oop:oop.md","_source":"content","_file":"6.maps/_oop/oop.md","_stem":"6.maps/_oop/oop","_extension":"md"}