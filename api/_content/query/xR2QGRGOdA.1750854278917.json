{"_path":"/maps/_server/nodejs","_dir":"_server","_draft":false,"_partial":true,"_locale":"","title":"NodeJS","description":"NodeJS 是一个非阻塞 IO、事件驱动的服务端 JS 运行环境。","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"简介"},"children":[{"type":"text","value":"简介"}]},{"type":"element","tag":"h4","props":{"id":"nodejs-是什么"},"children":[{"type":"text","value":"NodeJS 是什么？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"NodeJS 是一个非阻塞 IO、事件驱动的服务端 JS 运行环境。"}]},{"type":"element","tag":"h4","props":{"id":"非阻塞-io-是什么"},"children":[{"type":"text","value":"非阻塞 IO 是什么？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"非阻塞 IO 意味着在执行 IO 操作时，将耗时任务以异步的方式交给子线程处理，等完成之后再通过回调的方式继续执行后续代码。"}]},{"type":"element","tag":"h4","props":{"id":"事件循环机制和浏览器中有什么不同"},"children":[{"type":"text","value":"事件循环机制和浏览器中有什么不同？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TODO，类似但稍有区别。"}]},{"type":"element","tag":"h2","props":{"id":"v8"},"children":[{"type":"text","value":"V8"}]},{"type":"element","tag":"h4","props":{"id":"引擎的垃圾回收机制有了解吗"},"children":[{"type":"text","value":"引擎的垃圾回收机制有了解吗？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"V8 使用分代回收机制，将内存分为新生代和老生代空间，分别用不同的算法进行 GC。新生代空间每个周期都会触发 ScavengeGC，俗称小周期。如果两个周期内都没被清除的变量则转移到老生代内存中。老生代空间则使用标记清除算法（和标记紧缩算法）进行清理。"}]},{"type":"element","tag":"h4","props":{"id":"新生代空间的-gc-过程是怎样的"},"children":[{"type":"text","value":"新生代空间的 GC 过程是怎样的？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新生代空间通常只有 1-8 MB，被划分为两个等大的区域，出区和入区。新增变量放到入区中。一但入区满了，便把活跃对象复制到出区中，删除不活跃对象（紧缩过程）并交换出区入区，如此称为一个周期。如果活跃对象再两个周期内都没有被清除，则转移只老生代内存中。"}]},{"type":"element","tag":"h4","props":{"id":"老生代空间的-gc-过程是怎样的"},"children":[{"type":"text","value":"老生代空间的 GC 过程是怎样的？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"老生代空间的 GC 分标记和清除（或紧缩）两个阶段。每次循环，标记算法会将一个对象从队列中取出，将它以及邻接对象标记。到了清除阶段，未被标记的对象都将被删除。如果清楚阶段额外执行紧缩过程，则会尝试将零散的对象移动成连续的整体，以解决内存碎片化问题。为了优化老生代空间 GC 的“全停顿”，V8 将老生代空间的标记过程拆分为了子步骤，这样就可以将标记算法穿插在其它任务过程中执行。"}]},{"type":"element","tag":"h4","props":{"id":"常见的商业开源研究用的-js-引擎有哪些"},"children":[{"type":"text","value":"常见的商业、开源、研究用的 JS 引擎有哪些？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见"},{"type":"element","tag":"i","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://notes.eatonphil.com/javascript-implementations.html","rel":["nofollow"]},"children":[{"type":"text","value":"Enumerating and analyzing 40+ non-V8 JavaScript implementations"}]}]},{"type":"text","value":"，列举了 40 多个非 V8 的 JS 引擎实现。"}]},{"type":"element","tag":"h2","props":{"id":"api"},"children":[{"type":"text","value":"API"}]},{"type":"element","tag":"h4","props":{"id":"nodevm-是什么"},"children":[{"type":"text","value":"node:vm 是什么？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"node:vm 模块允许在 V8 虚拟机上下文中编译和运行代码，上下文中的任何属性都被视为全局变量，对全局变量任何改动也反映到上下文对象中。但是 node:vm 不是一个安全机制，不应该使用它来运行不受信任的代码。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"http://nodejs.cn/api/vm.html#vm_vm_executing_javascript","rel":["nofollow"]},"children":[{"type":"text","value":"VM"}]}]},{"type":"element","tag":"h2","props":{"id":"源码解析"},"children":[{"type":"text","value":"源码解析"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/maps/_server/nodejs/source/require"},"children":[{"type":"text","value":"NodeJS | require"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"简介","depth":2,"text":"简介"},{"id":"v8","depth":2,"text":"V8"},{"id":"api","depth":2,"text":"API"},{"id":"源码解析","depth":2,"text":"源码解析"}]}},"_type":"markdown","_id":"content:6.maps:_server:nodejs:index.md","_source":"content","_file":"6.maps/_server/nodejs/index.md","_stem":"6.maps/_server/nodejs/index","_extension":"md"}