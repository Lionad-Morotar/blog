{"_path":"/maps/_fe-framework/micro-fe","_dir":"_fe-framework","_draft":false,"_partial":true,"_locale":"","title":"微前端","description":"微前端是一种架构风格，是一种将前端应用拆分成更小、更独立的部分，然后将这些部分组合在一起的技术方案。微前端的目标是将单体应用拆分成多个小型应用，每个小型应用都可以独立开发、独立部署。","body":{"type":"root","children":[{"type":"element","tag":"h4","props":{"id":"微前端解决什么问题"},"children":[{"type":"text","value":"微前端解决什么问题？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"主要应对一个单体应用在相对长的时间跨度下，由于参与人数、团队的增多和变迁，从一个普通应用演变为了巨石应用，随之带来的难以维护的问题。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"单体应用、前后端分离和微前端","src":"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20221023230253.png"},"children":[]}]},{"type":"element","tag":"h4","props":{"id":"微前端技术要点"},"children":[{"type":"text","value":"微前端技术要点？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"做到技术栈无关的同时提供以下技术能力支持："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"JS 沙箱：子应用全局变量、事件不互相影响"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"CSS 隔离：子应用之间的样式不互相影响"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"公共依赖加载：不同子应用都用到的资源怎么加载"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"父子应用通讯：子应用如何调用父应用方法、父应用如何下发状态"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"按需加载"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"预加载"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"子应用嵌套"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"子应用并行"}]}]},{"type":"element","tag":"h4","props":{"id":"微前端的方案选择"},"children":[{"type":"text","value":"微前端的方案选择？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"基座方案：主应用中预先注册子应用，然后监听路由变化，加载匹配到的子应用资源。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"iframe：接入简单并且有完美的隔离效果，但是在共享资源如 URL、Cookie 时不好处理，再者是加载慢。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Web Components：Custom Elements、Shadow DOM、HTML Templates 等规范的集合，需调查兼容性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Module Federation：没有基座，打包时使用模块联邦注册远程模块，使用时用 import 导入模块。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ESM：微前端的无技术栈限制、应用单独开发，多应用整合三个特性都能很好支持，需调查兼容性，以及 ESM 语法有传染性。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"表格总结见："},{"type":"element","tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/556422347","rel":["nofollow"]},"children":[{"type":"text","value":"一文读懂 5 种微前端常用方案"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:6.maps:_fe-framework:micro-fe:index.md","_source":"content","_file":"6.maps/_fe-framework/micro-fe/index.md","_stem":"6.maps/_fe-framework/micro-fe/index","_extension":"md"}