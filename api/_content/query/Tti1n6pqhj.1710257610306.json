{"_path":"/gists/makefile","_dir":"gists","_draft":false,"_partial":false,"_locale":"","title":"Makefile","description":"之前看 ElementUI 的时候有了解一点 Makefile 的语法，现在正在看 C++，恰好是更细致学习一下的好机会。","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"makefile"},"children":[{"type":"text","value":"Makefile"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之前看 ElementUI 的时候有了解一点 Makefile 的语法，现在正在看 C++，恰好是更细致学习一下的好机会。"}]},{"type":"element","tag":"h2","props":{"id":"概述"},"children":[{"type":"text","value":"概述"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Make（GNU Make）是一个自动化工具，它的特色在于有基本逻辑能力，可以跟踪特定文件。这样一来，诸如按需编译这种任务就可以高效完成。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"它最主要的语法结构如下代码所示。"}]},{"type":"element","tag":"pre","props":{"className":"language-makefile shiki shiki-themes material-theme-lighter github-light github-dark monokai","code":"target: dependencies\n        commands\n","language":"makefile","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"target: dependencies\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        commands\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这意味着：构建目标（target） = 依赖（dependencies） + 执行命令（commands）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"就语法来说，依赖可以不存在，这就表示某个目标意味着直接执行对应的指令。这有点像是定义了一个命令名，或者是一个快捷入口之类的。比如，你可以定义一个 help 目标，以便执行 make help 时，在控制台输出一串帮助文本。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行时，直接使用 make <target> 就可以了。如果构建目标的修改日期比依赖更新的话，显而易见就不需要再执行对应的指令；如果依赖不存在，那么会自动回溯执行依赖作为目标时的指令，如此一层一层递归下去，直到所有的 target 及 dependencies 的关系被确认。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由于 Make 不会像解析编程语言一样去细致解析 Makefile，所以其语法能力还是稍弱。不会鉴于其隐含的终极目标只是说明各个文件的依赖关系时顺带执行指令，所以也就可以理解为什么 Makefile 中变量只是类似 C 语言中宏一样的字符串替换了。"}]},{"type":"element","tag":"pre","props":{"className":"language-makefile shiki shiki-themes material-theme-lighter github-light github-dark monokai","code":"# define my variable\nvar = strings\ntarget: $(var)\n","language":"makefile","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"# define my variable\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"var = strings\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"target: $(var)\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Make 和 C/C++ 确实是一对儿。Make 在识别 .o 文件时，能自动把 .c 添加为依赖关系。这功能叫做自动推导（或隐私推导）。除了隐私推导，他还支持类似 C 的 Include，把别的 Makefile 整个包含进来。"}]},{"type":"element","tag":"pre","props":{"className":"language-makefile shiki shiki-themes material-theme-lighter github-light github-dark monokai","code":"include foo.make a.mk b.mk\n","language":"makefile","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"include foo.make a.mk b.mk\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以发现，Make 和字符串要打非常多交道，所以它支持各种通配符也就不令人意外了。如同 SHELL 中的通配符，* 和 ⁓ 分别代表任意长度字符串和用户主目录。不知道你用过正则没有，通配符就用作匹配及确认，再返回 true 或 false。这时候有人要问了，既然 Makefile 和字符串打交道，通配符返回布尔有啥用啊，它没办法表示列表哇！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这就要说到 Makefile 的关键字了，wildcard，它是扩展关键字，可以把通配符匹配到的所有东西“扩展”为“列表”。列表当然是想象中的列表，其实际产物还是字符串的啦。不过为了更方便操作列表，还有辅助用的其它关键字，比如 patsubst，它是类似正则中的 replaceAll 那种效果。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面用一个例子来说明吧，把目录下所有 C 文件找出来，替换为 .o 后缀，这样一来，就可以用 gcc 全部编译了。"}]},{"type":"element","tag":"pre","props":{"className":"language-makefile shiki shiki-themes material-theme-lighter github-light github-dark monokai","code":"cfiles := $(wildcard *.c)\nofiles := $(patsubst %.c, %.o, %(cfiles))\ncompile: $(ofiles)\n         gcc -o $(ofiles)\n","language":"makefile","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"cfiles := $(wildcard *.c)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"ofiles := $(patsubst %.c, %.o, %(cfiles))\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"compile: $(ofiles)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"         gcc -o $(ofiles)\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://seisman.github.io/how-to-write-makefile/rules.html#id5","rel":["nofollow"]},"children":[{"type":"text","value":"TODO continue"}]}]},{"type":"element","tag":"h2","props":{"id":"相关"},"children":[{"type":"text","value":"相关"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/seisman/how-to-write-makefile","rel":["nofollow"]},"children":[{"type":"text","value":"跟我一起写 Makefile"}]},{"type":"text","value":"，陈皓老师在 2004 年写的博客。非常易读，适合入门学习。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/qq_31811537/article/details/82892128","rel":["nofollow"]},"children":[{"type":"text","value":"Makefile 中的 wildcard 用法"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://coolshell.cn/articles/3790.html","rel":["nofollow"]},"children":[{"type":"text","value":"如何调试 MAKEFILE 变量"}]}]}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"概述","depth":2,"text":"概述"},{"id":"相关","depth":2,"text":"相关"}]}},"_type":"markdown","_id":"content:7.gists:makefile.md","_source":"content","_file":"7.gists/makefile.md","_extension":"md"}