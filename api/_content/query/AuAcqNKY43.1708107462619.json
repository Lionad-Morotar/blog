{"_path":"/maps/_workflow/linter/eslint","_dir":"linter","_draft":false,"_partial":true,"_locale":"","title":"ESLint","description":"https://github.com/sudongyuer/learn-eslint","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"eslint"},"children":[{"type":"text","value":"ESLint"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/sudongyuer/learn-eslint","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/sudongyuer/learn-eslint"}]}]},{"type":"element","tag":"h4","props":{"id":"prettier-和-eslint-的区别是"},"children":[{"type":"text","value":"Prettier 和 ESLint 的区别是？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Prettier 是代码格式化工具，而 ESLint 则是 JS/TS 等代码的校验工具，只不过也有格式化这个功能。通过安装 ESLint 插件，可以使项目中的 ESLint 兼容 Prettier 的规则。再配置好 husky，就可以很方便的给暂存区代码进行格式化校验了。"}]},{"type":"element","tag":"h2","props":{"id":"配置"},"children":[{"type":"text","value":"配置"}]},{"type":"element","tag":"h4","props":{"id":"eslint-支持哪些类型的配置"},"children":[{"type":"text","value":"ESLint 支持哪些类型的配置？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"package.json 中的 eslintConfig 字段"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"eslintrc 文件，包括 js、cjs、yaml、yml、json 文件格式，不支持 mjs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件内联配置"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"CLI 参数"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://zh-hans.eslint.org/docs/latest/use/configure/configuration-files#-1","rel":["nofollow"]},"children":[{"type":"text","value":"ESLint Configure Files"}]}]},{"type":"element","tag":"h4","props":{"id":"eslint-配置的优先级和覆盖规则是怎样的"},"children":[{"type":"text","value":"ESLint 配置的优先级和覆盖规则是怎样的？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件内联配置："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint-disabled */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* global */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint xxx: \"off\" */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint-env node */"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"命令行选项："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--global"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--rule"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--env"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--config"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件配置：首先寻找和校验文件同目录的文件配置和 package.json eslintConfig 配置，没找到则向上级目录寻找，直到根目录，或找到包括 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"root: true"}]},{"type":"text","value":" 的配置"}]}]},{"type":"element","tag":"h4","props":{"id":"eslint-相对-glob-模式的坑"},"children":[{"type":"text","value":"ESLint 相对 glob 模式的坑？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用相对 glob 模式如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"**/*.js"}]},{"type":"text","value":" 时，如果使用配置文件模式，那么相对路径是相对于配置文件所在目录；如果使用 CLI 传入配置（--config）那么相对路径是相对命令执行的工作目录。"}]},{"type":"element","tag":"h4","props":{"id":"为什么-eslint8-废弃了个人配置文件"},"children":[{"type":"text","value":"为什么 ESLint@8 废弃了个人配置文件？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"个人配置文件指 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~"}]},{"type":"text","value":" 目录（用户主目录）下的配置文件，如果 ESLint 在项目中找不到配置文件，那么将自动搜寻用户主目录下的配置文件。但是配置文件这种形式难以共享和修改（因为它从用户主目录下 node_modules 加载共享配置和解析器，而在项目目录加载插件），所以在 ESLint@8 被废弃。"}]},{"type":"element","tag":"h4","props":{"id":"如何配置全局变量"},"children":[{"type":"text","value":"如何配置全局变量？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件内联配置："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* global x1, x2:writable */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint-env es2022, node, mocha */"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用配置文件或 eslintConfig 中的 env 字段"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果直接更改 parserOptions 的 ecmaVersion 而不更改 env 配置，是不会支持对应版本 ES 规范的全局变量的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://zh-hans.eslint.org/docs/latest/use/configure/language-options#-7","rel":["nofollow"]},"children":[{"type":"text","value":"ESLint parserOptions"}]}]},{"type":"element","tag":"h4","props":{"id":"eslint-文件注释内联配置如何支持说明文本"},"children":[{"type":"text","value":"ESLint 文件注释内联配置如何支持说明文本？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"说明可以跟在两个或多个短横线符号之后。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"配置","depth":2,"text":"配置"}]}},"_type":"markdown","_id":"content:6.maps:_workflow:linter:eslint.md","_source":"content","_file":"6.maps/_workflow/linter/eslint.md","_extension":"md"}