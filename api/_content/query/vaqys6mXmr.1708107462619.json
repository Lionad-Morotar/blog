{"_path":"/_archieved/2019-06/teditor","_dir":"2019-06","_draft":false,"_partial":true,"_locale":"","title":"从一个越写越慢的编辑器中聊聊优化思路","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"增订-2020年8月9日"},"children":[{"type":"text","value":"增订 | 2020年8月9日"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TEditor 维护了一个解析状态栈。逐个读入字符，结合当前解析状态进行状态转换，将旧状态推入栈中，以模仿解析 HTML 的层级结构。状态栈的入栈、出栈过程，通过 DIG_IN、DIG_OUT 来维护，这两个函数会触发更新标签流的副作用。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因为处理整段字符也只需要一次循环；要维护的状态大体上来说只有零散的几个变量和一个状态栈；没有用正则匹配；再加上每解析过程和正常的 Markdown 解析器不一样，TEditor 最大段落只支持到行，再加上每行都做了 LFU 缓存。所以理论上来说 TEditor 应该相当快... 不过，随着解析器的功能增强，状态维护变得有点困难，特别乱。反正我现在是很难看懂我以前写了啥玩意儿..."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"整个系统的状态转变则是发生在许许多多小的、细微的状态变化混合来形成的。这些相互关联的状态变化形成了一个概念上的“状态网”，我们时不时会因它而感到困惑。\n"},{"type":"element","tag":"name","props":{},"children":[{"type":"text","value":"《JavaScript 函数式编程》"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"经过一年的 JS 学习，我的 JS 水平提高了不少。近期我重写了这个 Markdown 解析器，"},{"type":"element","tag":"a","props":{"href":"https://github.com/Lionad-Morotar/read-source-code/tree/master/module/markdown-parser","rel":["nofollow"]},"children":[{"type":"text","value":"Markdown Parser"}]},{"type":"text","value":"，舍弃了“状态转换”的概念，用回了正则匹配 + AST。虽然说速度可能变慢了一个量级，不过可扩展性还是非常强的，比如说可自定义解析插件，介入解析过程。有空还是得学习 Markdown-It 的源码，那玩意儿是我的目标..."}]},{"type":"element","tag":"h2","props":{"id":"原文"},"children":[{"type":"text","value":"原文"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你用过一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"越写越慢的编辑器"}]},{"type":"text","value":"么？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我曾在项目中实现了一个 MD 编辑器，用来解析简单的 MD 文本，不过它的性能令我捉急。初期基本没有做任何性能优化相关的内容，导致每当我正在写的文章变长之后，编辑器会变得非常"},{"type":"element","tag":"del","props":{},"children":[{"type":"text","value":"非常"}]},{"type":"text","value":"卡，所以说是越写越慢的编辑器( ╯□╰ ) 这期文章主要针对这个编辑器聊聊我实践以及思考总结的一些性能优化方法，肯定还有文中没有总结到的一些方法，欢迎各位看官不舍赐教，留言评论。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"TEditor","src":"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/teditor/2019-05-06-01-10-43.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"解析过程简述"},"children":[{"type":"text","value":"解析过程简述"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"文中 MD 编辑器可以在左侧窗口输入 MD 格式文本，然后通过调用解析函数将文本解析转换为 HTML 代码，放到右侧 v-html 窗口中直接渲染。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般来说 MD 解析不需要经过词法语法分析，而且标点符号几乎没有二义性，解析起来比较简单。对于一段简单的 MD 文本，我们大可从一个正则表达式的角度入手。思考从以下 4 点开始匹配："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"解析块状元素，分割线，引用块，代码段等"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"解析文本元素，标题，列表，以及普通文本内容"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"解析行内元素，角标，加粗，斜体等"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们以以下文本为例进行解析："}]},{"type":"element","tag":"pre","props":{"code":"### 一个*斜体*标题\n","language":"markdown","meta":"","className":"language-markdown shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold"},"children":[{"type":"text","value":"### "}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold"},"children":[{"type":"text","value":"一个"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic"},"children":[{"type":"text","value":"斜体"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic"},"children":[{"type":"text","value":"*"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold"},"children":[{"type":"text","value":"标题\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先命中文本元素标题，内容为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"一个*斜体*标题"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"紧接着，继续解析比文本元素优先级更低的行内元素，这次命中行内元素斜体，内容为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"斜体"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"至此，我们将解析完的内容推入结果数组，结果形如："}]},{"type":"element","tag":"pre","props":{"code":"parsedContent = [`<h3>一个<i>斜体</i>标题</h3>`]\n","language":"js","meta":"","className":"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2"},"children":[{"type":"text","value":"parsedContent "}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672"},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2"},"children":[{"type":"text","value":" ["}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74"},"children":[{"type":"text","value":"`"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74"},"children":[{"type":"text","value":"<h3>一个<i>斜体</i>标题</h3>"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74"},"children":[{"type":"text","value":"`"}]},{"type":"element","tag":"span","props":{"style":"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2"},"children":[{"type":"text","value":"]\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果文本不是一行，再继续之前的思路继续解析，直到原始内容为空，得到最终的解析结果。"}]},{"type":"element","tag":"h2","props":{"id":"解析函数节流"},"children":[{"type":"text","value":"解析函数节流"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"函数节流是老生常谈的话题了，当然不能当左侧内容一有变动就立即更新。在一些极端的场合，比如长按删除或是长按空格回车等情况下，连续执行解析函数硬件会造成沉重的负担。所以我们优化思路首先要求尽量在不太影响视觉效果的情况下，尽可能少地执行解析函数。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"目标有了，那么对应的解决方案手到擒来："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对特定类型按键，我们将不调用解析函数，如多个连续的空格回车或是某些行内符号。因为这些内容的解析结果对之后预览结果没有影响"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对解析函数节流，将调用频率控制在 0.3 秒 1 次，具体的数值可根据个人需求调整，比如我常常在回车后习惯性扫一眼预览，那么按回车后可以跳过节流立即执行一次解析"}]}]},{"type":"element","tag":"h2","props":{"id":"缓存解析结果"},"children":[{"type":"text","value":"缓存解析结果"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缓存解析结果方案，类似于算法题中常见的缓存对象。比如我们要实现一个斐波那契数列递归函数，计算"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"fabi(5)"}]},{"type":"text","value":"时需要用到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"fabi(3)"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"fabi(4)"}]},{"type":"text","value":"的结果，如果我们有缓存，我们可以直接从缓存中获取"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"fabi(3)"}]},{"type":"text","value":"的结果。将这一概念推导到解析器，我们可以创建一个对象去缓存解析结果。"}]},{"type":"element","tag":"h3","props":{"id":"备忘录实现"},"children":[{"type":"text","value":"备忘录实现"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一开始写解析结果缓存的时候，我犯了一个很严重的错误，那就是想尝试将所有内容以及其解析值缓存到备忘录对象，代码形如："}]},{"type":"element","tag":"pre","props":{"code":"data: {\n  // 缓存对象\n  memo: {}\n}\nwatch： {\n  // 当编辑器的value变动时将尝试直接获取缓存，如果没有缓存才解析内容\n  value (n，o) {\n    if (this.memo[n]) {\n      this.parsedValue = this.memo[n]\n    } else {\n      this.memo[n] = this.parsedValue = parseMDToHTML(n)\n    }\n  }\n}\n","language":"JS","meta":"","className":"language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"data: {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  // 缓存对象\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  memo: {}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"watch： {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  // 当编辑器的value变动时将尝试直接获取缓存，如果没有缓存才解析内容\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  value (n，o) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    if (this.memo[n]) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      this.parsedValue = this.memo[n]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    } else {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      this.memo[n] = this.parsedValue = parseMDToHTML(n)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"代码看起来没什么问题，因为问题不在代码。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"问题在内存容量上。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"代码运行在浏览器中，一般情况下，内存相对于代码执行速度而言是比较廉价的，所以我经常使用到用对象进行缓存这种"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"以空间换时间"}]},{"type":"text","value":"的代码模式。一般情况下它非常好用，但它可能带来一个问题。这种代码模式进一步限制了前端对内存的感知——我将整个编辑区域的原始值作为对象的键，将其解析结果作为值缓存下来——一旦文章长度开始增长，缓存对象占用的内存容量将急剧增大。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"假设我们有某文章字符长度总量为 n，那么备忘录模型将生长成这个样子："}]},{"type":"element","tag":"pre","props":{"code":"value = [1，2，3，...，n-1，n].join('')\nmemo == {\n  '1': '1',\n  '12': '12',\n  '123': '123',\n  // ...\n  '12345...n-1': '12345...n-1',\n  '12345...n': '12345...n',\n}\n","language":"JS","meta":"","className":"language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"value = [1，2，3，...，n-1，n].join('')\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"memo == {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  '1': '1',\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  '12': '12',\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  '123': '123',\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  // ...\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  '12345...n-1': '12345...n-1',\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  '12345...n': '12345...n',\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那么可以轻易得出，文章字符长度(N)和内存消耗量(O)的关系，形如："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"$$O = N(N+1)/2 ≈ N^2$$"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和你想的一样，我浏览器内存爆了 😅"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不仅如此，文章不断地增长，不仅带来内存压力，解析函数每次要处理地内容也变多，浏览器响应速度也越来越慢。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们亟需更好的缓存方案。"}]},{"type":"element","tag":"h3","props":{"id":"lru-以及-lfu-策略"},"children":[{"type":"text","value":"LRU 以及 LFU 策略"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在解析过程简述小节，我们提到解析器在解析时，会将 MD 文本分为块状内容进行解析。由此我们可以尝试缓存块状内容的解析结果，而不是去缓存全文。为了在这次优化不爆内存，我们引入"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"有限空间概念"}]},{"type":"text","value":"——设想编辑器内含一个数组，用来存放 MD 文本中块状内容以及其解析结果，同时数组有最大长度限制，限制为 1000，假设我们的每一个元素占 5kb 的内存，那么这个数组将只占浏览器约 5MB 的内存，无论我们怎么折腾，至少不至于爆内存了~"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不过我们需要先考虑这样一种情况，假使我们的文章有超过 1001 个块状内容，那么多出的这一个块状内容进行解析后得到的结果很显然不能直接存入长度限制为 1000 数组中。所以我们需要一种算法去计算应该舍弃数组中哪一个元素，将该元素舍弃后，再把我们手中结果存入数组。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"用过 Redis 的朋友应该了解，Redis 作为一种使用内存作缓存的缓存系统，它有多种缓存策略："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"基于数据访问时间进行淘汰(LRU : Least Recently Used 淘汰最近时间最少使用到的内容)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"基于访问频率进行淘汰(LFU : Least Frequently Used 淘汰访问频次最低的内容)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下文将仿照 Redis 的缓存淘汰策略手动造一个使用 LFU 策略进行缓存淘汰的缓存类。"}]},{"type":"element","tag":"h4","props":{"id":"简单的链表实现"},"children":[{"type":"text","value":"简单的链表实现"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实际的代码并未采用数组充当缓存元素，实际选择了双向链表，使用双向列表可以抹除使用出租移除元素添加元素带来的性能成本。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们需要提前定义好节点类"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":"："}]},{"type":"element","tag":"pre","props":{"code":"function Node (config) {\n  this.key = config.key\n  this.prev = null\n  this.next = null\n  this.data = config.data || {\n    val: null,\n    weight: 1\n  }\n}\n// 将当前节点的next指向另一节点\nNode.prototype.linkNextTo = function (nextNode) {\n  this.next = nextNode\n  nextNode.prev = this\n}\n// 将当前节点插入某一结点后\nNode.prototype.insertAfterNode = function (prevNode) {\n  const prevNextNode = prevNode.next\n  prevNode.linkNext(this)\n  this.linkNext(prevNextNode)\n}\n// 删除当前节点，除非节点是头节点/尾节点\nNode.prototype.unLink = function () {\n  const prev = this.prev\n  const next = this.next\n\n  if (!prev || !next) {\n    console.log(`Node : ${this.key} cant unlink`)\n    return false\n  }\n  prev.linkNext(next)\n}\n","language":"JS","meta":"","className":"language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"function Node (config) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.key = config.key\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.prev = null\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.next = null\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.data = config.data || {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    val: null,\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    weight: 1\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 将当前节点的next指向另一节点\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"Node.prototype.linkNextTo = function (nextNode) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.next = nextNode\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  nextNode.prev = this\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 将当前节点插入某一结点后\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"Node.prototype.insertAfterNode = function (prevNode) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  const prevNextNode = prevNode.next\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  prevNode.linkNext(this)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.linkNext(prevNextNode)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 删除当前节点，除非节点是头节点/尾节点\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"Node.prototype.unLink = function () {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  const prev = this.prev\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  const next = this.next\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  if (!prev || !next) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    console.log(`Node : ${this.key} cant unlink`)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    return false\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  prev.linkNext(next)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":31},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"h4","props":{"id":"缓存类"},"children":[{"type":"text","value":"缓存类"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缓存类将内含一个双向链表，同时还包含最大链表节点数，当前链表长度这些属性："}]},{"type":"element","tag":"pre","props":{"code":"数组可以直接通过下标去获取某个特定的元素，而链表不行，在缓存类中我使用一个备忘录对象去记录每一个节点的访问地址，充当数组下标的作用，详见下代码中`nodeMemo`的使用\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"数组可以直接通过下标去获取某个特定的元素，而链表不行，在缓存类中我使用一个备忘录对象去记录每一个节点的访问地址，充当数组下标的作用，详见下代码中`nodeMemo`的使用\n"}]}]},{"type":"element","tag":"pre","props":{"code":"function LFU (limit) {\n  this.headNode = new Node({ key: '__head__'，data: { val: null，weight: Number.MAX_VALUE } })\n  this.tailNode = new Node({ key: '__tail__'，data: { val: null，weight: Number.MIN_VALUE } })\n  this.headNode.linkNext(this.tailNode)\n  this.nodeMemo = {}\n  this.nodeLength = 0\n  this.nodeLengthLimit = limit || 999\n}\n// 通过key判断缓存中是否有某元素\nLFU.prototype.has = function (key) {\n  return !!this.nodeMemo[key]\n}\n// 通过key获取缓存中某一元素值\nLFU.prototype.get = function (key) {\n  let handle = this.nodeMemo[key]\n  if (handle) {\n    this.addNodeWeight(handle)\n    return handle.data.val\n  } else {\n    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n  }\n}\n// 通过key获取缓存中某一元素权重\nLFU.prototype.getNodeWeight = function (key) {\n  let handle = this.nodeMemo[key]\n  if (handle) {\n    return handle.data.weight\n  } else {\n    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n  }\n}\n// 添加新的缓存元素\nLFU.prototype.set = function (key，val) {\n  const handleNode = this.nodeMemo[key]\n  if (handleNode) {\n    this.addNodeWeight(handleNode，10)\n    handleNode.data.val = val\n  } else {\n    if (this.nodeLength < this.nodeLengthLimit) {\n      this.nodeLength++\n    } else {\n      const deleteNode = this.tailNode.prev\n      deleteNode.unLink()\n      delete this.nodeMemo[deleteNode.key]\n    }\n    const newNode = new Node({ key，data: { val，weight: 1 } })\n    this.nodeMemo[key] = newNode\n    newNode.insertAfter(this.tailNode.prev)\n  }\n}\n// 打印缓存中全部节点\nLFU.prototype.showAllNodes = function () {\n  let next = this.headNode.next\n  while (next && next.next) {\n    console.log(`Node : ${next.key} has data ${next.data.val} and weight ${next.data.weight}`)\n    next = next.next\n  }\n}\n// 对某一元素进行加权操作\nLFU.prototype.addNodeWeight = function (node，w = 1) {\n  const handle = node\n  let prev = handle.prev\n\n  handle.unLink()\n  handle.data.weight += w\n  while (prev) {\n    if (prev.data.weight <= handle.data.weight) {\n      prev = prev.prev\n    } else {\n      handle.insertAfter(prev)\n      prev = null\n    }\n  }\n}\n","language":"JS","meta":"","className":"language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"function LFU (limit) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.headNode = new Node({ key: '__head__'，data: { val: null，weight: Number.MAX_VALUE } })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.tailNode = new Node({ key: '__tail__'，data: { val: null，weight: Number.MIN_VALUE } })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.headNode.linkNext(this.tailNode)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.nodeMemo = {}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.nodeLength = 0\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  this.nodeLengthLimit = limit || 999\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 通过key判断缓存中是否有某元素\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"LFU.prototype.has = function (key) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  return !!this.nodeMemo[key]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 通过key获取缓存中某一元素值\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"LFU.prototype.get = function (key) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  let handle = this.nodeMemo[key]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  if (handle) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    this.addNodeWeight(handle)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    return handle.data.val\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  } else {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 通过key获取缓存中某一元素权重\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"LFU.prototype.getNodeWeight = function (key) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  let handle = this.nodeMemo[key]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  if (handle) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    return handle.data.weight\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  } else {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":31},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":32},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 添加新的缓存元素\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":33},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"LFU.prototype.set = function (key，val) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":34},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  const handleNode = this.nodeMemo[key]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":35},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  if (handleNode) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":36},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    this.addNodeWeight(handleNode，10)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":37},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    handleNode.data.val = val\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":38},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  } else {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":39},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    if (this.nodeLength < this.nodeLengthLimit) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":40},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      this.nodeLength++\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":41},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    } else {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":42},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      const deleteNode = this.tailNode.prev\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":43},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      deleteNode.unLink()\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":44},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      delete this.nodeMemo[deleteNode.key]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":45},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":46},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    const newNode = new Node({ key，data: { val，weight: 1 } })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":47},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    this.nodeMemo[key] = newNode\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":48},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    newNode.insertAfter(this.tailNode.prev)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":49},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":50},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":51},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 打印缓存中全部节点\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":52},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"LFU.prototype.showAllNodes = function () {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":53},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  let next = this.headNode.next\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":54},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  while (next && next.next) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":55},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    console.log(`Node : ${next.key} has data ${next.data.val} and weight ${next.data.weight}`)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":56},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    next = next.next\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":57},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":58},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":59},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// 对某一元素进行加权操作\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":60},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"LFU.prototype.addNodeWeight = function (node，w = 1) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":61},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  const handle = node\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":62},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  let prev = handle.prev\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":63},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":64},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  handle.unLink()\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":65},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  handle.data.weight += w\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":66},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  while (prev) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":67},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    if (prev.data.weight <= handle.data.weight) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":68},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      prev = prev.prev\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":69},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    } else {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":70},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      handle.insertAfter(prev)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":71},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"      prev = null\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":72},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":73},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":74},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"h4","props":{"id":"另附测试用例"},"children":[{"type":"text","value":"另附测试用例"}]},{"type":"element","tag":"pre","props":{"code":"import LFU from '@/utils/suites/teditor/LFU'\n\ndescribe('LFU测试'，() => {\n  const LFU = new LFU(4)\n  it('能够正确维护链表长度'，() => {\n    LFU.set('1'，1)\n    LFU.set('2'，2)\n    LFU.set('3'，3)\n    LFU.set('4'，4)\n    LFU.set('5'，5)\n    expect(LFU.has('4')).to.equal(false)\n  })\n  it('节点的数据应该正确'，() => {\n    expect(LFU.get('1')).to.equal(1)\n    expect(LFU.get('2')).to.equal(2)\n    expect(LFU.get('3')).to.equal(3)\n    expect(LFU.get('5')).to.equal(5)\n    LFU.get('5')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.set('5'，6)\n    expect(LFU.get('5')).to.equal(6)\n  })\n  it('节点的权重应该正确'，() => {\n    expect(LFU.getNodeWeight('5')).to.equal(14)\n    expect(LFU.getNodeWeight('3')).to.equal(6)\n  })\n})\n\n","language":"JS","meta":"","className":"language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"import LFU from '@/utils/suites/teditor/LFU'\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"describe('LFU测试'，() => {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  const LFU = new LFU(4)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  it('能够正确维护链表长度'，() => {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.set('1'，1)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.set('2'，2)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.set('3'，3)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.set('4'，4)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.set('5'，5)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.has('4')).to.equal(false)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  it('节点的数据应该正确'，() => {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.get('1')).to.equal(1)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.get('2')).to.equal(2)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.get('3')).to.equal(3)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.get('5')).to.equal(5)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.get('5')\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.get('3')\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.get('3')\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.get('3')\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.get('3')\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    LFU.set('5'，6)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.get('5')).to.equal(6)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  it('节点的权重应该正确'，() => {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.getNodeWeight('5')).to.equal(14)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    expect(LFU.getNodeWeight('3')).to.equal(6)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"  })\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"})\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"拆分渲染内容"},"children":[{"type":"text","value":"拆分渲染内容"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"拆分渲染内容和通过节流解析函数想要达到的目的类似——通过限制浏览器的重绘回流次数以减轻硬件负担。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我的解析函数会将传入的 MD 文本解析为 HTML 片段，然后通过 v-html 将片段放到浏览器右侧窗口进行渲染，虽然我们在解析函数中做了缓存，使得解析速度增加，但是每一次的解析都会使浏览器重新绘制整一个右侧窗口，这里有一个优化点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"拆分渲染内容就是要解决这样一个问题。我们把右侧窗口一整块 v-html 区域以 MD 块状元素拆分为多个小的 v-html 区域，当编辑器某一行的文本数据有变动时，只通知右侧窗口更新对应区域的内容，这样一来，浏览器性能可以得到进一步提升。"}]},{"type":"element","tag":"h2","props":{"id":"总结"},"children":[{"type":"text","value":"总结"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端做页面性能优化时，除了网络层面的优化，剩下很大一块内容都落在 JS 和浏览器的头上，考虑 JS，主要是如何减少重复计算，至于浏览器，则主要会想到重绘回流这块。依靠这两大山头，相信你也能写出运行速度飞快的代码！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本文只对代码做了概括性说明，具体的代码细节还需要待我使劲整理再发一篇新文章，比如<动手撸一个简单的 LFU 缓存类>之类的 😀，敬请期待~"}]},{"type":"element","tag":"h2","props":{"id":"更多"},"children":[{"type":"text","value":"更多"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://juejin.im/post/5a9923e9518825558251c96a","rel":["nofollow"]},"children":[{"type":"text","value":"浏览器的回流与重绘 (Reflow & Repaint)"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.jianshu.com/p/c8aeb3eee6bc","rel":["nofollow"]},"children":[{"type":"text","value":"Redis 的缓存淘汰策略 LFU 与 LFU"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/elricboa/article/details/78847305","rel":["nofollow"]},"children":[{"type":"text","value":"LFU 算法四种实现方式介绍"}]}]}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"增订-2020年8月9日","depth":2,"text":"增订 | 2020年8月9日"},{"id":"原文","depth":2,"text":"原文"},{"id":"解析过程简述","depth":2,"text":"解析过程简述"},{"id":"解析函数节流","depth":2,"text":"解析函数节流"},{"id":"缓存解析结果","depth":2,"text":"缓存解析结果","children":[{"id":"备忘录实现","depth":3,"text":"备忘录实现"},{"id":"lru-以及-lfu-策略","depth":3,"text":"LRU 以及 LFU 策略"}]},{"id":"拆分渲染内容","depth":2,"text":"拆分渲染内容"},{"id":"总结","depth":2,"text":"总结"},{"id":"更多","depth":2,"text":"更多"}]}},"_type":"markdown","_id":"content:_archieved:2019-06:teditor.md","_source":"content","_file":"_archieved/2019-06/teditor.md","_extension":"md"}