{"_path":"/maps/_workflow/linter/eslint","_dir":"linter","_draft":false,"_partial":true,"_locale":"","title":"ESLint","description":"ESLint 是 JavaScript 和 TypeScript 的代码质量检查工具，帮助开发者保持代码风格一致性和减少错误。","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"版本"},"children":[{"type":"text","value":"版本"}]},{"type":"element","tag":"h4","props":{"id":"如何迁移到-flat-config"},"children":[{"type":"text","value":"如何迁移到 Flat Config？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://zh-hans.eslint.org/docs/latest/use/configure/migration-guide","rel":["nofollow"]},"children":[{"type":"text","value":"配置迁移指南@eslint"}]}]},{"type":"element","tag":"h2","props":{"id":"工具类库"},"children":[{"type":"text","value":"工具类库"}]},{"type":"element","tag":"h4","props":{"id":"rushstackeslint-patch-有什么作用"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"rushstack/eslint-patch"}]},{"type":"text","value":" 有什么作用？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最主要的功能是为 ESLint 带来现代的模块解析功能。它加载了 .eslintrc.js 并在内存中修改了 ESLint 引擎，使其插件解析器引用模块的路径是相对于引用配置文件，而不是项目根目录，这可以增强 monorepo 下的开发体验。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"到了 Flat Config 时代，ESLint 的插件寻址路径已经改为相对于配置文件所在目录，而不是项目根目录。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://github.com/microsoft/rushstack/tree/main/eslint/eslint-patch","rel":["nofollow"]},"children":[{"type":"text","value":"rushstack/eslint-patch@github"}]}]},{"type":"element","tag":"h2","props":{"id":"配置"},"children":[{"type":"text","value":"配置"}]},{"type":"element","tag":"h4","props":{"id":"配置分为哪些类型"},"children":[{"type":"text","value":"配置分为哪些类型？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"解析器配置（parer）：包含处理器和解析器，处理器用于获取文本中可解析内容，解析器用于将内容解析为 "},{"type":"element","tag":"a","props":{"href":"https://eslint.org/docs/latest/extend/custom-parsers#ast-specification","rel":["nofollow"]},"children":[{"type":"text","value":"ESLint AST"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"环境配置（env）：指定代码运行的环境项如 node、browser，以及设置全局变量 global。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"规则配置（rules）：指定代码检查的规则项，如 no-unused-vars、eqeqeq 等。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"共享设置（settings）：所有规则都可以访问的共享设置项，如给 "},{"type":"element","tag":"a","props":{"href":"https://github.com/element-plus/element-plus/blob/49e1d594fa7cbabdbf3958591d44c9e456563005/internal/eslint-config/index.js#L21","rel":["nofollow"]},"children":[{"type":"text","value":"import-x/resolver"}]},{"type":"text","value":" 配置需要解析的文件类型。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"插件配置（plugins）：扩展 ESLint 的功能，包含插件和规则。"}]}]},{"type":"element","tag":"h4","props":{"id":"eslint-配置的优先级和覆盖规则是怎样的"},"children":[{"type":"text","value":"ESLint 配置的优先级和覆盖规则是怎样的？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件内联配置："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint-disabled */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* global */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint xxx: \"off\" */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint-env node */"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"命令行选项："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--global"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--rule"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--env"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"--config"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件配置：首先寻找和校验文件同目录的文件配置和 package.json eslintConfig 配置，没找到则向上级目录寻找，直到根目录，或找到包括 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"root: true"}]},{"type":"text","value":" 的配置"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Flat Config 配置不存在向上级目录寻找的情况。"}]},{"type":"element","tag":"h4","props":{"id":"eslint-相对-glob-模式的坑"},"children":[{"type":"text","value":"ESLint 相对 glob 模式的坑？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用相对 glob 模式如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"**/*.js"}]},{"type":"text","value":" 时，如果使用配置文件模式，那么相对路径是相对于配置文件所在目录；如果使用 CLI 传入配置（--config）那么相对路径是相对命令执行的工作目录。"}]},{"type":"element","tag":"h4","props":{"id":"为什么-eslint8-废弃了个人配置文件"},"children":[{"type":"text","value":"为什么 ESLint@8 废弃了个人配置文件？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"个人配置文件指 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~"}]},{"type":"text","value":" 目录（用户主目录）下的配置文件，如果 ESLint 在项目中找不到配置文件，那么将自动搜寻用户主目录下的配置文件。但是配置文件这种形式难以共享和修改（因为它从用户主目录下 node_modules 加载共享配置和解析器，而在项目目录加载插件），所以在 ESLint@8 被废弃。"}]},{"type":"element","tag":"h4","props":{"id":"如何配置全局变量"},"children":[{"type":"text","value":"如何配置全局变量？"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件内联配置："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* global x1, x2:writable */"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/* eslint-env es2022, node, mocha */"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用配置文件或 eslintConfig 中的 env 字段"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意，如果直接更改 parserOptions 的 ecmaVersion 而不更改 env 配置，是不会支持对应版本 ES 规范的全局变量的，因为 parserOptions 的 ecmaVersion 只是告诉 ESLint 使用哪个版本的 ECMAScript 语法解析代码。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://zh-hans.eslint.org/docs/latest/use/configure/language-options#-7","rel":["nofollow"]},"children":[{"type":"text","value":"ESLint parserOptions"}]}]},{"type":"element","tag":"h4","props":{"id":"配置和插件有什么区别"},"children":[{"type":"text","value":"配置和插件有什么区别？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"配置是 ESLint 的规则和选项的集合（eslint-config-airbnb），而插件是扩展 ESLint 功能的模块（eslint-plugin-vue），插件可以包含自定义规则、解析器和共享配置。"}]},{"type":"element","tag":"h4","props":{"id":"共享配置如何实现"},"children":[{"type":"text","value":"共享配置如何实现？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"见："},{"type":"element","tag":"a","props":{"href":"https://github.com/pi-ray/eslint-config","rel":["nofollow"]},"children":[{"type":"text","value":"p-ray/eslint-config"}]}]},{"type":"element","tag":"h2","props":{"id":"性能"},"children":[{"type":"text","value":"性能"}]},{"type":"element","tag":"h4","props":{"id":"关于性能的指摘"},"children":[{"type":"text","value":"关于性能的指摘？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"社区有一些 Rust 化的替代品，如 RSLint（已停更）。ESLint 内部也讨论过 Rust 化的可能性，见 "},{"type":"element","tag":"a","props":{"href":"https://github.com/eslint/eslint/discussions/16557","rel":["nofollow"]},"children":[{"type":"text","value":"Complete rewrite of ESLint"}]},{"type":"text","value":"，ESLint 作为一个通用的代码检查器，其核心流程（包括解析路径、修复错误、报告错误等）并不慢，慢的是特殊的插件以及在单线程环境中运行解析器并创建巨大的抽象语法树。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"版本","depth":2,"text":"版本"},{"id":"工具类库","depth":2,"text":"工具类库"},{"id":"配置","depth":2,"text":"配置"},{"id":"性能","depth":2,"text":"性能"}]}},"_type":"markdown","_id":"content:6.maps:_workflow:linter:eslint.md","_source":"content","_file":"6.maps/_workflow/linter/eslint.md","_stem":"6.maps/_workflow/linter/eslint","_extension":"md"}