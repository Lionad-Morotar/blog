[{"data":1,"prerenderedAt":11294},["Reactive",2],{"navigation":3,"/_books/9787121386695":383,"/_books/9787121386695-surround":11286},[4,32,80,96,123,129,135,366,372,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"图片模糊","/gists/blur",{"title":148,"_path":149},"渲染相关笔记","/gists/c4d",{"title":151,"_path":152},"CDN 问题记录","/gists/cdn",{"title":154,"_path":155},"消毒剂","/gists/cleaner",{"title":157,"_path":158},"Windows Command","/gists/cmd",{"title":160,"_path":161},"Command","/gists/command",{"title":163,"_path":164},"复杂科学","/gists/complexity-science",{"title":166,"_path":167},"宇宙","/gists/cosmos",{"title":169,"_path":170},"C++","/gists/cpp",{"title":172,"_path":173},"Data Structure","/gists/data-structure",{"title":175,"_path":176},"DEPRESSION","/gists/depression",{"title":178,"_path":179},"设计模式","/gists/design-patterns",{"title":181,"_path":182},"Developer Experience","/gists/developer-experience",{"title":184,"_path":185},"Device Metrics","/gists/device-metrix",{"title":187,"_path":188},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":190,"_path":191},"正则表达式","/gists/eegex",{"title":193,"_path":194},"Emoji","/gists/emoji",{"title":196,"_path":197},"工程","/gists/engineering",{"title":199,"_path":200},"熵","/gists/entropy",{"title":202,"_path":203},"Environment","/gists/environment",{"title":205,"_path":206},"Erlang","/gists/erlang",{"title":208,"_path":209},"逃离塔克夫","/gists/escape-from-tarkov",{"title":211,"_path":212},"ESNext (ES6-ES11)","/gists/esnext",{"title":214,"_path":215},"Eval！","/gists/eval",{"title":217,"_path":218},"Flutter","/gists/flutter",{"title":220,"_path":221},"字体","/gists/font",{"title":223,"_path":224},"JS 函数式编程","/gists/functional",{"title":226,"_path":227},"Google C++ Standard","/gists/google-cpp-standard",{"title":229,"_path":230},"双向链接完全体","/gists/graph",{"title":232,"_path":233},"Hardwares","/gists/hardwares",{"title":235,"_path":236},"哈希冲突","/gists/hash-collision",{"title":238,"_path":239},"信息设计","/gists/information-design",{"title":241,"_path":242},"InstantPage","/gists/instant.page",{"title":244,"_path":245},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":247,"_path":248},"KVStore","/gists/key-value-db",{"title":250,"_path":251},"Kubernetes","/gists/kubernetes",{"title":253,"_path":254},"Makefile","/gists/makefile",{"title":256,"_path":257},"Markdown Inline Style","/gists/markdown-nice",{"title":259,"_path":260},"小程序","/gists/miniapp",{"title":262,"_path":263},"减小页面快照体积","/gists/minify-html",{"title":265,"_path":266},"mklink","/gists/mklink",{"title":268,"_path":269},"Mock","/gists/mock",{"title":271,"_path":272},"多端应用","/gists/multy-end-app",{"title":274,"_path":275},"神经科学","/gists/neuroscience",{"title":277,"_path":278},"OO","/gists/oo",{"title":280,"_path":281},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":283,"_path":284},"人物","/gists/person",{"title":286,"_path":287},"PInvoke","/gists/pinvoke",{"title":289,"_path":290},"像素","/gists/pixel",{"title":292,"_path":293},"PowerShell","/gists/powershell",{"title":295,"_path":296},"量子","/gists/quantum",{"title":298,"_path":299},"保持好奇心","/gists/questions",{"title":301,"_path":302},"React Native","/gists/react-native",{"title":304,"_path":305},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":307,"_path":308},"SEO","/gists/seo",{"title":310,"_path":311},"Shader","/gists/shader",{"title":313,"_path":314},"Shape Up","/gists/shape-up",{"title":316,"_path":317},"睡觉","/gists/sleep",{"title":319,"_path":320},"States","/gists/states",{"title":322,"_path":323},"Storage","/gists/storage",{"title":325,"_path":326},"音视频流处理","/gists/stream-cli",{"title":328,"_path":329},"Symbol","/gists/symbol",{"title":331,"_path":332},"系统论","/gists/systems-theory",{"title":334,"_path":335},"Taro","/gists/taro",{"title":337,"_path":338},"任务切片","/gists/task-slice",{"title":340,"_path":341},"技术偏好","/gists/tech-dudge",{"title":343,"_path":344},"Untitled","/gists/untitled",{"title":346,"_path":347},"可变字体","/gists/variable-font",{"title":349,"_path":350},"视觉错觉","/gists/visual-illusion",{"title":352,"_path":353},"SS(SSR)","/gists/vpn",{"title":355,"_path":356},"VS Code 插件开发","/gists/vscode-plugin",{"title":358,"_path":359},"Web Components","/gists/web-components",{"title":361,"_path":362},"Windows","/gists/windows",{"title":364,"_path":365},"查缺补漏","/gists/wrong",{"title":367,"_path":368,"children":369},"代码笔记 / Gists","/source-code",[370],{"title":371,"_path":368},"🚄 代码笔记",{"title":373,"_path":374,"children":375},"我 / Abount","/hire",[376],{"title":377,"_path":374},"📬 技术简历",{"title":379,"_path":380,"children":381},"todo","/todo",[382],{"title":379,"_path":380},{"_path":384,"_dir":385,"_draft":386,"_partial":387,"_locale":388,"title":389,"description":388,"body":390,"_type":11281,"_id":11282,"_source":11283,"_file":11284,"_extension":11285},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":391,"children":392,"toc":11233},"root",[393,401,407,413,418,476,481,502,507,546,551,564,569,574,579,584,602,607,612,617,630,635,640,645,650,765,770,775,835,840,881,886,919,924,929,954,959,996,1001,1003,1296,1301,1553,1558,1563,1568,1586,1591,1676,1681,1812,1817,1822,2328,2333,2338,2343,2348,2450,2455,2460,2465,2470,2475,2480,2485,2538,2543,2556,2561,2566,2571,2576,2581,2586,2591,2596,2601,2606,2611,2787,2792,2884,2889,2894,2899,2904,2906,3023,3041,3046,3059,3064,3069,3074,3087,3092,3097,3233,3248,3253,3333,3338,3385,3499,3504,3509,3514,3699,3704,3709,3714,3877,3882,3910,3915,3928,3933,4185,4190,4195,4200,4260,4265,4270,4275,4280,4285,4383,4388,4393,4411,4416,4429,4434,4439,4452,4457,4462,4560,4565,4570,4575,4577,4769,4774,5043,5048,5053,5071,5076,5078,5193,5198,5216,5221,5226,5231,5236,5238,5429,5434,5447,5452,6033,6038,6043,6048,6053,6058,6063,6068,6073,6091,6096,6101,6106,6111,6112,6232,6237,6242,6247,6259,6264,6269,6274,6279,6284,6302,6419,6424,6557,6562,6567,6572,6590,6595,6600,6641,6646,6651,6656,6723,6728,6733,6777,6782,6787,6792,6810,6815,6820,6825,6892,6897,6902,6907,6925,6930,6935,6940,6945,6950,6955,6960,6965,6971,6976,6994,6999,7143,7161,7382,7387,7392,7523,7528,7546,7551,7599,7604,7726,7731,7736,8107,8112,8117,8122,8127,8132,8554,8559,8564,8569,8587,8592,8684,8689,8694,8881,8886,8891,8896,8901,8919,8924,8929,8934,8939,8944,8949,8954,9123,9128,9133,9279,9284,9424,9429,9434,9439,9444,9449,9481,9486,9532,9537,9542,9722,9727,9732,9737,9742,9747,9752,10248,10253,10258,10288,10293,10298,10303,10407,10412,10417,10706,10711,10716,10859,10864,10869,10874,10879,10884,10889,11041,11046,11051,11056,11062,11130,11227],{"type":394,"tag":395,"props":396,"children":398},"element","h2",{"id":397},"语法",[399],{"type":400,"value":397},"text",{"type":394,"tag":402,"props":403,"children":405},"h3",{"id":404},"语法综述",[406],{"type":400,"value":404},{"type":394,"tag":408,"props":409,"children":410},"p",{},[411],{"type":400,"value":412},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":394,"tag":408,"props":414,"children":415},{},[416],{"type":400,"value":417},"可以使用 --check 指令检测语法错误：",{"type":394,"tag":419,"props":420,"children":424},"pre",{"className":421,"code":422,"language":423,"meta":388,"style":388},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[425],{"type":394,"tag":426,"props":427,"children":428},"code",{"__ignoreMap":388},[429],{"type":394,"tag":430,"props":431,"children":434},"span",{"class":432,"line":433},"line",1,[435,441,447,453,458,464,470],{"type":394,"tag":430,"props":436,"children":438},{"style":437},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[439],{"type":400,"value":440},"echo",{"type":394,"tag":430,"props":442,"children":444},{"style":443},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[445],{"type":400,"value":446}," '",{"type":394,"tag":430,"props":448,"children":450},{"style":449},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[451],{"type":400,"value":452},"\"hello world\"",{"type":394,"tag":430,"props":454,"children":455},{"style":443},[456],{"type":400,"value":457},"'",{"type":394,"tag":430,"props":459,"children":461},{"style":460},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[462],{"type":400,"value":463}," |",{"type":394,"tag":430,"props":465,"children":467},{"style":466},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[468],{"type":400,"value":469}," node",{"type":394,"tag":430,"props":471,"children":473},{"style":472},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[474],{"type":400,"value":475}," -c\n",{"type":394,"tag":402,"props":477,"children":479},{"id":478},"声明语法",[480],{"type":400,"value":478},{"type":394,"tag":408,"props":482,"children":483},{},[484,486,500],{"type":400,"value":485},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":394,"tag":487,"props":488,"children":489},"sup",{},[490],{"type":394,"tag":491,"props":492,"children":497},"a",{"href":493,"ariaDescribedBy":494,"dataFootnoteRef":388,"id":496},"#user-content-fn-first-class",[495],"footnote-label","user-content-fnref-first-class",[498],{"type":400,"value":499},"1",{"type":400,"value":501},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":394,"tag":408,"props":503,"children":504},{},[505],{"type":400,"value":506},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":394,"tag":508,"props":509,"children":510},"ul",{},[511,530],{"type":394,"tag":512,"props":513,"children":514},"li",{},[515,517,528],{"type":400,"value":516},"基本数据类型：undefined、string、number、object",{"type":394,"tag":487,"props":518,"children":519},{},[520],{"type":394,"tag":491,"props":521,"children":525},{"href":522,"ariaDescribedBy":523,"dataFootnoteRef":388,"id":524},"#user-content-fn-oo",[495],"user-content-fnref-oo",[526],{"type":400,"value":527},"2",{"type":400,"value":529},"、function、boolean、symbol、bigint",{"type":394,"tag":512,"props":531,"children":532},{},[533,535],{"type":400,"value":534},"值类型和引用类型",{"type":394,"tag":487,"props":536,"children":537},{},[538],{"type":394,"tag":491,"props":539,"children":543},{"href":540,"ariaDescribedBy":541,"dataFootnoteRef":388,"id":542},"#user-content-fn-string",[495],"user-content-fnref-string",[544],{"type":400,"value":545},"3",{"type":394,"tag":408,"props":547,"children":548},{},[549],{"type":400,"value":550},"如果算上规范，可以再增加两种类型系统：",{"type":394,"tag":508,"props":552,"children":553},{},[554,559],{"type":394,"tag":512,"props":555,"children":556},{},[557],{"type":400,"value":558},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":394,"tag":512,"props":560,"children":561},{},[562],{"type":400,"value":563},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":394,"tag":408,"props":565,"children":566},{},[567],{"type":400,"value":568},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":394,"tag":408,"props":570,"children":571},{},[572],{"type":400,"value":573},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":394,"tag":408,"props":575,"children":576},{},[577],{"type":400,"value":578},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":394,"tag":408,"props":580,"children":581},{},[582],{"type":400,"value":583},"相关字符串字面量的一些冷知识：",{"type":394,"tag":508,"props":585,"children":586},{},[587,592,597],{"type":394,"tag":512,"props":588,"children":589},{},[590],{"type":400,"value":591},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":394,"tag":512,"props":593,"children":594},{},[595],{"type":400,"value":596},"空字符串也能作为对象的键。",{"type":394,"tag":512,"props":598,"children":599},{},[600],{"type":400,"value":601},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":394,"tag":402,"props":603,"children":605},{"id":604},"表达式运算",[606],{"type":400,"value":604},{"type":394,"tag":408,"props":608,"children":609},{},[610],{"type":400,"value":611},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":394,"tag":408,"props":613,"children":614},{},[615],{"type":400,"value":616},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":394,"tag":508,"props":618,"children":619},{},[620,625],{"type":394,"tag":512,"props":621,"children":622},{},[623],{"type":400,"value":624},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":394,"tag":512,"props":626,"children":627},{},[628],{"type":400,"value":629},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":394,"tag":408,"props":631,"children":632},{},[633],{"type":400,"value":634},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":394,"tag":408,"props":636,"children":637},{},[638],{"type":400,"value":639},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":394,"tag":408,"props":641,"children":642},{},[643],{"type":400,"value":644},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":394,"tag":408,"props":646,"children":647},{},[648],{"type":400,"value":649},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":394,"tag":419,"props":651,"children":655},{"className":652,"code":653,"language":654,"meta":388,"style":388},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[656],{"type":394,"tag":426,"props":657,"children":658},{"__ignoreMap":388},[659,721],{"type":394,"tag":430,"props":660,"children":661},{"class":432,"line":433},[662,668,674,680,685,690,696,701,706,710,715],{"type":394,"tag":430,"props":663,"children":665},{"style":664},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[666],{"type":400,"value":667},"Object",{"type":394,"tag":430,"props":669,"children":671},{"style":670},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[672],{"type":400,"value":673},".",{"type":394,"tag":430,"props":675,"children":677},{"style":676},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[678],{"type":400,"value":679},"is",{"type":394,"tag":430,"props":681,"children":682},{"style":664},[683],{"type":400,"value":684},"(",{"type":394,"tag":430,"props":686,"children":687},{"style":460},[688],{"type":400,"value":689},"+",{"type":394,"tag":430,"props":691,"children":693},{"style":692},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[694],{"type":400,"value":695},"0",{"type":394,"tag":430,"props":697,"children":698},{"style":670},[699],{"type":400,"value":700},",",{"type":394,"tag":430,"props":702,"children":703},{"style":460},[704],{"type":400,"value":705}," -",{"type":394,"tag":430,"props":707,"children":708},{"style":692},[709],{"type":400,"value":695},{"type":394,"tag":430,"props":711,"children":712},{"style":664},[713],{"type":400,"value":714},") ",{"type":394,"tag":430,"props":716,"children":718},{"style":717},"--shiki-light:#90A4AE;--shiki-default:#6A737D;--shiki-dark:#6A737D;--shiki-sepia:#88846F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[719],{"type":400,"value":720},"// false\n",{"type":394,"tag":430,"props":722,"children":724},{"class":432,"line":723},2,[725,729,733,737,741,747,751,756,760],{"type":394,"tag":430,"props":726,"children":727},{"style":664},[728],{"type":400,"value":667},{"type":394,"tag":430,"props":730,"children":731},{"style":670},[732],{"type":400,"value":673},{"type":394,"tag":430,"props":734,"children":735},{"style":676},[736],{"type":400,"value":679},{"type":394,"tag":430,"props":738,"children":739},{"style":664},[740],{"type":400,"value":684},{"type":394,"tag":430,"props":742,"children":744},{"style":743},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[745],{"type":400,"value":746},"NaN",{"type":394,"tag":430,"props":748,"children":749},{"style":670},[750],{"type":400,"value":700},{"type":394,"tag":430,"props":752,"children":753},{"style":743},[754],{"type":400,"value":755}," NaN",{"type":394,"tag":430,"props":757,"children":758},{"style":664},[759],{"type":400,"value":714},{"type":394,"tag":430,"props":761,"children":762},{"style":717},[763],{"type":400,"value":764},"// true\n",{"type":394,"tag":408,"props":766,"children":767},{},[768],{"type":400,"value":769},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":394,"tag":408,"props":771,"children":772},{},[773],{"type":400,"value":774},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":394,"tag":419,"props":776,"children":778},{"className":652,"code":777,"language":654,"meta":388,"style":388},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[779],{"type":394,"tag":426,"props":780,"children":781},{"__ignoreMap":388},[782,807],{"type":394,"tag":430,"props":783,"children":784},{"class":432,"line":433},[785,790,794,798,803],{"type":394,"tag":430,"props":786,"children":787},{"style":676},[788],{"type":400,"value":789},"Boolean",{"type":394,"tag":430,"props":791,"children":792},{"style":664},[793],{"type":400,"value":684},{"type":394,"tag":430,"props":795,"children":796},{"style":676},[797],{"type":400,"value":328},{"type":394,"tag":430,"props":799,"children":800},{"style":664},[801],{"type":400,"value":802},"()) ",{"type":394,"tag":430,"props":804,"children":805},{"style":717},[806],{"type":400,"value":764},{"type":394,"tag":430,"props":808,"children":809},{"class":432,"line":723},[810,814,819,824,830],{"type":394,"tag":430,"props":811,"children":812},{"style":676},[813],{"type":400,"value":328},{"type":394,"tag":430,"props":815,"children":816},{"style":664},[817],{"type":400,"value":818},"() ",{"type":394,"tag":430,"props":820,"children":821},{"style":460},[822],{"type":400,"value":823},"==",{"type":394,"tag":430,"props":825,"children":827},{"style":826},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[828],{"type":400,"value":829}," true",{"type":394,"tag":430,"props":831,"children":832},{"style":717},[833],{"type":400,"value":834}," // false\n",{"type":394,"tag":408,"props":836,"children":837},{},[838],{"type":400,"value":839},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":394,"tag":419,"props":841,"children":843},{"className":421,"code":842,"language":423,"meta":388,"style":388},"echo \"1 = 1\" | node -c\n",[844],{"type":394,"tag":426,"props":845,"children":846},{"__ignoreMap":388},[847],{"type":394,"tag":430,"props":848,"children":849},{"class":432,"line":433},[850,854,859,864,869,873,877],{"type":394,"tag":430,"props":851,"children":852},{"style":437},[853],{"type":400,"value":440},{"type":394,"tag":430,"props":855,"children":856},{"style":443},[857],{"type":400,"value":858}," \"",{"type":394,"tag":430,"props":860,"children":861},{"style":449},[862],{"type":400,"value":863},"1 = 1",{"type":394,"tag":430,"props":865,"children":866},{"style":443},[867],{"type":400,"value":868},"\"",{"type":394,"tag":430,"props":870,"children":871},{"style":460},[872],{"type":400,"value":463},{"type":394,"tag":430,"props":874,"children":875},{"style":466},[876],{"type":400,"value":469},{"type":394,"tag":430,"props":878,"children":879},{"style":472},[880],{"type":400,"value":475},{"type":394,"tag":408,"props":882,"children":883},{},[884],{"type":400,"value":885},"函数调用也有“隐式调用”这一概念：",{"type":394,"tag":508,"props":887,"children":888},{},[889,894,899,904,909,914],{"type":394,"tag":512,"props":890,"children":891},{},[892],{"type":400,"value":893},"使用 new 运算符",{"type":394,"tag":512,"props":895,"children":896},{},[897],{"type":400,"value":898},"模板处理函数 + 模板字符串调用",{"type":394,"tag":512,"props":900,"children":901},{},[902],{"type":400,"value":903},"函数作为属性存取器且发生了属性存取操作时",{"type":394,"tag":512,"props":905,"children":906},{},[907],{"type":400,"value":908},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":394,"tag":512,"props":910,"children":911},{},[912],{"type":400,"value":913},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":394,"tag":512,"props":915,"children":916},{},[917],{"type":400,"value":918},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":394,"tag":408,"props":920,"children":921},{},[922],{"type":400,"value":923},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":394,"tag":408,"props":925,"children":926},{},[927],{"type":400,"value":928},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":394,"tag":419,"props":930,"children":932},{"className":652,"code":931,"language":654,"meta":388,"style":388},"typeof x // undefined\n",[933],{"type":394,"tag":426,"props":934,"children":935},{"__ignoreMap":388},[936],{"type":394,"tag":430,"props":937,"children":938},{"class":432,"line":433},[939,944,949],{"type":394,"tag":430,"props":940,"children":941},{"style":460},[942],{"type":400,"value":943},"typeof",{"type":394,"tag":430,"props":945,"children":946},{"style":664},[947],{"type":400,"value":948}," x ",{"type":394,"tag":430,"props":950,"children":951},{"style":717},[952],{"type":400,"value":953},"// undefined\n",{"type":394,"tag":408,"props":955,"children":956},{},[957],{"type":400,"value":958},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":394,"tag":419,"props":960,"children":962},{"className":652,"code":961,"language":654,"meta":388,"style":388},"typeof x // ReferenceError\nlet x\n",[963],{"type":394,"tag":426,"props":964,"children":965},{"__ignoreMap":388},[966,982],{"type":394,"tag":430,"props":967,"children":968},{"class":432,"line":433},[969,973,977],{"type":394,"tag":430,"props":970,"children":971},{"style":460},[972],{"type":400,"value":943},{"type":394,"tag":430,"props":974,"children":975},{"style":664},[976],{"type":400,"value":948},{"type":394,"tag":430,"props":978,"children":979},{"style":717},[980],{"type":400,"value":981},"// ReferenceError\n",{"type":394,"tag":430,"props":983,"children":984},{"class":432,"line":723},[985,991],{"type":394,"tag":430,"props":986,"children":988},{"style":987},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[989],{"type":400,"value":990},"let",{"type":394,"tag":430,"props":992,"children":993},{"style":664},[994],{"type":400,"value":995}," x\n",{"type":394,"tag":408,"props":997,"children":998},{},[999],{"type":400,"value":1000},"完整的运算符优先级列表如下：",{"type":400,"value":1002},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":394,"tag":1004,"props":1005,"children":1006},"table",{},[1007,1026],{"type":394,"tag":1008,"props":1009,"children":1010},"thead",{},[1011],{"type":394,"tag":1012,"props":1013,"children":1014},"tr",{},[1015,1021],{"type":394,"tag":1016,"props":1017,"children":1018},"th",{},[1019],{"type":400,"value":1020},"运算符",{"type":394,"tag":1016,"props":1022,"children":1023},{},[1024],{"type":400,"value":1025},"描述",{"type":394,"tag":1027,"props":1028,"children":1029},"tbody",{},[1030,1044,1062,1075,1088,1101,1114,1127,1140,1153,1166,1179,1192,1205,1218,1231,1244,1257,1270,1283],{"type":394,"tag":1012,"props":1031,"children":1032},{},[1033,1039],{"type":394,"tag":1034,"props":1035,"children":1036},"td",{},[1037],{"type":400,"value":1038},"()",{"type":394,"tag":1034,"props":1040,"children":1041},{},[1042],{"type":400,"value":1043},"成组运算",{"type":394,"tag":1012,"props":1045,"children":1046},{},[1047,1057],{"type":394,"tag":1034,"props":1048,"children":1049},{},[1050,1052,1055],{"type":400,"value":1051},".、",{"type":394,"tag":430,"props":1053,"children":1054},{},[],{"type":400,"value":1056},"、new ()",{"type":394,"tag":1034,"props":1058,"children":1059},{},[1060],{"type":400,"value":1061},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":394,"tag":1012,"props":1063,"children":1064},{},[1065,1070],{"type":394,"tag":1034,"props":1066,"children":1067},{},[1068],{"type":400,"value":1069},"()、new",{"type":394,"tag":1034,"props":1071,"children":1072},{},[1073],{"type":400,"value":1074},"函数调用、new 运算符",{"type":394,"tag":1012,"props":1076,"children":1077},{},[1078,1083],{"type":394,"tag":1034,"props":1079,"children":1080},{},[1081],{"type":400,"value":1082},"++、--",{"type":394,"tag":1034,"props":1084,"children":1085},{},[1086],{"type":400,"value":1087},"后置递增、后置递减",{"type":394,"tag":1012,"props":1089,"children":1090},{},[1091,1096],{"type":394,"tag":1034,"props":1092,"children":1093},{},[1094],{"type":400,"value":1095},"+、-、++、--、~、!、delete、typeof、void",{"type":394,"tag":1034,"props":1097,"children":1098},{},[1099],{"type":400,"value":1100},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":394,"tag":1012,"props":1102,"children":1103},{},[1104,1109],{"type":394,"tag":1034,"props":1105,"children":1106},{},[1107],{"type":400,"value":1108},"*、/、%",{"type":394,"tag":1034,"props":1110,"children":1111},{},[1112],{"type":400,"value":1113},"乘法、除法、取模",{"type":394,"tag":1012,"props":1115,"children":1116},{},[1117,1122],{"type":394,"tag":1034,"props":1118,"children":1119},{},[1120],{"type":400,"value":1121},"+、-、+",{"type":394,"tag":1034,"props":1123,"children":1124},{},[1125],{"type":400,"value":1126},"加法、减法、字符串连接",{"type":394,"tag":1012,"props":1128,"children":1129},{},[1130,1135],{"type":394,"tag":1034,"props":1131,"children":1132},{},[1133],{"type":400,"value":1134},"\u003C\u003C、>>、>>>",{"type":394,"tag":1034,"props":1136,"children":1137},{},[1138],{"type":400,"value":1139},"移位运算符",{"type":394,"tag":1012,"props":1141,"children":1142},{},[1143,1148],{"type":394,"tag":1034,"props":1144,"children":1145},{},[1146],{"type":400,"value":1147},"\u003C、\u003C=、>=、>、in、instanceof",{"type":394,"tag":1034,"props":1149,"children":1150},{},[1151],{"type":400,"value":1152},"关系运算符、in、instanceof",{"type":394,"tag":1012,"props":1154,"children":1155},{},[1156,1161],{"type":394,"tag":1034,"props":1157,"children":1158},{},[1159],{"type":400,"value":1160},"==、!=、===、!==",{"type":394,"tag":1034,"props":1162,"children":1163},{},[1164],{"type":400,"value":1165},"等值检测",{"type":394,"tag":1012,"props":1167,"children":1168},{},[1169,1174],{"type":394,"tag":1034,"props":1170,"children":1171},{},[1172],{"type":400,"value":1173},"&",{"type":394,"tag":1034,"props":1175,"children":1176},{},[1177],{"type":400,"value":1178},"按位与",{"type":394,"tag":1012,"props":1180,"children":1181},{},[1182,1187],{"type":394,"tag":1034,"props":1183,"children":1184},{},[1185],{"type":400,"value":1186},"^",{"type":394,"tag":1034,"props":1188,"children":1189},{},[1190],{"type":400,"value":1191},"按位异或",{"type":394,"tag":1012,"props":1193,"children":1194},{},[1195,1200],{"type":394,"tag":1034,"props":1196,"children":1197},{},[1198],{"type":400,"value":1199},"|",{"type":394,"tag":1034,"props":1201,"children":1202},{},[1203],{"type":400,"value":1204},"按位或",{"type":394,"tag":1012,"props":1206,"children":1207},{},[1208,1213],{"type":394,"tag":1034,"props":1209,"children":1210},{},[1211],{"type":400,"value":1212},"&&",{"type":394,"tag":1034,"props":1214,"children":1215},{},[1216],{"type":400,"value":1217},"逻辑与",{"type":394,"tag":1012,"props":1219,"children":1220},{},[1221,1226],{"type":394,"tag":1034,"props":1222,"children":1223},{},[1224],{"type":400,"value":1225},"||",{"type":394,"tag":1034,"props":1227,"children":1228},{},[1229],{"type":400,"value":1230},"逻辑或",{"type":394,"tag":1012,"props":1232,"children":1233},{},[1234,1239],{"type":394,"tag":1034,"props":1235,"children":1236},{},[1237],{"type":400,"value":1238},"?:",{"type":394,"tag":1034,"props":1240,"children":1241},{},[1242],{"type":400,"value":1243},"三木运算",{"type":394,"tag":1012,"props":1245,"children":1246},{},[1247,1252],{"type":394,"tag":1034,"props":1248,"children":1249},{},[1250],{"type":400,"value":1251},"=、oP=",{"type":394,"tag":1034,"props":1253,"children":1254},{},[1255],{"type":400,"value":1256},"赋值、运算赋值",{"type":394,"tag":1012,"props":1258,"children":1259},{},[1260,1265],{"type":394,"tag":1034,"props":1261,"children":1262},{},[1263],{"type":400,"value":1264},"yield、yield*",{"type":394,"tag":1034,"props":1266,"children":1267},{},[1268],{"type":400,"value":1269},"yield 表达式",{"type":394,"tag":1012,"props":1271,"children":1272},{},[1273,1278],{"type":394,"tag":1034,"props":1274,"children":1275},{},[1276],{"type":400,"value":1277},"...",{"type":394,"tag":1034,"props":1279,"children":1280},{},[1281],{"type":400,"value":1282},"展开运算符",{"type":394,"tag":1012,"props":1284,"children":1285},{},[1286,1291],{"type":394,"tag":1034,"props":1287,"children":1288},{},[1289],{"type":400,"value":1290},"，",{"type":394,"tag":1034,"props":1292,"children":1293},{},[1294],{"type":400,"value":1295},"逗号运算符、多重求值",{"type":394,"tag":408,"props":1297,"children":1298},{},[1299],{"type":400,"value":1300},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":394,"tag":419,"props":1302,"children":1304},{"className":652,"code":1303,"language":654,"meta":388,"style":388},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1305],{"type":394,"tag":426,"props":1306,"children":1307},{"__ignoreMap":388},[1308,1331,1367,1408,1417,1452,1489,1497,1524],{"type":394,"tag":430,"props":1309,"children":1310},{"class":432,"line":433},[1311,1316,1321,1326],{"type":394,"tag":430,"props":1312,"children":1313},{"style":987},[1314],{"type":400,"value":1315},"function",{"type":394,"tag":430,"props":1317,"children":1318},{"style":676},[1319],{"type":400,"value":1320}," A",{"type":394,"tag":430,"props":1322,"children":1323},{"style":670},[1324],{"type":400,"value":1325}," ()",{"type":394,"tag":430,"props":1327,"children":1328},{"style":670},[1329],{"type":400,"value":1330}," {\n",{"type":394,"tag":430,"props":1332,"children":1333},{"class":432,"line":723},[1334,1340,1344,1349,1354,1358,1362],{"type":394,"tag":430,"props":1335,"children":1337},{"style":1336},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1338],{"type":400,"value":1339},"  this",{"type":394,"tag":430,"props":1341,"children":1342},{"style":670},[1343],{"type":400,"value":673},{"type":394,"tag":430,"props":1345,"children":1346},{"style":664},[1347],{"type":400,"value":1348},"b",{"type":394,"tag":430,"props":1350,"children":1351},{"style":460},[1352],{"type":400,"value":1353}," =",{"type":394,"tag":430,"props":1355,"children":1356},{"style":443},[1357],{"type":400,"value":446},{"type":394,"tag":430,"props":1359,"children":1360},{"style":449},[1361],{"type":400,"value":1348},{"type":394,"tag":430,"props":1363,"children":1364},{"style":443},[1365],{"type":400,"value":1366},"'\n",{"type":394,"tag":430,"props":1368,"children":1370},{"class":432,"line":1369},3,[1371,1376,1380,1385,1390,1394,1399,1403],{"type":394,"tag":430,"props":1372,"children":1373},{"style":664},[1374],{"type":400,"value":1375},"  console",{"type":394,"tag":430,"props":1377,"children":1378},{"style":670},[1379],{"type":400,"value":673},{"type":394,"tag":430,"props":1381,"children":1382},{"style":676},[1383],{"type":400,"value":1384},"log",{"type":394,"tag":430,"props":1386,"children":1388},{"style":1387},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1389],{"type":400,"value":684},{"type":394,"tag":430,"props":1391,"children":1392},{"style":443},[1393],{"type":400,"value":457},{"type":394,"tag":430,"props":1395,"children":1396},{"style":449},[1397],{"type":400,"value":1398},"A().b",{"type":394,"tag":430,"props":1400,"children":1401},{"style":443},[1402],{"type":400,"value":457},{"type":394,"tag":430,"props":1404,"children":1405},{"style":1387},[1406],{"type":400,"value":1407},")\n",{"type":394,"tag":430,"props":1409,"children":1411},{"class":432,"line":1410},4,[1412],{"type":394,"tag":430,"props":1413,"children":1414},{"style":670},[1415],{"type":400,"value":1416},"}\n",{"type":394,"tag":430,"props":1418,"children":1420},{"class":432,"line":1419},5,[1421,1427,1431,1435,1439,1444,1448],{"type":394,"tag":430,"props":1422,"children":1424},{"style":1423},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1425],{"type":400,"value":1426},"A",{"type":394,"tag":430,"props":1428,"children":1429},{"style":670},[1430],{"type":400,"value":673},{"type":394,"tag":430,"props":1432,"children":1433},{"style":676},[1434],{"type":400,"value":1348},{"type":394,"tag":430,"props":1436,"children":1437},{"style":460},[1438],{"type":400,"value":1353},{"type":394,"tag":430,"props":1440,"children":1441},{"style":987},[1442],{"type":400,"value":1443}," function",{"type":394,"tag":430,"props":1445,"children":1446},{"style":670},[1447],{"type":400,"value":1325},{"type":394,"tag":430,"props":1449,"children":1450},{"style":670},[1451],{"type":400,"value":1330},{"type":394,"tag":430,"props":1453,"children":1455},{"class":432,"line":1454},6,[1456,1460,1464,1468,1472,1476,1481,1485],{"type":394,"tag":430,"props":1457,"children":1458},{"style":664},[1459],{"type":400,"value":1375},{"type":394,"tag":430,"props":1461,"children":1462},{"style":670},[1463],{"type":400,"value":673},{"type":394,"tag":430,"props":1465,"children":1466},{"style":676},[1467],{"type":400,"value":1384},{"type":394,"tag":430,"props":1469,"children":1470},{"style":1387},[1471],{"type":400,"value":684},{"type":394,"tag":430,"props":1473,"children":1474},{"style":443},[1475],{"type":400,"value":457},{"type":394,"tag":430,"props":1477,"children":1478},{"style":449},[1479],{"type":400,"value":1480},"A.b",{"type":394,"tag":430,"props":1482,"children":1483},{"style":443},[1484],{"type":400,"value":457},{"type":394,"tag":430,"props":1486,"children":1487},{"style":1387},[1488],{"type":400,"value":1407},{"type":394,"tag":430,"props":1490,"children":1492},{"class":432,"line":1491},7,[1493],{"type":394,"tag":430,"props":1494,"children":1495},{"style":670},[1496],{"type":400,"value":1416},{"type":394,"tag":430,"props":1498,"children":1500},{"class":432,"line":1499},8,[1501,1506,1510,1514,1519],{"type":394,"tag":430,"props":1502,"children":1503},{"style":460},[1504],{"type":400,"value":1505},"new",{"type":394,"tag":430,"props":1507,"children":1508},{"style":1423},[1509],{"type":400,"value":1320},{"type":394,"tag":430,"props":1511,"children":1512},{"style":670},[1513],{"type":400,"value":673},{"type":394,"tag":430,"props":1515,"children":1516},{"style":664},[1517],{"type":400,"value":1518},"b ",{"type":394,"tag":430,"props":1520,"children":1521},{"style":717},[1522],{"type":400,"value":1523},"// A.b\n",{"type":394,"tag":430,"props":1525,"children":1527},{"class":432,"line":1526},9,[1528,1532,1536,1540,1544,1548],{"type":394,"tag":430,"props":1529,"children":1530},{"style":460},[1531],{"type":400,"value":1505},{"type":394,"tag":430,"props":1533,"children":1534},{"style":676},[1535],{"type":400,"value":1320},{"type":394,"tag":430,"props":1537,"children":1538},{"style":664},[1539],{"type":400,"value":1038},{"type":394,"tag":430,"props":1541,"children":1542},{"style":670},[1543],{"type":400,"value":673},{"type":394,"tag":430,"props":1545,"children":1546},{"style":664},[1547],{"type":400,"value":1518},{"type":394,"tag":430,"props":1549,"children":1550},{"style":717},[1551],{"type":400,"value":1552},"// A().b\n",{"type":394,"tag":402,"props":1554,"children":1556},{"id":1555},"语句",[1557],{"type":400,"value":1555},{"type":394,"tag":408,"props":1559,"children":1560},{},[1561],{"type":400,"value":1562},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":394,"tag":408,"props":1564,"children":1565},{},[1566],{"type":400,"value":1567},"需要注意的点：",{"type":394,"tag":508,"props":1569,"children":1570},{},[1571,1576,1581],{"type":394,"tag":512,"props":1572,"children":1573},{},[1574],{"type":400,"value":1575},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":394,"tag":512,"props":1577,"children":1578},{},[1579],{"type":400,"value":1580},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":394,"tag":512,"props":1582,"children":1583},{},[1584],{"type":400,"value":1585},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":394,"tag":408,"props":1587,"children":1588},{},[1589],{"type":400,"value":1590},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":394,"tag":419,"props":1592,"children":1594},{"className":652,"code":1593,"language":654,"meta":388,"style":388},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1595],{"type":394,"tag":426,"props":1596,"children":1597},{"__ignoreMap":388},[1598,1629,1656],{"type":394,"tag":430,"props":1599,"children":1600},{"class":432,"line":433},[1601,1605,1610,1614,1620,1625],{"type":394,"tag":430,"props":1602,"children":1603},{"style":987},[1604],{"type":400,"value":1315},{"type":394,"tag":430,"props":1606,"children":1607},{"style":676},[1608],{"type":400,"value":1609}," log",{"type":394,"tag":430,"props":1611,"children":1612},{"style":670},[1613],{"type":400,"value":684},{"type":394,"tag":430,"props":1615,"children":1617},{"style":1616},"--shiki-light:#90A4AE;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#FD971F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[1618],{"type":400,"value":1619},"arg",{"type":394,"tag":430,"props":1621,"children":1622},{"style":670},[1623],{"type":400,"value":1624},")",{"type":394,"tag":430,"props":1626,"children":1627},{"style":670},[1628],{"type":400,"value":1330},{"type":394,"tag":430,"props":1630,"children":1631},{"class":432,"line":723},[1632,1636,1640,1644,1648,1652],{"type":394,"tag":430,"props":1633,"children":1634},{"style":664},[1635],{"type":400,"value":1375},{"type":394,"tag":430,"props":1637,"children":1638},{"style":670},[1639],{"type":400,"value":673},{"type":394,"tag":430,"props":1641,"children":1642},{"style":676},[1643],{"type":400,"value":1384},{"type":394,"tag":430,"props":1645,"children":1646},{"style":1387},[1647],{"type":400,"value":684},{"type":394,"tag":430,"props":1649,"children":1650},{"style":664},[1651],{"type":400,"value":1619},{"type":394,"tag":430,"props":1653,"children":1654},{"style":1387},[1655],{"type":400,"value":1407},{"type":394,"tag":430,"props":1657,"children":1658},{"class":432,"line":1369},[1659,1664,1668,1672],{"type":394,"tag":430,"props":1660,"children":1661},{"style":670},[1662],{"type":400,"value":1663},"}",{"type":394,"tag":430,"props":1665,"children":1666},{"style":664},[1667],{"type":400,"value":684},{"type":394,"tag":430,"props":1669,"children":1670},{"style":692},[1671],{"type":400,"value":527},{"type":394,"tag":430,"props":1673,"children":1674},{"style":664},[1675],{"type":400,"value":1407},{"type":394,"tag":408,"props":1677,"children":1678},{},[1679],{"type":400,"value":1680},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":394,"tag":419,"props":1682,"children":1684},{"className":652,"code":1683,"language":654,"meta":388,"style":388},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1685],{"type":394,"tag":426,"props":1686,"children":1687},{"__ignoreMap":388},[1688,1740,1778,1805],{"type":394,"tag":430,"props":1689,"children":1690},{"class":432,"line":433},[1691,1697,1702,1707,1711,1716,1720,1725,1730,1735],{"type":394,"tag":430,"props":1692,"children":1694},{"style":1693},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[1695],{"type":400,"value":1696},"try",{"type":394,"tag":430,"props":1698,"children":1699},{"style":670},[1700],{"type":400,"value":1701}," {",{"type":394,"tag":430,"props":1703,"children":1704},{"style":1693},[1705],{"type":400,"value":1706}," throw",{"type":394,"tag":430,"props":1708,"children":1709},{"style":443},[1710],{"type":400,"value":446},{"type":394,"tag":430,"props":1712,"children":1713},{"style":449},[1714],{"type":400,"value":1715},"test",{"type":394,"tag":430,"props":1717,"children":1718},{"style":443},[1719],{"type":400,"value":457},{"type":394,"tag":430,"props":1721,"children":1722},{"style":670},[1723],{"type":400,"value":1724}," }",{"type":394,"tag":430,"props":1726,"children":1727},{"style":1693},[1728],{"type":400,"value":1729}," catch",{"type":394,"tag":430,"props":1731,"children":1732},{"style":664},[1733],{"type":400,"value":1734}," (e) ",{"type":394,"tag":430,"props":1736,"children":1737},{"style":670},[1738],{"type":400,"value":1739},"{\n",{"type":394,"tag":430,"props":1741,"children":1742},{"class":432,"line":723},[1743,1747,1751,1755,1759,1764,1768,1773],{"type":394,"tag":430,"props":1744,"children":1745},{"style":664},[1746],{"type":400,"value":1375},{"type":394,"tag":430,"props":1748,"children":1749},{"style":670},[1750],{"type":400,"value":673},{"type":394,"tag":430,"props":1752,"children":1753},{"style":676},[1754],{"type":400,"value":1384},{"type":394,"tag":430,"props":1756,"children":1757},{"style":1387},[1758],{"type":400,"value":684},{"type":394,"tag":430,"props":1760,"children":1761},{"style":664},[1762],{"type":400,"value":1763},"e",{"type":394,"tag":430,"props":1765,"children":1766},{"style":1387},[1767],{"type":400,"value":1624},{"type":394,"tag":430,"props":1769,"children":1770},{"style":670},[1771],{"type":400,"value":1772},";",{"type":394,"tag":430,"props":1774,"children":1775},{"style":717},[1776],{"type":400,"value":1777}," // test\n",{"type":394,"tag":430,"props":1779,"children":1780},{"class":432,"line":1369},[1781,1786,1791,1795,1800],{"type":394,"tag":430,"props":1782,"children":1783},{"style":987},[1784],{"type":400,"value":1785},"  var",{"type":394,"tag":430,"props":1787,"children":1788},{"style":664},[1789],{"type":400,"value":1790}," e",{"type":394,"tag":430,"props":1792,"children":1793},{"style":460},[1794],{"type":400,"value":1353},{"type":394,"tag":430,"props":1796,"children":1797},{"style":692},[1798],{"type":400,"value":1799}," 1",{"type":394,"tag":430,"props":1801,"children":1802},{"style":670},[1803],{"type":400,"value":1804},";\n",{"type":394,"tag":430,"props":1806,"children":1807},{"class":432,"line":1410},[1808],{"type":394,"tag":430,"props":1809,"children":1810},{"style":670},[1811],{"type":400,"value":1416},{"type":394,"tag":408,"props":1813,"children":1814},{},[1815],{"type":400,"value":1816},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":394,"tag":408,"props":1818,"children":1819},{},[1820],{"type":400,"value":1821},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":394,"tag":419,"props":1823,"children":1825},{"className":652,"code":1824,"language":654,"meta":388,"style":388},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1826],{"type":394,"tag":426,"props":1827,"children":1828},{"__ignoreMap":388},[1829,1837,1910,1976,2020,2062,2070,2077,2085,2100,2160,2221,2262,2303,2312,2320],{"type":394,"tag":430,"props":1830,"children":1831},{"class":432,"line":433},[1832],{"type":394,"tag":430,"props":1833,"children":1834},{"style":717},[1835],{"type":400,"value":1836},"// it works !\n",{"type":394,"tag":430,"props":1838,"children":1839},{"class":432,"line":723},[1840,1845,1850,1855,1860,1865,1869,1873,1878,1883,1888,1892,1897,1902,1906],{"type":394,"tag":430,"props":1841,"children":1843},{"style":1842},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1844],{"type":400,"value":1715},{"type":394,"tag":430,"props":1846,"children":1847},{"style":670},[1848],{"type":400,"value":1849},":",{"type":394,"tag":430,"props":1851,"children":1852},{"style":1693},[1853],{"type":400,"value":1854}," for",{"type":394,"tag":430,"props":1856,"children":1857},{"style":664},[1858],{"type":400,"value":1859}," (i ",{"type":394,"tag":430,"props":1861,"children":1862},{"style":460},[1863],{"type":400,"value":1864},"=",{"type":394,"tag":430,"props":1866,"children":1867},{"style":692},[1868],{"type":400,"value":1799},{"type":394,"tag":430,"props":1870,"children":1871},{"style":670},[1872],{"type":400,"value":1772},{"type":394,"tag":430,"props":1874,"children":1875},{"style":664},[1876],{"type":400,"value":1877}," i ",{"type":394,"tag":430,"props":1879,"children":1880},{"style":460},[1881],{"type":400,"value":1882},"\u003C",{"type":394,"tag":430,"props":1884,"children":1885},{"style":692},[1886],{"type":400,"value":1887}," 3",{"type":394,"tag":430,"props":1889,"children":1890},{"style":670},[1891],{"type":400,"value":1772},{"type":394,"tag":430,"props":1893,"children":1894},{"style":664},[1895],{"type":400,"value":1896}," i",{"type":394,"tag":430,"props":1898,"children":1899},{"style":460},[1900],{"type":400,"value":1901},"++",{"type":394,"tag":430,"props":1903,"children":1904},{"style":664},[1905],{"type":400,"value":714},{"type":394,"tag":430,"props":1907,"children":1908},{"style":670},[1909],{"type":400,"value":1739},{"type":394,"tag":430,"props":1911,"children":1912},{"class":432,"line":1369},[1913,1918,1923,1928,1932,1937,1941,1946,1951,1956,1960,1964,1968,1972],{"type":394,"tag":430,"props":1914,"children":1915},{"style":1693},[1916],{"type":400,"value":1917},"  for",{"type":394,"tag":430,"props":1919,"children":1920},{"style":1387},[1921],{"type":400,"value":1922}," (",{"type":394,"tag":430,"props":1924,"children":1925},{"style":664},[1926],{"type":400,"value":1927},"j",{"type":394,"tag":430,"props":1929,"children":1930},{"style":460},[1931],{"type":400,"value":1353},{"type":394,"tag":430,"props":1933,"children":1934},{"style":692},[1935],{"type":400,"value":1936}," 5",{"type":394,"tag":430,"props":1938,"children":1939},{"style":670},[1940],{"type":400,"value":1772},{"type":394,"tag":430,"props":1942,"children":1943},{"style":664},[1944],{"type":400,"value":1945}," j",{"type":394,"tag":430,"props":1947,"children":1948},{"style":460},[1949],{"type":400,"value":1950}," \u003C",{"type":394,"tag":430,"props":1952,"children":1953},{"style":692},[1954],{"type":400,"value":1955}," 8",{"type":394,"tag":430,"props":1957,"children":1958},{"style":670},[1959],{"type":400,"value":1772},{"type":394,"tag":430,"props":1961,"children":1962},{"style":664},[1963],{"type":400,"value":1945},{"type":394,"tag":430,"props":1965,"children":1966},{"style":460},[1967],{"type":400,"value":1901},{"type":394,"tag":430,"props":1969,"children":1970},{"style":1387},[1971],{"type":400,"value":714},{"type":394,"tag":430,"props":1973,"children":1974},{"style":670},[1975],{"type":400,"value":1739},{"type":394,"tag":430,"props":1977,"children":1978},{"class":432,"line":1410},[1979,1984,1988,1992,1997,2002,2006,2011,2016],{"type":394,"tag":430,"props":1980,"children":1981},{"style":1693},[1982],{"type":400,"value":1983},"    if",{"type":394,"tag":430,"props":1985,"children":1986},{"style":1387},[1987],{"type":400,"value":1922},{"type":394,"tag":430,"props":1989,"children":1990},{"style":664},[1991],{"type":400,"value":1927},{"type":394,"tag":430,"props":1993,"children":1994},{"style":460},[1995],{"type":400,"value":1996}," ===",{"type":394,"tag":430,"props":1998,"children":1999},{"style":692},[2000],{"type":400,"value":2001}," 6",{"type":394,"tag":430,"props":2003,"children":2004},{"style":1387},[2005],{"type":400,"value":714},{"type":394,"tag":430,"props":2007,"children":2008},{"style":1693},[2009],{"type":400,"value":2010},"continue",{"type":394,"tag":430,"props":2012,"children":2013},{"style":1842},[2014],{"type":400,"value":2015}," test",{"type":394,"tag":430,"props":2017,"children":2018},{"style":670},[2019],{"type":400,"value":1804},{"type":394,"tag":430,"props":2021,"children":2022},{"class":432,"line":1419},[2023,2028,2033,2037,2041,2045,2050,2054,2058],{"type":394,"tag":430,"props":2024,"children":2025},{"style":1693},[2026],{"type":400,"value":2027},"    else",{"type":394,"tag":430,"props":2029,"children":2030},{"style":664},[2031],{"type":400,"value":2032}," console",{"type":394,"tag":430,"props":2034,"children":2035},{"style":670},[2036],{"type":400,"value":673},{"type":394,"tag":430,"props":2038,"children":2039},{"style":676},[2040],{"type":400,"value":1384},{"type":394,"tag":430,"props":2042,"children":2043},{"style":1387},[2044],{"type":400,"value":684},{"type":394,"tag":430,"props":2046,"children":2047},{"style":664},[2048],{"type":400,"value":2049},"i",{"type":394,"tag":430,"props":2051,"children":2052},{"style":670},[2053],{"type":400,"value":700},{"type":394,"tag":430,"props":2055,"children":2056},{"style":664},[2057],{"type":400,"value":1945},{"type":394,"tag":430,"props":2059,"children":2060},{"style":1387},[2061],{"type":400,"value":1407},{"type":394,"tag":430,"props":2063,"children":2064},{"class":432,"line":1454},[2065],{"type":394,"tag":430,"props":2066,"children":2067},{"style":670},[2068],{"type":400,"value":2069},"  }\n",{"type":394,"tag":430,"props":2071,"children":2072},{"class":432,"line":1491},[2073],{"type":394,"tag":430,"props":2074,"children":2075},{"style":670},[2076],{"type":400,"value":1416},{"type":394,"tag":430,"props":2078,"children":2079},{"class":432,"line":1499},[2080],{"type":394,"tag":430,"props":2081,"children":2082},{"style":717},[2083],{"type":400,"value":2084},"// SyntaxError !\n",{"type":394,"tag":430,"props":2086,"children":2087},{"class":432,"line":1526},[2088,2092,2096],{"type":394,"tag":430,"props":2089,"children":2090},{"style":1842},[2091],{"type":400,"value":1715},{"type":394,"tag":430,"props":2093,"children":2094},{"style":670},[2095],{"type":400,"value":1849},{"type":394,"tag":430,"props":2097,"children":2098},{"style":670},[2099],{"type":400,"value":1330},{"type":394,"tag":430,"props":2101,"children":2103},{"class":432,"line":2102},10,[2104,2108,2112,2116,2120,2124,2128,2132,2136,2140,2144,2148,2152,2156],{"type":394,"tag":430,"props":2105,"children":2106},{"style":1693},[2107],{"type":400,"value":1917},{"type":394,"tag":430,"props":2109,"children":2110},{"style":1387},[2111],{"type":400,"value":1922},{"type":394,"tag":430,"props":2113,"children":2114},{"style":664},[2115],{"type":400,"value":2049},{"type":394,"tag":430,"props":2117,"children":2118},{"style":460},[2119],{"type":400,"value":1353},{"type":394,"tag":430,"props":2121,"children":2122},{"style":692},[2123],{"type":400,"value":1799},{"type":394,"tag":430,"props":2125,"children":2126},{"style":670},[2127],{"type":400,"value":1772},{"type":394,"tag":430,"props":2129,"children":2130},{"style":664},[2131],{"type":400,"value":1896},{"type":394,"tag":430,"props":2133,"children":2134},{"style":460},[2135],{"type":400,"value":1950},{"type":394,"tag":430,"props":2137,"children":2138},{"style":692},[2139],{"type":400,"value":1887},{"type":394,"tag":430,"props":2141,"children":2142},{"style":670},[2143],{"type":400,"value":1772},{"type":394,"tag":430,"props":2145,"children":2146},{"style":664},[2147],{"type":400,"value":1896},{"type":394,"tag":430,"props":2149,"children":2150},{"style":460},[2151],{"type":400,"value":1901},{"type":394,"tag":430,"props":2153,"children":2154},{"style":1387},[2155],{"type":400,"value":714},{"type":394,"tag":430,"props":2157,"children":2158},{"style":670},[2159],{"type":400,"value":1739},{"type":394,"tag":430,"props":2161,"children":2163},{"class":432,"line":2162},11,[2164,2169,2173,2177,2181,2185,2189,2193,2197,2201,2205,2209,2213,2217],{"type":394,"tag":430,"props":2165,"children":2166},{"style":1693},[2167],{"type":400,"value":2168},"    for",{"type":394,"tag":430,"props":2170,"children":2171},{"style":1387},[2172],{"type":400,"value":1922},{"type":394,"tag":430,"props":2174,"children":2175},{"style":664},[2176],{"type":400,"value":1927},{"type":394,"tag":430,"props":2178,"children":2179},{"style":460},[2180],{"type":400,"value":1353},{"type":394,"tag":430,"props":2182,"children":2183},{"style":692},[2184],{"type":400,"value":1936},{"type":394,"tag":430,"props":2186,"children":2187},{"style":670},[2188],{"type":400,"value":1772},{"type":394,"tag":430,"props":2190,"children":2191},{"style":664},[2192],{"type":400,"value":1945},{"type":394,"tag":430,"props":2194,"children":2195},{"style":460},[2196],{"type":400,"value":1950},{"type":394,"tag":430,"props":2198,"children":2199},{"style":692},[2200],{"type":400,"value":1955},{"type":394,"tag":430,"props":2202,"children":2203},{"style":670},[2204],{"type":400,"value":1772},{"type":394,"tag":430,"props":2206,"children":2207},{"style":664},[2208],{"type":400,"value":1945},{"type":394,"tag":430,"props":2210,"children":2211},{"style":460},[2212],{"type":400,"value":1901},{"type":394,"tag":430,"props":2214,"children":2215},{"style":1387},[2216],{"type":400,"value":714},{"type":394,"tag":430,"props":2218,"children":2219},{"style":670},[2220],{"type":400,"value":1739},{"type":394,"tag":430,"props":2222,"children":2224},{"class":432,"line":2223},12,[2225,2230,2234,2238,2242,2246,2250,2254,2258],{"type":394,"tag":430,"props":2226,"children":2227},{"style":1693},[2228],{"type":400,"value":2229},"      if",{"type":394,"tag":430,"props":2231,"children":2232},{"style":1387},[2233],{"type":400,"value":1922},{"type":394,"tag":430,"props":2235,"children":2236},{"style":664},[2237],{"type":400,"value":1927},{"type":394,"tag":430,"props":2239,"children":2240},{"style":460},[2241],{"type":400,"value":1996},{"type":394,"tag":430,"props":2243,"children":2244},{"style":692},[2245],{"type":400,"value":2001},{"type":394,"tag":430,"props":2247,"children":2248},{"style":1387},[2249],{"type":400,"value":714},{"type":394,"tag":430,"props":2251,"children":2252},{"style":1693},[2253],{"type":400,"value":2010},{"type":394,"tag":430,"props":2255,"children":2256},{"style":1842},[2257],{"type":400,"value":2015},{"type":394,"tag":430,"props":2259,"children":2260},{"style":670},[2261],{"type":400,"value":1804},{"type":394,"tag":430,"props":2263,"children":2265},{"class":432,"line":2264},13,[2266,2271,2275,2279,2283,2287,2291,2295,2299],{"type":394,"tag":430,"props":2267,"children":2268},{"style":1693},[2269],{"type":400,"value":2270},"      else",{"type":394,"tag":430,"props":2272,"children":2273},{"style":664},[2274],{"type":400,"value":2032},{"type":394,"tag":430,"props":2276,"children":2277},{"style":670},[2278],{"type":400,"value":673},{"type":394,"tag":430,"props":2280,"children":2281},{"style":676},[2282],{"type":400,"value":1384},{"type":394,"tag":430,"props":2284,"children":2285},{"style":1387},[2286],{"type":400,"value":684},{"type":394,"tag":430,"props":2288,"children":2289},{"style":664},[2290],{"type":400,"value":2049},{"type":394,"tag":430,"props":2292,"children":2293},{"style":670},[2294],{"type":400,"value":700},{"type":394,"tag":430,"props":2296,"children":2297},{"style":664},[2298],{"type":400,"value":1945},{"type":394,"tag":430,"props":2300,"children":2301},{"style":1387},[2302],{"type":400,"value":1407},{"type":394,"tag":430,"props":2304,"children":2306},{"class":432,"line":2305},14,[2307],{"type":394,"tag":430,"props":2308,"children":2309},{"style":670},[2310],{"type":400,"value":2311},"    }\n",{"type":394,"tag":430,"props":2313,"children":2315},{"class":432,"line":2314},15,[2316],{"type":394,"tag":430,"props":2317,"children":2318},{"style":670},[2319],{"type":400,"value":2069},{"type":394,"tag":430,"props":2321,"children":2323},{"class":432,"line":2322},16,[2324],{"type":394,"tag":430,"props":2325,"children":2326},{"style":670},[2327],{"type":400,"value":1416},{"type":394,"tag":408,"props":2329,"children":2330},{},[2331],{"type":400,"value":2332},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":394,"tag":408,"props":2334,"children":2335},{},[2336],{"type":400,"value":2337},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":394,"tag":402,"props":2339,"children":2341},{"id":2340},"模块",[2342],{"type":400,"value":2340},{"type":394,"tag":408,"props":2344,"children":2345},{},[2346],{"type":400,"value":2347},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":394,"tag":419,"props":2349,"children":2351},{"className":652,"code":2350,"language":654,"meta":388,"style":388},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2352],{"type":394,"tag":426,"props":2353,"children":2354},{"__ignoreMap":388},[2355,2403],{"type":394,"tag":430,"props":2356,"children":2357},{"class":432,"line":433},[2358,2363,2368,2372,2376,2381,2385,2390,2394,2399],{"type":394,"tag":430,"props":2359,"children":2360},{"style":1693},[2361],{"type":400,"value":2362},"import",{"type":394,"tag":430,"props":2364,"children":2365},{"style":664},[2366],{"type":400,"value":2367}," defaultExport",{"type":394,"tag":430,"props":2369,"children":2370},{"style":670},[2371],{"type":400,"value":700},{"type":394,"tag":430,"props":2373,"children":2374},{"style":670},[2375],{"type":400,"value":1701},{"type":394,"tag":430,"props":2377,"children":2378},{"style":664},[2379],{"type":400,"value":2380}," toolA",{"type":394,"tag":430,"props":2382,"children":2383},{"style":670},[2384],{"type":400,"value":1724},{"type":394,"tag":430,"props":2386,"children":2387},{"style":1693},[2388],{"type":400,"value":2389}," from",{"type":394,"tag":430,"props":2391,"children":2392},{"style":443},[2393],{"type":400,"value":446},{"type":394,"tag":430,"props":2395,"children":2396},{"style":449},[2397],{"type":400,"value":2398},"test.mjs",{"type":394,"tag":430,"props":2400,"children":2401},{"style":443},[2402],{"type":400,"value":1366},{"type":394,"tag":430,"props":2404,"children":2405},{"class":432,"line":723},[2406,2410,2414,2418,2423,2428,2433,2438,2442,2446],{"type":394,"tag":430,"props":2407,"children":2408},{"style":1693},[2409],{"type":400,"value":2362},{"type":394,"tag":430,"props":2411,"children":2412},{"style":664},[2413],{"type":400,"value":2367},{"type":394,"tag":430,"props":2415,"children":2416},{"style":670},[2417],{"type":400,"value":700},{"type":394,"tag":430,"props":2419,"children":2420},{"style":743},[2421],{"type":400,"value":2422}," *",{"type":394,"tag":430,"props":2424,"children":2425},{"style":1693},[2426],{"type":400,"value":2427}," as",{"type":394,"tag":430,"props":2429,"children":2430},{"style":664},[2431],{"type":400,"value":2432}," namespace ",{"type":394,"tag":430,"props":2434,"children":2435},{"style":1693},[2436],{"type":400,"value":2437},"from",{"type":394,"tag":430,"props":2439,"children":2440},{"style":443},[2441],{"type":400,"value":446},{"type":394,"tag":430,"props":2443,"children":2444},{"style":449},[2445],{"type":400,"value":2398},{"type":394,"tag":430,"props":2447,"children":2448},{"style":443},[2449],{"type":400,"value":1366},{"type":394,"tag":408,"props":2451,"children":2452},{},[2453],{"type":400,"value":2454},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":394,"tag":408,"props":2456,"children":2457},{},[2458],{"type":400,"value":2459},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":394,"tag":408,"props":2461,"children":2462},{},[2463],{"type":400,"value":2464},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":394,"tag":402,"props":2466,"children":2468},{"id":2467},"严格模式",[2469],{"type":400,"value":2467},{"type":394,"tag":408,"props":2471,"children":2472},{},[2473],{"type":400,"value":2474},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":394,"tag":408,"props":2476,"children":2477},{},[2478],{"type":400,"value":2479},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":394,"tag":408,"props":2481,"children":2482},{},[2483],{"type":400,"value":2484},"总的来说，严格模式一共有七条限制：",{"type":394,"tag":508,"props":2486,"children":2487},{},[2488,2493,2498,2503,2508,2513,2518,2523,2528,2533],{"type":394,"tag":512,"props":2489,"children":2490},{},[2491],{"type":400,"value":2492},"对象字面量中不能有相同的属性声明",{"type":394,"tag":512,"props":2494,"children":2495},{},[2496],{"type":400,"value":2497},"函数实参列表中不能有同名参数",{"type":394,"tag":512,"props":2499,"children":2500},{},[2501],{"type":400,"value":2502},"不能声明、重写或删除 eval、arguments 标识符",{"type":394,"tag":512,"props":2504,"children":2505},{},[2506],{"type":400,"value":2507},"不允许使用八进制数字字面量",{"type":394,"tag":512,"props":2509,"children":2510},{},[2511],{"type":400,"value":2512},"不能删除显式声明的标识符、名字或具名函数",{"type":394,"tag":512,"props":2514,"children":2515},{},[2516],{"type":400,"value":2517},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":394,"tag":512,"props":2519,"children":2520},{},[2521],{"type":400,"value":2522},"禁用 with 语句",{"type":394,"tag":512,"props":2524,"children":2525},{},[2526],{"type":400,"value":2527},"禁用隐式声明",{"type":394,"tag":512,"props":2529,"children":2530},{},[2531],{"type":400,"value":2532},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":394,"tag":512,"props":2534,"children":2535},{},[2536],{"type":400,"value":2537},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":394,"tag":408,"props":2539,"children":2540},{},[2541],{"type":400,"value":2542},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":394,"tag":508,"props":2544,"children":2545},{},[2546,2551],{"type":394,"tag":512,"props":2547,"children":2548},{},[2549],{"type":400,"value":2550},"间接调用 eval 函数",{"type":394,"tag":512,"props":2552,"children":2553},{},[2554],{"type":400,"value":2555},"使用 new Function 构造的新函数",{"type":394,"tag":402,"props":2557,"children":2559},{"id":2558},"运算符的二义性",[2560],{"type":400,"value":2558},{"type":394,"tag":408,"props":2562,"children":2563},{},[2564],{"type":400,"value":2565},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":394,"tag":408,"props":2567,"children":2568},{},[2569],{"type":400,"value":2570},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":394,"tag":408,"props":2572,"children":2573},{},[2574],{"type":400,"value":2575},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":394,"tag":408,"props":2577,"children":2578},{},[2579],{"type":400,"value":2580},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":394,"tag":395,"props":2582,"children":2584},{"id":2583},"面向对象语言特性",[2585],{"type":400,"value":2583},{"type":394,"tag":402,"props":2587,"children":2589},{"id":2588},"语法综述-1",[2590],{"type":400,"value":404},{"type":394,"tag":408,"props":2592,"children":2593},{},[2594],{"type":400,"value":2595},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":394,"tag":408,"props":2597,"children":2598},{},[2599],{"type":400,"value":2600},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":394,"tag":408,"props":2602,"children":2603},{},[2604],{"type":400,"value":2605},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":394,"tag":408,"props":2607,"children":2608},{},[2609],{"type":400,"value":2610},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":394,"tag":419,"props":2612,"children":2614},{"className":652,"code":2613,"language":654,"meta":388,"style":388},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2615],{"type":394,"tag":426,"props":2616,"children":2617},{"__ignoreMap":388},[2618,2639,2666,2695,2703,2720,2733,2740,2748,2756,2780],{"type":394,"tag":430,"props":2619,"children":2620},{"class":432,"line":433},[2621,2626,2631,2635],{"type":394,"tag":430,"props":2622,"children":2623},{"style":987},[2624],{"type":400,"value":2625},"var",{"type":394,"tag":430,"props":2627,"children":2628},{"style":664},[2629],{"type":400,"value":2630}," obj",{"type":394,"tag":430,"props":2632,"children":2633},{"style":460},[2634],{"type":400,"value":1864},{"type":394,"tag":430,"props":2636,"children":2637},{"style":670},[2638],{"type":400,"value":1739},{"type":394,"tag":430,"props":2640,"children":2641},{"class":432,"line":723},[2642,2647,2652,2656,2661],{"type":394,"tag":430,"props":2643,"children":2644},{"style":987},[2645],{"type":400,"value":2646},"  set",{"type":394,"tag":430,"props":2648,"children":2650},{"style":2649},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2651],{"type":400,"value":2015},{"type":394,"tag":430,"props":2653,"children":2654},{"style":670},[2655],{"type":400,"value":684},{"type":394,"tag":430,"props":2657,"children":2658},{"style":1616},[2659],{"type":400,"value":2660},"x",{"type":394,"tag":430,"props":2662,"children":2663},{"style":670},[2664],{"type":400,"value":2665},"){\n",{"type":394,"tag":430,"props":2667,"children":2668},{"class":432,"line":1369},[2669,2674,2678,2682,2687,2691],{"type":394,"tag":430,"props":2670,"children":2671},{"style":664},[2672],{"type":400,"value":2673},"    c",{"type":394,"tag":430,"props":2675,"children":2676},{"style":460},[2677],{"type":400,"value":1864},{"type":394,"tag":430,"props":2679,"children":2680},{"style":443},[2681],{"type":400,"value":457},{"type":394,"tag":430,"props":2683,"children":2684},{"style":449},[2685],{"type":400,"value":2686},"other",{"type":394,"tag":430,"props":2688,"children":2689},{"style":443},[2690],{"type":400,"value":457},{"type":394,"tag":430,"props":2692,"children":2693},{"style":670},[2694],{"type":400,"value":1804},{"type":394,"tag":430,"props":2696,"children":2697},{"class":432,"line":1410},[2698],{"type":394,"tag":430,"props":2699,"children":2700},{"style":670},[2701],{"type":400,"value":2702},"  },\n",{"type":394,"tag":430,"props":2704,"children":2705},{"class":432,"line":1419},[2706,2711,2715],{"type":394,"tag":430,"props":2707,"children":2708},{"style":987},[2709],{"type":400,"value":2710},"  get",{"type":394,"tag":430,"props":2712,"children":2713},{"style":2649},[2714],{"type":400,"value":2015},{"type":394,"tag":430,"props":2716,"children":2717},{"style":670},[2718],{"type":400,"value":2719},"(){\n",{"type":394,"tag":430,"props":2721,"children":2722},{"class":432,"line":1454},[2723,2728],{"type":394,"tag":430,"props":2724,"children":2725},{"style":1693},[2726],{"type":400,"value":2727},"    return",{"type":394,"tag":430,"props":2729,"children":2730},{"style":664},[2731],{"type":400,"value":2732}," c\n",{"type":394,"tag":430,"props":2734,"children":2735},{"class":432,"line":1491},[2736],{"type":394,"tag":430,"props":2737,"children":2738},{"style":670},[2739],{"type":400,"value":2702},{"type":394,"tag":430,"props":2741,"children":2742},{"class":432,"line":1499},[2743],{"type":394,"tag":430,"props":2744,"children":2745},{"style":717},[2746],{"type":400,"value":2747},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":394,"tag":430,"props":2749,"children":2750},{"class":432,"line":1526},[2751],{"type":394,"tag":430,"props":2752,"children":2753},{"style":717},[2754],{"type":400,"value":2755},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":394,"tag":430,"props":2757,"children":2758},{"class":432,"line":2102},[2759,2764,2768,2772,2776],{"type":394,"tag":430,"props":2760,"children":2761},{"style":1387},[2762],{"type":400,"value":2763},"  test",{"type":394,"tag":430,"props":2765,"children":2766},{"style":670},[2767],{"type":400,"value":1849},{"type":394,"tag":430,"props":2769,"children":2770},{"style":443},[2771],{"type":400,"value":446},{"type":394,"tag":430,"props":2773,"children":2774},{"style":449},[2775],{"type":400,"value":1715},{"type":394,"tag":430,"props":2777,"children":2778},{"style":443},[2779],{"type":400,"value":1366},{"type":394,"tag":430,"props":2781,"children":2782},{"class":432,"line":2162},[2783],{"type":394,"tag":430,"props":2784,"children":2785},{"style":670},[2786],{"type":400,"value":1416},{"type":394,"tag":408,"props":2788,"children":2789},{},[2790],{"type":400,"value":2791},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":394,"tag":419,"props":2793,"children":2795},{"className":652,"code":2794,"language":654,"meta":388,"style":388},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2796],{"type":394,"tag":426,"props":2797,"children":2798},{"__ignoreMap":388},[2799,2807,2851],{"type":394,"tag":430,"props":2800,"children":2801},{"class":432,"line":433},[2802],{"type":394,"tag":430,"props":2803,"children":2804},{"style":717},[2805],{"type":400,"value":2806},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":394,"tag":430,"props":2808,"children":2809},{"class":432,"line":723},[2810,2815,2819,2824,2828,2833,2838,2842,2847],{"type":394,"tag":430,"props":2811,"children":2813},{"style":2812},"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[2814],{"type":400,"value":1426},{"type":394,"tag":430,"props":2816,"children":2817},{"style":670},[2818],{"type":400,"value":673},{"type":394,"tag":430,"props":2820,"children":2821},{"style":1423},[2822],{"type":400,"value":2823},"prototype",{"type":394,"tag":430,"props":2825,"children":2826},{"style":460},[2827],{"type":400,"value":1353},{"type":394,"tag":430,"props":2829,"children":2830},{"style":460},[2831],{"type":400,"value":2832}," new",{"type":394,"tag":430,"props":2834,"children":2835},{"style":676},[2836],{"type":400,"value":2837}," B",{"type":394,"tag":430,"props":2839,"children":2840},{"style":664},[2841],{"type":400,"value":684},{"type":394,"tag":430,"props":2843,"children":2844},{"style":717},[2845],{"type":400,"value":2846},"/* 传入参数 */",{"type":394,"tag":430,"props":2848,"children":2849},{"style":664},[2850],{"type":400,"value":1407},{"type":394,"tag":430,"props":2852,"children":2853},{"class":432,"line":1369},[2854,2858,2862,2866,2870,2875,2879],{"type":394,"tag":430,"props":2855,"children":2856},{"style":2812},[2857],{"type":400,"value":1426},{"type":394,"tag":430,"props":2859,"children":2860},{"style":670},[2861],{"type":400,"value":673},{"type":394,"tag":430,"props":2863,"children":2864},{"style":1423},[2865],{"type":400,"value":2823},{"type":394,"tag":430,"props":2867,"children":2868},{"style":670},[2869],{"type":400,"value":673},{"type":394,"tag":430,"props":2871,"children":2872},{"style":1423},[2873],{"type":400,"value":2874},"constructor",{"type":394,"tag":430,"props":2876,"children":2877},{"style":460},[2878],{"type":400,"value":1353},{"type":394,"tag":430,"props":2880,"children":2881},{"style":1423},[2882],{"type":400,"value":2883}," A\n",{"type":394,"tag":408,"props":2885,"children":2886},{},[2887],{"type":400,"value":2888},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":394,"tag":408,"props":2890,"children":2891},{},[2892],{"type":400,"value":2893},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":394,"tag":408,"props":2895,"children":2896},{},[2897],{"type":400,"value":2898},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":394,"tag":408,"props":2900,"children":2901},{},[2902],{"type":400,"value":2903},"总结一下遍历对象成员的方法：",{"type":400,"value":2905},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":394,"tag":1004,"props":2907,"children":2908},{},[2909,2933],{"type":394,"tag":1008,"props":2910,"children":2911},{},[2912],{"type":394,"tag":1012,"props":2913,"children":2914},{},[2915,2920,2925,2929],{"type":394,"tag":1016,"props":2916,"children":2917},{},[2918],{"type":400,"value":2919},"键名",{"type":394,"tag":1016,"props":2921,"children":2922},{},[2923],{"type":400,"value":2924},"显隐式",{"type":394,"tag":1016,"props":2926,"children":2927},{},[2928],{"type":400,"value":397},{"type":394,"tag":1016,"props":2930,"children":2931},{},[2932],{"type":400,"value":1025},{"type":394,"tag":1027,"props":2934,"children":2935},{},[2936,2959,2979,3001],{"type":394,"tag":1012,"props":2937,"children":2938},{},[2939,2944,2949,2954],{"type":394,"tag":1034,"props":2940,"children":2941},{},[2942],{"type":400,"value":2943},"一般键名",{"type":394,"tag":1034,"props":2945,"children":2946},{},[2947],{"type":400,"value":2948},"显式",{"type":394,"tag":1034,"props":2950,"children":2951},{},[2952],{"type":400,"value":2953},"for...in",{"type":394,"tag":1034,"props":2955,"children":2956},{},[2957],{"type":400,"value":2958},"可列举的成员名（包含原型链）",{"type":394,"tag":1012,"props":2960,"children":2961},{},[2962,2966,2970,2975],{"type":394,"tag":1034,"props":2963,"children":2964},{},[2965],{"type":400,"value":2943},{"type":394,"tag":1034,"props":2967,"children":2968},{},[2969],{"type":400,"value":2948},{"type":394,"tag":1034,"props":2971,"children":2972},{},[2973],{"type":400,"value":2974},"Object.prototype.map、Object.prototype.entries、...",{"type":394,"tag":1034,"props":2976,"children":2977},{},[2978],{"type":400,"value":1277},{"type":394,"tag":1012,"props":2980,"children":2981},{},[2982,2986,2991,2996],{"type":394,"tag":1034,"props":2983,"children":2984},{},[2985],{"type":400,"value":2943},{"type":394,"tag":1034,"props":2987,"children":2988},{},[2989],{"type":400,"value":2990},"显式 & 隐式",{"type":394,"tag":1034,"props":2992,"children":2993},{},[2994],{"type":400,"value":2995},"Object.getOwnPropertyNames()",{"type":394,"tag":1034,"props":2997,"children":2998},{},[2999],{"type":400,"value":3000},"所有非符号的自由属性名",{"type":394,"tag":1012,"props":3002,"children":3003},{},[3004,3009,3013,3018],{"type":394,"tag":1034,"props":3005,"children":3006},{},[3007],{"type":400,"value":3008},"符号键名键名",{"type":394,"tag":1034,"props":3010,"children":3011},{},[3012],{"type":400,"value":2990},{"type":394,"tag":1034,"props":3014,"children":3015},{},[3016],{"type":400,"value":3017},"Object.getOwnPropertySymbols()",{"type":394,"tag":1034,"props":3019,"children":3020},{},[3021],{"type":400,"value":3022},"所有符号键名的自有属性名",{"type":394,"tag":408,"props":3024,"children":3025},{},[3026,3028,3033,3035,3039],{"type":400,"value":3027},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":394,"tag":430,"props":3029,"children":3030},{},[3031],{"type":400,"value":3032},"prop",{"type":400,"value":3034}," 更好的替代方案是 typeof(obj",{"type":394,"tag":430,"props":3036,"children":3037},{},[3038],{"type":400,"value":3032},{"type":400,"value":3040},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":394,"tag":408,"props":3042,"children":3043},{},[3044],{"type":400,"value":3045},"delete 运算符有些特殊的地方：",{"type":394,"tag":508,"props":3047,"children":3048},{},[3049,3054],{"type":394,"tag":512,"props":3050,"children":3051},{},[3052],{"type":400,"value":3053},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":394,"tag":512,"props":3055,"children":3056},{},[3057],{"type":400,"value":3058},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":394,"tag":402,"props":3060,"children":3062},{"id":3061},"原型继承",[3063],{"type":400,"value":3061},{"type":394,"tag":408,"props":3065,"children":3066},{},[3067],{"type":400,"value":3068},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":394,"tag":408,"props":3070,"children":3071},{},[3072],{"type":400,"value":3073},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":394,"tag":508,"props":3075,"children":3076},{},[3077,3082],{"type":394,"tag":512,"props":3078,"children":3079},{},[3080],{"type":400,"value":3081},"读对象的属性时优先读取对象的自有属性表",{"type":394,"tag":512,"props":3083,"children":3084},{},[3085],{"type":400,"value":3086},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":394,"tag":408,"props":3088,"children":3089},{},[3090],{"type":400,"value":3091},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":394,"tag":408,"props":3093,"children":3094},{},[3095],{"type":400,"value":3096},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":394,"tag":419,"props":3098,"children":3100},{"className":652,"code":3099,"language":654,"meta":388,"style":388},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3101],{"type":394,"tag":426,"props":3102,"children":3103},{"__ignoreMap":388},[3104,3124,3163,3204],{"type":394,"tag":430,"props":3105,"children":3106},{"class":432,"line":433},[3107,3111,3115,3119],{"type":394,"tag":430,"props":3108,"children":3109},{"style":987},[3110],{"type":400,"value":1315},{"type":394,"tag":430,"props":3112,"children":3113},{"style":676},[3114],{"type":400,"value":2015},{"type":394,"tag":430,"props":3116,"children":3117},{"style":670},[3118],{"type":400,"value":1325},{"type":394,"tag":430,"props":3120,"children":3121},{"style":670},[3122],{"type":400,"value":3123}," {}\n",{"type":394,"tag":430,"props":3125,"children":3126},{"class":432,"line":723},[3127,3131,3136,3140,3144,3149,3153,3158],{"type":394,"tag":430,"props":3128,"children":3129},{"style":987},[3130],{"type":400,"value":2625},{"type":394,"tag":430,"props":3132,"children":3133},{"style":664},[3134],{"type":400,"value":3135}," a ",{"type":394,"tag":430,"props":3137,"children":3138},{"style":460},[3139],{"type":400,"value":1864},{"type":394,"tag":430,"props":3141,"children":3142},{"style":670},[3143],{"type":400,"value":1701},{"type":394,"tag":430,"props":3145,"children":3146},{"style":2649},[3147],{"type":400,"value":3148}," testb",{"type":394,"tag":430,"props":3150,"children":3151},{"style":670},[3152],{"type":400,"value":1325},{"type":394,"tag":430,"props":3154,"children":3155},{"style":670},[3156],{"type":400,"value":3157}," {}",{"type":394,"tag":430,"props":3159,"children":3160},{"style":670},[3161],{"type":400,"value":3162}," }\n",{"type":394,"tag":430,"props":3164,"children":3165},{"class":432,"line":1369},[3166,3170,3174,3179,3183,3187,3191,3195,3199],{"type":394,"tag":430,"props":3167,"children":3168},{"style":664},[3169],{"type":400,"value":491},{"type":394,"tag":430,"props":3171,"children":3172},{"style":670},[3173],{"type":400,"value":673},{"type":394,"tag":430,"props":3175,"children":3176},{"style":664},[3177],{"type":400,"value":3178},"testb",{"type":394,"tag":430,"props":3180,"children":3181},{"style":670},[3182],{"type":400,"value":673},{"type":394,"tag":430,"props":3184,"children":3185},{"style":1423},[3186],{"type":400,"value":2823},{"type":394,"tag":430,"props":3188,"children":3189},{"style":460},[3190],{"type":400,"value":1353},{"type":394,"tag":430,"props":3192,"children":3193},{"style":2812},[3194],{"type":400,"value":2015},{"type":394,"tag":430,"props":3196,"children":3197},{"style":670},[3198],{"type":400,"value":673},{"type":394,"tag":430,"props":3200,"children":3201},{"style":1423},[3202],{"type":400,"value":3203},"prototype\n",{"type":394,"tag":430,"props":3205,"children":3206},{"class":432,"line":1410},[3207,3211,3216,3220,3224,3228],{"type":394,"tag":430,"props":3208,"children":3209},{"style":460},[3210],{"type":400,"value":1505},{"type":394,"tag":430,"props":3212,"children":3213},{"style":664},[3214],{"type":400,"value":3215}," a",{"type":394,"tag":430,"props":3217,"children":3218},{"style":670},[3219],{"type":400,"value":673},{"type":394,"tag":430,"props":3221,"children":3222},{"style":676},[3223],{"type":400,"value":3178},{"type":394,"tag":430,"props":3225,"children":3226},{"style":664},[3227],{"type":400,"value":818},{"type":394,"tag":430,"props":3229,"children":3230},{"style":717},[3231],{"type":400,"value":3232},"// TypeError\n",{"type":394,"tag":408,"props":3234,"children":3235},{},[3236,3238,3246],{"type":400,"value":3237},"在",{"type":394,"tag":491,"props":3239,"children":3243},{"href":3240,"rel":3241},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3242],"nofollow",[3244],{"type":400,"value":3245},"规范",{"type":400,"value":3247},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":394,"tag":408,"props":3249,"children":3250},{},[3251],{"type":400,"value":3252},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":394,"tag":419,"props":3254,"children":3256},{"className":652,"code":3255,"language":654,"meta":388,"style":388},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3257],{"type":394,"tag":426,"props":3258,"children":3259},{"__ignoreMap":388},[3260,3280,3300],{"type":394,"tag":430,"props":3261,"children":3262},{"class":432,"line":433},[3263,3267,3272,3276],{"type":394,"tag":430,"props":3264,"children":3265},{"style":987},[3266],{"type":400,"value":1315},{"type":394,"tag":430,"props":3268,"children":3269},{"style":676},[3270],{"type":400,"value":3271}," Parent",{"type":394,"tag":430,"props":3273,"children":3274},{"style":670},[3275],{"type":400,"value":1325},{"type":394,"tag":430,"props":3277,"children":3278},{"style":670},[3279],{"type":400,"value":3123},{"type":394,"tag":430,"props":3281,"children":3282},{"class":432,"line":723},[3283,3287,3292,3296],{"type":394,"tag":430,"props":3284,"children":3285},{"style":987},[3286],{"type":400,"value":1315},{"type":394,"tag":430,"props":3288,"children":3289},{"style":676},[3290],{"type":400,"value":3291}," Child",{"type":394,"tag":430,"props":3293,"children":3294},{"style":670},[3295],{"type":400,"value":1325},{"type":394,"tag":430,"props":3297,"children":3298},{"style":670},[3299],{"type":400,"value":3123},{"type":394,"tag":430,"props":3301,"children":3302},{"class":432,"line":1369},[3303,3308,3312,3316,3320,3324,3328],{"type":394,"tag":430,"props":3304,"children":3305},{"style":2812},[3306],{"type":400,"value":3307},"Child",{"type":394,"tag":430,"props":3309,"children":3310},{"style":670},[3311],{"type":400,"value":673},{"type":394,"tag":430,"props":3313,"children":3314},{"style":1423},[3315],{"type":400,"value":2823},{"type":394,"tag":430,"props":3317,"children":3318},{"style":460},[3319],{"type":400,"value":1353},{"type":394,"tag":430,"props":3321,"children":3322},{"style":460},[3323],{"type":400,"value":2832},{"type":394,"tag":430,"props":3325,"children":3326},{"style":676},[3327],{"type":400,"value":3271},{"type":394,"tag":430,"props":3329,"children":3330},{"style":664},[3331],{"type":400,"value":3332},"()\n",{"type":394,"tag":408,"props":3334,"children":3335},{},[3336],{"type":400,"value":3337},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":394,"tag":419,"props":3339,"children":3341},{"className":652,"code":3340,"language":654,"meta":388,"style":388},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3342],{"type":394,"tag":426,"props":3343,"children":3344},{"__ignoreMap":388},[3345,3353],{"type":394,"tag":430,"props":3346,"children":3347},{"class":432,"line":433},[3348],{"type":394,"tag":430,"props":3349,"children":3350},{"style":717},[3351],{"type":400,"value":3352},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":394,"tag":430,"props":3354,"children":3355},{"class":432,"line":723},[3356,3360,3364,3368,3372,3376,3380],{"type":394,"tag":430,"props":3357,"children":3358},{"style":2812},[3359],{"type":400,"value":3307},{"type":394,"tag":430,"props":3361,"children":3362},{"style":670},[3363],{"type":400,"value":673},{"type":394,"tag":430,"props":3365,"children":3366},{"style":1423},[3367],{"type":400,"value":2823},{"type":394,"tag":430,"props":3369,"children":3370},{"style":670},[3371],{"type":400,"value":673},{"type":394,"tag":430,"props":3373,"children":3374},{"style":1423},[3375],{"type":400,"value":2874},{"type":394,"tag":430,"props":3377,"children":3378},{"style":460},[3379],{"type":400,"value":1353},{"type":394,"tag":430,"props":3381,"children":3382},{"style":664},[3383],{"type":400,"value":3384}," Child\n",{"type":394,"tag":419,"props":3386,"children":3388},{"className":652,"code":3387,"language":654,"meta":388,"style":388},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3389],{"type":394,"tag":426,"props":3390,"children":3391},{"__ignoreMap":388},[3392,3400,3419,3438,3461,3468],{"type":394,"tag":430,"props":3393,"children":3394},{"class":432,"line":433},[3395],{"type":394,"tag":430,"props":3396,"children":3397},{"style":717},[3398],{"type":400,"value":3399},"// 这种方法叫做圣杯模式\n",{"type":394,"tag":430,"props":3401,"children":3402},{"class":432,"line":723},[3403,3407,3411,3415],{"type":394,"tag":430,"props":3404,"children":3405},{"style":987},[3406],{"type":400,"value":1315},{"type":394,"tag":430,"props":3408,"children":3409},{"style":676},[3410],{"type":400,"value":3271},{"type":394,"tag":430,"props":3412,"children":3413},{"style":670},[3414],{"type":400,"value":1325},{"type":394,"tag":430,"props":3416,"children":3417},{"style":670},[3418],{"type":400,"value":3123},{"type":394,"tag":430,"props":3420,"children":3421},{"class":432,"line":1369},[3422,3426,3430,3434],{"type":394,"tag":430,"props":3423,"children":3424},{"style":987},[3425],{"type":400,"value":1315},{"type":394,"tag":430,"props":3427,"children":3428},{"style":676},[3429],{"type":400,"value":3291},{"type":394,"tag":430,"props":3431,"children":3432},{"style":670},[3433],{"type":400,"value":1325},{"type":394,"tag":430,"props":3435,"children":3436},{"style":670},[3437],{"type":400,"value":1330},{"type":394,"tag":430,"props":3439,"children":3440},{"class":432,"line":1410},[3441,3445,3449,3453,3457],{"type":394,"tag":430,"props":3442,"children":3443},{"style":1336},[3444],{"type":400,"value":1339},{"type":394,"tag":430,"props":3446,"children":3447},{"style":670},[3448],{"type":400,"value":673},{"type":394,"tag":430,"props":3450,"children":3451},{"style":1423},[3452],{"type":400,"value":2874},{"type":394,"tag":430,"props":3454,"children":3455},{"style":460},[3456],{"type":400,"value":1353},{"type":394,"tag":430,"props":3458,"children":3459},{"style":664},[3460],{"type":400,"value":3384},{"type":394,"tag":430,"props":3462,"children":3463},{"class":432,"line":1419},[3464],{"type":394,"tag":430,"props":3465,"children":3466},{"style":670},[3467],{"type":400,"value":1416},{"type":394,"tag":430,"props":3469,"children":3470},{"class":432,"line":1454},[3471,3475,3479,3483,3487,3491,3495],{"type":394,"tag":430,"props":3472,"children":3473},{"style":2812},[3474],{"type":400,"value":3307},{"type":394,"tag":430,"props":3476,"children":3477},{"style":670},[3478],{"type":400,"value":673},{"type":394,"tag":430,"props":3480,"children":3481},{"style":1423},[3482],{"type":400,"value":2823},{"type":394,"tag":430,"props":3484,"children":3485},{"style":460},[3486],{"type":400,"value":1353},{"type":394,"tag":430,"props":3488,"children":3489},{"style":460},[3490],{"type":400,"value":2832},{"type":394,"tag":430,"props":3492,"children":3493},{"style":676},[3494],{"type":400,"value":3271},{"type":394,"tag":430,"props":3496,"children":3497},{"style":664},[3498],{"type":400,"value":3332},{"type":394,"tag":408,"props":3500,"children":3501},{},[3502],{"type":400,"value":3503},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":394,"tag":402,"props":3505,"children":3507},{"id":3506},"类继承",[3508],{"type":400,"value":3506},{"type":394,"tag":408,"props":3510,"children":3511},{},[3512],{"type":400,"value":3513},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":394,"tag":419,"props":3515,"children":3517},{"className":652,"code":3516,"language":654,"meta":388,"style":388},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3518],{"type":394,"tag":426,"props":3519,"children":3520},{"__ignoreMap":388},[3521,3529,3546,3572,3580,3599,3618,3648],{"type":394,"tag":430,"props":3522,"children":3523},{"class":432,"line":433},[3524],{"type":394,"tag":430,"props":3525,"children":3526},{"style":717},[3527],{"type":400,"value":3528},"/* 类声明 */\n",{"type":394,"tag":430,"props":3530,"children":3531},{"class":432,"line":723},[3532,3537,3542],{"type":394,"tag":430,"props":3533,"children":3534},{"style":987},[3535],{"type":400,"value":3536},"class",{"type":394,"tag":430,"props":3538,"children":3540},{"style":3539},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E;--shiki-light-text-decoration:inherit;--shiki-default-text-decoration:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia-text-decoration:underline",[3541],{"type":400,"value":3271},{"type":394,"tag":430,"props":3543,"children":3544},{"style":670},[3545],{"type":400,"value":3123},{"type":394,"tag":430,"props":3547,"children":3548},{"class":432,"line":1369},[3549,3553,3557,3563,3568],{"type":394,"tag":430,"props":3550,"children":3551},{"style":987},[3552],{"type":400,"value":3536},{"type":394,"tag":430,"props":3554,"children":3555},{"style":3539},[3556],{"type":400,"value":3291},{"type":394,"tag":430,"props":3558,"children":3560},{"style":3559},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3561],{"type":400,"value":3562}," extends",{"type":394,"tag":430,"props":3564,"children":3566},{"style":3565},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic;--shiki-light-text-decoration:inherit;--shiki-default-text-decoration:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia-text-decoration:underline",[3567],{"type":400,"value":3271},{"type":394,"tag":430,"props":3569,"children":3570},{"style":670},[3571],{"type":400,"value":3123},{"type":394,"tag":430,"props":3573,"children":3574},{"class":432,"line":1410},[3575],{"type":394,"tag":430,"props":3576,"children":3577},{"style":717},[3578],{"type":400,"value":3579},"/* 仿制代码 */\n",{"type":394,"tag":430,"props":3581,"children":3582},{"class":432,"line":1419},[3583,3587,3591,3595],{"type":394,"tag":430,"props":3584,"children":3585},{"style":987},[3586],{"type":400,"value":1315},{"type":394,"tag":430,"props":3588,"children":3589},{"style":676},[3590],{"type":400,"value":3271},{"type":394,"tag":430,"props":3592,"children":3593},{"style":670},[3594],{"type":400,"value":1038},{"type":394,"tag":430,"props":3596,"children":3597},{"style":670},[3598],{"type":400,"value":3123},{"type":394,"tag":430,"props":3600,"children":3601},{"class":432,"line":1454},[3602,3606,3610,3614],{"type":394,"tag":430,"props":3603,"children":3604},{"style":987},[3605],{"type":400,"value":1315},{"type":394,"tag":430,"props":3607,"children":3608},{"style":676},[3609],{"type":400,"value":3291},{"type":394,"tag":430,"props":3611,"children":3612},{"style":670},[3613],{"type":400,"value":1038},{"type":394,"tag":430,"props":3615,"children":3616},{"style":670},[3617],{"type":400,"value":3123},{"type":394,"tag":430,"props":3619,"children":3620},{"class":432,"line":1491},[3621,3625,3629,3634,3639,3643],{"type":394,"tag":430,"props":3622,"children":3623},{"style":664},[3624],{"type":400,"value":667},{"type":394,"tag":430,"props":3626,"children":3627},{"style":670},[3628],{"type":400,"value":673},{"type":394,"tag":430,"props":3630,"children":3631},{"style":676},[3632],{"type":400,"value":3633},"setPrototypeOf",{"type":394,"tag":430,"props":3635,"children":3636},{"style":664},[3637],{"type":400,"value":3638},"(Child",{"type":394,"tag":430,"props":3640,"children":3641},{"style":670},[3642],{"type":400,"value":700},{"type":394,"tag":430,"props":3644,"children":3645},{"style":664},[3646],{"type":400,"value":3647}," Parent)\n",{"type":394,"tag":430,"props":3649,"children":3650},{"class":432,"line":1499},[3651,3655,3659,3663,3667,3671,3675,3679,3683,3687,3691,3695],{"type":394,"tag":430,"props":3652,"children":3653},{"style":664},[3654],{"type":400,"value":667},{"type":394,"tag":430,"props":3656,"children":3657},{"style":670},[3658],{"type":400,"value":673},{"type":394,"tag":430,"props":3660,"children":3661},{"style":676},[3662],{"type":400,"value":3633},{"type":394,"tag":430,"props":3664,"children":3665},{"style":664},[3666],{"type":400,"value":684},{"type":394,"tag":430,"props":3668,"children":3669},{"style":2812},[3670],{"type":400,"value":3307},{"type":394,"tag":430,"props":3672,"children":3673},{"style":670},[3674],{"type":400,"value":673},{"type":394,"tag":430,"props":3676,"children":3677},{"style":1423},[3678],{"type":400,"value":2823},{"type":394,"tag":430,"props":3680,"children":3681},{"style":670},[3682],{"type":400,"value":700},{"type":394,"tag":430,"props":3684,"children":3685},{"style":2812},[3686],{"type":400,"value":3271},{"type":394,"tag":430,"props":3688,"children":3689},{"style":670},[3690],{"type":400,"value":673},{"type":394,"tag":430,"props":3692,"children":3693},{"style":1423},[3694],{"type":400,"value":2823},{"type":394,"tag":430,"props":3696,"children":3697},{"style":664},[3698],{"type":400,"value":1407},{"type":394,"tag":408,"props":3700,"children":3701},{},[3702],{"type":400,"value":3703},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":394,"tag":408,"props":3705,"children":3706},{},[3707],{"type":400,"value":3708},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":394,"tag":408,"props":3710,"children":3711},{},[3712],{"type":400,"value":3713},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":394,"tag":419,"props":3715,"children":3717},{"className":652,"code":3716,"language":654,"meta":388,"style":388},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3718],{"type":394,"tag":426,"props":3719,"children":3720},{"__ignoreMap":388},[3721,3762,3793,3829,3858,3870],{"type":394,"tag":430,"props":3722,"children":3723},{"class":432,"line":433},[3724,3729,3733,3737,3741,3746,3750,3754,3758],{"type":394,"tag":430,"props":3725,"children":3726},{"style":2812},[3727],{"type":400,"value":3728},"object",{"type":394,"tag":430,"props":3730,"children":3731},{"style":670},[3732],{"type":400,"value":673},{"type":394,"tag":430,"props":3734,"children":3735},{"style":1423},[3736],{"type":400,"value":2823},{"type":394,"tag":430,"props":3738,"children":3739},{"style":670},[3740],{"type":400,"value":673},{"type":394,"tag":430,"props":3742,"children":3743},{"style":676},[3744],{"type":400,"value":3745},"method",{"type":394,"tag":430,"props":3747,"children":3748},{"style":460},[3749],{"type":400,"value":1353},{"type":394,"tag":430,"props":3751,"children":3752},{"style":987},[3753],{"type":400,"value":1443},{"type":394,"tag":430,"props":3755,"children":3756},{"style":670},[3757],{"type":400,"value":1325},{"type":394,"tag":430,"props":3759,"children":3760},{"style":670},[3761],{"type":400,"value":1330},{"type":394,"tag":430,"props":3763,"children":3764},{"class":432,"line":723},[3765,3770,3775,3779,3784,3788],{"type":394,"tag":430,"props":3766,"children":3767},{"style":987},[3768],{"type":400,"value":3769},"  const",{"type":394,"tag":430,"props":3771,"children":3772},{"style":1423},[3773],{"type":400,"value":3774}," thisClass",{"type":394,"tag":430,"props":3776,"children":3777},{"style":460},[3778],{"type":400,"value":1353},{"type":394,"tag":430,"props":3780,"children":3781},{"style":1336},[3782],{"type":400,"value":3783}," this",{"type":394,"tag":430,"props":3785,"children":3786},{"style":670},[3787],{"type":400,"value":673},{"type":394,"tag":430,"props":3789,"children":3790},{"style":1423},[3791],{"type":400,"value":3792},"constructor\n",{"type":394,"tag":430,"props":3794,"children":3795},{"class":432,"line":1369},[3796,3800,3805,3809,3813,3817,3821,3825],{"type":394,"tag":430,"props":3797,"children":3798},{"style":987},[3799],{"type":400,"value":3769},{"type":394,"tag":430,"props":3801,"children":3802},{"style":1423},[3803],{"type":400,"value":3804}," parentClass",{"type":394,"tag":430,"props":3806,"children":3807},{"style":460},[3808],{"type":400,"value":1353},{"type":394,"tag":430,"props":3810,"children":3811},{"style":2812},[3812],{"type":400,"value":3774},{"type":394,"tag":430,"props":3814,"children":3815},{"style":670},[3816],{"type":400,"value":673},{"type":394,"tag":430,"props":3818,"children":3819},{"style":1423},[3820],{"type":400,"value":2823},{"type":394,"tag":430,"props":3822,"children":3823},{"style":670},[3824],{"type":400,"value":673},{"type":394,"tag":430,"props":3826,"children":3827},{"style":1423},[3828],{"type":400,"value":3792},{"type":394,"tag":430,"props":3830,"children":3831},{"class":432,"line":1410},[3832,3836,3841,3845,3849,3853],{"type":394,"tag":430,"props":3833,"children":3834},{"style":987},[3835],{"type":400,"value":3769},{"type":394,"tag":430,"props":3837,"children":3838},{"style":1423},[3839],{"type":400,"value":3840}," parentMethod",{"type":394,"tag":430,"props":3842,"children":3843},{"style":460},[3844],{"type":400,"value":1353},{"type":394,"tag":430,"props":3846,"children":3847},{"style":664},[3848],{"type":400,"value":3804},{"type":394,"tag":430,"props":3850,"children":3851},{"style":670},[3852],{"type":400,"value":673},{"type":394,"tag":430,"props":3854,"children":3855},{"style":664},[3856],{"type":400,"value":3857},"method\n",{"type":394,"tag":430,"props":3859,"children":3860},{"class":432,"line":1419},[3861,3866],{"type":394,"tag":430,"props":3862,"children":3863},{"style":676},[3864],{"type":400,"value":3865},"  parentMethod",{"type":394,"tag":430,"props":3867,"children":3868},{"style":1387},[3869],{"type":400,"value":3332},{"type":394,"tag":430,"props":3871,"children":3872},{"class":432,"line":1454},[3873],{"type":394,"tag":430,"props":3874,"children":3875},{"style":670},[3876],{"type":400,"value":1416},{"type":394,"tag":408,"props":3878,"children":3879},{},[3880],{"type":400,"value":3881},"super 的指向由几个规则所限制：",{"type":394,"tag":508,"props":3883,"children":3884},{},[3885,3890,3895,3900,3905],{"type":394,"tag":512,"props":3886,"children":3887},{},[3888],{"type":400,"value":3889},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":394,"tag":512,"props":3891,"children":3892},{},[3893],{"type":400,"value":3894},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":394,"tag":512,"props":3896,"children":3897},{},[3898],{"type":400,"value":3899},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":394,"tag":512,"props":3901,"children":3902},{},[3903],{"type":400,"value":3904},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":394,"tag":512,"props":3906,"children":3907},{},[3908],{"type":400,"value":3909},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":394,"tag":408,"props":3911,"children":3912},{},[3913],{"type":400,"value":3914},"总结可以得出规律：",{"type":394,"tag":508,"props":3916,"children":3917},{},[3918,3923],{"type":394,"tag":512,"props":3919,"children":3920},{},[3921],{"type":400,"value":3922},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":394,"tag":512,"props":3924,"children":3925},{},[3926],{"type":400,"value":3927},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":394,"tag":408,"props":3929,"children":3930},{},[3931],{"type":400,"value":3932},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":394,"tag":419,"props":3934,"children":3936},{"className":652,"code":3935,"language":654,"meta":388,"style":388},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3937],{"type":394,"tag":426,"props":3938,"children":3939},{"__ignoreMap":388},[3940,3981,4051,4080,4088,4127,4161],{"type":394,"tag":430,"props":3941,"children":3942},{"class":432,"line":433},[3943,3948,3952,3956,3961,3965,3969,3973,3977],{"type":394,"tag":430,"props":3944,"children":3945},{"style":664},[3946],{"type":400,"value":3947},"proto ",{"type":394,"tag":430,"props":3949,"children":3950},{"style":460},[3951],{"type":400,"value":1864},{"type":394,"tag":430,"props":3953,"children":3954},{"style":670},[3955],{"type":400,"value":1701},{"type":394,"tag":430,"props":3957,"children":3958},{"style":1387},[3959],{"type":400,"value":3960},"data",{"type":394,"tag":430,"props":3962,"children":3963},{"style":670},[3964],{"type":400,"value":1849},{"type":394,"tag":430,"props":3966,"children":3967},{"style":443},[3968],{"type":400,"value":446},{"type":394,"tag":430,"props":3970,"children":3971},{"style":449},[3972],{"type":400,"value":1715},{"type":394,"tag":430,"props":3974,"children":3975},{"style":443},[3976],{"type":400,"value":457},{"type":394,"tag":430,"props":3978,"children":3979},{"style":670},[3980],{"type":400,"value":1416},{"type":394,"tag":430,"props":3982,"children":3983},{"class":432,"line":723},[3984,3989,3993,3997,4001,4005,4009,4013,4017,4021,4025,4031,4035,4039,4043,4047],{"type":394,"tag":430,"props":3985,"children":3986},{"style":664},[3987],{"type":400,"value":3988},"obj ",{"type":394,"tag":430,"props":3990,"children":3991},{"style":460},[3992],{"type":400,"value":1864},{"type":394,"tag":430,"props":3994,"children":3995},{"style":670},[3996],{"type":400,"value":1701},{"type":394,"tag":430,"props":3998,"children":3999},{"style":2649},[4000],{"type":400,"value":2015},{"type":394,"tag":430,"props":4002,"children":4003},{"style":670},[4004],{"type":400,"value":1038},{"type":394,"tag":430,"props":4006,"children":4007},{"style":670},[4008],{"type":400,"value":1701},{"type":394,"tag":430,"props":4010,"children":4011},{"style":664},[4012],{"type":400,"value":2032},{"type":394,"tag":430,"props":4014,"children":4015},{"style":670},[4016],{"type":400,"value":673},{"type":394,"tag":430,"props":4018,"children":4019},{"style":676},[4020],{"type":400,"value":1384},{"type":394,"tag":430,"props":4022,"children":4023},{"style":1387},[4024],{"type":400,"value":684},{"type":394,"tag":430,"props":4026,"children":4028},{"style":4027},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4029],{"type":400,"value":4030},"super",{"type":394,"tag":430,"props":4032,"children":4033},{"style":670},[4034],{"type":400,"value":673},{"type":394,"tag":430,"props":4036,"children":4037},{"style":664},[4038],{"type":400,"value":3960},{"type":394,"tag":430,"props":4040,"children":4041},{"style":1387},[4042],{"type":400,"value":714},{"type":394,"tag":430,"props":4044,"children":4045},{"style":670},[4046],{"type":400,"value":1663},{"type":394,"tag":430,"props":4048,"children":4049},{"style":670},[4050],{"type":400,"value":3162},{"type":394,"tag":430,"props":4052,"children":4053},{"class":432,"line":1369},[4054,4058,4062,4066,4071,4075],{"type":394,"tag":430,"props":4055,"children":4056},{"style":664},[4057],{"type":400,"value":667},{"type":394,"tag":430,"props":4059,"children":4060},{"style":670},[4061],{"type":400,"value":673},{"type":394,"tag":430,"props":4063,"children":4064},{"style":676},[4065],{"type":400,"value":3633},{"type":394,"tag":430,"props":4067,"children":4068},{"style":664},[4069],{"type":400,"value":4070},"(obj",{"type":394,"tag":430,"props":4072,"children":4073},{"style":670},[4074],{"type":400,"value":700},{"type":394,"tag":430,"props":4076,"children":4077},{"style":664},[4078],{"type":400,"value":4079}," proto)\n",{"type":394,"tag":430,"props":4081,"children":4082},{"class":432,"line":1410},[4083],{"type":394,"tag":430,"props":4084,"children":4085},{"emptyLinePlaceholder":387},[4086],{"type":400,"value":4087},"\n",{"type":394,"tag":430,"props":4089,"children":4090},{"class":432,"line":1419},[4091,4096,4100,4105,4109,4114,4118,4123],{"type":394,"tag":430,"props":4092,"children":4093},{"style":664},[4094],{"type":400,"value":4095},"obj2 ",{"type":394,"tag":430,"props":4097,"children":4098},{"style":460},[4099],{"type":400,"value":1864},{"type":394,"tag":430,"props":4101,"children":4102},{"style":664},[4103],{"type":400,"value":4104}," Object",{"type":394,"tag":430,"props":4106,"children":4107},{"style":670},[4108],{"type":400,"value":673},{"type":394,"tag":430,"props":4110,"children":4111},{"style":676},[4112],{"type":400,"value":4113},"create",{"type":394,"tag":430,"props":4115,"children":4116},{"style":664},[4117],{"type":400,"value":684},{"type":394,"tag":430,"props":4119,"children":4120},{"style":743},[4121],{"type":400,"value":4122},"null",{"type":394,"tag":430,"props":4124,"children":4125},{"style":664},[4126],{"type":400,"value":1407},{"type":394,"tag":430,"props":4128,"children":4129},{"class":432,"line":1454},[4130,4135,4139,4144,4148,4152,4156],{"type":394,"tag":430,"props":4131,"children":4132},{"style":664},[4133],{"type":400,"value":4134},"obj2",{"type":394,"tag":430,"props":4136,"children":4137},{"style":670},[4138],{"type":400,"value":673},{"type":394,"tag":430,"props":4140,"children":4141},{"style":664},[4142],{"type":400,"value":4143},"test ",{"type":394,"tag":430,"props":4145,"children":4146},{"style":460},[4147],{"type":400,"value":1864},{"type":394,"tag":430,"props":4149,"children":4150},{"style":664},[4151],{"type":400,"value":2630},{"type":394,"tag":430,"props":4153,"children":4154},{"style":670},[4155],{"type":400,"value":673},{"type":394,"tag":430,"props":4157,"children":4158},{"style":664},[4159],{"type":400,"value":4160},"test\n",{"type":394,"tag":430,"props":4162,"children":4163},{"class":432,"line":1491},[4164,4168,4172,4176,4180],{"type":394,"tag":430,"props":4165,"children":4166},{"style":664},[4167],{"type":400,"value":4134},{"type":394,"tag":430,"props":4169,"children":4170},{"style":670},[4171],{"type":400,"value":673},{"type":394,"tag":430,"props":4173,"children":4174},{"style":676},[4175],{"type":400,"value":1715},{"type":394,"tag":430,"props":4177,"children":4178},{"style":664},[4179],{"type":400,"value":818},{"type":394,"tag":430,"props":4181,"children":4182},{"style":717},[4183],{"type":400,"value":4184},"// 'test'\n",{"type":394,"tag":408,"props":4186,"children":4187},{},[4188],{"type":400,"value":4189},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":394,"tag":408,"props":4191,"children":4192},{},[4193],{"type":400,"value":4194},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":394,"tag":408,"props":4196,"children":4197},{},[4198],{"type":400,"value":4199},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":394,"tag":419,"props":4201,"children":4203},{"className":652,"code":4202,"language":654,"meta":388,"style":388},"class StaticClass extends null {\n  static pow () {}\n}\n",[4204],{"type":394,"tag":426,"props":4205,"children":4206},{"__ignoreMap":388},[4207,4232,4253],{"type":394,"tag":430,"props":4208,"children":4209},{"class":432,"line":433},[4210,4214,4219,4223,4228],{"type":394,"tag":430,"props":4211,"children":4212},{"style":987},[4213],{"type":400,"value":3536},{"type":394,"tag":430,"props":4215,"children":4216},{"style":3539},[4217],{"type":400,"value":4218}," StaticClass",{"type":394,"tag":430,"props":4220,"children":4221},{"style":3559},[4222],{"type":400,"value":3562},{"type":394,"tag":430,"props":4224,"children":4225},{"style":743},[4226],{"type":400,"value":4227}," null",{"type":394,"tag":430,"props":4229,"children":4230},{"style":670},[4231],{"type":400,"value":1330},{"type":394,"tag":430,"props":4233,"children":4234},{"class":432,"line":723},[4235,4240,4245,4249],{"type":394,"tag":430,"props":4236,"children":4237},{"style":3559},[4238],{"type":400,"value":4239},"  static",{"type":394,"tag":430,"props":4241,"children":4242},{"style":2649},[4243],{"type":400,"value":4244}," pow",{"type":394,"tag":430,"props":4246,"children":4247},{"style":670},[4248],{"type":400,"value":1325},{"type":394,"tag":430,"props":4250,"children":4251},{"style":670},[4252],{"type":400,"value":3123},{"type":394,"tag":430,"props":4254,"children":4255},{"class":432,"line":1369},[4256],{"type":394,"tag":430,"props":4257,"children":4258},{"style":670},[4259],{"type":400,"value":1416},{"type":394,"tag":408,"props":4261,"children":4262},{},[4263],{"type":400,"value":4264},"P196，这个 new.target.prototype 没看懂。",{"type":394,"tag":402,"props":4266,"children":4268},{"id":4267},"对象系统",[4269],{"type":400,"value":4267},{"type":394,"tag":408,"props":4271,"children":4272},{},[4273],{"type":400,"value":4274},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":394,"tag":408,"props":4276,"children":4277},{},[4278],{"type":400,"value":4279},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":394,"tag":408,"props":4281,"children":4282},{},[4283],{"type":400,"value":4284},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":394,"tag":419,"props":4286,"children":4288},{"className":652,"code":4287,"language":654,"meta":388,"style":388},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4289],{"type":394,"tag":426,"props":4290,"children":4291},{"__ignoreMap":388},[4292,4307,4330,4351],{"type":394,"tag":430,"props":4293,"children":4294},{"class":432,"line":433},[4295,4299,4303],{"type":394,"tag":430,"props":4296,"children":4297},{"style":987},[4298],{"type":400,"value":3536},{"type":394,"tag":430,"props":4300,"children":4301},{"style":3539},[4302],{"type":400,"value":1320},{"type":394,"tag":430,"props":4304,"children":4305},{"style":670},[4306],{"type":400,"value":3123},{"type":394,"tag":430,"props":4308,"children":4309},{"class":432,"line":723},[4310,4314,4318,4322,4326],{"type":394,"tag":430,"props":4311,"children":4312},{"style":987},[4313],{"type":400,"value":3536},{"type":394,"tag":430,"props":4315,"children":4316},{"style":3539},[4317],{"type":400,"value":2837},{"type":394,"tag":430,"props":4319,"children":4320},{"style":3559},[4321],{"type":400,"value":3562},{"type":394,"tag":430,"props":4323,"children":4324},{"style":3565},[4325],{"type":400,"value":1320},{"type":394,"tag":430,"props":4327,"children":4328},{"style":670},[4329],{"type":400,"value":3123},{"type":394,"tag":430,"props":4331,"children":4332},{"class":432,"line":1369},[4333,4338,4343,4347],{"type":394,"tag":430,"props":4334,"children":4335},{"style":1423},[4336],{"type":400,"value":4337},"B",{"type":394,"tag":430,"props":4339,"children":4340},{"style":460},[4341],{"type":400,"value":4342}," instanceof",{"type":394,"tag":430,"props":4344,"children":4345},{"style":3539},[4346],{"type":400,"value":1320},{"type":394,"tag":430,"props":4348,"children":4349},{"style":717},[4350],{"type":400,"value":834},{"type":394,"tag":430,"props":4352,"children":4353},{"class":432,"line":1410},[4354,4358,4362,4367,4371,4375,4379],{"type":394,"tag":430,"props":4355,"children":4356},{"style":1423},[4357],{"type":400,"value":1426},{"type":394,"tag":430,"props":4359,"children":4360},{"style":670},[4361],{"type":400,"value":673},{"type":394,"tag":430,"props":4363,"children":4364},{"style":676},[4365],{"type":400,"value":4366},"isPrototypeOf",{"type":394,"tag":430,"props":4368,"children":4369},{"style":664},[4370],{"type":400,"value":684},{"type":394,"tag":430,"props":4372,"children":4373},{"style":1423},[4374],{"type":400,"value":4337},{"type":394,"tag":430,"props":4376,"children":4377},{"style":664},[4378],{"type":400,"value":714},{"type":394,"tag":430,"props":4380,"children":4381},{"style":717},[4382],{"type":400,"value":764},{"type":394,"tag":408,"props":4384,"children":4385},{},[4386],{"type":400,"value":4387},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":394,"tag":408,"props":4389,"children":4390},{},[4391],{"type":400,"value":4392},"this 实在函数执行时动态传入的，规则有三：",{"type":394,"tag":508,"props":4394,"children":4395},{},[4396,4401,4406],{"type":394,"tag":512,"props":4397,"children":4398},{},[4399],{"type":400,"value":4400},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":394,"tag":512,"props":4402,"children":4403},{},[4404],{"type":400,"value":4405},"根据存取运算符将左操作符作为 this 传入",{"type":394,"tag":512,"props":4407,"children":4408},{},[4409],{"type":400,"value":4410},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":394,"tag":408,"props":4412,"children":4413},{},[4414],{"type":400,"value":4415},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":394,"tag":508,"props":4417,"children":4418},{},[4419,4424],{"type":394,"tag":512,"props":4420,"children":4421},{},[4422],{"type":400,"value":4423},"如果运行在严格模式中，不改变 this 的值，否则",{"type":394,"tag":512,"props":4425,"children":4426},{},[4427],{"type":400,"value":4428},"使用全局对象作为 this 值",{"type":394,"tag":408,"props":4430,"children":4431},{},[4432],{"type":400,"value":4433},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":394,"tag":408,"props":4435,"children":4436},{},[4437],{"type":400,"value":4438},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":394,"tag":508,"props":4440,"children":4441},{},[4442,4447],{"type":394,"tag":512,"props":4443,"children":4444},{},[4445],{"type":400,"value":4446},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":394,"tag":512,"props":4448,"children":4449},{},[4450],{"type":400,"value":4451},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":394,"tag":408,"props":4453,"children":4454},{},[4455],{"type":400,"value":4456},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":394,"tag":408,"props":4458,"children":4459},{},[4460],{"type":400,"value":4461},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":394,"tag":419,"props":4463,"children":4465},{"className":652,"code":4464,"language":654,"meta":388,"style":388},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4466],{"type":394,"tag":426,"props":4467,"children":4468},{"__ignoreMap":388},[4469,4477,4498,4505,4513],{"type":394,"tag":430,"props":4470,"children":4471},{"class":432,"line":433},[4472],{"type":394,"tag":430,"props":4473,"children":4474},{"style":717},[4475],{"type":400,"value":4476},"// 获得所有原生对象、宿主对象等\n",{"type":394,"tag":430,"props":4478,"children":4479},{"class":432,"line":723},[4480,4484,4488,4493],{"type":394,"tag":430,"props":4481,"children":4482},{"style":664},[4483],{"type":400,"value":667},{"type":394,"tag":430,"props":4485,"children":4486},{"style":670},[4487],{"type":400,"value":673},{"type":394,"tag":430,"props":4489,"children":4490},{"style":676},[4491],{"type":400,"value":4492},"getOwnPropertyNames",{"type":394,"tag":430,"props":4494,"children":4495},{"style":664},[4496],{"type":400,"value":4497},"(global)\n",{"type":394,"tag":430,"props":4499,"children":4500},{"class":432,"line":1369},[4501],{"type":394,"tag":430,"props":4502,"children":4503},{"emptyLinePlaceholder":387},[4504],{"type":400,"value":4087},{"type":394,"tag":430,"props":4506,"children":4507},{"class":432,"line":1410},[4508],{"type":394,"tag":430,"props":4509,"children":4510},{"style":717},[4511],{"type":400,"value":4512},"// 验证 undefined 是否存在 global 对象中\n",{"type":394,"tag":430,"props":4514,"children":4515},{"class":432,"line":1419},[4516,4520,4524,4529,4534,4538,4542,4547,4551,4555],{"type":394,"tag":430,"props":4517,"children":4518},{"style":664},[4519],{"type":400,"value":667},{"type":394,"tag":430,"props":4521,"children":4522},{"style":670},[4523],{"type":400,"value":673},{"type":394,"tag":430,"props":4525,"children":4526},{"style":676},[4527],{"type":400,"value":4528},"getOwnPropertyDescriptor",{"type":394,"tag":430,"props":4530,"children":4531},{"style":664},[4532],{"type":400,"value":4533},"(global",{"type":394,"tag":430,"props":4535,"children":4536},{"style":670},[4537],{"type":400,"value":700},{"type":394,"tag":430,"props":4539,"children":4540},{"style":443},[4541],{"type":400,"value":446},{"type":394,"tag":430,"props":4543,"children":4544},{"style":449},[4545],{"type":400,"value":4546},"undefined",{"type":394,"tag":430,"props":4548,"children":4549},{"style":443},[4550],{"type":400,"value":457},{"type":394,"tag":430,"props":4552,"children":4553},{"style":664},[4554],{"type":400,"value":714},{"type":394,"tag":430,"props":4556,"children":4557},{"style":717},[4558],{"type":400,"value":4559},"// {value: undefined /* ... */ }\n",{"type":394,"tag":408,"props":4561,"children":4562},{},[4563],{"type":400,"value":4564},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":394,"tag":408,"props":4566,"children":4567},{},[4568],{"type":400,"value":4569},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":394,"tag":408,"props":4571,"children":4572},{},[4573],{"type":400,"value":4574},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":400,"value":4576},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":394,"tag":1004,"props":4578,"children":4579},{},[4580,4601],{"type":394,"tag":1008,"props":4581,"children":4582},{},[4583],{"type":394,"tag":1012,"props":4584,"children":4585},{},[4586,4591,4596],{"type":394,"tag":1016,"props":4587,"children":4588},{},[4589],{"type":400,"value":4590},"对象",{"type":394,"tag":1016,"props":4592,"children":4593},{},[4594],{"type":400,"value":4595},"特殊效果",{"type":394,"tag":1016,"props":4597,"children":4598},{},[4599],{"type":400,"value":4600},"注",{"type":394,"tag":1027,"props":4602,"children":4603},{},[4604,4622,4639,4655,4671,4687,4705,4721,4737,4753],{"type":394,"tag":1012,"props":4605,"children":4606},{},[4607,4612,4617],{"type":394,"tag":1034,"props":4608,"children":4609},{},[4610],{"type":400,"value":4611},"Number、String、Boolean、Symbol",{"type":394,"tag":1034,"props":4613,"children":4614},{},[4615],{"type":400,"value":4616},"包装类",{"type":394,"tag":1034,"props":4618,"children":4619},{},[4620],{"type":400,"value":4621},"({}).toString()",{"type":394,"tag":1012,"props":4623,"children":4624},{},[4625,4629,4634],{"type":394,"tag":1034,"props":4626,"children":4627},{},[4628],{"type":400,"value":667},{"type":394,"tag":1034,"props":4630,"children":4631},{},[4632],{"type":400,"value":4633},"调用包装类",{"type":394,"tag":1034,"props":4635,"children":4636},{},[4637],{"type":400,"value":4638},"new Object(5) + new Object(3)",{"type":394,"tag":1012,"props":4640,"children":4641},{},[4642,4647,4652],{"type":394,"tag":1034,"props":4643,"children":4644},{},[4645],{"type":400,"value":4646},"Array",{"type":394,"tag":1034,"props":4648,"children":4649},{},[4650],{"type":400,"value":4651},"自动维护 length 属性",{"type":394,"tag":1034,"props":4653,"children":4654},{},[],{"type":394,"tag":1012,"props":4656,"children":4657},{},[4658,4663,4668],{"type":394,"tag":1034,"props":4659,"children":4660},{},[4661],{"type":400,"value":4662},"Date",{"type":394,"tag":1034,"props":4664,"children":4665},{},[4666],{"type":400,"value":4667},"日期对象相关的运算",{"type":394,"tag":1034,"props":4669,"children":4670},{},[],{"type":394,"tag":1012,"props":4672,"children":4673},{},[4674,4679,4684],{"type":394,"tag":1034,"props":4675,"children":4676},{},[4677],{"type":400,"value":4678},"Function",{"type":394,"tag":1034,"props":4680,"children":4681},{},[4682],{"type":400,"value":4683},"创建可执行的函数",{"type":394,"tag":1034,"props":4685,"children":4686},{},[],{"type":394,"tag":1012,"props":4688,"children":4689},{},[4690,4695,4700],{"type":394,"tag":1034,"props":4691,"children":4692},{},[4693],{"type":400,"value":4694},"RegExp",{"type":394,"tag":1034,"props":4696,"children":4697},{},[4698],{"type":400,"value":4699},"可执行",{"type":394,"tag":1034,"props":4701,"children":4702},{},[4703],{"type":400,"value":4704},"仅在某些宿主中",{"type":394,"tag":1012,"props":4706,"children":4707},{},[4708,4713,4718],{"type":394,"tag":1034,"props":4709,"children":4710},{},[4711],{"type":400,"value":4712},"Proxy",{"type":394,"tag":1034,"props":4714,"children":4715},{},[4716],{"type":400,"value":4717},"代理目标对象、回收代理",{"type":394,"tag":1034,"props":4719,"children":4720},{},[],{"type":394,"tag":1012,"props":4722,"children":4723},{},[4724,4729,4734],{"type":394,"tag":1034,"props":4725,"children":4726},{},[4727],{"type":400,"value":4728},"TypedArray、DataView",{"type":394,"tag":1034,"props":4730,"children":4731},{},[4732],{"type":400,"value":4733},"创建及绑定 buffer",{"type":394,"tag":1034,"props":4735,"children":4736},{},[],{"type":394,"tag":1012,"props":4738,"children":4739},{},[4740,4745,4750],{"type":394,"tag":1034,"props":4741,"children":4742},{},[4743],{"type":400,"value":4744},"ArrayBuffer、SharedArray、Buffer",{"type":394,"tag":1034,"props":4746,"children":4747},{},[4748],{"type":400,"value":4749},"初始化 buffer 并维护 byteLength 属性",{"type":394,"tag":1034,"props":4751,"children":4752},{},[],{"type":394,"tag":1012,"props":4754,"children":4755},{},[4756,4761,4766],{"type":394,"tag":1034,"props":4757,"children":4758},{},[4759],{"type":400,"value":4760},"WeakMap、WeakSet",{"type":394,"tag":1034,"props":4762,"children":4763},{},[4764],{"type":400,"value":4765},"不修改引用并自动回收对象",{"type":394,"tag":1034,"props":4767,"children":4768},{},[],{"type":394,"tag":408,"props":4770,"children":4771},{},[4772],{"type":400,"value":4773},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":394,"tag":419,"props":4775,"children":4777},{"className":652,"code":4776,"language":654,"meta":388,"style":388},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4778],{"type":394,"tag":426,"props":4779,"children":4780},{"__ignoreMap":388},[4781,4814,4851,4927,4940,4947,4999,5006],{"type":394,"tag":430,"props":4782,"children":4783},{"class":432,"line":433},[4784,4788,4793,4797,4801,4806,4810],{"type":394,"tag":430,"props":4785,"children":4786},{"style":987},[4787],{"type":400,"value":1315},{"type":394,"tag":430,"props":4789,"children":4790},{"style":676},[4791],{"type":400,"value":4792}," MyDate",{"type":394,"tag":430,"props":4794,"children":4795},{"style":670},[4796],{"type":400,"value":684},{"type":394,"tag":430,"props":4798,"children":4799},{"style":460},[4800],{"type":400,"value":1277},{"type":394,"tag":430,"props":4802,"children":4803},{"style":1616},[4804],{"type":400,"value":4805},"args",{"type":394,"tag":430,"props":4807,"children":4808},{"style":670},[4809],{"type":400,"value":1624},{"type":394,"tag":430,"props":4811,"children":4812},{"style":670},[4813],{"type":400,"value":1330},{"type":394,"tag":430,"props":4815,"children":4816},{"class":432,"line":723},[4817,4821,4826,4830,4835,4839,4843,4847],{"type":394,"tag":430,"props":4818,"children":4819},{"style":987},[4820],{"type":400,"value":3769},{"type":394,"tag":430,"props":4822,"children":4823},{"style":1423},[4824],{"type":400,"value":4825}," Base",{"type":394,"tag":430,"props":4827,"children":4828},{"style":460},[4829],{"type":400,"value":1353},{"type":394,"tag":430,"props":4831,"children":4832},{"style":2812},[4833],{"type":400,"value":4834}," Date",{"type":394,"tag":430,"props":4836,"children":4837},{"style":670},[4838],{"type":400,"value":673},{"type":394,"tag":430,"props":4840,"children":4841},{"style":1423},[4842],{"type":400,"value":2823},{"type":394,"tag":430,"props":4844,"children":4845},{"style":670},[4846],{"type":400,"value":673},{"type":394,"tag":430,"props":4848,"children":4849},{"style":1423},[4850],{"type":400,"value":3792},{"type":394,"tag":430,"props":4852,"children":4853},{"class":432,"line":1369},[4854,4858,4863,4867,4871,4875,4879,4883,4887,4891,4895,4899,4903,4907,4911,4915,4919,4923],{"type":394,"tag":430,"props":4855,"children":4856},{"style":987},[4857],{"type":400,"value":3769},{"type":394,"tag":430,"props":4859,"children":4860},{"style":1423},[4861],{"type":400,"value":4862}," instance",{"type":394,"tag":430,"props":4864,"children":4865},{"style":460},[4866],{"type":400,"value":1353},{"type":394,"tag":430,"props":4868,"children":4869},{"style":664},[4870],{"type":400,"value":4104},{"type":394,"tag":430,"props":4872,"children":4873},{"style":670},[4874],{"type":400,"value":673},{"type":394,"tag":430,"props":4876,"children":4877},{"style":676},[4878],{"type":400,"value":3633},{"type":394,"tag":430,"props":4880,"children":4881},{"style":1387},[4882],{"type":400,"value":684},{"type":394,"tag":430,"props":4884,"children":4885},{"style":460},[4886],{"type":400,"value":1505},{"type":394,"tag":430,"props":4888,"children":4889},{"style":676},[4890],{"type":400,"value":4825},{"type":394,"tag":430,"props":4892,"children":4893},{"style":1387},[4894],{"type":400,"value":684},{"type":394,"tag":430,"props":4896,"children":4897},{"style":460},[4898],{"type":400,"value":1277},{"type":394,"tag":430,"props":4900,"children":4901},{"style":664},[4902],{"type":400,"value":4805},{"type":394,"tag":430,"props":4904,"children":4905},{"style":1387},[4906],{"type":400,"value":1624},{"type":394,"tag":430,"props":4908,"children":4909},{"style":670},[4910],{"type":400,"value":700},{"type":394,"tag":430,"props":4912,"children":4913},{"style":2812},[4914],{"type":400,"value":4792},{"type":394,"tag":430,"props":4916,"children":4917},{"style":670},[4918],{"type":400,"value":673},{"type":394,"tag":430,"props":4920,"children":4921},{"style":1423},[4922],{"type":400,"value":2823},{"type":394,"tag":430,"props":4924,"children":4925},{"style":1387},[4926],{"type":400,"value":1407},{"type":394,"tag":430,"props":4928,"children":4929},{"class":432,"line":1410},[4930,4935],{"type":394,"tag":430,"props":4931,"children":4932},{"style":1693},[4933],{"type":400,"value":4934},"  return",{"type":394,"tag":430,"props":4936,"children":4937},{"style":664},[4938],{"type":400,"value":4939}," instance\n",{"type":394,"tag":430,"props":4941,"children":4942},{"class":432,"line":1419},[4943],{"type":394,"tag":430,"props":4944,"children":4945},{"style":670},[4946],{"type":400,"value":1416},{"type":394,"tag":430,"props":4948,"children":4949},{"class":432,"line":1454},[4950,4954,4958,4962,4966,4971,4975,4979,4983,4987,4991,4995],{"type":394,"tag":430,"props":4951,"children":4952},{"style":664},[4953],{"type":400,"value":667},{"type":394,"tag":430,"props":4955,"children":4956},{"style":670},[4957],{"type":400,"value":673},{"type":394,"tag":430,"props":4959,"children":4960},{"style":676},[4961],{"type":400,"value":3633},{"type":394,"tag":430,"props":4963,"children":4964},{"style":664},[4965],{"type":400,"value":684},{"type":394,"tag":430,"props":4967,"children":4968},{"style":2812},[4969],{"type":400,"value":4970},"MyDate",{"type":394,"tag":430,"props":4972,"children":4973},{"style":670},[4974],{"type":400,"value":673},{"type":394,"tag":430,"props":4976,"children":4977},{"style":1423},[4978],{"type":400,"value":2823},{"type":394,"tag":430,"props":4980,"children":4981},{"style":670},[4982],{"type":400,"value":700},{"type":394,"tag":430,"props":4984,"children":4985},{"style":2812},[4986],{"type":400,"value":4834},{"type":394,"tag":430,"props":4988,"children":4989},{"style":670},[4990],{"type":400,"value":673},{"type":394,"tag":430,"props":4992,"children":4993},{"style":1423},[4994],{"type":400,"value":2823},{"type":394,"tag":430,"props":4996,"children":4997},{"style":664},[4998],{"type":400,"value":1407},{"type":394,"tag":430,"props":5000,"children":5001},{"class":432,"line":1491},[5002],{"type":394,"tag":430,"props":5003,"children":5004},{"emptyLinePlaceholder":387},[5005],{"type":400,"value":4087},{"type":394,"tag":430,"props":5007,"children":5008},{"class":432,"line":1499},[5009,5014,5018,5022,5026,5030,5034,5038],{"type":394,"tag":430,"props":5010,"children":5011},{"style":664},[5012],{"type":400,"value":5013},"console",{"type":394,"tag":430,"props":5015,"children":5016},{"style":670},[5017],{"type":400,"value":673},{"type":394,"tag":430,"props":5019,"children":5020},{"style":676},[5021],{"type":400,"value":1384},{"type":394,"tag":430,"props":5023,"children":5024},{"style":664},[5025],{"type":400,"value":684},{"type":394,"tag":430,"props":5027,"children":5028},{"style":460},[5029],{"type":400,"value":1505},{"type":394,"tag":430,"props":5031,"children":5032},{"style":676},[5033],{"type":400,"value":4792},{"type":394,"tag":430,"props":5035,"children":5036},{"style":664},[5037],{"type":400,"value":802},{"type":394,"tag":430,"props":5039,"children":5040},{"style":717},[5041],{"type":400,"value":5042},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":394,"tag":402,"props":5044,"children":5046},{"id":5045},"可定制的对象属性",[5047],{"type":400,"value":5045},{"type":394,"tag":408,"props":5049,"children":5050},{},[5051],{"type":400,"value":5052},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":394,"tag":508,"props":5054,"children":5055},{},[5056,5061,5066],{"type":394,"tag":512,"props":5057,"children":5058},{},[5059],{"type":400,"value":5060},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":394,"tag":512,"props":5062,"children":5063},{},[5064],{"type":400,"value":5065},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":394,"tag":512,"props":5067,"children":5068},{},[5069],{"type":400,"value":5070},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":394,"tag":408,"props":5072,"children":5073},{},[5074],{"type":400,"value":5075},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":400,"value":5077},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":394,"tag":1004,"props":5079,"children":5080},{},[5081,5107],{"type":394,"tag":1008,"props":5082,"children":5083},{},[5084],{"type":394,"tag":1012,"props":5085,"children":5086},{},[5087,5092,5097,5102],{"type":394,"tag":1016,"props":5088,"children":5089},{},[5090],{"type":400,"value":5091},"Object.xxx 方法",{"type":394,"tag":1016,"props":5093,"children":5094},{},[5095],{"type":400,"value":5096},"方法说明",{"type":394,"tag":1016,"props":5098,"children":5099},{},[5100],{"type":400,"value":5101},"对自有属性表的操作",{"type":394,"tag":1016,"props":5103,"children":5104},{},[5105],{"type":400,"value":5106},"检查方法",{"type":394,"tag":1027,"props":5108,"children":5109},{},[5110,5139,5167],{"type":394,"tag":1012,"props":5111,"children":5112},{},[5113,5118,5123,5134],{"type":394,"tag":1034,"props":5114,"children":5115},{},[5116],{"type":400,"value":5117},"preventExtensions(obj)",{"type":394,"tag":1034,"props":5119,"children":5120},{},[5121],{"type":400,"value":5122},"使实例不能添加新属性，也不可重置原型",{"type":394,"tag":1034,"props":5124,"children":5125},{},[5126,5132],{"type":394,"tag":5127,"props":5128,"children":5129},"del",{},[5130],{"type":400,"value":5131},"add",{"type":400,"value":5133},"、delete、update",{"type":394,"tag":1034,"props":5135,"children":5136},{},[5137],{"type":400,"value":5138},"isExtensible(obj)",{"type":394,"tag":1012,"props":5140,"children":5141},{},[5142,5147,5152,5162],{"type":394,"tag":1034,"props":5143,"children":5144},{},[5145],{"type":400,"value":5146},"seal(obj)",{"type":394,"tag":1034,"props":5148,"children":5149},{},[5150],{"type":400,"value":5151},"使实例不能新增新属性，也不能删除既有属性",{"type":394,"tag":1034,"props":5153,"children":5154},{},[5155,5160],{"type":394,"tag":5127,"props":5156,"children":5157},{},[5158],{"type":400,"value":5159},"add、delete",{"type":400,"value":5161},"、update",{"type":394,"tag":1034,"props":5163,"children":5164},{},[5165],{"type":400,"value":5166},"isSealed(obj)",{"type":394,"tag":1012,"props":5168,"children":5169},{},[5170,5175,5180,5188],{"type":394,"tag":1034,"props":5171,"children":5172},{},[5173],{"type":400,"value":5174},"freeze(obj)",{"type":394,"tag":1034,"props":5176,"children":5177},{},[5178],{"type":400,"value":5179},"使实例所有属性只读，且不能再添加、删除属性",{"type":394,"tag":1034,"props":5181,"children":5182},{},[5183],{"type":394,"tag":5127,"props":5184,"children":5185},{},[5186],{"type":400,"value":5187},"add、delete、update",{"type":394,"tag":1034,"props":5189,"children":5190},{},[5191],{"type":400,"value":5192},"isFrozen(obj)",{"type":394,"tag":408,"props":5194,"children":5195},{},[5196],{"type":400,"value":5197},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":394,"tag":508,"props":5199,"children":5200},{},[5201,5206,5211],{"type":394,"tag":512,"props":5202,"children":5203},{},[5204],{"type":400,"value":5205},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":394,"tag":512,"props":5207,"children":5208},{},[5209],{"type":400,"value":5210},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":394,"tag":512,"props":5212,"children":5213},{},[5214],{"type":400,"value":5215},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":394,"tag":402,"props":5217,"children":5219},{"id":5218},"运行期侵入",[5220],{"type":400,"value":5218},{"type":394,"tag":408,"props":5222,"children":5223},{},[5224],{"type":400,"value":5225},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":394,"tag":408,"props":5227,"children":5228},{},[5229],{"type":400,"value":5230},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":394,"tag":408,"props":5232,"children":5233},{},[5234],{"type":400,"value":5235},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":400,"value":5237},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":394,"tag":1004,"props":5239,"children":5240},{},[5241,5257],{"type":394,"tag":1008,"props":5242,"children":5243},{},[5244],{"type":394,"tag":1012,"props":5245,"children":5246},{},[5247,5252],{"type":394,"tag":1016,"props":5248,"children":5249},{},[5250],{"type":400,"value":5251},"内部方法",{"type":394,"tag":1016,"props":5253,"children":5254},{},[5255],{"type":400,"value":5256},"handler.xxx",{"type":394,"tag":1027,"props":5258,"children":5259},{},[5260,5273,5286,5299,5312,5325,5338,5351,5364,5377,5390,5403,5416],{"type":394,"tag":1012,"props":5261,"children":5262},{},[5263,5268],{"type":394,"tag":1034,"props":5264,"children":5265},{},[5266],{"type":400,"value":5267},"[[GetPrototypeOf]]",{"type":394,"tag":1034,"props":5269,"children":5270},{},[5271],{"type":400,"value":5272},"getPrototypeOf()",{"type":394,"tag":1012,"props":5274,"children":5275},{},[5276,5281],{"type":394,"tag":1034,"props":5277,"children":5278},{},[5279],{"type":400,"value":5280},"[[SetPrototypeOf]]",{"type":394,"tag":1034,"props":5282,"children":5283},{},[5284],{"type":400,"value":5285},"setPrototypeOf()",{"type":394,"tag":1012,"props":5287,"children":5288},{},[5289,5294],{"type":394,"tag":1034,"props":5290,"children":5291},{},[5292],{"type":400,"value":5293},"[[IsExtensible]]",{"type":394,"tag":1034,"props":5295,"children":5296},{},[5297],{"type":400,"value":5298},"isExtensible()",{"type":394,"tag":1012,"props":5300,"children":5301},{},[5302,5307],{"type":394,"tag":1034,"props":5303,"children":5304},{},[5305],{"type":400,"value":5306},"[[PreventExtensions]]",{"type":394,"tag":1034,"props":5308,"children":5309},{},[5310],{"type":400,"value":5311},"preventExtensions()",{"type":394,"tag":1012,"props":5313,"children":5314},{},[5315,5320],{"type":394,"tag":1034,"props":5316,"children":5317},{},[5318],{"type":400,"value":5319},"[[GetOwnProperty]]",{"type":394,"tag":1034,"props":5321,"children":5322},{},[5323],{"type":400,"value":5324},"getOwnPropertyDescriptor()",{"type":394,"tag":1012,"props":5326,"children":5327},{},[5328,5333],{"type":394,"tag":1034,"props":5329,"children":5330},{},[5331],{"type":400,"value":5332},"[[HasProperty]]",{"type":394,"tag":1034,"props":5334,"children":5335},{},[5336],{"type":400,"value":5337},"has()",{"type":394,"tag":1012,"props":5339,"children":5340},{},[5341,5346],{"type":394,"tag":1034,"props":5342,"children":5343},{},[5344],{"type":400,"value":5345},"[[DefineOwnProperty]]",{"type":394,"tag":1034,"props":5347,"children":5348},{},[5349],{"type":400,"value":5350},"defineProperty()",{"type":394,"tag":1012,"props":5352,"children":5353},{},[5354,5359],{"type":394,"tag":1034,"props":5355,"children":5356},{},[5357],{"type":400,"value":5358},"[[Get]]",{"type":394,"tag":1034,"props":5360,"children":5361},{},[5362],{"type":400,"value":5363},"get()",{"type":394,"tag":1012,"props":5365,"children":5366},{},[5367,5372],{"type":394,"tag":1034,"props":5368,"children":5369},{},[5370],{"type":400,"value":5371},"[[Set]]",{"type":394,"tag":1034,"props":5373,"children":5374},{},[5375],{"type":400,"value":5376},"set()",{"type":394,"tag":1012,"props":5378,"children":5379},{},[5380,5385],{"type":394,"tag":1034,"props":5381,"children":5382},{},[5383],{"type":400,"value":5384},"[[Delete]]",{"type":394,"tag":1034,"props":5386,"children":5387},{},[5388],{"type":400,"value":5389},"deleteProperty()",{"type":394,"tag":1012,"props":5391,"children":5392},{},[5393,5398],{"type":394,"tag":1034,"props":5394,"children":5395},{},[5396],{"type":400,"value":5397},"[[OwnPropertyKeys]]",{"type":394,"tag":1034,"props":5399,"children":5400},{},[5401],{"type":400,"value":5402},"ownKeys()",{"type":394,"tag":1012,"props":5404,"children":5405},{},[5406,5411],{"type":394,"tag":1034,"props":5407,"children":5408},{},[5409],{"type":400,"value":5410},"[[Call]]",{"type":394,"tag":1034,"props":5412,"children":5413},{},[5414],{"type":400,"value":5415},"apply()",{"type":394,"tag":1012,"props":5417,"children":5418},{},[5419,5424],{"type":394,"tag":1034,"props":5420,"children":5421},{},[5422],{"type":400,"value":5423},"[[Construct]]",{"type":394,"tag":1034,"props":5425,"children":5426},{},[5427],{"type":400,"value":5428},"construct()",{"type":394,"tag":408,"props":5430,"children":5431},{},[5432],{"type":400,"value":5433},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":394,"tag":508,"props":5435,"children":5436},{},[5437,5442],{"type":394,"tag":512,"props":5438,"children":5439},{},[5440],{"type":400,"value":5441},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":394,"tag":512,"props":5443,"children":5444},{},[5445],{"type":400,"value":5446},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":394,"tag":408,"props":5448,"children":5449},{},[5450],{"type":400,"value":5451},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":394,"tag":419,"props":5453,"children":5455},{"className":652,"code":5454,"language":654,"meta":388,"style":388},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5456],{"type":394,"tag":426,"props":5457,"children":5458},{"__ignoreMap":388},[5459,5497,5546,5587,5665,5709,5774,5781,5815,5855,5894,5914,5931,5969,5976,5983,5994],{"type":394,"tag":430,"props":5460,"children":5461},{"class":432,"line":433},[5462,5466,5471,5475,5480,5484,5489,5493],{"type":394,"tag":430,"props":5463,"children":5464},{"style":987},[5465],{"type":400,"value":1315},{"type":394,"tag":430,"props":5467,"children":5468},{"style":676},[5469],{"type":400,"value":5470}," intrudeOnPrototype",{"type":394,"tag":430,"props":5472,"children":5473},{"style":670},[5474],{"type":400,"value":684},{"type":394,"tag":430,"props":5476,"children":5477},{"style":1616},[5478],{"type":400,"value":5479},"Fn",{"type":394,"tag":430,"props":5481,"children":5482},{"style":670},[5483],{"type":400,"value":700},{"type":394,"tag":430,"props":5485,"children":5486},{"style":1616},[5487],{"type":400,"value":5488}," handler",{"type":394,"tag":430,"props":5490,"children":5491},{"style":670},[5492],{"type":400,"value":1624},{"type":394,"tag":430,"props":5494,"children":5495},{"style":670},[5496],{"type":400,"value":1330},{"type":394,"tag":430,"props":5498,"children":5499},{"class":432,"line":723},[5500,5504,5509,5513,5517,5521,5526,5530,5534,5538,5542],{"type":394,"tag":430,"props":5501,"children":5502},{"style":987},[5503],{"type":400,"value":3769},{"type":394,"tag":430,"props":5505,"children":5506},{"style":1423},[5507],{"type":400,"value":5508}," originPrototype",{"type":394,"tag":430,"props":5510,"children":5511},{"style":460},[5512],{"type":400,"value":1353},{"type":394,"tag":430,"props":5514,"children":5515},{"style":664},[5516],{"type":400,"value":4104},{"type":394,"tag":430,"props":5518,"children":5519},{"style":670},[5520],{"type":400,"value":673},{"type":394,"tag":430,"props":5522,"children":5523},{"style":676},[5524],{"type":400,"value":5525},"getPrototypeOf",{"type":394,"tag":430,"props":5527,"children":5528},{"style":1387},[5529],{"type":400,"value":684},{"type":394,"tag":430,"props":5531,"children":5532},{"style":2812},[5533],{"type":400,"value":5479},{"type":394,"tag":430,"props":5535,"children":5536},{"style":670},[5537],{"type":400,"value":673},{"type":394,"tag":430,"props":5539,"children":5540},{"style":1423},[5541],{"type":400,"value":2823},{"type":394,"tag":430,"props":5543,"children":5544},{"style":1387},[5545],{"type":400,"value":1407},{"type":394,"tag":430,"props":5547,"children":5548},{"class":432,"line":1369},[5549,5553,5558,5562,5566,5570,5574,5578,5583],{"type":394,"tag":430,"props":5550,"children":5551},{"style":987},[5552],{"type":400,"value":3769},{"type":394,"tag":430,"props":5554,"children":5555},{"style":1423},[5556],{"type":400,"value":5557}," target",{"type":394,"tag":430,"props":5559,"children":5560},{"style":460},[5561],{"type":400,"value":1353},{"type":394,"tag":430,"props":5563,"children":5564},{"style":664},[5565],{"type":400,"value":4104},{"type":394,"tag":430,"props":5567,"children":5568},{"style":670},[5569],{"type":400,"value":673},{"type":394,"tag":430,"props":5571,"children":5572},{"style":676},[5573],{"type":400,"value":4113},{"type":394,"tag":430,"props":5575,"children":5576},{"style":1387},[5577],{"type":400,"value":684},{"type":394,"tag":430,"props":5579,"children":5580},{"style":664},[5581],{"type":400,"value":5582},"originPrototype",{"type":394,"tag":430,"props":5584,"children":5585},{"style":1387},[5586],{"type":400,"value":1407},{"type":394,"tag":430,"props":5588,"children":5589},{"class":432,"line":1410},[5590,5594,5598,5604,5608,5613,5617,5622,5626,5630,5635,5639,5644,5648,5653,5657,5661],{"type":394,"tag":430,"props":5591,"children":5592},{"style":987},[5593],{"type":400,"value":3769},{"type":394,"tag":430,"props":5595,"children":5596},{"style":670},[5597],{"type":400,"value":1701},{"type":394,"tag":430,"props":5599,"children":5601},{"style":5600},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5602],{"type":400,"value":5603}," proxy",{"type":394,"tag":430,"props":5605,"children":5606},{"style":670},[5607],{"type":400,"value":1849},{"type":394,"tag":430,"props":5609,"children":5610},{"style":1423},[5611],{"type":400,"value":5612}," newPrototype",{"type":394,"tag":430,"props":5614,"children":5615},{"style":670},[5616],{"type":400,"value":700},{"type":394,"tag":430,"props":5618,"children":5619},{"style":1423},[5620],{"type":400,"value":5621}," revoke",{"type":394,"tag":430,"props":5623,"children":5624},{"style":670},[5625],{"type":400,"value":1724},{"type":394,"tag":430,"props":5627,"children":5628},{"style":460},[5629],{"type":400,"value":1353},{"type":394,"tag":430,"props":5631,"children":5632},{"style":664},[5633],{"type":400,"value":5634}," Proxy",{"type":394,"tag":430,"props":5636,"children":5637},{"style":670},[5638],{"type":400,"value":673},{"type":394,"tag":430,"props":5640,"children":5641},{"style":676},[5642],{"type":400,"value":5643},"revocable",{"type":394,"tag":430,"props":5645,"children":5646},{"style":1387},[5647],{"type":400,"value":684},{"type":394,"tag":430,"props":5649,"children":5650},{"style":664},[5651],{"type":400,"value":5652},"target",{"type":394,"tag":430,"props":5654,"children":5655},{"style":670},[5656],{"type":400,"value":700},{"type":394,"tag":430,"props":5658,"children":5659},{"style":664},[5660],{"type":400,"value":5488},{"type":394,"tag":430,"props":5662,"children":5663},{"style":1387},[5664],{"type":400,"value":1407},{"type":394,"tag":430,"props":5666,"children":5667},{"class":432,"line":1419},[5668,5673,5677,5681,5685,5689,5693,5697,5701,5705],{"type":394,"tag":430,"props":5669,"children":5670},{"style":664},[5671],{"type":400,"value":5672},"  Object",{"type":394,"tag":430,"props":5674,"children":5675},{"style":670},[5676],{"type":400,"value":673},{"type":394,"tag":430,"props":5678,"children":5679},{"style":676},[5680],{"type":400,"value":3633},{"type":394,"tag":430,"props":5682,"children":5683},{"style":1387},[5684],{"type":400,"value":684},{"type":394,"tag":430,"props":5686,"children":5687},{"style":2812},[5688],{"type":400,"value":5479},{"type":394,"tag":430,"props":5690,"children":5691},{"style":670},[5692],{"type":400,"value":673},{"type":394,"tag":430,"props":5694,"children":5695},{"style":1423},[5696],{"type":400,"value":2823},{"type":394,"tag":430,"props":5698,"children":5699},{"style":670},[5700],{"type":400,"value":700},{"type":394,"tag":430,"props":5702,"children":5703},{"style":664},[5704],{"type":400,"value":5612},{"type":394,"tag":430,"props":5706,"children":5707},{"style":1387},[5708],{"type":400,"value":1407},{"type":394,"tag":430,"props":5710,"children":5711},{"class":432,"line":1454},[5712,5716,5720,5725,5729,5733,5737,5741,5745,5749,5753,5757,5761,5765,5769],{"type":394,"tag":430,"props":5713,"children":5714},{"style":1693},[5715],{"type":400,"value":4934},{"type":394,"tag":430,"props":5717,"children":5718},{"style":670},[5719],{"type":400,"value":1325},{"type":394,"tag":430,"props":5721,"children":5722},{"style":987},[5723],{"type":400,"value":5724}," =>",{"type":394,"tag":430,"props":5726,"children":5727},{"style":676},[5728],{"type":400,"value":5621},{"type":394,"tag":430,"props":5730,"children":5731},{"style":1387},[5732],{"type":400,"value":684},{"type":394,"tag":430,"props":5734,"children":5735},{"style":664},[5736],{"type":400,"value":667},{"type":394,"tag":430,"props":5738,"children":5739},{"style":670},[5740],{"type":400,"value":673},{"type":394,"tag":430,"props":5742,"children":5743},{"style":676},[5744],{"type":400,"value":3633},{"type":394,"tag":430,"props":5746,"children":5747},{"style":1387},[5748],{"type":400,"value":684},{"type":394,"tag":430,"props":5750,"children":5751},{"style":2812},[5752],{"type":400,"value":5479},{"type":394,"tag":430,"props":5754,"children":5755},{"style":670},[5756],{"type":400,"value":673},{"type":394,"tag":430,"props":5758,"children":5759},{"style":1423},[5760],{"type":400,"value":2823},{"type":394,"tag":430,"props":5762,"children":5763},{"style":670},[5764],{"type":400,"value":700},{"type":394,"tag":430,"props":5766,"children":5767},{"style":664},[5768],{"type":400,"value":5508},{"type":394,"tag":430,"props":5770,"children":5771},{"style":1387},[5772],{"type":400,"value":5773},"))\n",{"type":394,"tag":430,"props":5775,"children":5776},{"class":432,"line":1491},[5777],{"type":394,"tag":430,"props":5778,"children":5779},{"style":670},[5780],{"type":400,"value":1416},{"type":394,"tag":430,"props":5782,"children":5783},{"class":432,"line":1499},[5784,5789,5794,5798,5802,5807,5811],{"type":394,"tag":430,"props":5785,"children":5786},{"style":987},[5787],{"type":400,"value":5788},"const",{"type":394,"tag":430,"props":5790,"children":5791},{"style":1423},[5792],{"type":400,"value":5793}," recovery",{"type":394,"tag":430,"props":5795,"children":5796},{"style":460},[5797],{"type":400,"value":1353},{"type":394,"tag":430,"props":5799,"children":5800},{"style":676},[5801],{"type":400,"value":5470},{"type":394,"tag":430,"props":5803,"children":5804},{"style":664},[5805],{"type":400,"value":5806},"(String",{"type":394,"tag":430,"props":5808,"children":5809},{"style":670},[5810],{"type":400,"value":700},{"type":394,"tag":430,"props":5812,"children":5813},{"style":670},[5814],{"type":400,"value":1330},{"type":394,"tag":430,"props":5816,"children":5817},{"class":432,"line":1526},[5818,5822,5826,5830,5834,5838,5842,5847,5851],{"type":394,"tag":430,"props":5819,"children":5820},{"style":676},[5821],{"type":400,"value":2710},{"type":394,"tag":430,"props":5823,"children":5824},{"style":670},[5825],{"type":400,"value":1849},{"type":394,"tag":430,"props":5827,"children":5828},{"style":987},[5829],{"type":400,"value":1443},{"type":394,"tag":430,"props":5831,"children":5832},{"style":670},[5833],{"type":400,"value":1922},{"type":394,"tag":430,"props":5835,"children":5836},{"style":1616},[5837],{"type":400,"value":5652},{"type":394,"tag":430,"props":5839,"children":5840},{"style":670},[5841],{"type":400,"value":700},{"type":394,"tag":430,"props":5843,"children":5844},{"style":1616},[5845],{"type":400,"value":5846}," prop",{"type":394,"tag":430,"props":5848,"children":5849},{"style":670},[5850],{"type":400,"value":1624},{"type":394,"tag":430,"props":5852,"children":5853},{"style":670},[5854],{"type":400,"value":1330},{"type":394,"tag":430,"props":5856,"children":5857},{"class":432,"line":2102},[5858,5862,5866,5870,5874,5878,5882,5886,5890],{"type":394,"tag":430,"props":5859,"children":5860},{"style":1693},[5861],{"type":400,"value":1983},{"type":394,"tag":430,"props":5863,"children":5864},{"style":1387},[5865],{"type":400,"value":1922},{"type":394,"tag":430,"props":5867,"children":5868},{"style":664},[5869],{"type":400,"value":3032},{"type":394,"tag":430,"props":5871,"children":5872},{"style":460},[5873],{"type":400,"value":1996},{"type":394,"tag":430,"props":5875,"children":5876},{"style":443},[5877],{"type":400,"value":446},{"type":394,"tag":430,"props":5879,"children":5880},{"style":449},[5881],{"type":400,"value":1715},{"type":394,"tag":430,"props":5883,"children":5884},{"style":443},[5885],{"type":400,"value":457},{"type":394,"tag":430,"props":5887,"children":5888},{"style":1387},[5889],{"type":400,"value":714},{"type":394,"tag":430,"props":5891,"children":5892},{"style":670},[5893],{"type":400,"value":1739},{"type":394,"tag":430,"props":5895,"children":5896},{"class":432,"line":2162},[5897,5902,5906,5910],{"type":394,"tag":430,"props":5898,"children":5899},{"style":1693},[5900],{"type":400,"value":5901},"      return",{"type":394,"tag":430,"props":5903,"children":5904},{"style":443},[5905],{"type":400,"value":446},{"type":394,"tag":430,"props":5907,"children":5908},{"style":449},[5909],{"type":400,"value":1715},{"type":394,"tag":430,"props":5911,"children":5912},{"style":443},[5913],{"type":400,"value":1366},{"type":394,"tag":430,"props":5915,"children":5916},{"class":432,"line":2223},[5917,5922,5927],{"type":394,"tag":430,"props":5918,"children":5919},{"style":670},[5920],{"type":400,"value":5921},"    }",{"type":394,"tag":430,"props":5923,"children":5924},{"style":1693},[5925],{"type":400,"value":5926}," else",{"type":394,"tag":430,"props":5928,"children":5929},{"style":670},[5930],{"type":400,"value":1330},{"type":394,"tag":430,"props":5932,"children":5933},{"class":432,"line":2264},[5934,5938,5943,5947,5952,5956,5960,5965],{"type":394,"tag":430,"props":5935,"children":5936},{"style":1693},[5937],{"type":400,"value":5901},{"type":394,"tag":430,"props":5939,"children":5940},{"style":664},[5941],{"type":400,"value":5942}," Reflect",{"type":394,"tag":430,"props":5944,"children":5945},{"style":670},[5946],{"type":400,"value":673},{"type":394,"tag":430,"props":5948,"children":5949},{"style":676},[5950],{"type":400,"value":5951},"get",{"type":394,"tag":430,"props":5953,"children":5954},{"style":1387},[5955],{"type":400,"value":684},{"type":394,"tag":430,"props":5957,"children":5958},{"style":460},[5959],{"type":400,"value":1277},{"type":394,"tag":430,"props":5961,"children":5962},{"style":4027},[5963],{"type":400,"value":5964},"arguments",{"type":394,"tag":430,"props":5966,"children":5967},{"style":1387},[5968],{"type":400,"value":1407},{"type":394,"tag":430,"props":5970,"children":5971},{"class":432,"line":2305},[5972],{"type":394,"tag":430,"props":5973,"children":5974},{"style":670},[5975],{"type":400,"value":2311},{"type":394,"tag":430,"props":5977,"children":5978},{"class":432,"line":2314},[5979],{"type":394,"tag":430,"props":5980,"children":5981},{"style":670},[5982],{"type":400,"value":2069},{"type":394,"tag":430,"props":5984,"children":5985},{"class":432,"line":2322},[5986,5990],{"type":394,"tag":430,"props":5987,"children":5988},{"style":670},[5989],{"type":400,"value":1663},{"type":394,"tag":430,"props":5991,"children":5992},{"style":664},[5993],{"type":400,"value":1407},{"type":394,"tag":430,"props":5995,"children":5997},{"class":432,"line":5996},17,[5998,6002,6006,6010,6014,6019,6023,6028],{"type":394,"tag":430,"props":5999,"children":6000},{"style":664},[6001],{"type":400,"value":5013},{"type":394,"tag":430,"props":6003,"children":6004},{"style":670},[6005],{"type":400,"value":673},{"type":394,"tag":430,"props":6007,"children":6008},{"style":676},[6009],{"type":400,"value":1384},{"type":394,"tag":430,"props":6011,"children":6012},{"style":664},[6013],{"type":400,"value":684},{"type":394,"tag":430,"props":6015,"children":6016},{"style":443},[6017],{"type":400,"value":6018},"''",{"type":394,"tag":430,"props":6020,"children":6021},{"style":670},[6022],{"type":400,"value":673},{"type":394,"tag":430,"props":6024,"children":6025},{"style":664},[6026],{"type":400,"value":6027},"test) ",{"type":394,"tag":430,"props":6029,"children":6030},{"style":717},[6031],{"type":400,"value":6032},"// test\n",{"type":394,"tag":402,"props":6034,"children":6036},{"id":6035},"元编程系统",[6037],{"type":400,"value":6035},{"type":394,"tag":408,"props":6039,"children":6040},{},[6041],{"type":400,"value":6042},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":394,"tag":395,"props":6044,"children":6046},{"id":6045},"结构化",[6047],{"type":400,"value":6045},{"type":394,"tag":402,"props":6049,"children":6051},{"id":6050},"概述",[6052],{"type":400,"value":6050},{"type":394,"tag":408,"props":6054,"children":6055},{},[6056],{"type":400,"value":6057},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":394,"tag":408,"props":6059,"children":6060},{},[6061],{"type":400,"value":6062},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":394,"tag":408,"props":6064,"children":6065},{},[6066],{"type":400,"value":6067},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":394,"tag":408,"props":6069,"children":6070},{},[6071],{"type":400,"value":6072},"面向对象解决了结构化带来诸多问题的三点：",{"type":394,"tag":508,"props":6074,"children":6075},{},[6076,6081,6086],{"type":394,"tag":512,"props":6077,"children":6078},{},[6079],{"type":400,"value":6080},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":394,"tag":512,"props":6082,"children":6083},{},[6084],{"type":400,"value":6085},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":394,"tag":512,"props":6087,"children":6088},{},[6089],{"type":400,"value":6090},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":394,"tag":408,"props":6092,"children":6093},{},[6094],{"type":400,"value":6095},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":394,"tag":408,"props":6097,"children":6098},{},[6099],{"type":400,"value":6100},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":394,"tag":402,"props":6102,"children":6104},{"id":6103},"基本的组织元素",[6105],{"type":400,"value":6103},{"type":394,"tag":408,"props":6107,"children":6108},{},[6109],{"type":400,"value":6110},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":400,"value":2905},{"type":394,"tag":1004,"props":6113,"children":6114},{},[6115,6141],{"type":394,"tag":1008,"props":6116,"children":6117},{},[6118],{"type":394,"tag":1012,"props":6119,"children":6120},{},[6121,6126,6131,6136],{"type":394,"tag":1016,"props":6122,"children":6123},{},[6124],{"type":400,"value":6125},"元素",{"type":394,"tag":1016,"props":6127,"children":6128},{},[6129],{"type":400,"value":6130},"物理形态",{"type":394,"tag":1016,"props":6132,"children":6133},{},[6134],{"type":400,"value":6135},"静态",{"type":394,"tag":1016,"props":6137,"children":6138},{},[6139],{"type":400,"value":6140},"动态",{"type":394,"tag":1027,"props":6142,"children":6143},{},[6144,6165,6188,6210],{"type":394,"tag":1012,"props":6145,"children":6146},{},[6147,6152,6155,6160],{"type":394,"tag":1034,"props":6148,"children":6149},{},[6150],{"type":400,"value":6151},"标识符",{"type":394,"tag":1034,"props":6153,"children":6154},{},[],{"type":394,"tag":1034,"props":6156,"children":6157},{},[6158],{"type":400,"value":6159},"变量声明、函数声明、类声明",{"type":394,"tag":1034,"props":6161,"children":6162},{},[6163],{"type":400,"value":6164},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":394,"tag":1012,"props":6166,"children":6167},{},[6168,6173,6178,6183],{"type":394,"tag":1034,"props":6169,"children":6170},{},[6171],{"type":400,"value":6172},"表达式",{"type":394,"tag":1034,"props":6174,"children":6175},{},[6176],{"type":400,"value":6177},"模板字符串",{"type":394,"tag":1034,"props":6179,"children":6180},{},[6181],{"type":400,"value":6182},"值、箭头函数体",{"type":394,"tag":1034,"props":6184,"children":6185},{},[6186],{"type":400,"value":6187},"通过 eval 执行表达式语句",{"type":394,"tag":1012,"props":6189,"children":6190},{},[6191,6195,6200,6205],{"type":394,"tag":1034,"props":6192,"children":6193},{},[6194],{"type":400,"value":1555},{"type":394,"tag":1034,"props":6196,"children":6197},{},[6198],{"type":400,"value":6199},".js 文件",{"type":394,"tag":1034,"props":6201,"children":6202},{},[6203],{"type":400,"value":6204},"块和块级作用域",{"type":394,"tag":1034,"props":6206,"children":6207},{},[6208],{"type":400,"value":6209},"eval()",{"type":394,"tag":1012,"props":6211,"children":6212},{},[6213,6217,6222,6227],{"type":394,"tag":1034,"props":6214,"children":6215},{},[6216],{"type":400,"value":2340},{"type":394,"tag":1034,"props":6218,"children":6219},{},[6220],{"type":400,"value":6221},".mjs 文件",{"type":394,"tag":1034,"props":6223,"children":6224},{},[6225],{"type":400,"value":6226},"import、export、require()",{"type":394,"tag":1034,"props":6228,"children":6229},{},[6230],{"type":400,"value":6231},"import().then()",{"type":394,"tag":408,"props":6233,"children":6234},{},[6235],{"type":400,"value":6236},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":394,"tag":408,"props":6238,"children":6239},{},[6240],{"type":400,"value":6241},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":394,"tag":408,"props":6243,"children":6244},{},[6245],{"type":400,"value":6246},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":394,"tag":408,"props":6248,"children":6249},{},[6250,6252,6257],{"type":400,"value":6251},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":394,"tag":430,"props":6253,"children":6254},{},[6255],{"type":400,"value":6256},"1,2,3",{"type":400,"value":6258}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":394,"tag":408,"props":6260,"children":6261},{},[6262],{"type":400,"value":6263},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":394,"tag":408,"props":6265,"children":6266},{},[6267],{"type":400,"value":6268},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":394,"tag":408,"props":6270,"children":6271},{},[6272],{"type":400,"value":6273},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":394,"tag":408,"props":6275,"children":6276},{},[6277],{"type":400,"value":6278},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":394,"tag":402,"props":6280,"children":6282},{"id":6281},"声明",[6283],{"type":400,"value":6281},{"type":394,"tag":408,"props":6285,"children":6286},{},[6287,6289,6300],{"type":400,"value":6288},"除了 const 和 namespace",{"type":394,"tag":487,"props":6290,"children":6291},{},[6292],{"type":394,"tag":491,"props":6293,"children":6297},{"href":6294,"ariaDescribedBy":6295,"dataFootnoteRef":388,"id":6296},"#user-content-fn-namespace",[495],"user-content-fnref-namespace",[6298],{"type":400,"value":6299},"4",{"type":400,"value":6301}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":394,"tag":419,"props":6303,"children":6305},{"className":652,"code":6304,"language":654,"meta":388,"style":388},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6306],{"type":394,"tag":426,"props":6307,"children":6308},{"__ignoreMap":388},[6309,6337,6353,6385,6407],{"type":394,"tag":430,"props":6310,"children":6311},{"class":432,"line":433},[6312,6317,6321,6325,6329,6333],{"type":394,"tag":430,"props":6313,"children":6314},{"style":460},[6315],{"type":400,"value":6316},"!",{"type":394,"tag":430,"props":6318,"children":6319},{"style":664},[6320],{"type":400,"value":684},{"type":394,"tag":430,"props":6322,"children":6323},{"style":987},[6324],{"type":400,"value":1315},{"type":394,"tag":430,"props":6326,"children":6327},{"style":676},[6328],{"type":400,"value":2015},{"type":394,"tag":430,"props":6330,"children":6331},{"style":670},[6332],{"type":400,"value":1038},{"type":394,"tag":430,"props":6334,"children":6335},{"style":670},[6336],{"type":400,"value":1330},{"type":394,"tag":430,"props":6338,"children":6339},{"class":432,"line":723},[6340,6344,6348],{"type":394,"tag":430,"props":6341,"children":6342},{"style":664},[6343],{"type":400,"value":2763},{"type":394,"tag":430,"props":6345,"children":6346},{"style":460},[6347],{"type":400,"value":1353},{"type":394,"tag":430,"props":6349,"children":6350},{"style":692},[6351],{"type":400,"value":6352}," 100\n",{"type":394,"tag":430,"props":6354,"children":6355},{"class":432,"line":1369},[6356,6360,6364,6368,6372,6376,6380],{"type":394,"tag":430,"props":6357,"children":6358},{"style":664},[6359],{"type":400,"value":1375},{"type":394,"tag":430,"props":6361,"children":6362},{"style":670},[6363],{"type":400,"value":673},{"type":394,"tag":430,"props":6365,"children":6366},{"style":676},[6367],{"type":400,"value":1384},{"type":394,"tag":430,"props":6369,"children":6370},{"style":1387},[6371],{"type":400,"value":684},{"type":394,"tag":430,"props":6373,"children":6374},{"style":664},[6375],{"type":400,"value":1715},{"type":394,"tag":430,"props":6377,"children":6378},{"style":1387},[6379],{"type":400,"value":714},{"type":394,"tag":430,"props":6381,"children":6382},{"style":717},[6383],{"type":400,"value":6384},"// [Function ...]\n",{"type":394,"tag":430,"props":6386,"children":6387},{"class":432,"line":1410},[6388,6393,6397,6402],{"type":394,"tag":430,"props":6389,"children":6390},{"style":4027},[6391],{"type":400,"value":6392},"  arguments",{"type":394,"tag":430,"props":6394,"children":6395},{"style":460},[6396],{"type":400,"value":1353},{"type":394,"tag":430,"props":6398,"children":6399},{"style":1387},[6400],{"type":400,"value":6401}," [] ",{"type":394,"tag":430,"props":6403,"children":6404},{"style":717},[6405],{"type":400,"value":6406},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":394,"tag":430,"props":6408,"children":6409},{"class":432,"line":1419},[6410,6414],{"type":394,"tag":430,"props":6411,"children":6412},{"style":670},[6413],{"type":400,"value":1663},{"type":394,"tag":430,"props":6415,"children":6416},{"style":664},[6417],{"type":400,"value":6418},"())\n",{"type":394,"tag":408,"props":6420,"children":6421},{},[6422],{"type":400,"value":6423},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":394,"tag":419,"props":6425,"children":6427},{"className":652,"code":6426,"language":654,"meta":388,"style":388},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6428],{"type":394,"tag":426,"props":6429,"children":6430},{"__ignoreMap":388},[6431,6439,6458,6484,6512,6550],{"type":394,"tag":430,"props":6432,"children":6433},{"class":432,"line":433},[6434],{"type":394,"tag":430,"props":6435,"children":6436},{"style":717},[6437],{"type":400,"value":6438},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":394,"tag":430,"props":6440,"children":6441},{"class":432,"line":723},[6442,6446,6450,6454],{"type":394,"tag":430,"props":6443,"children":6444},{"style":987},[6445],{"type":400,"value":1315},{"type":394,"tag":430,"props":6447,"children":6448},{"style":676},[6449],{"type":400,"value":2015},{"type":394,"tag":430,"props":6451,"children":6452},{"style":670},[6453],{"type":400,"value":1038},{"type":394,"tag":430,"props":6455,"children":6456},{"style":670},[6457],{"type":400,"value":1330},{"type":394,"tag":430,"props":6459,"children":6460},{"class":432,"line":1369},[6461,6466,6470,6475,6479],{"type":394,"tag":430,"props":6462,"children":6463},{"style":670},[6464],{"type":400,"value":6465},"  {",{"type":394,"tag":430,"props":6467,"children":6468},{"style":987},[6469],{"type":400,"value":1315},{"type":394,"tag":430,"props":6471,"children":6472},{"style":676},[6473],{"type":400,"value":6474}," x",{"type":394,"tag":430,"props":6476,"children":6477},{"style":670},[6478],{"type":400,"value":1325},{"type":394,"tag":430,"props":6480,"children":6481},{"style":670},[6482],{"type":400,"value":6483}," {}};\n",{"type":394,"tag":430,"props":6485,"children":6486},{"class":432,"line":1410},[6487,6491,6495,6499,6504,6508],{"type":394,"tag":430,"props":6488,"children":6489},{"style":1842},[6490],{"type":400,"value":2763},{"type":394,"tag":430,"props":6492,"children":6493},{"style":670},[6494],{"type":400,"value":1849},{"type":394,"tag":430,"props":6496,"children":6497},{"style":987},[6498],{"type":400,"value":1443},{"type":394,"tag":430,"props":6500,"children":6501},{"style":676},[6502],{"type":400,"value":6503}," y",{"type":394,"tag":430,"props":6505,"children":6506},{"style":670},[6507],{"type":400,"value":1325},{"type":394,"tag":430,"props":6509,"children":6510},{"style":670},[6511],{"type":400,"value":3123},{"type":394,"tag":430,"props":6513,"children":6514},{"class":432,"line":1419},[6515,6520,6524,6529,6533,6537,6542,6546],{"type":394,"tag":430,"props":6516,"children":6517},{"style":1693},[6518],{"type":400,"value":6519},"  if",{"type":394,"tag":430,"props":6521,"children":6522},{"style":1387},[6523],{"type":400,"value":1922},{"type":394,"tag":430,"props":6525,"children":6526},{"style":826},[6527],{"type":400,"value":6528},"true",{"type":394,"tag":430,"props":6530,"children":6531},{"style":1387},[6532],{"type":400,"value":714},{"type":394,"tag":430,"props":6534,"children":6535},{"style":987},[6536],{"type":400,"value":1315},{"type":394,"tag":430,"props":6538,"children":6539},{"style":676},[6540],{"type":400,"value":6541}," z",{"type":394,"tag":430,"props":6543,"children":6544},{"style":670},[6545],{"type":400,"value":1325},{"type":394,"tag":430,"props":6547,"children":6548},{"style":670},[6549],{"type":400,"value":3123},{"type":394,"tag":430,"props":6551,"children":6552},{"class":432,"line":1454},[6553],{"type":394,"tag":430,"props":6554,"children":6555},{"style":670},[6556],{"type":400,"value":1416},{"type":394,"tag":402,"props":6558,"children":6560},{"id":6559},"语句与代码分块",[6561],{"type":400,"value":6559},{"type":394,"tag":408,"props":6563,"children":6564},{},[6565],{"type":400,"value":6566},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":394,"tag":408,"props":6568,"children":6569},{},[6570],{"type":400,"value":6571},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":394,"tag":408,"props":6573,"children":6574},{},[6575,6577,6588],{"type":400,"value":6576},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":394,"tag":487,"props":6578,"children":6579},{},[6580],{"type":394,"tag":491,"props":6581,"children":6585},{"href":6582,"ariaDescribedBy":6583,"dataFootnoteRef":388,"id":6584},"#user-content-fn-iterationenv",[495],"user-content-fnref-iterationenv",[6586],{"type":400,"value":6587},"5",{"type":400,"value":6589},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":394,"tag":408,"props":6591,"children":6592},{},[6593],{"type":400,"value":6594},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":394,"tag":408,"props":6596,"children":6597},{},[6598],{"type":400,"value":6599},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":394,"tag":419,"props":6601,"children":6603},{"className":652,"code":6602,"language":654,"meta":388,"style":388},"eval(`if (true) ; else ;`) // undefined\n",[6604],{"type":394,"tag":426,"props":6605,"children":6606},{"__ignoreMap":388},[6607],{"type":394,"tag":430,"props":6608,"children":6609},{"class":432,"line":433},[6610,6615,6619,6624,6629,6633,6637],{"type":394,"tag":430,"props":6611,"children":6612},{"style":676},[6613],{"type":400,"value":6614},"eval",{"type":394,"tag":430,"props":6616,"children":6617},{"style":664},[6618],{"type":400,"value":684},{"type":394,"tag":430,"props":6620,"children":6621},{"style":443},[6622],{"type":400,"value":6623},"`",{"type":394,"tag":430,"props":6625,"children":6626},{"style":449},[6627],{"type":400,"value":6628},"if (true) ; else ;",{"type":394,"tag":430,"props":6630,"children":6631},{"style":443},[6632],{"type":400,"value":6623},{"type":394,"tag":430,"props":6634,"children":6635},{"style":664},[6636],{"type":400,"value":714},{"type":394,"tag":430,"props":6638,"children":6639},{"style":717},[6640],{"type":400,"value":953},{"type":394,"tag":402,"props":6642,"children":6644},{"id":6643},"组织形式分块的方法",[6645],{"type":400,"value":6643},{"type":394,"tag":408,"props":6647,"children":6648},{},[6649],{"type":400,"value":6650},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":394,"tag":408,"props":6652,"children":6653},{},[6654],{"type":400,"value":6655},"数据声明语句中存在块级作用域，如：",{"type":394,"tag":419,"props":6657,"children":6659},{"className":652,"code":6658,"language":654,"meta":388,"style":388},"const x = 1, y = x\nconsole.log(y) // 1\n",[6660],{"type":394,"tag":426,"props":6661,"children":6662},{"__ignoreMap":388},[6663,6698],{"type":394,"tag":430,"props":6664,"children":6665},{"class":432,"line":433},[6666,6670,6674,6678,6682,6686,6690,6694],{"type":394,"tag":430,"props":6667,"children":6668},{"style":987},[6669],{"type":400,"value":5788},{"type":394,"tag":430,"props":6671,"children":6672},{"style":1423},[6673],{"type":400,"value":6474},{"type":394,"tag":430,"props":6675,"children":6676},{"style":460},[6677],{"type":400,"value":1353},{"type":394,"tag":430,"props":6679,"children":6680},{"style":692},[6681],{"type":400,"value":1799},{"type":394,"tag":430,"props":6683,"children":6684},{"style":670},[6685],{"type":400,"value":700},{"type":394,"tag":430,"props":6687,"children":6688},{"style":1423},[6689],{"type":400,"value":6503},{"type":394,"tag":430,"props":6691,"children":6692},{"style":460},[6693],{"type":400,"value":1353},{"type":394,"tag":430,"props":6695,"children":6696},{"style":664},[6697],{"type":400,"value":995},{"type":394,"tag":430,"props":6699,"children":6700},{"class":432,"line":723},[6701,6705,6709,6713,6718],{"type":394,"tag":430,"props":6702,"children":6703},{"style":664},[6704],{"type":400,"value":5013},{"type":394,"tag":430,"props":6706,"children":6707},{"style":670},[6708],{"type":400,"value":673},{"type":394,"tag":430,"props":6710,"children":6711},{"style":676},[6712],{"type":400,"value":1384},{"type":394,"tag":430,"props":6714,"children":6715},{"style":664},[6716],{"type":400,"value":6717},"(y) ",{"type":394,"tag":430,"props":6719,"children":6720},{"style":717},[6721],{"type":400,"value":6722},"// 1\n",{"type":394,"tag":408,"props":6724,"children":6725},{},[6726],{"type":400,"value":6727},"表达式级别的作用域只存在于 eval 调用中。",{"type":394,"tag":408,"props":6729,"children":6730},{},[6731],{"type":400,"value":6732},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":394,"tag":419,"props":6734,"children":6736},{"className":652,"code":6735,"language":654,"meta":388,"style":388},"if (1) let x = 1\n",[6737],{"type":394,"tag":426,"props":6738,"children":6739},{"__ignoreMap":388},[6740],{"type":394,"tag":430,"props":6741,"children":6742},{"class":432,"line":433},[6743,6748,6752,6756,6760,6764,6768,6772],{"type":394,"tag":430,"props":6744,"children":6745},{"style":1693},[6746],{"type":400,"value":6747},"if",{"type":394,"tag":430,"props":6749,"children":6750},{"style":664},[6751],{"type":400,"value":1922},{"type":394,"tag":430,"props":6753,"children":6754},{"style":692},[6755],{"type":400,"value":499},{"type":394,"tag":430,"props":6757,"children":6758},{"style":664},[6759],{"type":400,"value":714},{"type":394,"tag":430,"props":6761,"children":6762},{"style":987},[6763],{"type":400,"value":990},{"type":394,"tag":430,"props":6765,"children":6766},{"style":664},[6767],{"type":400,"value":948},{"type":394,"tag":430,"props":6769,"children":6770},{"style":460},[6771],{"type":400,"value":1864},{"type":394,"tag":430,"props":6773,"children":6774},{"style":692},[6775],{"type":400,"value":6776}," 1\n",{"type":394,"tag":408,"props":6778,"children":6779},{},[6780],{"type":400,"value":6781},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":394,"tag":408,"props":6783,"children":6784},{},[6785],{"type":400,"value":6786},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":394,"tag":408,"props":6788,"children":6789},{},[6790],{"type":400,"value":6791},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":394,"tag":508,"props":6793,"children":6794},{},[6795,6800,6805],{"type":394,"tag":512,"props":6796,"children":6797},{},[6798],{"type":400,"value":6799},"词法作用域互不相交。",{"type":394,"tag":512,"props":6801,"children":6802},{},[6803],{"type":400,"value":6804},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":394,"tag":512,"props":6806,"children":6807},{},[6808],{"type":400,"value":6809},"高级别流程变更语句可以跨越低级别的作用域。",{"type":394,"tag":408,"props":6811,"children":6812},{},[6813],{"type":400,"value":6814},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":394,"tag":402,"props":6816,"children":6818},{"id":6817},"层次结构程序设计",[6819],{"type":400,"value":6817},{"type":394,"tag":408,"props":6821,"children":6822},{},[6823],{"type":400,"value":6824},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":394,"tag":419,"props":6826,"children":6828},{"className":652,"code":6827,"language":654,"meta":388,"style":388},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6829],{"type":394,"tag":426,"props":6830,"children":6831},{"__ignoreMap":388},[6832,6871],{"type":394,"tag":430,"props":6833,"children":6834},{"class":432,"line":433},[6835,6839,6844,6848,6853,6857,6862,6866],{"type":394,"tag":430,"props":6836,"children":6837},{"style":987},[6838],{"type":400,"value":5788},{"type":394,"tag":430,"props":6840,"children":6841},{"style":1423},[6842],{"type":400,"value":6843}," method",{"type":394,"tag":430,"props":6845,"children":6846},{"style":460},[6847],{"type":400,"value":1353},{"type":394,"tag":430,"props":6849,"children":6850},{"style":664},[6851],{"type":400,"value":6852}," obj[Object",{"type":394,"tag":430,"props":6854,"children":6855},{"style":670},[6856],{"type":400,"value":673},{"type":394,"tag":430,"props":6858,"children":6859},{"style":664},[6860],{"type":400,"value":6861},"getPropertySymbols[",{"type":394,"tag":430,"props":6863,"children":6864},{"style":692},[6865],{"type":400,"value":695},{"type":394,"tag":430,"props":6867,"children":6868},{"style":664},[6869],{"type":400,"value":6870},"]]\n",{"type":394,"tag":430,"props":6872,"children":6873},{"class":432,"line":723},[6874,6878,6882,6887],{"type":394,"tag":430,"props":6875,"children":6876},{"style":664},[6877],{"type":400,"value":3745},{"type":394,"tag":430,"props":6879,"children":6880},{"style":670},[6881],{"type":400,"value":673},{"type":394,"tag":430,"props":6883,"children":6884},{"style":676},[6885],{"type":400,"value":6886},"call",{"type":394,"tag":430,"props":6888,"children":6889},{"style":664},[6890],{"type":400,"value":6891},"(obj)\n",{"type":394,"tag":408,"props":6893,"children":6894},{},[6895],{"type":400,"value":6896},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":394,"tag":402,"props":6898,"children":6900},{"id":6899},"变量作用域",[6901],{"type":400,"value":6899},{"type":394,"tag":408,"props":6903,"children":6904},{},[6905],{"type":400,"value":6906},"变量作用域有三个特殊之处：",{"type":394,"tag":508,"props":6908,"children":6909},{},[6910,6915,6920],{"type":394,"tag":512,"props":6911,"children":6912},{},[6913],{"type":400,"value":6914},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":394,"tag":512,"props":6916,"children":6917},{},[6918],{"type":400,"value":6919},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":394,"tag":512,"props":6921,"children":6922},{},[6923],{"type":400,"value":6924},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":394,"tag":408,"props":6926,"children":6927},{},[6928],{"type":400,"value":6929},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":394,"tag":408,"props":6931,"children":6932},{},[6933],{"type":400,"value":6934},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":394,"tag":402,"props":6936,"children":6938},{"id":6937},"私有属性和私有字段的纷争",[6939],{"type":400,"value":6937},{"type":394,"tag":408,"props":6941,"children":6942},{},[6943],{"type":400,"value":6944},"(_　_)。゜zｚＺ",{"type":394,"tag":395,"props":6946,"children":6948},{"id":6947},"函数式语言特性",[6949],{"type":400,"value":6947},{"type":394,"tag":402,"props":6951,"children":6953},{"id":6952},"概述-1",[6954],{"type":400,"value":6050},{"type":394,"tag":408,"props":6956,"children":6957},{},[6958],{"type":400,"value":6959},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":394,"tag":408,"props":6961,"children":6962},{},[6963],{"type":400,"value":6964},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":394,"tag":402,"props":6966,"children":6968},{"id":6967},"js中的函数",[6969],{"type":400,"value":6970},"JS中的函数",{"type":394,"tag":408,"props":6972,"children":6973},{},[6974],{"type":400,"value":6975},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":394,"tag":508,"props":6977,"children":6978},{},[6979,6984,6989],{"type":394,"tag":512,"props":6980,"children":6981},{},[6982],{"type":400,"value":6983},"无法显式使用“use strict”切换到严格模式。",{"type":394,"tag":512,"props":6985,"children":6986},{},[6987],{"type":400,"value":6988},"不接受重名参数。",{"type":394,"tag":512,"props":6990,"children":6991},{},[6992],{"type":400,"value":6993},"形参和 arguments 之间将解除绑定关系。",{"type":394,"tag":408,"props":6995,"children":6996},{},[6997],{"type":400,"value":6998},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":394,"tag":419,"props":7000,"children":7002},{"className":652,"code":7001,"language":654,"meta":388,"style":388},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[7003],{"type":394,"tag":426,"props":7004,"children":7005},{"__ignoreMap":388},[7006,7050,7103,7110],{"type":394,"tag":430,"props":7007,"children":7008},{"class":432,"line":433},[7009,7013,7017,7021,7025,7029,7034,7038,7042,7046],{"type":394,"tag":430,"props":7010,"children":7011},{"style":987},[7012],{"type":400,"value":1315},{"type":394,"tag":430,"props":7014,"children":7015},{"style":676},[7016],{"type":400,"value":2015},{"type":394,"tag":430,"props":7018,"children":7019},{"style":670},[7020],{"type":400,"value":684},{"type":394,"tag":430,"props":7022,"children":7023},{"style":1616},[7024],{"type":400,"value":491},{"type":394,"tag":430,"props":7026,"children":7027},{"style":670},[7028],{"type":400,"value":700},{"type":394,"tag":430,"props":7030,"children":7031},{"style":1616},[7032],{"type":400,"value":7033}," b",{"type":394,"tag":430,"props":7035,"children":7036},{"style":460},[7037],{"type":400,"value":1353},{"type":394,"tag":430,"props":7039,"children":7040},{"style":692},[7041],{"type":400,"value":1799},{"type":394,"tag":430,"props":7043,"children":7044},{"style":670},[7045],{"type":400,"value":1624},{"type":394,"tag":430,"props":7047,"children":7048},{"style":670},[7049],{"type":400,"value":1330},{"type":394,"tag":430,"props":7051,"children":7052},{"class":432,"line":723},[7053,7057,7061,7065,7069,7073,7077,7082,7086,7091,7095,7099],{"type":394,"tag":430,"props":7054,"children":7055},{"style":664},[7056],{"type":400,"value":1375},{"type":394,"tag":430,"props":7058,"children":7059},{"style":670},[7060],{"type":400,"value":673},{"type":394,"tag":430,"props":7062,"children":7063},{"style":676},[7064],{"type":400,"value":1384},{"type":394,"tag":430,"props":7066,"children":7067},{"style":1387},[7068],{"type":400,"value":684},{"type":394,"tag":430,"props":7070,"children":7071},{"style":664},[7072],{"type":400,"value":1715},{"type":394,"tag":430,"props":7074,"children":7075},{"style":670},[7076],{"type":400,"value":673},{"type":394,"tag":430,"props":7078,"children":7079},{"style":1423},[7080],{"type":400,"value":7081},"length",{"type":394,"tag":430,"props":7083,"children":7084},{"style":670},[7085],{"type":400,"value":700},{"type":394,"tag":430,"props":7087,"children":7088},{"style":4027},[7089],{"type":400,"value":7090}," arguments",{"type":394,"tag":430,"props":7092,"children":7093},{"style":670},[7094],{"type":400,"value":673},{"type":394,"tag":430,"props":7096,"children":7097},{"style":1423},[7098],{"type":400,"value":7081},{"type":394,"tag":430,"props":7100,"children":7101},{"style":1387},[7102],{"type":400,"value":1407},{"type":394,"tag":430,"props":7104,"children":7105},{"class":432,"line":1369},[7106],{"type":394,"tag":430,"props":7107,"children":7108},{"style":670},[7109],{"type":400,"value":1416},{"type":394,"tag":430,"props":7111,"children":7112},{"class":432,"line":1410},[7113,7117,7121,7125,7129,7134,7138],{"type":394,"tag":430,"props":7114,"children":7115},{"style":676},[7116],{"type":400,"value":1715},{"type":394,"tag":430,"props":7118,"children":7119},{"style":664},[7120],{"type":400,"value":684},{"type":394,"tag":430,"props":7122,"children":7123},{"style":692},[7124],{"type":400,"value":499},{"type":394,"tag":430,"props":7126,"children":7127},{"style":670},[7128],{"type":400,"value":700},{"type":394,"tag":430,"props":7130,"children":7131},{"style":692},[7132],{"type":400,"value":7133}," 2",{"type":394,"tag":430,"props":7135,"children":7136},{"style":664},[7137],{"type":400,"value":714},{"type":394,"tag":430,"props":7139,"children":7140},{"style":717},[7141],{"type":400,"value":7142},"// 1，2\n",{"type":394,"tag":408,"props":7144,"children":7145},{},[7146,7148,7159],{"type":400,"value":7147},"表达式最后返回的是值而不是引用",{"type":394,"tag":487,"props":7149,"children":7150},{},[7151],{"type":394,"tag":491,"props":7152,"children":7156},{"href":7153,"ariaDescribedBy":7154,"dataFootnoteRef":388,"id":7155},"#user-content-fn-reference",[495],"user-content-fnref-reference",[7157],{"type":400,"value":7158},"6",{"type":400,"value":7160},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":394,"tag":419,"props":7162,"children":7164},{"className":652,"code":7163,"language":654,"meta":388,"style":388},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7165],{"type":394,"tag":426,"props":7166,"children":7167},{"__ignoreMap":388},[7168,7193,7212,7233,7249,7286,7293,7300,7337],{"type":394,"tag":430,"props":7169,"children":7170},{"class":432,"line":433},[7171,7176,7180,7185,7189],{"type":394,"tag":430,"props":7172,"children":7173},{"style":664},[7174],{"type":400,"value":7175},"window",{"type":394,"tag":430,"props":7177,"children":7178},{"style":670},[7179],{"type":400,"value":673},{"type":394,"tag":430,"props":7181,"children":7182},{"style":664},[7183],{"type":400,"value":7184},"x ",{"type":394,"tag":430,"props":7186,"children":7187},{"style":460},[7188],{"type":400,"value":1864},{"type":394,"tag":430,"props":7190,"children":7191},{"style":692},[7192],{"type":400,"value":6776},{"type":394,"tag":430,"props":7194,"children":7195},{"class":432,"line":723},[7196,7200,7204,7208],{"type":394,"tag":430,"props":7197,"children":7198},{"style":987},[7199],{"type":400,"value":5788},{"type":394,"tag":430,"props":7201,"children":7202},{"style":1423},[7203],{"type":400,"value":3215},{"type":394,"tag":430,"props":7205,"children":7206},{"style":460},[7207],{"type":400,"value":1353},{"type":394,"tag":430,"props":7209,"children":7210},{"style":670},[7211],{"type":400,"value":1330},{"type":394,"tag":430,"props":7213,"children":7214},{"class":432,"line":1369},[7215,7220,7224,7228],{"type":394,"tag":430,"props":7216,"children":7217},{"style":1387},[7218],{"type":400,"value":7219},"  x",{"type":394,"tag":430,"props":7221,"children":7222},{"style":670},[7223],{"type":400,"value":1849},{"type":394,"tag":430,"props":7225,"children":7226},{"style":692},[7227],{"type":400,"value":7133},{"type":394,"tag":430,"props":7229,"children":7230},{"style":670},[7231],{"type":400,"value":7232},",\n",{"type":394,"tag":430,"props":7234,"children":7235},{"class":432,"line":1410},[7236,7241,7245],{"type":394,"tag":430,"props":7237,"children":7238},{"style":2649},[7239],{"type":400,"value":7240},"  b",{"type":394,"tag":430,"props":7242,"children":7243},{"style":670},[7244],{"type":400,"value":1325},{"type":394,"tag":430,"props":7246,"children":7247},{"style":670},[7248],{"type":400,"value":1330},{"type":394,"tag":430,"props":7250,"children":7251},{"class":432,"line":1419},[7252,7257,7261,7265,7269,7274,7278,7282],{"type":394,"tag":430,"props":7253,"children":7254},{"style":664},[7255],{"type":400,"value":7256},"    console",{"type":394,"tag":430,"props":7258,"children":7259},{"style":670},[7260],{"type":400,"value":673},{"type":394,"tag":430,"props":7262,"children":7263},{"style":676},[7264],{"type":400,"value":1384},{"type":394,"tag":430,"props":7266,"children":7267},{"style":1387},[7268],{"type":400,"value":684},{"type":394,"tag":430,"props":7270,"children":7271},{"style":1336},[7272],{"type":400,"value":7273},"this",{"type":394,"tag":430,"props":7275,"children":7276},{"style":670},[7277],{"type":400,"value":673},{"type":394,"tag":430,"props":7279,"children":7280},{"style":664},[7281],{"type":400,"value":2660},{"type":394,"tag":430,"props":7283,"children":7284},{"style":1387},[7285],{"type":400,"value":1407},{"type":394,"tag":430,"props":7287,"children":7288},{"class":432,"line":1454},[7289],{"type":394,"tag":430,"props":7290,"children":7291},{"style":670},[7292],{"type":400,"value":2069},{"type":394,"tag":430,"props":7294,"children":7295},{"class":432,"line":1491},[7296],{"type":394,"tag":430,"props":7297,"children":7298},{"style":670},[7299],{"type":400,"value":1416},{"type":394,"tag":430,"props":7301,"children":7302},{"class":432,"line":1499},[7303,7307,7311,7315,7320,7324,7328,7332],{"type":394,"tag":430,"props":7304,"children":7305},{"style":664},[7306],{"type":400,"value":5013},{"type":394,"tag":430,"props":7308,"children":7309},{"style":670},[7310],{"type":400,"value":673},{"type":394,"tag":430,"props":7312,"children":7313},{"style":676},[7314],{"type":400,"value":1384},{"type":394,"tag":430,"props":7316,"children":7317},{"style":664},[7318],{"type":400,"value":7319},"(a",{"type":394,"tag":430,"props":7321,"children":7322},{"style":670},[7323],{"type":400,"value":673},{"type":394,"tag":430,"props":7325,"children":7326},{"style":676},[7327],{"type":400,"value":1348},{"type":394,"tag":430,"props":7329,"children":7330},{"style":664},[7331],{"type":400,"value":802},{"type":394,"tag":430,"props":7333,"children":7334},{"style":717},[7335],{"type":400,"value":7336},"// 2\n",{"type":394,"tag":430,"props":7338,"children":7339},{"class":432,"line":1526},[7340,7344,7348,7352,7357,7361,7365,7369,7373,7378],{"type":394,"tag":430,"props":7341,"children":7342},{"style":664},[7343],{"type":400,"value":5013},{"type":394,"tag":430,"props":7345,"children":7346},{"style":670},[7347],{"type":400,"value":673},{"type":394,"tag":430,"props":7349,"children":7350},{"style":676},[7351],{"type":400,"value":1384},{"type":394,"tag":430,"props":7353,"children":7354},{"style":664},[7355],{"type":400,"value":7356},"((",{"type":394,"tag":430,"props":7358,"children":7359},{"style":692},[7360],{"type":400,"value":695},{"type":394,"tag":430,"props":7362,"children":7363},{"style":670},[7364],{"type":400,"value":700},{"type":394,"tag":430,"props":7366,"children":7367},{"style":664},[7368],{"type":400,"value":3215},{"type":394,"tag":430,"props":7370,"children":7371},{"style":670},[7372],{"type":400,"value":673},{"type":394,"tag":430,"props":7374,"children":7375},{"style":664},[7376],{"type":400,"value":7377},"b)()) ",{"type":394,"tag":430,"props":7379,"children":7380},{"style":717},[7381],{"type":400,"value":6722},{"type":394,"tag":408,"props":7383,"children":7384},{},[7385],{"type":400,"value":7386},"具名函数在表达式中时不会声明标识符。",{"type":394,"tag":408,"props":7388,"children":7389},{},[7390],{"type":400,"value":7391},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":394,"tag":419,"props":7393,"children":7395},{"className":652,"code":7394,"language":654,"meta":388,"style":388},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7396],{"type":394,"tag":426,"props":7397,"children":7398},{"__ignoreMap":388},[7399,7418,7446,7461,7468,7496],{"type":394,"tag":430,"props":7400,"children":7401},{"class":432,"line":433},[7402,7406,7410,7414],{"type":394,"tag":430,"props":7403,"children":7404},{"style":987},[7405],{"type":400,"value":5788},{"type":394,"tag":430,"props":7407,"children":7408},{"style":1423},[7409],{"type":400,"value":3215},{"type":394,"tag":430,"props":7411,"children":7412},{"style":460},[7413],{"type":400,"value":1353},{"type":394,"tag":430,"props":7415,"children":7416},{"style":670},[7417],{"type":400,"value":1330},{"type":394,"tag":430,"props":7419,"children":7420},{"class":432,"line":723},[7421,7425,7429,7433,7437,7441],{"type":394,"tag":430,"props":7422,"children":7423},{"style":676},[7424],{"type":400,"value":7240},{"type":394,"tag":430,"props":7426,"children":7427},{"style":670},[7428],{"type":400,"value":1849},{"type":394,"tag":430,"props":7430,"children":7431},{"style":987},[7432],{"type":400,"value":1443},{"type":394,"tag":430,"props":7434,"children":7435},{"style":676},[7436],{"type":400,"value":2015},{"type":394,"tag":430,"props":7438,"children":7439},{"style":670},[7440],{"type":400,"value":1038},{"type":394,"tag":430,"props":7442,"children":7443},{"style":670},[7444],{"type":400,"value":7445}," {},\n",{"type":394,"tag":430,"props":7447,"children":7448},{"class":432,"line":1369},[7449,7453,7457],{"type":394,"tag":430,"props":7450,"children":7451},{"style":2649},[7452],{"type":400,"value":2763},{"type":394,"tag":430,"props":7454,"children":7455},{"style":670},[7456],{"type":400,"value":1038},{"type":394,"tag":430,"props":7458,"children":7459},{"style":670},[7460],{"type":400,"value":3123},{"type":394,"tag":430,"props":7462,"children":7463},{"class":432,"line":1410},[7464],{"type":394,"tag":430,"props":7465,"children":7466},{"style":670},[7467],{"type":400,"value":1416},{"type":394,"tag":430,"props":7469,"children":7470},{"class":432,"line":1419},[7471,7475,7479,7483,7487,7491],{"type":394,"tag":430,"props":7472,"children":7473},{"style":460},[7474],{"type":400,"value":1505},{"type":394,"tag":430,"props":7476,"children":7477},{"style":664},[7478],{"type":400,"value":3215},{"type":394,"tag":430,"props":7480,"children":7481},{"style":670},[7482],{"type":400,"value":673},{"type":394,"tag":430,"props":7484,"children":7485},{"style":676},[7486],{"type":400,"value":1348},{"type":394,"tag":430,"props":7488,"children":7489},{"style":664},[7490],{"type":400,"value":818},{"type":394,"tag":430,"props":7492,"children":7493},{"style":717},[7494],{"type":400,"value":7495},"// {}\n",{"type":394,"tag":430,"props":7497,"children":7498},{"class":432,"line":1454},[7499,7503,7507,7511,7515,7519],{"type":394,"tag":430,"props":7500,"children":7501},{"style":460},[7502],{"type":400,"value":1505},{"type":394,"tag":430,"props":7504,"children":7505},{"style":664},[7506],{"type":400,"value":3215},{"type":394,"tag":430,"props":7508,"children":7509},{"style":670},[7510],{"type":400,"value":673},{"type":394,"tag":430,"props":7512,"children":7513},{"style":676},[7514],{"type":400,"value":1715},{"type":394,"tag":430,"props":7516,"children":7517},{"style":664},[7518],{"type":400,"value":818},{"type":394,"tag":430,"props":7520,"children":7521},{"style":717},[7522],{"type":400,"value":3232},{"type":394,"tag":408,"props":7524,"children":7525},{},[7526],{"type":400,"value":7527},"方法的特性总结以下三点：",{"type":394,"tag":508,"props":7529,"children":7530},{},[7531,7536,7541],{"type":394,"tag":512,"props":7532,"children":7533},{},[7534],{"type":400,"value":7535},"不能作为构造器。",{"type":394,"tag":512,"props":7537,"children":7538},{},[7539],{"type":400,"value":7540},"除了生成器方法，没有内部原型。",{"type":394,"tag":512,"props":7542,"children":7543},{},[7544],{"type":400,"value":7545},"方法不能具名。",{"type":394,"tag":408,"props":7547,"children":7548},{},[7549],{"type":400,"value":7550},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":394,"tag":419,"props":7552,"children":7554},{"className":652,"code":7553,"language":654,"meta":388,"style":388},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7555],{"type":394,"tag":426,"props":7556,"children":7557},{"__ignoreMap":388},[7558],{"type":394,"tag":430,"props":7559,"children":7560},{"class":432,"line":433},[7561,7565,7569,7573,7578,7582,7586,7590,7594],{"type":394,"tag":430,"props":7562,"children":7563},{"style":664},[7564],{"type":400,"value":667},{"type":394,"tag":430,"props":7566,"children":7567},{"style":670},[7568],{"type":400,"value":673},{"type":394,"tag":430,"props":7570,"children":7571},{"style":676},[7572],{"type":400,"value":3633},{"type":394,"tag":430,"props":7574,"children":7575},{"style":664},[7576],{"type":400,"value":7577},"(boundFn",{"type":394,"tag":430,"props":7579,"children":7580},{"style":670},[7581],{"type":400,"value":700},{"type":394,"tag":430,"props":7583,"children":7584},{"style":664},[7585],{"type":400,"value":4104},{"type":394,"tag":430,"props":7587,"children":7588},{"style":670},[7589],{"type":400,"value":673},{"type":394,"tag":430,"props":7591,"children":7592},{"style":676},[7593],{"type":400,"value":5525},{"type":394,"tag":430,"props":7595,"children":7596},{"style":664},[7597],{"type":400,"value":7598},"(targetFn))\n",{"type":394,"tag":408,"props":7600,"children":7601},{},[7602],{"type":400,"value":7603},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":394,"tag":419,"props":7605,"children":7607},{"className":652,"code":7606,"language":654,"meta":388,"style":388},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7608],{"type":394,"tag":426,"props":7609,"children":7610},{"__ignoreMap":388},[7611,7630,7673,7680],{"type":394,"tag":430,"props":7612,"children":7613},{"class":432,"line":433},[7614,7618,7622,7626],{"type":394,"tag":430,"props":7615,"children":7616},{"style":987},[7617],{"type":400,"value":1315},{"type":394,"tag":430,"props":7619,"children":7620},{"style":676},[7621],{"type":400,"value":3215},{"type":394,"tag":430,"props":7623,"children":7624},{"style":670},[7625],{"type":400,"value":1325},{"type":394,"tag":430,"props":7627,"children":7628},{"style":670},[7629],{"type":400,"value":1330},{"type":394,"tag":430,"props":7631,"children":7632},{"class":432,"line":723},[7633,7637,7641,7645,7649,7653,7657,7661,7665,7669],{"type":394,"tag":430,"props":7634,"children":7635},{"style":664},[7636],{"type":400,"value":1375},{"type":394,"tag":430,"props":7638,"children":7639},{"style":670},[7640],{"type":400,"value":673},{"type":394,"tag":430,"props":7642,"children":7643},{"style":676},[7644],{"type":400,"value":1384},{"type":394,"tag":430,"props":7646,"children":7647},{"style":1387},[7648],{"type":400,"value":684},{"type":394,"tag":430,"props":7650,"children":7651},{"style":460},[7652],{"type":400,"value":1505},{"type":394,"tag":430,"props":7654,"children":7655},{"style":670},[7656],{"type":400,"value":673},{"type":394,"tag":430,"props":7658,"children":7659},{"style":1423},[7660],{"type":400,"value":5652},{"type":394,"tag":430,"props":7662,"children":7663},{"style":460},[7664],{"type":400,"value":1996},{"type":394,"tag":430,"props":7666,"children":7667},{"style":664},[7668],{"type":400,"value":3215},{"type":394,"tag":430,"props":7670,"children":7671},{"style":1387},[7672],{"type":400,"value":1407},{"type":394,"tag":430,"props":7674,"children":7675},{"class":432,"line":1369},[7676],{"type":394,"tag":430,"props":7677,"children":7678},{"style":670},[7679],{"type":400,"value":1416},{"type":394,"tag":430,"props":7681,"children":7682},{"class":432,"line":1410},[7683,7687,7691,7695,7699,7703,7708,7712,7717,7722],{"type":394,"tag":430,"props":7684,"children":7685},{"style":664},[7686],{"type":400,"value":5013},{"type":394,"tag":430,"props":7688,"children":7689},{"style":670},[7690],{"type":400,"value":673},{"type":394,"tag":430,"props":7692,"children":7693},{"style":676},[7694],{"type":400,"value":1384},{"type":394,"tag":430,"props":7696,"children":7697},{"style":664},[7698],{"type":400,"value":684},{"type":394,"tag":430,"props":7700,"children":7701},{"style":460},[7702],{"type":400,"value":1505},{"type":394,"tag":430,"props":7704,"children":7705},{"style":664},[7706],{"type":400,"value":7707}," (a",{"type":394,"tag":430,"props":7709,"children":7710},{"style":670},[7711],{"type":400,"value":673},{"type":394,"tag":430,"props":7713,"children":7714},{"style":676},[7715],{"type":400,"value":7716},"bind",{"type":394,"tag":430,"props":7718,"children":7719},{"style":664},[7720],{"type":400,"value":7721},"())) ",{"type":394,"tag":430,"props":7723,"children":7724},{"style":717},[7725],{"type":400,"value":764},{"type":394,"tag":408,"props":7727,"children":7728},{},[7729],{"type":400,"value":7730},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":394,"tag":408,"props":7732,"children":7733},{},[7734],{"type":400,"value":7735},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":394,"tag":419,"props":7737,"children":7739},{"className":652,"code":7738,"language":654,"meta":388,"style":388},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7740],{"type":394,"tag":426,"props":7741,"children":7742},{"__ignoreMap":388},[7743,7762,7783,7808,7838,7870,7898,7924,7952,7968,8020,8028,8035,8058,8065,8072],{"type":394,"tag":430,"props":7744,"children":7745},{"class":432,"line":433},[7746,7750,7754,7758],{"type":394,"tag":430,"props":7747,"children":7748},{"style":987},[7749],{"type":400,"value":5788},{"type":394,"tag":430,"props":7751,"children":7752},{"style":1423},[7753],{"type":400,"value":2630},{"type":394,"tag":430,"props":7755,"children":7756},{"style":460},[7757],{"type":400,"value":1353},{"type":394,"tag":430,"props":7759,"children":7760},{"style":670},[7761],{"type":400,"value":1330},{"type":394,"tag":430,"props":7763,"children":7764},{"class":432,"line":723},[7765,7770,7774,7779],{"type":394,"tag":430,"props":7766,"children":7767},{"style":1387},[7768],{"type":400,"value":7769},"  step",{"type":394,"tag":430,"props":7771,"children":7772},{"style":670},[7773],{"type":400,"value":1849},{"type":394,"tag":430,"props":7775,"children":7776},{"style":692},[7777],{"type":400,"value":7778}," 0",{"type":394,"tag":430,"props":7780,"children":7781},{"style":670},[7782],{"type":400,"value":7232},{"type":394,"tag":430,"props":7784,"children":7785},{"class":432,"line":1369},[7786,7791,7795,7800,7804],{"type":394,"tag":430,"props":7787,"children":7788},{"style":2649},[7789],{"type":400,"value":7790},"  run",{"type":394,"tag":430,"props":7792,"children":7793},{"style":670},[7794],{"type":400,"value":1922},{"type":394,"tag":430,"props":7796,"children":7797},{"style":1616},[7798],{"type":400,"value":7799},"init",{"type":394,"tag":430,"props":7801,"children":7802},{"style":670},[7803],{"type":400,"value":1624},{"type":394,"tag":430,"props":7805,"children":7806},{"style":670},[7807],{"type":400,"value":1330},{"type":394,"tag":430,"props":7809,"children":7810},{"class":432,"line":1410},[7811,7816,7822,7826,7830,7834],{"type":394,"tag":430,"props":7812,"children":7813},{"style":987},[7814],{"type":400,"value":7815},"    const",{"type":394,"tag":430,"props":7817,"children":7819},{"style":7818},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7820],{"type":400,"value":7821}," exec",{"type":394,"tag":430,"props":7823,"children":7824},{"style":460},[7825],{"type":400,"value":1353},{"type":394,"tag":430,"props":7827,"children":7828},{"style":1616},[7829],{"type":400,"value":6474},{"type":394,"tag":430,"props":7831,"children":7832},{"style":987},[7833],{"type":400,"value":5724},{"type":394,"tag":430,"props":7835,"children":7836},{"style":670},[7837],{"type":400,"value":1330},{"type":394,"tag":430,"props":7839,"children":7840},{"class":432,"line":1419},[7841,7845,7849,7853,7858,7862,7866],{"type":394,"tag":430,"props":7842,"children":7843},{"style":1693},[7844],{"type":400,"value":2229},{"type":394,"tag":430,"props":7846,"children":7847},{"style":1387},[7848],{"type":400,"value":1922},{"type":394,"tag":430,"props":7850,"children":7851},{"style":664},[7852],{"type":400,"value":2660},{"type":394,"tag":430,"props":7854,"children":7855},{"style":460},[7856],{"type":400,"value":7857}," >",{"type":394,"tag":430,"props":7859,"children":7860},{"style":692},[7861],{"type":400,"value":7778},{"type":394,"tag":430,"props":7863,"children":7864},{"style":1387},[7865],{"type":400,"value":714},{"type":394,"tag":430,"props":7867,"children":7868},{"style":670},[7869],{"type":400,"value":1739},{"type":394,"tag":430,"props":7871,"children":7872},{"class":432,"line":1454},[7873,7878,7882,7886,7890,7894],{"type":394,"tag":430,"props":7874,"children":7875},{"style":664},[7876],{"type":400,"value":7877},"        console",{"type":394,"tag":430,"props":7879,"children":7880},{"style":670},[7881],{"type":400,"value":673},{"type":394,"tag":430,"props":7883,"children":7884},{"style":676},[7885],{"type":400,"value":1384},{"type":394,"tag":430,"props":7887,"children":7888},{"style":1387},[7889],{"type":400,"value":684},{"type":394,"tag":430,"props":7891,"children":7892},{"style":664},[7893],{"type":400,"value":2660},{"type":394,"tag":430,"props":7895,"children":7896},{"style":1387},[7897],{"type":400,"value":1407},{"type":394,"tag":430,"props":7899,"children":7900},{"class":432,"line":1491},[7901,7906,7910,7915,7920],{"type":394,"tag":430,"props":7902,"children":7903},{"style":1336},[7904],{"type":400,"value":7905},"        this",{"type":394,"tag":430,"props":7907,"children":7908},{"style":670},[7909],{"type":400,"value":673},{"type":394,"tag":430,"props":7911,"children":7912},{"style":664},[7913],{"type":400,"value":7914},"step",{"type":394,"tag":430,"props":7916,"children":7917},{"style":460},[7918],{"type":400,"value":7919}," +=",{"type":394,"tag":430,"props":7921,"children":7922},{"style":692},[7923],{"type":400,"value":6776},{"type":394,"tag":430,"props":7925,"children":7926},{"class":432,"line":1499},[7927,7932,7936,7940,7944,7948],{"type":394,"tag":430,"props":7928,"children":7929},{"style":676},[7930],{"type":400,"value":7931},"        exec",{"type":394,"tag":430,"props":7933,"children":7934},{"style":1387},[7935],{"type":400,"value":684},{"type":394,"tag":430,"props":7937,"children":7938},{"style":664},[7939],{"type":400,"value":2660},{"type":394,"tag":430,"props":7941,"children":7942},{"style":460},[7943],{"type":400,"value":705},{"type":394,"tag":430,"props":7945,"children":7946},{"style":692},[7947],{"type":400,"value":1799},{"type":394,"tag":430,"props":7949,"children":7950},{"style":1387},[7951],{"type":400,"value":1407},{"type":394,"tag":430,"props":7953,"children":7954},{"class":432,"line":1526},[7955,7960,7964],{"type":394,"tag":430,"props":7956,"children":7957},{"style":670},[7958],{"type":400,"value":7959},"      }",{"type":394,"tag":430,"props":7961,"children":7962},{"style":1693},[7963],{"type":400,"value":5926},{"type":394,"tag":430,"props":7965,"children":7966},{"style":670},[7967],{"type":400,"value":1330},{"type":394,"tag":430,"props":7969,"children":7970},{"class":432,"line":2102},[7971,7975,7979,7983,7987,7991,7996,8000,8004,8008,8012,8016],{"type":394,"tag":430,"props":7972,"children":7973},{"style":664},[7974],{"type":400,"value":7877},{"type":394,"tag":430,"props":7976,"children":7977},{"style":670},[7978],{"type":400,"value":673},{"type":394,"tag":430,"props":7980,"children":7981},{"style":676},[7982],{"type":400,"value":1384},{"type":394,"tag":430,"props":7984,"children":7985},{"style":1387},[7986],{"type":400,"value":684},{"type":394,"tag":430,"props":7988,"children":7989},{"style":443},[7990],{"type":400,"value":457},{"type":394,"tag":430,"props":7992,"children":7993},{"style":449},[7994],{"type":400,"value":7995},"steps: ",{"type":394,"tag":430,"props":7997,"children":7998},{"style":443},[7999],{"type":400,"value":457},{"type":394,"tag":430,"props":8001,"children":8002},{"style":670},[8003],{"type":400,"value":700},{"type":394,"tag":430,"props":8005,"children":8006},{"style":1336},[8007],{"type":400,"value":3783},{"type":394,"tag":430,"props":8009,"children":8010},{"style":670},[8011],{"type":400,"value":673},{"type":394,"tag":430,"props":8013,"children":8014},{"style":664},[8015],{"type":400,"value":7914},{"type":394,"tag":430,"props":8017,"children":8018},{"style":1387},[8019],{"type":400,"value":1407},{"type":394,"tag":430,"props":8021,"children":8022},{"class":432,"line":2162},[8023],{"type":394,"tag":430,"props":8024,"children":8025},{"style":670},[8026],{"type":400,"value":8027},"      }\n",{"type":394,"tag":430,"props":8029,"children":8030},{"class":432,"line":2223},[8031],{"type":394,"tag":430,"props":8032,"children":8033},{"style":670},[8034],{"type":400,"value":2311},{"type":394,"tag":430,"props":8036,"children":8037},{"class":432,"line":2264},[8038,8042,8046,8050,8054],{"type":394,"tag":430,"props":8039,"children":8040},{"style":1693},[8041],{"type":400,"value":2727},{"type":394,"tag":430,"props":8043,"children":8044},{"style":676},[8045],{"type":400,"value":7821},{"type":394,"tag":430,"props":8047,"children":8048},{"style":1387},[8049],{"type":400,"value":684},{"type":394,"tag":430,"props":8051,"children":8052},{"style":664},[8053],{"type":400,"value":7799},{"type":394,"tag":430,"props":8055,"children":8056},{"style":1387},[8057],{"type":400,"value":1407},{"type":394,"tag":430,"props":8059,"children":8060},{"class":432,"line":2305},[8061],{"type":394,"tag":430,"props":8062,"children":8063},{"style":670},[8064],{"type":400,"value":2069},{"type":394,"tag":430,"props":8066,"children":8067},{"class":432,"line":2314},[8068],{"type":394,"tag":430,"props":8069,"children":8070},{"style":670},[8071],{"type":400,"value":1416},{"type":394,"tag":430,"props":8073,"children":8074},{"class":432,"line":2322},[8075,8080,8084,8089,8093,8098,8102],{"type":394,"tag":430,"props":8076,"children":8077},{"style":664},[8078],{"type":400,"value":8079},"obj",{"type":394,"tag":430,"props":8081,"children":8082},{"style":670},[8083],{"type":400,"value":673},{"type":394,"tag":430,"props":8085,"children":8086},{"style":676},[8087],{"type":400,"value":8088},"run",{"type":394,"tag":430,"props":8090,"children":8091},{"style":664},[8092],{"type":400,"value":684},{"type":394,"tag":430,"props":8094,"children":8095},{"style":692},[8096],{"type":400,"value":8097},"10",{"type":394,"tag":430,"props":8099,"children":8100},{"style":664},[8101],{"type":400,"value":714},{"type":394,"tag":430,"props":8103,"children":8104},{"style":717},[8105],{"type":400,"value":8106},"// steps: 10\n",{"type":394,"tag":402,"props":8108,"children":8110},{"id":8109},"函数的行为",[8111],{"type":400,"value":8109},{"type":394,"tag":408,"props":8113,"children":8114},{},[8115],{"type":400,"value":8116},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":394,"tag":408,"props":8118,"children":8119},{},[8120],{"type":400,"value":8121},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":394,"tag":408,"props":8123,"children":8124},{},[8125],{"type":400,"value":8126},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":394,"tag":408,"props":8128,"children":8129},{},[8130],{"type":400,"value":8131},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":394,"tag":419,"props":8133,"children":8135},{"className":652,"code":8134,"language":654,"meta":388,"style":388},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8136],{"type":394,"tag":426,"props":8137,"children":8138},{"__ignoreMap":388},[8139,8164,8176,8188,8200,8211,8228,8264,8271,8278,8302,8314,8361,8394,8439,8454,8490,8511,8519,8527,8536,8545],{"type":394,"tag":430,"props":8140,"children":8141},{"class":432,"line":433},[8142,8146,8151,8156,8160],{"type":394,"tag":430,"props":8143,"children":8144},{"style":987},[8145],{"type":400,"value":1315},{"type":394,"tag":430,"props":8147,"children":8148},{"style":460},[8149],{"type":400,"value":8150},"*",{"type":394,"tag":430,"props":8152,"children":8153},{"style":676},[8154],{"type":400,"value":8155}," GetThisDone",{"type":394,"tag":430,"props":8157,"children":8158},{"style":670},[8159],{"type":400,"value":1038},{"type":394,"tag":430,"props":8161,"children":8162},{"style":670},[8163],{"type":400,"value":1330},{"type":394,"tag":430,"props":8165,"children":8166},{"class":432,"line":723},[8167,8172],{"type":394,"tag":430,"props":8168,"children":8169},{"style":1693},[8170],{"type":400,"value":8171},"  try",{"type":394,"tag":430,"props":8173,"children":8174},{"style":670},[8175],{"type":400,"value":1330},{"type":394,"tag":430,"props":8177,"children":8178},{"class":432,"line":1369},[8179,8184],{"type":394,"tag":430,"props":8180,"children":8181},{"style":1693},[8182],{"type":400,"value":8183},"    yield",{"type":394,"tag":430,"props":8185,"children":8186},{"style":692},[8187],{"type":400,"value":6776},{"type":394,"tag":430,"props":8189,"children":8190},{"class":432,"line":1410},[8191,8195],{"type":394,"tag":430,"props":8192,"children":8193},{"style":1693},[8194],{"type":400,"value":8183},{"type":394,"tag":430,"props":8196,"children":8197},{"style":692},[8198],{"type":400,"value":8199}," 10\n",{"type":394,"tag":430,"props":8201,"children":8202},{"class":432,"line":1419},[8203,8207],{"type":394,"tag":430,"props":8204,"children":8205},{"style":1693},[8206],{"type":400,"value":8183},{"type":394,"tag":430,"props":8208,"children":8209},{"style":692},[8210],{"type":400,"value":6776},{"type":394,"tag":430,"props":8212,"children":8213},{"class":432,"line":1454},[8214,8219,8224],{"type":394,"tag":430,"props":8215,"children":8216},{"style":670},[8217],{"type":400,"value":8218},"  }",{"type":394,"tag":430,"props":8220,"children":8221},{"style":1693},[8222],{"type":400,"value":8223}," finally",{"type":394,"tag":430,"props":8225,"children":8226},{"style":670},[8227],{"type":400,"value":1330},{"type":394,"tag":430,"props":8229,"children":8230},{"class":432,"line":1491},[8231,8235,8239,8243,8247,8251,8256,8260],{"type":394,"tag":430,"props":8232,"children":8233},{"style":664},[8234],{"type":400,"value":7256},{"type":394,"tag":430,"props":8236,"children":8237},{"style":670},[8238],{"type":400,"value":673},{"type":394,"tag":430,"props":8240,"children":8241},{"style":676},[8242],{"type":400,"value":1384},{"type":394,"tag":430,"props":8244,"children":8245},{"style":1387},[8246],{"type":400,"value":684},{"type":394,"tag":430,"props":8248,"children":8249},{"style":443},[8250],{"type":400,"value":457},{"type":394,"tag":430,"props":8252,"children":8253},{"style":449},[8254],{"type":400,"value":8255},"done",{"type":394,"tag":430,"props":8257,"children":8258},{"style":443},[8259],{"type":400,"value":457},{"type":394,"tag":430,"props":8261,"children":8262},{"style":1387},[8263],{"type":400,"value":1407},{"type":394,"tag":430,"props":8265,"children":8266},{"class":432,"line":1499},[8267],{"type":394,"tag":430,"props":8268,"children":8269},{"style":670},[8270],{"type":400,"value":2069},{"type":394,"tag":430,"props":8272,"children":8273},{"class":432,"line":1526},[8274],{"type":394,"tag":430,"props":8275,"children":8276},{"style":670},[8277],{"type":400,"value":1416},{"type":394,"tag":430,"props":8279,"children":8280},{"class":432,"line":2102},[8281,8285,8290,8294,8298],{"type":394,"tag":430,"props":8282,"children":8283},{"style":987},[8284],{"type":400,"value":5788},{"type":394,"tag":430,"props":8286,"children":8287},{"style":1423},[8288],{"type":400,"value":8289}," get",{"type":394,"tag":430,"props":8291,"children":8292},{"style":460},[8293],{"type":400,"value":1353},{"type":394,"tag":430,"props":8295,"children":8296},{"style":676},[8297],{"type":400,"value":8155},{"type":394,"tag":430,"props":8299,"children":8300},{"style":664},[8301],{"type":400,"value":3332},{"type":394,"tag":430,"props":8303,"children":8304},{"class":432,"line":2162},[8305,8309],{"type":394,"tag":430,"props":8306,"children":8307},{"style":987},[8308],{"type":400,"value":990},{"type":394,"tag":430,"props":8310,"children":8311},{"style":664},[8312],{"type":400,"value":8313}," val\n",{"type":394,"tag":430,"props":8315,"children":8316},{"class":432,"line":2223},[8317,8322,8327,8331,8335,8339,8344,8348,8352,8357],{"type":394,"tag":430,"props":8318,"children":8319},{"style":1693},[8320],{"type":400,"value":8321},"while",{"type":394,"tag":430,"props":8323,"children":8324},{"style":664},[8325],{"type":400,"value":8326}," (val ",{"type":394,"tag":430,"props":8328,"children":8329},{"style":460},[8330],{"type":400,"value":1864},{"type":394,"tag":430,"props":8332,"children":8333},{"style":664},[8334],{"type":400,"value":8289},{"type":394,"tag":430,"props":8336,"children":8337},{"style":670},[8338],{"type":400,"value":673},{"type":394,"tag":430,"props":8340,"children":8341},{"style":676},[8342],{"type":400,"value":8343},"next",{"type":394,"tag":430,"props":8345,"children":8346},{"style":664},[8347],{"type":400,"value":1038},{"type":394,"tag":430,"props":8349,"children":8350},{"style":670},[8351],{"type":400,"value":673},{"type":394,"tag":430,"props":8353,"children":8354},{"style":664},[8355],{"type":400,"value":8356},"value) ",{"type":394,"tag":430,"props":8358,"children":8359},{"style":670},[8360],{"type":400,"value":1739},{"type":394,"tag":430,"props":8362,"children":8363},{"class":432,"line":2264},[8364,8368,8372,8377,8381,8386,8390],{"type":394,"tag":430,"props":8365,"children":8366},{"style":1693},[8367],{"type":400,"value":6519},{"type":394,"tag":430,"props":8369,"children":8370},{"style":1387},[8371],{"type":400,"value":1922},{"type":394,"tag":430,"props":8373,"children":8374},{"style":664},[8375],{"type":400,"value":8376},"val",{"type":394,"tag":430,"props":8378,"children":8379},{"style":460},[8380],{"type":400,"value":1950},{"type":394,"tag":430,"props":8382,"children":8383},{"style":692},[8384],{"type":400,"value":8385}," 10",{"type":394,"tag":430,"props":8387,"children":8388},{"style":1387},[8389],{"type":400,"value":714},{"type":394,"tag":430,"props":8391,"children":8392},{"style":670},[8393],{"type":400,"value":1739},{"type":394,"tag":430,"props":8395,"children":8396},{"class":432,"line":2305},[8397,8401,8405,8409,8413,8417,8422,8426,8430,8435],{"type":394,"tag":430,"props":8398,"children":8399},{"style":664},[8400],{"type":400,"value":7256},{"type":394,"tag":430,"props":8402,"children":8403},{"style":670},[8404],{"type":400,"value":673},{"type":394,"tag":430,"props":8406,"children":8407},{"style":676},[8408],{"type":400,"value":1384},{"type":394,"tag":430,"props":8410,"children":8411},{"style":1387},[8412],{"type":400,"value":684},{"type":394,"tag":430,"props":8414,"children":8415},{"style":443},[8416],{"type":400,"value":457},{"type":394,"tag":430,"props":8418,"children":8419},{"style":449},[8420],{"type":400,"value":8421},"right val:",{"type":394,"tag":430,"props":8423,"children":8424},{"style":443},[8425],{"type":400,"value":457},{"type":394,"tag":430,"props":8427,"children":8428},{"style":670},[8429],{"type":400,"value":700},{"type":394,"tag":430,"props":8431,"children":8432},{"style":664},[8433],{"type":400,"value":8434}," val",{"type":394,"tag":430,"props":8436,"children":8437},{"style":1387},[8438],{"type":400,"value":1407},{"type":394,"tag":430,"props":8440,"children":8441},{"class":432,"line":2314},[8442,8446,8450],{"type":394,"tag":430,"props":8443,"children":8444},{"style":670},[8445],{"type":400,"value":8218},{"type":394,"tag":430,"props":8447,"children":8448},{"style":1693},[8449],{"type":400,"value":5926},{"type":394,"tag":430,"props":8451,"children":8452},{"style":670},[8453],{"type":400,"value":1330},{"type":394,"tag":430,"props":8455,"children":8456},{"class":432,"line":2322},[8457,8461,8465,8469,8473,8477,8482,8486],{"type":394,"tag":430,"props":8458,"children":8459},{"style":664},[8460],{"type":400,"value":7256},{"type":394,"tag":430,"props":8462,"children":8463},{"style":670},[8464],{"type":400,"value":673},{"type":394,"tag":430,"props":8466,"children":8467},{"style":676},[8468],{"type":400,"value":1384},{"type":394,"tag":430,"props":8470,"children":8471},{"style":1387},[8472],{"type":400,"value":684},{"type":394,"tag":430,"props":8474,"children":8475},{"style":443},[8476],{"type":400,"value":457},{"type":394,"tag":430,"props":8478,"children":8479},{"style":449},[8480],{"type":400,"value":8481},"wrong val",{"type":394,"tag":430,"props":8483,"children":8484},{"style":443},[8485],{"type":400,"value":457},{"type":394,"tag":430,"props":8487,"children":8488},{"style":1387},[8489],{"type":400,"value":1407},{"type":394,"tag":430,"props":8491,"children":8492},{"class":432,"line":5996},[8493,8498,8502,8507],{"type":394,"tag":430,"props":8494,"children":8495},{"style":664},[8496],{"type":400,"value":8497},"    get",{"type":394,"tag":430,"props":8499,"children":8500},{"style":670},[8501],{"type":400,"value":673},{"type":394,"tag":430,"props":8503,"children":8504},{"style":676},[8505],{"type":400,"value":8506},"return",{"type":394,"tag":430,"props":8508,"children":8509},{"style":1387},[8510],{"type":400,"value":3332},{"type":394,"tag":430,"props":8512,"children":8514},{"class":432,"line":8513},18,[8515],{"type":394,"tag":430,"props":8516,"children":8517},{"style":670},[8518],{"type":400,"value":2069},{"type":394,"tag":430,"props":8520,"children":8522},{"class":432,"line":8521},19,[8523],{"type":394,"tag":430,"props":8524,"children":8525},{"style":670},[8526],{"type":400,"value":1416},{"type":394,"tag":430,"props":8528,"children":8530},{"class":432,"line":8529},20,[8531],{"type":394,"tag":430,"props":8532,"children":8533},{"style":717},[8534],{"type":400,"value":8535},"// right val: 1\n",{"type":394,"tag":430,"props":8537,"children":8539},{"class":432,"line":8538},21,[8540],{"type":394,"tag":430,"props":8541,"children":8542},{"style":717},[8543],{"type":400,"value":8544},"// wrong val\n",{"type":394,"tag":430,"props":8546,"children":8548},{"class":432,"line":8547},22,[8549],{"type":394,"tag":430,"props":8550,"children":8551},{"style":717},[8552],{"type":400,"value":8553},"// done\n",{"type":394,"tag":402,"props":8555,"children":8557},{"id":8556},"闭包",[8558],{"type":400,"value":8556},{"type":394,"tag":408,"props":8560,"children":8561},{},[8562],{"type":400,"value":8563},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":394,"tag":408,"props":8565,"children":8566},{},[8567],{"type":400,"value":8568},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":394,"tag":508,"props":8570,"children":8571},{},[8572,8577,8582],{"type":394,"tag":512,"props":8573,"children":8574},{},[8575],{"type":400,"value":8576},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":394,"tag":512,"props":8578,"children":8579},{},[8580],{"type":400,"value":8581},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":394,"tag":512,"props":8583,"children":8584},{},[8585],{"type":400,"value":8586},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":394,"tag":408,"props":8588,"children":8589},{},[8590],{"type":400,"value":8591},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":394,"tag":419,"props":8593,"children":8595},{"className":652,"code":8594,"language":654,"meta":388,"style":388},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8596],{"type":394,"tag":426,"props":8597,"children":8598},{"__ignoreMap":388},[8599,8618,8633,8640,8651],{"type":394,"tag":430,"props":8600,"children":8601},{"class":432,"line":433},[8602,8606,8610,8614],{"type":394,"tag":430,"props":8603,"children":8604},{"style":987},[8605],{"type":400,"value":1315},{"type":394,"tag":430,"props":8607,"children":8608},{"style":676},[8609],{"type":400,"value":2015},{"type":394,"tag":430,"props":8611,"children":8612},{"style":670},[8613],{"type":400,"value":1325},{"type":394,"tag":430,"props":8615,"children":8616},{"style":670},[8617],{"type":400,"value":1330},{"type":394,"tag":430,"props":8619,"children":8620},{"class":432,"line":723},[8621,8625,8629],{"type":394,"tag":430,"props":8622,"children":8623},{"style":664},[8624],{"type":400,"value":2763},{"type":394,"tag":430,"props":8626,"children":8627},{"style":460},[8628],{"type":400,"value":1353},{"type":394,"tag":430,"props":8630,"children":8631},{"style":692},[8632],{"type":400,"value":6776},{"type":394,"tag":430,"props":8634,"children":8635},{"class":432,"line":1369},[8636],{"type":394,"tag":430,"props":8637,"children":8638},{"style":670},[8639],{"type":400,"value":1416},{"type":394,"tag":430,"props":8641,"children":8642},{"class":432,"line":1410},[8643,8647],{"type":394,"tag":430,"props":8644,"children":8645},{"style":676},[8646],{"type":400,"value":1715},{"type":394,"tag":430,"props":8648,"children":8649},{"style":664},[8650],{"type":400,"value":3332},{"type":394,"tag":430,"props":8652,"children":8653},{"class":432,"line":1419},[8654,8658,8662,8666,8670,8674,8679],{"type":394,"tag":430,"props":8655,"children":8656},{"style":664},[8657],{"type":400,"value":5013},{"type":394,"tag":430,"props":8659,"children":8660},{"style":670},[8661],{"type":400,"value":673},{"type":394,"tag":430,"props":8663,"children":8664},{"style":676},[8665],{"type":400,"value":1384},{"type":394,"tag":430,"props":8667,"children":8668},{"style":664},[8669],{"type":400,"value":684},{"type":394,"tag":430,"props":8671,"children":8672},{"style":460},[8673],{"type":400,"value":943},{"type":394,"tag":430,"props":8675,"children":8676},{"style":664},[8677],{"type":400,"value":8678}," test) ",{"type":394,"tag":430,"props":8680,"children":8681},{"style":717},[8682],{"type":400,"value":8683},"// number\n",{"type":394,"tag":408,"props":8685,"children":8686},{},[8687],{"type":400,"value":8688},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":394,"tag":408,"props":8690,"children":8691},{},[8692],{"type":400,"value":8693},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":394,"tag":419,"props":8695,"children":8697},{"className":652,"code":8696,"language":654,"meta":388,"style":388},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8698],{"type":394,"tag":426,"props":8699,"children":8700},{"__ignoreMap":388},[8701,8737,8757,8774,8794,8817,8833,8840],{"type":394,"tag":430,"props":8702,"children":8703},{"class":432,"line":433},[8704,8708,8712,8716,8720,8725,8729,8733],{"type":394,"tag":430,"props":8705,"children":8706},{"style":987},[8707],{"type":400,"value":990},{"type":394,"tag":430,"props":8709,"children":8710},{"style":664},[8711],{"type":400,"value":3135},{"type":394,"tag":430,"props":8713,"children":8714},{"style":460},[8715],{"type":400,"value":1864},{"type":394,"tag":430,"props":8717,"children":8718},{"style":670},[8719],{"type":400,"value":1701},{"type":394,"tag":430,"props":8721,"children":8722},{"style":1387},[8723],{"type":400,"value":8724}," value",{"type":394,"tag":430,"props":8726,"children":8727},{"style":670},[8728],{"type":400,"value":1849},{"type":394,"tag":430,"props":8730,"children":8731},{"style":692},[8732],{"type":400,"value":499},{"type":394,"tag":430,"props":8734,"children":8735},{"style":670},[8736],{"type":400,"value":3162},{"type":394,"tag":430,"props":8738,"children":8739},{"class":432,"line":723},[8740,8744,8749,8753],{"type":394,"tag":430,"props":8741,"children":8742},{"style":987},[8743],{"type":400,"value":990},{"type":394,"tag":430,"props":8745,"children":8746},{"style":664},[8747],{"type":400,"value":8748}," b ",{"type":394,"tag":430,"props":8750,"children":8751},{"style":460},[8752],{"type":400,"value":1864},{"type":394,"tag":430,"props":8754,"children":8755},{"style":692},[8756],{"type":400,"value":6776},{"type":394,"tag":430,"props":8758,"children":8759},{"class":432,"line":1369},[8760,8765,8770],{"type":394,"tag":430,"props":8761,"children":8762},{"style":1693},[8763],{"type":400,"value":8764},"with",{"type":394,"tag":430,"props":8766,"children":8767},{"style":664},[8768],{"type":400,"value":8769}," (a) ",{"type":394,"tag":430,"props":8771,"children":8772},{"style":670},[8773],{"type":400,"value":1739},{"type":394,"tag":430,"props":8775,"children":8776},{"class":432,"line":1410},[8777,8782,8786,8790],{"type":394,"tag":430,"props":8778,"children":8779},{"style":987},[8780],{"type":400,"value":8781}," var",{"type":394,"tag":430,"props":8783,"children":8784},{"style":664},[8785],{"type":400,"value":8724},{"type":394,"tag":430,"props":8787,"children":8788},{"style":460},[8789],{"type":400,"value":1353},{"type":394,"tag":430,"props":8791,"children":8792},{"style":692},[8793],{"type":400,"value":6352},{"type":394,"tag":430,"props":8795,"children":8796},{"class":432,"line":1419},[8797,8801,8805,8809,8813],{"type":394,"tag":430,"props":8798,"children":8799},{"style":664},[8800],{"type":400,"value":3215},{"type":394,"tag":430,"props":8802,"children":8803},{"style":670},[8804],{"type":400,"value":673},{"type":394,"tag":430,"props":8806,"children":8807},{"style":664},[8808],{"type":400,"value":1348},{"type":394,"tag":430,"props":8810,"children":8811},{"style":460},[8812],{"type":400,"value":1353},{"type":394,"tag":430,"props":8814,"children":8815},{"style":692},[8816],{"type":400,"value":6776},{"type":394,"tag":430,"props":8818,"children":8819},{"class":432,"line":1454},[8820,8824,8828],{"type":394,"tag":430,"props":8821,"children":8822},{"style":664},[8823],{"type":400,"value":7033},{"type":394,"tag":430,"props":8825,"children":8826},{"style":460},[8827],{"type":400,"value":1353},{"type":394,"tag":430,"props":8829,"children":8830},{"style":692},[8831],{"type":400,"value":8832}," 2\n",{"type":394,"tag":430,"props":8834,"children":8835},{"class":432,"line":1491},[8836],{"type":394,"tag":430,"props":8837,"children":8838},{"style":670},[8839],{"type":400,"value":1416},{"type":394,"tag":430,"props":8841,"children":8842},{"class":432,"line":1499},[8843,8847,8851,8855,8859,8863,8867,8871,8876],{"type":394,"tag":430,"props":8844,"children":8845},{"style":664},[8846],{"type":400,"value":5013},{"type":394,"tag":430,"props":8848,"children":8849},{"style":670},[8850],{"type":400,"value":673},{"type":394,"tag":430,"props":8852,"children":8853},{"style":676},[8854],{"type":400,"value":1384},{"type":394,"tag":430,"props":8856,"children":8857},{"style":664},[8858],{"type":400,"value":7319},{"type":394,"tag":430,"props":8860,"children":8861},{"style":670},[8862],{"type":400,"value":700},{"type":394,"tag":430,"props":8864,"children":8865},{"style":664},[8866],{"type":400,"value":7033},{"type":394,"tag":430,"props":8868,"children":8869},{"style":670},[8870],{"type":400,"value":700},{"type":394,"tag":430,"props":8872,"children":8873},{"style":664},[8874],{"type":400,"value":8875}," value) ",{"type":394,"tag":430,"props":8877,"children":8878},{"style":717},[8879],{"type":400,"value":8880},"// { value:100, b:2 }, 1, undefined\n",{"type":394,"tag":408,"props":8882,"children":8883},{},[8884],{"type":400,"value":8885},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":394,"tag":408,"props":8887,"children":8888},{},[8889],{"type":400,"value":8890},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":394,"tag":408,"props":8892,"children":8893},{},[8894],{"type":400,"value":8895},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":394,"tag":408,"props":8897,"children":8898},{},[8899],{"type":400,"value":8900},"闭包内标识符系统的优先级规则：",{"type":394,"tag":508,"props":8902,"children":8903},{},[8904,8909,8914],{"type":394,"tag":512,"props":8905,"children":8906},{},[8907],{"type":400,"value":8908},"内部函数声明 > 函数参数名列表",{"type":394,"tag":512,"props":8910,"children":8911},{},[8912],{"type":400,"value":8913},"参数中的 arguments 名字 > 函数的 arguments",{"type":394,"tag":512,"props":8915,"children":8916},{},[8917],{"type":400,"value":8918},"var 声明的名字如果已存在，则不再创建新变量",{"type":394,"tag":408,"props":8920,"children":8921},{},[8922],{"type":400,"value":8923},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":394,"tag":395,"props":8925,"children":8927},{"id":8926},"动态语言特性",[8928],{"type":400,"value":8926},{"type":394,"tag":402,"props":8930,"children":8932},{"id":8931},"概述-2",[8933],{"type":400,"value":6050},{"type":394,"tag":408,"props":8935,"children":8936},{},[8937],{"type":400,"value":8938},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":394,"tag":408,"props":8940,"children":8941},{},[8942],{"type":400,"value":8943},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":394,"tag":402,"props":8945,"children":8947},{"id":8946},"对象与值类型之间的转换",[8948],{"type":400,"value":8946},{"type":394,"tag":408,"props":8950,"children":8951},{},[8952],{"type":400,"value":8953},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":394,"tag":419,"props":8955,"children":8957},{"className":652,"code":8956,"language":654,"meta":388,"style":388},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8958],{"type":394,"tag":426,"props":8959,"children":8960},{"__ignoreMap":388},[8961,9009,9032,9040,9084,9091],{"type":394,"tag":430,"props":8962,"children":8963},{"class":432,"line":433},[8964,8968,8973,8977,8981,8985,8989,8993,8997,9001,9005],{"type":394,"tag":430,"props":8965,"children":8966},{"style":987},[8967],{"type":400,"value":2625},{"type":394,"tag":430,"props":8969,"children":8970},{"style":7818},[8971],{"type":400,"value":8972}," toString",{"type":394,"tag":430,"props":8974,"children":8975},{"style":460},[8976],{"type":400,"value":1353},{"type":394,"tag":430,"props":8978,"children":8979},{"style":670},[8980],{"type":400,"value":1325},{"type":394,"tag":430,"props":8982,"children":8983},{"style":987},[8984],{"type":400,"value":5724},{"type":394,"tag":430,"props":8986,"children":8987},{"style":664},[8988],{"type":400,"value":2032},{"type":394,"tag":430,"props":8990,"children":8991},{"style":670},[8992],{"type":400,"value":673},{"type":394,"tag":430,"props":8994,"children":8995},{"style":676},[8996],{"type":400,"value":1384},{"type":394,"tag":430,"props":8998,"children":8999},{"style":664},[9000],{"type":400,"value":684},{"type":394,"tag":430,"props":9002,"children":9003},{"style":692},[9004],{"type":400,"value":499},{"type":394,"tag":430,"props":9006,"children":9007},{"style":664},[9008],{"type":400,"value":1407},{"type":394,"tag":430,"props":9010,"children":9011},{"class":432,"line":723},[9012,9016,9020,9024,9028],{"type":394,"tag":430,"props":9013,"children":9014},{"style":1693},[9015],{"type":400,"value":8764},{"type":394,"tag":430,"props":9017,"children":9018},{"style":664},[9019],{"type":400,"value":1922},{"type":394,"tag":430,"props":9021,"children":9022},{"style":692},[9023],{"type":400,"value":499},{"type":394,"tag":430,"props":9025,"children":9026},{"style":664},[9027],{"type":400,"value":714},{"type":394,"tag":430,"props":9029,"children":9030},{"style":670},[9031],{"type":400,"value":1739},{"type":394,"tag":430,"props":9033,"children":9034},{"class":432,"line":1369},[9035],{"type":394,"tag":430,"props":9036,"children":9037},{"style":717},[9038],{"type":400,"value":9039},"  // equal to (1).toString = ...\n",{"type":394,"tag":430,"props":9041,"children":9042},{"class":432,"line":1410},[9043,9048,9052,9056,9060,9064,9068,9072,9076,9080],{"type":394,"tag":430,"props":9044,"children":9045},{"style":676},[9046],{"type":400,"value":9047},"  toString",{"type":394,"tag":430,"props":9049,"children":9050},{"style":460},[9051],{"type":400,"value":1353},{"type":394,"tag":430,"props":9053,"children":9054},{"style":670},[9055],{"type":400,"value":1325},{"type":394,"tag":430,"props":9057,"children":9058},{"style":987},[9059],{"type":400,"value":5724},{"type":394,"tag":430,"props":9061,"children":9062},{"style":664},[9063],{"type":400,"value":2032},{"type":394,"tag":430,"props":9065,"children":9066},{"style":670},[9067],{"type":400,"value":673},{"type":394,"tag":430,"props":9069,"children":9070},{"style":676},[9071],{"type":400,"value":1384},{"type":394,"tag":430,"props":9073,"children":9074},{"style":1387},[9075],{"type":400,"value":684},{"type":394,"tag":430,"props":9077,"children":9078},{"style":692},[9079],{"type":400,"value":527},{"type":394,"tag":430,"props":9081,"children":9082},{"style":1387},[9083],{"type":400,"value":1407},{"type":394,"tag":430,"props":9085,"children":9086},{"class":432,"line":1419},[9087],{"type":394,"tag":430,"props":9088,"children":9089},{"style":670},[9090],{"type":400,"value":1416},{"type":394,"tag":430,"props":9092,"children":9093},{"class":432,"line":1454},[9094,9098,9102,9106,9110,9115,9119],{"type":394,"tag":430,"props":9095,"children":9096},{"style":664},[9097],{"type":400,"value":5013},{"type":394,"tag":430,"props":9099,"children":9100},{"style":670},[9101],{"type":400,"value":673},{"type":394,"tag":430,"props":9103,"children":9104},{"style":676},[9105],{"type":400,"value":1384},{"type":394,"tag":430,"props":9107,"children":9108},{"style":664},[9109],{"type":400,"value":684},{"type":394,"tag":430,"props":9111,"children":9112},{"style":676},[9113],{"type":400,"value":9114},"toString",{"type":394,"tag":430,"props":9116,"children":9117},{"style":664},[9118],{"type":400,"value":802},{"type":394,"tag":430,"props":9120,"children":9121},{"style":717},[9122],{"type":400,"value":6722},{"type":394,"tag":408,"props":9124,"children":9125},{},[9126],{"type":400,"value":9127},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":394,"tag":408,"props":9129,"children":9130},{},[9131],{"type":400,"value":9132},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":394,"tag":419,"props":9134,"children":9136},{"className":652,"code":9135,"language":654,"meta":388,"style":388},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9137],{"type":394,"tag":426,"props":9138,"children":9139},{"__ignoreMap":388},[9140,9182,9225],{"type":394,"tag":430,"props":9141,"children":9142},{"class":432,"line":433},[9143,9148,9152,9156,9160,9165,9169,9173,9177],{"type":394,"tag":430,"props":9144,"children":9145},{"style":2812},[9146],{"type":400,"value":9147},"String",{"type":394,"tag":430,"props":9149,"children":9150},{"style":670},[9151],{"type":400,"value":673},{"type":394,"tag":430,"props":9153,"children":9154},{"style":1423},[9155],{"type":400,"value":2823},{"type":394,"tag":430,"props":9157,"children":9158},{"style":670},[9159],{"type":400,"value":673},{"type":394,"tag":430,"props":9161,"children":9162},{"style":676},[9163],{"type":400,"value":9164},"valueOf",{"type":394,"tag":430,"props":9166,"children":9167},{"style":460},[9168],{"type":400,"value":1353},{"type":394,"tag":430,"props":9170,"children":9171},{"style":670},[9172],{"type":400,"value":1325},{"type":394,"tag":430,"props":9174,"children":9175},{"style":987},[9176],{"type":400,"value":5724},{"type":394,"tag":430,"props":9178,"children":9179},{"style":692},[9180],{"type":400,"value":9181}," 0\n",{"type":394,"tag":430,"props":9183,"children":9184},{"class":432,"line":723},[9185,9189,9193,9197,9201,9205,9209,9213,9217,9221],{"type":394,"tag":430,"props":9186,"children":9187},{"style":664},[9188],{"type":400,"value":5013},{"type":394,"tag":430,"props":9190,"children":9191},{"style":670},[9192],{"type":400,"value":673},{"type":394,"tag":430,"props":9194,"children":9195},{"style":676},[9196],{"type":400,"value":1384},{"type":394,"tag":430,"props":9198,"children":9199},{"style":664},[9200],{"type":400,"value":684},{"type":394,"tag":430,"props":9202,"children":9203},{"style":460},[9204],{"type":400,"value":689},{"type":394,"tag":430,"props":9206,"children":9207},{"style":443},[9208],{"type":400,"value":457},{"type":394,"tag":430,"props":9210,"children":9211},{"style":449},[9212],{"type":400,"value":499},{"type":394,"tag":430,"props":9214,"children":9215},{"style":443},[9216],{"type":400,"value":457},{"type":394,"tag":430,"props":9218,"children":9219},{"style":664},[9220],{"type":400,"value":714},{"type":394,"tag":430,"props":9222,"children":9223},{"style":717},[9224],{"type":400,"value":6722},{"type":394,"tag":430,"props":9226,"children":9227},{"class":432,"line":1369},[9228,9232,9236,9240,9244,9249,9253,9257,9261,9265,9269,9274],{"type":394,"tag":430,"props":9229,"children":9230},{"style":664},[9231],{"type":400,"value":5013},{"type":394,"tag":430,"props":9233,"children":9234},{"style":670},[9235],{"type":400,"value":673},{"type":394,"tag":430,"props":9237,"children":9238},{"style":676},[9239],{"type":400,"value":1384},{"type":394,"tag":430,"props":9241,"children":9242},{"style":664},[9243],{"type":400,"value":684},{"type":394,"tag":430,"props":9245,"children":9246},{"style":460},[9247],{"type":400,"value":9248},"+new",{"type":394,"tag":430,"props":9250,"children":9251},{"style":676},[9252],{"type":400,"value":4104},{"type":394,"tag":430,"props":9254,"children":9255},{"style":664},[9256],{"type":400,"value":684},{"type":394,"tag":430,"props":9258,"children":9259},{"style":443},[9260],{"type":400,"value":457},{"type":394,"tag":430,"props":9262,"children":9263},{"style":449},[9264],{"type":400,"value":499},{"type":394,"tag":430,"props":9266,"children":9267},{"style":443},[9268],{"type":400,"value":457},{"type":394,"tag":430,"props":9270,"children":9271},{"style":664},[9272],{"type":400,"value":9273},")) ",{"type":394,"tag":430,"props":9275,"children":9276},{"style":717},[9277],{"type":400,"value":9278},"// 0\n",{"type":394,"tag":408,"props":9280,"children":9281},{},[9282],{"type":400,"value":9283},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":394,"tag":419,"props":9285,"children":9287},{"className":652,"code":9286,"language":654,"meta":388,"style":388},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9288],{"type":394,"tag":426,"props":9289,"children":9290},{"__ignoreMap":388},[9291,9328,9360,9392],{"type":394,"tag":430,"props":9292,"children":9293},{"class":432,"line":433},[9294,9298,9303,9307,9311,9315,9319,9324],{"type":394,"tag":430,"props":9295,"children":9296},{"style":987},[9297],{"type":400,"value":5788},{"type":394,"tag":430,"props":9299,"children":9300},{"style":1423},[9301],{"type":400,"value":9302}," f",{"type":394,"tag":430,"props":9304,"children":9305},{"style":460},[9306],{"type":400,"value":1353},{"type":394,"tag":430,"props":9308,"children":9309},{"style":460},[9310],{"type":400,"value":2832},{"type":394,"tag":430,"props":9312,"children":9313},{"style":676},[9314],{"type":400,"value":4104},{"type":394,"tag":430,"props":9316,"children":9317},{"style":664},[9318],{"type":400,"value":684},{"type":394,"tag":430,"props":9320,"children":9321},{"style":826},[9322],{"type":400,"value":9323},"false",{"type":394,"tag":430,"props":9325,"children":9326},{"style":664},[9327],{"type":400,"value":1407},{"type":394,"tag":430,"props":9329,"children":9330},{"class":432,"line":723},[9331,9335,9339,9343,9347,9351,9356],{"type":394,"tag":430,"props":9332,"children":9333},{"style":664},[9334],{"type":400,"value":5013},{"type":394,"tag":430,"props":9336,"children":9337},{"style":670},[9338],{"type":400,"value":673},{"type":394,"tag":430,"props":9340,"children":9341},{"style":676},[9342],{"type":400,"value":1384},{"type":394,"tag":430,"props":9344,"children":9345},{"style":664},[9346],{"type":400,"value":684},{"type":394,"tag":430,"props":9348,"children":9349},{"style":460},[9350],{"type":400,"value":689},{"type":394,"tag":430,"props":9352,"children":9353},{"style":664},[9354],{"type":400,"value":9355},"f) ",{"type":394,"tag":430,"props":9357,"children":9358},{"style":717},[9359],{"type":400,"value":9278},{"type":394,"tag":430,"props":9361,"children":9362},{"class":432,"line":1369},[9363,9367,9371,9375,9379,9384,9388],{"type":394,"tag":430,"props":9364,"children":9365},{"style":664},[9366],{"type":400,"value":5013},{"type":394,"tag":430,"props":9368,"children":9369},{"style":670},[9370],{"type":400,"value":673},{"type":394,"tag":430,"props":9372,"children":9373},{"style":676},[9374],{"type":400,"value":1384},{"type":394,"tag":430,"props":9376,"children":9377},{"style":664},[9378],{"type":400,"value":684},{"type":394,"tag":430,"props":9380,"children":9381},{"style":460},[9382],{"type":400,"value":9383},"!!",{"type":394,"tag":430,"props":9385,"children":9386},{"style":664},[9387],{"type":400,"value":9355},{"type":394,"tag":430,"props":9389,"children":9390},{"style":717},[9391],{"type":400,"value":764},{"type":394,"tag":430,"props":9393,"children":9394},{"class":432,"line":1410},[9395,9399,9403,9407,9411,9415,9420],{"type":394,"tag":430,"props":9396,"children":9397},{"style":664},[9398],{"type":400,"value":5013},{"type":394,"tag":430,"props":9400,"children":9401},{"style":670},[9402],{"type":400,"value":673},{"type":394,"tag":430,"props":9404,"children":9405},{"style":676},[9406],{"type":400,"value":1384},{"type":394,"tag":430,"props":9408,"children":9409},{"style":664},[9410],{"type":400,"value":684},{"type":394,"tag":430,"props":9412,"children":9413},{"style":676},[9414],{"type":400,"value":789},{"type":394,"tag":430,"props":9416,"children":9417},{"style":664},[9418],{"type":400,"value":9419},"(f)) ",{"type":394,"tag":430,"props":9421,"children":9422},{"style":717},[9423],{"type":400,"value":764},{"type":394,"tag":408,"props":9425,"children":9426},{},[9427],{"type":400,"value":9428},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":394,"tag":402,"props":9430,"children":9432},{"id":9431},"值类型的转换",[9433],{"type":400,"value":9431},{"type":394,"tag":408,"props":9435,"children":9436},{},[9437],{"type":400,"value":9438},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":394,"tag":408,"props":9440,"children":9441},{},[9442],{"type":400,"value":9443},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":394,"tag":408,"props":9445,"children":9446},{},[9447],{"type":400,"value":9448},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":394,"tag":419,"props":9450,"children":9452},{"className":652,"code":9451,"language":654,"meta":388,"style":388},"parseInt(1e35) // 1\n",[9453],{"type":394,"tag":426,"props":9454,"children":9455},{"__ignoreMap":388},[9456],{"type":394,"tag":430,"props":9457,"children":9458},{"class":432,"line":433},[9459,9464,9468,9473,9477],{"type":394,"tag":430,"props":9460,"children":9461},{"style":676},[9462],{"type":400,"value":9463},"parseInt",{"type":394,"tag":430,"props":9465,"children":9466},{"style":664},[9467],{"type":400,"value":684},{"type":394,"tag":430,"props":9469,"children":9470},{"style":692},[9471],{"type":400,"value":9472},"1e35",{"type":394,"tag":430,"props":9474,"children":9475},{"style":664},[9476],{"type":400,"value":714},{"type":394,"tag":430,"props":9478,"children":9479},{"style":717},[9480],{"type":400,"value":6722},{"type":394,"tag":408,"props":9482,"children":9483},{},[9484],{"type":400,"value":9485},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":394,"tag":419,"props":9487,"children":9489},{"className":652,"code":9488,"language":654,"meta":388,"style":388},"String() // ''\nString(undefined) // undefined\n",[9490],{"type":394,"tag":426,"props":9491,"children":9492},{"__ignoreMap":388},[9493,9509],{"type":394,"tag":430,"props":9494,"children":9495},{"class":432,"line":433},[9496,9500,9504],{"type":394,"tag":430,"props":9497,"children":9498},{"style":676},[9499],{"type":400,"value":9147},{"type":394,"tag":430,"props":9501,"children":9502},{"style":664},[9503],{"type":400,"value":818},{"type":394,"tag":430,"props":9505,"children":9506},{"style":717},[9507],{"type":400,"value":9508},"// ''\n",{"type":394,"tag":430,"props":9510,"children":9511},{"class":432,"line":723},[9512,9516,9520,9524,9528],{"type":394,"tag":430,"props":9513,"children":9514},{"style":676},[9515],{"type":400,"value":9147},{"type":394,"tag":430,"props":9517,"children":9518},{"style":664},[9519],{"type":400,"value":684},{"type":394,"tag":430,"props":9521,"children":9522},{"style":743},[9523],{"type":400,"value":4546},{"type":394,"tag":430,"props":9525,"children":9526},{"style":664},[9527],{"type":400,"value":714},{"type":394,"tag":430,"props":9529,"children":9530},{"style":717},[9531],{"type":400,"value":953},{"type":394,"tag":402,"props":9533,"children":9535},{"id":9534},"对象与数组的动态特性",[9536],{"type":400,"value":9534},{"type":394,"tag":408,"props":9538,"children":9539},{},[9540],{"type":400,"value":9541},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":394,"tag":419,"props":9543,"children":9545},{"className":652,"code":9544,"language":654,"meta":388,"style":388},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9546],{"type":394,"tag":426,"props":9547,"children":9548},{"__ignoreMap":388},[9549,9585,9610,9633,9657],{"type":394,"tag":430,"props":9550,"children":9551},{"class":432,"line":433},[9552,9556,9560,9564,9568,9573,9577,9581],{"type":394,"tag":430,"props":9553,"children":9554},{"style":987},[9555],{"type":400,"value":5788},{"type":394,"tag":430,"props":9557,"children":9558},{"style":1423},[9559],{"type":400,"value":3215},{"type":394,"tag":430,"props":9561,"children":9562},{"style":460},[9563],{"type":400,"value":1353},{"type":394,"tag":430,"props":9565,"children":9566},{"style":460},[9567],{"type":400,"value":2832},{"type":394,"tag":430,"props":9569,"children":9570},{"style":676},[9571],{"type":400,"value":9572}," Array",{"type":394,"tag":430,"props":9574,"children":9575},{"style":664},[9576],{"type":400,"value":684},{"type":394,"tag":430,"props":9578,"children":9579},{"style":692},[9580],{"type":400,"value":8097},{"type":394,"tag":430,"props":9582,"children":9583},{"style":664},[9584],{"type":400,"value":1407},{"type":394,"tag":430,"props":9586,"children":9587},{"class":432,"line":723},[9588,9593,9597,9602,9606],{"type":394,"tag":430,"props":9589,"children":9590},{"style":664},[9591],{"type":400,"value":9592},"a[",{"type":394,"tag":430,"props":9594,"children":9595},{"style":692},[9596],{"type":400,"value":499},{"type":394,"tag":430,"props":9598,"children":9599},{"style":664},[9600],{"type":400,"value":9601},"] ",{"type":394,"tag":430,"props":9603,"children":9604},{"style":460},[9605],{"type":400,"value":1864},{"type":394,"tag":430,"props":9607,"children":9608},{"style":692},[9609],{"type":400,"value":6776},{"type":394,"tag":430,"props":9611,"children":9612},{"class":432,"line":1369},[9613,9617,9621,9625,9629],{"type":394,"tag":430,"props":9614,"children":9615},{"style":664},[9616],{"type":400,"value":9592},{"type":394,"tag":430,"props":9618,"children":9619},{"style":692},[9620],{"type":400,"value":6299},{"type":394,"tag":430,"props":9622,"children":9623},{"style":664},[9624],{"type":400,"value":9601},{"type":394,"tag":430,"props":9626,"children":9627},{"style":460},[9628],{"type":400,"value":1864},{"type":394,"tag":430,"props":9630,"children":9631},{"style":692},[9632],{"type":400,"value":6776},{"type":394,"tag":430,"props":9634,"children":9635},{"class":432,"line":1410},[9636,9640,9645,9649,9653],{"type":394,"tag":430,"props":9637,"children":9638},{"style":664},[9639],{"type":400,"value":9592},{"type":394,"tag":430,"props":9641,"children":9642},{"style":692},[9643],{"type":400,"value":9644},"7",{"type":394,"tag":430,"props":9646,"children":9647},{"style":664},[9648],{"type":400,"value":9601},{"type":394,"tag":430,"props":9650,"children":9651},{"style":460},[9652],{"type":400,"value":1864},{"type":394,"tag":430,"props":9654,"children":9655},{"style":692},[9656],{"type":400,"value":6776},{"type":394,"tag":430,"props":9658,"children":9659},{"class":432,"line":1419},[9660,9664,9668,9673,9677,9681,9685,9690,9694,9699,9703,9708,9713,9717],{"type":394,"tag":430,"props":9661,"children":9662},{"style":664},[9663],{"type":400,"value":491},{"type":394,"tag":430,"props":9665,"children":9666},{"style":670},[9667],{"type":400,"value":673},{"type":394,"tag":430,"props":9669,"children":9670},{"style":676},[9671],{"type":400,"value":9672},"sort",{"type":394,"tag":430,"props":9674,"children":9675},{"style":664},[9676],{"type":400,"value":684},{"type":394,"tag":430,"props":9678,"children":9679},{"style":670},[9680],{"type":400,"value":1038},{"type":394,"tag":430,"props":9682,"children":9683},{"style":987},[9684],{"type":400,"value":5724},{"type":394,"tag":430,"props":9686,"children":9687},{"style":664},[9688],{"type":400,"value":9689}," Math",{"type":394,"tag":430,"props":9691,"children":9692},{"style":670},[9693],{"type":400,"value":673},{"type":394,"tag":430,"props":9695,"children":9696},{"style":676},[9697],{"type":400,"value":9698},"random",{"type":394,"tag":430,"props":9700,"children":9701},{"style":664},[9702],{"type":400,"value":818},{"type":394,"tag":430,"props":9704,"children":9705},{"style":460},[9706],{"type":400,"value":9707},"-",{"type":394,"tag":430,"props":9709,"children":9710},{"style":692},[9711],{"type":400,"value":9712}," 0.5",{"type":394,"tag":430,"props":9714,"children":9715},{"style":664},[9716],{"type":400,"value":714},{"type":394,"tag":430,"props":9718,"children":9719},{"style":717},[9720],{"type":400,"value":9721},"// [1, 1, 1, empty x 7]\n",{"type":394,"tag":408,"props":9723,"children":9724},{},[9725],{"type":400,"value":9726},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":394,"tag":408,"props":9728,"children":9729},{},[9730],{"type":400,"value":9731},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":394,"tag":402,"props":9733,"children":9735},{"id":9734},"重写",[9736],{"type":400,"value":9734},{"type":394,"tag":408,"props":9738,"children":9739},{},[9740],{"type":400,"value":9741},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":394,"tag":408,"props":9743,"children":9744},{},[9745],{"type":400,"value":9746},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":394,"tag":408,"props":9748,"children":9749},{},[9750],{"type":400,"value":9751},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":394,"tag":419,"props":9753,"children":9755},{"className":652,"code":9754,"language":654,"meta":388,"style":388},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9756],{"type":394,"tag":426,"props":9757,"children":9758},{"__ignoreMap":388},[9759,9800,9815,9836,9853,9860,9871,9894,9926,9961,10001,10041,10049,10105,10120,10168,10175,10182,10193,10216],{"type":394,"tag":430,"props":9760,"children":9761},{"class":432,"line":433},[9762,9766,9770,9774,9778,9782,9787,9791,9796],{"type":394,"tag":430,"props":9763,"children":9764},{"style":987},[9765],{"type":400,"value":5788},{"type":394,"tag":430,"props":9767,"children":9768},{"style":1423},[9769],{"type":400,"value":3215},{"type":394,"tag":430,"props":9771,"children":9772},{"style":460},[9773],{"type":400,"value":1353},{"type":394,"tag":430,"props":9775,"children":9776},{"style":664},[9777],{"type":400,"value":4104},{"type":394,"tag":430,"props":9779,"children":9780},{"style":670},[9781],{"type":400,"value":673},{"type":394,"tag":430,"props":9783,"children":9784},{"style":676},[9785],{"type":400,"value":9786},"defineProperties",{"type":394,"tag":430,"props":9788,"children":9789},{"style":664},[9790],{"type":400,"value":684},{"type":394,"tag":430,"props":9792,"children":9793},{"style":670},[9794],{"type":400,"value":9795},"{},",{"type":394,"tag":430,"props":9797,"children":9798},{"style":670},[9799],{"type":400,"value":1330},{"type":394,"tag":430,"props":9801,"children":9802},{"class":432,"line":723},[9803,9807,9811],{"type":394,"tag":430,"props":9804,"children":9805},{"style":1387},[9806],{"type":400,"value":2763},{"type":394,"tag":430,"props":9808,"children":9809},{"style":670},[9810],{"type":400,"value":1849},{"type":394,"tag":430,"props":9812,"children":9813},{"style":670},[9814],{"type":400,"value":1330},{"type":394,"tag":430,"props":9816,"children":9817},{"class":432,"line":1369},[9818,9823,9827,9832],{"type":394,"tag":430,"props":9819,"children":9820},{"style":1387},[9821],{"type":400,"value":9822},"    value",{"type":394,"tag":430,"props":9824,"children":9825},{"style":670},[9826],{"type":400,"value":1849},{"type":394,"tag":430,"props":9828,"children":9829},{"style":692},[9830],{"type":400,"value":9831}," 100",{"type":394,"tag":430,"props":9833,"children":9834},{"style":670},[9835],{"type":400,"value":7232},{"type":394,"tag":430,"props":9837,"children":9838},{"class":432,"line":1410},[9839,9844,9848],{"type":394,"tag":430,"props":9840,"children":9841},{"style":1387},[9842],{"type":400,"value":9843},"    configurable",{"type":394,"tag":430,"props":9845,"children":9846},{"style":670},[9847],{"type":400,"value":1849},{"type":394,"tag":430,"props":9849,"children":9850},{"style":826},[9851],{"type":400,"value":9852}," true\n",{"type":394,"tag":430,"props":9854,"children":9855},{"class":432,"line":1419},[9856],{"type":394,"tag":430,"props":9857,"children":9858},{"style":670},[9859],{"type":400,"value":2069},{"type":394,"tag":430,"props":9861,"children":9862},{"class":432,"line":1454},[9863,9867],{"type":394,"tag":430,"props":9864,"children":9865},{"style":670},[9866],{"type":400,"value":1663},{"type":394,"tag":430,"props":9868,"children":9869},{"style":664},[9870],{"type":400,"value":1407},{"type":394,"tag":430,"props":9872,"children":9873},{"class":432,"line":1491},[9874,9878,9882,9886,9890],{"type":394,"tag":430,"props":9875,"children":9876},{"style":664},[9877],{"type":400,"value":491},{"type":394,"tag":430,"props":9879,"children":9880},{"style":670},[9881],{"type":400,"value":673},{"type":394,"tag":430,"props":9883,"children":9884},{"style":664},[9885],{"type":400,"value":4143},{"type":394,"tag":430,"props":9887,"children":9888},{"style":460},[9889],{"type":400,"value":1864},{"type":394,"tag":430,"props":9891,"children":9892},{"style":692},[9893],{"type":400,"value":6776},{"type":394,"tag":430,"props":9895,"children":9896},{"class":432,"line":1499},[9897,9901,9905,9909,9913,9917,9921],{"type":394,"tag":430,"props":9898,"children":9899},{"style":664},[9900],{"type":400,"value":5013},{"type":394,"tag":430,"props":9902,"children":9903},{"style":670},[9904],{"type":400,"value":673},{"type":394,"tag":430,"props":9906,"children":9907},{"style":676},[9908],{"type":400,"value":1384},{"type":394,"tag":430,"props":9910,"children":9911},{"style":664},[9912],{"type":400,"value":7319},{"type":394,"tag":430,"props":9914,"children":9915},{"style":670},[9916],{"type":400,"value":673},{"type":394,"tag":430,"props":9918,"children":9919},{"style":664},[9920],{"type":400,"value":6027},{"type":394,"tag":430,"props":9922,"children":9923},{"style":717},[9924],{"type":400,"value":9925},"// 100\n",{"type":394,"tag":430,"props":9927,"children":9928},{"class":432,"line":1526},[9929,9933,9937,9941,9945,9949,9953,9957],{"type":394,"tag":430,"props":9930,"children":9931},{"style":987},[9932],{"type":400,"value":5788},{"type":394,"tag":430,"props":9934,"children":9935},{"style":1423},[9936],{"type":400,"value":7033},{"type":394,"tag":430,"props":9938,"children":9939},{"style":460},[9940],{"type":400,"value":1353},{"type":394,"tag":430,"props":9942,"children":9943},{"style":460},[9944],{"type":400,"value":2832},{"type":394,"tag":430,"props":9946,"children":9947},{"style":676},[9948],{"type":400,"value":5634},{"type":394,"tag":430,"props":9950,"children":9951},{"style":664},[9952],{"type":400,"value":7319},{"type":394,"tag":430,"props":9954,"children":9955},{"style":670},[9956],{"type":400,"value":700},{"type":394,"tag":430,"props":9958,"children":9959},{"style":670},[9960],{"type":400,"value":1330},{"type":394,"tag":430,"props":9962,"children":9963},{"class":432,"line":2102},[9964,9968,9972,9976,9980,9985,9989,9993,9997],{"type":394,"tag":430,"props":9965,"children":9966},{"style":2649},[9967],{"type":400,"value":2646},{"type":394,"tag":430,"props":9969,"children":9970},{"style":670},[9971],{"type":400,"value":1922},{"type":394,"tag":430,"props":9973,"children":9974},{"style":1616},[9975],{"type":400,"value":5652},{"type":394,"tag":430,"props":9977,"children":9978},{"style":670},[9979],{"type":400,"value":700},{"type":394,"tag":430,"props":9981,"children":9982},{"style":1616},[9983],{"type":400,"value":9984}," key",{"type":394,"tag":430,"props":9986,"children":9987},{"style":670},[9988],{"type":400,"value":700},{"type":394,"tag":430,"props":9990,"children":9991},{"style":1616},[9992],{"type":400,"value":8724},{"type":394,"tag":430,"props":9994,"children":9995},{"style":670},[9996],{"type":400,"value":1624},{"type":394,"tag":430,"props":9998,"children":9999},{"style":670},[10000],{"type":400,"value":1330},{"type":394,"tag":430,"props":10002,"children":10003},{"class":432,"line":2162},[10004,10008,10012,10017,10021,10025,10029,10033,10037],{"type":394,"tag":430,"props":10005,"children":10006},{"style":1693},[10007],{"type":400,"value":1983},{"type":394,"tag":430,"props":10009,"children":10010},{"style":1387},[10011],{"type":400,"value":1922},{"type":394,"tag":430,"props":10013,"children":10014},{"style":664},[10015],{"type":400,"value":10016},"key",{"type":394,"tag":430,"props":10018,"children":10019},{"style":460},[10020],{"type":400,"value":1996},{"type":394,"tag":430,"props":10022,"children":10023},{"style":443},[10024],{"type":400,"value":446},{"type":394,"tag":430,"props":10026,"children":10027},{"style":449},[10028],{"type":400,"value":1715},{"type":394,"tag":430,"props":10030,"children":10031},{"style":443},[10032],{"type":400,"value":457},{"type":394,"tag":430,"props":10034,"children":10035},{"style":1387},[10036],{"type":400,"value":714},{"type":394,"tag":430,"props":10038,"children":10039},{"style":670},[10040],{"type":400,"value":1739},{"type":394,"tag":430,"props":10042,"children":10043},{"class":432,"line":2223},[10044],{"type":394,"tag":430,"props":10045,"children":10046},{"style":717},[10047],{"type":400,"value":10048},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":394,"tag":430,"props":10050,"children":10051},{"class":432,"line":2264},[10052,10056,10060,10064,10069,10073,10077,10081,10085,10089,10093,10097,10101],{"type":394,"tag":430,"props":10053,"children":10054},{"style":1693},[10055],{"type":400,"value":5901},{"type":394,"tag":430,"props":10057,"children":10058},{"style":664},[10059],{"type":400,"value":5942},{"type":394,"tag":430,"props":10061,"children":10062},{"style":670},[10063],{"type":400,"value":673},{"type":394,"tag":430,"props":10065,"children":10066},{"style":676},[10067],{"type":400,"value":10068},"defineProperty",{"type":394,"tag":430,"props":10070,"children":10071},{"style":1387},[10072],{"type":400,"value":684},{"type":394,"tag":430,"props":10074,"children":10075},{"style":664},[10076],{"type":400,"value":5652},{"type":394,"tag":430,"props":10078,"children":10079},{"style":670},[10080],{"type":400,"value":700},{"type":394,"tag":430,"props":10082,"children":10083},{"style":664},[10084],{"type":400,"value":9984},{"type":394,"tag":430,"props":10086,"children":10087},{"style":670},[10088],{"type":400,"value":700},{"type":394,"tag":430,"props":10090,"children":10091},{"style":670},[10092],{"type":400,"value":1701},{"type":394,"tag":430,"props":10094,"children":10095},{"style":664},[10096],{"type":400,"value":8724},{"type":394,"tag":430,"props":10098,"children":10099},{"style":670},[10100],{"type":400,"value":1724},{"type":394,"tag":430,"props":10102,"children":10103},{"style":1387},[10104],{"type":400,"value":1407},{"type":394,"tag":430,"props":10106,"children":10107},{"class":432,"line":2305},[10108,10112,10116],{"type":394,"tag":430,"props":10109,"children":10110},{"style":670},[10111],{"type":400,"value":5921},{"type":394,"tag":430,"props":10113,"children":10114},{"style":1693},[10115],{"type":400,"value":5926},{"type":394,"tag":430,"props":10117,"children":10118},{"style":670},[10119],{"type":400,"value":1330},{"type":394,"tag":430,"props":10121,"children":10122},{"class":432,"line":2314},[10123,10127,10131,10135,10140,10144,10148,10152,10156,10160,10164],{"type":394,"tag":430,"props":10124,"children":10125},{"style":1693},[10126],{"type":400,"value":5901},{"type":394,"tag":430,"props":10128,"children":10129},{"style":664},[10130],{"type":400,"value":5942},{"type":394,"tag":430,"props":10132,"children":10133},{"style":670},[10134],{"type":400,"value":673},{"type":394,"tag":430,"props":10136,"children":10137},{"style":676},[10138],{"type":400,"value":10139},"set",{"type":394,"tag":430,"props":10141,"children":10142},{"style":1387},[10143],{"type":400,"value":684},{"type":394,"tag":430,"props":10145,"children":10146},{"style":664},[10147],{"type":400,"value":5652},{"type":394,"tag":430,"props":10149,"children":10150},{"style":670},[10151],{"type":400,"value":700},{"type":394,"tag":430,"props":10153,"children":10154},{"style":664},[10155],{"type":400,"value":9984},{"type":394,"tag":430,"props":10157,"children":10158},{"style":670},[10159],{"type":400,"value":700},{"type":394,"tag":430,"props":10161,"children":10162},{"style":664},[10163],{"type":400,"value":8724},{"type":394,"tag":430,"props":10165,"children":10166},{"style":1387},[10167],{"type":400,"value":1407},{"type":394,"tag":430,"props":10169,"children":10170},{"class":432,"line":2322},[10171],{"type":394,"tag":430,"props":10172,"children":10173},{"style":670},[10174],{"type":400,"value":2311},{"type":394,"tag":430,"props":10176,"children":10177},{"class":432,"line":5996},[10178],{"type":394,"tag":430,"props":10179,"children":10180},{"style":670},[10181],{"type":400,"value":2069},{"type":394,"tag":430,"props":10183,"children":10184},{"class":432,"line":8513},[10185,10189],{"type":394,"tag":430,"props":10186,"children":10187},{"style":670},[10188],{"type":400,"value":1663},{"type":394,"tag":430,"props":10190,"children":10191},{"style":664},[10192],{"type":400,"value":1407},{"type":394,"tag":430,"props":10194,"children":10195},{"class":432,"line":8521},[10196,10200,10204,10208,10212],{"type":394,"tag":430,"props":10197,"children":10198},{"style":664},[10199],{"type":400,"value":1348},{"type":394,"tag":430,"props":10201,"children":10202},{"style":670},[10203],{"type":400,"value":673},{"type":394,"tag":430,"props":10205,"children":10206},{"style":664},[10207],{"type":400,"value":4143},{"type":394,"tag":430,"props":10209,"children":10210},{"style":460},[10211],{"type":400,"value":1864},{"type":394,"tag":430,"props":10213,"children":10214},{"style":692},[10215],{"type":400,"value":6776},{"type":394,"tag":430,"props":10217,"children":10218},{"class":432,"line":8529},[10219,10223,10227,10231,10236,10240,10244],{"type":394,"tag":430,"props":10220,"children":10221},{"style":664},[10222],{"type":400,"value":5013},{"type":394,"tag":430,"props":10224,"children":10225},{"style":670},[10226],{"type":400,"value":673},{"type":394,"tag":430,"props":10228,"children":10229},{"style":676},[10230],{"type":400,"value":1384},{"type":394,"tag":430,"props":10232,"children":10233},{"style":664},[10234],{"type":400,"value":10235},"(b",{"type":394,"tag":430,"props":10237,"children":10238},{"style":670},[10239],{"type":400,"value":673},{"type":394,"tag":430,"props":10241,"children":10242},{"style":664},[10243],{"type":400,"value":6027},{"type":394,"tag":430,"props":10245,"children":10246},{"style":717},[10247],{"type":400,"value":6722},{"type":394,"tag":408,"props":10249,"children":10250},{},[10251],{"type":400,"value":10252},"自增自减运算符会隐式的转换操作数的类型。",{"type":394,"tag":408,"props":10254,"children":10255},{},[10256],{"type":400,"value":10257},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":394,"tag":419,"props":10259,"children":10261},{"className":652,"code":10260,"language":654,"meta":388,"style":388},"class a extends a {}\n",[10262],{"type":394,"tag":426,"props":10263,"children":10264},{"__ignoreMap":388},[10265],{"type":394,"tag":430,"props":10266,"children":10267},{"class":432,"line":433},[10268,10272,10276,10280,10284],{"type":394,"tag":430,"props":10269,"children":10270},{"style":987},[10271],{"type":400,"value":3536},{"type":394,"tag":430,"props":10273,"children":10274},{"style":3539},[10275],{"type":400,"value":3215},{"type":394,"tag":430,"props":10277,"children":10278},{"style":3559},[10279],{"type":400,"value":3562},{"type":394,"tag":430,"props":10281,"children":10282},{"style":3565},[10283],{"type":400,"value":3215},{"type":394,"tag":430,"props":10285,"children":10286},{"style":670},[10287],{"type":400,"value":3123},{"type":394,"tag":408,"props":10289,"children":10290},{},[10291],{"type":400,"value":10292},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":394,"tag":408,"props":10294,"children":10295},{},[10296],{"type":400,"value":10297},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":394,"tag":408,"props":10299,"children":10300},{},[10301],{"type":400,"value":10302},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":394,"tag":419,"props":10304,"children":10306},{"className":652,"code":10305,"language":654,"meta":388,"style":388},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10307],{"type":394,"tag":426,"props":10308,"children":10309},{"__ignoreMap":388},[10310,10363,10376,10383],{"type":394,"tag":430,"props":10311,"children":10312},{"class":432,"line":433},[10313,10317,10322,10326,10330,10335,10339,10343,10347,10351,10355,10359],{"type":394,"tag":430,"props":10314,"children":10315},{"style":1693},[10316],{"type":400,"value":8764},{"type":394,"tag":430,"props":10318,"children":10319},{"style":664},[10320],{"type":400,"value":10321}," (a ",{"type":394,"tag":430,"props":10323,"children":10324},{"style":460},[10325],{"type":400,"value":1864},{"type":394,"tag":430,"props":10327,"children":10328},{"style":670},[10329],{"type":400,"value":1701},{"type":394,"tag":430,"props":10331,"children":10332},{"style":1387},[10333],{"type":400,"value":10334}," undefined",{"type":394,"tag":430,"props":10336,"children":10337},{"style":670},[10338],{"type":400,"value":1849},{"type":394,"tag":430,"props":10340,"children":10341},{"style":443},[10342],{"type":400,"value":446},{"type":394,"tag":430,"props":10344,"children":10345},{"style":449},[10346],{"type":400,"value":1715},{"type":394,"tag":430,"props":10348,"children":10349},{"style":443},[10350],{"type":400,"value":457},{"type":394,"tag":430,"props":10352,"children":10353},{"style":670},[10354],{"type":400,"value":1724},{"type":394,"tag":430,"props":10356,"children":10357},{"style":664},[10358],{"type":400,"value":714},{"type":394,"tag":430,"props":10360,"children":10361},{"style":670},[10362],{"type":400,"value":1739},{"type":394,"tag":430,"props":10364,"children":10365},{"class":432,"line":723},[10366,10371],{"type":394,"tag":430,"props":10367,"children":10368},{"style":460},[10369],{"type":400,"value":10370},"  delete",{"type":394,"tag":430,"props":10372,"children":10373},{"style":743},[10374],{"type":400,"value":10375}," undefined\n",{"type":394,"tag":430,"props":10377,"children":10378},{"class":432,"line":1369},[10379],{"type":394,"tag":430,"props":10380,"children":10381},{"style":670},[10382],{"type":400,"value":1416},{"type":394,"tag":430,"props":10384,"children":10385},{"class":432,"line":1410},[10386,10390,10394,10398,10403],{"type":394,"tag":430,"props":10387,"children":10388},{"style":664},[10389],{"type":400,"value":5013},{"type":394,"tag":430,"props":10391,"children":10392},{"style":670},[10393],{"type":400,"value":673},{"type":394,"tag":430,"props":10395,"children":10396},{"style":676},[10397],{"type":400,"value":1384},{"type":394,"tag":430,"props":10399,"children":10400},{"style":664},[10401],{"type":400,"value":10402},"(a) ",{"type":394,"tag":430,"props":10404,"children":10405},{"style":717},[10406],{"type":400,"value":7495},{"type":394,"tag":402,"props":10408,"children":10410},{"id":10409},"动态绑定",[10411],{"type":400,"value":10409},{"type":394,"tag":408,"props":10413,"children":10414},{},[10415],{"type":400,"value":10416},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":394,"tag":419,"props":10418,"children":10420},{"className":652,"code":10419,"language":654,"meta":388,"style":388},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10421],{"type":394,"tag":426,"props":10422,"children":10423},{"__ignoreMap":388},[10424,10444,10464,10492,10500,10529,10537,10566,10574,10620,10628,10669,10676],{"type":394,"tag":430,"props":10425,"children":10426},{"class":432,"line":433},[10427,10431,10436,10440],{"type":394,"tag":430,"props":10428,"children":10429},{"style":987},[10430],{"type":400,"value":1315},{"type":394,"tag":430,"props":10432,"children":10433},{"style":676},[10434],{"type":400,"value":10435}," indirect",{"type":394,"tag":430,"props":10437,"children":10438},{"style":670},[10439],{"type":400,"value":1038},{"type":394,"tag":430,"props":10441,"children":10442},{"style":670},[10443],{"type":400,"value":1330},{"type":394,"tag":430,"props":10445,"children":10446},{"class":432,"line":723},[10447,10451,10455,10459],{"type":394,"tag":430,"props":10448,"children":10449},{"style":987},[10450],{"type":400,"value":3769},{"type":394,"tag":430,"props":10452,"children":10453},{"style":1423},[10454],{"type":400,"value":7821},{"type":394,"tag":430,"props":10456,"children":10457},{"style":460},[10458],{"type":400,"value":1353},{"type":394,"tag":430,"props":10460,"children":10461},{"style":664},[10462],{"type":400,"value":10463}," eval\n",{"type":394,"tag":430,"props":10465,"children":10466},{"class":432,"line":1369},[10467,10471,10476,10480,10484,10488],{"type":394,"tag":430,"props":10468,"children":10469},{"style":987},[10470],{"type":400,"value":3769},{"type":394,"tag":430,"props":10472,"children":10473},{"style":7818},[10474],{"type":400,"value":10475}," getEval",{"type":394,"tag":430,"props":10477,"children":10478},{"style":460},[10479],{"type":400,"value":1353},{"type":394,"tag":430,"props":10481,"children":10482},{"style":670},[10483],{"type":400,"value":1325},{"type":394,"tag":430,"props":10485,"children":10486},{"style":987},[10487],{"type":400,"value":5724},{"type":394,"tag":430,"props":10489,"children":10490},{"style":664},[10491],{"type":400,"value":10463},{"type":394,"tag":430,"props":10493,"children":10494},{"class":432,"line":1410},[10495],{"type":394,"tag":430,"props":10496,"children":10497},{"style":717},[10498],{"type":400,"value":10499},"  // 单值表达式\n",{"type":394,"tag":430,"props":10501,"children":10502},{"class":432,"line":1419},[10503,10508,10512,10516,10521,10525],{"type":394,"tag":430,"props":10504,"children":10505},{"style":676},[10506],{"type":400,"value":10507},"  exec",{"type":394,"tag":430,"props":10509,"children":10510},{"style":1387},[10511],{"type":400,"value":684},{"type":394,"tag":430,"props":10513,"children":10514},{"style":443},[10515],{"type":400,"value":457},{"type":394,"tag":430,"props":10517,"children":10518},{"style":449},[10519],{"type":400,"value":10520},"console.log(this === globalThis)",{"type":394,"tag":430,"props":10522,"children":10523},{"style":443},[10524],{"type":400,"value":457},{"type":394,"tag":430,"props":10526,"children":10527},{"style":1387},[10528],{"type":400,"value":1407},{"type":394,"tag":430,"props":10530,"children":10531},{"class":432,"line":1454},[10532],{"type":394,"tag":430,"props":10533,"children":10534},{"style":717},[10535],{"type":400,"value":10536},"  // 函数返回\n",{"type":394,"tag":430,"props":10538,"children":10539},{"class":432,"line":1491},[10540,10545,10550,10554,10558,10562],{"type":394,"tag":430,"props":10541,"children":10542},{"style":676},[10543],{"type":400,"value":10544},"  getEval",{"type":394,"tag":430,"props":10546,"children":10547},{"style":1387},[10548],{"type":400,"value":10549},"()(",{"type":394,"tag":430,"props":10551,"children":10552},{"style":443},[10553],{"type":400,"value":457},{"type":394,"tag":430,"props":10555,"children":10556},{"style":449},[10557],{"type":400,"value":10520},{"type":394,"tag":430,"props":10559,"children":10560},{"style":443},[10561],{"type":400,"value":457},{"type":394,"tag":430,"props":10563,"children":10564},{"style":1387},[10565],{"type":400,"value":1407},{"type":394,"tag":430,"props":10567,"children":10568},{"class":432,"line":1499},[10569],{"type":394,"tag":430,"props":10570,"children":10571},{"style":717},[10572],{"type":400,"value":10573},"  // 携带逗号运算符的分组运算符\n",{"type":394,"tag":430,"props":10575,"children":10576},{"class":432,"line":1526},[10577,10582,10586,10590,10594,10599,10604,10608,10612,10616],{"type":394,"tag":430,"props":10578,"children":10579},{"style":670},[10580],{"type":400,"value":10581},"  ;",{"type":394,"tag":430,"props":10583,"children":10584},{"style":1387},[10585],{"type":400,"value":684},{"type":394,"tag":430,"props":10587,"children":10588},{"style":692},[10589],{"type":400,"value":695},{"type":394,"tag":430,"props":10591,"children":10592},{"style":670},[10593],{"type":400,"value":700},{"type":394,"tag":430,"props":10595,"children":10596},{"style":664},[10597],{"type":400,"value":10598}," eval",{"type":394,"tag":430,"props":10600,"children":10601},{"style":1387},[10602],{"type":400,"value":10603},")(",{"type":394,"tag":430,"props":10605,"children":10606},{"style":443},[10607],{"type":400,"value":457},{"type":394,"tag":430,"props":10609,"children":10610},{"style":449},[10611],{"type":400,"value":10520},{"type":394,"tag":430,"props":10613,"children":10614},{"style":443},[10615],{"type":400,"value":457},{"type":394,"tag":430,"props":10617,"children":10618},{"style":1387},[10619],{"type":400,"value":1407},{"type":394,"tag":430,"props":10621,"children":10622},{"class":432,"line":2102},[10623],{"type":394,"tag":430,"props":10624,"children":10625},{"style":717},[10626],{"type":400,"value":10627},"  // eval.call 等方法\n",{"type":394,"tag":430,"props":10629,"children":10630},{"class":432,"line":2162},[10631,10636,10640,10644,10649,10653,10657,10661,10665],{"type":394,"tag":430,"props":10632,"children":10633},{"style":664},[10634],{"type":400,"value":10635},"  eval",{"type":394,"tag":430,"props":10637,"children":10638},{"style":670},[10639],{"type":400,"value":673},{"type":394,"tag":430,"props":10641,"children":10642},{"style":676},[10643],{"type":400,"value":6886},{"type":394,"tag":430,"props":10645,"children":10646},{"style":1387},[10647],{"type":400,"value":10648},"(()",{"type":394,"tag":430,"props":10650,"children":10651},{"style":670},[10652],{"type":400,"value":700},{"type":394,"tag":430,"props":10654,"children":10655},{"style":443},[10656],{"type":400,"value":446},{"type":394,"tag":430,"props":10658,"children":10659},{"style":449},[10660],{"type":400,"value":10520},{"type":394,"tag":430,"props":10662,"children":10663},{"style":443},[10664],{"type":400,"value":457},{"type":394,"tag":430,"props":10666,"children":10667},{"style":1387},[10668],{"type":400,"value":1407},{"type":394,"tag":430,"props":10670,"children":10671},{"class":432,"line":2223},[10672],{"type":394,"tag":430,"props":10673,"children":10674},{"style":670},[10675],{"type":400,"value":1416},{"type":394,"tag":430,"props":10677,"children":10678},{"class":432,"line":2264},[10679,10684,10688,10692,10696,10701],{"type":394,"tag":430,"props":10680,"children":10681},{"style":664},[10682],{"type":400,"value":10683},"indirect",{"type":394,"tag":430,"props":10685,"children":10686},{"style":670},[10687],{"type":400,"value":673},{"type":394,"tag":430,"props":10689,"children":10690},{"style":676},[10691],{"type":400,"value":7716},{"type":394,"tag":430,"props":10693,"children":10694},{"style":664},[10695],{"type":400,"value":684},{"type":394,"tag":430,"props":10697,"children":10698},{"style":670},[10699],{"type":400,"value":10700},"{}",{"type":394,"tag":430,"props":10702,"children":10703},{"style":664},[10704],{"type":400,"value":10705},")()\n",{"type":394,"tag":408,"props":10707,"children":10708},{},[10709],{"type":400,"value":10710},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":394,"tag":408,"props":10712,"children":10713},{},[10714],{"type":400,"value":10715},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":394,"tag":419,"props":10717,"children":10719},{"className":652,"code":10718,"language":654,"meta":388,"style":388},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10720],{"type":394,"tag":426,"props":10721,"children":10722},{"__ignoreMap":388},[10723,10738,10774,10796,10852],{"type":394,"tag":430,"props":10724,"children":10725},{"class":432,"line":433},[10726,10730,10734],{"type":394,"tag":430,"props":10727,"children":10728},{"style":664},[10729],{"type":400,"value":7184},{"type":394,"tag":430,"props":10731,"children":10732},{"style":460},[10733],{"type":400,"value":1864},{"type":394,"tag":430,"props":10735,"children":10736},{"style":692},[10737],{"type":400,"value":6352},{"type":394,"tag":430,"props":10739,"children":10740},{"class":432,"line":723},[10741,10745,10749,10753,10757,10761,10765,10770],{"type":394,"tag":430,"props":10742,"children":10743},{"style":987},[10744],{"type":400,"value":5788},{"type":394,"tag":430,"props":10746,"children":10747},{"style":1423},[10748],{"type":400,"value":2630},{"type":394,"tag":430,"props":10750,"children":10751},{"style":460},[10752],{"type":400,"value":1353},{"type":394,"tag":430,"props":10754,"children":10755},{"style":670},[10756],{"type":400,"value":1701},{"type":394,"tag":430,"props":10758,"children":10759},{"style":1387},[10760],{"type":400,"value":6474},{"type":394,"tag":430,"props":10762,"children":10763},{"style":670},[10764],{"type":400,"value":1849},{"type":394,"tag":430,"props":10766,"children":10767},{"style":692},[10768],{"type":400,"value":10769}," 200",{"type":394,"tag":430,"props":10771,"children":10772},{"style":670},[10773],{"type":400,"value":3162},{"type":394,"tag":430,"props":10775,"children":10776},{"class":432,"line":1369},[10777,10781,10786,10791],{"type":394,"tag":430,"props":10778,"children":10779},{"style":1693},[10780],{"type":400,"value":8764},{"type":394,"tag":430,"props":10782,"children":10783},{"style":664},[10784],{"type":400,"value":10785}," (obj) ",{"type":394,"tag":430,"props":10787,"children":10788},{"style":670},[10789],{"type":400,"value":10790},"{",{"type":394,"tag":430,"props":10792,"children":10793},{"style":1387},[10794],{"type":400,"value":10795}," \n",{"type":394,"tag":430,"props":10797,"children":10798},{"class":432,"line":1410},[10799,10803,10807,10811,10815,10819,10823,10827,10831,10835,10839,10843,10847],{"type":394,"tag":430,"props":10800,"children":10801},{"style":676},[10802],{"type":400,"value":10635},{"type":394,"tag":430,"props":10804,"children":10805},{"style":1387},[10806],{"type":400,"value":684},{"type":394,"tag":430,"props":10808,"children":10809},{"style":664},[10810],{"type":400,"value":5013},{"type":394,"tag":430,"props":10812,"children":10813},{"style":670},[10814],{"type":400,"value":673},{"type":394,"tag":430,"props":10816,"children":10817},{"style":676},[10818],{"type":400,"value":1384},{"type":394,"tag":430,"props":10820,"children":10821},{"style":1387},[10822],{"type":400,"value":684},{"type":394,"tag":430,"props":10824,"children":10825},{"style":664},[10826],{"type":400,"value":2660},{"type":394,"tag":430,"props":10828,"children":10829},{"style":670},[10830],{"type":400,"value":700},{"type":394,"tag":430,"props":10832,"children":10833},{"style":1336},[10834],{"type":400,"value":3783},{"type":394,"tag":430,"props":10836,"children":10837},{"style":670},[10838],{"type":400,"value":673},{"type":394,"tag":430,"props":10840,"children":10841},{"style":664},[10842],{"type":400,"value":2660},{"type":394,"tag":430,"props":10844,"children":10845},{"style":1387},[10846],{"type":400,"value":9273},{"type":394,"tag":430,"props":10848,"children":10849},{"style":717},[10850],{"type":400,"value":10851},"// 200 100\n",{"type":394,"tag":430,"props":10853,"children":10854},{"class":432,"line":1419},[10855],{"type":394,"tag":430,"props":10856,"children":10857},{"style":670},[10858],{"type":400,"value":1416},{"type":394,"tag":408,"props":10860,"children":10861},{},[10862],{"type":400,"value":10863},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":394,"tag":402,"props":10865,"children":10867},{"id":10866},"动态方法调用",[10868],{"type":400,"value":10866},{"type":394,"tag":408,"props":10870,"children":10871},{},[10872],{"type":400,"value":10873},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":394,"tag":408,"props":10875,"children":10876},{},[10877],{"type":400,"value":10878},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":394,"tag":408,"props":10880,"children":10881},{},[10882],{"type":400,"value":10883},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":394,"tag":408,"props":10885,"children":10886},{},[10887],{"type":400,"value":10888},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":394,"tag":419,"props":10890,"children":10892},{"className":652,"code":10891,"language":654,"meta":388,"style":388},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10893],{"type":394,"tag":426,"props":10894,"children":10895},{"__ignoreMap":388},[10896,10916,10952,11001],{"type":394,"tag":430,"props":10897,"children":10898},{"class":432,"line":433},[10899,10903,10908,10912],{"type":394,"tag":430,"props":10900,"children":10901},{"style":987},[10902],{"type":400,"value":1315},{"type":394,"tag":430,"props":10904,"children":10905},{"style":676},[10906],{"type":400,"value":10907}," Test",{"type":394,"tag":430,"props":10909,"children":10910},{"style":670},[10911],{"type":400,"value":1038},{"type":394,"tag":430,"props":10913,"children":10914},{"style":670},[10915],{"type":400,"value":3123},{"type":394,"tag":430,"props":10917,"children":10918},{"class":432,"line":723},[10919,10924,10928,10932,10936,10940,10944,10948],{"type":394,"tag":430,"props":10920,"children":10921},{"style":664},[10922],{"type":400,"value":10923},"TestAnother ",{"type":394,"tag":430,"props":10925,"children":10926},{"style":460},[10927],{"type":400,"value":1864},{"type":394,"tag":430,"props":10929,"children":10930},{"style":664},[10931],{"type":400,"value":10907},{"type":394,"tag":430,"props":10933,"children":10934},{"style":670},[10935],{"type":400,"value":673},{"type":394,"tag":430,"props":10937,"children":10938},{"style":676},[10939],{"type":400,"value":7716},{"type":394,"tag":430,"props":10941,"children":10942},{"style":664},[10943],{"type":400,"value":684},{"type":394,"tag":430,"props":10945,"children":10946},{"style":670},[10947],{"type":400,"value":10700},{"type":394,"tag":430,"props":10949,"children":10950},{"style":664},[10951],{"type":400,"value":1407},{"type":394,"tag":430,"props":10953,"children":10954},{"class":432,"line":1369},[10955,10959,10963,10967,10971,10975,10979,10983,10988,10993,10997],{"type":394,"tag":430,"props":10956,"children":10957},{"style":664},[10958],{"type":400,"value":5013},{"type":394,"tag":430,"props":10960,"children":10961},{"style":670},[10962],{"type":400,"value":673},{"type":394,"tag":430,"props":10964,"children":10965},{"style":676},[10966],{"type":400,"value":1384},{"type":394,"tag":430,"props":10968,"children":10969},{"style":664},[10970],{"type":400,"value":684},{"type":394,"tag":430,"props":10972,"children":10973},{"style":460},[10974],{"type":400,"value":1505},{"type":394,"tag":430,"props":10976,"children":10977},{"style":676},[10978],{"type":400,"value":10907},{"type":394,"tag":430,"props":10980,"children":10981},{"style":664},[10982],{"type":400,"value":818},{"type":394,"tag":430,"props":10984,"children":10985},{"style":460},[10986],{"type":400,"value":10987},"instanceof",{"type":394,"tag":430,"props":10989,"children":10990},{"style":3539},[10991],{"type":400,"value":10992}," TestAnother",{"type":394,"tag":430,"props":10994,"children":10995},{"style":664},[10996],{"type":400,"value":714},{"type":394,"tag":430,"props":10998,"children":10999},{"style":717},[11000],{"type":400,"value":764},{"type":394,"tag":430,"props":11002,"children":11003},{"class":432,"line":1410},[11004,11008,11012,11016,11020,11025,11029,11033,11037],{"type":394,"tag":430,"props":11005,"children":11006},{"style":664},[11007],{"type":400,"value":5013},{"type":394,"tag":430,"props":11009,"children":11010},{"style":670},[11011],{"type":400,"value":673},{"type":394,"tag":430,"props":11013,"children":11014},{"style":676},[11015],{"type":400,"value":1384},{"type":394,"tag":430,"props":11017,"children":11018},{"style":664},[11019],{"type":400,"value":684},{"type":394,"tag":430,"props":11021,"children":11022},{"style":2812},[11023],{"type":400,"value":11024},"test2",{"type":394,"tag":430,"props":11026,"children":11027},{"style":670},[11028],{"type":400,"value":673},{"type":394,"tag":430,"props":11030,"children":11031},{"style":1423},[11032],{"type":400,"value":2823},{"type":394,"tag":430,"props":11034,"children":11035},{"style":664},[11036],{"type":400,"value":714},{"type":394,"tag":430,"props":11038,"children":11039},{"style":717},[11040],{"type":400,"value":953},{"type":394,"tag":408,"props":11042,"children":11043},{},[11044],{"type":400,"value":11045},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":394,"tag":402,"props":11047,"children":11049},{"id":11048},"通用执行环境的实现",[11050],{"type":400,"value":11048},{"type":394,"tag":408,"props":11052,"children":11053},{},[11054],{"type":400,"value":11055},"跳过。",{"type":394,"tag":395,"props":11057,"children":11059},{"id":11058},"勘误",[11060],{"type":400,"value":11061},"勘误？",{"type":394,"tag":508,"props":11063,"children":11064},{},[11065,11070,11075,11080,11085,11090,11095,11100,11105,11110,11115,11120,11125],{"type":394,"tag":512,"props":11066,"children":11067},{},[11068],{"type":400,"value":11069},"P71，属性读取器",{"type":394,"tag":512,"props":11071,"children":11072},{},[11073],{"type":400,"value":11074},"P77，逻辑与、按位非",{"type":394,"tag":512,"props":11076,"children":11077},{},[11078],{"type":400,"value":11079},"P107，catch 子句隐式声明",{"type":394,"tag":512,"props":11081,"children":11082},{},[11083],{"type":400,"value":11084},"P134，第二段代码，computedName 括号",{"type":394,"tag":512,"props":11086,"children":11087},{},[11088],{"type":400,"value":11089},"P148，ES8",{"type":394,"tag":512,"props":11091,"children":11092},{},[11093],{"type":400,"value":11094},"P179，MyObject() 有没有必要用括号",{"type":394,"tag":512,"props":11096,"children":11097},{},[11098],{"type":400,"value":11099},"P206，语言仅提供了...能力而已",{"type":394,"tag":512,"props":11101,"children":11102},{},[11103],{"type":400,"value":11104},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":394,"tag":512,"props":11106,"children":11107},{},[11108],{"type":400,"value":11109},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":394,"tag":512,"props":11111,"children":11112},{},[11113],{"type":400,"value":11114},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":394,"tag":512,"props":11116,"children":11117},{},[11118],{"type":400,"value":11119},"P536，表格最后一行 String",{"type":394,"tag":512,"props":11121,"children":11122},{},[11123],{"type":400,"value":11124},"P535，存取描述符",{"type":394,"tag":512,"props":11126,"children":11127},{},[11128],{"type":400,"value":11129},"P564，运算符",{"type":394,"tag":11131,"props":11132,"children":11135},"section",{"className":11133,"dataFootnotes":388},[11134],"footnotes",[11136,11143],{"type":394,"tag":395,"props":11137,"children":11140},{"className":11138,"id":495},[11139],"sr-only",[11141],{"type":400,"value":11142},"Footnotes",{"type":394,"tag":11144,"props":11145,"children":11146},"ol",{},[11147,11162,11175,11188,11201,11214],{"type":394,"tag":512,"props":11148,"children":11150},{"id":11149},"user-content-fn-first-class",[11151,11153],{"type":400,"value":11152},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":394,"tag":491,"props":11154,"children":11159},{"href":11155,"ariaLabel":11156,"className":11157,"dataFootnoteBackref":388},"#user-content-fnref-first-class","Back to reference 1",[11158],"data-footnote-backref",[11160],{"type":400,"value":11161},"↩",{"type":394,"tag":512,"props":11163,"children":11165},{"id":11164},"user-content-fn-oo",[11166,11168],{"type":400,"value":11167},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":394,"tag":491,"props":11169,"children":11173},{"href":11170,"ariaLabel":11171,"className":11172,"dataFootnoteBackref":388},"#user-content-fnref-oo","Back to reference 2",[11158],[11174],{"type":400,"value":11161},{"type":394,"tag":512,"props":11176,"children":11178},{"id":11177},"user-content-fn-string",[11179,11181],{"type":400,"value":11180},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":394,"tag":491,"props":11182,"children":11186},{"href":11183,"ariaLabel":11184,"className":11185,"dataFootnoteBackref":388},"#user-content-fnref-string","Back to reference 3",[11158],[11187],{"type":400,"value":11161},{"type":394,"tag":512,"props":11189,"children":11191},{"id":11190},"user-content-fn-namespace",[11192,11194],{"type":400,"value":11193},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":394,"tag":491,"props":11195,"children":11199},{"href":11196,"ariaLabel":11197,"className":11198,"dataFootnoteBackref":388},"#user-content-fnref-namespace","Back to reference 4",[11158],[11200],{"type":400,"value":11161},{"type":394,"tag":512,"props":11202,"children":11204},{"id":11203},"user-content-fn-iterationenv",[11205,11207],{"type":400,"value":11206},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":394,"tag":491,"props":11208,"children":11212},{"href":11209,"ariaLabel":11210,"className":11211,"dataFootnoteBackref":388},"#user-content-fnref-iterationenv","Back to reference 5",[11158],[11213],{"type":400,"value":11161},{"type":394,"tag":512,"props":11215,"children":11217},{"id":11216},"user-content-fn-reference",[11218,11220],{"type":400,"value":11219},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":394,"tag":491,"props":11221,"children":11225},{"href":11222,"ariaLabel":11223,"className":11224,"dataFootnoteBackref":388},"#user-content-fnref-reference","Back to reference 6",[11158],[11226],{"type":400,"value":11161},{"type":394,"tag":11228,"props":11229,"children":11230},"style",{},[11231],{"type":400,"value":11232},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":388,"searchDepth":723,"depth":723,"links":11234},[11235,11244,11253,11263,11269,11279,11280],{"id":397,"depth":723,"text":397,"children":11236},[11237,11238,11239,11240,11241,11242,11243],{"id":404,"depth":1369,"text":404},{"id":478,"depth":1369,"text":478},{"id":604,"depth":1369,"text":604},{"id":1555,"depth":1369,"text":1555},{"id":2340,"depth":1369,"text":2340},{"id":2467,"depth":1369,"text":2467},{"id":2558,"depth":1369,"text":2558},{"id":2583,"depth":723,"text":2583,"children":11245},[11246,11247,11248,11249,11250,11251,11252],{"id":2588,"depth":1369,"text":404},{"id":3061,"depth":1369,"text":3061},{"id":3506,"depth":1369,"text":3506},{"id":4267,"depth":1369,"text":4267},{"id":5045,"depth":1369,"text":5045},{"id":5218,"depth":1369,"text":5218},{"id":6035,"depth":1369,"text":6035},{"id":6045,"depth":723,"text":6045,"children":11254},[11255,11256,11257,11258,11259,11260,11261,11262],{"id":6050,"depth":1369,"text":6050},{"id":6103,"depth":1369,"text":6103},{"id":6281,"depth":1369,"text":6281},{"id":6559,"depth":1369,"text":6559},{"id":6643,"depth":1369,"text":6643},{"id":6817,"depth":1369,"text":6817},{"id":6899,"depth":1369,"text":6899},{"id":6937,"depth":1369,"text":6937},{"id":6947,"depth":723,"text":6947,"children":11264},[11265,11266,11267,11268],{"id":6952,"depth":1369,"text":6050},{"id":6967,"depth":1369,"text":6970},{"id":8109,"depth":1369,"text":8109},{"id":8556,"depth":1369,"text":8556},{"id":8926,"depth":723,"text":8926,"children":11270},[11271,11272,11273,11274,11275,11276,11277,11278],{"id":8931,"depth":1369,"text":6050},{"id":8946,"depth":1369,"text":8946},{"id":9431,"depth":1369,"text":9431},{"id":9534,"depth":1369,"text":9534},{"id":9734,"depth":1369,"text":9734},{"id":10409,"depth":1369,"text":10409},{"id":10866,"depth":1369,"text":10866},{"id":11048,"depth":1369,"text":11048},{"id":11058,"depth":723,"text":11061},{"id":495,"depth":723,"text":11142},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","md",[11287,11291],{"_path":11288,"title":11289,"description":11290},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11292,"title":11293,"description":388},"/_books/9787301135907","日常生活中的自我呈现",1708107594481]