[{"data":1,"prerenderedAt":11294},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":393,"/_books/9787121386695-surround":11286},[4,35,86,105,132,138,144,150,387],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"数字化转型","/gists/digital-transformation",{"title":205,"_path":206},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":208,"_path":209},"正则表达式","/gists/eegex",{"title":211,"_path":212},"Emoji","/gists/emoji",{"title":214,"_path":215},"工程","/gists/engineering",{"title":217,"_path":218},"熵","/gists/entropy",{"title":220,"_path":221},"Environment","/gists/environment",{"title":223,"_path":224},"Erlang","/gists/erlang",{"title":226,"_path":227},"逃离塔克夫","/gists/escape-from-tarkov",{"title":229,"_path":230},"ESNext (ES6-ES11)","/gists/esnext",{"title":232,"_path":233},"Eval！","/gists/eval",{"title":235,"_path":236},"Flutter","/gists/flutter",{"title":238,"_path":239},"字体","/gists/font",{"title":241,"_path":242},"JS 函数式编程","/gists/functional",{"title":244,"_path":245},"游戏化","/gists/gamification",{"title":247,"_path":248},"Google C++ Standard","/gists/google-cpp-standard",{"title":250,"_path":251},"双向链接完全体","/gists/graph",{"title":253,"_path":254},"Hardwares","/gists/hardwares",{"title":256,"_path":257},"哈希冲突","/gists/hash-collision",{"title":259,"_path":260},"信息设计","/gists/information-design",{"title":262,"_path":263},"InstantPage","/gists/instant.page",{"title":265,"_path":266},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":268,"_path":269},"KVStore","/gists/key-value-db",{"title":271,"_path":272},"Kubernetes","/gists/kubernetes",{"title":274,"_path":275},"Makefile","/gists/makefile",{"title":277,"_path":278},"Markdown Inline Style","/gists/markdown-nice",{"title":280,"_path":281},"小程序","/gists/miniapp",{"title":283,"_path":284},"减小页面快照体积","/gists/minify-html",{"title":286,"_path":287},"mklink","/gists/mklink",{"title":289,"_path":290},"Mock","/gists/mock",{"title":292,"_path":293},"多人协作系统","/gists/multiplayer",{"title":295,"_path":296},"多端应用","/gists/multy-end-app",{"title":298,"_path":299},"神经科学","/gists/neuroscience",{"title":301,"_path":302},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":304,"_path":305},"PInvoke","/gists/pinvoke",{"title":307,"_path":308},"像素","/gists/pixel",{"title":310,"_path":311},"PowerShell","/gists/powershell",{"title":313,"_path":314},"量子","/gists/quantum",{"title":316,"_path":317},"保持好奇心","/gists/questions",{"title":319,"_path":320},"React Native","/gists/react-native",{"title":322,"_path":323},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":325,"_path":326},"SEO","/gists/seo",{"title":328,"_path":329},"Shader","/gists/shader",{"title":331,"_path":332},"Shape Up","/gists/shape-up",{"title":334,"_path":335},"睡觉","/gists/sleep",{"title":337,"_path":338},"记录奇怪的问题","/gists/solved",{"title":340,"_path":341},"States","/gists/states",{"title":343,"_path":344},"Storage","/gists/storage",{"title":346,"_path":347},"音视频流处理","/gists/stream-cli",{"title":349,"_path":350},"Symbol","/gists/symbol",{"title":352,"_path":353},"系统论","/gists/systems-theory",{"title":355,"_path":356},"Taro","/gists/taro",{"title":358,"_path":359},"任务切片","/gists/task-slice",{"title":361,"_path":362},"技术偏好","/gists/tech-dudge",{"title":364,"_path":365},"Untitled","/gists/untitled",{"title":367,"_path":368},"可变字体","/gists/variable-font",{"title":370,"_path":371},"视觉错觉","/gists/visual-illusion",{"title":373,"_path":374},"SS(SSR)","/gists/vpn",{"title":376,"_path":377},"VS Code 插件开发","/gists/vscode-plugin",{"title":379,"_path":380},"Web Components","/gists/web-components",{"title":382,"_path":383},"Windows","/gists/windows",{"title":385,"_path":386},"查缺补漏","/gists/wrong",{"title":388,"_path":389,"children":390},"我 / About","/hire",[391],{"title":392,"_path":389},"📬 技术简历",{"_path":394,"_dir":395,"_draft":396,"_partial":397,"_locale":398,"title":399,"description":398,"body":400,"_type":11280,"_id":11281,"_source":11282,"_file":11283,"_stem":11284,"_extension":11285},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":401,"children":402,"toc":11232},"root",[403,411,417,423,428,486,491,512,517,556,561,574,579,584,589,594,612,617,622,627,640,645,650,655,660,775,780,785,845,850,891,896,929,934,939,964,969,1006,1011,1304,1309,1561,1566,1571,1576,1594,1599,1684,1689,1820,1825,1830,2336,2341,2346,2351,2356,2458,2463,2468,2473,2478,2483,2488,2493,2546,2551,2564,2569,2574,2579,2584,2589,2594,2599,2604,2609,2614,2619,2795,2800,2892,2897,2902,2907,2912,3029,3047,3052,3065,3070,3075,3080,3093,3098,3103,3239,3254,3259,3339,3344,3391,3505,3510,3515,3520,3705,3710,3715,3720,3883,3888,3916,3921,3934,3939,4191,4196,4201,4206,4266,4271,4276,4281,4286,4291,4389,4394,4399,4417,4422,4435,4440,4445,4458,4463,4468,4566,4571,4576,4581,4773,4778,5047,5052,5057,5075,5080,5195,5200,5218,5223,5228,5233,5238,5429,5434,5447,5452,6033,6038,6043,6048,6053,6058,6063,6068,6073,6091,6096,6101,6106,6111,6231,6236,6241,6246,6258,6263,6268,6273,6278,6283,6301,6418,6423,6556,6561,6566,6571,6589,6594,6599,6640,6645,6650,6655,6722,6727,6732,6776,6781,6786,6791,6809,6814,6819,6824,6891,6896,6901,6906,6924,6929,6934,6939,6944,6949,6954,6959,6964,6970,6975,6993,6998,7142,7160,7381,7386,7391,7522,7527,7545,7550,7598,7603,7725,7730,7735,8106,8111,8116,8121,8126,8131,8553,8558,8563,8568,8586,8591,8683,8688,8693,8880,8885,8890,8895,8900,8918,8923,8928,8933,8938,8943,8948,8953,9122,9127,9132,9278,9283,9423,9428,9433,9438,9443,9448,9480,9485,9531,9536,9541,9721,9726,9731,9736,9741,9746,9751,10247,10252,10257,10287,10292,10297,10302,10406,10411,10416,10705,10710,10715,10858,10863,10868,10873,10878,10883,10888,11040,11045,11050,11055,11061,11129,11226],{"type":404,"tag":405,"props":406,"children":408},"element","h2",{"id":407},"语法",[409],{"type":410,"value":407},"text",{"type":404,"tag":412,"props":413,"children":415},"h3",{"id":414},"语法综述",[416],{"type":410,"value":414},{"type":404,"tag":418,"props":419,"children":420},"p",{},[421],{"type":410,"value":422},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":404,"tag":418,"props":424,"children":425},{},[426],{"type":410,"value":427},"可以使用 --check 指令检测语法错误：",{"type":404,"tag":429,"props":430,"children":434},"pre",{"className":431,"code":432,"language":433,"meta":398,"style":398},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[435],{"type":404,"tag":436,"props":437,"children":438},"code",{"__ignoreMap":398},[439],{"type":404,"tag":440,"props":441,"children":444},"span",{"class":442,"line":443},"line",1,[445,451,457,463,468,474,480],{"type":404,"tag":440,"props":446,"children":448},{"style":447},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[449],{"type":410,"value":450},"echo",{"type":404,"tag":440,"props":452,"children":454},{"style":453},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[455],{"type":410,"value":456}," '",{"type":404,"tag":440,"props":458,"children":460},{"style":459},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[461],{"type":410,"value":462},"\"hello world\"",{"type":404,"tag":440,"props":464,"children":465},{"style":453},[466],{"type":410,"value":467},"'",{"type":404,"tag":440,"props":469,"children":471},{"style":470},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[472],{"type":410,"value":473}," |",{"type":404,"tag":440,"props":475,"children":477},{"style":476},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[478],{"type":410,"value":479}," node",{"type":404,"tag":440,"props":481,"children":483},{"style":482},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[484],{"type":410,"value":485}," -c\n",{"type":404,"tag":412,"props":487,"children":489},{"id":488},"声明语法",[490],{"type":410,"value":488},{"type":404,"tag":418,"props":492,"children":493},{},[494,496,510],{"type":410,"value":495},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":404,"tag":497,"props":498,"children":499},"sup",{},[500],{"type":404,"tag":501,"props":502,"children":507},"a",{"href":503,"ariaDescribedBy":504,"dataFootnoteRef":398,"id":506},"#user-content-fn-first-class",[505],"footnote-label","user-content-fnref-first-class",[508],{"type":410,"value":509},"1",{"type":410,"value":511},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":404,"tag":418,"props":513,"children":514},{},[515],{"type":410,"value":516},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":404,"tag":518,"props":519,"children":520},"ul",{},[521,540],{"type":404,"tag":522,"props":523,"children":524},"li",{},[525,527,538],{"type":410,"value":526},"基本数据类型：undefined、string、number、object",{"type":404,"tag":497,"props":528,"children":529},{},[530],{"type":404,"tag":501,"props":531,"children":535},{"href":532,"ariaDescribedBy":533,"dataFootnoteRef":398,"id":534},"#user-content-fn-oo",[505],"user-content-fnref-oo",[536],{"type":410,"value":537},"2",{"type":410,"value":539},"、function、boolean、symbol、bigint",{"type":404,"tag":522,"props":541,"children":542},{},[543,545],{"type":410,"value":544},"值类型和引用类型",{"type":404,"tag":497,"props":546,"children":547},{},[548],{"type":404,"tag":501,"props":549,"children":553},{"href":550,"ariaDescribedBy":551,"dataFootnoteRef":398,"id":552},"#user-content-fn-string",[505],"user-content-fnref-string",[554],{"type":410,"value":555},"3",{"type":404,"tag":418,"props":557,"children":558},{},[559],{"type":410,"value":560},"如果算上规范，可以再增加两种类型系统：",{"type":404,"tag":518,"props":562,"children":563},{},[564,569],{"type":404,"tag":522,"props":565,"children":566},{},[567],{"type":410,"value":568},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":404,"tag":522,"props":570,"children":571},{},[572],{"type":410,"value":573},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":404,"tag":418,"props":575,"children":576},{},[577],{"type":410,"value":578},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":404,"tag":418,"props":580,"children":581},{},[582],{"type":410,"value":583},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":404,"tag":418,"props":585,"children":586},{},[587],{"type":410,"value":588},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":404,"tag":418,"props":590,"children":591},{},[592],{"type":410,"value":593},"相关字符串字面量的一些冷知识：",{"type":404,"tag":518,"props":595,"children":596},{},[597,602,607],{"type":404,"tag":522,"props":598,"children":599},{},[600],{"type":410,"value":601},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":404,"tag":522,"props":603,"children":604},{},[605],{"type":410,"value":606},"空字符串也能作为对象的键。",{"type":404,"tag":522,"props":608,"children":609},{},[610],{"type":410,"value":611},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":404,"tag":412,"props":613,"children":615},{"id":614},"表达式运算",[616],{"type":410,"value":614},{"type":404,"tag":418,"props":618,"children":619},{},[620],{"type":410,"value":621},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":404,"tag":418,"props":623,"children":624},{},[625],{"type":410,"value":626},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":404,"tag":518,"props":628,"children":629},{},[630,635],{"type":404,"tag":522,"props":631,"children":632},{},[633],{"type":410,"value":634},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":404,"tag":522,"props":636,"children":637},{},[638],{"type":410,"value":639},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":404,"tag":418,"props":641,"children":642},{},[643],{"type":410,"value":644},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":404,"tag":418,"props":646,"children":647},{},[648],{"type":410,"value":649},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":404,"tag":418,"props":651,"children":652},{},[653],{"type":410,"value":654},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":404,"tag":418,"props":656,"children":657},{},[658],{"type":410,"value":659},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":404,"tag":429,"props":661,"children":665},{"className":662,"code":663,"language":664,"meta":398,"style":398},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[666],{"type":404,"tag":436,"props":667,"children":668},{"__ignoreMap":398},[669,731],{"type":404,"tag":440,"props":670,"children":671},{"class":442,"line":443},[672,678,684,690,695,700,706,711,716,720,725],{"type":404,"tag":440,"props":673,"children":675},{"style":674},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[676],{"type":410,"value":677},"Object",{"type":404,"tag":440,"props":679,"children":681},{"style":680},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[682],{"type":410,"value":683},".",{"type":404,"tag":440,"props":685,"children":687},{"style":686},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[688],{"type":410,"value":689},"is",{"type":404,"tag":440,"props":691,"children":692},{"style":674},[693],{"type":410,"value":694},"(",{"type":404,"tag":440,"props":696,"children":697},{"style":470},[698],{"type":410,"value":699},"+",{"type":404,"tag":440,"props":701,"children":703},{"style":702},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[704],{"type":410,"value":705},"0",{"type":404,"tag":440,"props":707,"children":708},{"style":680},[709],{"type":410,"value":710},",",{"type":404,"tag":440,"props":712,"children":713},{"style":470},[714],{"type":410,"value":715}," -",{"type":404,"tag":440,"props":717,"children":718},{"style":702},[719],{"type":410,"value":705},{"type":404,"tag":440,"props":721,"children":722},{"style":674},[723],{"type":410,"value":724},") ",{"type":404,"tag":440,"props":726,"children":728},{"style":727},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[729],{"type":410,"value":730},"// false\n",{"type":404,"tag":440,"props":732,"children":734},{"class":442,"line":733},2,[735,739,743,747,751,757,761,766,770],{"type":404,"tag":440,"props":736,"children":737},{"style":674},[738],{"type":410,"value":677},{"type":404,"tag":440,"props":740,"children":741},{"style":680},[742],{"type":410,"value":683},{"type":404,"tag":440,"props":744,"children":745},{"style":686},[746],{"type":410,"value":689},{"type":404,"tag":440,"props":748,"children":749},{"style":674},[750],{"type":410,"value":694},{"type":404,"tag":440,"props":752,"children":754},{"style":753},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[755],{"type":410,"value":756},"NaN",{"type":404,"tag":440,"props":758,"children":759},{"style":680},[760],{"type":410,"value":710},{"type":404,"tag":440,"props":762,"children":763},{"style":753},[764],{"type":410,"value":765}," NaN",{"type":404,"tag":440,"props":767,"children":768},{"style":674},[769],{"type":410,"value":724},{"type":404,"tag":440,"props":771,"children":772},{"style":727},[773],{"type":410,"value":774},"// true\n",{"type":404,"tag":418,"props":776,"children":777},{},[778],{"type":410,"value":779},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":404,"tag":418,"props":781,"children":782},{},[783],{"type":410,"value":784},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":404,"tag":429,"props":786,"children":788},{"className":662,"code":787,"language":664,"meta":398,"style":398},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[789],{"type":404,"tag":436,"props":790,"children":791},{"__ignoreMap":398},[792,817],{"type":404,"tag":440,"props":793,"children":794},{"class":442,"line":443},[795,800,804,808,813],{"type":404,"tag":440,"props":796,"children":797},{"style":686},[798],{"type":410,"value":799},"Boolean",{"type":404,"tag":440,"props":801,"children":802},{"style":674},[803],{"type":410,"value":694},{"type":404,"tag":440,"props":805,"children":806},{"style":686},[807],{"type":410,"value":349},{"type":404,"tag":440,"props":809,"children":810},{"style":674},[811],{"type":410,"value":812},"()) ",{"type":404,"tag":440,"props":814,"children":815},{"style":727},[816],{"type":410,"value":774},{"type":404,"tag":440,"props":818,"children":819},{"class":442,"line":733},[820,824,829,834,840],{"type":404,"tag":440,"props":821,"children":822},{"style":686},[823],{"type":410,"value":349},{"type":404,"tag":440,"props":825,"children":826},{"style":674},[827],{"type":410,"value":828},"() ",{"type":404,"tag":440,"props":830,"children":831},{"style":470},[832],{"type":410,"value":833},"==",{"type":404,"tag":440,"props":835,"children":837},{"style":836},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[838],{"type":410,"value":839}," true",{"type":404,"tag":440,"props":841,"children":842},{"style":727},[843],{"type":410,"value":844}," // false\n",{"type":404,"tag":418,"props":846,"children":847},{},[848],{"type":410,"value":849},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":404,"tag":429,"props":851,"children":853},{"className":431,"code":852,"language":433,"meta":398,"style":398},"echo \"1 = 1\" | node -c\n",[854],{"type":404,"tag":436,"props":855,"children":856},{"__ignoreMap":398},[857],{"type":404,"tag":440,"props":858,"children":859},{"class":442,"line":443},[860,864,869,874,879,883,887],{"type":404,"tag":440,"props":861,"children":862},{"style":447},[863],{"type":410,"value":450},{"type":404,"tag":440,"props":865,"children":866},{"style":453},[867],{"type":410,"value":868}," \"",{"type":404,"tag":440,"props":870,"children":871},{"style":459},[872],{"type":410,"value":873},"1 = 1",{"type":404,"tag":440,"props":875,"children":876},{"style":453},[877],{"type":410,"value":878},"\"",{"type":404,"tag":440,"props":880,"children":881},{"style":470},[882],{"type":410,"value":473},{"type":404,"tag":440,"props":884,"children":885},{"style":476},[886],{"type":410,"value":479},{"type":404,"tag":440,"props":888,"children":889},{"style":482},[890],{"type":410,"value":485},{"type":404,"tag":418,"props":892,"children":893},{},[894],{"type":410,"value":895},"函数调用也有“隐式调用”这一概念：",{"type":404,"tag":518,"props":897,"children":898},{},[899,904,909,914,919,924],{"type":404,"tag":522,"props":900,"children":901},{},[902],{"type":410,"value":903},"使用 new 运算符",{"type":404,"tag":522,"props":905,"children":906},{},[907],{"type":410,"value":908},"模板处理函数 + 模板字符串调用",{"type":404,"tag":522,"props":910,"children":911},{},[912],{"type":410,"value":913},"函数作为属性存取器且发生了属性存取操作时",{"type":404,"tag":522,"props":915,"children":916},{},[917],{"type":410,"value":918},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":404,"tag":522,"props":920,"children":921},{},[922],{"type":410,"value":923},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":404,"tag":522,"props":925,"children":926},{},[927],{"type":410,"value":928},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":404,"tag":418,"props":930,"children":931},{},[932],{"type":410,"value":933},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":404,"tag":418,"props":935,"children":936},{},[937],{"type":410,"value":938},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":404,"tag":429,"props":940,"children":942},{"className":662,"code":941,"language":664,"meta":398,"style":398},"typeof x // undefined\n",[943],{"type":404,"tag":436,"props":944,"children":945},{"__ignoreMap":398},[946],{"type":404,"tag":440,"props":947,"children":948},{"class":442,"line":443},[949,954,959],{"type":404,"tag":440,"props":950,"children":951},{"style":470},[952],{"type":410,"value":953},"typeof",{"type":404,"tag":440,"props":955,"children":956},{"style":674},[957],{"type":410,"value":958}," x ",{"type":404,"tag":440,"props":960,"children":961},{"style":727},[962],{"type":410,"value":963},"// undefined\n",{"type":404,"tag":418,"props":965,"children":966},{},[967],{"type":410,"value":968},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":404,"tag":429,"props":970,"children":972},{"className":662,"code":971,"language":664,"meta":398,"style":398},"typeof x // ReferenceError\nlet x\n",[973],{"type":404,"tag":436,"props":974,"children":975},{"__ignoreMap":398},[976,992],{"type":404,"tag":440,"props":977,"children":978},{"class":442,"line":443},[979,983,987],{"type":404,"tag":440,"props":980,"children":981},{"style":470},[982],{"type":410,"value":953},{"type":404,"tag":440,"props":984,"children":985},{"style":674},[986],{"type":410,"value":958},{"type":404,"tag":440,"props":988,"children":989},{"style":727},[990],{"type":410,"value":991},"// ReferenceError\n",{"type":404,"tag":440,"props":993,"children":994},{"class":442,"line":733},[995,1001],{"type":404,"tag":440,"props":996,"children":998},{"style":997},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[999],{"type":410,"value":1000},"let",{"type":404,"tag":440,"props":1002,"children":1003},{"style":674},[1004],{"type":410,"value":1005}," x\n",{"type":404,"tag":418,"props":1007,"children":1008},{},[1009],{"type":410,"value":1010},"完整的运算符优先级列表如下：",{"type":404,"tag":1012,"props":1013,"children":1014},"table",{},[1015,1034],{"type":404,"tag":1016,"props":1017,"children":1018},"thead",{},[1019],{"type":404,"tag":1020,"props":1021,"children":1022},"tr",{},[1023,1029],{"type":404,"tag":1024,"props":1025,"children":1026},"th",{},[1027],{"type":410,"value":1028},"运算符",{"type":404,"tag":1024,"props":1030,"children":1031},{},[1032],{"type":410,"value":1033},"描述",{"type":404,"tag":1035,"props":1036,"children":1037},"tbody",{},[1038,1052,1070,1083,1096,1109,1122,1135,1148,1161,1174,1187,1200,1213,1226,1239,1252,1265,1278,1291],{"type":404,"tag":1020,"props":1039,"children":1040},{},[1041,1047],{"type":404,"tag":1042,"props":1043,"children":1044},"td",{},[1045],{"type":410,"value":1046},"()",{"type":404,"tag":1042,"props":1048,"children":1049},{},[1050],{"type":410,"value":1051},"成组运算",{"type":404,"tag":1020,"props":1053,"children":1054},{},[1055,1065],{"type":404,"tag":1042,"props":1056,"children":1057},{},[1058,1060,1063],{"type":410,"value":1059},".、",{"type":404,"tag":440,"props":1061,"children":1062},{},[],{"type":410,"value":1064},"、new ()",{"type":404,"tag":1042,"props":1066,"children":1067},{},[1068],{"type":410,"value":1069},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":404,"tag":1020,"props":1071,"children":1072},{},[1073,1078],{"type":404,"tag":1042,"props":1074,"children":1075},{},[1076],{"type":410,"value":1077},"()、new",{"type":404,"tag":1042,"props":1079,"children":1080},{},[1081],{"type":410,"value":1082},"函数调用、new 运算符",{"type":404,"tag":1020,"props":1084,"children":1085},{},[1086,1091],{"type":404,"tag":1042,"props":1087,"children":1088},{},[1089],{"type":410,"value":1090},"++、--",{"type":404,"tag":1042,"props":1092,"children":1093},{},[1094],{"type":410,"value":1095},"后置递增、后置递减",{"type":404,"tag":1020,"props":1097,"children":1098},{},[1099,1104],{"type":404,"tag":1042,"props":1100,"children":1101},{},[1102],{"type":410,"value":1103},"+、-、++、--、~、!、delete、typeof、void",{"type":404,"tag":1042,"props":1105,"children":1106},{},[1107],{"type":410,"value":1108},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":404,"tag":1020,"props":1110,"children":1111},{},[1112,1117],{"type":404,"tag":1042,"props":1113,"children":1114},{},[1115],{"type":410,"value":1116},"*、/、%",{"type":404,"tag":1042,"props":1118,"children":1119},{},[1120],{"type":410,"value":1121},"乘法、除法、取模",{"type":404,"tag":1020,"props":1123,"children":1124},{},[1125,1130],{"type":404,"tag":1042,"props":1126,"children":1127},{},[1128],{"type":410,"value":1129},"+、-、+",{"type":404,"tag":1042,"props":1131,"children":1132},{},[1133],{"type":410,"value":1134},"加法、减法、字符串连接",{"type":404,"tag":1020,"props":1136,"children":1137},{},[1138,1143],{"type":404,"tag":1042,"props":1139,"children":1140},{},[1141],{"type":410,"value":1142},"\u003C\u003C、>>、>>>",{"type":404,"tag":1042,"props":1144,"children":1145},{},[1146],{"type":410,"value":1147},"移位运算符",{"type":404,"tag":1020,"props":1149,"children":1150},{},[1151,1156],{"type":404,"tag":1042,"props":1152,"children":1153},{},[1154],{"type":410,"value":1155},"\u003C、\u003C=、>=、>、in、instanceof",{"type":404,"tag":1042,"props":1157,"children":1158},{},[1159],{"type":410,"value":1160},"关系运算符、in、instanceof",{"type":404,"tag":1020,"props":1162,"children":1163},{},[1164,1169],{"type":404,"tag":1042,"props":1165,"children":1166},{},[1167],{"type":410,"value":1168},"==、!=、===、!==",{"type":404,"tag":1042,"props":1170,"children":1171},{},[1172],{"type":410,"value":1173},"等值检测",{"type":404,"tag":1020,"props":1175,"children":1176},{},[1177,1182],{"type":404,"tag":1042,"props":1178,"children":1179},{},[1180],{"type":410,"value":1181},"&",{"type":404,"tag":1042,"props":1183,"children":1184},{},[1185],{"type":410,"value":1186},"按位与",{"type":404,"tag":1020,"props":1188,"children":1189},{},[1190,1195],{"type":404,"tag":1042,"props":1191,"children":1192},{},[1193],{"type":410,"value":1194},"^",{"type":404,"tag":1042,"props":1196,"children":1197},{},[1198],{"type":410,"value":1199},"按位异或",{"type":404,"tag":1020,"props":1201,"children":1202},{},[1203,1208],{"type":404,"tag":1042,"props":1204,"children":1205},{},[1206],{"type":410,"value":1207},"|",{"type":404,"tag":1042,"props":1209,"children":1210},{},[1211],{"type":410,"value":1212},"按位或",{"type":404,"tag":1020,"props":1214,"children":1215},{},[1216,1221],{"type":404,"tag":1042,"props":1217,"children":1218},{},[1219],{"type":410,"value":1220},"&&",{"type":404,"tag":1042,"props":1222,"children":1223},{},[1224],{"type":410,"value":1225},"逻辑与",{"type":404,"tag":1020,"props":1227,"children":1228},{},[1229,1234],{"type":404,"tag":1042,"props":1230,"children":1231},{},[1232],{"type":410,"value":1233},"||",{"type":404,"tag":1042,"props":1235,"children":1236},{},[1237],{"type":410,"value":1238},"逻辑或",{"type":404,"tag":1020,"props":1240,"children":1241},{},[1242,1247],{"type":404,"tag":1042,"props":1243,"children":1244},{},[1245],{"type":410,"value":1246},"?:",{"type":404,"tag":1042,"props":1248,"children":1249},{},[1250],{"type":410,"value":1251},"三木运算",{"type":404,"tag":1020,"props":1253,"children":1254},{},[1255,1260],{"type":404,"tag":1042,"props":1256,"children":1257},{},[1258],{"type":410,"value":1259},"=、oP=",{"type":404,"tag":1042,"props":1261,"children":1262},{},[1263],{"type":410,"value":1264},"赋值、运算赋值",{"type":404,"tag":1020,"props":1266,"children":1267},{},[1268,1273],{"type":404,"tag":1042,"props":1269,"children":1270},{},[1271],{"type":410,"value":1272},"yield、yield*",{"type":404,"tag":1042,"props":1274,"children":1275},{},[1276],{"type":410,"value":1277},"yield 表达式",{"type":404,"tag":1020,"props":1279,"children":1280},{},[1281,1286],{"type":404,"tag":1042,"props":1282,"children":1283},{},[1284],{"type":410,"value":1285},"...",{"type":404,"tag":1042,"props":1287,"children":1288},{},[1289],{"type":410,"value":1290},"展开运算符",{"type":404,"tag":1020,"props":1292,"children":1293},{},[1294,1299],{"type":404,"tag":1042,"props":1295,"children":1296},{},[1297],{"type":410,"value":1298},"，",{"type":404,"tag":1042,"props":1300,"children":1301},{},[1302],{"type":410,"value":1303},"逗号运算符、多重求值",{"type":404,"tag":418,"props":1305,"children":1306},{},[1307],{"type":410,"value":1308},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":404,"tag":429,"props":1310,"children":1312},{"className":662,"code":1311,"language":664,"meta":398,"style":398},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1313],{"type":404,"tag":436,"props":1314,"children":1315},{"__ignoreMap":398},[1316,1339,1375,1416,1425,1460,1497,1505,1532],{"type":404,"tag":440,"props":1317,"children":1318},{"class":442,"line":443},[1319,1324,1329,1334],{"type":404,"tag":440,"props":1320,"children":1321},{"style":997},[1322],{"type":410,"value":1323},"function",{"type":404,"tag":440,"props":1325,"children":1326},{"style":686},[1327],{"type":410,"value":1328}," A",{"type":404,"tag":440,"props":1330,"children":1331},{"style":680},[1332],{"type":410,"value":1333}," ()",{"type":404,"tag":440,"props":1335,"children":1336},{"style":680},[1337],{"type":410,"value":1338}," {\n",{"type":404,"tag":440,"props":1340,"children":1341},{"class":442,"line":733},[1342,1348,1352,1357,1362,1366,1370],{"type":404,"tag":440,"props":1343,"children":1345},{"style":1344},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1346],{"type":410,"value":1347},"  this",{"type":404,"tag":440,"props":1349,"children":1350},{"style":680},[1351],{"type":410,"value":683},{"type":404,"tag":440,"props":1353,"children":1354},{"style":674},[1355],{"type":410,"value":1356},"b",{"type":404,"tag":440,"props":1358,"children":1359},{"style":470},[1360],{"type":410,"value":1361}," =",{"type":404,"tag":440,"props":1363,"children":1364},{"style":453},[1365],{"type":410,"value":456},{"type":404,"tag":440,"props":1367,"children":1368},{"style":459},[1369],{"type":410,"value":1356},{"type":404,"tag":440,"props":1371,"children":1372},{"style":453},[1373],{"type":410,"value":1374},"'\n",{"type":404,"tag":440,"props":1376,"children":1378},{"class":442,"line":1377},3,[1379,1384,1388,1393,1398,1402,1407,1411],{"type":404,"tag":440,"props":1380,"children":1381},{"style":674},[1382],{"type":410,"value":1383},"  console",{"type":404,"tag":440,"props":1385,"children":1386},{"style":680},[1387],{"type":410,"value":683},{"type":404,"tag":440,"props":1389,"children":1390},{"style":686},[1391],{"type":410,"value":1392},"log",{"type":404,"tag":440,"props":1394,"children":1396},{"style":1395},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1397],{"type":410,"value":694},{"type":404,"tag":440,"props":1399,"children":1400},{"style":453},[1401],{"type":410,"value":467},{"type":404,"tag":440,"props":1403,"children":1404},{"style":459},[1405],{"type":410,"value":1406},"A().b",{"type":404,"tag":440,"props":1408,"children":1409},{"style":453},[1410],{"type":410,"value":467},{"type":404,"tag":440,"props":1412,"children":1413},{"style":1395},[1414],{"type":410,"value":1415},")\n",{"type":404,"tag":440,"props":1417,"children":1419},{"class":442,"line":1418},4,[1420],{"type":404,"tag":440,"props":1421,"children":1422},{"style":680},[1423],{"type":410,"value":1424},"}\n",{"type":404,"tag":440,"props":1426,"children":1428},{"class":442,"line":1427},5,[1429,1435,1439,1443,1447,1452,1456],{"type":404,"tag":440,"props":1430,"children":1432},{"style":1431},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1433],{"type":410,"value":1434},"A",{"type":404,"tag":440,"props":1436,"children":1437},{"style":680},[1438],{"type":410,"value":683},{"type":404,"tag":440,"props":1440,"children":1441},{"style":686},[1442],{"type":410,"value":1356},{"type":404,"tag":440,"props":1444,"children":1445},{"style":470},[1446],{"type":410,"value":1361},{"type":404,"tag":440,"props":1448,"children":1449},{"style":997},[1450],{"type":410,"value":1451}," function",{"type":404,"tag":440,"props":1453,"children":1454},{"style":680},[1455],{"type":410,"value":1333},{"type":404,"tag":440,"props":1457,"children":1458},{"style":680},[1459],{"type":410,"value":1338},{"type":404,"tag":440,"props":1461,"children":1463},{"class":442,"line":1462},6,[1464,1468,1472,1476,1480,1484,1489,1493],{"type":404,"tag":440,"props":1465,"children":1466},{"style":674},[1467],{"type":410,"value":1383},{"type":404,"tag":440,"props":1469,"children":1470},{"style":680},[1471],{"type":410,"value":683},{"type":404,"tag":440,"props":1473,"children":1474},{"style":686},[1475],{"type":410,"value":1392},{"type":404,"tag":440,"props":1477,"children":1478},{"style":1395},[1479],{"type":410,"value":694},{"type":404,"tag":440,"props":1481,"children":1482},{"style":453},[1483],{"type":410,"value":467},{"type":404,"tag":440,"props":1485,"children":1486},{"style":459},[1487],{"type":410,"value":1488},"A.b",{"type":404,"tag":440,"props":1490,"children":1491},{"style":453},[1492],{"type":410,"value":467},{"type":404,"tag":440,"props":1494,"children":1495},{"style":1395},[1496],{"type":410,"value":1415},{"type":404,"tag":440,"props":1498,"children":1500},{"class":442,"line":1499},7,[1501],{"type":404,"tag":440,"props":1502,"children":1503},{"style":680},[1504],{"type":410,"value":1424},{"type":404,"tag":440,"props":1506,"children":1508},{"class":442,"line":1507},8,[1509,1514,1518,1522,1527],{"type":404,"tag":440,"props":1510,"children":1511},{"style":470},[1512],{"type":410,"value":1513},"new",{"type":404,"tag":440,"props":1515,"children":1516},{"style":1431},[1517],{"type":410,"value":1328},{"type":404,"tag":440,"props":1519,"children":1520},{"style":680},[1521],{"type":410,"value":683},{"type":404,"tag":440,"props":1523,"children":1524},{"style":674},[1525],{"type":410,"value":1526},"b ",{"type":404,"tag":440,"props":1528,"children":1529},{"style":727},[1530],{"type":410,"value":1531},"// A.b\n",{"type":404,"tag":440,"props":1533,"children":1535},{"class":442,"line":1534},9,[1536,1540,1544,1548,1552,1556],{"type":404,"tag":440,"props":1537,"children":1538},{"style":470},[1539],{"type":410,"value":1513},{"type":404,"tag":440,"props":1541,"children":1542},{"style":686},[1543],{"type":410,"value":1328},{"type":404,"tag":440,"props":1545,"children":1546},{"style":674},[1547],{"type":410,"value":1046},{"type":404,"tag":440,"props":1549,"children":1550},{"style":680},[1551],{"type":410,"value":683},{"type":404,"tag":440,"props":1553,"children":1554},{"style":674},[1555],{"type":410,"value":1526},{"type":404,"tag":440,"props":1557,"children":1558},{"style":727},[1559],{"type":410,"value":1560},"// A().b\n",{"type":404,"tag":412,"props":1562,"children":1564},{"id":1563},"语句",[1565],{"type":410,"value":1563},{"type":404,"tag":418,"props":1567,"children":1568},{},[1569],{"type":410,"value":1570},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":404,"tag":418,"props":1572,"children":1573},{},[1574],{"type":410,"value":1575},"需要注意的点：",{"type":404,"tag":518,"props":1577,"children":1578},{},[1579,1584,1589],{"type":404,"tag":522,"props":1580,"children":1581},{},[1582],{"type":410,"value":1583},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":404,"tag":522,"props":1585,"children":1586},{},[1587],{"type":410,"value":1588},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":404,"tag":522,"props":1590,"children":1591},{},[1592],{"type":410,"value":1593},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":404,"tag":418,"props":1595,"children":1596},{},[1597],{"type":410,"value":1598},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":404,"tag":429,"props":1600,"children":1602},{"className":662,"code":1601,"language":664,"meta":398,"style":398},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1603],{"type":404,"tag":436,"props":1604,"children":1605},{"__ignoreMap":398},[1606,1637,1664],{"type":404,"tag":440,"props":1607,"children":1608},{"class":442,"line":443},[1609,1613,1618,1622,1628,1633],{"type":404,"tag":440,"props":1610,"children":1611},{"style":997},[1612],{"type":410,"value":1323},{"type":404,"tag":440,"props":1614,"children":1615},{"style":686},[1616],{"type":410,"value":1617}," log",{"type":404,"tag":440,"props":1619,"children":1620},{"style":680},[1621],{"type":410,"value":694},{"type":404,"tag":440,"props":1623,"children":1625},{"style":1624},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1626],{"type":410,"value":1627},"arg",{"type":404,"tag":440,"props":1629,"children":1630},{"style":680},[1631],{"type":410,"value":1632},")",{"type":404,"tag":440,"props":1634,"children":1635},{"style":680},[1636],{"type":410,"value":1338},{"type":404,"tag":440,"props":1638,"children":1639},{"class":442,"line":733},[1640,1644,1648,1652,1656,1660],{"type":404,"tag":440,"props":1641,"children":1642},{"style":674},[1643],{"type":410,"value":1383},{"type":404,"tag":440,"props":1645,"children":1646},{"style":680},[1647],{"type":410,"value":683},{"type":404,"tag":440,"props":1649,"children":1650},{"style":686},[1651],{"type":410,"value":1392},{"type":404,"tag":440,"props":1653,"children":1654},{"style":1395},[1655],{"type":410,"value":694},{"type":404,"tag":440,"props":1657,"children":1658},{"style":674},[1659],{"type":410,"value":1627},{"type":404,"tag":440,"props":1661,"children":1662},{"style":1395},[1663],{"type":410,"value":1415},{"type":404,"tag":440,"props":1665,"children":1666},{"class":442,"line":1377},[1667,1672,1676,1680],{"type":404,"tag":440,"props":1668,"children":1669},{"style":680},[1670],{"type":410,"value":1671},"}",{"type":404,"tag":440,"props":1673,"children":1674},{"style":674},[1675],{"type":410,"value":694},{"type":404,"tag":440,"props":1677,"children":1678},{"style":702},[1679],{"type":410,"value":537},{"type":404,"tag":440,"props":1681,"children":1682},{"style":674},[1683],{"type":410,"value":1415},{"type":404,"tag":418,"props":1685,"children":1686},{},[1687],{"type":410,"value":1688},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":404,"tag":429,"props":1690,"children":1692},{"className":662,"code":1691,"language":664,"meta":398,"style":398},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1693],{"type":404,"tag":436,"props":1694,"children":1695},{"__ignoreMap":398},[1696,1748,1786,1813],{"type":404,"tag":440,"props":1697,"children":1698},{"class":442,"line":443},[1699,1705,1710,1715,1719,1724,1728,1733,1738,1743],{"type":404,"tag":440,"props":1700,"children":1702},{"style":1701},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1703],{"type":410,"value":1704},"try",{"type":404,"tag":440,"props":1706,"children":1707},{"style":680},[1708],{"type":410,"value":1709}," {",{"type":404,"tag":440,"props":1711,"children":1712},{"style":1701},[1713],{"type":410,"value":1714}," throw",{"type":404,"tag":440,"props":1716,"children":1717},{"style":453},[1718],{"type":410,"value":456},{"type":404,"tag":440,"props":1720,"children":1721},{"style":459},[1722],{"type":410,"value":1723},"test",{"type":404,"tag":440,"props":1725,"children":1726},{"style":453},[1727],{"type":410,"value":467},{"type":404,"tag":440,"props":1729,"children":1730},{"style":680},[1731],{"type":410,"value":1732}," }",{"type":404,"tag":440,"props":1734,"children":1735},{"style":1701},[1736],{"type":410,"value":1737}," catch",{"type":404,"tag":440,"props":1739,"children":1740},{"style":674},[1741],{"type":410,"value":1742}," (e) ",{"type":404,"tag":440,"props":1744,"children":1745},{"style":680},[1746],{"type":410,"value":1747},"{\n",{"type":404,"tag":440,"props":1749,"children":1750},{"class":442,"line":733},[1751,1755,1759,1763,1767,1772,1776,1781],{"type":404,"tag":440,"props":1752,"children":1753},{"style":674},[1754],{"type":410,"value":1383},{"type":404,"tag":440,"props":1756,"children":1757},{"style":680},[1758],{"type":410,"value":683},{"type":404,"tag":440,"props":1760,"children":1761},{"style":686},[1762],{"type":410,"value":1392},{"type":404,"tag":440,"props":1764,"children":1765},{"style":1395},[1766],{"type":410,"value":694},{"type":404,"tag":440,"props":1768,"children":1769},{"style":674},[1770],{"type":410,"value":1771},"e",{"type":404,"tag":440,"props":1773,"children":1774},{"style":1395},[1775],{"type":410,"value":1632},{"type":404,"tag":440,"props":1777,"children":1778},{"style":680},[1779],{"type":410,"value":1780},";",{"type":404,"tag":440,"props":1782,"children":1783},{"style":727},[1784],{"type":410,"value":1785}," // test\n",{"type":404,"tag":440,"props":1787,"children":1788},{"class":442,"line":1377},[1789,1794,1799,1803,1808],{"type":404,"tag":440,"props":1790,"children":1791},{"style":997},[1792],{"type":410,"value":1793},"  var",{"type":404,"tag":440,"props":1795,"children":1796},{"style":674},[1797],{"type":410,"value":1798}," e",{"type":404,"tag":440,"props":1800,"children":1801},{"style":470},[1802],{"type":410,"value":1361},{"type":404,"tag":440,"props":1804,"children":1805},{"style":702},[1806],{"type":410,"value":1807}," 1",{"type":404,"tag":440,"props":1809,"children":1810},{"style":680},[1811],{"type":410,"value":1812},";\n",{"type":404,"tag":440,"props":1814,"children":1815},{"class":442,"line":1418},[1816],{"type":404,"tag":440,"props":1817,"children":1818},{"style":680},[1819],{"type":410,"value":1424},{"type":404,"tag":418,"props":1821,"children":1822},{},[1823],{"type":410,"value":1824},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":404,"tag":418,"props":1826,"children":1827},{},[1828],{"type":410,"value":1829},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":404,"tag":429,"props":1831,"children":1833},{"className":662,"code":1832,"language":664,"meta":398,"style":398},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1834],{"type":404,"tag":436,"props":1835,"children":1836},{"__ignoreMap":398},[1837,1845,1918,1984,2028,2070,2078,2085,2093,2108,2168,2229,2270,2311,2320,2328],{"type":404,"tag":440,"props":1838,"children":1839},{"class":442,"line":443},[1840],{"type":404,"tag":440,"props":1841,"children":1842},{"style":727},[1843],{"type":410,"value":1844},"// it works !\n",{"type":404,"tag":440,"props":1846,"children":1847},{"class":442,"line":733},[1848,1853,1858,1863,1868,1873,1877,1881,1886,1891,1896,1900,1905,1910,1914],{"type":404,"tag":440,"props":1849,"children":1851},{"style":1850},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1852],{"type":410,"value":1723},{"type":404,"tag":440,"props":1854,"children":1855},{"style":680},[1856],{"type":410,"value":1857},":",{"type":404,"tag":440,"props":1859,"children":1860},{"style":1701},[1861],{"type":410,"value":1862}," for",{"type":404,"tag":440,"props":1864,"children":1865},{"style":674},[1866],{"type":410,"value":1867}," (i ",{"type":404,"tag":440,"props":1869,"children":1870},{"style":470},[1871],{"type":410,"value":1872},"=",{"type":404,"tag":440,"props":1874,"children":1875},{"style":702},[1876],{"type":410,"value":1807},{"type":404,"tag":440,"props":1878,"children":1879},{"style":680},[1880],{"type":410,"value":1780},{"type":404,"tag":440,"props":1882,"children":1883},{"style":674},[1884],{"type":410,"value":1885}," i ",{"type":404,"tag":440,"props":1887,"children":1888},{"style":470},[1889],{"type":410,"value":1890},"\u003C",{"type":404,"tag":440,"props":1892,"children":1893},{"style":702},[1894],{"type":410,"value":1895}," 3",{"type":404,"tag":440,"props":1897,"children":1898},{"style":680},[1899],{"type":410,"value":1780},{"type":404,"tag":440,"props":1901,"children":1902},{"style":674},[1903],{"type":410,"value":1904}," i",{"type":404,"tag":440,"props":1906,"children":1907},{"style":470},[1908],{"type":410,"value":1909},"++",{"type":404,"tag":440,"props":1911,"children":1912},{"style":674},[1913],{"type":410,"value":724},{"type":404,"tag":440,"props":1915,"children":1916},{"style":680},[1917],{"type":410,"value":1747},{"type":404,"tag":440,"props":1919,"children":1920},{"class":442,"line":1377},[1921,1926,1931,1936,1940,1945,1949,1954,1959,1964,1968,1972,1976,1980],{"type":404,"tag":440,"props":1922,"children":1923},{"style":1701},[1924],{"type":410,"value":1925},"  for",{"type":404,"tag":440,"props":1927,"children":1928},{"style":1395},[1929],{"type":410,"value":1930}," (",{"type":404,"tag":440,"props":1932,"children":1933},{"style":674},[1934],{"type":410,"value":1935},"j",{"type":404,"tag":440,"props":1937,"children":1938},{"style":470},[1939],{"type":410,"value":1361},{"type":404,"tag":440,"props":1941,"children":1942},{"style":702},[1943],{"type":410,"value":1944}," 5",{"type":404,"tag":440,"props":1946,"children":1947},{"style":680},[1948],{"type":410,"value":1780},{"type":404,"tag":440,"props":1950,"children":1951},{"style":674},[1952],{"type":410,"value":1953}," j",{"type":404,"tag":440,"props":1955,"children":1956},{"style":470},[1957],{"type":410,"value":1958}," \u003C",{"type":404,"tag":440,"props":1960,"children":1961},{"style":702},[1962],{"type":410,"value":1963}," 8",{"type":404,"tag":440,"props":1965,"children":1966},{"style":680},[1967],{"type":410,"value":1780},{"type":404,"tag":440,"props":1969,"children":1970},{"style":674},[1971],{"type":410,"value":1953},{"type":404,"tag":440,"props":1973,"children":1974},{"style":470},[1975],{"type":410,"value":1909},{"type":404,"tag":440,"props":1977,"children":1978},{"style":1395},[1979],{"type":410,"value":724},{"type":404,"tag":440,"props":1981,"children":1982},{"style":680},[1983],{"type":410,"value":1747},{"type":404,"tag":440,"props":1985,"children":1986},{"class":442,"line":1418},[1987,1992,1996,2000,2005,2010,2014,2019,2024],{"type":404,"tag":440,"props":1988,"children":1989},{"style":1701},[1990],{"type":410,"value":1991},"    if",{"type":404,"tag":440,"props":1993,"children":1994},{"style":1395},[1995],{"type":410,"value":1930},{"type":404,"tag":440,"props":1997,"children":1998},{"style":674},[1999],{"type":410,"value":1935},{"type":404,"tag":440,"props":2001,"children":2002},{"style":470},[2003],{"type":410,"value":2004}," ===",{"type":404,"tag":440,"props":2006,"children":2007},{"style":702},[2008],{"type":410,"value":2009}," 6",{"type":404,"tag":440,"props":2011,"children":2012},{"style":1395},[2013],{"type":410,"value":724},{"type":404,"tag":440,"props":2015,"children":2016},{"style":1701},[2017],{"type":410,"value":2018},"continue",{"type":404,"tag":440,"props":2020,"children":2021},{"style":1850},[2022],{"type":410,"value":2023}," test",{"type":404,"tag":440,"props":2025,"children":2026},{"style":680},[2027],{"type":410,"value":1812},{"type":404,"tag":440,"props":2029,"children":2030},{"class":442,"line":1427},[2031,2036,2041,2045,2049,2053,2058,2062,2066],{"type":404,"tag":440,"props":2032,"children":2033},{"style":1701},[2034],{"type":410,"value":2035},"    else",{"type":404,"tag":440,"props":2037,"children":2038},{"style":674},[2039],{"type":410,"value":2040}," console",{"type":404,"tag":440,"props":2042,"children":2043},{"style":680},[2044],{"type":410,"value":683},{"type":404,"tag":440,"props":2046,"children":2047},{"style":686},[2048],{"type":410,"value":1392},{"type":404,"tag":440,"props":2050,"children":2051},{"style":1395},[2052],{"type":410,"value":694},{"type":404,"tag":440,"props":2054,"children":2055},{"style":674},[2056],{"type":410,"value":2057},"i",{"type":404,"tag":440,"props":2059,"children":2060},{"style":680},[2061],{"type":410,"value":710},{"type":404,"tag":440,"props":2063,"children":2064},{"style":674},[2065],{"type":410,"value":1953},{"type":404,"tag":440,"props":2067,"children":2068},{"style":1395},[2069],{"type":410,"value":1415},{"type":404,"tag":440,"props":2071,"children":2072},{"class":442,"line":1462},[2073],{"type":404,"tag":440,"props":2074,"children":2075},{"style":680},[2076],{"type":410,"value":2077},"  }\n",{"type":404,"tag":440,"props":2079,"children":2080},{"class":442,"line":1499},[2081],{"type":404,"tag":440,"props":2082,"children":2083},{"style":680},[2084],{"type":410,"value":1424},{"type":404,"tag":440,"props":2086,"children":2087},{"class":442,"line":1507},[2088],{"type":404,"tag":440,"props":2089,"children":2090},{"style":727},[2091],{"type":410,"value":2092},"// SyntaxError !\n",{"type":404,"tag":440,"props":2094,"children":2095},{"class":442,"line":1534},[2096,2100,2104],{"type":404,"tag":440,"props":2097,"children":2098},{"style":1850},[2099],{"type":410,"value":1723},{"type":404,"tag":440,"props":2101,"children":2102},{"style":680},[2103],{"type":410,"value":1857},{"type":404,"tag":440,"props":2105,"children":2106},{"style":680},[2107],{"type":410,"value":1338},{"type":404,"tag":440,"props":2109,"children":2111},{"class":442,"line":2110},10,[2112,2116,2120,2124,2128,2132,2136,2140,2144,2148,2152,2156,2160,2164],{"type":404,"tag":440,"props":2113,"children":2114},{"style":1701},[2115],{"type":410,"value":1925},{"type":404,"tag":440,"props":2117,"children":2118},{"style":1395},[2119],{"type":410,"value":1930},{"type":404,"tag":440,"props":2121,"children":2122},{"style":674},[2123],{"type":410,"value":2057},{"type":404,"tag":440,"props":2125,"children":2126},{"style":470},[2127],{"type":410,"value":1361},{"type":404,"tag":440,"props":2129,"children":2130},{"style":702},[2131],{"type":410,"value":1807},{"type":404,"tag":440,"props":2133,"children":2134},{"style":680},[2135],{"type":410,"value":1780},{"type":404,"tag":440,"props":2137,"children":2138},{"style":674},[2139],{"type":410,"value":1904},{"type":404,"tag":440,"props":2141,"children":2142},{"style":470},[2143],{"type":410,"value":1958},{"type":404,"tag":440,"props":2145,"children":2146},{"style":702},[2147],{"type":410,"value":1895},{"type":404,"tag":440,"props":2149,"children":2150},{"style":680},[2151],{"type":410,"value":1780},{"type":404,"tag":440,"props":2153,"children":2154},{"style":674},[2155],{"type":410,"value":1904},{"type":404,"tag":440,"props":2157,"children":2158},{"style":470},[2159],{"type":410,"value":1909},{"type":404,"tag":440,"props":2161,"children":2162},{"style":1395},[2163],{"type":410,"value":724},{"type":404,"tag":440,"props":2165,"children":2166},{"style":680},[2167],{"type":410,"value":1747},{"type":404,"tag":440,"props":2169,"children":2171},{"class":442,"line":2170},11,[2172,2177,2181,2185,2189,2193,2197,2201,2205,2209,2213,2217,2221,2225],{"type":404,"tag":440,"props":2173,"children":2174},{"style":1701},[2175],{"type":410,"value":2176},"    for",{"type":404,"tag":440,"props":2178,"children":2179},{"style":1395},[2180],{"type":410,"value":1930},{"type":404,"tag":440,"props":2182,"children":2183},{"style":674},[2184],{"type":410,"value":1935},{"type":404,"tag":440,"props":2186,"children":2187},{"style":470},[2188],{"type":410,"value":1361},{"type":404,"tag":440,"props":2190,"children":2191},{"style":702},[2192],{"type":410,"value":1944},{"type":404,"tag":440,"props":2194,"children":2195},{"style":680},[2196],{"type":410,"value":1780},{"type":404,"tag":440,"props":2198,"children":2199},{"style":674},[2200],{"type":410,"value":1953},{"type":404,"tag":440,"props":2202,"children":2203},{"style":470},[2204],{"type":410,"value":1958},{"type":404,"tag":440,"props":2206,"children":2207},{"style":702},[2208],{"type":410,"value":1963},{"type":404,"tag":440,"props":2210,"children":2211},{"style":680},[2212],{"type":410,"value":1780},{"type":404,"tag":440,"props":2214,"children":2215},{"style":674},[2216],{"type":410,"value":1953},{"type":404,"tag":440,"props":2218,"children":2219},{"style":470},[2220],{"type":410,"value":1909},{"type":404,"tag":440,"props":2222,"children":2223},{"style":1395},[2224],{"type":410,"value":724},{"type":404,"tag":440,"props":2226,"children":2227},{"style":680},[2228],{"type":410,"value":1747},{"type":404,"tag":440,"props":2230,"children":2232},{"class":442,"line":2231},12,[2233,2238,2242,2246,2250,2254,2258,2262,2266],{"type":404,"tag":440,"props":2234,"children":2235},{"style":1701},[2236],{"type":410,"value":2237},"      if",{"type":404,"tag":440,"props":2239,"children":2240},{"style":1395},[2241],{"type":410,"value":1930},{"type":404,"tag":440,"props":2243,"children":2244},{"style":674},[2245],{"type":410,"value":1935},{"type":404,"tag":440,"props":2247,"children":2248},{"style":470},[2249],{"type":410,"value":2004},{"type":404,"tag":440,"props":2251,"children":2252},{"style":702},[2253],{"type":410,"value":2009},{"type":404,"tag":440,"props":2255,"children":2256},{"style":1395},[2257],{"type":410,"value":724},{"type":404,"tag":440,"props":2259,"children":2260},{"style":1701},[2261],{"type":410,"value":2018},{"type":404,"tag":440,"props":2263,"children":2264},{"style":1850},[2265],{"type":410,"value":2023},{"type":404,"tag":440,"props":2267,"children":2268},{"style":680},[2269],{"type":410,"value":1812},{"type":404,"tag":440,"props":2271,"children":2273},{"class":442,"line":2272},13,[2274,2279,2283,2287,2291,2295,2299,2303,2307],{"type":404,"tag":440,"props":2275,"children":2276},{"style":1701},[2277],{"type":410,"value":2278},"      else",{"type":404,"tag":440,"props":2280,"children":2281},{"style":674},[2282],{"type":410,"value":2040},{"type":404,"tag":440,"props":2284,"children":2285},{"style":680},[2286],{"type":410,"value":683},{"type":404,"tag":440,"props":2288,"children":2289},{"style":686},[2290],{"type":410,"value":1392},{"type":404,"tag":440,"props":2292,"children":2293},{"style":1395},[2294],{"type":410,"value":694},{"type":404,"tag":440,"props":2296,"children":2297},{"style":674},[2298],{"type":410,"value":2057},{"type":404,"tag":440,"props":2300,"children":2301},{"style":680},[2302],{"type":410,"value":710},{"type":404,"tag":440,"props":2304,"children":2305},{"style":674},[2306],{"type":410,"value":1953},{"type":404,"tag":440,"props":2308,"children":2309},{"style":1395},[2310],{"type":410,"value":1415},{"type":404,"tag":440,"props":2312,"children":2314},{"class":442,"line":2313},14,[2315],{"type":404,"tag":440,"props":2316,"children":2317},{"style":680},[2318],{"type":410,"value":2319},"    }\n",{"type":404,"tag":440,"props":2321,"children":2323},{"class":442,"line":2322},15,[2324],{"type":404,"tag":440,"props":2325,"children":2326},{"style":680},[2327],{"type":410,"value":2077},{"type":404,"tag":440,"props":2329,"children":2331},{"class":442,"line":2330},16,[2332],{"type":404,"tag":440,"props":2333,"children":2334},{"style":680},[2335],{"type":410,"value":1424},{"type":404,"tag":418,"props":2337,"children":2338},{},[2339],{"type":410,"value":2340},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":404,"tag":418,"props":2342,"children":2343},{},[2344],{"type":410,"value":2345},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":404,"tag":412,"props":2347,"children":2349},{"id":2348},"模块",[2350],{"type":410,"value":2348},{"type":404,"tag":418,"props":2352,"children":2353},{},[2354],{"type":410,"value":2355},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":404,"tag":429,"props":2357,"children":2359},{"className":662,"code":2358,"language":664,"meta":398,"style":398},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2360],{"type":404,"tag":436,"props":2361,"children":2362},{"__ignoreMap":398},[2363,2411],{"type":404,"tag":440,"props":2364,"children":2365},{"class":442,"line":443},[2366,2371,2376,2380,2384,2389,2393,2398,2402,2407],{"type":404,"tag":440,"props":2367,"children":2368},{"style":1701},[2369],{"type":410,"value":2370},"import",{"type":404,"tag":440,"props":2372,"children":2373},{"style":674},[2374],{"type":410,"value":2375}," defaultExport",{"type":404,"tag":440,"props":2377,"children":2378},{"style":680},[2379],{"type":410,"value":710},{"type":404,"tag":440,"props":2381,"children":2382},{"style":680},[2383],{"type":410,"value":1709},{"type":404,"tag":440,"props":2385,"children":2386},{"style":674},[2387],{"type":410,"value":2388}," toolA",{"type":404,"tag":440,"props":2390,"children":2391},{"style":680},[2392],{"type":410,"value":1732},{"type":404,"tag":440,"props":2394,"children":2395},{"style":1701},[2396],{"type":410,"value":2397}," from",{"type":404,"tag":440,"props":2399,"children":2400},{"style":453},[2401],{"type":410,"value":456},{"type":404,"tag":440,"props":2403,"children":2404},{"style":459},[2405],{"type":410,"value":2406},"test.mjs",{"type":404,"tag":440,"props":2408,"children":2409},{"style":453},[2410],{"type":410,"value":1374},{"type":404,"tag":440,"props":2412,"children":2413},{"class":442,"line":733},[2414,2418,2422,2426,2431,2436,2441,2446,2450,2454],{"type":404,"tag":440,"props":2415,"children":2416},{"style":1701},[2417],{"type":410,"value":2370},{"type":404,"tag":440,"props":2419,"children":2420},{"style":674},[2421],{"type":410,"value":2375},{"type":404,"tag":440,"props":2423,"children":2424},{"style":680},[2425],{"type":410,"value":710},{"type":404,"tag":440,"props":2427,"children":2428},{"style":753},[2429],{"type":410,"value":2430}," *",{"type":404,"tag":440,"props":2432,"children":2433},{"style":1701},[2434],{"type":410,"value":2435}," as",{"type":404,"tag":440,"props":2437,"children":2438},{"style":674},[2439],{"type":410,"value":2440}," namespace ",{"type":404,"tag":440,"props":2442,"children":2443},{"style":1701},[2444],{"type":410,"value":2445},"from",{"type":404,"tag":440,"props":2447,"children":2448},{"style":453},[2449],{"type":410,"value":456},{"type":404,"tag":440,"props":2451,"children":2452},{"style":459},[2453],{"type":410,"value":2406},{"type":404,"tag":440,"props":2455,"children":2456},{"style":453},[2457],{"type":410,"value":1374},{"type":404,"tag":418,"props":2459,"children":2460},{},[2461],{"type":410,"value":2462},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":404,"tag":418,"props":2464,"children":2465},{},[2466],{"type":410,"value":2467},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":404,"tag":418,"props":2469,"children":2470},{},[2471],{"type":410,"value":2472},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":404,"tag":412,"props":2474,"children":2476},{"id":2475},"严格模式",[2477],{"type":410,"value":2475},{"type":404,"tag":418,"props":2479,"children":2480},{},[2481],{"type":410,"value":2482},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":404,"tag":418,"props":2484,"children":2485},{},[2486],{"type":410,"value":2487},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":404,"tag":418,"props":2489,"children":2490},{},[2491],{"type":410,"value":2492},"总的来说，严格模式一共有七条限制：",{"type":404,"tag":518,"props":2494,"children":2495},{},[2496,2501,2506,2511,2516,2521,2526,2531,2536,2541],{"type":404,"tag":522,"props":2497,"children":2498},{},[2499],{"type":410,"value":2500},"对象字面量中不能有相同的属性声明",{"type":404,"tag":522,"props":2502,"children":2503},{},[2504],{"type":410,"value":2505},"函数实参列表中不能有同名参数",{"type":404,"tag":522,"props":2507,"children":2508},{},[2509],{"type":410,"value":2510},"不能声明、重写或删除 eval、arguments 标识符",{"type":404,"tag":522,"props":2512,"children":2513},{},[2514],{"type":410,"value":2515},"不允许使用八进制数字字面量",{"type":404,"tag":522,"props":2517,"children":2518},{},[2519],{"type":410,"value":2520},"不能删除显式声明的标识符、名字或具名函数",{"type":404,"tag":522,"props":2522,"children":2523},{},[2524],{"type":410,"value":2525},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":404,"tag":522,"props":2527,"children":2528},{},[2529],{"type":410,"value":2530},"禁用 with 语句",{"type":404,"tag":522,"props":2532,"children":2533},{},[2534],{"type":410,"value":2535},"禁用隐式声明",{"type":404,"tag":522,"props":2537,"children":2538},{},[2539],{"type":410,"value":2540},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":404,"tag":522,"props":2542,"children":2543},{},[2544],{"type":410,"value":2545},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":404,"tag":418,"props":2547,"children":2548},{},[2549],{"type":410,"value":2550},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":404,"tag":518,"props":2552,"children":2553},{},[2554,2559],{"type":404,"tag":522,"props":2555,"children":2556},{},[2557],{"type":410,"value":2558},"间接调用 eval 函数",{"type":404,"tag":522,"props":2560,"children":2561},{},[2562],{"type":410,"value":2563},"使用 new Function 构造的新函数",{"type":404,"tag":412,"props":2565,"children":2567},{"id":2566},"运算符的二义性",[2568],{"type":410,"value":2566},{"type":404,"tag":418,"props":2570,"children":2571},{},[2572],{"type":410,"value":2573},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":404,"tag":418,"props":2575,"children":2576},{},[2577],{"type":410,"value":2578},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":404,"tag":418,"props":2580,"children":2581},{},[2582],{"type":410,"value":2583},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":404,"tag":418,"props":2585,"children":2586},{},[2587],{"type":410,"value":2588},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":404,"tag":405,"props":2590,"children":2592},{"id":2591},"面向对象语言特性",[2593],{"type":410,"value":2591},{"type":404,"tag":412,"props":2595,"children":2597},{"id":2596},"语法综述-1",[2598],{"type":410,"value":414},{"type":404,"tag":418,"props":2600,"children":2601},{},[2602],{"type":410,"value":2603},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":404,"tag":418,"props":2605,"children":2606},{},[2607],{"type":410,"value":2608},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":404,"tag":418,"props":2610,"children":2611},{},[2612],{"type":410,"value":2613},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":404,"tag":418,"props":2615,"children":2616},{},[2617],{"type":410,"value":2618},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":404,"tag":429,"props":2620,"children":2622},{"className":662,"code":2621,"language":664,"meta":398,"style":398},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2623],{"type":404,"tag":436,"props":2624,"children":2625},{"__ignoreMap":398},[2626,2647,2674,2703,2711,2728,2741,2748,2756,2764,2788],{"type":404,"tag":440,"props":2627,"children":2628},{"class":442,"line":443},[2629,2634,2639,2643],{"type":404,"tag":440,"props":2630,"children":2631},{"style":997},[2632],{"type":410,"value":2633},"var",{"type":404,"tag":440,"props":2635,"children":2636},{"style":674},[2637],{"type":410,"value":2638}," obj",{"type":404,"tag":440,"props":2640,"children":2641},{"style":470},[2642],{"type":410,"value":1872},{"type":404,"tag":440,"props":2644,"children":2645},{"style":680},[2646],{"type":410,"value":1747},{"type":404,"tag":440,"props":2648,"children":2649},{"class":442,"line":733},[2650,2655,2660,2664,2669],{"type":404,"tag":440,"props":2651,"children":2652},{"style":997},[2653],{"type":410,"value":2654},"  set",{"type":404,"tag":440,"props":2656,"children":2658},{"style":2657},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2659],{"type":410,"value":2023},{"type":404,"tag":440,"props":2661,"children":2662},{"style":680},[2663],{"type":410,"value":694},{"type":404,"tag":440,"props":2665,"children":2666},{"style":1624},[2667],{"type":410,"value":2668},"x",{"type":404,"tag":440,"props":2670,"children":2671},{"style":680},[2672],{"type":410,"value":2673},"){\n",{"type":404,"tag":440,"props":2675,"children":2676},{"class":442,"line":1377},[2677,2682,2686,2690,2695,2699],{"type":404,"tag":440,"props":2678,"children":2679},{"style":674},[2680],{"type":410,"value":2681},"    c",{"type":404,"tag":440,"props":2683,"children":2684},{"style":470},[2685],{"type":410,"value":1872},{"type":404,"tag":440,"props":2687,"children":2688},{"style":453},[2689],{"type":410,"value":467},{"type":404,"tag":440,"props":2691,"children":2692},{"style":459},[2693],{"type":410,"value":2694},"other",{"type":404,"tag":440,"props":2696,"children":2697},{"style":453},[2698],{"type":410,"value":467},{"type":404,"tag":440,"props":2700,"children":2701},{"style":680},[2702],{"type":410,"value":1812},{"type":404,"tag":440,"props":2704,"children":2705},{"class":442,"line":1418},[2706],{"type":404,"tag":440,"props":2707,"children":2708},{"style":680},[2709],{"type":410,"value":2710},"  },\n",{"type":404,"tag":440,"props":2712,"children":2713},{"class":442,"line":1427},[2714,2719,2723],{"type":404,"tag":440,"props":2715,"children":2716},{"style":997},[2717],{"type":410,"value":2718},"  get",{"type":404,"tag":440,"props":2720,"children":2721},{"style":2657},[2722],{"type":410,"value":2023},{"type":404,"tag":440,"props":2724,"children":2725},{"style":680},[2726],{"type":410,"value":2727},"(){\n",{"type":404,"tag":440,"props":2729,"children":2730},{"class":442,"line":1462},[2731,2736],{"type":404,"tag":440,"props":2732,"children":2733},{"style":1701},[2734],{"type":410,"value":2735},"    return",{"type":404,"tag":440,"props":2737,"children":2738},{"style":674},[2739],{"type":410,"value":2740}," c\n",{"type":404,"tag":440,"props":2742,"children":2743},{"class":442,"line":1499},[2744],{"type":404,"tag":440,"props":2745,"children":2746},{"style":680},[2747],{"type":410,"value":2710},{"type":404,"tag":440,"props":2749,"children":2750},{"class":442,"line":1507},[2751],{"type":404,"tag":440,"props":2752,"children":2753},{"style":727},[2754],{"type":410,"value":2755},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":404,"tag":440,"props":2757,"children":2758},{"class":442,"line":1534},[2759],{"type":404,"tag":440,"props":2760,"children":2761},{"style":727},[2762],{"type":410,"value":2763},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":404,"tag":440,"props":2765,"children":2766},{"class":442,"line":2110},[2767,2772,2776,2780,2784],{"type":404,"tag":440,"props":2768,"children":2769},{"style":1395},[2770],{"type":410,"value":2771},"  test",{"type":404,"tag":440,"props":2773,"children":2774},{"style":680},[2775],{"type":410,"value":1857},{"type":404,"tag":440,"props":2777,"children":2778},{"style":453},[2779],{"type":410,"value":456},{"type":404,"tag":440,"props":2781,"children":2782},{"style":459},[2783],{"type":410,"value":1723},{"type":404,"tag":440,"props":2785,"children":2786},{"style":453},[2787],{"type":410,"value":1374},{"type":404,"tag":440,"props":2789,"children":2790},{"class":442,"line":2170},[2791],{"type":404,"tag":440,"props":2792,"children":2793},{"style":680},[2794],{"type":410,"value":1424},{"type":404,"tag":418,"props":2796,"children":2797},{},[2798],{"type":410,"value":2799},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":404,"tag":429,"props":2801,"children":2803},{"className":662,"code":2802,"language":664,"meta":398,"style":398},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2804],{"type":404,"tag":436,"props":2805,"children":2806},{"__ignoreMap":398},[2807,2815,2859],{"type":404,"tag":440,"props":2808,"children":2809},{"class":442,"line":443},[2810],{"type":404,"tag":440,"props":2811,"children":2812},{"style":727},[2813],{"type":410,"value":2814},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":404,"tag":440,"props":2816,"children":2817},{"class":442,"line":733},[2818,2823,2827,2832,2836,2841,2846,2850,2855],{"type":404,"tag":440,"props":2819,"children":2821},{"style":2820},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2822],{"type":410,"value":1434},{"type":404,"tag":440,"props":2824,"children":2825},{"style":680},[2826],{"type":410,"value":683},{"type":404,"tag":440,"props":2828,"children":2829},{"style":1431},[2830],{"type":410,"value":2831},"prototype",{"type":404,"tag":440,"props":2833,"children":2834},{"style":470},[2835],{"type":410,"value":1361},{"type":404,"tag":440,"props":2837,"children":2838},{"style":470},[2839],{"type":410,"value":2840}," new",{"type":404,"tag":440,"props":2842,"children":2843},{"style":686},[2844],{"type":410,"value":2845}," B",{"type":404,"tag":440,"props":2847,"children":2848},{"style":674},[2849],{"type":410,"value":694},{"type":404,"tag":440,"props":2851,"children":2852},{"style":727},[2853],{"type":410,"value":2854},"/* 传入参数 */",{"type":404,"tag":440,"props":2856,"children":2857},{"style":674},[2858],{"type":410,"value":1415},{"type":404,"tag":440,"props":2860,"children":2861},{"class":442,"line":1377},[2862,2866,2870,2874,2878,2883,2887],{"type":404,"tag":440,"props":2863,"children":2864},{"style":2820},[2865],{"type":410,"value":1434},{"type":404,"tag":440,"props":2867,"children":2868},{"style":680},[2869],{"type":410,"value":683},{"type":404,"tag":440,"props":2871,"children":2872},{"style":1431},[2873],{"type":410,"value":2831},{"type":404,"tag":440,"props":2875,"children":2876},{"style":680},[2877],{"type":410,"value":683},{"type":404,"tag":440,"props":2879,"children":2880},{"style":1431},[2881],{"type":410,"value":2882},"constructor",{"type":404,"tag":440,"props":2884,"children":2885},{"style":470},[2886],{"type":410,"value":1361},{"type":404,"tag":440,"props":2888,"children":2889},{"style":1431},[2890],{"type":410,"value":2891}," A\n",{"type":404,"tag":418,"props":2893,"children":2894},{},[2895],{"type":410,"value":2896},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":404,"tag":418,"props":2898,"children":2899},{},[2900],{"type":410,"value":2901},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":404,"tag":418,"props":2903,"children":2904},{},[2905],{"type":410,"value":2906},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":404,"tag":418,"props":2908,"children":2909},{},[2910],{"type":410,"value":2911},"总结一下遍历对象成员的方法：",{"type":404,"tag":1012,"props":2913,"children":2914},{},[2915,2939],{"type":404,"tag":1016,"props":2916,"children":2917},{},[2918],{"type":404,"tag":1020,"props":2919,"children":2920},{},[2921,2926,2931,2935],{"type":404,"tag":1024,"props":2922,"children":2923},{},[2924],{"type":410,"value":2925},"键名",{"type":404,"tag":1024,"props":2927,"children":2928},{},[2929],{"type":410,"value":2930},"显隐式",{"type":404,"tag":1024,"props":2932,"children":2933},{},[2934],{"type":410,"value":407},{"type":404,"tag":1024,"props":2936,"children":2937},{},[2938],{"type":410,"value":1033},{"type":404,"tag":1035,"props":2940,"children":2941},{},[2942,2965,2985,3007],{"type":404,"tag":1020,"props":2943,"children":2944},{},[2945,2950,2955,2960],{"type":404,"tag":1042,"props":2946,"children":2947},{},[2948],{"type":410,"value":2949},"一般键名",{"type":404,"tag":1042,"props":2951,"children":2952},{},[2953],{"type":410,"value":2954},"显式",{"type":404,"tag":1042,"props":2956,"children":2957},{},[2958],{"type":410,"value":2959},"for...in",{"type":404,"tag":1042,"props":2961,"children":2962},{},[2963],{"type":410,"value":2964},"可列举的成员名（包含原型链）",{"type":404,"tag":1020,"props":2966,"children":2967},{},[2968,2972,2976,2981],{"type":404,"tag":1042,"props":2969,"children":2970},{},[2971],{"type":410,"value":2949},{"type":404,"tag":1042,"props":2973,"children":2974},{},[2975],{"type":410,"value":2954},{"type":404,"tag":1042,"props":2977,"children":2978},{},[2979],{"type":410,"value":2980},"Object.prototype.map、Object.prototype.entries、...",{"type":404,"tag":1042,"props":2982,"children":2983},{},[2984],{"type":410,"value":1285},{"type":404,"tag":1020,"props":2986,"children":2987},{},[2988,2992,2997,3002],{"type":404,"tag":1042,"props":2989,"children":2990},{},[2991],{"type":410,"value":2949},{"type":404,"tag":1042,"props":2993,"children":2994},{},[2995],{"type":410,"value":2996},"显式 & 隐式",{"type":404,"tag":1042,"props":2998,"children":2999},{},[3000],{"type":410,"value":3001},"Object.getOwnPropertyNames()",{"type":404,"tag":1042,"props":3003,"children":3004},{},[3005],{"type":410,"value":3006},"所有非符号的自由属性名",{"type":404,"tag":1020,"props":3008,"children":3009},{},[3010,3015,3019,3024],{"type":404,"tag":1042,"props":3011,"children":3012},{},[3013],{"type":410,"value":3014},"符号键名键名",{"type":404,"tag":1042,"props":3016,"children":3017},{},[3018],{"type":410,"value":2996},{"type":404,"tag":1042,"props":3020,"children":3021},{},[3022],{"type":410,"value":3023},"Object.getOwnPropertySymbols()",{"type":404,"tag":1042,"props":3025,"children":3026},{},[3027],{"type":410,"value":3028},"所有符号键名的自有属性名",{"type":404,"tag":418,"props":3030,"children":3031},{},[3032,3034,3039,3041,3045],{"type":410,"value":3033},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":404,"tag":440,"props":3035,"children":3036},{},[3037],{"type":410,"value":3038},"prop",{"type":410,"value":3040}," 更好的替代方案是 typeof(obj",{"type":404,"tag":440,"props":3042,"children":3043},{},[3044],{"type":410,"value":3038},{"type":410,"value":3046},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":404,"tag":418,"props":3048,"children":3049},{},[3050],{"type":410,"value":3051},"delete 运算符有些特殊的地方：",{"type":404,"tag":518,"props":3053,"children":3054},{},[3055,3060],{"type":404,"tag":522,"props":3056,"children":3057},{},[3058],{"type":410,"value":3059},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":404,"tag":522,"props":3061,"children":3062},{},[3063],{"type":410,"value":3064},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":404,"tag":412,"props":3066,"children":3068},{"id":3067},"原型继承",[3069],{"type":410,"value":3067},{"type":404,"tag":418,"props":3071,"children":3072},{},[3073],{"type":410,"value":3074},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":404,"tag":418,"props":3076,"children":3077},{},[3078],{"type":410,"value":3079},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":404,"tag":518,"props":3081,"children":3082},{},[3083,3088],{"type":404,"tag":522,"props":3084,"children":3085},{},[3086],{"type":410,"value":3087},"读对象的属性时优先读取对象的自有属性表",{"type":404,"tag":522,"props":3089,"children":3090},{},[3091],{"type":410,"value":3092},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":404,"tag":418,"props":3094,"children":3095},{},[3096],{"type":410,"value":3097},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":404,"tag":418,"props":3099,"children":3100},{},[3101],{"type":410,"value":3102},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":404,"tag":429,"props":3104,"children":3106},{"className":662,"code":3105,"language":664,"meta":398,"style":398},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3107],{"type":404,"tag":436,"props":3108,"children":3109},{"__ignoreMap":398},[3110,3130,3169,3210],{"type":404,"tag":440,"props":3111,"children":3112},{"class":442,"line":443},[3113,3117,3121,3125],{"type":404,"tag":440,"props":3114,"children":3115},{"style":997},[3116],{"type":410,"value":1323},{"type":404,"tag":440,"props":3118,"children":3119},{"style":686},[3120],{"type":410,"value":2023},{"type":404,"tag":440,"props":3122,"children":3123},{"style":680},[3124],{"type":410,"value":1333},{"type":404,"tag":440,"props":3126,"children":3127},{"style":680},[3128],{"type":410,"value":3129}," {}\n",{"type":404,"tag":440,"props":3131,"children":3132},{"class":442,"line":733},[3133,3137,3142,3146,3150,3155,3159,3164],{"type":404,"tag":440,"props":3134,"children":3135},{"style":997},[3136],{"type":410,"value":2633},{"type":404,"tag":440,"props":3138,"children":3139},{"style":674},[3140],{"type":410,"value":3141}," a ",{"type":404,"tag":440,"props":3143,"children":3144},{"style":470},[3145],{"type":410,"value":1872},{"type":404,"tag":440,"props":3147,"children":3148},{"style":680},[3149],{"type":410,"value":1709},{"type":404,"tag":440,"props":3151,"children":3152},{"style":2657},[3153],{"type":410,"value":3154}," testb",{"type":404,"tag":440,"props":3156,"children":3157},{"style":680},[3158],{"type":410,"value":1333},{"type":404,"tag":440,"props":3160,"children":3161},{"style":680},[3162],{"type":410,"value":3163}," {}",{"type":404,"tag":440,"props":3165,"children":3166},{"style":680},[3167],{"type":410,"value":3168}," }\n",{"type":404,"tag":440,"props":3170,"children":3171},{"class":442,"line":1377},[3172,3176,3180,3185,3189,3193,3197,3201,3205],{"type":404,"tag":440,"props":3173,"children":3174},{"style":674},[3175],{"type":410,"value":501},{"type":404,"tag":440,"props":3177,"children":3178},{"style":680},[3179],{"type":410,"value":683},{"type":404,"tag":440,"props":3181,"children":3182},{"style":674},[3183],{"type":410,"value":3184},"testb",{"type":404,"tag":440,"props":3186,"children":3187},{"style":680},[3188],{"type":410,"value":683},{"type":404,"tag":440,"props":3190,"children":3191},{"style":1431},[3192],{"type":410,"value":2831},{"type":404,"tag":440,"props":3194,"children":3195},{"style":470},[3196],{"type":410,"value":1361},{"type":404,"tag":440,"props":3198,"children":3199},{"style":2820},[3200],{"type":410,"value":2023},{"type":404,"tag":440,"props":3202,"children":3203},{"style":680},[3204],{"type":410,"value":683},{"type":404,"tag":440,"props":3206,"children":3207},{"style":1431},[3208],{"type":410,"value":3209},"prototype\n",{"type":404,"tag":440,"props":3211,"children":3212},{"class":442,"line":1418},[3213,3217,3222,3226,3230,3234],{"type":404,"tag":440,"props":3214,"children":3215},{"style":470},[3216],{"type":410,"value":1513},{"type":404,"tag":440,"props":3218,"children":3219},{"style":674},[3220],{"type":410,"value":3221}," a",{"type":404,"tag":440,"props":3223,"children":3224},{"style":680},[3225],{"type":410,"value":683},{"type":404,"tag":440,"props":3227,"children":3228},{"style":686},[3229],{"type":410,"value":3184},{"type":404,"tag":440,"props":3231,"children":3232},{"style":674},[3233],{"type":410,"value":828},{"type":404,"tag":440,"props":3235,"children":3236},{"style":727},[3237],{"type":410,"value":3238},"// TypeError\n",{"type":404,"tag":418,"props":3240,"children":3241},{},[3242,3244,3252],{"type":410,"value":3243},"在",{"type":404,"tag":501,"props":3245,"children":3249},{"href":3246,"rel":3247},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3248],"nofollow",[3250],{"type":410,"value":3251},"规范",{"type":410,"value":3253},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":404,"tag":418,"props":3255,"children":3256},{},[3257],{"type":410,"value":3258},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":404,"tag":429,"props":3260,"children":3262},{"className":662,"code":3261,"language":664,"meta":398,"style":398},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3263],{"type":404,"tag":436,"props":3264,"children":3265},{"__ignoreMap":398},[3266,3286,3306],{"type":404,"tag":440,"props":3267,"children":3268},{"class":442,"line":443},[3269,3273,3278,3282],{"type":404,"tag":440,"props":3270,"children":3271},{"style":997},[3272],{"type":410,"value":1323},{"type":404,"tag":440,"props":3274,"children":3275},{"style":686},[3276],{"type":410,"value":3277}," Parent",{"type":404,"tag":440,"props":3279,"children":3280},{"style":680},[3281],{"type":410,"value":1333},{"type":404,"tag":440,"props":3283,"children":3284},{"style":680},[3285],{"type":410,"value":3129},{"type":404,"tag":440,"props":3287,"children":3288},{"class":442,"line":733},[3289,3293,3298,3302],{"type":404,"tag":440,"props":3290,"children":3291},{"style":997},[3292],{"type":410,"value":1323},{"type":404,"tag":440,"props":3294,"children":3295},{"style":686},[3296],{"type":410,"value":3297}," Child",{"type":404,"tag":440,"props":3299,"children":3300},{"style":680},[3301],{"type":410,"value":1333},{"type":404,"tag":440,"props":3303,"children":3304},{"style":680},[3305],{"type":410,"value":3129},{"type":404,"tag":440,"props":3307,"children":3308},{"class":442,"line":1377},[3309,3314,3318,3322,3326,3330,3334],{"type":404,"tag":440,"props":3310,"children":3311},{"style":2820},[3312],{"type":410,"value":3313},"Child",{"type":404,"tag":440,"props":3315,"children":3316},{"style":680},[3317],{"type":410,"value":683},{"type":404,"tag":440,"props":3319,"children":3320},{"style":1431},[3321],{"type":410,"value":2831},{"type":404,"tag":440,"props":3323,"children":3324},{"style":470},[3325],{"type":410,"value":1361},{"type":404,"tag":440,"props":3327,"children":3328},{"style":470},[3329],{"type":410,"value":2840},{"type":404,"tag":440,"props":3331,"children":3332},{"style":686},[3333],{"type":410,"value":3277},{"type":404,"tag":440,"props":3335,"children":3336},{"style":674},[3337],{"type":410,"value":3338},"()\n",{"type":404,"tag":418,"props":3340,"children":3341},{},[3342],{"type":410,"value":3343},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":404,"tag":429,"props":3345,"children":3347},{"className":662,"code":3346,"language":664,"meta":398,"style":398},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3348],{"type":404,"tag":436,"props":3349,"children":3350},{"__ignoreMap":398},[3351,3359],{"type":404,"tag":440,"props":3352,"children":3353},{"class":442,"line":443},[3354],{"type":404,"tag":440,"props":3355,"children":3356},{"style":727},[3357],{"type":410,"value":3358},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":404,"tag":440,"props":3360,"children":3361},{"class":442,"line":733},[3362,3366,3370,3374,3378,3382,3386],{"type":404,"tag":440,"props":3363,"children":3364},{"style":2820},[3365],{"type":410,"value":3313},{"type":404,"tag":440,"props":3367,"children":3368},{"style":680},[3369],{"type":410,"value":683},{"type":404,"tag":440,"props":3371,"children":3372},{"style":1431},[3373],{"type":410,"value":2831},{"type":404,"tag":440,"props":3375,"children":3376},{"style":680},[3377],{"type":410,"value":683},{"type":404,"tag":440,"props":3379,"children":3380},{"style":1431},[3381],{"type":410,"value":2882},{"type":404,"tag":440,"props":3383,"children":3384},{"style":470},[3385],{"type":410,"value":1361},{"type":404,"tag":440,"props":3387,"children":3388},{"style":674},[3389],{"type":410,"value":3390}," Child\n",{"type":404,"tag":429,"props":3392,"children":3394},{"className":662,"code":3393,"language":664,"meta":398,"style":398},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3395],{"type":404,"tag":436,"props":3396,"children":3397},{"__ignoreMap":398},[3398,3406,3425,3444,3467,3474],{"type":404,"tag":440,"props":3399,"children":3400},{"class":442,"line":443},[3401],{"type":404,"tag":440,"props":3402,"children":3403},{"style":727},[3404],{"type":410,"value":3405},"// 这种方法叫做圣杯模式\n",{"type":404,"tag":440,"props":3407,"children":3408},{"class":442,"line":733},[3409,3413,3417,3421],{"type":404,"tag":440,"props":3410,"children":3411},{"style":997},[3412],{"type":410,"value":1323},{"type":404,"tag":440,"props":3414,"children":3415},{"style":686},[3416],{"type":410,"value":3277},{"type":404,"tag":440,"props":3418,"children":3419},{"style":680},[3420],{"type":410,"value":1333},{"type":404,"tag":440,"props":3422,"children":3423},{"style":680},[3424],{"type":410,"value":3129},{"type":404,"tag":440,"props":3426,"children":3427},{"class":442,"line":1377},[3428,3432,3436,3440],{"type":404,"tag":440,"props":3429,"children":3430},{"style":997},[3431],{"type":410,"value":1323},{"type":404,"tag":440,"props":3433,"children":3434},{"style":686},[3435],{"type":410,"value":3297},{"type":404,"tag":440,"props":3437,"children":3438},{"style":680},[3439],{"type":410,"value":1333},{"type":404,"tag":440,"props":3441,"children":3442},{"style":680},[3443],{"type":410,"value":1338},{"type":404,"tag":440,"props":3445,"children":3446},{"class":442,"line":1418},[3447,3451,3455,3459,3463],{"type":404,"tag":440,"props":3448,"children":3449},{"style":1344},[3450],{"type":410,"value":1347},{"type":404,"tag":440,"props":3452,"children":3453},{"style":680},[3454],{"type":410,"value":683},{"type":404,"tag":440,"props":3456,"children":3457},{"style":1431},[3458],{"type":410,"value":2882},{"type":404,"tag":440,"props":3460,"children":3461},{"style":470},[3462],{"type":410,"value":1361},{"type":404,"tag":440,"props":3464,"children":3465},{"style":674},[3466],{"type":410,"value":3390},{"type":404,"tag":440,"props":3468,"children":3469},{"class":442,"line":1427},[3470],{"type":404,"tag":440,"props":3471,"children":3472},{"style":680},[3473],{"type":410,"value":1424},{"type":404,"tag":440,"props":3475,"children":3476},{"class":442,"line":1462},[3477,3481,3485,3489,3493,3497,3501],{"type":404,"tag":440,"props":3478,"children":3479},{"style":2820},[3480],{"type":410,"value":3313},{"type":404,"tag":440,"props":3482,"children":3483},{"style":680},[3484],{"type":410,"value":683},{"type":404,"tag":440,"props":3486,"children":3487},{"style":1431},[3488],{"type":410,"value":2831},{"type":404,"tag":440,"props":3490,"children":3491},{"style":470},[3492],{"type":410,"value":1361},{"type":404,"tag":440,"props":3494,"children":3495},{"style":470},[3496],{"type":410,"value":2840},{"type":404,"tag":440,"props":3498,"children":3499},{"style":686},[3500],{"type":410,"value":3277},{"type":404,"tag":440,"props":3502,"children":3503},{"style":674},[3504],{"type":410,"value":3338},{"type":404,"tag":418,"props":3506,"children":3507},{},[3508],{"type":410,"value":3509},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":404,"tag":412,"props":3511,"children":3513},{"id":3512},"类继承",[3514],{"type":410,"value":3512},{"type":404,"tag":418,"props":3516,"children":3517},{},[3518],{"type":410,"value":3519},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":404,"tag":429,"props":3521,"children":3523},{"className":662,"code":3522,"language":664,"meta":398,"style":398},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3524],{"type":404,"tag":436,"props":3525,"children":3526},{"__ignoreMap":398},[3527,3535,3552,3578,3586,3605,3624,3654],{"type":404,"tag":440,"props":3528,"children":3529},{"class":442,"line":443},[3530],{"type":404,"tag":440,"props":3531,"children":3532},{"style":727},[3533],{"type":410,"value":3534},"/* 类声明 */\n",{"type":404,"tag":440,"props":3536,"children":3537},{"class":442,"line":733},[3538,3543,3548],{"type":404,"tag":440,"props":3539,"children":3540},{"style":997},[3541],{"type":410,"value":3542},"class",{"type":404,"tag":440,"props":3544,"children":3546},{"style":3545},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3547],{"type":410,"value":3277},{"type":404,"tag":440,"props":3549,"children":3550},{"style":680},[3551],{"type":410,"value":3129},{"type":404,"tag":440,"props":3553,"children":3554},{"class":442,"line":1377},[3555,3559,3563,3569,3574],{"type":404,"tag":440,"props":3556,"children":3557},{"style":997},[3558],{"type":410,"value":3542},{"type":404,"tag":440,"props":3560,"children":3561},{"style":3545},[3562],{"type":410,"value":3297},{"type":404,"tag":440,"props":3564,"children":3566},{"style":3565},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3567],{"type":410,"value":3568}," extends",{"type":404,"tag":440,"props":3570,"children":3572},{"style":3571},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3573],{"type":410,"value":3277},{"type":404,"tag":440,"props":3575,"children":3576},{"style":680},[3577],{"type":410,"value":3129},{"type":404,"tag":440,"props":3579,"children":3580},{"class":442,"line":1418},[3581],{"type":404,"tag":440,"props":3582,"children":3583},{"style":727},[3584],{"type":410,"value":3585},"/* 仿制代码 */\n",{"type":404,"tag":440,"props":3587,"children":3588},{"class":442,"line":1427},[3589,3593,3597,3601],{"type":404,"tag":440,"props":3590,"children":3591},{"style":997},[3592],{"type":410,"value":1323},{"type":404,"tag":440,"props":3594,"children":3595},{"style":686},[3596],{"type":410,"value":3277},{"type":404,"tag":440,"props":3598,"children":3599},{"style":680},[3600],{"type":410,"value":1046},{"type":404,"tag":440,"props":3602,"children":3603},{"style":680},[3604],{"type":410,"value":3129},{"type":404,"tag":440,"props":3606,"children":3607},{"class":442,"line":1462},[3608,3612,3616,3620],{"type":404,"tag":440,"props":3609,"children":3610},{"style":997},[3611],{"type":410,"value":1323},{"type":404,"tag":440,"props":3613,"children":3614},{"style":686},[3615],{"type":410,"value":3297},{"type":404,"tag":440,"props":3617,"children":3618},{"style":680},[3619],{"type":410,"value":1046},{"type":404,"tag":440,"props":3621,"children":3622},{"style":680},[3623],{"type":410,"value":3129},{"type":404,"tag":440,"props":3625,"children":3626},{"class":442,"line":1499},[3627,3631,3635,3640,3645,3649],{"type":404,"tag":440,"props":3628,"children":3629},{"style":674},[3630],{"type":410,"value":677},{"type":404,"tag":440,"props":3632,"children":3633},{"style":680},[3634],{"type":410,"value":683},{"type":404,"tag":440,"props":3636,"children":3637},{"style":686},[3638],{"type":410,"value":3639},"setPrototypeOf",{"type":404,"tag":440,"props":3641,"children":3642},{"style":674},[3643],{"type":410,"value":3644},"(Child",{"type":404,"tag":440,"props":3646,"children":3647},{"style":680},[3648],{"type":410,"value":710},{"type":404,"tag":440,"props":3650,"children":3651},{"style":674},[3652],{"type":410,"value":3653}," Parent)\n",{"type":404,"tag":440,"props":3655,"children":3656},{"class":442,"line":1507},[3657,3661,3665,3669,3673,3677,3681,3685,3689,3693,3697,3701],{"type":404,"tag":440,"props":3658,"children":3659},{"style":674},[3660],{"type":410,"value":677},{"type":404,"tag":440,"props":3662,"children":3663},{"style":680},[3664],{"type":410,"value":683},{"type":404,"tag":440,"props":3666,"children":3667},{"style":686},[3668],{"type":410,"value":3639},{"type":404,"tag":440,"props":3670,"children":3671},{"style":674},[3672],{"type":410,"value":694},{"type":404,"tag":440,"props":3674,"children":3675},{"style":2820},[3676],{"type":410,"value":3313},{"type":404,"tag":440,"props":3678,"children":3679},{"style":680},[3680],{"type":410,"value":683},{"type":404,"tag":440,"props":3682,"children":3683},{"style":1431},[3684],{"type":410,"value":2831},{"type":404,"tag":440,"props":3686,"children":3687},{"style":680},[3688],{"type":410,"value":710},{"type":404,"tag":440,"props":3690,"children":3691},{"style":2820},[3692],{"type":410,"value":3277},{"type":404,"tag":440,"props":3694,"children":3695},{"style":680},[3696],{"type":410,"value":683},{"type":404,"tag":440,"props":3698,"children":3699},{"style":1431},[3700],{"type":410,"value":2831},{"type":404,"tag":440,"props":3702,"children":3703},{"style":674},[3704],{"type":410,"value":1415},{"type":404,"tag":418,"props":3706,"children":3707},{},[3708],{"type":410,"value":3709},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":404,"tag":418,"props":3711,"children":3712},{},[3713],{"type":410,"value":3714},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":404,"tag":418,"props":3716,"children":3717},{},[3718],{"type":410,"value":3719},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":404,"tag":429,"props":3721,"children":3723},{"className":662,"code":3722,"language":664,"meta":398,"style":398},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3724],{"type":404,"tag":436,"props":3725,"children":3726},{"__ignoreMap":398},[3727,3768,3799,3835,3864,3876],{"type":404,"tag":440,"props":3728,"children":3729},{"class":442,"line":443},[3730,3735,3739,3743,3747,3752,3756,3760,3764],{"type":404,"tag":440,"props":3731,"children":3732},{"style":2820},[3733],{"type":410,"value":3734},"object",{"type":404,"tag":440,"props":3736,"children":3737},{"style":680},[3738],{"type":410,"value":683},{"type":404,"tag":440,"props":3740,"children":3741},{"style":1431},[3742],{"type":410,"value":2831},{"type":404,"tag":440,"props":3744,"children":3745},{"style":680},[3746],{"type":410,"value":683},{"type":404,"tag":440,"props":3748,"children":3749},{"style":686},[3750],{"type":410,"value":3751},"method",{"type":404,"tag":440,"props":3753,"children":3754},{"style":470},[3755],{"type":410,"value":1361},{"type":404,"tag":440,"props":3757,"children":3758},{"style":997},[3759],{"type":410,"value":1451},{"type":404,"tag":440,"props":3761,"children":3762},{"style":680},[3763],{"type":410,"value":1333},{"type":404,"tag":440,"props":3765,"children":3766},{"style":680},[3767],{"type":410,"value":1338},{"type":404,"tag":440,"props":3769,"children":3770},{"class":442,"line":733},[3771,3776,3781,3785,3790,3794],{"type":404,"tag":440,"props":3772,"children":3773},{"style":997},[3774],{"type":410,"value":3775},"  const",{"type":404,"tag":440,"props":3777,"children":3778},{"style":1431},[3779],{"type":410,"value":3780}," thisClass",{"type":404,"tag":440,"props":3782,"children":3783},{"style":470},[3784],{"type":410,"value":1361},{"type":404,"tag":440,"props":3786,"children":3787},{"style":1344},[3788],{"type":410,"value":3789}," this",{"type":404,"tag":440,"props":3791,"children":3792},{"style":680},[3793],{"type":410,"value":683},{"type":404,"tag":440,"props":3795,"children":3796},{"style":1431},[3797],{"type":410,"value":3798},"constructor\n",{"type":404,"tag":440,"props":3800,"children":3801},{"class":442,"line":1377},[3802,3806,3811,3815,3819,3823,3827,3831],{"type":404,"tag":440,"props":3803,"children":3804},{"style":997},[3805],{"type":410,"value":3775},{"type":404,"tag":440,"props":3807,"children":3808},{"style":1431},[3809],{"type":410,"value":3810}," parentClass",{"type":404,"tag":440,"props":3812,"children":3813},{"style":470},[3814],{"type":410,"value":1361},{"type":404,"tag":440,"props":3816,"children":3817},{"style":2820},[3818],{"type":410,"value":3780},{"type":404,"tag":440,"props":3820,"children":3821},{"style":680},[3822],{"type":410,"value":683},{"type":404,"tag":440,"props":3824,"children":3825},{"style":1431},[3826],{"type":410,"value":2831},{"type":404,"tag":440,"props":3828,"children":3829},{"style":680},[3830],{"type":410,"value":683},{"type":404,"tag":440,"props":3832,"children":3833},{"style":1431},[3834],{"type":410,"value":3798},{"type":404,"tag":440,"props":3836,"children":3837},{"class":442,"line":1418},[3838,3842,3847,3851,3855,3859],{"type":404,"tag":440,"props":3839,"children":3840},{"style":997},[3841],{"type":410,"value":3775},{"type":404,"tag":440,"props":3843,"children":3844},{"style":1431},[3845],{"type":410,"value":3846}," parentMethod",{"type":404,"tag":440,"props":3848,"children":3849},{"style":470},[3850],{"type":410,"value":1361},{"type":404,"tag":440,"props":3852,"children":3853},{"style":674},[3854],{"type":410,"value":3810},{"type":404,"tag":440,"props":3856,"children":3857},{"style":680},[3858],{"type":410,"value":683},{"type":404,"tag":440,"props":3860,"children":3861},{"style":674},[3862],{"type":410,"value":3863},"method\n",{"type":404,"tag":440,"props":3865,"children":3866},{"class":442,"line":1427},[3867,3872],{"type":404,"tag":440,"props":3868,"children":3869},{"style":686},[3870],{"type":410,"value":3871},"  parentMethod",{"type":404,"tag":440,"props":3873,"children":3874},{"style":1395},[3875],{"type":410,"value":3338},{"type":404,"tag":440,"props":3877,"children":3878},{"class":442,"line":1462},[3879],{"type":404,"tag":440,"props":3880,"children":3881},{"style":680},[3882],{"type":410,"value":1424},{"type":404,"tag":418,"props":3884,"children":3885},{},[3886],{"type":410,"value":3887},"super 的指向由几个规则所限制：",{"type":404,"tag":518,"props":3889,"children":3890},{},[3891,3896,3901,3906,3911],{"type":404,"tag":522,"props":3892,"children":3893},{},[3894],{"type":410,"value":3895},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":404,"tag":522,"props":3897,"children":3898},{},[3899],{"type":410,"value":3900},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":404,"tag":522,"props":3902,"children":3903},{},[3904],{"type":410,"value":3905},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":404,"tag":522,"props":3907,"children":3908},{},[3909],{"type":410,"value":3910},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":404,"tag":522,"props":3912,"children":3913},{},[3914],{"type":410,"value":3915},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":404,"tag":418,"props":3917,"children":3918},{},[3919],{"type":410,"value":3920},"总结可以得出规律：",{"type":404,"tag":518,"props":3922,"children":3923},{},[3924,3929],{"type":404,"tag":522,"props":3925,"children":3926},{},[3927],{"type":410,"value":3928},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":404,"tag":522,"props":3930,"children":3931},{},[3932],{"type":410,"value":3933},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":404,"tag":418,"props":3935,"children":3936},{},[3937],{"type":410,"value":3938},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":404,"tag":429,"props":3940,"children":3942},{"className":662,"code":3941,"language":664,"meta":398,"style":398},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3943],{"type":404,"tag":436,"props":3944,"children":3945},{"__ignoreMap":398},[3946,3987,4057,4086,4094,4133,4167],{"type":404,"tag":440,"props":3947,"children":3948},{"class":442,"line":443},[3949,3954,3958,3962,3967,3971,3975,3979,3983],{"type":404,"tag":440,"props":3950,"children":3951},{"style":674},[3952],{"type":410,"value":3953},"proto ",{"type":404,"tag":440,"props":3955,"children":3956},{"style":470},[3957],{"type":410,"value":1872},{"type":404,"tag":440,"props":3959,"children":3960},{"style":680},[3961],{"type":410,"value":1709},{"type":404,"tag":440,"props":3963,"children":3964},{"style":1395},[3965],{"type":410,"value":3966},"data",{"type":404,"tag":440,"props":3968,"children":3969},{"style":680},[3970],{"type":410,"value":1857},{"type":404,"tag":440,"props":3972,"children":3973},{"style":453},[3974],{"type":410,"value":456},{"type":404,"tag":440,"props":3976,"children":3977},{"style":459},[3978],{"type":410,"value":1723},{"type":404,"tag":440,"props":3980,"children":3981},{"style":453},[3982],{"type":410,"value":467},{"type":404,"tag":440,"props":3984,"children":3985},{"style":680},[3986],{"type":410,"value":1424},{"type":404,"tag":440,"props":3988,"children":3989},{"class":442,"line":733},[3990,3995,3999,4003,4007,4011,4015,4019,4023,4027,4031,4037,4041,4045,4049,4053],{"type":404,"tag":440,"props":3991,"children":3992},{"style":674},[3993],{"type":410,"value":3994},"obj ",{"type":404,"tag":440,"props":3996,"children":3997},{"style":470},[3998],{"type":410,"value":1872},{"type":404,"tag":440,"props":4000,"children":4001},{"style":680},[4002],{"type":410,"value":1709},{"type":404,"tag":440,"props":4004,"children":4005},{"style":2657},[4006],{"type":410,"value":2023},{"type":404,"tag":440,"props":4008,"children":4009},{"style":680},[4010],{"type":410,"value":1046},{"type":404,"tag":440,"props":4012,"children":4013},{"style":680},[4014],{"type":410,"value":1709},{"type":404,"tag":440,"props":4016,"children":4017},{"style":674},[4018],{"type":410,"value":2040},{"type":404,"tag":440,"props":4020,"children":4021},{"style":680},[4022],{"type":410,"value":683},{"type":404,"tag":440,"props":4024,"children":4025},{"style":686},[4026],{"type":410,"value":1392},{"type":404,"tag":440,"props":4028,"children":4029},{"style":1395},[4030],{"type":410,"value":694},{"type":404,"tag":440,"props":4032,"children":4034},{"style":4033},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4035],{"type":410,"value":4036},"super",{"type":404,"tag":440,"props":4038,"children":4039},{"style":680},[4040],{"type":410,"value":683},{"type":404,"tag":440,"props":4042,"children":4043},{"style":674},[4044],{"type":410,"value":3966},{"type":404,"tag":440,"props":4046,"children":4047},{"style":1395},[4048],{"type":410,"value":724},{"type":404,"tag":440,"props":4050,"children":4051},{"style":680},[4052],{"type":410,"value":1671},{"type":404,"tag":440,"props":4054,"children":4055},{"style":680},[4056],{"type":410,"value":3168},{"type":404,"tag":440,"props":4058,"children":4059},{"class":442,"line":1377},[4060,4064,4068,4072,4077,4081],{"type":404,"tag":440,"props":4061,"children":4062},{"style":674},[4063],{"type":410,"value":677},{"type":404,"tag":440,"props":4065,"children":4066},{"style":680},[4067],{"type":410,"value":683},{"type":404,"tag":440,"props":4069,"children":4070},{"style":686},[4071],{"type":410,"value":3639},{"type":404,"tag":440,"props":4073,"children":4074},{"style":674},[4075],{"type":410,"value":4076},"(obj",{"type":404,"tag":440,"props":4078,"children":4079},{"style":680},[4080],{"type":410,"value":710},{"type":404,"tag":440,"props":4082,"children":4083},{"style":674},[4084],{"type":410,"value":4085}," proto)\n",{"type":404,"tag":440,"props":4087,"children":4088},{"class":442,"line":1418},[4089],{"type":404,"tag":440,"props":4090,"children":4091},{"emptyLinePlaceholder":397},[4092],{"type":410,"value":4093},"\n",{"type":404,"tag":440,"props":4095,"children":4096},{"class":442,"line":1427},[4097,4102,4106,4111,4115,4120,4124,4129],{"type":404,"tag":440,"props":4098,"children":4099},{"style":674},[4100],{"type":410,"value":4101},"obj2 ",{"type":404,"tag":440,"props":4103,"children":4104},{"style":470},[4105],{"type":410,"value":1872},{"type":404,"tag":440,"props":4107,"children":4108},{"style":674},[4109],{"type":410,"value":4110}," Object",{"type":404,"tag":440,"props":4112,"children":4113},{"style":680},[4114],{"type":410,"value":683},{"type":404,"tag":440,"props":4116,"children":4117},{"style":686},[4118],{"type":410,"value":4119},"create",{"type":404,"tag":440,"props":4121,"children":4122},{"style":674},[4123],{"type":410,"value":694},{"type":404,"tag":440,"props":4125,"children":4126},{"style":753},[4127],{"type":410,"value":4128},"null",{"type":404,"tag":440,"props":4130,"children":4131},{"style":674},[4132],{"type":410,"value":1415},{"type":404,"tag":440,"props":4134,"children":4135},{"class":442,"line":1462},[4136,4141,4145,4150,4154,4158,4162],{"type":404,"tag":440,"props":4137,"children":4138},{"style":674},[4139],{"type":410,"value":4140},"obj2",{"type":404,"tag":440,"props":4142,"children":4143},{"style":680},[4144],{"type":410,"value":683},{"type":404,"tag":440,"props":4146,"children":4147},{"style":674},[4148],{"type":410,"value":4149},"test ",{"type":404,"tag":440,"props":4151,"children":4152},{"style":470},[4153],{"type":410,"value":1872},{"type":404,"tag":440,"props":4155,"children":4156},{"style":674},[4157],{"type":410,"value":2638},{"type":404,"tag":440,"props":4159,"children":4160},{"style":680},[4161],{"type":410,"value":683},{"type":404,"tag":440,"props":4163,"children":4164},{"style":674},[4165],{"type":410,"value":4166},"test\n",{"type":404,"tag":440,"props":4168,"children":4169},{"class":442,"line":1499},[4170,4174,4178,4182,4186],{"type":404,"tag":440,"props":4171,"children":4172},{"style":674},[4173],{"type":410,"value":4140},{"type":404,"tag":440,"props":4175,"children":4176},{"style":680},[4177],{"type":410,"value":683},{"type":404,"tag":440,"props":4179,"children":4180},{"style":686},[4181],{"type":410,"value":1723},{"type":404,"tag":440,"props":4183,"children":4184},{"style":674},[4185],{"type":410,"value":828},{"type":404,"tag":440,"props":4187,"children":4188},{"style":727},[4189],{"type":410,"value":4190},"// 'test'\n",{"type":404,"tag":418,"props":4192,"children":4193},{},[4194],{"type":410,"value":4195},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":404,"tag":418,"props":4197,"children":4198},{},[4199],{"type":410,"value":4200},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":404,"tag":418,"props":4202,"children":4203},{},[4204],{"type":410,"value":4205},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":404,"tag":429,"props":4207,"children":4209},{"className":662,"code":4208,"language":664,"meta":398,"style":398},"class StaticClass extends null {\n  static pow () {}\n}\n",[4210],{"type":404,"tag":436,"props":4211,"children":4212},{"__ignoreMap":398},[4213,4238,4259],{"type":404,"tag":440,"props":4214,"children":4215},{"class":442,"line":443},[4216,4220,4225,4229,4234],{"type":404,"tag":440,"props":4217,"children":4218},{"style":997},[4219],{"type":410,"value":3542},{"type":404,"tag":440,"props":4221,"children":4222},{"style":3545},[4223],{"type":410,"value":4224}," StaticClass",{"type":404,"tag":440,"props":4226,"children":4227},{"style":3565},[4228],{"type":410,"value":3568},{"type":404,"tag":440,"props":4230,"children":4231},{"style":753},[4232],{"type":410,"value":4233}," null",{"type":404,"tag":440,"props":4235,"children":4236},{"style":680},[4237],{"type":410,"value":1338},{"type":404,"tag":440,"props":4239,"children":4240},{"class":442,"line":733},[4241,4246,4251,4255],{"type":404,"tag":440,"props":4242,"children":4243},{"style":3565},[4244],{"type":410,"value":4245},"  static",{"type":404,"tag":440,"props":4247,"children":4248},{"style":2657},[4249],{"type":410,"value":4250}," pow",{"type":404,"tag":440,"props":4252,"children":4253},{"style":680},[4254],{"type":410,"value":1333},{"type":404,"tag":440,"props":4256,"children":4257},{"style":680},[4258],{"type":410,"value":3129},{"type":404,"tag":440,"props":4260,"children":4261},{"class":442,"line":1377},[4262],{"type":404,"tag":440,"props":4263,"children":4264},{"style":680},[4265],{"type":410,"value":1424},{"type":404,"tag":418,"props":4267,"children":4268},{},[4269],{"type":410,"value":4270},"P196，这个 new.target.prototype 没看懂。",{"type":404,"tag":412,"props":4272,"children":4274},{"id":4273},"对象系统",[4275],{"type":410,"value":4273},{"type":404,"tag":418,"props":4277,"children":4278},{},[4279],{"type":410,"value":4280},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":404,"tag":418,"props":4282,"children":4283},{},[4284],{"type":410,"value":4285},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":404,"tag":418,"props":4287,"children":4288},{},[4289],{"type":410,"value":4290},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":404,"tag":429,"props":4292,"children":4294},{"className":662,"code":4293,"language":664,"meta":398,"style":398},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4295],{"type":404,"tag":436,"props":4296,"children":4297},{"__ignoreMap":398},[4298,4313,4336,4357],{"type":404,"tag":440,"props":4299,"children":4300},{"class":442,"line":443},[4301,4305,4309],{"type":404,"tag":440,"props":4302,"children":4303},{"style":997},[4304],{"type":410,"value":3542},{"type":404,"tag":440,"props":4306,"children":4307},{"style":3545},[4308],{"type":410,"value":1328},{"type":404,"tag":440,"props":4310,"children":4311},{"style":680},[4312],{"type":410,"value":3129},{"type":404,"tag":440,"props":4314,"children":4315},{"class":442,"line":733},[4316,4320,4324,4328,4332],{"type":404,"tag":440,"props":4317,"children":4318},{"style":997},[4319],{"type":410,"value":3542},{"type":404,"tag":440,"props":4321,"children":4322},{"style":3545},[4323],{"type":410,"value":2845},{"type":404,"tag":440,"props":4325,"children":4326},{"style":3565},[4327],{"type":410,"value":3568},{"type":404,"tag":440,"props":4329,"children":4330},{"style":3571},[4331],{"type":410,"value":1328},{"type":404,"tag":440,"props":4333,"children":4334},{"style":680},[4335],{"type":410,"value":3129},{"type":404,"tag":440,"props":4337,"children":4338},{"class":442,"line":1377},[4339,4344,4349,4353],{"type":404,"tag":440,"props":4340,"children":4341},{"style":1431},[4342],{"type":410,"value":4343},"B",{"type":404,"tag":440,"props":4345,"children":4346},{"style":470},[4347],{"type":410,"value":4348}," instanceof",{"type":404,"tag":440,"props":4350,"children":4351},{"style":3545},[4352],{"type":410,"value":1328},{"type":404,"tag":440,"props":4354,"children":4355},{"style":727},[4356],{"type":410,"value":844},{"type":404,"tag":440,"props":4358,"children":4359},{"class":442,"line":1418},[4360,4364,4368,4373,4377,4381,4385],{"type":404,"tag":440,"props":4361,"children":4362},{"style":1431},[4363],{"type":410,"value":1434},{"type":404,"tag":440,"props":4365,"children":4366},{"style":680},[4367],{"type":410,"value":683},{"type":404,"tag":440,"props":4369,"children":4370},{"style":686},[4371],{"type":410,"value":4372},"isPrototypeOf",{"type":404,"tag":440,"props":4374,"children":4375},{"style":674},[4376],{"type":410,"value":694},{"type":404,"tag":440,"props":4378,"children":4379},{"style":1431},[4380],{"type":410,"value":4343},{"type":404,"tag":440,"props":4382,"children":4383},{"style":674},[4384],{"type":410,"value":724},{"type":404,"tag":440,"props":4386,"children":4387},{"style":727},[4388],{"type":410,"value":774},{"type":404,"tag":418,"props":4390,"children":4391},{},[4392],{"type":410,"value":4393},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":404,"tag":418,"props":4395,"children":4396},{},[4397],{"type":410,"value":4398},"this 实在函数执行时动态传入的，规则有三：",{"type":404,"tag":518,"props":4400,"children":4401},{},[4402,4407,4412],{"type":404,"tag":522,"props":4403,"children":4404},{},[4405],{"type":410,"value":4406},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":404,"tag":522,"props":4408,"children":4409},{},[4410],{"type":410,"value":4411},"根据存取运算符将左操作符作为 this 传入",{"type":404,"tag":522,"props":4413,"children":4414},{},[4415],{"type":410,"value":4416},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":404,"tag":418,"props":4418,"children":4419},{},[4420],{"type":410,"value":4421},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":404,"tag":518,"props":4423,"children":4424},{},[4425,4430],{"type":404,"tag":522,"props":4426,"children":4427},{},[4428],{"type":410,"value":4429},"如果运行在严格模式中，不改变 this 的值，否则",{"type":404,"tag":522,"props":4431,"children":4432},{},[4433],{"type":410,"value":4434},"使用全局对象作为 this 值",{"type":404,"tag":418,"props":4436,"children":4437},{},[4438],{"type":410,"value":4439},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":404,"tag":418,"props":4441,"children":4442},{},[4443],{"type":410,"value":4444},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":404,"tag":518,"props":4446,"children":4447},{},[4448,4453],{"type":404,"tag":522,"props":4449,"children":4450},{},[4451],{"type":410,"value":4452},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":404,"tag":522,"props":4454,"children":4455},{},[4456],{"type":410,"value":4457},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":404,"tag":418,"props":4459,"children":4460},{},[4461],{"type":410,"value":4462},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":404,"tag":418,"props":4464,"children":4465},{},[4466],{"type":410,"value":4467},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":404,"tag":429,"props":4469,"children":4471},{"className":662,"code":4470,"language":664,"meta":398,"style":398},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4472],{"type":404,"tag":436,"props":4473,"children":4474},{"__ignoreMap":398},[4475,4483,4504,4511,4519],{"type":404,"tag":440,"props":4476,"children":4477},{"class":442,"line":443},[4478],{"type":404,"tag":440,"props":4479,"children":4480},{"style":727},[4481],{"type":410,"value":4482},"// 获得所有原生对象、宿主对象等\n",{"type":404,"tag":440,"props":4484,"children":4485},{"class":442,"line":733},[4486,4490,4494,4499],{"type":404,"tag":440,"props":4487,"children":4488},{"style":674},[4489],{"type":410,"value":677},{"type":404,"tag":440,"props":4491,"children":4492},{"style":680},[4493],{"type":410,"value":683},{"type":404,"tag":440,"props":4495,"children":4496},{"style":686},[4497],{"type":410,"value":4498},"getOwnPropertyNames",{"type":404,"tag":440,"props":4500,"children":4501},{"style":674},[4502],{"type":410,"value":4503},"(global)\n",{"type":404,"tag":440,"props":4505,"children":4506},{"class":442,"line":1377},[4507],{"type":404,"tag":440,"props":4508,"children":4509},{"emptyLinePlaceholder":397},[4510],{"type":410,"value":4093},{"type":404,"tag":440,"props":4512,"children":4513},{"class":442,"line":1418},[4514],{"type":404,"tag":440,"props":4515,"children":4516},{"style":727},[4517],{"type":410,"value":4518},"// 验证 undefined 是否存在 global 对象中\n",{"type":404,"tag":440,"props":4520,"children":4521},{"class":442,"line":1427},[4522,4526,4530,4535,4540,4544,4548,4553,4557,4561],{"type":404,"tag":440,"props":4523,"children":4524},{"style":674},[4525],{"type":410,"value":677},{"type":404,"tag":440,"props":4527,"children":4528},{"style":680},[4529],{"type":410,"value":683},{"type":404,"tag":440,"props":4531,"children":4532},{"style":686},[4533],{"type":410,"value":4534},"getOwnPropertyDescriptor",{"type":404,"tag":440,"props":4536,"children":4537},{"style":674},[4538],{"type":410,"value":4539},"(global",{"type":404,"tag":440,"props":4541,"children":4542},{"style":680},[4543],{"type":410,"value":710},{"type":404,"tag":440,"props":4545,"children":4546},{"style":453},[4547],{"type":410,"value":456},{"type":404,"tag":440,"props":4549,"children":4550},{"style":459},[4551],{"type":410,"value":4552},"undefined",{"type":404,"tag":440,"props":4554,"children":4555},{"style":453},[4556],{"type":410,"value":467},{"type":404,"tag":440,"props":4558,"children":4559},{"style":674},[4560],{"type":410,"value":724},{"type":404,"tag":440,"props":4562,"children":4563},{"style":727},[4564],{"type":410,"value":4565},"// {value: undefined /* ... */ }\n",{"type":404,"tag":418,"props":4567,"children":4568},{},[4569],{"type":410,"value":4570},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":404,"tag":418,"props":4572,"children":4573},{},[4574],{"type":410,"value":4575},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":404,"tag":418,"props":4577,"children":4578},{},[4579],{"type":410,"value":4580},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":404,"tag":1012,"props":4582,"children":4583},{},[4584,4605],{"type":404,"tag":1016,"props":4585,"children":4586},{},[4587],{"type":404,"tag":1020,"props":4588,"children":4589},{},[4590,4595,4600],{"type":404,"tag":1024,"props":4591,"children":4592},{},[4593],{"type":410,"value":4594},"对象",{"type":404,"tag":1024,"props":4596,"children":4597},{},[4598],{"type":410,"value":4599},"特殊效果",{"type":404,"tag":1024,"props":4601,"children":4602},{},[4603],{"type":410,"value":4604},"注",{"type":404,"tag":1035,"props":4606,"children":4607},{},[4608,4626,4643,4659,4675,4691,4709,4725,4741,4757],{"type":404,"tag":1020,"props":4609,"children":4610},{},[4611,4616,4621],{"type":404,"tag":1042,"props":4612,"children":4613},{},[4614],{"type":410,"value":4615},"Number、String、Boolean、Symbol",{"type":404,"tag":1042,"props":4617,"children":4618},{},[4619],{"type":410,"value":4620},"包装类",{"type":404,"tag":1042,"props":4622,"children":4623},{},[4624],{"type":410,"value":4625},"({}).toString()",{"type":404,"tag":1020,"props":4627,"children":4628},{},[4629,4633,4638],{"type":404,"tag":1042,"props":4630,"children":4631},{},[4632],{"type":410,"value":677},{"type":404,"tag":1042,"props":4634,"children":4635},{},[4636],{"type":410,"value":4637},"调用包装类",{"type":404,"tag":1042,"props":4639,"children":4640},{},[4641],{"type":410,"value":4642},"new Object(5) + new Object(3)",{"type":404,"tag":1020,"props":4644,"children":4645},{},[4646,4651,4656],{"type":404,"tag":1042,"props":4647,"children":4648},{},[4649],{"type":410,"value":4650},"Array",{"type":404,"tag":1042,"props":4652,"children":4653},{},[4654],{"type":410,"value":4655},"自动维护 length 属性",{"type":404,"tag":1042,"props":4657,"children":4658},{},[],{"type":404,"tag":1020,"props":4660,"children":4661},{},[4662,4667,4672],{"type":404,"tag":1042,"props":4663,"children":4664},{},[4665],{"type":410,"value":4666},"Date",{"type":404,"tag":1042,"props":4668,"children":4669},{},[4670],{"type":410,"value":4671},"日期对象相关的运算",{"type":404,"tag":1042,"props":4673,"children":4674},{},[],{"type":404,"tag":1020,"props":4676,"children":4677},{},[4678,4683,4688],{"type":404,"tag":1042,"props":4679,"children":4680},{},[4681],{"type":410,"value":4682},"Function",{"type":404,"tag":1042,"props":4684,"children":4685},{},[4686],{"type":410,"value":4687},"创建可执行的函数",{"type":404,"tag":1042,"props":4689,"children":4690},{},[],{"type":404,"tag":1020,"props":4692,"children":4693},{},[4694,4699,4704],{"type":404,"tag":1042,"props":4695,"children":4696},{},[4697],{"type":410,"value":4698},"RegExp",{"type":404,"tag":1042,"props":4700,"children":4701},{},[4702],{"type":410,"value":4703},"可执行",{"type":404,"tag":1042,"props":4705,"children":4706},{},[4707],{"type":410,"value":4708},"仅在某些宿主中",{"type":404,"tag":1020,"props":4710,"children":4711},{},[4712,4717,4722],{"type":404,"tag":1042,"props":4713,"children":4714},{},[4715],{"type":410,"value":4716},"Proxy",{"type":404,"tag":1042,"props":4718,"children":4719},{},[4720],{"type":410,"value":4721},"代理目标对象、回收代理",{"type":404,"tag":1042,"props":4723,"children":4724},{},[],{"type":404,"tag":1020,"props":4726,"children":4727},{},[4728,4733,4738],{"type":404,"tag":1042,"props":4729,"children":4730},{},[4731],{"type":410,"value":4732},"TypedArray、DataView",{"type":404,"tag":1042,"props":4734,"children":4735},{},[4736],{"type":410,"value":4737},"创建及绑定 buffer",{"type":404,"tag":1042,"props":4739,"children":4740},{},[],{"type":404,"tag":1020,"props":4742,"children":4743},{},[4744,4749,4754],{"type":404,"tag":1042,"props":4745,"children":4746},{},[4747],{"type":410,"value":4748},"ArrayBuffer、SharedArray、Buffer",{"type":404,"tag":1042,"props":4750,"children":4751},{},[4752],{"type":410,"value":4753},"初始化 buffer 并维护 byteLength 属性",{"type":404,"tag":1042,"props":4755,"children":4756},{},[],{"type":404,"tag":1020,"props":4758,"children":4759},{},[4760,4765,4770],{"type":404,"tag":1042,"props":4761,"children":4762},{},[4763],{"type":410,"value":4764},"WeakMap、WeakSet",{"type":404,"tag":1042,"props":4766,"children":4767},{},[4768],{"type":410,"value":4769},"不修改引用并自动回收对象",{"type":404,"tag":1042,"props":4771,"children":4772},{},[],{"type":404,"tag":418,"props":4774,"children":4775},{},[4776],{"type":410,"value":4777},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":404,"tag":429,"props":4779,"children":4781},{"className":662,"code":4780,"language":664,"meta":398,"style":398},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4782],{"type":404,"tag":436,"props":4783,"children":4784},{"__ignoreMap":398},[4785,4818,4855,4931,4944,4951,5003,5010],{"type":404,"tag":440,"props":4786,"children":4787},{"class":442,"line":443},[4788,4792,4797,4801,4805,4810,4814],{"type":404,"tag":440,"props":4789,"children":4790},{"style":997},[4791],{"type":410,"value":1323},{"type":404,"tag":440,"props":4793,"children":4794},{"style":686},[4795],{"type":410,"value":4796}," MyDate",{"type":404,"tag":440,"props":4798,"children":4799},{"style":680},[4800],{"type":410,"value":694},{"type":404,"tag":440,"props":4802,"children":4803},{"style":470},[4804],{"type":410,"value":1285},{"type":404,"tag":440,"props":4806,"children":4807},{"style":1624},[4808],{"type":410,"value":4809},"args",{"type":404,"tag":440,"props":4811,"children":4812},{"style":680},[4813],{"type":410,"value":1632},{"type":404,"tag":440,"props":4815,"children":4816},{"style":680},[4817],{"type":410,"value":1338},{"type":404,"tag":440,"props":4819,"children":4820},{"class":442,"line":733},[4821,4825,4830,4834,4839,4843,4847,4851],{"type":404,"tag":440,"props":4822,"children":4823},{"style":997},[4824],{"type":410,"value":3775},{"type":404,"tag":440,"props":4826,"children":4827},{"style":1431},[4828],{"type":410,"value":4829}," Base",{"type":404,"tag":440,"props":4831,"children":4832},{"style":470},[4833],{"type":410,"value":1361},{"type":404,"tag":440,"props":4835,"children":4836},{"style":2820},[4837],{"type":410,"value":4838}," Date",{"type":404,"tag":440,"props":4840,"children":4841},{"style":680},[4842],{"type":410,"value":683},{"type":404,"tag":440,"props":4844,"children":4845},{"style":1431},[4846],{"type":410,"value":2831},{"type":404,"tag":440,"props":4848,"children":4849},{"style":680},[4850],{"type":410,"value":683},{"type":404,"tag":440,"props":4852,"children":4853},{"style":1431},[4854],{"type":410,"value":3798},{"type":404,"tag":440,"props":4856,"children":4857},{"class":442,"line":1377},[4858,4862,4867,4871,4875,4879,4883,4887,4891,4895,4899,4903,4907,4911,4915,4919,4923,4927],{"type":404,"tag":440,"props":4859,"children":4860},{"style":997},[4861],{"type":410,"value":3775},{"type":404,"tag":440,"props":4863,"children":4864},{"style":1431},[4865],{"type":410,"value":4866}," instance",{"type":404,"tag":440,"props":4868,"children":4869},{"style":470},[4870],{"type":410,"value":1361},{"type":404,"tag":440,"props":4872,"children":4873},{"style":674},[4874],{"type":410,"value":4110},{"type":404,"tag":440,"props":4876,"children":4877},{"style":680},[4878],{"type":410,"value":683},{"type":404,"tag":440,"props":4880,"children":4881},{"style":686},[4882],{"type":410,"value":3639},{"type":404,"tag":440,"props":4884,"children":4885},{"style":1395},[4886],{"type":410,"value":694},{"type":404,"tag":440,"props":4888,"children":4889},{"style":470},[4890],{"type":410,"value":1513},{"type":404,"tag":440,"props":4892,"children":4893},{"style":686},[4894],{"type":410,"value":4829},{"type":404,"tag":440,"props":4896,"children":4897},{"style":1395},[4898],{"type":410,"value":694},{"type":404,"tag":440,"props":4900,"children":4901},{"style":470},[4902],{"type":410,"value":1285},{"type":404,"tag":440,"props":4904,"children":4905},{"style":674},[4906],{"type":410,"value":4809},{"type":404,"tag":440,"props":4908,"children":4909},{"style":1395},[4910],{"type":410,"value":1632},{"type":404,"tag":440,"props":4912,"children":4913},{"style":680},[4914],{"type":410,"value":710},{"type":404,"tag":440,"props":4916,"children":4917},{"style":2820},[4918],{"type":410,"value":4796},{"type":404,"tag":440,"props":4920,"children":4921},{"style":680},[4922],{"type":410,"value":683},{"type":404,"tag":440,"props":4924,"children":4925},{"style":1431},[4926],{"type":410,"value":2831},{"type":404,"tag":440,"props":4928,"children":4929},{"style":1395},[4930],{"type":410,"value":1415},{"type":404,"tag":440,"props":4932,"children":4933},{"class":442,"line":1418},[4934,4939],{"type":404,"tag":440,"props":4935,"children":4936},{"style":1701},[4937],{"type":410,"value":4938},"  return",{"type":404,"tag":440,"props":4940,"children":4941},{"style":674},[4942],{"type":410,"value":4943}," instance\n",{"type":404,"tag":440,"props":4945,"children":4946},{"class":442,"line":1427},[4947],{"type":404,"tag":440,"props":4948,"children":4949},{"style":680},[4950],{"type":410,"value":1424},{"type":404,"tag":440,"props":4952,"children":4953},{"class":442,"line":1462},[4954,4958,4962,4966,4970,4975,4979,4983,4987,4991,4995,4999],{"type":404,"tag":440,"props":4955,"children":4956},{"style":674},[4957],{"type":410,"value":677},{"type":404,"tag":440,"props":4959,"children":4960},{"style":680},[4961],{"type":410,"value":683},{"type":404,"tag":440,"props":4963,"children":4964},{"style":686},[4965],{"type":410,"value":3639},{"type":404,"tag":440,"props":4967,"children":4968},{"style":674},[4969],{"type":410,"value":694},{"type":404,"tag":440,"props":4971,"children":4972},{"style":2820},[4973],{"type":410,"value":4974},"MyDate",{"type":404,"tag":440,"props":4976,"children":4977},{"style":680},[4978],{"type":410,"value":683},{"type":404,"tag":440,"props":4980,"children":4981},{"style":1431},[4982],{"type":410,"value":2831},{"type":404,"tag":440,"props":4984,"children":4985},{"style":680},[4986],{"type":410,"value":710},{"type":404,"tag":440,"props":4988,"children":4989},{"style":2820},[4990],{"type":410,"value":4838},{"type":404,"tag":440,"props":4992,"children":4993},{"style":680},[4994],{"type":410,"value":683},{"type":404,"tag":440,"props":4996,"children":4997},{"style":1431},[4998],{"type":410,"value":2831},{"type":404,"tag":440,"props":5000,"children":5001},{"style":674},[5002],{"type":410,"value":1415},{"type":404,"tag":440,"props":5004,"children":5005},{"class":442,"line":1499},[5006],{"type":404,"tag":440,"props":5007,"children":5008},{"emptyLinePlaceholder":397},[5009],{"type":410,"value":4093},{"type":404,"tag":440,"props":5011,"children":5012},{"class":442,"line":1507},[5013,5018,5022,5026,5030,5034,5038,5042],{"type":404,"tag":440,"props":5014,"children":5015},{"style":674},[5016],{"type":410,"value":5017},"console",{"type":404,"tag":440,"props":5019,"children":5020},{"style":680},[5021],{"type":410,"value":683},{"type":404,"tag":440,"props":5023,"children":5024},{"style":686},[5025],{"type":410,"value":1392},{"type":404,"tag":440,"props":5027,"children":5028},{"style":674},[5029],{"type":410,"value":694},{"type":404,"tag":440,"props":5031,"children":5032},{"style":470},[5033],{"type":410,"value":1513},{"type":404,"tag":440,"props":5035,"children":5036},{"style":686},[5037],{"type":410,"value":4796},{"type":404,"tag":440,"props":5039,"children":5040},{"style":674},[5041],{"type":410,"value":812},{"type":404,"tag":440,"props":5043,"children":5044},{"style":727},[5045],{"type":410,"value":5046},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":404,"tag":412,"props":5048,"children":5050},{"id":5049},"可定制的对象属性",[5051],{"type":410,"value":5049},{"type":404,"tag":418,"props":5053,"children":5054},{},[5055],{"type":410,"value":5056},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":404,"tag":518,"props":5058,"children":5059},{},[5060,5065,5070],{"type":404,"tag":522,"props":5061,"children":5062},{},[5063],{"type":410,"value":5064},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":404,"tag":522,"props":5066,"children":5067},{},[5068],{"type":410,"value":5069},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":404,"tag":522,"props":5071,"children":5072},{},[5073],{"type":410,"value":5074},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":404,"tag":418,"props":5076,"children":5077},{},[5078],{"type":410,"value":5079},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":404,"tag":1012,"props":5081,"children":5082},{},[5083,5109],{"type":404,"tag":1016,"props":5084,"children":5085},{},[5086],{"type":404,"tag":1020,"props":5087,"children":5088},{},[5089,5094,5099,5104],{"type":404,"tag":1024,"props":5090,"children":5091},{},[5092],{"type":410,"value":5093},"Object.xxx 方法",{"type":404,"tag":1024,"props":5095,"children":5096},{},[5097],{"type":410,"value":5098},"方法说明",{"type":404,"tag":1024,"props":5100,"children":5101},{},[5102],{"type":410,"value":5103},"对自有属性表的操作",{"type":404,"tag":1024,"props":5105,"children":5106},{},[5107],{"type":410,"value":5108},"检查方法",{"type":404,"tag":1035,"props":5110,"children":5111},{},[5112,5141,5169],{"type":404,"tag":1020,"props":5113,"children":5114},{},[5115,5120,5125,5136],{"type":404,"tag":1042,"props":5116,"children":5117},{},[5118],{"type":410,"value":5119},"preventExtensions(obj)",{"type":404,"tag":1042,"props":5121,"children":5122},{},[5123],{"type":410,"value":5124},"使实例不能添加新属性，也不可重置原型",{"type":404,"tag":1042,"props":5126,"children":5127},{},[5128,5134],{"type":404,"tag":5129,"props":5130,"children":5131},"del",{},[5132],{"type":410,"value":5133},"add",{"type":410,"value":5135},"、delete、update",{"type":404,"tag":1042,"props":5137,"children":5138},{},[5139],{"type":410,"value":5140},"isExtensible(obj)",{"type":404,"tag":1020,"props":5142,"children":5143},{},[5144,5149,5154,5164],{"type":404,"tag":1042,"props":5145,"children":5146},{},[5147],{"type":410,"value":5148},"seal(obj)",{"type":404,"tag":1042,"props":5150,"children":5151},{},[5152],{"type":410,"value":5153},"使实例不能新增新属性，也不能删除既有属性",{"type":404,"tag":1042,"props":5155,"children":5156},{},[5157,5162],{"type":404,"tag":5129,"props":5158,"children":5159},{},[5160],{"type":410,"value":5161},"add、delete",{"type":410,"value":5163},"、update",{"type":404,"tag":1042,"props":5165,"children":5166},{},[5167],{"type":410,"value":5168},"isSealed(obj)",{"type":404,"tag":1020,"props":5170,"children":5171},{},[5172,5177,5182,5190],{"type":404,"tag":1042,"props":5173,"children":5174},{},[5175],{"type":410,"value":5176},"freeze(obj)",{"type":404,"tag":1042,"props":5178,"children":5179},{},[5180],{"type":410,"value":5181},"使实例所有属性只读，且不能再添加、删除属性",{"type":404,"tag":1042,"props":5183,"children":5184},{},[5185],{"type":404,"tag":5129,"props":5186,"children":5187},{},[5188],{"type":410,"value":5189},"add、delete、update",{"type":404,"tag":1042,"props":5191,"children":5192},{},[5193],{"type":410,"value":5194},"isFrozen(obj)",{"type":404,"tag":418,"props":5196,"children":5197},{},[5198],{"type":410,"value":5199},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":404,"tag":518,"props":5201,"children":5202},{},[5203,5208,5213],{"type":404,"tag":522,"props":5204,"children":5205},{},[5206],{"type":410,"value":5207},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":404,"tag":522,"props":5209,"children":5210},{},[5211],{"type":410,"value":5212},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":404,"tag":522,"props":5214,"children":5215},{},[5216],{"type":410,"value":5217},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":404,"tag":412,"props":5219,"children":5221},{"id":5220},"运行期侵入",[5222],{"type":410,"value":5220},{"type":404,"tag":418,"props":5224,"children":5225},{},[5226],{"type":410,"value":5227},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":404,"tag":418,"props":5229,"children":5230},{},[5231],{"type":410,"value":5232},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":404,"tag":418,"props":5234,"children":5235},{},[5236],{"type":410,"value":5237},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":404,"tag":1012,"props":5239,"children":5240},{},[5241,5257],{"type":404,"tag":1016,"props":5242,"children":5243},{},[5244],{"type":404,"tag":1020,"props":5245,"children":5246},{},[5247,5252],{"type":404,"tag":1024,"props":5248,"children":5249},{},[5250],{"type":410,"value":5251},"内部方法",{"type":404,"tag":1024,"props":5253,"children":5254},{},[5255],{"type":410,"value":5256},"handler.xxx",{"type":404,"tag":1035,"props":5258,"children":5259},{},[5260,5273,5286,5299,5312,5325,5338,5351,5364,5377,5390,5403,5416],{"type":404,"tag":1020,"props":5261,"children":5262},{},[5263,5268],{"type":404,"tag":1042,"props":5264,"children":5265},{},[5266],{"type":410,"value":5267},"[[GetPrototypeOf]]",{"type":404,"tag":1042,"props":5269,"children":5270},{},[5271],{"type":410,"value":5272},"getPrototypeOf()",{"type":404,"tag":1020,"props":5274,"children":5275},{},[5276,5281],{"type":404,"tag":1042,"props":5277,"children":5278},{},[5279],{"type":410,"value":5280},"[[SetPrototypeOf]]",{"type":404,"tag":1042,"props":5282,"children":5283},{},[5284],{"type":410,"value":5285},"setPrototypeOf()",{"type":404,"tag":1020,"props":5287,"children":5288},{},[5289,5294],{"type":404,"tag":1042,"props":5290,"children":5291},{},[5292],{"type":410,"value":5293},"[[IsExtensible]]",{"type":404,"tag":1042,"props":5295,"children":5296},{},[5297],{"type":410,"value":5298},"isExtensible()",{"type":404,"tag":1020,"props":5300,"children":5301},{},[5302,5307],{"type":404,"tag":1042,"props":5303,"children":5304},{},[5305],{"type":410,"value":5306},"[[PreventExtensions]]",{"type":404,"tag":1042,"props":5308,"children":5309},{},[5310],{"type":410,"value":5311},"preventExtensions()",{"type":404,"tag":1020,"props":5313,"children":5314},{},[5315,5320],{"type":404,"tag":1042,"props":5316,"children":5317},{},[5318],{"type":410,"value":5319},"[[GetOwnProperty]]",{"type":404,"tag":1042,"props":5321,"children":5322},{},[5323],{"type":410,"value":5324},"getOwnPropertyDescriptor()",{"type":404,"tag":1020,"props":5326,"children":5327},{},[5328,5333],{"type":404,"tag":1042,"props":5329,"children":5330},{},[5331],{"type":410,"value":5332},"[[HasProperty]]",{"type":404,"tag":1042,"props":5334,"children":5335},{},[5336],{"type":410,"value":5337},"has()",{"type":404,"tag":1020,"props":5339,"children":5340},{},[5341,5346],{"type":404,"tag":1042,"props":5342,"children":5343},{},[5344],{"type":410,"value":5345},"[[DefineOwnProperty]]",{"type":404,"tag":1042,"props":5347,"children":5348},{},[5349],{"type":410,"value":5350},"defineProperty()",{"type":404,"tag":1020,"props":5352,"children":5353},{},[5354,5359],{"type":404,"tag":1042,"props":5355,"children":5356},{},[5357],{"type":410,"value":5358},"[[Get]]",{"type":404,"tag":1042,"props":5360,"children":5361},{},[5362],{"type":410,"value":5363},"get()",{"type":404,"tag":1020,"props":5365,"children":5366},{},[5367,5372],{"type":404,"tag":1042,"props":5368,"children":5369},{},[5370],{"type":410,"value":5371},"[[Set]]",{"type":404,"tag":1042,"props":5373,"children":5374},{},[5375],{"type":410,"value":5376},"set()",{"type":404,"tag":1020,"props":5378,"children":5379},{},[5380,5385],{"type":404,"tag":1042,"props":5381,"children":5382},{},[5383],{"type":410,"value":5384},"[[Delete]]",{"type":404,"tag":1042,"props":5386,"children":5387},{},[5388],{"type":410,"value":5389},"deleteProperty()",{"type":404,"tag":1020,"props":5391,"children":5392},{},[5393,5398],{"type":404,"tag":1042,"props":5394,"children":5395},{},[5396],{"type":410,"value":5397},"[[OwnPropertyKeys]]",{"type":404,"tag":1042,"props":5399,"children":5400},{},[5401],{"type":410,"value":5402},"ownKeys()",{"type":404,"tag":1020,"props":5404,"children":5405},{},[5406,5411],{"type":404,"tag":1042,"props":5407,"children":5408},{},[5409],{"type":410,"value":5410},"[[Call]]",{"type":404,"tag":1042,"props":5412,"children":5413},{},[5414],{"type":410,"value":5415},"apply()",{"type":404,"tag":1020,"props":5417,"children":5418},{},[5419,5424],{"type":404,"tag":1042,"props":5420,"children":5421},{},[5422],{"type":410,"value":5423},"[[Construct]]",{"type":404,"tag":1042,"props":5425,"children":5426},{},[5427],{"type":410,"value":5428},"construct()",{"type":404,"tag":418,"props":5430,"children":5431},{},[5432],{"type":410,"value":5433},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":404,"tag":518,"props":5435,"children":5436},{},[5437,5442],{"type":404,"tag":522,"props":5438,"children":5439},{},[5440],{"type":410,"value":5441},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":404,"tag":522,"props":5443,"children":5444},{},[5445],{"type":410,"value":5446},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":404,"tag":418,"props":5448,"children":5449},{},[5450],{"type":410,"value":5451},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":404,"tag":429,"props":5453,"children":5455},{"className":662,"code":5454,"language":664,"meta":398,"style":398},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5456],{"type":404,"tag":436,"props":5457,"children":5458},{"__ignoreMap":398},[5459,5497,5546,5587,5665,5709,5774,5781,5815,5855,5894,5914,5931,5969,5976,5983,5994],{"type":404,"tag":440,"props":5460,"children":5461},{"class":442,"line":443},[5462,5466,5471,5475,5480,5484,5489,5493],{"type":404,"tag":440,"props":5463,"children":5464},{"style":997},[5465],{"type":410,"value":1323},{"type":404,"tag":440,"props":5467,"children":5468},{"style":686},[5469],{"type":410,"value":5470}," intrudeOnPrototype",{"type":404,"tag":440,"props":5472,"children":5473},{"style":680},[5474],{"type":410,"value":694},{"type":404,"tag":440,"props":5476,"children":5477},{"style":1624},[5478],{"type":410,"value":5479},"Fn",{"type":404,"tag":440,"props":5481,"children":5482},{"style":680},[5483],{"type":410,"value":710},{"type":404,"tag":440,"props":5485,"children":5486},{"style":1624},[5487],{"type":410,"value":5488}," handler",{"type":404,"tag":440,"props":5490,"children":5491},{"style":680},[5492],{"type":410,"value":1632},{"type":404,"tag":440,"props":5494,"children":5495},{"style":680},[5496],{"type":410,"value":1338},{"type":404,"tag":440,"props":5498,"children":5499},{"class":442,"line":733},[5500,5504,5509,5513,5517,5521,5526,5530,5534,5538,5542],{"type":404,"tag":440,"props":5501,"children":5502},{"style":997},[5503],{"type":410,"value":3775},{"type":404,"tag":440,"props":5505,"children":5506},{"style":1431},[5507],{"type":410,"value":5508}," originPrototype",{"type":404,"tag":440,"props":5510,"children":5511},{"style":470},[5512],{"type":410,"value":1361},{"type":404,"tag":440,"props":5514,"children":5515},{"style":674},[5516],{"type":410,"value":4110},{"type":404,"tag":440,"props":5518,"children":5519},{"style":680},[5520],{"type":410,"value":683},{"type":404,"tag":440,"props":5522,"children":5523},{"style":686},[5524],{"type":410,"value":5525},"getPrototypeOf",{"type":404,"tag":440,"props":5527,"children":5528},{"style":1395},[5529],{"type":410,"value":694},{"type":404,"tag":440,"props":5531,"children":5532},{"style":2820},[5533],{"type":410,"value":5479},{"type":404,"tag":440,"props":5535,"children":5536},{"style":680},[5537],{"type":410,"value":683},{"type":404,"tag":440,"props":5539,"children":5540},{"style":1431},[5541],{"type":410,"value":2831},{"type":404,"tag":440,"props":5543,"children":5544},{"style":1395},[5545],{"type":410,"value":1415},{"type":404,"tag":440,"props":5547,"children":5548},{"class":442,"line":1377},[5549,5553,5558,5562,5566,5570,5574,5578,5583],{"type":404,"tag":440,"props":5550,"children":5551},{"style":997},[5552],{"type":410,"value":3775},{"type":404,"tag":440,"props":5554,"children":5555},{"style":1431},[5556],{"type":410,"value":5557}," target",{"type":404,"tag":440,"props":5559,"children":5560},{"style":470},[5561],{"type":410,"value":1361},{"type":404,"tag":440,"props":5563,"children":5564},{"style":674},[5565],{"type":410,"value":4110},{"type":404,"tag":440,"props":5567,"children":5568},{"style":680},[5569],{"type":410,"value":683},{"type":404,"tag":440,"props":5571,"children":5572},{"style":686},[5573],{"type":410,"value":4119},{"type":404,"tag":440,"props":5575,"children":5576},{"style":1395},[5577],{"type":410,"value":694},{"type":404,"tag":440,"props":5579,"children":5580},{"style":674},[5581],{"type":410,"value":5582},"originPrototype",{"type":404,"tag":440,"props":5584,"children":5585},{"style":1395},[5586],{"type":410,"value":1415},{"type":404,"tag":440,"props":5588,"children":5589},{"class":442,"line":1418},[5590,5594,5598,5604,5608,5613,5617,5622,5626,5630,5635,5639,5644,5648,5653,5657,5661],{"type":404,"tag":440,"props":5591,"children":5592},{"style":997},[5593],{"type":410,"value":3775},{"type":404,"tag":440,"props":5595,"children":5596},{"style":680},[5597],{"type":410,"value":1709},{"type":404,"tag":440,"props":5599,"children":5601},{"style":5600},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5602],{"type":410,"value":5603}," proxy",{"type":404,"tag":440,"props":5605,"children":5606},{"style":680},[5607],{"type":410,"value":1857},{"type":404,"tag":440,"props":5609,"children":5610},{"style":1431},[5611],{"type":410,"value":5612}," newPrototype",{"type":404,"tag":440,"props":5614,"children":5615},{"style":680},[5616],{"type":410,"value":710},{"type":404,"tag":440,"props":5618,"children":5619},{"style":1431},[5620],{"type":410,"value":5621}," revoke",{"type":404,"tag":440,"props":5623,"children":5624},{"style":680},[5625],{"type":410,"value":1732},{"type":404,"tag":440,"props":5627,"children":5628},{"style":470},[5629],{"type":410,"value":1361},{"type":404,"tag":440,"props":5631,"children":5632},{"style":674},[5633],{"type":410,"value":5634}," Proxy",{"type":404,"tag":440,"props":5636,"children":5637},{"style":680},[5638],{"type":410,"value":683},{"type":404,"tag":440,"props":5640,"children":5641},{"style":686},[5642],{"type":410,"value":5643},"revocable",{"type":404,"tag":440,"props":5645,"children":5646},{"style":1395},[5647],{"type":410,"value":694},{"type":404,"tag":440,"props":5649,"children":5650},{"style":674},[5651],{"type":410,"value":5652},"target",{"type":404,"tag":440,"props":5654,"children":5655},{"style":680},[5656],{"type":410,"value":710},{"type":404,"tag":440,"props":5658,"children":5659},{"style":674},[5660],{"type":410,"value":5488},{"type":404,"tag":440,"props":5662,"children":5663},{"style":1395},[5664],{"type":410,"value":1415},{"type":404,"tag":440,"props":5666,"children":5667},{"class":442,"line":1427},[5668,5673,5677,5681,5685,5689,5693,5697,5701,5705],{"type":404,"tag":440,"props":5669,"children":5670},{"style":674},[5671],{"type":410,"value":5672},"  Object",{"type":404,"tag":440,"props":5674,"children":5675},{"style":680},[5676],{"type":410,"value":683},{"type":404,"tag":440,"props":5678,"children":5679},{"style":686},[5680],{"type":410,"value":3639},{"type":404,"tag":440,"props":5682,"children":5683},{"style":1395},[5684],{"type":410,"value":694},{"type":404,"tag":440,"props":5686,"children":5687},{"style":2820},[5688],{"type":410,"value":5479},{"type":404,"tag":440,"props":5690,"children":5691},{"style":680},[5692],{"type":410,"value":683},{"type":404,"tag":440,"props":5694,"children":5695},{"style":1431},[5696],{"type":410,"value":2831},{"type":404,"tag":440,"props":5698,"children":5699},{"style":680},[5700],{"type":410,"value":710},{"type":404,"tag":440,"props":5702,"children":5703},{"style":674},[5704],{"type":410,"value":5612},{"type":404,"tag":440,"props":5706,"children":5707},{"style":1395},[5708],{"type":410,"value":1415},{"type":404,"tag":440,"props":5710,"children":5711},{"class":442,"line":1462},[5712,5716,5720,5725,5729,5733,5737,5741,5745,5749,5753,5757,5761,5765,5769],{"type":404,"tag":440,"props":5713,"children":5714},{"style":1701},[5715],{"type":410,"value":4938},{"type":404,"tag":440,"props":5717,"children":5718},{"style":680},[5719],{"type":410,"value":1333},{"type":404,"tag":440,"props":5721,"children":5722},{"style":997},[5723],{"type":410,"value":5724}," =>",{"type":404,"tag":440,"props":5726,"children":5727},{"style":686},[5728],{"type":410,"value":5621},{"type":404,"tag":440,"props":5730,"children":5731},{"style":1395},[5732],{"type":410,"value":694},{"type":404,"tag":440,"props":5734,"children":5735},{"style":674},[5736],{"type":410,"value":677},{"type":404,"tag":440,"props":5738,"children":5739},{"style":680},[5740],{"type":410,"value":683},{"type":404,"tag":440,"props":5742,"children":5743},{"style":686},[5744],{"type":410,"value":3639},{"type":404,"tag":440,"props":5746,"children":5747},{"style":1395},[5748],{"type":410,"value":694},{"type":404,"tag":440,"props":5750,"children":5751},{"style":2820},[5752],{"type":410,"value":5479},{"type":404,"tag":440,"props":5754,"children":5755},{"style":680},[5756],{"type":410,"value":683},{"type":404,"tag":440,"props":5758,"children":5759},{"style":1431},[5760],{"type":410,"value":2831},{"type":404,"tag":440,"props":5762,"children":5763},{"style":680},[5764],{"type":410,"value":710},{"type":404,"tag":440,"props":5766,"children":5767},{"style":674},[5768],{"type":410,"value":5508},{"type":404,"tag":440,"props":5770,"children":5771},{"style":1395},[5772],{"type":410,"value":5773},"))\n",{"type":404,"tag":440,"props":5775,"children":5776},{"class":442,"line":1499},[5777],{"type":404,"tag":440,"props":5778,"children":5779},{"style":680},[5780],{"type":410,"value":1424},{"type":404,"tag":440,"props":5782,"children":5783},{"class":442,"line":1507},[5784,5789,5794,5798,5802,5807,5811],{"type":404,"tag":440,"props":5785,"children":5786},{"style":997},[5787],{"type":410,"value":5788},"const",{"type":404,"tag":440,"props":5790,"children":5791},{"style":1431},[5792],{"type":410,"value":5793}," recovery",{"type":404,"tag":440,"props":5795,"children":5796},{"style":470},[5797],{"type":410,"value":1361},{"type":404,"tag":440,"props":5799,"children":5800},{"style":686},[5801],{"type":410,"value":5470},{"type":404,"tag":440,"props":5803,"children":5804},{"style":674},[5805],{"type":410,"value":5806},"(String",{"type":404,"tag":440,"props":5808,"children":5809},{"style":680},[5810],{"type":410,"value":710},{"type":404,"tag":440,"props":5812,"children":5813},{"style":680},[5814],{"type":410,"value":1338},{"type":404,"tag":440,"props":5816,"children":5817},{"class":442,"line":1534},[5818,5822,5826,5830,5834,5838,5842,5847,5851],{"type":404,"tag":440,"props":5819,"children":5820},{"style":686},[5821],{"type":410,"value":2718},{"type":404,"tag":440,"props":5823,"children":5824},{"style":680},[5825],{"type":410,"value":1857},{"type":404,"tag":440,"props":5827,"children":5828},{"style":997},[5829],{"type":410,"value":1451},{"type":404,"tag":440,"props":5831,"children":5832},{"style":680},[5833],{"type":410,"value":1930},{"type":404,"tag":440,"props":5835,"children":5836},{"style":1624},[5837],{"type":410,"value":5652},{"type":404,"tag":440,"props":5839,"children":5840},{"style":680},[5841],{"type":410,"value":710},{"type":404,"tag":440,"props":5843,"children":5844},{"style":1624},[5845],{"type":410,"value":5846}," prop",{"type":404,"tag":440,"props":5848,"children":5849},{"style":680},[5850],{"type":410,"value":1632},{"type":404,"tag":440,"props":5852,"children":5853},{"style":680},[5854],{"type":410,"value":1338},{"type":404,"tag":440,"props":5856,"children":5857},{"class":442,"line":2110},[5858,5862,5866,5870,5874,5878,5882,5886,5890],{"type":404,"tag":440,"props":5859,"children":5860},{"style":1701},[5861],{"type":410,"value":1991},{"type":404,"tag":440,"props":5863,"children":5864},{"style":1395},[5865],{"type":410,"value":1930},{"type":404,"tag":440,"props":5867,"children":5868},{"style":674},[5869],{"type":410,"value":3038},{"type":404,"tag":440,"props":5871,"children":5872},{"style":470},[5873],{"type":410,"value":2004},{"type":404,"tag":440,"props":5875,"children":5876},{"style":453},[5877],{"type":410,"value":456},{"type":404,"tag":440,"props":5879,"children":5880},{"style":459},[5881],{"type":410,"value":1723},{"type":404,"tag":440,"props":5883,"children":5884},{"style":453},[5885],{"type":410,"value":467},{"type":404,"tag":440,"props":5887,"children":5888},{"style":1395},[5889],{"type":410,"value":724},{"type":404,"tag":440,"props":5891,"children":5892},{"style":680},[5893],{"type":410,"value":1747},{"type":404,"tag":440,"props":5895,"children":5896},{"class":442,"line":2170},[5897,5902,5906,5910],{"type":404,"tag":440,"props":5898,"children":5899},{"style":1701},[5900],{"type":410,"value":5901},"      return",{"type":404,"tag":440,"props":5903,"children":5904},{"style":453},[5905],{"type":410,"value":456},{"type":404,"tag":440,"props":5907,"children":5908},{"style":459},[5909],{"type":410,"value":1723},{"type":404,"tag":440,"props":5911,"children":5912},{"style":453},[5913],{"type":410,"value":1374},{"type":404,"tag":440,"props":5915,"children":5916},{"class":442,"line":2231},[5917,5922,5927],{"type":404,"tag":440,"props":5918,"children":5919},{"style":680},[5920],{"type":410,"value":5921},"    }",{"type":404,"tag":440,"props":5923,"children":5924},{"style":1701},[5925],{"type":410,"value":5926}," else",{"type":404,"tag":440,"props":5928,"children":5929},{"style":680},[5930],{"type":410,"value":1338},{"type":404,"tag":440,"props":5932,"children":5933},{"class":442,"line":2272},[5934,5938,5943,5947,5952,5956,5960,5965],{"type":404,"tag":440,"props":5935,"children":5936},{"style":1701},[5937],{"type":410,"value":5901},{"type":404,"tag":440,"props":5939,"children":5940},{"style":674},[5941],{"type":410,"value":5942}," Reflect",{"type":404,"tag":440,"props":5944,"children":5945},{"style":680},[5946],{"type":410,"value":683},{"type":404,"tag":440,"props":5948,"children":5949},{"style":686},[5950],{"type":410,"value":5951},"get",{"type":404,"tag":440,"props":5953,"children":5954},{"style":1395},[5955],{"type":410,"value":694},{"type":404,"tag":440,"props":5957,"children":5958},{"style":470},[5959],{"type":410,"value":1285},{"type":404,"tag":440,"props":5961,"children":5962},{"style":4033},[5963],{"type":410,"value":5964},"arguments",{"type":404,"tag":440,"props":5966,"children":5967},{"style":1395},[5968],{"type":410,"value":1415},{"type":404,"tag":440,"props":5970,"children":5971},{"class":442,"line":2313},[5972],{"type":404,"tag":440,"props":5973,"children":5974},{"style":680},[5975],{"type":410,"value":2319},{"type":404,"tag":440,"props":5977,"children":5978},{"class":442,"line":2322},[5979],{"type":404,"tag":440,"props":5980,"children":5981},{"style":680},[5982],{"type":410,"value":2077},{"type":404,"tag":440,"props":5984,"children":5985},{"class":442,"line":2330},[5986,5990],{"type":404,"tag":440,"props":5987,"children":5988},{"style":680},[5989],{"type":410,"value":1671},{"type":404,"tag":440,"props":5991,"children":5992},{"style":674},[5993],{"type":410,"value":1415},{"type":404,"tag":440,"props":5995,"children":5997},{"class":442,"line":5996},17,[5998,6002,6006,6010,6014,6019,6023,6028],{"type":404,"tag":440,"props":5999,"children":6000},{"style":674},[6001],{"type":410,"value":5017},{"type":404,"tag":440,"props":6003,"children":6004},{"style":680},[6005],{"type":410,"value":683},{"type":404,"tag":440,"props":6007,"children":6008},{"style":686},[6009],{"type":410,"value":1392},{"type":404,"tag":440,"props":6011,"children":6012},{"style":674},[6013],{"type":410,"value":694},{"type":404,"tag":440,"props":6015,"children":6016},{"style":453},[6017],{"type":410,"value":6018},"''",{"type":404,"tag":440,"props":6020,"children":6021},{"style":680},[6022],{"type":410,"value":683},{"type":404,"tag":440,"props":6024,"children":6025},{"style":674},[6026],{"type":410,"value":6027},"test) ",{"type":404,"tag":440,"props":6029,"children":6030},{"style":727},[6031],{"type":410,"value":6032},"// test\n",{"type":404,"tag":412,"props":6034,"children":6036},{"id":6035},"元编程系统",[6037],{"type":410,"value":6035},{"type":404,"tag":418,"props":6039,"children":6040},{},[6041],{"type":410,"value":6042},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":404,"tag":405,"props":6044,"children":6046},{"id":6045},"结构化",[6047],{"type":410,"value":6045},{"type":404,"tag":412,"props":6049,"children":6051},{"id":6050},"概述",[6052],{"type":410,"value":6050},{"type":404,"tag":418,"props":6054,"children":6055},{},[6056],{"type":410,"value":6057},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":404,"tag":418,"props":6059,"children":6060},{},[6061],{"type":410,"value":6062},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":404,"tag":418,"props":6064,"children":6065},{},[6066],{"type":410,"value":6067},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":404,"tag":418,"props":6069,"children":6070},{},[6071],{"type":410,"value":6072},"面向对象解决了结构化带来诸多问题的三点：",{"type":404,"tag":518,"props":6074,"children":6075},{},[6076,6081,6086],{"type":404,"tag":522,"props":6077,"children":6078},{},[6079],{"type":410,"value":6080},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":404,"tag":522,"props":6082,"children":6083},{},[6084],{"type":410,"value":6085},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":404,"tag":522,"props":6087,"children":6088},{},[6089],{"type":410,"value":6090},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":404,"tag":418,"props":6092,"children":6093},{},[6094],{"type":410,"value":6095},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":404,"tag":418,"props":6097,"children":6098},{},[6099],{"type":410,"value":6100},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":404,"tag":412,"props":6102,"children":6104},{"id":6103},"基本的组织元素",[6105],{"type":410,"value":6103},{"type":404,"tag":418,"props":6107,"children":6108},{},[6109],{"type":410,"value":6110},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":404,"tag":1012,"props":6112,"children":6113},{},[6114,6140],{"type":404,"tag":1016,"props":6115,"children":6116},{},[6117],{"type":404,"tag":1020,"props":6118,"children":6119},{},[6120,6125,6130,6135],{"type":404,"tag":1024,"props":6121,"children":6122},{},[6123],{"type":410,"value":6124},"元素",{"type":404,"tag":1024,"props":6126,"children":6127},{},[6128],{"type":410,"value":6129},"物理形态",{"type":404,"tag":1024,"props":6131,"children":6132},{},[6133],{"type":410,"value":6134},"静态",{"type":404,"tag":1024,"props":6136,"children":6137},{},[6138],{"type":410,"value":6139},"动态",{"type":404,"tag":1035,"props":6141,"children":6142},{},[6143,6164,6187,6209],{"type":404,"tag":1020,"props":6144,"children":6145},{},[6146,6151,6154,6159],{"type":404,"tag":1042,"props":6147,"children":6148},{},[6149],{"type":410,"value":6150},"标识符",{"type":404,"tag":1042,"props":6152,"children":6153},{},[],{"type":404,"tag":1042,"props":6155,"children":6156},{},[6157],{"type":410,"value":6158},"变量声明、函数声明、类声明",{"type":404,"tag":1042,"props":6160,"children":6161},{},[6162],{"type":410,"value":6163},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":404,"tag":1020,"props":6165,"children":6166},{},[6167,6172,6177,6182],{"type":404,"tag":1042,"props":6168,"children":6169},{},[6170],{"type":410,"value":6171},"表达式",{"type":404,"tag":1042,"props":6173,"children":6174},{},[6175],{"type":410,"value":6176},"模板字符串",{"type":404,"tag":1042,"props":6178,"children":6179},{},[6180],{"type":410,"value":6181},"值、箭头函数体",{"type":404,"tag":1042,"props":6183,"children":6184},{},[6185],{"type":410,"value":6186},"通过 eval 执行表达式语句",{"type":404,"tag":1020,"props":6188,"children":6189},{},[6190,6194,6199,6204],{"type":404,"tag":1042,"props":6191,"children":6192},{},[6193],{"type":410,"value":1563},{"type":404,"tag":1042,"props":6195,"children":6196},{},[6197],{"type":410,"value":6198},".js 文件",{"type":404,"tag":1042,"props":6200,"children":6201},{},[6202],{"type":410,"value":6203},"块和块级作用域",{"type":404,"tag":1042,"props":6205,"children":6206},{},[6207],{"type":410,"value":6208},"eval()",{"type":404,"tag":1020,"props":6210,"children":6211},{},[6212,6216,6221,6226],{"type":404,"tag":1042,"props":6213,"children":6214},{},[6215],{"type":410,"value":2348},{"type":404,"tag":1042,"props":6217,"children":6218},{},[6219],{"type":410,"value":6220},".mjs 文件",{"type":404,"tag":1042,"props":6222,"children":6223},{},[6224],{"type":410,"value":6225},"import、export、require()",{"type":404,"tag":1042,"props":6227,"children":6228},{},[6229],{"type":410,"value":6230},"import().then()",{"type":404,"tag":418,"props":6232,"children":6233},{},[6234],{"type":410,"value":6235},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":404,"tag":418,"props":6237,"children":6238},{},[6239],{"type":410,"value":6240},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":404,"tag":418,"props":6242,"children":6243},{},[6244],{"type":410,"value":6245},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":404,"tag":418,"props":6247,"children":6248},{},[6249,6251,6256],{"type":410,"value":6250},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":404,"tag":440,"props":6252,"children":6253},{},[6254],{"type":410,"value":6255},"1,2,3",{"type":410,"value":6257}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":404,"tag":418,"props":6259,"children":6260},{},[6261],{"type":410,"value":6262},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":404,"tag":418,"props":6264,"children":6265},{},[6266],{"type":410,"value":6267},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":404,"tag":418,"props":6269,"children":6270},{},[6271],{"type":410,"value":6272},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":404,"tag":418,"props":6274,"children":6275},{},[6276],{"type":410,"value":6277},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":404,"tag":412,"props":6279,"children":6281},{"id":6280},"声明",[6282],{"type":410,"value":6280},{"type":404,"tag":418,"props":6284,"children":6285},{},[6286,6288,6299],{"type":410,"value":6287},"除了 const 和 namespace",{"type":404,"tag":497,"props":6289,"children":6290},{},[6291],{"type":404,"tag":501,"props":6292,"children":6296},{"href":6293,"ariaDescribedBy":6294,"dataFootnoteRef":398,"id":6295},"#user-content-fn-namespace",[505],"user-content-fnref-namespace",[6297],{"type":410,"value":6298},"4",{"type":410,"value":6300}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":404,"tag":429,"props":6302,"children":6304},{"className":662,"code":6303,"language":664,"meta":398,"style":398},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6305],{"type":404,"tag":436,"props":6306,"children":6307},{"__ignoreMap":398},[6308,6336,6352,6384,6406],{"type":404,"tag":440,"props":6309,"children":6310},{"class":442,"line":443},[6311,6316,6320,6324,6328,6332],{"type":404,"tag":440,"props":6312,"children":6313},{"style":470},[6314],{"type":410,"value":6315},"!",{"type":404,"tag":440,"props":6317,"children":6318},{"style":674},[6319],{"type":410,"value":694},{"type":404,"tag":440,"props":6321,"children":6322},{"style":997},[6323],{"type":410,"value":1323},{"type":404,"tag":440,"props":6325,"children":6326},{"style":686},[6327],{"type":410,"value":2023},{"type":404,"tag":440,"props":6329,"children":6330},{"style":680},[6331],{"type":410,"value":1046},{"type":404,"tag":440,"props":6333,"children":6334},{"style":680},[6335],{"type":410,"value":1338},{"type":404,"tag":440,"props":6337,"children":6338},{"class":442,"line":733},[6339,6343,6347],{"type":404,"tag":440,"props":6340,"children":6341},{"style":674},[6342],{"type":410,"value":2771},{"type":404,"tag":440,"props":6344,"children":6345},{"style":470},[6346],{"type":410,"value":1361},{"type":404,"tag":440,"props":6348,"children":6349},{"style":702},[6350],{"type":410,"value":6351}," 100\n",{"type":404,"tag":440,"props":6353,"children":6354},{"class":442,"line":1377},[6355,6359,6363,6367,6371,6375,6379],{"type":404,"tag":440,"props":6356,"children":6357},{"style":674},[6358],{"type":410,"value":1383},{"type":404,"tag":440,"props":6360,"children":6361},{"style":680},[6362],{"type":410,"value":683},{"type":404,"tag":440,"props":6364,"children":6365},{"style":686},[6366],{"type":410,"value":1392},{"type":404,"tag":440,"props":6368,"children":6369},{"style":1395},[6370],{"type":410,"value":694},{"type":404,"tag":440,"props":6372,"children":6373},{"style":674},[6374],{"type":410,"value":1723},{"type":404,"tag":440,"props":6376,"children":6377},{"style":1395},[6378],{"type":410,"value":724},{"type":404,"tag":440,"props":6380,"children":6381},{"style":727},[6382],{"type":410,"value":6383},"// [Function ...]\n",{"type":404,"tag":440,"props":6385,"children":6386},{"class":442,"line":1418},[6387,6392,6396,6401],{"type":404,"tag":440,"props":6388,"children":6389},{"style":4033},[6390],{"type":410,"value":6391},"  arguments",{"type":404,"tag":440,"props":6393,"children":6394},{"style":470},[6395],{"type":410,"value":1361},{"type":404,"tag":440,"props":6397,"children":6398},{"style":1395},[6399],{"type":410,"value":6400}," [] ",{"type":404,"tag":440,"props":6402,"children":6403},{"style":727},[6404],{"type":410,"value":6405},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":404,"tag":440,"props":6407,"children":6408},{"class":442,"line":1427},[6409,6413],{"type":404,"tag":440,"props":6410,"children":6411},{"style":680},[6412],{"type":410,"value":1671},{"type":404,"tag":440,"props":6414,"children":6415},{"style":674},[6416],{"type":410,"value":6417},"())\n",{"type":404,"tag":418,"props":6419,"children":6420},{},[6421],{"type":410,"value":6422},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":404,"tag":429,"props":6424,"children":6426},{"className":662,"code":6425,"language":664,"meta":398,"style":398},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6427],{"type":404,"tag":436,"props":6428,"children":6429},{"__ignoreMap":398},[6430,6438,6457,6483,6511,6549],{"type":404,"tag":440,"props":6431,"children":6432},{"class":442,"line":443},[6433],{"type":404,"tag":440,"props":6434,"children":6435},{"style":727},[6436],{"type":410,"value":6437},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":404,"tag":440,"props":6439,"children":6440},{"class":442,"line":733},[6441,6445,6449,6453],{"type":404,"tag":440,"props":6442,"children":6443},{"style":997},[6444],{"type":410,"value":1323},{"type":404,"tag":440,"props":6446,"children":6447},{"style":686},[6448],{"type":410,"value":2023},{"type":404,"tag":440,"props":6450,"children":6451},{"style":680},[6452],{"type":410,"value":1046},{"type":404,"tag":440,"props":6454,"children":6455},{"style":680},[6456],{"type":410,"value":1338},{"type":404,"tag":440,"props":6458,"children":6459},{"class":442,"line":1377},[6460,6465,6469,6474,6478],{"type":404,"tag":440,"props":6461,"children":6462},{"style":680},[6463],{"type":410,"value":6464},"  {",{"type":404,"tag":440,"props":6466,"children":6467},{"style":997},[6468],{"type":410,"value":1323},{"type":404,"tag":440,"props":6470,"children":6471},{"style":686},[6472],{"type":410,"value":6473}," x",{"type":404,"tag":440,"props":6475,"children":6476},{"style":680},[6477],{"type":410,"value":1333},{"type":404,"tag":440,"props":6479,"children":6480},{"style":680},[6481],{"type":410,"value":6482}," {}};\n",{"type":404,"tag":440,"props":6484,"children":6485},{"class":442,"line":1418},[6486,6490,6494,6498,6503,6507],{"type":404,"tag":440,"props":6487,"children":6488},{"style":1850},[6489],{"type":410,"value":2771},{"type":404,"tag":440,"props":6491,"children":6492},{"style":680},[6493],{"type":410,"value":1857},{"type":404,"tag":440,"props":6495,"children":6496},{"style":997},[6497],{"type":410,"value":1451},{"type":404,"tag":440,"props":6499,"children":6500},{"style":686},[6501],{"type":410,"value":6502}," y",{"type":404,"tag":440,"props":6504,"children":6505},{"style":680},[6506],{"type":410,"value":1333},{"type":404,"tag":440,"props":6508,"children":6509},{"style":680},[6510],{"type":410,"value":3129},{"type":404,"tag":440,"props":6512,"children":6513},{"class":442,"line":1427},[6514,6519,6523,6528,6532,6536,6541,6545],{"type":404,"tag":440,"props":6515,"children":6516},{"style":1701},[6517],{"type":410,"value":6518},"  if",{"type":404,"tag":440,"props":6520,"children":6521},{"style":1395},[6522],{"type":410,"value":1930},{"type":404,"tag":440,"props":6524,"children":6525},{"style":836},[6526],{"type":410,"value":6527},"true",{"type":404,"tag":440,"props":6529,"children":6530},{"style":1395},[6531],{"type":410,"value":724},{"type":404,"tag":440,"props":6533,"children":6534},{"style":997},[6535],{"type":410,"value":1323},{"type":404,"tag":440,"props":6537,"children":6538},{"style":686},[6539],{"type":410,"value":6540}," z",{"type":404,"tag":440,"props":6542,"children":6543},{"style":680},[6544],{"type":410,"value":1333},{"type":404,"tag":440,"props":6546,"children":6547},{"style":680},[6548],{"type":410,"value":3129},{"type":404,"tag":440,"props":6550,"children":6551},{"class":442,"line":1462},[6552],{"type":404,"tag":440,"props":6553,"children":6554},{"style":680},[6555],{"type":410,"value":1424},{"type":404,"tag":412,"props":6557,"children":6559},{"id":6558},"语句与代码分块",[6560],{"type":410,"value":6558},{"type":404,"tag":418,"props":6562,"children":6563},{},[6564],{"type":410,"value":6565},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":404,"tag":418,"props":6567,"children":6568},{},[6569],{"type":410,"value":6570},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":404,"tag":418,"props":6572,"children":6573},{},[6574,6576,6587],{"type":410,"value":6575},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":404,"tag":497,"props":6577,"children":6578},{},[6579],{"type":404,"tag":501,"props":6580,"children":6584},{"href":6581,"ariaDescribedBy":6582,"dataFootnoteRef":398,"id":6583},"#user-content-fn-iterationenv",[505],"user-content-fnref-iterationenv",[6585],{"type":410,"value":6586},"5",{"type":410,"value":6588},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":404,"tag":418,"props":6590,"children":6591},{},[6592],{"type":410,"value":6593},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":404,"tag":418,"props":6595,"children":6596},{},[6597],{"type":410,"value":6598},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":404,"tag":429,"props":6600,"children":6602},{"className":662,"code":6601,"language":664,"meta":398,"style":398},"eval(`if (true) ; else ;`) // undefined\n",[6603],{"type":404,"tag":436,"props":6604,"children":6605},{"__ignoreMap":398},[6606],{"type":404,"tag":440,"props":6607,"children":6608},{"class":442,"line":443},[6609,6614,6618,6623,6628,6632,6636],{"type":404,"tag":440,"props":6610,"children":6611},{"style":686},[6612],{"type":410,"value":6613},"eval",{"type":404,"tag":440,"props":6615,"children":6616},{"style":674},[6617],{"type":410,"value":694},{"type":404,"tag":440,"props":6619,"children":6620},{"style":453},[6621],{"type":410,"value":6622},"`",{"type":404,"tag":440,"props":6624,"children":6625},{"style":459},[6626],{"type":410,"value":6627},"if (true) ; else ;",{"type":404,"tag":440,"props":6629,"children":6630},{"style":453},[6631],{"type":410,"value":6622},{"type":404,"tag":440,"props":6633,"children":6634},{"style":674},[6635],{"type":410,"value":724},{"type":404,"tag":440,"props":6637,"children":6638},{"style":727},[6639],{"type":410,"value":963},{"type":404,"tag":412,"props":6641,"children":6643},{"id":6642},"组织形式分块的方法",[6644],{"type":410,"value":6642},{"type":404,"tag":418,"props":6646,"children":6647},{},[6648],{"type":410,"value":6649},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":404,"tag":418,"props":6651,"children":6652},{},[6653],{"type":410,"value":6654},"数据声明语句中存在块级作用域，如：",{"type":404,"tag":429,"props":6656,"children":6658},{"className":662,"code":6657,"language":664,"meta":398,"style":398},"const x = 1, y = x\nconsole.log(y) // 1\n",[6659],{"type":404,"tag":436,"props":6660,"children":6661},{"__ignoreMap":398},[6662,6697],{"type":404,"tag":440,"props":6663,"children":6664},{"class":442,"line":443},[6665,6669,6673,6677,6681,6685,6689,6693],{"type":404,"tag":440,"props":6666,"children":6667},{"style":997},[6668],{"type":410,"value":5788},{"type":404,"tag":440,"props":6670,"children":6671},{"style":1431},[6672],{"type":410,"value":6473},{"type":404,"tag":440,"props":6674,"children":6675},{"style":470},[6676],{"type":410,"value":1361},{"type":404,"tag":440,"props":6678,"children":6679},{"style":702},[6680],{"type":410,"value":1807},{"type":404,"tag":440,"props":6682,"children":6683},{"style":680},[6684],{"type":410,"value":710},{"type":404,"tag":440,"props":6686,"children":6687},{"style":1431},[6688],{"type":410,"value":6502},{"type":404,"tag":440,"props":6690,"children":6691},{"style":470},[6692],{"type":410,"value":1361},{"type":404,"tag":440,"props":6694,"children":6695},{"style":674},[6696],{"type":410,"value":1005},{"type":404,"tag":440,"props":6698,"children":6699},{"class":442,"line":733},[6700,6704,6708,6712,6717],{"type":404,"tag":440,"props":6701,"children":6702},{"style":674},[6703],{"type":410,"value":5017},{"type":404,"tag":440,"props":6705,"children":6706},{"style":680},[6707],{"type":410,"value":683},{"type":404,"tag":440,"props":6709,"children":6710},{"style":686},[6711],{"type":410,"value":1392},{"type":404,"tag":440,"props":6713,"children":6714},{"style":674},[6715],{"type":410,"value":6716},"(y) ",{"type":404,"tag":440,"props":6718,"children":6719},{"style":727},[6720],{"type":410,"value":6721},"// 1\n",{"type":404,"tag":418,"props":6723,"children":6724},{},[6725],{"type":410,"value":6726},"表达式级别的作用域只存在于 eval 调用中。",{"type":404,"tag":418,"props":6728,"children":6729},{},[6730],{"type":410,"value":6731},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":404,"tag":429,"props":6733,"children":6735},{"className":662,"code":6734,"language":664,"meta":398,"style":398},"if (1) let x = 1\n",[6736],{"type":404,"tag":436,"props":6737,"children":6738},{"__ignoreMap":398},[6739],{"type":404,"tag":440,"props":6740,"children":6741},{"class":442,"line":443},[6742,6747,6751,6755,6759,6763,6767,6771],{"type":404,"tag":440,"props":6743,"children":6744},{"style":1701},[6745],{"type":410,"value":6746},"if",{"type":404,"tag":440,"props":6748,"children":6749},{"style":674},[6750],{"type":410,"value":1930},{"type":404,"tag":440,"props":6752,"children":6753},{"style":702},[6754],{"type":410,"value":509},{"type":404,"tag":440,"props":6756,"children":6757},{"style":674},[6758],{"type":410,"value":724},{"type":404,"tag":440,"props":6760,"children":6761},{"style":997},[6762],{"type":410,"value":1000},{"type":404,"tag":440,"props":6764,"children":6765},{"style":674},[6766],{"type":410,"value":958},{"type":404,"tag":440,"props":6768,"children":6769},{"style":470},[6770],{"type":410,"value":1872},{"type":404,"tag":440,"props":6772,"children":6773},{"style":702},[6774],{"type":410,"value":6775}," 1\n",{"type":404,"tag":418,"props":6777,"children":6778},{},[6779],{"type":410,"value":6780},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":404,"tag":418,"props":6782,"children":6783},{},[6784],{"type":410,"value":6785},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":404,"tag":418,"props":6787,"children":6788},{},[6789],{"type":410,"value":6790},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":404,"tag":518,"props":6792,"children":6793},{},[6794,6799,6804],{"type":404,"tag":522,"props":6795,"children":6796},{},[6797],{"type":410,"value":6798},"词法作用域互不相交。",{"type":404,"tag":522,"props":6800,"children":6801},{},[6802],{"type":410,"value":6803},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":404,"tag":522,"props":6805,"children":6806},{},[6807],{"type":410,"value":6808},"高级别流程变更语句可以跨越低级别的作用域。",{"type":404,"tag":418,"props":6810,"children":6811},{},[6812],{"type":410,"value":6813},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":404,"tag":412,"props":6815,"children":6817},{"id":6816},"层次结构程序设计",[6818],{"type":410,"value":6816},{"type":404,"tag":418,"props":6820,"children":6821},{},[6822],{"type":410,"value":6823},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":404,"tag":429,"props":6825,"children":6827},{"className":662,"code":6826,"language":664,"meta":398,"style":398},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6828],{"type":404,"tag":436,"props":6829,"children":6830},{"__ignoreMap":398},[6831,6870],{"type":404,"tag":440,"props":6832,"children":6833},{"class":442,"line":443},[6834,6838,6843,6847,6852,6856,6861,6865],{"type":404,"tag":440,"props":6835,"children":6836},{"style":997},[6837],{"type":410,"value":5788},{"type":404,"tag":440,"props":6839,"children":6840},{"style":1431},[6841],{"type":410,"value":6842}," method",{"type":404,"tag":440,"props":6844,"children":6845},{"style":470},[6846],{"type":410,"value":1361},{"type":404,"tag":440,"props":6848,"children":6849},{"style":674},[6850],{"type":410,"value":6851}," obj[Object",{"type":404,"tag":440,"props":6853,"children":6854},{"style":680},[6855],{"type":410,"value":683},{"type":404,"tag":440,"props":6857,"children":6858},{"style":674},[6859],{"type":410,"value":6860},"getPropertySymbols[",{"type":404,"tag":440,"props":6862,"children":6863},{"style":702},[6864],{"type":410,"value":705},{"type":404,"tag":440,"props":6866,"children":6867},{"style":674},[6868],{"type":410,"value":6869},"]]\n",{"type":404,"tag":440,"props":6871,"children":6872},{"class":442,"line":733},[6873,6877,6881,6886],{"type":404,"tag":440,"props":6874,"children":6875},{"style":674},[6876],{"type":410,"value":3751},{"type":404,"tag":440,"props":6878,"children":6879},{"style":680},[6880],{"type":410,"value":683},{"type":404,"tag":440,"props":6882,"children":6883},{"style":686},[6884],{"type":410,"value":6885},"call",{"type":404,"tag":440,"props":6887,"children":6888},{"style":674},[6889],{"type":410,"value":6890},"(obj)\n",{"type":404,"tag":418,"props":6892,"children":6893},{},[6894],{"type":410,"value":6895},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":404,"tag":412,"props":6897,"children":6899},{"id":6898},"变量作用域",[6900],{"type":410,"value":6898},{"type":404,"tag":418,"props":6902,"children":6903},{},[6904],{"type":410,"value":6905},"变量作用域有三个特殊之处：",{"type":404,"tag":518,"props":6907,"children":6908},{},[6909,6914,6919],{"type":404,"tag":522,"props":6910,"children":6911},{},[6912],{"type":410,"value":6913},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":404,"tag":522,"props":6915,"children":6916},{},[6917],{"type":410,"value":6918},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":404,"tag":522,"props":6920,"children":6921},{},[6922],{"type":410,"value":6923},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":404,"tag":418,"props":6925,"children":6926},{},[6927],{"type":410,"value":6928},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":404,"tag":418,"props":6930,"children":6931},{},[6932],{"type":410,"value":6933},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":404,"tag":412,"props":6935,"children":6937},{"id":6936},"私有属性和私有字段的纷争",[6938],{"type":410,"value":6936},{"type":404,"tag":418,"props":6940,"children":6941},{},[6942],{"type":410,"value":6943},"(_　_)。゜zｚＺ",{"type":404,"tag":405,"props":6945,"children":6947},{"id":6946},"函数式语言特性",[6948],{"type":410,"value":6946},{"type":404,"tag":412,"props":6950,"children":6952},{"id":6951},"概述-1",[6953],{"type":410,"value":6050},{"type":404,"tag":418,"props":6955,"children":6956},{},[6957],{"type":410,"value":6958},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":404,"tag":418,"props":6960,"children":6961},{},[6962],{"type":410,"value":6963},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":404,"tag":412,"props":6965,"children":6967},{"id":6966},"js中的函数",[6968],{"type":410,"value":6969},"JS中的函数",{"type":404,"tag":418,"props":6971,"children":6972},{},[6973],{"type":410,"value":6974},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":404,"tag":518,"props":6976,"children":6977},{},[6978,6983,6988],{"type":404,"tag":522,"props":6979,"children":6980},{},[6981],{"type":410,"value":6982},"无法显式使用“use strict”切换到严格模式。",{"type":404,"tag":522,"props":6984,"children":6985},{},[6986],{"type":410,"value":6987},"不接受重名参数。",{"type":404,"tag":522,"props":6989,"children":6990},{},[6991],{"type":410,"value":6992},"形参和 arguments 之间将解除绑定关系。",{"type":404,"tag":418,"props":6994,"children":6995},{},[6996],{"type":410,"value":6997},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":404,"tag":429,"props":6999,"children":7001},{"className":662,"code":7000,"language":664,"meta":398,"style":398},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[7002],{"type":404,"tag":436,"props":7003,"children":7004},{"__ignoreMap":398},[7005,7049,7102,7109],{"type":404,"tag":440,"props":7006,"children":7007},{"class":442,"line":443},[7008,7012,7016,7020,7024,7028,7033,7037,7041,7045],{"type":404,"tag":440,"props":7009,"children":7010},{"style":997},[7011],{"type":410,"value":1323},{"type":404,"tag":440,"props":7013,"children":7014},{"style":686},[7015],{"type":410,"value":2023},{"type":404,"tag":440,"props":7017,"children":7018},{"style":680},[7019],{"type":410,"value":694},{"type":404,"tag":440,"props":7021,"children":7022},{"style":1624},[7023],{"type":410,"value":501},{"type":404,"tag":440,"props":7025,"children":7026},{"style":680},[7027],{"type":410,"value":710},{"type":404,"tag":440,"props":7029,"children":7030},{"style":1624},[7031],{"type":410,"value":7032}," b",{"type":404,"tag":440,"props":7034,"children":7035},{"style":470},[7036],{"type":410,"value":1361},{"type":404,"tag":440,"props":7038,"children":7039},{"style":702},[7040],{"type":410,"value":1807},{"type":404,"tag":440,"props":7042,"children":7043},{"style":680},[7044],{"type":410,"value":1632},{"type":404,"tag":440,"props":7046,"children":7047},{"style":680},[7048],{"type":410,"value":1338},{"type":404,"tag":440,"props":7050,"children":7051},{"class":442,"line":733},[7052,7056,7060,7064,7068,7072,7076,7081,7085,7090,7094,7098],{"type":404,"tag":440,"props":7053,"children":7054},{"style":674},[7055],{"type":410,"value":1383},{"type":404,"tag":440,"props":7057,"children":7058},{"style":680},[7059],{"type":410,"value":683},{"type":404,"tag":440,"props":7061,"children":7062},{"style":686},[7063],{"type":410,"value":1392},{"type":404,"tag":440,"props":7065,"children":7066},{"style":1395},[7067],{"type":410,"value":694},{"type":404,"tag":440,"props":7069,"children":7070},{"style":674},[7071],{"type":410,"value":1723},{"type":404,"tag":440,"props":7073,"children":7074},{"style":680},[7075],{"type":410,"value":683},{"type":404,"tag":440,"props":7077,"children":7078},{"style":1431},[7079],{"type":410,"value":7080},"length",{"type":404,"tag":440,"props":7082,"children":7083},{"style":680},[7084],{"type":410,"value":710},{"type":404,"tag":440,"props":7086,"children":7087},{"style":4033},[7088],{"type":410,"value":7089}," arguments",{"type":404,"tag":440,"props":7091,"children":7092},{"style":680},[7093],{"type":410,"value":683},{"type":404,"tag":440,"props":7095,"children":7096},{"style":1431},[7097],{"type":410,"value":7080},{"type":404,"tag":440,"props":7099,"children":7100},{"style":1395},[7101],{"type":410,"value":1415},{"type":404,"tag":440,"props":7103,"children":7104},{"class":442,"line":1377},[7105],{"type":404,"tag":440,"props":7106,"children":7107},{"style":680},[7108],{"type":410,"value":1424},{"type":404,"tag":440,"props":7110,"children":7111},{"class":442,"line":1418},[7112,7116,7120,7124,7128,7133,7137],{"type":404,"tag":440,"props":7113,"children":7114},{"style":686},[7115],{"type":410,"value":1723},{"type":404,"tag":440,"props":7117,"children":7118},{"style":674},[7119],{"type":410,"value":694},{"type":404,"tag":440,"props":7121,"children":7122},{"style":702},[7123],{"type":410,"value":509},{"type":404,"tag":440,"props":7125,"children":7126},{"style":680},[7127],{"type":410,"value":710},{"type":404,"tag":440,"props":7129,"children":7130},{"style":702},[7131],{"type":410,"value":7132}," 2",{"type":404,"tag":440,"props":7134,"children":7135},{"style":674},[7136],{"type":410,"value":724},{"type":404,"tag":440,"props":7138,"children":7139},{"style":727},[7140],{"type":410,"value":7141},"// 1，2\n",{"type":404,"tag":418,"props":7143,"children":7144},{},[7145,7147,7158],{"type":410,"value":7146},"表达式最后返回的是值而不是引用",{"type":404,"tag":497,"props":7148,"children":7149},{},[7150],{"type":404,"tag":501,"props":7151,"children":7155},{"href":7152,"ariaDescribedBy":7153,"dataFootnoteRef":398,"id":7154},"#user-content-fn-reference",[505],"user-content-fnref-reference",[7156],{"type":410,"value":7157},"6",{"type":410,"value":7159},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":404,"tag":429,"props":7161,"children":7163},{"className":662,"code":7162,"language":664,"meta":398,"style":398},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7164],{"type":404,"tag":436,"props":7165,"children":7166},{"__ignoreMap":398},[7167,7192,7211,7232,7248,7285,7292,7299,7336],{"type":404,"tag":440,"props":7168,"children":7169},{"class":442,"line":443},[7170,7175,7179,7184,7188],{"type":404,"tag":440,"props":7171,"children":7172},{"style":674},[7173],{"type":410,"value":7174},"window",{"type":404,"tag":440,"props":7176,"children":7177},{"style":680},[7178],{"type":410,"value":683},{"type":404,"tag":440,"props":7180,"children":7181},{"style":674},[7182],{"type":410,"value":7183},"x ",{"type":404,"tag":440,"props":7185,"children":7186},{"style":470},[7187],{"type":410,"value":1872},{"type":404,"tag":440,"props":7189,"children":7190},{"style":702},[7191],{"type":410,"value":6775},{"type":404,"tag":440,"props":7193,"children":7194},{"class":442,"line":733},[7195,7199,7203,7207],{"type":404,"tag":440,"props":7196,"children":7197},{"style":997},[7198],{"type":410,"value":5788},{"type":404,"tag":440,"props":7200,"children":7201},{"style":1431},[7202],{"type":410,"value":3221},{"type":404,"tag":440,"props":7204,"children":7205},{"style":470},[7206],{"type":410,"value":1361},{"type":404,"tag":440,"props":7208,"children":7209},{"style":680},[7210],{"type":410,"value":1338},{"type":404,"tag":440,"props":7212,"children":7213},{"class":442,"line":1377},[7214,7219,7223,7227],{"type":404,"tag":440,"props":7215,"children":7216},{"style":1395},[7217],{"type":410,"value":7218},"  x",{"type":404,"tag":440,"props":7220,"children":7221},{"style":680},[7222],{"type":410,"value":1857},{"type":404,"tag":440,"props":7224,"children":7225},{"style":702},[7226],{"type":410,"value":7132},{"type":404,"tag":440,"props":7228,"children":7229},{"style":680},[7230],{"type":410,"value":7231},",\n",{"type":404,"tag":440,"props":7233,"children":7234},{"class":442,"line":1418},[7235,7240,7244],{"type":404,"tag":440,"props":7236,"children":7237},{"style":2657},[7238],{"type":410,"value":7239},"  b",{"type":404,"tag":440,"props":7241,"children":7242},{"style":680},[7243],{"type":410,"value":1333},{"type":404,"tag":440,"props":7245,"children":7246},{"style":680},[7247],{"type":410,"value":1338},{"type":404,"tag":440,"props":7249,"children":7250},{"class":442,"line":1427},[7251,7256,7260,7264,7268,7273,7277,7281],{"type":404,"tag":440,"props":7252,"children":7253},{"style":674},[7254],{"type":410,"value":7255},"    console",{"type":404,"tag":440,"props":7257,"children":7258},{"style":680},[7259],{"type":410,"value":683},{"type":404,"tag":440,"props":7261,"children":7262},{"style":686},[7263],{"type":410,"value":1392},{"type":404,"tag":440,"props":7265,"children":7266},{"style":1395},[7267],{"type":410,"value":694},{"type":404,"tag":440,"props":7269,"children":7270},{"style":1344},[7271],{"type":410,"value":7272},"this",{"type":404,"tag":440,"props":7274,"children":7275},{"style":680},[7276],{"type":410,"value":683},{"type":404,"tag":440,"props":7278,"children":7279},{"style":674},[7280],{"type":410,"value":2668},{"type":404,"tag":440,"props":7282,"children":7283},{"style":1395},[7284],{"type":410,"value":1415},{"type":404,"tag":440,"props":7286,"children":7287},{"class":442,"line":1462},[7288],{"type":404,"tag":440,"props":7289,"children":7290},{"style":680},[7291],{"type":410,"value":2077},{"type":404,"tag":440,"props":7293,"children":7294},{"class":442,"line":1499},[7295],{"type":404,"tag":440,"props":7296,"children":7297},{"style":680},[7298],{"type":410,"value":1424},{"type":404,"tag":440,"props":7300,"children":7301},{"class":442,"line":1507},[7302,7306,7310,7314,7319,7323,7327,7331],{"type":404,"tag":440,"props":7303,"children":7304},{"style":674},[7305],{"type":410,"value":5017},{"type":404,"tag":440,"props":7307,"children":7308},{"style":680},[7309],{"type":410,"value":683},{"type":404,"tag":440,"props":7311,"children":7312},{"style":686},[7313],{"type":410,"value":1392},{"type":404,"tag":440,"props":7315,"children":7316},{"style":674},[7317],{"type":410,"value":7318},"(a",{"type":404,"tag":440,"props":7320,"children":7321},{"style":680},[7322],{"type":410,"value":683},{"type":404,"tag":440,"props":7324,"children":7325},{"style":686},[7326],{"type":410,"value":1356},{"type":404,"tag":440,"props":7328,"children":7329},{"style":674},[7330],{"type":410,"value":812},{"type":404,"tag":440,"props":7332,"children":7333},{"style":727},[7334],{"type":410,"value":7335},"// 2\n",{"type":404,"tag":440,"props":7337,"children":7338},{"class":442,"line":1534},[7339,7343,7347,7351,7356,7360,7364,7368,7372,7377],{"type":404,"tag":440,"props":7340,"children":7341},{"style":674},[7342],{"type":410,"value":5017},{"type":404,"tag":440,"props":7344,"children":7345},{"style":680},[7346],{"type":410,"value":683},{"type":404,"tag":440,"props":7348,"children":7349},{"style":686},[7350],{"type":410,"value":1392},{"type":404,"tag":440,"props":7352,"children":7353},{"style":674},[7354],{"type":410,"value":7355},"((",{"type":404,"tag":440,"props":7357,"children":7358},{"style":702},[7359],{"type":410,"value":705},{"type":404,"tag":440,"props":7361,"children":7362},{"style":680},[7363],{"type":410,"value":710},{"type":404,"tag":440,"props":7365,"children":7366},{"style":674},[7367],{"type":410,"value":3221},{"type":404,"tag":440,"props":7369,"children":7370},{"style":680},[7371],{"type":410,"value":683},{"type":404,"tag":440,"props":7373,"children":7374},{"style":674},[7375],{"type":410,"value":7376},"b)()) ",{"type":404,"tag":440,"props":7378,"children":7379},{"style":727},[7380],{"type":410,"value":6721},{"type":404,"tag":418,"props":7382,"children":7383},{},[7384],{"type":410,"value":7385},"具名函数在表达式中时不会声明标识符。",{"type":404,"tag":418,"props":7387,"children":7388},{},[7389],{"type":410,"value":7390},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":404,"tag":429,"props":7392,"children":7394},{"className":662,"code":7393,"language":664,"meta":398,"style":398},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7395],{"type":404,"tag":436,"props":7396,"children":7397},{"__ignoreMap":398},[7398,7417,7445,7460,7467,7495],{"type":404,"tag":440,"props":7399,"children":7400},{"class":442,"line":443},[7401,7405,7409,7413],{"type":404,"tag":440,"props":7402,"children":7403},{"style":997},[7404],{"type":410,"value":5788},{"type":404,"tag":440,"props":7406,"children":7407},{"style":1431},[7408],{"type":410,"value":3221},{"type":404,"tag":440,"props":7410,"children":7411},{"style":470},[7412],{"type":410,"value":1361},{"type":404,"tag":440,"props":7414,"children":7415},{"style":680},[7416],{"type":410,"value":1338},{"type":404,"tag":440,"props":7418,"children":7419},{"class":442,"line":733},[7420,7424,7428,7432,7436,7440],{"type":404,"tag":440,"props":7421,"children":7422},{"style":686},[7423],{"type":410,"value":7239},{"type":404,"tag":440,"props":7425,"children":7426},{"style":680},[7427],{"type":410,"value":1857},{"type":404,"tag":440,"props":7429,"children":7430},{"style":997},[7431],{"type":410,"value":1451},{"type":404,"tag":440,"props":7433,"children":7434},{"style":686},[7435],{"type":410,"value":2023},{"type":404,"tag":440,"props":7437,"children":7438},{"style":680},[7439],{"type":410,"value":1046},{"type":404,"tag":440,"props":7441,"children":7442},{"style":680},[7443],{"type":410,"value":7444}," {},\n",{"type":404,"tag":440,"props":7446,"children":7447},{"class":442,"line":1377},[7448,7452,7456],{"type":404,"tag":440,"props":7449,"children":7450},{"style":2657},[7451],{"type":410,"value":2771},{"type":404,"tag":440,"props":7453,"children":7454},{"style":680},[7455],{"type":410,"value":1046},{"type":404,"tag":440,"props":7457,"children":7458},{"style":680},[7459],{"type":410,"value":3129},{"type":404,"tag":440,"props":7461,"children":7462},{"class":442,"line":1418},[7463],{"type":404,"tag":440,"props":7464,"children":7465},{"style":680},[7466],{"type":410,"value":1424},{"type":404,"tag":440,"props":7468,"children":7469},{"class":442,"line":1427},[7470,7474,7478,7482,7486,7490],{"type":404,"tag":440,"props":7471,"children":7472},{"style":470},[7473],{"type":410,"value":1513},{"type":404,"tag":440,"props":7475,"children":7476},{"style":674},[7477],{"type":410,"value":3221},{"type":404,"tag":440,"props":7479,"children":7480},{"style":680},[7481],{"type":410,"value":683},{"type":404,"tag":440,"props":7483,"children":7484},{"style":686},[7485],{"type":410,"value":1356},{"type":404,"tag":440,"props":7487,"children":7488},{"style":674},[7489],{"type":410,"value":828},{"type":404,"tag":440,"props":7491,"children":7492},{"style":727},[7493],{"type":410,"value":7494},"// {}\n",{"type":404,"tag":440,"props":7496,"children":7497},{"class":442,"line":1462},[7498,7502,7506,7510,7514,7518],{"type":404,"tag":440,"props":7499,"children":7500},{"style":470},[7501],{"type":410,"value":1513},{"type":404,"tag":440,"props":7503,"children":7504},{"style":674},[7505],{"type":410,"value":3221},{"type":404,"tag":440,"props":7507,"children":7508},{"style":680},[7509],{"type":410,"value":683},{"type":404,"tag":440,"props":7511,"children":7512},{"style":686},[7513],{"type":410,"value":1723},{"type":404,"tag":440,"props":7515,"children":7516},{"style":674},[7517],{"type":410,"value":828},{"type":404,"tag":440,"props":7519,"children":7520},{"style":727},[7521],{"type":410,"value":3238},{"type":404,"tag":418,"props":7523,"children":7524},{},[7525],{"type":410,"value":7526},"方法的特性总结以下三点：",{"type":404,"tag":518,"props":7528,"children":7529},{},[7530,7535,7540],{"type":404,"tag":522,"props":7531,"children":7532},{},[7533],{"type":410,"value":7534},"不能作为构造器。",{"type":404,"tag":522,"props":7536,"children":7537},{},[7538],{"type":410,"value":7539},"除了生成器方法，没有内部原型。",{"type":404,"tag":522,"props":7541,"children":7542},{},[7543],{"type":410,"value":7544},"方法不能具名。",{"type":404,"tag":418,"props":7546,"children":7547},{},[7548],{"type":410,"value":7549},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":404,"tag":429,"props":7551,"children":7553},{"className":662,"code":7552,"language":664,"meta":398,"style":398},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7554],{"type":404,"tag":436,"props":7555,"children":7556},{"__ignoreMap":398},[7557],{"type":404,"tag":440,"props":7558,"children":7559},{"class":442,"line":443},[7560,7564,7568,7572,7577,7581,7585,7589,7593],{"type":404,"tag":440,"props":7561,"children":7562},{"style":674},[7563],{"type":410,"value":677},{"type":404,"tag":440,"props":7565,"children":7566},{"style":680},[7567],{"type":410,"value":683},{"type":404,"tag":440,"props":7569,"children":7570},{"style":686},[7571],{"type":410,"value":3639},{"type":404,"tag":440,"props":7573,"children":7574},{"style":674},[7575],{"type":410,"value":7576},"(boundFn",{"type":404,"tag":440,"props":7578,"children":7579},{"style":680},[7580],{"type":410,"value":710},{"type":404,"tag":440,"props":7582,"children":7583},{"style":674},[7584],{"type":410,"value":4110},{"type":404,"tag":440,"props":7586,"children":7587},{"style":680},[7588],{"type":410,"value":683},{"type":404,"tag":440,"props":7590,"children":7591},{"style":686},[7592],{"type":410,"value":5525},{"type":404,"tag":440,"props":7594,"children":7595},{"style":674},[7596],{"type":410,"value":7597},"(targetFn))\n",{"type":404,"tag":418,"props":7599,"children":7600},{},[7601],{"type":410,"value":7602},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":404,"tag":429,"props":7604,"children":7606},{"className":662,"code":7605,"language":664,"meta":398,"style":398},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7607],{"type":404,"tag":436,"props":7608,"children":7609},{"__ignoreMap":398},[7610,7629,7672,7679],{"type":404,"tag":440,"props":7611,"children":7612},{"class":442,"line":443},[7613,7617,7621,7625],{"type":404,"tag":440,"props":7614,"children":7615},{"style":997},[7616],{"type":410,"value":1323},{"type":404,"tag":440,"props":7618,"children":7619},{"style":686},[7620],{"type":410,"value":3221},{"type":404,"tag":440,"props":7622,"children":7623},{"style":680},[7624],{"type":410,"value":1333},{"type":404,"tag":440,"props":7626,"children":7627},{"style":680},[7628],{"type":410,"value":1338},{"type":404,"tag":440,"props":7630,"children":7631},{"class":442,"line":733},[7632,7636,7640,7644,7648,7652,7656,7660,7664,7668],{"type":404,"tag":440,"props":7633,"children":7634},{"style":674},[7635],{"type":410,"value":1383},{"type":404,"tag":440,"props":7637,"children":7638},{"style":680},[7639],{"type":410,"value":683},{"type":404,"tag":440,"props":7641,"children":7642},{"style":686},[7643],{"type":410,"value":1392},{"type":404,"tag":440,"props":7645,"children":7646},{"style":1395},[7647],{"type":410,"value":694},{"type":404,"tag":440,"props":7649,"children":7650},{"style":470},[7651],{"type":410,"value":1513},{"type":404,"tag":440,"props":7653,"children":7654},{"style":680},[7655],{"type":410,"value":683},{"type":404,"tag":440,"props":7657,"children":7658},{"style":1431},[7659],{"type":410,"value":5652},{"type":404,"tag":440,"props":7661,"children":7662},{"style":470},[7663],{"type":410,"value":2004},{"type":404,"tag":440,"props":7665,"children":7666},{"style":674},[7667],{"type":410,"value":3221},{"type":404,"tag":440,"props":7669,"children":7670},{"style":1395},[7671],{"type":410,"value":1415},{"type":404,"tag":440,"props":7673,"children":7674},{"class":442,"line":1377},[7675],{"type":404,"tag":440,"props":7676,"children":7677},{"style":680},[7678],{"type":410,"value":1424},{"type":404,"tag":440,"props":7680,"children":7681},{"class":442,"line":1418},[7682,7686,7690,7694,7698,7702,7707,7711,7716,7721],{"type":404,"tag":440,"props":7683,"children":7684},{"style":674},[7685],{"type":410,"value":5017},{"type":404,"tag":440,"props":7687,"children":7688},{"style":680},[7689],{"type":410,"value":683},{"type":404,"tag":440,"props":7691,"children":7692},{"style":686},[7693],{"type":410,"value":1392},{"type":404,"tag":440,"props":7695,"children":7696},{"style":674},[7697],{"type":410,"value":694},{"type":404,"tag":440,"props":7699,"children":7700},{"style":470},[7701],{"type":410,"value":1513},{"type":404,"tag":440,"props":7703,"children":7704},{"style":674},[7705],{"type":410,"value":7706}," (a",{"type":404,"tag":440,"props":7708,"children":7709},{"style":680},[7710],{"type":410,"value":683},{"type":404,"tag":440,"props":7712,"children":7713},{"style":686},[7714],{"type":410,"value":7715},"bind",{"type":404,"tag":440,"props":7717,"children":7718},{"style":674},[7719],{"type":410,"value":7720},"())) ",{"type":404,"tag":440,"props":7722,"children":7723},{"style":727},[7724],{"type":410,"value":774},{"type":404,"tag":418,"props":7726,"children":7727},{},[7728],{"type":410,"value":7729},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":404,"tag":418,"props":7731,"children":7732},{},[7733],{"type":410,"value":7734},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":404,"tag":429,"props":7736,"children":7738},{"className":662,"code":7737,"language":664,"meta":398,"style":398},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7739],{"type":404,"tag":436,"props":7740,"children":7741},{"__ignoreMap":398},[7742,7761,7782,7807,7837,7869,7897,7923,7951,7967,8019,8027,8034,8057,8064,8071],{"type":404,"tag":440,"props":7743,"children":7744},{"class":442,"line":443},[7745,7749,7753,7757],{"type":404,"tag":440,"props":7746,"children":7747},{"style":997},[7748],{"type":410,"value":5788},{"type":404,"tag":440,"props":7750,"children":7751},{"style":1431},[7752],{"type":410,"value":2638},{"type":404,"tag":440,"props":7754,"children":7755},{"style":470},[7756],{"type":410,"value":1361},{"type":404,"tag":440,"props":7758,"children":7759},{"style":680},[7760],{"type":410,"value":1338},{"type":404,"tag":440,"props":7762,"children":7763},{"class":442,"line":733},[7764,7769,7773,7778],{"type":404,"tag":440,"props":7765,"children":7766},{"style":1395},[7767],{"type":410,"value":7768},"  step",{"type":404,"tag":440,"props":7770,"children":7771},{"style":680},[7772],{"type":410,"value":1857},{"type":404,"tag":440,"props":7774,"children":7775},{"style":702},[7776],{"type":410,"value":7777}," 0",{"type":404,"tag":440,"props":7779,"children":7780},{"style":680},[7781],{"type":410,"value":7231},{"type":404,"tag":440,"props":7783,"children":7784},{"class":442,"line":1377},[7785,7790,7794,7799,7803],{"type":404,"tag":440,"props":7786,"children":7787},{"style":2657},[7788],{"type":410,"value":7789},"  run",{"type":404,"tag":440,"props":7791,"children":7792},{"style":680},[7793],{"type":410,"value":1930},{"type":404,"tag":440,"props":7795,"children":7796},{"style":1624},[7797],{"type":410,"value":7798},"init",{"type":404,"tag":440,"props":7800,"children":7801},{"style":680},[7802],{"type":410,"value":1632},{"type":404,"tag":440,"props":7804,"children":7805},{"style":680},[7806],{"type":410,"value":1338},{"type":404,"tag":440,"props":7808,"children":7809},{"class":442,"line":1418},[7810,7815,7821,7825,7829,7833],{"type":404,"tag":440,"props":7811,"children":7812},{"style":997},[7813],{"type":410,"value":7814},"    const",{"type":404,"tag":440,"props":7816,"children":7818},{"style":7817},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7819],{"type":410,"value":7820}," exec",{"type":404,"tag":440,"props":7822,"children":7823},{"style":470},[7824],{"type":410,"value":1361},{"type":404,"tag":440,"props":7826,"children":7827},{"style":1624},[7828],{"type":410,"value":6473},{"type":404,"tag":440,"props":7830,"children":7831},{"style":997},[7832],{"type":410,"value":5724},{"type":404,"tag":440,"props":7834,"children":7835},{"style":680},[7836],{"type":410,"value":1338},{"type":404,"tag":440,"props":7838,"children":7839},{"class":442,"line":1427},[7840,7844,7848,7852,7857,7861,7865],{"type":404,"tag":440,"props":7841,"children":7842},{"style":1701},[7843],{"type":410,"value":2237},{"type":404,"tag":440,"props":7845,"children":7846},{"style":1395},[7847],{"type":410,"value":1930},{"type":404,"tag":440,"props":7849,"children":7850},{"style":674},[7851],{"type":410,"value":2668},{"type":404,"tag":440,"props":7853,"children":7854},{"style":470},[7855],{"type":410,"value":7856}," >",{"type":404,"tag":440,"props":7858,"children":7859},{"style":702},[7860],{"type":410,"value":7777},{"type":404,"tag":440,"props":7862,"children":7863},{"style":1395},[7864],{"type":410,"value":724},{"type":404,"tag":440,"props":7866,"children":7867},{"style":680},[7868],{"type":410,"value":1747},{"type":404,"tag":440,"props":7870,"children":7871},{"class":442,"line":1462},[7872,7877,7881,7885,7889,7893],{"type":404,"tag":440,"props":7873,"children":7874},{"style":674},[7875],{"type":410,"value":7876},"        console",{"type":404,"tag":440,"props":7878,"children":7879},{"style":680},[7880],{"type":410,"value":683},{"type":404,"tag":440,"props":7882,"children":7883},{"style":686},[7884],{"type":410,"value":1392},{"type":404,"tag":440,"props":7886,"children":7887},{"style":1395},[7888],{"type":410,"value":694},{"type":404,"tag":440,"props":7890,"children":7891},{"style":674},[7892],{"type":410,"value":2668},{"type":404,"tag":440,"props":7894,"children":7895},{"style":1395},[7896],{"type":410,"value":1415},{"type":404,"tag":440,"props":7898,"children":7899},{"class":442,"line":1499},[7900,7905,7909,7914,7919],{"type":404,"tag":440,"props":7901,"children":7902},{"style":1344},[7903],{"type":410,"value":7904},"        this",{"type":404,"tag":440,"props":7906,"children":7907},{"style":680},[7908],{"type":410,"value":683},{"type":404,"tag":440,"props":7910,"children":7911},{"style":674},[7912],{"type":410,"value":7913},"step",{"type":404,"tag":440,"props":7915,"children":7916},{"style":470},[7917],{"type":410,"value":7918}," +=",{"type":404,"tag":440,"props":7920,"children":7921},{"style":702},[7922],{"type":410,"value":6775},{"type":404,"tag":440,"props":7924,"children":7925},{"class":442,"line":1507},[7926,7931,7935,7939,7943,7947],{"type":404,"tag":440,"props":7927,"children":7928},{"style":686},[7929],{"type":410,"value":7930},"        exec",{"type":404,"tag":440,"props":7932,"children":7933},{"style":1395},[7934],{"type":410,"value":694},{"type":404,"tag":440,"props":7936,"children":7937},{"style":674},[7938],{"type":410,"value":2668},{"type":404,"tag":440,"props":7940,"children":7941},{"style":470},[7942],{"type":410,"value":715},{"type":404,"tag":440,"props":7944,"children":7945},{"style":702},[7946],{"type":410,"value":1807},{"type":404,"tag":440,"props":7948,"children":7949},{"style":1395},[7950],{"type":410,"value":1415},{"type":404,"tag":440,"props":7952,"children":7953},{"class":442,"line":1534},[7954,7959,7963],{"type":404,"tag":440,"props":7955,"children":7956},{"style":680},[7957],{"type":410,"value":7958},"      }",{"type":404,"tag":440,"props":7960,"children":7961},{"style":1701},[7962],{"type":410,"value":5926},{"type":404,"tag":440,"props":7964,"children":7965},{"style":680},[7966],{"type":410,"value":1338},{"type":404,"tag":440,"props":7968,"children":7969},{"class":442,"line":2110},[7970,7974,7978,7982,7986,7990,7995,7999,8003,8007,8011,8015],{"type":404,"tag":440,"props":7971,"children":7972},{"style":674},[7973],{"type":410,"value":7876},{"type":404,"tag":440,"props":7975,"children":7976},{"style":680},[7977],{"type":410,"value":683},{"type":404,"tag":440,"props":7979,"children":7980},{"style":686},[7981],{"type":410,"value":1392},{"type":404,"tag":440,"props":7983,"children":7984},{"style":1395},[7985],{"type":410,"value":694},{"type":404,"tag":440,"props":7987,"children":7988},{"style":453},[7989],{"type":410,"value":467},{"type":404,"tag":440,"props":7991,"children":7992},{"style":459},[7993],{"type":410,"value":7994},"steps: ",{"type":404,"tag":440,"props":7996,"children":7997},{"style":453},[7998],{"type":410,"value":467},{"type":404,"tag":440,"props":8000,"children":8001},{"style":680},[8002],{"type":410,"value":710},{"type":404,"tag":440,"props":8004,"children":8005},{"style":1344},[8006],{"type":410,"value":3789},{"type":404,"tag":440,"props":8008,"children":8009},{"style":680},[8010],{"type":410,"value":683},{"type":404,"tag":440,"props":8012,"children":8013},{"style":674},[8014],{"type":410,"value":7913},{"type":404,"tag":440,"props":8016,"children":8017},{"style":1395},[8018],{"type":410,"value":1415},{"type":404,"tag":440,"props":8020,"children":8021},{"class":442,"line":2170},[8022],{"type":404,"tag":440,"props":8023,"children":8024},{"style":680},[8025],{"type":410,"value":8026},"      }\n",{"type":404,"tag":440,"props":8028,"children":8029},{"class":442,"line":2231},[8030],{"type":404,"tag":440,"props":8031,"children":8032},{"style":680},[8033],{"type":410,"value":2319},{"type":404,"tag":440,"props":8035,"children":8036},{"class":442,"line":2272},[8037,8041,8045,8049,8053],{"type":404,"tag":440,"props":8038,"children":8039},{"style":1701},[8040],{"type":410,"value":2735},{"type":404,"tag":440,"props":8042,"children":8043},{"style":686},[8044],{"type":410,"value":7820},{"type":404,"tag":440,"props":8046,"children":8047},{"style":1395},[8048],{"type":410,"value":694},{"type":404,"tag":440,"props":8050,"children":8051},{"style":674},[8052],{"type":410,"value":7798},{"type":404,"tag":440,"props":8054,"children":8055},{"style":1395},[8056],{"type":410,"value":1415},{"type":404,"tag":440,"props":8058,"children":8059},{"class":442,"line":2313},[8060],{"type":404,"tag":440,"props":8061,"children":8062},{"style":680},[8063],{"type":410,"value":2077},{"type":404,"tag":440,"props":8065,"children":8066},{"class":442,"line":2322},[8067],{"type":404,"tag":440,"props":8068,"children":8069},{"style":680},[8070],{"type":410,"value":1424},{"type":404,"tag":440,"props":8072,"children":8073},{"class":442,"line":2330},[8074,8079,8083,8088,8092,8097,8101],{"type":404,"tag":440,"props":8075,"children":8076},{"style":674},[8077],{"type":410,"value":8078},"obj",{"type":404,"tag":440,"props":8080,"children":8081},{"style":680},[8082],{"type":410,"value":683},{"type":404,"tag":440,"props":8084,"children":8085},{"style":686},[8086],{"type":410,"value":8087},"run",{"type":404,"tag":440,"props":8089,"children":8090},{"style":674},[8091],{"type":410,"value":694},{"type":404,"tag":440,"props":8093,"children":8094},{"style":702},[8095],{"type":410,"value":8096},"10",{"type":404,"tag":440,"props":8098,"children":8099},{"style":674},[8100],{"type":410,"value":724},{"type":404,"tag":440,"props":8102,"children":8103},{"style":727},[8104],{"type":410,"value":8105},"// steps: 10\n",{"type":404,"tag":412,"props":8107,"children":8109},{"id":8108},"函数的行为",[8110],{"type":410,"value":8108},{"type":404,"tag":418,"props":8112,"children":8113},{},[8114],{"type":410,"value":8115},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":404,"tag":418,"props":8117,"children":8118},{},[8119],{"type":410,"value":8120},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":404,"tag":418,"props":8122,"children":8123},{},[8124],{"type":410,"value":8125},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":404,"tag":418,"props":8127,"children":8128},{},[8129],{"type":410,"value":8130},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":404,"tag":429,"props":8132,"children":8134},{"className":662,"code":8133,"language":664,"meta":398,"style":398},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8135],{"type":404,"tag":436,"props":8136,"children":8137},{"__ignoreMap":398},[8138,8163,8175,8187,8199,8210,8227,8263,8270,8277,8301,8313,8360,8393,8438,8453,8489,8510,8518,8526,8535,8544],{"type":404,"tag":440,"props":8139,"children":8140},{"class":442,"line":443},[8141,8145,8150,8155,8159],{"type":404,"tag":440,"props":8142,"children":8143},{"style":997},[8144],{"type":410,"value":1323},{"type":404,"tag":440,"props":8146,"children":8147},{"style":470},[8148],{"type":410,"value":8149},"*",{"type":404,"tag":440,"props":8151,"children":8152},{"style":686},[8153],{"type":410,"value":8154}," GetThisDone",{"type":404,"tag":440,"props":8156,"children":8157},{"style":680},[8158],{"type":410,"value":1046},{"type":404,"tag":440,"props":8160,"children":8161},{"style":680},[8162],{"type":410,"value":1338},{"type":404,"tag":440,"props":8164,"children":8165},{"class":442,"line":733},[8166,8171],{"type":404,"tag":440,"props":8167,"children":8168},{"style":1701},[8169],{"type":410,"value":8170},"  try",{"type":404,"tag":440,"props":8172,"children":8173},{"style":680},[8174],{"type":410,"value":1338},{"type":404,"tag":440,"props":8176,"children":8177},{"class":442,"line":1377},[8178,8183],{"type":404,"tag":440,"props":8179,"children":8180},{"style":1701},[8181],{"type":410,"value":8182},"    yield",{"type":404,"tag":440,"props":8184,"children":8185},{"style":702},[8186],{"type":410,"value":6775},{"type":404,"tag":440,"props":8188,"children":8189},{"class":442,"line":1418},[8190,8194],{"type":404,"tag":440,"props":8191,"children":8192},{"style":1701},[8193],{"type":410,"value":8182},{"type":404,"tag":440,"props":8195,"children":8196},{"style":702},[8197],{"type":410,"value":8198}," 10\n",{"type":404,"tag":440,"props":8200,"children":8201},{"class":442,"line":1427},[8202,8206],{"type":404,"tag":440,"props":8203,"children":8204},{"style":1701},[8205],{"type":410,"value":8182},{"type":404,"tag":440,"props":8207,"children":8208},{"style":702},[8209],{"type":410,"value":6775},{"type":404,"tag":440,"props":8211,"children":8212},{"class":442,"line":1462},[8213,8218,8223],{"type":404,"tag":440,"props":8214,"children":8215},{"style":680},[8216],{"type":410,"value":8217},"  }",{"type":404,"tag":440,"props":8219,"children":8220},{"style":1701},[8221],{"type":410,"value":8222}," finally",{"type":404,"tag":440,"props":8224,"children":8225},{"style":680},[8226],{"type":410,"value":1338},{"type":404,"tag":440,"props":8228,"children":8229},{"class":442,"line":1499},[8230,8234,8238,8242,8246,8250,8255,8259],{"type":404,"tag":440,"props":8231,"children":8232},{"style":674},[8233],{"type":410,"value":7255},{"type":404,"tag":440,"props":8235,"children":8236},{"style":680},[8237],{"type":410,"value":683},{"type":404,"tag":440,"props":8239,"children":8240},{"style":686},[8241],{"type":410,"value":1392},{"type":404,"tag":440,"props":8243,"children":8244},{"style":1395},[8245],{"type":410,"value":694},{"type":404,"tag":440,"props":8247,"children":8248},{"style":453},[8249],{"type":410,"value":467},{"type":404,"tag":440,"props":8251,"children":8252},{"style":459},[8253],{"type":410,"value":8254},"done",{"type":404,"tag":440,"props":8256,"children":8257},{"style":453},[8258],{"type":410,"value":467},{"type":404,"tag":440,"props":8260,"children":8261},{"style":1395},[8262],{"type":410,"value":1415},{"type":404,"tag":440,"props":8264,"children":8265},{"class":442,"line":1507},[8266],{"type":404,"tag":440,"props":8267,"children":8268},{"style":680},[8269],{"type":410,"value":2077},{"type":404,"tag":440,"props":8271,"children":8272},{"class":442,"line":1534},[8273],{"type":404,"tag":440,"props":8274,"children":8275},{"style":680},[8276],{"type":410,"value":1424},{"type":404,"tag":440,"props":8278,"children":8279},{"class":442,"line":2110},[8280,8284,8289,8293,8297],{"type":404,"tag":440,"props":8281,"children":8282},{"style":997},[8283],{"type":410,"value":5788},{"type":404,"tag":440,"props":8285,"children":8286},{"style":1431},[8287],{"type":410,"value":8288}," get",{"type":404,"tag":440,"props":8290,"children":8291},{"style":470},[8292],{"type":410,"value":1361},{"type":404,"tag":440,"props":8294,"children":8295},{"style":686},[8296],{"type":410,"value":8154},{"type":404,"tag":440,"props":8298,"children":8299},{"style":674},[8300],{"type":410,"value":3338},{"type":404,"tag":440,"props":8302,"children":8303},{"class":442,"line":2170},[8304,8308],{"type":404,"tag":440,"props":8305,"children":8306},{"style":997},[8307],{"type":410,"value":1000},{"type":404,"tag":440,"props":8309,"children":8310},{"style":674},[8311],{"type":410,"value":8312}," val\n",{"type":404,"tag":440,"props":8314,"children":8315},{"class":442,"line":2231},[8316,8321,8326,8330,8334,8338,8343,8347,8351,8356],{"type":404,"tag":440,"props":8317,"children":8318},{"style":1701},[8319],{"type":410,"value":8320},"while",{"type":404,"tag":440,"props":8322,"children":8323},{"style":674},[8324],{"type":410,"value":8325}," (val ",{"type":404,"tag":440,"props":8327,"children":8328},{"style":470},[8329],{"type":410,"value":1872},{"type":404,"tag":440,"props":8331,"children":8332},{"style":674},[8333],{"type":410,"value":8288},{"type":404,"tag":440,"props":8335,"children":8336},{"style":680},[8337],{"type":410,"value":683},{"type":404,"tag":440,"props":8339,"children":8340},{"style":686},[8341],{"type":410,"value":8342},"next",{"type":404,"tag":440,"props":8344,"children":8345},{"style":674},[8346],{"type":410,"value":1046},{"type":404,"tag":440,"props":8348,"children":8349},{"style":680},[8350],{"type":410,"value":683},{"type":404,"tag":440,"props":8352,"children":8353},{"style":674},[8354],{"type":410,"value":8355},"value) ",{"type":404,"tag":440,"props":8357,"children":8358},{"style":680},[8359],{"type":410,"value":1747},{"type":404,"tag":440,"props":8361,"children":8362},{"class":442,"line":2272},[8363,8367,8371,8376,8380,8385,8389],{"type":404,"tag":440,"props":8364,"children":8365},{"style":1701},[8366],{"type":410,"value":6518},{"type":404,"tag":440,"props":8368,"children":8369},{"style":1395},[8370],{"type":410,"value":1930},{"type":404,"tag":440,"props":8372,"children":8373},{"style":674},[8374],{"type":410,"value":8375},"val",{"type":404,"tag":440,"props":8377,"children":8378},{"style":470},[8379],{"type":410,"value":1958},{"type":404,"tag":440,"props":8381,"children":8382},{"style":702},[8383],{"type":410,"value":8384}," 10",{"type":404,"tag":440,"props":8386,"children":8387},{"style":1395},[8388],{"type":410,"value":724},{"type":404,"tag":440,"props":8390,"children":8391},{"style":680},[8392],{"type":410,"value":1747},{"type":404,"tag":440,"props":8394,"children":8395},{"class":442,"line":2313},[8396,8400,8404,8408,8412,8416,8421,8425,8429,8434],{"type":404,"tag":440,"props":8397,"children":8398},{"style":674},[8399],{"type":410,"value":7255},{"type":404,"tag":440,"props":8401,"children":8402},{"style":680},[8403],{"type":410,"value":683},{"type":404,"tag":440,"props":8405,"children":8406},{"style":686},[8407],{"type":410,"value":1392},{"type":404,"tag":440,"props":8409,"children":8410},{"style":1395},[8411],{"type":410,"value":694},{"type":404,"tag":440,"props":8413,"children":8414},{"style":453},[8415],{"type":410,"value":467},{"type":404,"tag":440,"props":8417,"children":8418},{"style":459},[8419],{"type":410,"value":8420},"right val:",{"type":404,"tag":440,"props":8422,"children":8423},{"style":453},[8424],{"type":410,"value":467},{"type":404,"tag":440,"props":8426,"children":8427},{"style":680},[8428],{"type":410,"value":710},{"type":404,"tag":440,"props":8430,"children":8431},{"style":674},[8432],{"type":410,"value":8433}," val",{"type":404,"tag":440,"props":8435,"children":8436},{"style":1395},[8437],{"type":410,"value":1415},{"type":404,"tag":440,"props":8439,"children":8440},{"class":442,"line":2322},[8441,8445,8449],{"type":404,"tag":440,"props":8442,"children":8443},{"style":680},[8444],{"type":410,"value":8217},{"type":404,"tag":440,"props":8446,"children":8447},{"style":1701},[8448],{"type":410,"value":5926},{"type":404,"tag":440,"props":8450,"children":8451},{"style":680},[8452],{"type":410,"value":1338},{"type":404,"tag":440,"props":8454,"children":8455},{"class":442,"line":2330},[8456,8460,8464,8468,8472,8476,8481,8485],{"type":404,"tag":440,"props":8457,"children":8458},{"style":674},[8459],{"type":410,"value":7255},{"type":404,"tag":440,"props":8461,"children":8462},{"style":680},[8463],{"type":410,"value":683},{"type":404,"tag":440,"props":8465,"children":8466},{"style":686},[8467],{"type":410,"value":1392},{"type":404,"tag":440,"props":8469,"children":8470},{"style":1395},[8471],{"type":410,"value":694},{"type":404,"tag":440,"props":8473,"children":8474},{"style":453},[8475],{"type":410,"value":467},{"type":404,"tag":440,"props":8477,"children":8478},{"style":459},[8479],{"type":410,"value":8480},"wrong val",{"type":404,"tag":440,"props":8482,"children":8483},{"style":453},[8484],{"type":410,"value":467},{"type":404,"tag":440,"props":8486,"children":8487},{"style":1395},[8488],{"type":410,"value":1415},{"type":404,"tag":440,"props":8490,"children":8491},{"class":442,"line":5996},[8492,8497,8501,8506],{"type":404,"tag":440,"props":8493,"children":8494},{"style":674},[8495],{"type":410,"value":8496},"    get",{"type":404,"tag":440,"props":8498,"children":8499},{"style":680},[8500],{"type":410,"value":683},{"type":404,"tag":440,"props":8502,"children":8503},{"style":686},[8504],{"type":410,"value":8505},"return",{"type":404,"tag":440,"props":8507,"children":8508},{"style":1395},[8509],{"type":410,"value":3338},{"type":404,"tag":440,"props":8511,"children":8513},{"class":442,"line":8512},18,[8514],{"type":404,"tag":440,"props":8515,"children":8516},{"style":680},[8517],{"type":410,"value":2077},{"type":404,"tag":440,"props":8519,"children":8521},{"class":442,"line":8520},19,[8522],{"type":404,"tag":440,"props":8523,"children":8524},{"style":680},[8525],{"type":410,"value":1424},{"type":404,"tag":440,"props":8527,"children":8529},{"class":442,"line":8528},20,[8530],{"type":404,"tag":440,"props":8531,"children":8532},{"style":727},[8533],{"type":410,"value":8534},"// right val: 1\n",{"type":404,"tag":440,"props":8536,"children":8538},{"class":442,"line":8537},21,[8539],{"type":404,"tag":440,"props":8540,"children":8541},{"style":727},[8542],{"type":410,"value":8543},"// wrong val\n",{"type":404,"tag":440,"props":8545,"children":8547},{"class":442,"line":8546},22,[8548],{"type":404,"tag":440,"props":8549,"children":8550},{"style":727},[8551],{"type":410,"value":8552},"// done\n",{"type":404,"tag":412,"props":8554,"children":8556},{"id":8555},"闭包",[8557],{"type":410,"value":8555},{"type":404,"tag":418,"props":8559,"children":8560},{},[8561],{"type":410,"value":8562},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":404,"tag":418,"props":8564,"children":8565},{},[8566],{"type":410,"value":8567},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":404,"tag":518,"props":8569,"children":8570},{},[8571,8576,8581],{"type":404,"tag":522,"props":8572,"children":8573},{},[8574],{"type":410,"value":8575},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":404,"tag":522,"props":8577,"children":8578},{},[8579],{"type":410,"value":8580},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":404,"tag":522,"props":8582,"children":8583},{},[8584],{"type":410,"value":8585},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":404,"tag":418,"props":8587,"children":8588},{},[8589],{"type":410,"value":8590},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":404,"tag":429,"props":8592,"children":8594},{"className":662,"code":8593,"language":664,"meta":398,"style":398},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8595],{"type":404,"tag":436,"props":8596,"children":8597},{"__ignoreMap":398},[8598,8617,8632,8639,8650],{"type":404,"tag":440,"props":8599,"children":8600},{"class":442,"line":443},[8601,8605,8609,8613],{"type":404,"tag":440,"props":8602,"children":8603},{"style":997},[8604],{"type":410,"value":1323},{"type":404,"tag":440,"props":8606,"children":8607},{"style":686},[8608],{"type":410,"value":2023},{"type":404,"tag":440,"props":8610,"children":8611},{"style":680},[8612],{"type":410,"value":1333},{"type":404,"tag":440,"props":8614,"children":8615},{"style":680},[8616],{"type":410,"value":1338},{"type":404,"tag":440,"props":8618,"children":8619},{"class":442,"line":733},[8620,8624,8628],{"type":404,"tag":440,"props":8621,"children":8622},{"style":674},[8623],{"type":410,"value":2771},{"type":404,"tag":440,"props":8625,"children":8626},{"style":470},[8627],{"type":410,"value":1361},{"type":404,"tag":440,"props":8629,"children":8630},{"style":702},[8631],{"type":410,"value":6775},{"type":404,"tag":440,"props":8633,"children":8634},{"class":442,"line":1377},[8635],{"type":404,"tag":440,"props":8636,"children":8637},{"style":680},[8638],{"type":410,"value":1424},{"type":404,"tag":440,"props":8640,"children":8641},{"class":442,"line":1418},[8642,8646],{"type":404,"tag":440,"props":8643,"children":8644},{"style":686},[8645],{"type":410,"value":1723},{"type":404,"tag":440,"props":8647,"children":8648},{"style":674},[8649],{"type":410,"value":3338},{"type":404,"tag":440,"props":8651,"children":8652},{"class":442,"line":1427},[8653,8657,8661,8665,8669,8673,8678],{"type":404,"tag":440,"props":8654,"children":8655},{"style":674},[8656],{"type":410,"value":5017},{"type":404,"tag":440,"props":8658,"children":8659},{"style":680},[8660],{"type":410,"value":683},{"type":404,"tag":440,"props":8662,"children":8663},{"style":686},[8664],{"type":410,"value":1392},{"type":404,"tag":440,"props":8666,"children":8667},{"style":674},[8668],{"type":410,"value":694},{"type":404,"tag":440,"props":8670,"children":8671},{"style":470},[8672],{"type":410,"value":953},{"type":404,"tag":440,"props":8674,"children":8675},{"style":674},[8676],{"type":410,"value":8677}," test) ",{"type":404,"tag":440,"props":8679,"children":8680},{"style":727},[8681],{"type":410,"value":8682},"// number\n",{"type":404,"tag":418,"props":8684,"children":8685},{},[8686],{"type":410,"value":8687},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":404,"tag":418,"props":8689,"children":8690},{},[8691],{"type":410,"value":8692},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":404,"tag":429,"props":8694,"children":8696},{"className":662,"code":8695,"language":664,"meta":398,"style":398},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8697],{"type":404,"tag":436,"props":8698,"children":8699},{"__ignoreMap":398},[8700,8736,8756,8773,8793,8816,8832,8839],{"type":404,"tag":440,"props":8701,"children":8702},{"class":442,"line":443},[8703,8707,8711,8715,8719,8724,8728,8732],{"type":404,"tag":440,"props":8704,"children":8705},{"style":997},[8706],{"type":410,"value":1000},{"type":404,"tag":440,"props":8708,"children":8709},{"style":674},[8710],{"type":410,"value":3141},{"type":404,"tag":440,"props":8712,"children":8713},{"style":470},[8714],{"type":410,"value":1872},{"type":404,"tag":440,"props":8716,"children":8717},{"style":680},[8718],{"type":410,"value":1709},{"type":404,"tag":440,"props":8720,"children":8721},{"style":1395},[8722],{"type":410,"value":8723}," value",{"type":404,"tag":440,"props":8725,"children":8726},{"style":680},[8727],{"type":410,"value":1857},{"type":404,"tag":440,"props":8729,"children":8730},{"style":702},[8731],{"type":410,"value":509},{"type":404,"tag":440,"props":8733,"children":8734},{"style":680},[8735],{"type":410,"value":3168},{"type":404,"tag":440,"props":8737,"children":8738},{"class":442,"line":733},[8739,8743,8748,8752],{"type":404,"tag":440,"props":8740,"children":8741},{"style":997},[8742],{"type":410,"value":1000},{"type":404,"tag":440,"props":8744,"children":8745},{"style":674},[8746],{"type":410,"value":8747}," b ",{"type":404,"tag":440,"props":8749,"children":8750},{"style":470},[8751],{"type":410,"value":1872},{"type":404,"tag":440,"props":8753,"children":8754},{"style":702},[8755],{"type":410,"value":6775},{"type":404,"tag":440,"props":8757,"children":8758},{"class":442,"line":1377},[8759,8764,8769],{"type":404,"tag":440,"props":8760,"children":8761},{"style":1701},[8762],{"type":410,"value":8763},"with",{"type":404,"tag":440,"props":8765,"children":8766},{"style":674},[8767],{"type":410,"value":8768}," (a) ",{"type":404,"tag":440,"props":8770,"children":8771},{"style":680},[8772],{"type":410,"value":1747},{"type":404,"tag":440,"props":8774,"children":8775},{"class":442,"line":1418},[8776,8781,8785,8789],{"type":404,"tag":440,"props":8777,"children":8778},{"style":997},[8779],{"type":410,"value":8780}," var",{"type":404,"tag":440,"props":8782,"children":8783},{"style":674},[8784],{"type":410,"value":8723},{"type":404,"tag":440,"props":8786,"children":8787},{"style":470},[8788],{"type":410,"value":1361},{"type":404,"tag":440,"props":8790,"children":8791},{"style":702},[8792],{"type":410,"value":6351},{"type":404,"tag":440,"props":8794,"children":8795},{"class":442,"line":1427},[8796,8800,8804,8808,8812],{"type":404,"tag":440,"props":8797,"children":8798},{"style":674},[8799],{"type":410,"value":3221},{"type":404,"tag":440,"props":8801,"children":8802},{"style":680},[8803],{"type":410,"value":683},{"type":404,"tag":440,"props":8805,"children":8806},{"style":674},[8807],{"type":410,"value":1356},{"type":404,"tag":440,"props":8809,"children":8810},{"style":470},[8811],{"type":410,"value":1361},{"type":404,"tag":440,"props":8813,"children":8814},{"style":702},[8815],{"type":410,"value":6775},{"type":404,"tag":440,"props":8817,"children":8818},{"class":442,"line":1462},[8819,8823,8827],{"type":404,"tag":440,"props":8820,"children":8821},{"style":674},[8822],{"type":410,"value":7032},{"type":404,"tag":440,"props":8824,"children":8825},{"style":470},[8826],{"type":410,"value":1361},{"type":404,"tag":440,"props":8828,"children":8829},{"style":702},[8830],{"type":410,"value":8831}," 2\n",{"type":404,"tag":440,"props":8833,"children":8834},{"class":442,"line":1499},[8835],{"type":404,"tag":440,"props":8836,"children":8837},{"style":680},[8838],{"type":410,"value":1424},{"type":404,"tag":440,"props":8840,"children":8841},{"class":442,"line":1507},[8842,8846,8850,8854,8858,8862,8866,8870,8875],{"type":404,"tag":440,"props":8843,"children":8844},{"style":674},[8845],{"type":410,"value":5017},{"type":404,"tag":440,"props":8847,"children":8848},{"style":680},[8849],{"type":410,"value":683},{"type":404,"tag":440,"props":8851,"children":8852},{"style":686},[8853],{"type":410,"value":1392},{"type":404,"tag":440,"props":8855,"children":8856},{"style":674},[8857],{"type":410,"value":7318},{"type":404,"tag":440,"props":8859,"children":8860},{"style":680},[8861],{"type":410,"value":710},{"type":404,"tag":440,"props":8863,"children":8864},{"style":674},[8865],{"type":410,"value":7032},{"type":404,"tag":440,"props":8867,"children":8868},{"style":680},[8869],{"type":410,"value":710},{"type":404,"tag":440,"props":8871,"children":8872},{"style":674},[8873],{"type":410,"value":8874}," value) ",{"type":404,"tag":440,"props":8876,"children":8877},{"style":727},[8878],{"type":410,"value":8879},"// { value:100, b:2 }, 1, undefined\n",{"type":404,"tag":418,"props":8881,"children":8882},{},[8883],{"type":410,"value":8884},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":404,"tag":418,"props":8886,"children":8887},{},[8888],{"type":410,"value":8889},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":404,"tag":418,"props":8891,"children":8892},{},[8893],{"type":410,"value":8894},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":404,"tag":418,"props":8896,"children":8897},{},[8898],{"type":410,"value":8899},"闭包内标识符系统的优先级规则：",{"type":404,"tag":518,"props":8901,"children":8902},{},[8903,8908,8913],{"type":404,"tag":522,"props":8904,"children":8905},{},[8906],{"type":410,"value":8907},"内部函数声明 > 函数参数名列表",{"type":404,"tag":522,"props":8909,"children":8910},{},[8911],{"type":410,"value":8912},"参数中的 arguments 名字 > 函数的 arguments",{"type":404,"tag":522,"props":8914,"children":8915},{},[8916],{"type":410,"value":8917},"var 声明的名字如果已存在，则不再创建新变量",{"type":404,"tag":418,"props":8919,"children":8920},{},[8921],{"type":410,"value":8922},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":404,"tag":405,"props":8924,"children":8926},{"id":8925},"动态语言特性",[8927],{"type":410,"value":8925},{"type":404,"tag":412,"props":8929,"children":8931},{"id":8930},"概述-2",[8932],{"type":410,"value":6050},{"type":404,"tag":418,"props":8934,"children":8935},{},[8936],{"type":410,"value":8937},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":404,"tag":418,"props":8939,"children":8940},{},[8941],{"type":410,"value":8942},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":404,"tag":412,"props":8944,"children":8946},{"id":8945},"对象与值类型之间的转换",[8947],{"type":410,"value":8945},{"type":404,"tag":418,"props":8949,"children":8950},{},[8951],{"type":410,"value":8952},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":404,"tag":429,"props":8954,"children":8956},{"className":662,"code":8955,"language":664,"meta":398,"style":398},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8957],{"type":404,"tag":436,"props":8958,"children":8959},{"__ignoreMap":398},[8960,9008,9031,9039,9083,9090],{"type":404,"tag":440,"props":8961,"children":8962},{"class":442,"line":443},[8963,8967,8972,8976,8980,8984,8988,8992,8996,9000,9004],{"type":404,"tag":440,"props":8964,"children":8965},{"style":997},[8966],{"type":410,"value":2633},{"type":404,"tag":440,"props":8968,"children":8969},{"style":7817},[8970],{"type":410,"value":8971}," toString",{"type":404,"tag":440,"props":8973,"children":8974},{"style":470},[8975],{"type":410,"value":1361},{"type":404,"tag":440,"props":8977,"children":8978},{"style":680},[8979],{"type":410,"value":1333},{"type":404,"tag":440,"props":8981,"children":8982},{"style":997},[8983],{"type":410,"value":5724},{"type":404,"tag":440,"props":8985,"children":8986},{"style":674},[8987],{"type":410,"value":2040},{"type":404,"tag":440,"props":8989,"children":8990},{"style":680},[8991],{"type":410,"value":683},{"type":404,"tag":440,"props":8993,"children":8994},{"style":686},[8995],{"type":410,"value":1392},{"type":404,"tag":440,"props":8997,"children":8998},{"style":674},[8999],{"type":410,"value":694},{"type":404,"tag":440,"props":9001,"children":9002},{"style":702},[9003],{"type":410,"value":509},{"type":404,"tag":440,"props":9005,"children":9006},{"style":674},[9007],{"type":410,"value":1415},{"type":404,"tag":440,"props":9009,"children":9010},{"class":442,"line":733},[9011,9015,9019,9023,9027],{"type":404,"tag":440,"props":9012,"children":9013},{"style":1701},[9014],{"type":410,"value":8763},{"type":404,"tag":440,"props":9016,"children":9017},{"style":674},[9018],{"type":410,"value":1930},{"type":404,"tag":440,"props":9020,"children":9021},{"style":702},[9022],{"type":410,"value":509},{"type":404,"tag":440,"props":9024,"children":9025},{"style":674},[9026],{"type":410,"value":724},{"type":404,"tag":440,"props":9028,"children":9029},{"style":680},[9030],{"type":410,"value":1747},{"type":404,"tag":440,"props":9032,"children":9033},{"class":442,"line":1377},[9034],{"type":404,"tag":440,"props":9035,"children":9036},{"style":727},[9037],{"type":410,"value":9038},"  // equal to (1).toString = ...\n",{"type":404,"tag":440,"props":9040,"children":9041},{"class":442,"line":1418},[9042,9047,9051,9055,9059,9063,9067,9071,9075,9079],{"type":404,"tag":440,"props":9043,"children":9044},{"style":686},[9045],{"type":410,"value":9046},"  toString",{"type":404,"tag":440,"props":9048,"children":9049},{"style":470},[9050],{"type":410,"value":1361},{"type":404,"tag":440,"props":9052,"children":9053},{"style":680},[9054],{"type":410,"value":1333},{"type":404,"tag":440,"props":9056,"children":9057},{"style":997},[9058],{"type":410,"value":5724},{"type":404,"tag":440,"props":9060,"children":9061},{"style":674},[9062],{"type":410,"value":2040},{"type":404,"tag":440,"props":9064,"children":9065},{"style":680},[9066],{"type":410,"value":683},{"type":404,"tag":440,"props":9068,"children":9069},{"style":686},[9070],{"type":410,"value":1392},{"type":404,"tag":440,"props":9072,"children":9073},{"style":1395},[9074],{"type":410,"value":694},{"type":404,"tag":440,"props":9076,"children":9077},{"style":702},[9078],{"type":410,"value":537},{"type":404,"tag":440,"props":9080,"children":9081},{"style":1395},[9082],{"type":410,"value":1415},{"type":404,"tag":440,"props":9084,"children":9085},{"class":442,"line":1427},[9086],{"type":404,"tag":440,"props":9087,"children":9088},{"style":680},[9089],{"type":410,"value":1424},{"type":404,"tag":440,"props":9091,"children":9092},{"class":442,"line":1462},[9093,9097,9101,9105,9109,9114,9118],{"type":404,"tag":440,"props":9094,"children":9095},{"style":674},[9096],{"type":410,"value":5017},{"type":404,"tag":440,"props":9098,"children":9099},{"style":680},[9100],{"type":410,"value":683},{"type":404,"tag":440,"props":9102,"children":9103},{"style":686},[9104],{"type":410,"value":1392},{"type":404,"tag":440,"props":9106,"children":9107},{"style":674},[9108],{"type":410,"value":694},{"type":404,"tag":440,"props":9110,"children":9111},{"style":686},[9112],{"type":410,"value":9113},"toString",{"type":404,"tag":440,"props":9115,"children":9116},{"style":674},[9117],{"type":410,"value":812},{"type":404,"tag":440,"props":9119,"children":9120},{"style":727},[9121],{"type":410,"value":6721},{"type":404,"tag":418,"props":9123,"children":9124},{},[9125],{"type":410,"value":9126},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":404,"tag":418,"props":9128,"children":9129},{},[9130],{"type":410,"value":9131},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":404,"tag":429,"props":9133,"children":9135},{"className":662,"code":9134,"language":664,"meta":398,"style":398},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9136],{"type":404,"tag":436,"props":9137,"children":9138},{"__ignoreMap":398},[9139,9181,9224],{"type":404,"tag":440,"props":9140,"children":9141},{"class":442,"line":443},[9142,9147,9151,9155,9159,9164,9168,9172,9176],{"type":404,"tag":440,"props":9143,"children":9144},{"style":2820},[9145],{"type":410,"value":9146},"String",{"type":404,"tag":440,"props":9148,"children":9149},{"style":680},[9150],{"type":410,"value":683},{"type":404,"tag":440,"props":9152,"children":9153},{"style":1431},[9154],{"type":410,"value":2831},{"type":404,"tag":440,"props":9156,"children":9157},{"style":680},[9158],{"type":410,"value":683},{"type":404,"tag":440,"props":9160,"children":9161},{"style":686},[9162],{"type":410,"value":9163},"valueOf",{"type":404,"tag":440,"props":9165,"children":9166},{"style":470},[9167],{"type":410,"value":1361},{"type":404,"tag":440,"props":9169,"children":9170},{"style":680},[9171],{"type":410,"value":1333},{"type":404,"tag":440,"props":9173,"children":9174},{"style":997},[9175],{"type":410,"value":5724},{"type":404,"tag":440,"props":9177,"children":9178},{"style":702},[9179],{"type":410,"value":9180}," 0\n",{"type":404,"tag":440,"props":9182,"children":9183},{"class":442,"line":733},[9184,9188,9192,9196,9200,9204,9208,9212,9216,9220],{"type":404,"tag":440,"props":9185,"children":9186},{"style":674},[9187],{"type":410,"value":5017},{"type":404,"tag":440,"props":9189,"children":9190},{"style":680},[9191],{"type":410,"value":683},{"type":404,"tag":440,"props":9193,"children":9194},{"style":686},[9195],{"type":410,"value":1392},{"type":404,"tag":440,"props":9197,"children":9198},{"style":674},[9199],{"type":410,"value":694},{"type":404,"tag":440,"props":9201,"children":9202},{"style":470},[9203],{"type":410,"value":699},{"type":404,"tag":440,"props":9205,"children":9206},{"style":453},[9207],{"type":410,"value":467},{"type":404,"tag":440,"props":9209,"children":9210},{"style":459},[9211],{"type":410,"value":509},{"type":404,"tag":440,"props":9213,"children":9214},{"style":453},[9215],{"type":410,"value":467},{"type":404,"tag":440,"props":9217,"children":9218},{"style":674},[9219],{"type":410,"value":724},{"type":404,"tag":440,"props":9221,"children":9222},{"style":727},[9223],{"type":410,"value":6721},{"type":404,"tag":440,"props":9225,"children":9226},{"class":442,"line":1377},[9227,9231,9235,9239,9243,9248,9252,9256,9260,9264,9268,9273],{"type":404,"tag":440,"props":9228,"children":9229},{"style":674},[9230],{"type":410,"value":5017},{"type":404,"tag":440,"props":9232,"children":9233},{"style":680},[9234],{"type":410,"value":683},{"type":404,"tag":440,"props":9236,"children":9237},{"style":686},[9238],{"type":410,"value":1392},{"type":404,"tag":440,"props":9240,"children":9241},{"style":674},[9242],{"type":410,"value":694},{"type":404,"tag":440,"props":9244,"children":9245},{"style":470},[9246],{"type":410,"value":9247},"+new",{"type":404,"tag":440,"props":9249,"children":9250},{"style":686},[9251],{"type":410,"value":4110},{"type":404,"tag":440,"props":9253,"children":9254},{"style":674},[9255],{"type":410,"value":694},{"type":404,"tag":440,"props":9257,"children":9258},{"style":453},[9259],{"type":410,"value":467},{"type":404,"tag":440,"props":9261,"children":9262},{"style":459},[9263],{"type":410,"value":509},{"type":404,"tag":440,"props":9265,"children":9266},{"style":453},[9267],{"type":410,"value":467},{"type":404,"tag":440,"props":9269,"children":9270},{"style":674},[9271],{"type":410,"value":9272},")) ",{"type":404,"tag":440,"props":9274,"children":9275},{"style":727},[9276],{"type":410,"value":9277},"// 0\n",{"type":404,"tag":418,"props":9279,"children":9280},{},[9281],{"type":410,"value":9282},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":404,"tag":429,"props":9284,"children":9286},{"className":662,"code":9285,"language":664,"meta":398,"style":398},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9287],{"type":404,"tag":436,"props":9288,"children":9289},{"__ignoreMap":398},[9290,9327,9359,9391],{"type":404,"tag":440,"props":9291,"children":9292},{"class":442,"line":443},[9293,9297,9302,9306,9310,9314,9318,9323],{"type":404,"tag":440,"props":9294,"children":9295},{"style":997},[9296],{"type":410,"value":5788},{"type":404,"tag":440,"props":9298,"children":9299},{"style":1431},[9300],{"type":410,"value":9301}," f",{"type":404,"tag":440,"props":9303,"children":9304},{"style":470},[9305],{"type":410,"value":1361},{"type":404,"tag":440,"props":9307,"children":9308},{"style":470},[9309],{"type":410,"value":2840},{"type":404,"tag":440,"props":9311,"children":9312},{"style":686},[9313],{"type":410,"value":4110},{"type":404,"tag":440,"props":9315,"children":9316},{"style":674},[9317],{"type":410,"value":694},{"type":404,"tag":440,"props":9319,"children":9320},{"style":836},[9321],{"type":410,"value":9322},"false",{"type":404,"tag":440,"props":9324,"children":9325},{"style":674},[9326],{"type":410,"value":1415},{"type":404,"tag":440,"props":9328,"children":9329},{"class":442,"line":733},[9330,9334,9338,9342,9346,9350,9355],{"type":404,"tag":440,"props":9331,"children":9332},{"style":674},[9333],{"type":410,"value":5017},{"type":404,"tag":440,"props":9335,"children":9336},{"style":680},[9337],{"type":410,"value":683},{"type":404,"tag":440,"props":9339,"children":9340},{"style":686},[9341],{"type":410,"value":1392},{"type":404,"tag":440,"props":9343,"children":9344},{"style":674},[9345],{"type":410,"value":694},{"type":404,"tag":440,"props":9347,"children":9348},{"style":470},[9349],{"type":410,"value":699},{"type":404,"tag":440,"props":9351,"children":9352},{"style":674},[9353],{"type":410,"value":9354},"f) ",{"type":404,"tag":440,"props":9356,"children":9357},{"style":727},[9358],{"type":410,"value":9277},{"type":404,"tag":440,"props":9360,"children":9361},{"class":442,"line":1377},[9362,9366,9370,9374,9378,9383,9387],{"type":404,"tag":440,"props":9363,"children":9364},{"style":674},[9365],{"type":410,"value":5017},{"type":404,"tag":440,"props":9367,"children":9368},{"style":680},[9369],{"type":410,"value":683},{"type":404,"tag":440,"props":9371,"children":9372},{"style":686},[9373],{"type":410,"value":1392},{"type":404,"tag":440,"props":9375,"children":9376},{"style":674},[9377],{"type":410,"value":694},{"type":404,"tag":440,"props":9379,"children":9380},{"style":470},[9381],{"type":410,"value":9382},"!!",{"type":404,"tag":440,"props":9384,"children":9385},{"style":674},[9386],{"type":410,"value":9354},{"type":404,"tag":440,"props":9388,"children":9389},{"style":727},[9390],{"type":410,"value":774},{"type":404,"tag":440,"props":9392,"children":9393},{"class":442,"line":1418},[9394,9398,9402,9406,9410,9414,9419],{"type":404,"tag":440,"props":9395,"children":9396},{"style":674},[9397],{"type":410,"value":5017},{"type":404,"tag":440,"props":9399,"children":9400},{"style":680},[9401],{"type":410,"value":683},{"type":404,"tag":440,"props":9403,"children":9404},{"style":686},[9405],{"type":410,"value":1392},{"type":404,"tag":440,"props":9407,"children":9408},{"style":674},[9409],{"type":410,"value":694},{"type":404,"tag":440,"props":9411,"children":9412},{"style":686},[9413],{"type":410,"value":799},{"type":404,"tag":440,"props":9415,"children":9416},{"style":674},[9417],{"type":410,"value":9418},"(f)) ",{"type":404,"tag":440,"props":9420,"children":9421},{"style":727},[9422],{"type":410,"value":774},{"type":404,"tag":418,"props":9424,"children":9425},{},[9426],{"type":410,"value":9427},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":404,"tag":412,"props":9429,"children":9431},{"id":9430},"值类型的转换",[9432],{"type":410,"value":9430},{"type":404,"tag":418,"props":9434,"children":9435},{},[9436],{"type":410,"value":9437},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":404,"tag":418,"props":9439,"children":9440},{},[9441],{"type":410,"value":9442},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":404,"tag":418,"props":9444,"children":9445},{},[9446],{"type":410,"value":9447},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":404,"tag":429,"props":9449,"children":9451},{"className":662,"code":9450,"language":664,"meta":398,"style":398},"parseInt(1e35) // 1\n",[9452],{"type":404,"tag":436,"props":9453,"children":9454},{"__ignoreMap":398},[9455],{"type":404,"tag":440,"props":9456,"children":9457},{"class":442,"line":443},[9458,9463,9467,9472,9476],{"type":404,"tag":440,"props":9459,"children":9460},{"style":686},[9461],{"type":410,"value":9462},"parseInt",{"type":404,"tag":440,"props":9464,"children":9465},{"style":674},[9466],{"type":410,"value":694},{"type":404,"tag":440,"props":9468,"children":9469},{"style":702},[9470],{"type":410,"value":9471},"1e35",{"type":404,"tag":440,"props":9473,"children":9474},{"style":674},[9475],{"type":410,"value":724},{"type":404,"tag":440,"props":9477,"children":9478},{"style":727},[9479],{"type":410,"value":6721},{"type":404,"tag":418,"props":9481,"children":9482},{},[9483],{"type":410,"value":9484},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":404,"tag":429,"props":9486,"children":9488},{"className":662,"code":9487,"language":664,"meta":398,"style":398},"String() // ''\nString(undefined) // undefined\n",[9489],{"type":404,"tag":436,"props":9490,"children":9491},{"__ignoreMap":398},[9492,9508],{"type":404,"tag":440,"props":9493,"children":9494},{"class":442,"line":443},[9495,9499,9503],{"type":404,"tag":440,"props":9496,"children":9497},{"style":686},[9498],{"type":410,"value":9146},{"type":404,"tag":440,"props":9500,"children":9501},{"style":674},[9502],{"type":410,"value":828},{"type":404,"tag":440,"props":9504,"children":9505},{"style":727},[9506],{"type":410,"value":9507},"// ''\n",{"type":404,"tag":440,"props":9509,"children":9510},{"class":442,"line":733},[9511,9515,9519,9523,9527],{"type":404,"tag":440,"props":9512,"children":9513},{"style":686},[9514],{"type":410,"value":9146},{"type":404,"tag":440,"props":9516,"children":9517},{"style":674},[9518],{"type":410,"value":694},{"type":404,"tag":440,"props":9520,"children":9521},{"style":753},[9522],{"type":410,"value":4552},{"type":404,"tag":440,"props":9524,"children":9525},{"style":674},[9526],{"type":410,"value":724},{"type":404,"tag":440,"props":9528,"children":9529},{"style":727},[9530],{"type":410,"value":963},{"type":404,"tag":412,"props":9532,"children":9534},{"id":9533},"对象与数组的动态特性",[9535],{"type":410,"value":9533},{"type":404,"tag":418,"props":9537,"children":9538},{},[9539],{"type":410,"value":9540},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":404,"tag":429,"props":9542,"children":9544},{"className":662,"code":9543,"language":664,"meta":398,"style":398},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9545],{"type":404,"tag":436,"props":9546,"children":9547},{"__ignoreMap":398},[9548,9584,9609,9632,9656],{"type":404,"tag":440,"props":9549,"children":9550},{"class":442,"line":443},[9551,9555,9559,9563,9567,9572,9576,9580],{"type":404,"tag":440,"props":9552,"children":9553},{"style":997},[9554],{"type":410,"value":5788},{"type":404,"tag":440,"props":9556,"children":9557},{"style":1431},[9558],{"type":410,"value":3221},{"type":404,"tag":440,"props":9560,"children":9561},{"style":470},[9562],{"type":410,"value":1361},{"type":404,"tag":440,"props":9564,"children":9565},{"style":470},[9566],{"type":410,"value":2840},{"type":404,"tag":440,"props":9568,"children":9569},{"style":686},[9570],{"type":410,"value":9571}," Array",{"type":404,"tag":440,"props":9573,"children":9574},{"style":674},[9575],{"type":410,"value":694},{"type":404,"tag":440,"props":9577,"children":9578},{"style":702},[9579],{"type":410,"value":8096},{"type":404,"tag":440,"props":9581,"children":9582},{"style":674},[9583],{"type":410,"value":1415},{"type":404,"tag":440,"props":9585,"children":9586},{"class":442,"line":733},[9587,9592,9596,9601,9605],{"type":404,"tag":440,"props":9588,"children":9589},{"style":674},[9590],{"type":410,"value":9591},"a[",{"type":404,"tag":440,"props":9593,"children":9594},{"style":702},[9595],{"type":410,"value":509},{"type":404,"tag":440,"props":9597,"children":9598},{"style":674},[9599],{"type":410,"value":9600},"] ",{"type":404,"tag":440,"props":9602,"children":9603},{"style":470},[9604],{"type":410,"value":1872},{"type":404,"tag":440,"props":9606,"children":9607},{"style":702},[9608],{"type":410,"value":6775},{"type":404,"tag":440,"props":9610,"children":9611},{"class":442,"line":1377},[9612,9616,9620,9624,9628],{"type":404,"tag":440,"props":9613,"children":9614},{"style":674},[9615],{"type":410,"value":9591},{"type":404,"tag":440,"props":9617,"children":9618},{"style":702},[9619],{"type":410,"value":6298},{"type":404,"tag":440,"props":9621,"children":9622},{"style":674},[9623],{"type":410,"value":9600},{"type":404,"tag":440,"props":9625,"children":9626},{"style":470},[9627],{"type":410,"value":1872},{"type":404,"tag":440,"props":9629,"children":9630},{"style":702},[9631],{"type":410,"value":6775},{"type":404,"tag":440,"props":9633,"children":9634},{"class":442,"line":1418},[9635,9639,9644,9648,9652],{"type":404,"tag":440,"props":9636,"children":9637},{"style":674},[9638],{"type":410,"value":9591},{"type":404,"tag":440,"props":9640,"children":9641},{"style":702},[9642],{"type":410,"value":9643},"7",{"type":404,"tag":440,"props":9645,"children":9646},{"style":674},[9647],{"type":410,"value":9600},{"type":404,"tag":440,"props":9649,"children":9650},{"style":470},[9651],{"type":410,"value":1872},{"type":404,"tag":440,"props":9653,"children":9654},{"style":702},[9655],{"type":410,"value":6775},{"type":404,"tag":440,"props":9657,"children":9658},{"class":442,"line":1427},[9659,9663,9667,9672,9676,9680,9684,9689,9693,9698,9702,9707,9712,9716],{"type":404,"tag":440,"props":9660,"children":9661},{"style":674},[9662],{"type":410,"value":501},{"type":404,"tag":440,"props":9664,"children":9665},{"style":680},[9666],{"type":410,"value":683},{"type":404,"tag":440,"props":9668,"children":9669},{"style":686},[9670],{"type":410,"value":9671},"sort",{"type":404,"tag":440,"props":9673,"children":9674},{"style":674},[9675],{"type":410,"value":694},{"type":404,"tag":440,"props":9677,"children":9678},{"style":680},[9679],{"type":410,"value":1046},{"type":404,"tag":440,"props":9681,"children":9682},{"style":997},[9683],{"type":410,"value":5724},{"type":404,"tag":440,"props":9685,"children":9686},{"style":674},[9687],{"type":410,"value":9688}," Math",{"type":404,"tag":440,"props":9690,"children":9691},{"style":680},[9692],{"type":410,"value":683},{"type":404,"tag":440,"props":9694,"children":9695},{"style":686},[9696],{"type":410,"value":9697},"random",{"type":404,"tag":440,"props":9699,"children":9700},{"style":674},[9701],{"type":410,"value":828},{"type":404,"tag":440,"props":9703,"children":9704},{"style":470},[9705],{"type":410,"value":9706},"-",{"type":404,"tag":440,"props":9708,"children":9709},{"style":702},[9710],{"type":410,"value":9711}," 0.5",{"type":404,"tag":440,"props":9713,"children":9714},{"style":674},[9715],{"type":410,"value":724},{"type":404,"tag":440,"props":9717,"children":9718},{"style":727},[9719],{"type":410,"value":9720},"// [1, 1, 1, empty x 7]\n",{"type":404,"tag":418,"props":9722,"children":9723},{},[9724],{"type":410,"value":9725},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":404,"tag":418,"props":9727,"children":9728},{},[9729],{"type":410,"value":9730},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":404,"tag":412,"props":9732,"children":9734},{"id":9733},"重写",[9735],{"type":410,"value":9733},{"type":404,"tag":418,"props":9737,"children":9738},{},[9739],{"type":410,"value":9740},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":404,"tag":418,"props":9742,"children":9743},{},[9744],{"type":410,"value":9745},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":404,"tag":418,"props":9747,"children":9748},{},[9749],{"type":410,"value":9750},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":404,"tag":429,"props":9752,"children":9754},{"className":662,"code":9753,"language":664,"meta":398,"style":398},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9755],{"type":404,"tag":436,"props":9756,"children":9757},{"__ignoreMap":398},[9758,9799,9814,9835,9852,9859,9870,9893,9925,9960,10000,10040,10048,10104,10119,10167,10174,10181,10192,10215],{"type":404,"tag":440,"props":9759,"children":9760},{"class":442,"line":443},[9761,9765,9769,9773,9777,9781,9786,9790,9795],{"type":404,"tag":440,"props":9762,"children":9763},{"style":997},[9764],{"type":410,"value":5788},{"type":404,"tag":440,"props":9766,"children":9767},{"style":1431},[9768],{"type":410,"value":3221},{"type":404,"tag":440,"props":9770,"children":9771},{"style":470},[9772],{"type":410,"value":1361},{"type":404,"tag":440,"props":9774,"children":9775},{"style":674},[9776],{"type":410,"value":4110},{"type":404,"tag":440,"props":9778,"children":9779},{"style":680},[9780],{"type":410,"value":683},{"type":404,"tag":440,"props":9782,"children":9783},{"style":686},[9784],{"type":410,"value":9785},"defineProperties",{"type":404,"tag":440,"props":9787,"children":9788},{"style":674},[9789],{"type":410,"value":694},{"type":404,"tag":440,"props":9791,"children":9792},{"style":680},[9793],{"type":410,"value":9794},"{},",{"type":404,"tag":440,"props":9796,"children":9797},{"style":680},[9798],{"type":410,"value":1338},{"type":404,"tag":440,"props":9800,"children":9801},{"class":442,"line":733},[9802,9806,9810],{"type":404,"tag":440,"props":9803,"children":9804},{"style":1395},[9805],{"type":410,"value":2771},{"type":404,"tag":440,"props":9807,"children":9808},{"style":680},[9809],{"type":410,"value":1857},{"type":404,"tag":440,"props":9811,"children":9812},{"style":680},[9813],{"type":410,"value":1338},{"type":404,"tag":440,"props":9815,"children":9816},{"class":442,"line":1377},[9817,9822,9826,9831],{"type":404,"tag":440,"props":9818,"children":9819},{"style":1395},[9820],{"type":410,"value":9821},"    value",{"type":404,"tag":440,"props":9823,"children":9824},{"style":680},[9825],{"type":410,"value":1857},{"type":404,"tag":440,"props":9827,"children":9828},{"style":702},[9829],{"type":410,"value":9830}," 100",{"type":404,"tag":440,"props":9832,"children":9833},{"style":680},[9834],{"type":410,"value":7231},{"type":404,"tag":440,"props":9836,"children":9837},{"class":442,"line":1418},[9838,9843,9847],{"type":404,"tag":440,"props":9839,"children":9840},{"style":1395},[9841],{"type":410,"value":9842},"    configurable",{"type":404,"tag":440,"props":9844,"children":9845},{"style":680},[9846],{"type":410,"value":1857},{"type":404,"tag":440,"props":9848,"children":9849},{"style":836},[9850],{"type":410,"value":9851}," true\n",{"type":404,"tag":440,"props":9853,"children":9854},{"class":442,"line":1427},[9855],{"type":404,"tag":440,"props":9856,"children":9857},{"style":680},[9858],{"type":410,"value":2077},{"type":404,"tag":440,"props":9860,"children":9861},{"class":442,"line":1462},[9862,9866],{"type":404,"tag":440,"props":9863,"children":9864},{"style":680},[9865],{"type":410,"value":1671},{"type":404,"tag":440,"props":9867,"children":9868},{"style":674},[9869],{"type":410,"value":1415},{"type":404,"tag":440,"props":9871,"children":9872},{"class":442,"line":1499},[9873,9877,9881,9885,9889],{"type":404,"tag":440,"props":9874,"children":9875},{"style":674},[9876],{"type":410,"value":501},{"type":404,"tag":440,"props":9878,"children":9879},{"style":680},[9880],{"type":410,"value":683},{"type":404,"tag":440,"props":9882,"children":9883},{"style":674},[9884],{"type":410,"value":4149},{"type":404,"tag":440,"props":9886,"children":9887},{"style":470},[9888],{"type":410,"value":1872},{"type":404,"tag":440,"props":9890,"children":9891},{"style":702},[9892],{"type":410,"value":6775},{"type":404,"tag":440,"props":9894,"children":9895},{"class":442,"line":1507},[9896,9900,9904,9908,9912,9916,9920],{"type":404,"tag":440,"props":9897,"children":9898},{"style":674},[9899],{"type":410,"value":5017},{"type":404,"tag":440,"props":9901,"children":9902},{"style":680},[9903],{"type":410,"value":683},{"type":404,"tag":440,"props":9905,"children":9906},{"style":686},[9907],{"type":410,"value":1392},{"type":404,"tag":440,"props":9909,"children":9910},{"style":674},[9911],{"type":410,"value":7318},{"type":404,"tag":440,"props":9913,"children":9914},{"style":680},[9915],{"type":410,"value":683},{"type":404,"tag":440,"props":9917,"children":9918},{"style":674},[9919],{"type":410,"value":6027},{"type":404,"tag":440,"props":9921,"children":9922},{"style":727},[9923],{"type":410,"value":9924},"// 100\n",{"type":404,"tag":440,"props":9926,"children":9927},{"class":442,"line":1534},[9928,9932,9936,9940,9944,9948,9952,9956],{"type":404,"tag":440,"props":9929,"children":9930},{"style":997},[9931],{"type":410,"value":5788},{"type":404,"tag":440,"props":9933,"children":9934},{"style":1431},[9935],{"type":410,"value":7032},{"type":404,"tag":440,"props":9937,"children":9938},{"style":470},[9939],{"type":410,"value":1361},{"type":404,"tag":440,"props":9941,"children":9942},{"style":470},[9943],{"type":410,"value":2840},{"type":404,"tag":440,"props":9945,"children":9946},{"style":686},[9947],{"type":410,"value":5634},{"type":404,"tag":440,"props":9949,"children":9950},{"style":674},[9951],{"type":410,"value":7318},{"type":404,"tag":440,"props":9953,"children":9954},{"style":680},[9955],{"type":410,"value":710},{"type":404,"tag":440,"props":9957,"children":9958},{"style":680},[9959],{"type":410,"value":1338},{"type":404,"tag":440,"props":9961,"children":9962},{"class":442,"line":2110},[9963,9967,9971,9975,9979,9984,9988,9992,9996],{"type":404,"tag":440,"props":9964,"children":9965},{"style":2657},[9966],{"type":410,"value":2654},{"type":404,"tag":440,"props":9968,"children":9969},{"style":680},[9970],{"type":410,"value":1930},{"type":404,"tag":440,"props":9972,"children":9973},{"style":1624},[9974],{"type":410,"value":5652},{"type":404,"tag":440,"props":9976,"children":9977},{"style":680},[9978],{"type":410,"value":710},{"type":404,"tag":440,"props":9980,"children":9981},{"style":1624},[9982],{"type":410,"value":9983}," key",{"type":404,"tag":440,"props":9985,"children":9986},{"style":680},[9987],{"type":410,"value":710},{"type":404,"tag":440,"props":9989,"children":9990},{"style":1624},[9991],{"type":410,"value":8723},{"type":404,"tag":440,"props":9993,"children":9994},{"style":680},[9995],{"type":410,"value":1632},{"type":404,"tag":440,"props":9997,"children":9998},{"style":680},[9999],{"type":410,"value":1338},{"type":404,"tag":440,"props":10001,"children":10002},{"class":442,"line":2170},[10003,10007,10011,10016,10020,10024,10028,10032,10036],{"type":404,"tag":440,"props":10004,"children":10005},{"style":1701},[10006],{"type":410,"value":1991},{"type":404,"tag":440,"props":10008,"children":10009},{"style":1395},[10010],{"type":410,"value":1930},{"type":404,"tag":440,"props":10012,"children":10013},{"style":674},[10014],{"type":410,"value":10015},"key",{"type":404,"tag":440,"props":10017,"children":10018},{"style":470},[10019],{"type":410,"value":2004},{"type":404,"tag":440,"props":10021,"children":10022},{"style":453},[10023],{"type":410,"value":456},{"type":404,"tag":440,"props":10025,"children":10026},{"style":459},[10027],{"type":410,"value":1723},{"type":404,"tag":440,"props":10029,"children":10030},{"style":453},[10031],{"type":410,"value":467},{"type":404,"tag":440,"props":10033,"children":10034},{"style":1395},[10035],{"type":410,"value":724},{"type":404,"tag":440,"props":10037,"children":10038},{"style":680},[10039],{"type":410,"value":1747},{"type":404,"tag":440,"props":10041,"children":10042},{"class":442,"line":2231},[10043],{"type":404,"tag":440,"props":10044,"children":10045},{"style":727},[10046],{"type":410,"value":10047},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":404,"tag":440,"props":10049,"children":10050},{"class":442,"line":2272},[10051,10055,10059,10063,10068,10072,10076,10080,10084,10088,10092,10096,10100],{"type":404,"tag":440,"props":10052,"children":10053},{"style":1701},[10054],{"type":410,"value":5901},{"type":404,"tag":440,"props":10056,"children":10057},{"style":674},[10058],{"type":410,"value":5942},{"type":404,"tag":440,"props":10060,"children":10061},{"style":680},[10062],{"type":410,"value":683},{"type":404,"tag":440,"props":10064,"children":10065},{"style":686},[10066],{"type":410,"value":10067},"defineProperty",{"type":404,"tag":440,"props":10069,"children":10070},{"style":1395},[10071],{"type":410,"value":694},{"type":404,"tag":440,"props":10073,"children":10074},{"style":674},[10075],{"type":410,"value":5652},{"type":404,"tag":440,"props":10077,"children":10078},{"style":680},[10079],{"type":410,"value":710},{"type":404,"tag":440,"props":10081,"children":10082},{"style":674},[10083],{"type":410,"value":9983},{"type":404,"tag":440,"props":10085,"children":10086},{"style":680},[10087],{"type":410,"value":710},{"type":404,"tag":440,"props":10089,"children":10090},{"style":680},[10091],{"type":410,"value":1709},{"type":404,"tag":440,"props":10093,"children":10094},{"style":674},[10095],{"type":410,"value":8723},{"type":404,"tag":440,"props":10097,"children":10098},{"style":680},[10099],{"type":410,"value":1732},{"type":404,"tag":440,"props":10101,"children":10102},{"style":1395},[10103],{"type":410,"value":1415},{"type":404,"tag":440,"props":10105,"children":10106},{"class":442,"line":2313},[10107,10111,10115],{"type":404,"tag":440,"props":10108,"children":10109},{"style":680},[10110],{"type":410,"value":5921},{"type":404,"tag":440,"props":10112,"children":10113},{"style":1701},[10114],{"type":410,"value":5926},{"type":404,"tag":440,"props":10116,"children":10117},{"style":680},[10118],{"type":410,"value":1338},{"type":404,"tag":440,"props":10120,"children":10121},{"class":442,"line":2322},[10122,10126,10130,10134,10139,10143,10147,10151,10155,10159,10163],{"type":404,"tag":440,"props":10123,"children":10124},{"style":1701},[10125],{"type":410,"value":5901},{"type":404,"tag":440,"props":10127,"children":10128},{"style":674},[10129],{"type":410,"value":5942},{"type":404,"tag":440,"props":10131,"children":10132},{"style":680},[10133],{"type":410,"value":683},{"type":404,"tag":440,"props":10135,"children":10136},{"style":686},[10137],{"type":410,"value":10138},"set",{"type":404,"tag":440,"props":10140,"children":10141},{"style":1395},[10142],{"type":410,"value":694},{"type":404,"tag":440,"props":10144,"children":10145},{"style":674},[10146],{"type":410,"value":5652},{"type":404,"tag":440,"props":10148,"children":10149},{"style":680},[10150],{"type":410,"value":710},{"type":404,"tag":440,"props":10152,"children":10153},{"style":674},[10154],{"type":410,"value":9983},{"type":404,"tag":440,"props":10156,"children":10157},{"style":680},[10158],{"type":410,"value":710},{"type":404,"tag":440,"props":10160,"children":10161},{"style":674},[10162],{"type":410,"value":8723},{"type":404,"tag":440,"props":10164,"children":10165},{"style":1395},[10166],{"type":410,"value":1415},{"type":404,"tag":440,"props":10168,"children":10169},{"class":442,"line":2330},[10170],{"type":404,"tag":440,"props":10171,"children":10172},{"style":680},[10173],{"type":410,"value":2319},{"type":404,"tag":440,"props":10175,"children":10176},{"class":442,"line":5996},[10177],{"type":404,"tag":440,"props":10178,"children":10179},{"style":680},[10180],{"type":410,"value":2077},{"type":404,"tag":440,"props":10182,"children":10183},{"class":442,"line":8512},[10184,10188],{"type":404,"tag":440,"props":10185,"children":10186},{"style":680},[10187],{"type":410,"value":1671},{"type":404,"tag":440,"props":10189,"children":10190},{"style":674},[10191],{"type":410,"value":1415},{"type":404,"tag":440,"props":10193,"children":10194},{"class":442,"line":8520},[10195,10199,10203,10207,10211],{"type":404,"tag":440,"props":10196,"children":10197},{"style":674},[10198],{"type":410,"value":1356},{"type":404,"tag":440,"props":10200,"children":10201},{"style":680},[10202],{"type":410,"value":683},{"type":404,"tag":440,"props":10204,"children":10205},{"style":674},[10206],{"type":410,"value":4149},{"type":404,"tag":440,"props":10208,"children":10209},{"style":470},[10210],{"type":410,"value":1872},{"type":404,"tag":440,"props":10212,"children":10213},{"style":702},[10214],{"type":410,"value":6775},{"type":404,"tag":440,"props":10216,"children":10217},{"class":442,"line":8528},[10218,10222,10226,10230,10235,10239,10243],{"type":404,"tag":440,"props":10219,"children":10220},{"style":674},[10221],{"type":410,"value":5017},{"type":404,"tag":440,"props":10223,"children":10224},{"style":680},[10225],{"type":410,"value":683},{"type":404,"tag":440,"props":10227,"children":10228},{"style":686},[10229],{"type":410,"value":1392},{"type":404,"tag":440,"props":10231,"children":10232},{"style":674},[10233],{"type":410,"value":10234},"(b",{"type":404,"tag":440,"props":10236,"children":10237},{"style":680},[10238],{"type":410,"value":683},{"type":404,"tag":440,"props":10240,"children":10241},{"style":674},[10242],{"type":410,"value":6027},{"type":404,"tag":440,"props":10244,"children":10245},{"style":727},[10246],{"type":410,"value":6721},{"type":404,"tag":418,"props":10248,"children":10249},{},[10250],{"type":410,"value":10251},"自增自减运算符会隐式的转换操作数的类型。",{"type":404,"tag":418,"props":10253,"children":10254},{},[10255],{"type":410,"value":10256},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":404,"tag":429,"props":10258,"children":10260},{"className":662,"code":10259,"language":664,"meta":398,"style":398},"class a extends a {}\n",[10261],{"type":404,"tag":436,"props":10262,"children":10263},{"__ignoreMap":398},[10264],{"type":404,"tag":440,"props":10265,"children":10266},{"class":442,"line":443},[10267,10271,10275,10279,10283],{"type":404,"tag":440,"props":10268,"children":10269},{"style":997},[10270],{"type":410,"value":3542},{"type":404,"tag":440,"props":10272,"children":10273},{"style":3545},[10274],{"type":410,"value":3221},{"type":404,"tag":440,"props":10276,"children":10277},{"style":3565},[10278],{"type":410,"value":3568},{"type":404,"tag":440,"props":10280,"children":10281},{"style":3571},[10282],{"type":410,"value":3221},{"type":404,"tag":440,"props":10284,"children":10285},{"style":680},[10286],{"type":410,"value":3129},{"type":404,"tag":418,"props":10288,"children":10289},{},[10290],{"type":410,"value":10291},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":404,"tag":418,"props":10293,"children":10294},{},[10295],{"type":410,"value":10296},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":404,"tag":418,"props":10298,"children":10299},{},[10300],{"type":410,"value":10301},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":404,"tag":429,"props":10303,"children":10305},{"className":662,"code":10304,"language":664,"meta":398,"style":398},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10306],{"type":404,"tag":436,"props":10307,"children":10308},{"__ignoreMap":398},[10309,10362,10375,10382],{"type":404,"tag":440,"props":10310,"children":10311},{"class":442,"line":443},[10312,10316,10321,10325,10329,10334,10338,10342,10346,10350,10354,10358],{"type":404,"tag":440,"props":10313,"children":10314},{"style":1701},[10315],{"type":410,"value":8763},{"type":404,"tag":440,"props":10317,"children":10318},{"style":674},[10319],{"type":410,"value":10320}," (a ",{"type":404,"tag":440,"props":10322,"children":10323},{"style":470},[10324],{"type":410,"value":1872},{"type":404,"tag":440,"props":10326,"children":10327},{"style":680},[10328],{"type":410,"value":1709},{"type":404,"tag":440,"props":10330,"children":10331},{"style":1395},[10332],{"type":410,"value":10333}," undefined",{"type":404,"tag":440,"props":10335,"children":10336},{"style":680},[10337],{"type":410,"value":1857},{"type":404,"tag":440,"props":10339,"children":10340},{"style":453},[10341],{"type":410,"value":456},{"type":404,"tag":440,"props":10343,"children":10344},{"style":459},[10345],{"type":410,"value":1723},{"type":404,"tag":440,"props":10347,"children":10348},{"style":453},[10349],{"type":410,"value":467},{"type":404,"tag":440,"props":10351,"children":10352},{"style":680},[10353],{"type":410,"value":1732},{"type":404,"tag":440,"props":10355,"children":10356},{"style":674},[10357],{"type":410,"value":724},{"type":404,"tag":440,"props":10359,"children":10360},{"style":680},[10361],{"type":410,"value":1747},{"type":404,"tag":440,"props":10363,"children":10364},{"class":442,"line":733},[10365,10370],{"type":404,"tag":440,"props":10366,"children":10367},{"style":470},[10368],{"type":410,"value":10369},"  delete",{"type":404,"tag":440,"props":10371,"children":10372},{"style":753},[10373],{"type":410,"value":10374}," undefined\n",{"type":404,"tag":440,"props":10376,"children":10377},{"class":442,"line":1377},[10378],{"type":404,"tag":440,"props":10379,"children":10380},{"style":680},[10381],{"type":410,"value":1424},{"type":404,"tag":440,"props":10383,"children":10384},{"class":442,"line":1418},[10385,10389,10393,10397,10402],{"type":404,"tag":440,"props":10386,"children":10387},{"style":674},[10388],{"type":410,"value":5017},{"type":404,"tag":440,"props":10390,"children":10391},{"style":680},[10392],{"type":410,"value":683},{"type":404,"tag":440,"props":10394,"children":10395},{"style":686},[10396],{"type":410,"value":1392},{"type":404,"tag":440,"props":10398,"children":10399},{"style":674},[10400],{"type":410,"value":10401},"(a) ",{"type":404,"tag":440,"props":10403,"children":10404},{"style":727},[10405],{"type":410,"value":7494},{"type":404,"tag":412,"props":10407,"children":10409},{"id":10408},"动态绑定",[10410],{"type":410,"value":10408},{"type":404,"tag":418,"props":10412,"children":10413},{},[10414],{"type":410,"value":10415},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":404,"tag":429,"props":10417,"children":10419},{"className":662,"code":10418,"language":664,"meta":398,"style":398},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10420],{"type":404,"tag":436,"props":10421,"children":10422},{"__ignoreMap":398},[10423,10443,10463,10491,10499,10528,10536,10565,10573,10619,10627,10668,10675],{"type":404,"tag":440,"props":10424,"children":10425},{"class":442,"line":443},[10426,10430,10435,10439],{"type":404,"tag":440,"props":10427,"children":10428},{"style":997},[10429],{"type":410,"value":1323},{"type":404,"tag":440,"props":10431,"children":10432},{"style":686},[10433],{"type":410,"value":10434}," indirect",{"type":404,"tag":440,"props":10436,"children":10437},{"style":680},[10438],{"type":410,"value":1046},{"type":404,"tag":440,"props":10440,"children":10441},{"style":680},[10442],{"type":410,"value":1338},{"type":404,"tag":440,"props":10444,"children":10445},{"class":442,"line":733},[10446,10450,10454,10458],{"type":404,"tag":440,"props":10447,"children":10448},{"style":997},[10449],{"type":410,"value":3775},{"type":404,"tag":440,"props":10451,"children":10452},{"style":1431},[10453],{"type":410,"value":7820},{"type":404,"tag":440,"props":10455,"children":10456},{"style":470},[10457],{"type":410,"value":1361},{"type":404,"tag":440,"props":10459,"children":10460},{"style":674},[10461],{"type":410,"value":10462}," eval\n",{"type":404,"tag":440,"props":10464,"children":10465},{"class":442,"line":1377},[10466,10470,10475,10479,10483,10487],{"type":404,"tag":440,"props":10467,"children":10468},{"style":997},[10469],{"type":410,"value":3775},{"type":404,"tag":440,"props":10471,"children":10472},{"style":7817},[10473],{"type":410,"value":10474}," getEval",{"type":404,"tag":440,"props":10476,"children":10477},{"style":470},[10478],{"type":410,"value":1361},{"type":404,"tag":440,"props":10480,"children":10481},{"style":680},[10482],{"type":410,"value":1333},{"type":404,"tag":440,"props":10484,"children":10485},{"style":997},[10486],{"type":410,"value":5724},{"type":404,"tag":440,"props":10488,"children":10489},{"style":674},[10490],{"type":410,"value":10462},{"type":404,"tag":440,"props":10492,"children":10493},{"class":442,"line":1418},[10494],{"type":404,"tag":440,"props":10495,"children":10496},{"style":727},[10497],{"type":410,"value":10498},"  // 单值表达式\n",{"type":404,"tag":440,"props":10500,"children":10501},{"class":442,"line":1427},[10502,10507,10511,10515,10520,10524],{"type":404,"tag":440,"props":10503,"children":10504},{"style":686},[10505],{"type":410,"value":10506},"  exec",{"type":404,"tag":440,"props":10508,"children":10509},{"style":1395},[10510],{"type":410,"value":694},{"type":404,"tag":440,"props":10512,"children":10513},{"style":453},[10514],{"type":410,"value":467},{"type":404,"tag":440,"props":10516,"children":10517},{"style":459},[10518],{"type":410,"value":10519},"console.log(this === globalThis)",{"type":404,"tag":440,"props":10521,"children":10522},{"style":453},[10523],{"type":410,"value":467},{"type":404,"tag":440,"props":10525,"children":10526},{"style":1395},[10527],{"type":410,"value":1415},{"type":404,"tag":440,"props":10529,"children":10530},{"class":442,"line":1462},[10531],{"type":404,"tag":440,"props":10532,"children":10533},{"style":727},[10534],{"type":410,"value":10535},"  // 函数返回\n",{"type":404,"tag":440,"props":10537,"children":10538},{"class":442,"line":1499},[10539,10544,10549,10553,10557,10561],{"type":404,"tag":440,"props":10540,"children":10541},{"style":686},[10542],{"type":410,"value":10543},"  getEval",{"type":404,"tag":440,"props":10545,"children":10546},{"style":1395},[10547],{"type":410,"value":10548},"()(",{"type":404,"tag":440,"props":10550,"children":10551},{"style":453},[10552],{"type":410,"value":467},{"type":404,"tag":440,"props":10554,"children":10555},{"style":459},[10556],{"type":410,"value":10519},{"type":404,"tag":440,"props":10558,"children":10559},{"style":453},[10560],{"type":410,"value":467},{"type":404,"tag":440,"props":10562,"children":10563},{"style":1395},[10564],{"type":410,"value":1415},{"type":404,"tag":440,"props":10566,"children":10567},{"class":442,"line":1507},[10568],{"type":404,"tag":440,"props":10569,"children":10570},{"style":727},[10571],{"type":410,"value":10572},"  // 携带逗号运算符的分组运算符\n",{"type":404,"tag":440,"props":10574,"children":10575},{"class":442,"line":1534},[10576,10581,10585,10589,10593,10598,10603,10607,10611,10615],{"type":404,"tag":440,"props":10577,"children":10578},{"style":680},[10579],{"type":410,"value":10580},"  ;",{"type":404,"tag":440,"props":10582,"children":10583},{"style":1395},[10584],{"type":410,"value":694},{"type":404,"tag":440,"props":10586,"children":10587},{"style":702},[10588],{"type":410,"value":705},{"type":404,"tag":440,"props":10590,"children":10591},{"style":680},[10592],{"type":410,"value":710},{"type":404,"tag":440,"props":10594,"children":10595},{"style":674},[10596],{"type":410,"value":10597}," eval",{"type":404,"tag":440,"props":10599,"children":10600},{"style":1395},[10601],{"type":410,"value":10602},")(",{"type":404,"tag":440,"props":10604,"children":10605},{"style":453},[10606],{"type":410,"value":467},{"type":404,"tag":440,"props":10608,"children":10609},{"style":459},[10610],{"type":410,"value":10519},{"type":404,"tag":440,"props":10612,"children":10613},{"style":453},[10614],{"type":410,"value":467},{"type":404,"tag":440,"props":10616,"children":10617},{"style":1395},[10618],{"type":410,"value":1415},{"type":404,"tag":440,"props":10620,"children":10621},{"class":442,"line":2110},[10622],{"type":404,"tag":440,"props":10623,"children":10624},{"style":727},[10625],{"type":410,"value":10626},"  // eval.call 等方法\n",{"type":404,"tag":440,"props":10628,"children":10629},{"class":442,"line":2170},[10630,10635,10639,10643,10648,10652,10656,10660,10664],{"type":404,"tag":440,"props":10631,"children":10632},{"style":674},[10633],{"type":410,"value":10634},"  eval",{"type":404,"tag":440,"props":10636,"children":10637},{"style":680},[10638],{"type":410,"value":683},{"type":404,"tag":440,"props":10640,"children":10641},{"style":686},[10642],{"type":410,"value":6885},{"type":404,"tag":440,"props":10644,"children":10645},{"style":1395},[10646],{"type":410,"value":10647},"(()",{"type":404,"tag":440,"props":10649,"children":10650},{"style":680},[10651],{"type":410,"value":710},{"type":404,"tag":440,"props":10653,"children":10654},{"style":453},[10655],{"type":410,"value":456},{"type":404,"tag":440,"props":10657,"children":10658},{"style":459},[10659],{"type":410,"value":10519},{"type":404,"tag":440,"props":10661,"children":10662},{"style":453},[10663],{"type":410,"value":467},{"type":404,"tag":440,"props":10665,"children":10666},{"style":1395},[10667],{"type":410,"value":1415},{"type":404,"tag":440,"props":10669,"children":10670},{"class":442,"line":2231},[10671],{"type":404,"tag":440,"props":10672,"children":10673},{"style":680},[10674],{"type":410,"value":1424},{"type":404,"tag":440,"props":10676,"children":10677},{"class":442,"line":2272},[10678,10683,10687,10691,10695,10700],{"type":404,"tag":440,"props":10679,"children":10680},{"style":674},[10681],{"type":410,"value":10682},"indirect",{"type":404,"tag":440,"props":10684,"children":10685},{"style":680},[10686],{"type":410,"value":683},{"type":404,"tag":440,"props":10688,"children":10689},{"style":686},[10690],{"type":410,"value":7715},{"type":404,"tag":440,"props":10692,"children":10693},{"style":674},[10694],{"type":410,"value":694},{"type":404,"tag":440,"props":10696,"children":10697},{"style":680},[10698],{"type":410,"value":10699},"{}",{"type":404,"tag":440,"props":10701,"children":10702},{"style":674},[10703],{"type":410,"value":10704},")()\n",{"type":404,"tag":418,"props":10706,"children":10707},{},[10708],{"type":410,"value":10709},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":404,"tag":418,"props":10711,"children":10712},{},[10713],{"type":410,"value":10714},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":404,"tag":429,"props":10716,"children":10718},{"className":662,"code":10717,"language":664,"meta":398,"style":398},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10719],{"type":404,"tag":436,"props":10720,"children":10721},{"__ignoreMap":398},[10722,10737,10773,10795,10851],{"type":404,"tag":440,"props":10723,"children":10724},{"class":442,"line":443},[10725,10729,10733],{"type":404,"tag":440,"props":10726,"children":10727},{"style":674},[10728],{"type":410,"value":7183},{"type":404,"tag":440,"props":10730,"children":10731},{"style":470},[10732],{"type":410,"value":1872},{"type":404,"tag":440,"props":10734,"children":10735},{"style":702},[10736],{"type":410,"value":6351},{"type":404,"tag":440,"props":10738,"children":10739},{"class":442,"line":733},[10740,10744,10748,10752,10756,10760,10764,10769],{"type":404,"tag":440,"props":10741,"children":10742},{"style":997},[10743],{"type":410,"value":5788},{"type":404,"tag":440,"props":10745,"children":10746},{"style":1431},[10747],{"type":410,"value":2638},{"type":404,"tag":440,"props":10749,"children":10750},{"style":470},[10751],{"type":410,"value":1361},{"type":404,"tag":440,"props":10753,"children":10754},{"style":680},[10755],{"type":410,"value":1709},{"type":404,"tag":440,"props":10757,"children":10758},{"style":1395},[10759],{"type":410,"value":6473},{"type":404,"tag":440,"props":10761,"children":10762},{"style":680},[10763],{"type":410,"value":1857},{"type":404,"tag":440,"props":10765,"children":10766},{"style":702},[10767],{"type":410,"value":10768}," 200",{"type":404,"tag":440,"props":10770,"children":10771},{"style":680},[10772],{"type":410,"value":3168},{"type":404,"tag":440,"props":10774,"children":10775},{"class":442,"line":1377},[10776,10780,10785,10790],{"type":404,"tag":440,"props":10777,"children":10778},{"style":1701},[10779],{"type":410,"value":8763},{"type":404,"tag":440,"props":10781,"children":10782},{"style":674},[10783],{"type":410,"value":10784}," (obj) ",{"type":404,"tag":440,"props":10786,"children":10787},{"style":680},[10788],{"type":410,"value":10789},"{",{"type":404,"tag":440,"props":10791,"children":10792},{"style":1395},[10793],{"type":410,"value":10794}," \n",{"type":404,"tag":440,"props":10796,"children":10797},{"class":442,"line":1418},[10798,10802,10806,10810,10814,10818,10822,10826,10830,10834,10838,10842,10846],{"type":404,"tag":440,"props":10799,"children":10800},{"style":686},[10801],{"type":410,"value":10634},{"type":404,"tag":440,"props":10803,"children":10804},{"style":1395},[10805],{"type":410,"value":694},{"type":404,"tag":440,"props":10807,"children":10808},{"style":674},[10809],{"type":410,"value":5017},{"type":404,"tag":440,"props":10811,"children":10812},{"style":680},[10813],{"type":410,"value":683},{"type":404,"tag":440,"props":10815,"children":10816},{"style":686},[10817],{"type":410,"value":1392},{"type":404,"tag":440,"props":10819,"children":10820},{"style":1395},[10821],{"type":410,"value":694},{"type":404,"tag":440,"props":10823,"children":10824},{"style":674},[10825],{"type":410,"value":2668},{"type":404,"tag":440,"props":10827,"children":10828},{"style":680},[10829],{"type":410,"value":710},{"type":404,"tag":440,"props":10831,"children":10832},{"style":1344},[10833],{"type":410,"value":3789},{"type":404,"tag":440,"props":10835,"children":10836},{"style":680},[10837],{"type":410,"value":683},{"type":404,"tag":440,"props":10839,"children":10840},{"style":674},[10841],{"type":410,"value":2668},{"type":404,"tag":440,"props":10843,"children":10844},{"style":1395},[10845],{"type":410,"value":9272},{"type":404,"tag":440,"props":10847,"children":10848},{"style":727},[10849],{"type":410,"value":10850},"// 200 100\n",{"type":404,"tag":440,"props":10852,"children":10853},{"class":442,"line":1427},[10854],{"type":404,"tag":440,"props":10855,"children":10856},{"style":680},[10857],{"type":410,"value":1424},{"type":404,"tag":418,"props":10859,"children":10860},{},[10861],{"type":410,"value":10862},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":404,"tag":412,"props":10864,"children":10866},{"id":10865},"动态方法调用",[10867],{"type":410,"value":10865},{"type":404,"tag":418,"props":10869,"children":10870},{},[10871],{"type":410,"value":10872},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":404,"tag":418,"props":10874,"children":10875},{},[10876],{"type":410,"value":10877},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":404,"tag":418,"props":10879,"children":10880},{},[10881],{"type":410,"value":10882},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":404,"tag":418,"props":10884,"children":10885},{},[10886],{"type":410,"value":10887},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":404,"tag":429,"props":10889,"children":10891},{"className":662,"code":10890,"language":664,"meta":398,"style":398},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10892],{"type":404,"tag":436,"props":10893,"children":10894},{"__ignoreMap":398},[10895,10915,10951,11000],{"type":404,"tag":440,"props":10896,"children":10897},{"class":442,"line":443},[10898,10902,10907,10911],{"type":404,"tag":440,"props":10899,"children":10900},{"style":997},[10901],{"type":410,"value":1323},{"type":404,"tag":440,"props":10903,"children":10904},{"style":686},[10905],{"type":410,"value":10906}," Test",{"type":404,"tag":440,"props":10908,"children":10909},{"style":680},[10910],{"type":410,"value":1046},{"type":404,"tag":440,"props":10912,"children":10913},{"style":680},[10914],{"type":410,"value":3129},{"type":404,"tag":440,"props":10916,"children":10917},{"class":442,"line":733},[10918,10923,10927,10931,10935,10939,10943,10947],{"type":404,"tag":440,"props":10919,"children":10920},{"style":674},[10921],{"type":410,"value":10922},"TestAnother ",{"type":404,"tag":440,"props":10924,"children":10925},{"style":470},[10926],{"type":410,"value":1872},{"type":404,"tag":440,"props":10928,"children":10929},{"style":674},[10930],{"type":410,"value":10906},{"type":404,"tag":440,"props":10932,"children":10933},{"style":680},[10934],{"type":410,"value":683},{"type":404,"tag":440,"props":10936,"children":10937},{"style":686},[10938],{"type":410,"value":7715},{"type":404,"tag":440,"props":10940,"children":10941},{"style":674},[10942],{"type":410,"value":694},{"type":404,"tag":440,"props":10944,"children":10945},{"style":680},[10946],{"type":410,"value":10699},{"type":404,"tag":440,"props":10948,"children":10949},{"style":674},[10950],{"type":410,"value":1415},{"type":404,"tag":440,"props":10952,"children":10953},{"class":442,"line":1377},[10954,10958,10962,10966,10970,10974,10978,10982,10987,10992,10996],{"type":404,"tag":440,"props":10955,"children":10956},{"style":674},[10957],{"type":410,"value":5017},{"type":404,"tag":440,"props":10959,"children":10960},{"style":680},[10961],{"type":410,"value":683},{"type":404,"tag":440,"props":10963,"children":10964},{"style":686},[10965],{"type":410,"value":1392},{"type":404,"tag":440,"props":10967,"children":10968},{"style":674},[10969],{"type":410,"value":694},{"type":404,"tag":440,"props":10971,"children":10972},{"style":470},[10973],{"type":410,"value":1513},{"type":404,"tag":440,"props":10975,"children":10976},{"style":686},[10977],{"type":410,"value":10906},{"type":404,"tag":440,"props":10979,"children":10980},{"style":674},[10981],{"type":410,"value":828},{"type":404,"tag":440,"props":10983,"children":10984},{"style":470},[10985],{"type":410,"value":10986},"instanceof",{"type":404,"tag":440,"props":10988,"children":10989},{"style":3545},[10990],{"type":410,"value":10991}," TestAnother",{"type":404,"tag":440,"props":10993,"children":10994},{"style":674},[10995],{"type":410,"value":724},{"type":404,"tag":440,"props":10997,"children":10998},{"style":727},[10999],{"type":410,"value":774},{"type":404,"tag":440,"props":11001,"children":11002},{"class":442,"line":1418},[11003,11007,11011,11015,11019,11024,11028,11032,11036],{"type":404,"tag":440,"props":11004,"children":11005},{"style":674},[11006],{"type":410,"value":5017},{"type":404,"tag":440,"props":11008,"children":11009},{"style":680},[11010],{"type":410,"value":683},{"type":404,"tag":440,"props":11012,"children":11013},{"style":686},[11014],{"type":410,"value":1392},{"type":404,"tag":440,"props":11016,"children":11017},{"style":674},[11018],{"type":410,"value":694},{"type":404,"tag":440,"props":11020,"children":11021},{"style":2820},[11022],{"type":410,"value":11023},"test2",{"type":404,"tag":440,"props":11025,"children":11026},{"style":680},[11027],{"type":410,"value":683},{"type":404,"tag":440,"props":11029,"children":11030},{"style":1431},[11031],{"type":410,"value":2831},{"type":404,"tag":440,"props":11033,"children":11034},{"style":674},[11035],{"type":410,"value":724},{"type":404,"tag":440,"props":11037,"children":11038},{"style":727},[11039],{"type":410,"value":963},{"type":404,"tag":418,"props":11041,"children":11042},{},[11043],{"type":410,"value":11044},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":404,"tag":412,"props":11046,"children":11048},{"id":11047},"通用执行环境的实现",[11049],{"type":410,"value":11047},{"type":404,"tag":418,"props":11051,"children":11052},{},[11053],{"type":410,"value":11054},"跳过。",{"type":404,"tag":405,"props":11056,"children":11058},{"id":11057},"勘误",[11059],{"type":410,"value":11060},"勘误？",{"type":404,"tag":518,"props":11062,"children":11063},{},[11064,11069,11074,11079,11084,11089,11094,11099,11104,11109,11114,11119,11124],{"type":404,"tag":522,"props":11065,"children":11066},{},[11067],{"type":410,"value":11068},"P71，属性读取器",{"type":404,"tag":522,"props":11070,"children":11071},{},[11072],{"type":410,"value":11073},"P77，逻辑与、按位非",{"type":404,"tag":522,"props":11075,"children":11076},{},[11077],{"type":410,"value":11078},"P107，catch 子句隐式声明",{"type":404,"tag":522,"props":11080,"children":11081},{},[11082],{"type":410,"value":11083},"P134，第二段代码，computedName 括号",{"type":404,"tag":522,"props":11085,"children":11086},{},[11087],{"type":410,"value":11088},"P148，ES8",{"type":404,"tag":522,"props":11090,"children":11091},{},[11092],{"type":410,"value":11093},"P179，MyObject() 有没有必要用括号",{"type":404,"tag":522,"props":11095,"children":11096},{},[11097],{"type":410,"value":11098},"P206，语言仅提供了...能力而已",{"type":404,"tag":522,"props":11100,"children":11101},{},[11102],{"type":410,"value":11103},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":404,"tag":522,"props":11105,"children":11106},{},[11107],{"type":410,"value":11108},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":404,"tag":522,"props":11110,"children":11111},{},[11112],{"type":410,"value":11113},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":404,"tag":522,"props":11115,"children":11116},{},[11117],{"type":410,"value":11118},"P536，表格最后一行 String",{"type":404,"tag":522,"props":11120,"children":11121},{},[11122],{"type":410,"value":11123},"P535，存取描述符",{"type":404,"tag":522,"props":11125,"children":11126},{},[11127],{"type":410,"value":11128},"P564，运算符",{"type":404,"tag":11130,"props":11131,"children":11134},"section",{"className":11132,"dataFootnotes":398},[11133],"footnotes",[11135,11142],{"type":404,"tag":405,"props":11136,"children":11139},{"className":11137,"id":505},[11138],"sr-only",[11140],{"type":410,"value":11141},"Footnotes",{"type":404,"tag":11143,"props":11144,"children":11145},"ol",{},[11146,11161,11174,11187,11200,11213],{"type":404,"tag":522,"props":11147,"children":11149},{"id":11148},"user-content-fn-first-class",[11150,11152],{"type":410,"value":11151},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":404,"tag":501,"props":11153,"children":11158},{"href":11154,"ariaLabel":11155,"className":11156,"dataFootnoteBackref":398},"#user-content-fnref-first-class","Back to reference 1",[11157],"data-footnote-backref",[11159],{"type":410,"value":11160},"↩",{"type":404,"tag":522,"props":11162,"children":11164},{"id":11163},"user-content-fn-oo",[11165,11167],{"type":410,"value":11166},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":404,"tag":501,"props":11168,"children":11172},{"href":11169,"ariaLabel":11170,"className":11171,"dataFootnoteBackref":398},"#user-content-fnref-oo","Back to reference 2",[11157],[11173],{"type":410,"value":11160},{"type":404,"tag":522,"props":11175,"children":11177},{"id":11176},"user-content-fn-string",[11178,11180],{"type":410,"value":11179},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":404,"tag":501,"props":11181,"children":11185},{"href":11182,"ariaLabel":11183,"className":11184,"dataFootnoteBackref":398},"#user-content-fnref-string","Back to reference 3",[11157],[11186],{"type":410,"value":11160},{"type":404,"tag":522,"props":11188,"children":11190},{"id":11189},"user-content-fn-namespace",[11191,11193],{"type":410,"value":11192},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":404,"tag":501,"props":11194,"children":11198},{"href":11195,"ariaLabel":11196,"className":11197,"dataFootnoteBackref":398},"#user-content-fnref-namespace","Back to reference 4",[11157],[11199],{"type":410,"value":11160},{"type":404,"tag":522,"props":11201,"children":11203},{"id":11202},"user-content-fn-iterationenv",[11204,11206],{"type":410,"value":11205},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":404,"tag":501,"props":11207,"children":11211},{"href":11208,"ariaLabel":11209,"className":11210,"dataFootnoteBackref":398},"#user-content-fnref-iterationenv","Back to reference 5",[11157],[11212],{"type":410,"value":11160},{"type":404,"tag":522,"props":11214,"children":11216},{"id":11215},"user-content-fn-reference",[11217,11219],{"type":410,"value":11218},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":404,"tag":501,"props":11220,"children":11224},{"href":11221,"ariaLabel":11222,"className":11223,"dataFootnoteBackref":398},"#user-content-fnref-reference","Back to reference 6",[11157],[11225],{"type":410,"value":11160},{"type":404,"tag":11227,"props":11228,"children":11229},"style",{},[11230],{"type":410,"value":11231},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":398,"searchDepth":733,"depth":733,"links":11233},[11234,11243,11252,11262,11268,11278,11279],{"id":407,"depth":733,"text":407,"children":11235},[11236,11237,11238,11239,11240,11241,11242],{"id":414,"depth":1377,"text":414},{"id":488,"depth":1377,"text":488},{"id":614,"depth":1377,"text":614},{"id":1563,"depth":1377,"text":1563},{"id":2348,"depth":1377,"text":2348},{"id":2475,"depth":1377,"text":2475},{"id":2566,"depth":1377,"text":2566},{"id":2591,"depth":733,"text":2591,"children":11244},[11245,11246,11247,11248,11249,11250,11251],{"id":2596,"depth":1377,"text":414},{"id":3067,"depth":1377,"text":3067},{"id":3512,"depth":1377,"text":3512},{"id":4273,"depth":1377,"text":4273},{"id":5049,"depth":1377,"text":5049},{"id":5220,"depth":1377,"text":5220},{"id":6035,"depth":1377,"text":6035},{"id":6045,"depth":733,"text":6045,"children":11253},[11254,11255,11256,11257,11258,11259,11260,11261],{"id":6050,"depth":1377,"text":6050},{"id":6103,"depth":1377,"text":6103},{"id":6280,"depth":1377,"text":6280},{"id":6558,"depth":1377,"text":6558},{"id":6642,"depth":1377,"text":6642},{"id":6816,"depth":1377,"text":6816},{"id":6898,"depth":1377,"text":6898},{"id":6936,"depth":1377,"text":6936},{"id":6946,"depth":733,"text":6946,"children":11263},[11264,11265,11266,11267],{"id":6951,"depth":1377,"text":6050},{"id":6966,"depth":1377,"text":6969},{"id":8108,"depth":1377,"text":8108},{"id":8555,"depth":1377,"text":8555},{"id":8925,"depth":733,"text":8925,"children":11269},[11270,11271,11272,11273,11274,11275,11276,11277],{"id":8930,"depth":1377,"text":6050},{"id":8945,"depth":1377,"text":8945},{"id":9430,"depth":1377,"text":9430},{"id":9533,"depth":1377,"text":9533},{"id":9733,"depth":1377,"text":9733},{"id":10408,"depth":1377,"text":10408},{"id":10865,"depth":1377,"text":10865},{"id":11047,"depth":1377,"text":11047},{"id":11057,"depth":733,"text":11060},{"id":505,"depth":733,"text":11141},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11287,11291],{"_path":11288,"title":11289,"description":11290},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11292,"title":11293,"description":398},"/_books/9787301135907","日常生活中的自我呈现",1741604971535]