[{"data":1,"prerenderedAt":11311},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":410,"/_books/9787121386695-surround":11303},[4,32,83,102,129,135,141,147,393,399,405],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96,99],{"title":88,"_path":89},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":91,"_path":92},"🌐 AnySort","/tools/anysort",{"title":94,"_path":95},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":97,"_path":98},"👓 Crapto","/tools/crypto-inline",{"title":100,"_path":101},"🖨️ any-to-base64","/tools/any-to-base64",{"title":103,"_path":104,"children":105},"吉他剧场 / Music","/music",[106,108,111,114,117,120,123,126],{"title":107,"_path":104},"🎸 FingerStyle！",{"title":109,"_path":110},"🌬️ 等待的风","/music/wind",{"title":112,"_path":113},"💕 约定的海洋","/music/ocean",{"title":115,"_path":116},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":118,"_path":119},"🌏 残酷天使的行动纲领","/music/eva",{"title":121,"_path":122},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":124,"_path":125},"🍷 Wu Wei","/music/wu-wei",{"title":127,"_path":128},"🌅 无题","/music/untitled",{"title":130,"_path":131,"children":132},"画点什么 / Paint","/paint",[133],{"title":134,"_path":131},"🚧 正在施工",{"title":136,"_path":137,"children":138},"读书笔记 / Notes","/books",[139],{"title":140,"_path":137},"📕 读书笔记",{"title":142,"_path":143,"children":144},"知识地图 / Maps","/maps",[145],{"title":146,"_path":143},"🏁 知识地图",{"title":148,"_path":149,"children":150},"零散的笔记 / Gists","/gists",[151,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"title":152,"_path":149},"🧊 Gists",{"title":154,"_path":155},"网站的可访问性","/gists/accessibility",{"title":157,"_path":158},"Bit","/gists/bit",{"title":160,"_path":161},"图片模糊","/gists/blur",{"title":163,"_path":164},"渲染相关笔记","/gists/c4d",{"title":166,"_path":167},"CDN 问题记录","/gists/cdn",{"title":169,"_path":170},"消毒剂","/gists/cleaner",{"title":172,"_path":173},"Windows Command","/gists/cmd",{"title":175,"_path":176},"Command","/gists/command",{"title":178,"_path":179},"复杂科学","/gists/complexity-science",{"title":181,"_path":182},"GitHub Copilot","/gists/copilot",{"title":184,"_path":185},"宇宙","/gists/cosmos",{"title":187,"_path":188},"C++","/gists/cpp",{"title":190,"_path":191},"Data Structure","/gists/data-structure",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"设计模式","/gists/design-patterns",{"title":199,"_path":200},"Developer Experience","/gists/developer-experience",{"title":202,"_path":203},"Device Metrics","/gists/device-metrix",{"title":205,"_path":206},"数字化转型","/gists/digital-transformation",{"title":208,"_path":209},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":211,"_path":212},"正则表达式","/gists/eegex",{"title":214,"_path":215},"Emoji","/gists/emoji",{"title":217,"_path":218},"工程","/gists/engineering",{"title":220,"_path":221},"熵","/gists/entropy",{"title":223,"_path":224},"Environment","/gists/environment",{"title":226,"_path":227},"Erlang","/gists/erlang",{"title":229,"_path":230},"逃离塔克夫","/gists/escape-from-tarkov",{"title":232,"_path":233},"ESNext (ES6-ES11)","/gists/esnext",{"title":235,"_path":236},"Eval！","/gists/eval",{"title":238,"_path":239},"Flutter","/gists/flutter",{"title":241,"_path":242},"字体","/gists/font",{"title":244,"_path":245},"JS 函数式编程","/gists/functional",{"title":247,"_path":248},"游戏化","/gists/gamification",{"title":250,"_path":251},"Google C++ Standard","/gists/google-cpp-standard",{"title":253,"_path":254},"双向链接完全体","/gists/graph",{"title":256,"_path":257},"Hardwares","/gists/hardwares",{"title":259,"_path":260},"哈希冲突","/gists/hash-collision",{"title":262,"_path":263},"信息设计","/gists/information-design",{"title":265,"_path":266},"InstantPage","/gists/instant.page",{"title":268,"_path":269},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":271,"_path":272},"KVStore","/gists/key-value-db",{"title":274,"_path":275},"Kubernetes","/gists/kubernetes",{"title":277,"_path":278},"Makefile","/gists/makefile",{"title":280,"_path":281},"Markdown Inline Style","/gists/markdown-nice",{"title":283,"_path":284},"小程序","/gists/miniapp",{"title":286,"_path":287},"减小页面快照体积","/gists/minify-html",{"title":289,"_path":290},"mklink","/gists/mklink",{"title":292,"_path":293},"Mock","/gists/mock",{"title":295,"_path":296},"多人协作系统","/gists/multiplayer",{"title":298,"_path":299},"多端应用","/gists/multy-end-app",{"title":301,"_path":302},"神经科学","/gists/neuroscience",{"title":304,"_path":305},"OO","/gists/oo",{"title":307,"_path":308},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":310,"_path":311},"PInvoke","/gists/pinvoke",{"title":313,"_path":314},"像素","/gists/pixel",{"title":316,"_path":317},"PowerShell","/gists/powershell",{"title":319,"_path":320},"量子","/gists/quantum",{"title":322,"_path":323},"保持好奇心","/gists/questions",{"title":325,"_path":326},"React Native","/gists/react-native",{"title":328,"_path":329},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":331,"_path":332},"SEO","/gists/seo",{"title":334,"_path":335},"Shader","/gists/shader",{"title":337,"_path":338},"Shape Up","/gists/shape-up",{"title":340,"_path":341},"睡觉","/gists/sleep",{"title":343,"_path":344},"记录奇怪的问题","/gists/solved",{"title":346,"_path":347},"States","/gists/states",{"title":349,"_path":350},"Storage","/gists/storage",{"title":352,"_path":353},"音视频流处理","/gists/stream-cli",{"title":355,"_path":356},"Symbol","/gists/symbol",{"title":358,"_path":359},"系统论","/gists/systems-theory",{"title":361,"_path":362},"Taro","/gists/taro",{"title":364,"_path":365},"任务切片","/gists/task-slice",{"title":367,"_path":368},"技术偏好","/gists/tech-dudge",{"title":370,"_path":371},"Untitled","/gists/untitled",{"title":373,"_path":374},"可变字体","/gists/variable-font",{"title":376,"_path":377},"视觉错觉","/gists/visual-illusion",{"title":379,"_path":380},"SS(SSR)","/gists/vpn",{"title":382,"_path":383},"VS Code 插件开发","/gists/vscode-plugin",{"title":385,"_path":386},"Web Components","/gists/web-components",{"title":388,"_path":389},"Windows","/gists/windows",{"title":391,"_path":392},"查缺补漏","/gists/wrong",{"title":394,"_path":395,"children":396},"代码笔记 / Gists","/source-code",[397],{"title":398,"_path":395},"🚄 代码笔记",{"title":400,"_path":401,"children":402},"我 / Abount","/hire",[403],{"title":404,"_path":401},"📬 技术简历",{"title":406,"_path":407,"children":408},"todo","/todo",[409],{"title":406,"_path":407},{"_path":411,"_dir":412,"_draft":413,"_partial":414,"_locale":415,"title":416,"description":415,"body":417,"_type":11297,"_id":11298,"_source":11299,"_file":11300,"_stem":11301,"_extension":11302},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":418,"children":419,"toc":11249},"root",[420,428,434,440,445,503,508,529,534,573,578,591,596,601,606,611,629,634,639,644,657,662,667,672,677,792,797,802,862,867,908,913,946,951,956,981,986,1023,1028,1321,1326,1578,1583,1588,1593,1611,1616,1701,1706,1837,1842,1847,2353,2358,2363,2368,2373,2475,2480,2485,2490,2495,2500,2505,2510,2563,2568,2581,2586,2591,2596,2601,2606,2611,2616,2621,2626,2631,2636,2812,2817,2909,2914,2919,2924,2929,3046,3064,3069,3082,3087,3092,3097,3110,3115,3120,3256,3271,3276,3356,3361,3408,3522,3527,3532,3537,3722,3727,3732,3737,3900,3905,3933,3938,3951,3956,4208,4213,4218,4223,4283,4288,4293,4298,4303,4308,4406,4411,4416,4434,4439,4452,4457,4462,4475,4480,4485,4583,4588,4593,4598,4790,4795,5064,5069,5074,5092,5097,5212,5217,5235,5240,5245,5250,5255,5446,5451,5464,5469,6050,6055,6060,6065,6070,6075,6080,6085,6090,6108,6113,6118,6123,6128,6248,6253,6258,6263,6275,6280,6285,6290,6295,6300,6318,6435,6440,6573,6578,6583,6588,6606,6611,6616,6657,6662,6667,6672,6739,6744,6749,6793,6798,6803,6808,6826,6831,6836,6841,6908,6913,6918,6923,6941,6946,6951,6956,6961,6966,6971,6976,6981,6987,6992,7010,7015,7159,7177,7398,7403,7408,7539,7544,7562,7567,7615,7620,7742,7747,7752,8123,8128,8133,8138,8143,8148,8570,8575,8580,8585,8603,8608,8700,8705,8710,8897,8902,8907,8912,8917,8935,8940,8945,8950,8955,8960,8965,8970,9139,9144,9149,9295,9300,9440,9445,9450,9455,9460,9465,9497,9502,9548,9553,9558,9738,9743,9748,9753,9758,9763,9768,10264,10269,10274,10304,10309,10314,10319,10423,10428,10433,10722,10727,10732,10875,10880,10885,10890,10895,10900,10905,11057,11062,11067,11072,11078,11146,11243],{"type":421,"tag":422,"props":423,"children":425},"element","h2",{"id":424},"语法",[426],{"type":427,"value":424},"text",{"type":421,"tag":429,"props":430,"children":432},"h3",{"id":431},"语法综述",[433],{"type":427,"value":431},{"type":421,"tag":435,"props":436,"children":437},"p",{},[438],{"type":427,"value":439},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":421,"tag":435,"props":441,"children":442},{},[443],{"type":427,"value":444},"可以使用 --check 指令检测语法错误：",{"type":421,"tag":446,"props":447,"children":451},"pre",{"className":448,"code":449,"language":450,"meta":415,"style":415},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[452],{"type":421,"tag":453,"props":454,"children":455},"code",{"__ignoreMap":415},[456],{"type":421,"tag":457,"props":458,"children":461},"span",{"class":459,"line":460},"line",1,[462,468,474,480,485,491,497],{"type":421,"tag":457,"props":463,"children":465},{"style":464},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[466],{"type":427,"value":467},"echo",{"type":421,"tag":457,"props":469,"children":471},{"style":470},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[472],{"type":427,"value":473}," '",{"type":421,"tag":457,"props":475,"children":477},{"style":476},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[478],{"type":427,"value":479},"\"hello world\"",{"type":421,"tag":457,"props":481,"children":482},{"style":470},[483],{"type":427,"value":484},"'",{"type":421,"tag":457,"props":486,"children":488},{"style":487},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[489],{"type":427,"value":490}," |",{"type":421,"tag":457,"props":492,"children":494},{"style":493},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[495],{"type":427,"value":496}," node",{"type":421,"tag":457,"props":498,"children":500},{"style":499},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[501],{"type":427,"value":502}," -c\n",{"type":421,"tag":429,"props":504,"children":506},{"id":505},"声明语法",[507],{"type":427,"value":505},{"type":421,"tag":435,"props":509,"children":510},{},[511,513,527],{"type":427,"value":512},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":421,"tag":514,"props":515,"children":516},"sup",{},[517],{"type":421,"tag":518,"props":519,"children":524},"a",{"href":520,"ariaDescribedBy":521,"dataFootnoteRef":415,"id":523},"#user-content-fn-first-class",[522],"footnote-label","user-content-fnref-first-class",[525],{"type":427,"value":526},"1",{"type":427,"value":528},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":421,"tag":435,"props":530,"children":531},{},[532],{"type":427,"value":533},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":421,"tag":535,"props":536,"children":537},"ul",{},[538,557],{"type":421,"tag":539,"props":540,"children":541},"li",{},[542,544,555],{"type":427,"value":543},"基本数据类型：undefined、string、number、object",{"type":421,"tag":514,"props":545,"children":546},{},[547],{"type":421,"tag":518,"props":548,"children":552},{"href":549,"ariaDescribedBy":550,"dataFootnoteRef":415,"id":551},"#user-content-fn-oo",[522],"user-content-fnref-oo",[553],{"type":427,"value":554},"2",{"type":427,"value":556},"、function、boolean、symbol、bigint",{"type":421,"tag":539,"props":558,"children":559},{},[560,562],{"type":427,"value":561},"值类型和引用类型",{"type":421,"tag":514,"props":563,"children":564},{},[565],{"type":421,"tag":518,"props":566,"children":570},{"href":567,"ariaDescribedBy":568,"dataFootnoteRef":415,"id":569},"#user-content-fn-string",[522],"user-content-fnref-string",[571],{"type":427,"value":572},"3",{"type":421,"tag":435,"props":574,"children":575},{},[576],{"type":427,"value":577},"如果算上规范，可以再增加两种类型系统：",{"type":421,"tag":535,"props":579,"children":580},{},[581,586],{"type":421,"tag":539,"props":582,"children":583},{},[584],{"type":427,"value":585},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":421,"tag":539,"props":587,"children":588},{},[589],{"type":427,"value":590},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":421,"tag":435,"props":592,"children":593},{},[594],{"type":427,"value":595},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":421,"tag":435,"props":597,"children":598},{},[599],{"type":427,"value":600},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":421,"tag":435,"props":602,"children":603},{},[604],{"type":427,"value":605},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":421,"tag":435,"props":607,"children":608},{},[609],{"type":427,"value":610},"相关字符串字面量的一些冷知识：",{"type":421,"tag":535,"props":612,"children":613},{},[614,619,624],{"type":421,"tag":539,"props":615,"children":616},{},[617],{"type":427,"value":618},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":421,"tag":539,"props":620,"children":621},{},[622],{"type":427,"value":623},"空字符串也能作为对象的键。",{"type":421,"tag":539,"props":625,"children":626},{},[627],{"type":427,"value":628},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":421,"tag":429,"props":630,"children":632},{"id":631},"表达式运算",[633],{"type":427,"value":631},{"type":421,"tag":435,"props":635,"children":636},{},[637],{"type":427,"value":638},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":421,"tag":435,"props":640,"children":641},{},[642],{"type":427,"value":643},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":421,"tag":535,"props":645,"children":646},{},[647,652],{"type":421,"tag":539,"props":648,"children":649},{},[650],{"type":427,"value":651},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":421,"tag":539,"props":653,"children":654},{},[655],{"type":427,"value":656},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":421,"tag":435,"props":658,"children":659},{},[660],{"type":427,"value":661},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":421,"tag":435,"props":663,"children":664},{},[665],{"type":427,"value":666},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":421,"tag":435,"props":668,"children":669},{},[670],{"type":427,"value":671},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":421,"tag":435,"props":673,"children":674},{},[675],{"type":427,"value":676},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":421,"tag":446,"props":678,"children":682},{"className":679,"code":680,"language":681,"meta":415,"style":415},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[683],{"type":421,"tag":453,"props":684,"children":685},{"__ignoreMap":415},[686,748],{"type":421,"tag":457,"props":687,"children":688},{"class":459,"line":460},[689,695,701,707,712,717,723,728,733,737,742],{"type":421,"tag":457,"props":690,"children":692},{"style":691},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[693],{"type":427,"value":694},"Object",{"type":421,"tag":457,"props":696,"children":698},{"style":697},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[699],{"type":427,"value":700},".",{"type":421,"tag":457,"props":702,"children":704},{"style":703},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[705],{"type":427,"value":706},"is",{"type":421,"tag":457,"props":708,"children":709},{"style":691},[710],{"type":427,"value":711},"(",{"type":421,"tag":457,"props":713,"children":714},{"style":487},[715],{"type":427,"value":716},"+",{"type":421,"tag":457,"props":718,"children":720},{"style":719},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[721],{"type":427,"value":722},"0",{"type":421,"tag":457,"props":724,"children":725},{"style":697},[726],{"type":427,"value":727},",",{"type":421,"tag":457,"props":729,"children":730},{"style":487},[731],{"type":427,"value":732}," -",{"type":421,"tag":457,"props":734,"children":735},{"style":719},[736],{"type":427,"value":722},{"type":421,"tag":457,"props":738,"children":739},{"style":691},[740],{"type":427,"value":741},") ",{"type":421,"tag":457,"props":743,"children":745},{"style":744},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[746],{"type":427,"value":747},"// false\n",{"type":421,"tag":457,"props":749,"children":751},{"class":459,"line":750},2,[752,756,760,764,768,774,778,783,787],{"type":421,"tag":457,"props":753,"children":754},{"style":691},[755],{"type":427,"value":694},{"type":421,"tag":457,"props":757,"children":758},{"style":697},[759],{"type":427,"value":700},{"type":421,"tag":457,"props":761,"children":762},{"style":703},[763],{"type":427,"value":706},{"type":421,"tag":457,"props":765,"children":766},{"style":691},[767],{"type":427,"value":711},{"type":421,"tag":457,"props":769,"children":771},{"style":770},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[772],{"type":427,"value":773},"NaN",{"type":421,"tag":457,"props":775,"children":776},{"style":697},[777],{"type":427,"value":727},{"type":421,"tag":457,"props":779,"children":780},{"style":770},[781],{"type":427,"value":782}," NaN",{"type":421,"tag":457,"props":784,"children":785},{"style":691},[786],{"type":427,"value":741},{"type":421,"tag":457,"props":788,"children":789},{"style":744},[790],{"type":427,"value":791},"// true\n",{"type":421,"tag":435,"props":793,"children":794},{},[795],{"type":427,"value":796},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":421,"tag":435,"props":798,"children":799},{},[800],{"type":427,"value":801},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":421,"tag":446,"props":803,"children":805},{"className":679,"code":804,"language":681,"meta":415,"style":415},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[806],{"type":421,"tag":453,"props":807,"children":808},{"__ignoreMap":415},[809,834],{"type":421,"tag":457,"props":810,"children":811},{"class":459,"line":460},[812,817,821,825,830],{"type":421,"tag":457,"props":813,"children":814},{"style":703},[815],{"type":427,"value":816},"Boolean",{"type":421,"tag":457,"props":818,"children":819},{"style":691},[820],{"type":427,"value":711},{"type":421,"tag":457,"props":822,"children":823},{"style":703},[824],{"type":427,"value":355},{"type":421,"tag":457,"props":826,"children":827},{"style":691},[828],{"type":427,"value":829},"()) ",{"type":421,"tag":457,"props":831,"children":832},{"style":744},[833],{"type":427,"value":791},{"type":421,"tag":457,"props":835,"children":836},{"class":459,"line":750},[837,841,846,851,857],{"type":421,"tag":457,"props":838,"children":839},{"style":703},[840],{"type":427,"value":355},{"type":421,"tag":457,"props":842,"children":843},{"style":691},[844],{"type":427,"value":845},"() ",{"type":421,"tag":457,"props":847,"children":848},{"style":487},[849],{"type":427,"value":850},"==",{"type":421,"tag":457,"props":852,"children":854},{"style":853},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[855],{"type":427,"value":856}," true",{"type":421,"tag":457,"props":858,"children":859},{"style":744},[860],{"type":427,"value":861}," // false\n",{"type":421,"tag":435,"props":863,"children":864},{},[865],{"type":427,"value":866},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":421,"tag":446,"props":868,"children":870},{"className":448,"code":869,"language":450,"meta":415,"style":415},"echo \"1 = 1\" | node -c\n",[871],{"type":421,"tag":453,"props":872,"children":873},{"__ignoreMap":415},[874],{"type":421,"tag":457,"props":875,"children":876},{"class":459,"line":460},[877,881,886,891,896,900,904],{"type":421,"tag":457,"props":878,"children":879},{"style":464},[880],{"type":427,"value":467},{"type":421,"tag":457,"props":882,"children":883},{"style":470},[884],{"type":427,"value":885}," \"",{"type":421,"tag":457,"props":887,"children":888},{"style":476},[889],{"type":427,"value":890},"1 = 1",{"type":421,"tag":457,"props":892,"children":893},{"style":470},[894],{"type":427,"value":895},"\"",{"type":421,"tag":457,"props":897,"children":898},{"style":487},[899],{"type":427,"value":490},{"type":421,"tag":457,"props":901,"children":902},{"style":493},[903],{"type":427,"value":496},{"type":421,"tag":457,"props":905,"children":906},{"style":499},[907],{"type":427,"value":502},{"type":421,"tag":435,"props":909,"children":910},{},[911],{"type":427,"value":912},"函数调用也有“隐式调用”这一概念：",{"type":421,"tag":535,"props":914,"children":915},{},[916,921,926,931,936,941],{"type":421,"tag":539,"props":917,"children":918},{},[919],{"type":427,"value":920},"使用 new 运算符",{"type":421,"tag":539,"props":922,"children":923},{},[924],{"type":427,"value":925},"模板处理函数 + 模板字符串调用",{"type":421,"tag":539,"props":927,"children":928},{},[929],{"type":427,"value":930},"函数作为属性存取器且发生了属性存取操作时",{"type":421,"tag":539,"props":932,"children":933},{},[934],{"type":427,"value":935},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":421,"tag":539,"props":937,"children":938},{},[939],{"type":427,"value":940},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":421,"tag":539,"props":942,"children":943},{},[944],{"type":427,"value":945},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":421,"tag":435,"props":947,"children":948},{},[949],{"type":427,"value":950},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":421,"tag":435,"props":952,"children":953},{},[954],{"type":427,"value":955},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":421,"tag":446,"props":957,"children":959},{"className":679,"code":958,"language":681,"meta":415,"style":415},"typeof x // undefined\n",[960],{"type":421,"tag":453,"props":961,"children":962},{"__ignoreMap":415},[963],{"type":421,"tag":457,"props":964,"children":965},{"class":459,"line":460},[966,971,976],{"type":421,"tag":457,"props":967,"children":968},{"style":487},[969],{"type":427,"value":970},"typeof",{"type":421,"tag":457,"props":972,"children":973},{"style":691},[974],{"type":427,"value":975}," x ",{"type":421,"tag":457,"props":977,"children":978},{"style":744},[979],{"type":427,"value":980},"// undefined\n",{"type":421,"tag":435,"props":982,"children":983},{},[984],{"type":427,"value":985},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":421,"tag":446,"props":987,"children":989},{"className":679,"code":988,"language":681,"meta":415,"style":415},"typeof x // ReferenceError\nlet x\n",[990],{"type":421,"tag":453,"props":991,"children":992},{"__ignoreMap":415},[993,1009],{"type":421,"tag":457,"props":994,"children":995},{"class":459,"line":460},[996,1000,1004],{"type":421,"tag":457,"props":997,"children":998},{"style":487},[999],{"type":427,"value":970},{"type":421,"tag":457,"props":1001,"children":1002},{"style":691},[1003],{"type":427,"value":975},{"type":421,"tag":457,"props":1005,"children":1006},{"style":744},[1007],{"type":427,"value":1008},"// ReferenceError\n",{"type":421,"tag":457,"props":1010,"children":1011},{"class":459,"line":750},[1012,1018],{"type":421,"tag":457,"props":1013,"children":1015},{"style":1014},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[1016],{"type":427,"value":1017},"let",{"type":421,"tag":457,"props":1019,"children":1020},{"style":691},[1021],{"type":427,"value":1022}," x\n",{"type":421,"tag":435,"props":1024,"children":1025},{},[1026],{"type":427,"value":1027},"完整的运算符优先级列表如下：",{"type":421,"tag":1029,"props":1030,"children":1031},"table",{},[1032,1051],{"type":421,"tag":1033,"props":1034,"children":1035},"thead",{},[1036],{"type":421,"tag":1037,"props":1038,"children":1039},"tr",{},[1040,1046],{"type":421,"tag":1041,"props":1042,"children":1043},"th",{},[1044],{"type":427,"value":1045},"运算符",{"type":421,"tag":1041,"props":1047,"children":1048},{},[1049],{"type":427,"value":1050},"描述",{"type":421,"tag":1052,"props":1053,"children":1054},"tbody",{},[1055,1069,1087,1100,1113,1126,1139,1152,1165,1178,1191,1204,1217,1230,1243,1256,1269,1282,1295,1308],{"type":421,"tag":1037,"props":1056,"children":1057},{},[1058,1064],{"type":421,"tag":1059,"props":1060,"children":1061},"td",{},[1062],{"type":427,"value":1063},"()",{"type":421,"tag":1059,"props":1065,"children":1066},{},[1067],{"type":427,"value":1068},"成组运算",{"type":421,"tag":1037,"props":1070,"children":1071},{},[1072,1082],{"type":421,"tag":1059,"props":1073,"children":1074},{},[1075,1077,1080],{"type":427,"value":1076},".、",{"type":421,"tag":457,"props":1078,"children":1079},{},[],{"type":427,"value":1081},"、new ()",{"type":421,"tag":1059,"props":1083,"children":1084},{},[1085],{"type":427,"value":1086},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":421,"tag":1037,"props":1088,"children":1089},{},[1090,1095],{"type":421,"tag":1059,"props":1091,"children":1092},{},[1093],{"type":427,"value":1094},"()、new",{"type":421,"tag":1059,"props":1096,"children":1097},{},[1098],{"type":427,"value":1099},"函数调用、new 运算符",{"type":421,"tag":1037,"props":1101,"children":1102},{},[1103,1108],{"type":421,"tag":1059,"props":1104,"children":1105},{},[1106],{"type":427,"value":1107},"++、--",{"type":421,"tag":1059,"props":1109,"children":1110},{},[1111],{"type":427,"value":1112},"后置递增、后置递减",{"type":421,"tag":1037,"props":1114,"children":1115},{},[1116,1121],{"type":421,"tag":1059,"props":1117,"children":1118},{},[1119],{"type":427,"value":1120},"+、-、++、--、~、!、delete、typeof、void",{"type":421,"tag":1059,"props":1122,"children":1123},{},[1124],{"type":427,"value":1125},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":421,"tag":1037,"props":1127,"children":1128},{},[1129,1134],{"type":421,"tag":1059,"props":1130,"children":1131},{},[1132],{"type":427,"value":1133},"*、/、%",{"type":421,"tag":1059,"props":1135,"children":1136},{},[1137],{"type":427,"value":1138},"乘法、除法、取模",{"type":421,"tag":1037,"props":1140,"children":1141},{},[1142,1147],{"type":421,"tag":1059,"props":1143,"children":1144},{},[1145],{"type":427,"value":1146},"+、-、+",{"type":421,"tag":1059,"props":1148,"children":1149},{},[1150],{"type":427,"value":1151},"加法、减法、字符串连接",{"type":421,"tag":1037,"props":1153,"children":1154},{},[1155,1160],{"type":421,"tag":1059,"props":1156,"children":1157},{},[1158],{"type":427,"value":1159},"\u003C\u003C、>>、>>>",{"type":421,"tag":1059,"props":1161,"children":1162},{},[1163],{"type":427,"value":1164},"移位运算符",{"type":421,"tag":1037,"props":1166,"children":1167},{},[1168,1173],{"type":421,"tag":1059,"props":1169,"children":1170},{},[1171],{"type":427,"value":1172},"\u003C、\u003C=、>=、>、in、instanceof",{"type":421,"tag":1059,"props":1174,"children":1175},{},[1176],{"type":427,"value":1177},"关系运算符、in、instanceof",{"type":421,"tag":1037,"props":1179,"children":1180},{},[1181,1186],{"type":421,"tag":1059,"props":1182,"children":1183},{},[1184],{"type":427,"value":1185},"==、!=、===、!==",{"type":421,"tag":1059,"props":1187,"children":1188},{},[1189],{"type":427,"value":1190},"等值检测",{"type":421,"tag":1037,"props":1192,"children":1193},{},[1194,1199],{"type":421,"tag":1059,"props":1195,"children":1196},{},[1197],{"type":427,"value":1198},"&",{"type":421,"tag":1059,"props":1200,"children":1201},{},[1202],{"type":427,"value":1203},"按位与",{"type":421,"tag":1037,"props":1205,"children":1206},{},[1207,1212],{"type":421,"tag":1059,"props":1208,"children":1209},{},[1210],{"type":427,"value":1211},"^",{"type":421,"tag":1059,"props":1213,"children":1214},{},[1215],{"type":427,"value":1216},"按位异或",{"type":421,"tag":1037,"props":1218,"children":1219},{},[1220,1225],{"type":421,"tag":1059,"props":1221,"children":1222},{},[1223],{"type":427,"value":1224},"|",{"type":421,"tag":1059,"props":1226,"children":1227},{},[1228],{"type":427,"value":1229},"按位或",{"type":421,"tag":1037,"props":1231,"children":1232},{},[1233,1238],{"type":421,"tag":1059,"props":1234,"children":1235},{},[1236],{"type":427,"value":1237},"&&",{"type":421,"tag":1059,"props":1239,"children":1240},{},[1241],{"type":427,"value":1242},"逻辑与",{"type":421,"tag":1037,"props":1244,"children":1245},{},[1246,1251],{"type":421,"tag":1059,"props":1247,"children":1248},{},[1249],{"type":427,"value":1250},"||",{"type":421,"tag":1059,"props":1252,"children":1253},{},[1254],{"type":427,"value":1255},"逻辑或",{"type":421,"tag":1037,"props":1257,"children":1258},{},[1259,1264],{"type":421,"tag":1059,"props":1260,"children":1261},{},[1262],{"type":427,"value":1263},"?:",{"type":421,"tag":1059,"props":1265,"children":1266},{},[1267],{"type":427,"value":1268},"三木运算",{"type":421,"tag":1037,"props":1270,"children":1271},{},[1272,1277],{"type":421,"tag":1059,"props":1273,"children":1274},{},[1275],{"type":427,"value":1276},"=、oP=",{"type":421,"tag":1059,"props":1278,"children":1279},{},[1280],{"type":427,"value":1281},"赋值、运算赋值",{"type":421,"tag":1037,"props":1283,"children":1284},{},[1285,1290],{"type":421,"tag":1059,"props":1286,"children":1287},{},[1288],{"type":427,"value":1289},"yield、yield*",{"type":421,"tag":1059,"props":1291,"children":1292},{},[1293],{"type":427,"value":1294},"yield 表达式",{"type":421,"tag":1037,"props":1296,"children":1297},{},[1298,1303],{"type":421,"tag":1059,"props":1299,"children":1300},{},[1301],{"type":427,"value":1302},"...",{"type":421,"tag":1059,"props":1304,"children":1305},{},[1306],{"type":427,"value":1307},"展开运算符",{"type":421,"tag":1037,"props":1309,"children":1310},{},[1311,1316],{"type":421,"tag":1059,"props":1312,"children":1313},{},[1314],{"type":427,"value":1315},"，",{"type":421,"tag":1059,"props":1317,"children":1318},{},[1319],{"type":427,"value":1320},"逗号运算符、多重求值",{"type":421,"tag":435,"props":1322,"children":1323},{},[1324],{"type":427,"value":1325},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":421,"tag":446,"props":1327,"children":1329},{"className":679,"code":1328,"language":681,"meta":415,"style":415},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1330],{"type":421,"tag":453,"props":1331,"children":1332},{"__ignoreMap":415},[1333,1356,1392,1433,1442,1477,1514,1522,1549],{"type":421,"tag":457,"props":1334,"children":1335},{"class":459,"line":460},[1336,1341,1346,1351],{"type":421,"tag":457,"props":1337,"children":1338},{"style":1014},[1339],{"type":427,"value":1340},"function",{"type":421,"tag":457,"props":1342,"children":1343},{"style":703},[1344],{"type":427,"value":1345}," A",{"type":421,"tag":457,"props":1347,"children":1348},{"style":697},[1349],{"type":427,"value":1350}," ()",{"type":421,"tag":457,"props":1352,"children":1353},{"style":697},[1354],{"type":427,"value":1355}," {\n",{"type":421,"tag":457,"props":1357,"children":1358},{"class":459,"line":750},[1359,1365,1369,1374,1379,1383,1387],{"type":421,"tag":457,"props":1360,"children":1362},{"style":1361},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1363],{"type":427,"value":1364},"  this",{"type":421,"tag":457,"props":1366,"children":1367},{"style":697},[1368],{"type":427,"value":700},{"type":421,"tag":457,"props":1370,"children":1371},{"style":691},[1372],{"type":427,"value":1373},"b",{"type":421,"tag":457,"props":1375,"children":1376},{"style":487},[1377],{"type":427,"value":1378}," =",{"type":421,"tag":457,"props":1380,"children":1381},{"style":470},[1382],{"type":427,"value":473},{"type":421,"tag":457,"props":1384,"children":1385},{"style":476},[1386],{"type":427,"value":1373},{"type":421,"tag":457,"props":1388,"children":1389},{"style":470},[1390],{"type":427,"value":1391},"'\n",{"type":421,"tag":457,"props":1393,"children":1395},{"class":459,"line":1394},3,[1396,1401,1405,1410,1415,1419,1424,1428],{"type":421,"tag":457,"props":1397,"children":1398},{"style":691},[1399],{"type":427,"value":1400},"  console",{"type":421,"tag":457,"props":1402,"children":1403},{"style":697},[1404],{"type":427,"value":700},{"type":421,"tag":457,"props":1406,"children":1407},{"style":703},[1408],{"type":427,"value":1409},"log",{"type":421,"tag":457,"props":1411,"children":1413},{"style":1412},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1414],{"type":427,"value":711},{"type":421,"tag":457,"props":1416,"children":1417},{"style":470},[1418],{"type":427,"value":484},{"type":421,"tag":457,"props":1420,"children":1421},{"style":476},[1422],{"type":427,"value":1423},"A().b",{"type":421,"tag":457,"props":1425,"children":1426},{"style":470},[1427],{"type":427,"value":484},{"type":421,"tag":457,"props":1429,"children":1430},{"style":1412},[1431],{"type":427,"value":1432},")\n",{"type":421,"tag":457,"props":1434,"children":1436},{"class":459,"line":1435},4,[1437],{"type":421,"tag":457,"props":1438,"children":1439},{"style":697},[1440],{"type":427,"value":1441},"}\n",{"type":421,"tag":457,"props":1443,"children":1445},{"class":459,"line":1444},5,[1446,1452,1456,1460,1464,1469,1473],{"type":421,"tag":457,"props":1447,"children":1449},{"style":1448},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1450],{"type":427,"value":1451},"A",{"type":421,"tag":457,"props":1453,"children":1454},{"style":697},[1455],{"type":427,"value":700},{"type":421,"tag":457,"props":1457,"children":1458},{"style":703},[1459],{"type":427,"value":1373},{"type":421,"tag":457,"props":1461,"children":1462},{"style":487},[1463],{"type":427,"value":1378},{"type":421,"tag":457,"props":1465,"children":1466},{"style":1014},[1467],{"type":427,"value":1468}," function",{"type":421,"tag":457,"props":1470,"children":1471},{"style":697},[1472],{"type":427,"value":1350},{"type":421,"tag":457,"props":1474,"children":1475},{"style":697},[1476],{"type":427,"value":1355},{"type":421,"tag":457,"props":1478,"children":1480},{"class":459,"line":1479},6,[1481,1485,1489,1493,1497,1501,1506,1510],{"type":421,"tag":457,"props":1482,"children":1483},{"style":691},[1484],{"type":427,"value":1400},{"type":421,"tag":457,"props":1486,"children":1487},{"style":697},[1488],{"type":427,"value":700},{"type":421,"tag":457,"props":1490,"children":1491},{"style":703},[1492],{"type":427,"value":1409},{"type":421,"tag":457,"props":1494,"children":1495},{"style":1412},[1496],{"type":427,"value":711},{"type":421,"tag":457,"props":1498,"children":1499},{"style":470},[1500],{"type":427,"value":484},{"type":421,"tag":457,"props":1502,"children":1503},{"style":476},[1504],{"type":427,"value":1505},"A.b",{"type":421,"tag":457,"props":1507,"children":1508},{"style":470},[1509],{"type":427,"value":484},{"type":421,"tag":457,"props":1511,"children":1512},{"style":1412},[1513],{"type":427,"value":1432},{"type":421,"tag":457,"props":1515,"children":1517},{"class":459,"line":1516},7,[1518],{"type":421,"tag":457,"props":1519,"children":1520},{"style":697},[1521],{"type":427,"value":1441},{"type":421,"tag":457,"props":1523,"children":1525},{"class":459,"line":1524},8,[1526,1531,1535,1539,1544],{"type":421,"tag":457,"props":1527,"children":1528},{"style":487},[1529],{"type":427,"value":1530},"new",{"type":421,"tag":457,"props":1532,"children":1533},{"style":1448},[1534],{"type":427,"value":1345},{"type":421,"tag":457,"props":1536,"children":1537},{"style":697},[1538],{"type":427,"value":700},{"type":421,"tag":457,"props":1540,"children":1541},{"style":691},[1542],{"type":427,"value":1543},"b ",{"type":421,"tag":457,"props":1545,"children":1546},{"style":744},[1547],{"type":427,"value":1548},"// A.b\n",{"type":421,"tag":457,"props":1550,"children":1552},{"class":459,"line":1551},9,[1553,1557,1561,1565,1569,1573],{"type":421,"tag":457,"props":1554,"children":1555},{"style":487},[1556],{"type":427,"value":1530},{"type":421,"tag":457,"props":1558,"children":1559},{"style":703},[1560],{"type":427,"value":1345},{"type":421,"tag":457,"props":1562,"children":1563},{"style":691},[1564],{"type":427,"value":1063},{"type":421,"tag":457,"props":1566,"children":1567},{"style":697},[1568],{"type":427,"value":700},{"type":421,"tag":457,"props":1570,"children":1571},{"style":691},[1572],{"type":427,"value":1543},{"type":421,"tag":457,"props":1574,"children":1575},{"style":744},[1576],{"type":427,"value":1577},"// A().b\n",{"type":421,"tag":429,"props":1579,"children":1581},{"id":1580},"语句",[1582],{"type":427,"value":1580},{"type":421,"tag":435,"props":1584,"children":1585},{},[1586],{"type":427,"value":1587},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":421,"tag":435,"props":1589,"children":1590},{},[1591],{"type":427,"value":1592},"需要注意的点：",{"type":421,"tag":535,"props":1594,"children":1595},{},[1596,1601,1606],{"type":421,"tag":539,"props":1597,"children":1598},{},[1599],{"type":427,"value":1600},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":421,"tag":539,"props":1602,"children":1603},{},[1604],{"type":427,"value":1605},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":421,"tag":539,"props":1607,"children":1608},{},[1609],{"type":427,"value":1610},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":421,"tag":435,"props":1612,"children":1613},{},[1614],{"type":427,"value":1615},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":421,"tag":446,"props":1617,"children":1619},{"className":679,"code":1618,"language":681,"meta":415,"style":415},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1620],{"type":421,"tag":453,"props":1621,"children":1622},{"__ignoreMap":415},[1623,1654,1681],{"type":421,"tag":457,"props":1624,"children":1625},{"class":459,"line":460},[1626,1630,1635,1639,1645,1650],{"type":421,"tag":457,"props":1627,"children":1628},{"style":1014},[1629],{"type":427,"value":1340},{"type":421,"tag":457,"props":1631,"children":1632},{"style":703},[1633],{"type":427,"value":1634}," log",{"type":421,"tag":457,"props":1636,"children":1637},{"style":697},[1638],{"type":427,"value":711},{"type":421,"tag":457,"props":1640,"children":1642},{"style":1641},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1643],{"type":427,"value":1644},"arg",{"type":421,"tag":457,"props":1646,"children":1647},{"style":697},[1648],{"type":427,"value":1649},")",{"type":421,"tag":457,"props":1651,"children":1652},{"style":697},[1653],{"type":427,"value":1355},{"type":421,"tag":457,"props":1655,"children":1656},{"class":459,"line":750},[1657,1661,1665,1669,1673,1677],{"type":421,"tag":457,"props":1658,"children":1659},{"style":691},[1660],{"type":427,"value":1400},{"type":421,"tag":457,"props":1662,"children":1663},{"style":697},[1664],{"type":427,"value":700},{"type":421,"tag":457,"props":1666,"children":1667},{"style":703},[1668],{"type":427,"value":1409},{"type":421,"tag":457,"props":1670,"children":1671},{"style":1412},[1672],{"type":427,"value":711},{"type":421,"tag":457,"props":1674,"children":1675},{"style":691},[1676],{"type":427,"value":1644},{"type":421,"tag":457,"props":1678,"children":1679},{"style":1412},[1680],{"type":427,"value":1432},{"type":421,"tag":457,"props":1682,"children":1683},{"class":459,"line":1394},[1684,1689,1693,1697],{"type":421,"tag":457,"props":1685,"children":1686},{"style":697},[1687],{"type":427,"value":1688},"}",{"type":421,"tag":457,"props":1690,"children":1691},{"style":691},[1692],{"type":427,"value":711},{"type":421,"tag":457,"props":1694,"children":1695},{"style":719},[1696],{"type":427,"value":554},{"type":421,"tag":457,"props":1698,"children":1699},{"style":691},[1700],{"type":427,"value":1432},{"type":421,"tag":435,"props":1702,"children":1703},{},[1704],{"type":427,"value":1705},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":421,"tag":446,"props":1707,"children":1709},{"className":679,"code":1708,"language":681,"meta":415,"style":415},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1710],{"type":421,"tag":453,"props":1711,"children":1712},{"__ignoreMap":415},[1713,1765,1803,1830],{"type":421,"tag":457,"props":1714,"children":1715},{"class":459,"line":460},[1716,1722,1727,1732,1736,1741,1745,1750,1755,1760],{"type":421,"tag":457,"props":1717,"children":1719},{"style":1718},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1720],{"type":427,"value":1721},"try",{"type":421,"tag":457,"props":1723,"children":1724},{"style":697},[1725],{"type":427,"value":1726}," {",{"type":421,"tag":457,"props":1728,"children":1729},{"style":1718},[1730],{"type":427,"value":1731}," throw",{"type":421,"tag":457,"props":1733,"children":1734},{"style":470},[1735],{"type":427,"value":473},{"type":421,"tag":457,"props":1737,"children":1738},{"style":476},[1739],{"type":427,"value":1740},"test",{"type":421,"tag":457,"props":1742,"children":1743},{"style":470},[1744],{"type":427,"value":484},{"type":421,"tag":457,"props":1746,"children":1747},{"style":697},[1748],{"type":427,"value":1749}," }",{"type":421,"tag":457,"props":1751,"children":1752},{"style":1718},[1753],{"type":427,"value":1754}," catch",{"type":421,"tag":457,"props":1756,"children":1757},{"style":691},[1758],{"type":427,"value":1759}," (e) ",{"type":421,"tag":457,"props":1761,"children":1762},{"style":697},[1763],{"type":427,"value":1764},"{\n",{"type":421,"tag":457,"props":1766,"children":1767},{"class":459,"line":750},[1768,1772,1776,1780,1784,1789,1793,1798],{"type":421,"tag":457,"props":1769,"children":1770},{"style":691},[1771],{"type":427,"value":1400},{"type":421,"tag":457,"props":1773,"children":1774},{"style":697},[1775],{"type":427,"value":700},{"type":421,"tag":457,"props":1777,"children":1778},{"style":703},[1779],{"type":427,"value":1409},{"type":421,"tag":457,"props":1781,"children":1782},{"style":1412},[1783],{"type":427,"value":711},{"type":421,"tag":457,"props":1785,"children":1786},{"style":691},[1787],{"type":427,"value":1788},"e",{"type":421,"tag":457,"props":1790,"children":1791},{"style":1412},[1792],{"type":427,"value":1649},{"type":421,"tag":457,"props":1794,"children":1795},{"style":697},[1796],{"type":427,"value":1797},";",{"type":421,"tag":457,"props":1799,"children":1800},{"style":744},[1801],{"type":427,"value":1802}," // test\n",{"type":421,"tag":457,"props":1804,"children":1805},{"class":459,"line":1394},[1806,1811,1816,1820,1825],{"type":421,"tag":457,"props":1807,"children":1808},{"style":1014},[1809],{"type":427,"value":1810},"  var",{"type":421,"tag":457,"props":1812,"children":1813},{"style":691},[1814],{"type":427,"value":1815}," e",{"type":421,"tag":457,"props":1817,"children":1818},{"style":487},[1819],{"type":427,"value":1378},{"type":421,"tag":457,"props":1821,"children":1822},{"style":719},[1823],{"type":427,"value":1824}," 1",{"type":421,"tag":457,"props":1826,"children":1827},{"style":697},[1828],{"type":427,"value":1829},";\n",{"type":421,"tag":457,"props":1831,"children":1832},{"class":459,"line":1435},[1833],{"type":421,"tag":457,"props":1834,"children":1835},{"style":697},[1836],{"type":427,"value":1441},{"type":421,"tag":435,"props":1838,"children":1839},{},[1840],{"type":427,"value":1841},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":421,"tag":435,"props":1843,"children":1844},{},[1845],{"type":427,"value":1846},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":421,"tag":446,"props":1848,"children":1850},{"className":679,"code":1849,"language":681,"meta":415,"style":415},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1851],{"type":421,"tag":453,"props":1852,"children":1853},{"__ignoreMap":415},[1854,1862,1935,2001,2045,2087,2095,2102,2110,2125,2185,2246,2287,2328,2337,2345],{"type":421,"tag":457,"props":1855,"children":1856},{"class":459,"line":460},[1857],{"type":421,"tag":457,"props":1858,"children":1859},{"style":744},[1860],{"type":427,"value":1861},"// it works !\n",{"type":421,"tag":457,"props":1863,"children":1864},{"class":459,"line":750},[1865,1870,1875,1880,1885,1890,1894,1898,1903,1908,1913,1917,1922,1927,1931],{"type":421,"tag":457,"props":1866,"children":1868},{"style":1867},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1869],{"type":427,"value":1740},{"type":421,"tag":457,"props":1871,"children":1872},{"style":697},[1873],{"type":427,"value":1874},":",{"type":421,"tag":457,"props":1876,"children":1877},{"style":1718},[1878],{"type":427,"value":1879}," for",{"type":421,"tag":457,"props":1881,"children":1882},{"style":691},[1883],{"type":427,"value":1884}," (i ",{"type":421,"tag":457,"props":1886,"children":1887},{"style":487},[1888],{"type":427,"value":1889},"=",{"type":421,"tag":457,"props":1891,"children":1892},{"style":719},[1893],{"type":427,"value":1824},{"type":421,"tag":457,"props":1895,"children":1896},{"style":697},[1897],{"type":427,"value":1797},{"type":421,"tag":457,"props":1899,"children":1900},{"style":691},[1901],{"type":427,"value":1902}," i ",{"type":421,"tag":457,"props":1904,"children":1905},{"style":487},[1906],{"type":427,"value":1907},"\u003C",{"type":421,"tag":457,"props":1909,"children":1910},{"style":719},[1911],{"type":427,"value":1912}," 3",{"type":421,"tag":457,"props":1914,"children":1915},{"style":697},[1916],{"type":427,"value":1797},{"type":421,"tag":457,"props":1918,"children":1919},{"style":691},[1920],{"type":427,"value":1921}," i",{"type":421,"tag":457,"props":1923,"children":1924},{"style":487},[1925],{"type":427,"value":1926},"++",{"type":421,"tag":457,"props":1928,"children":1929},{"style":691},[1930],{"type":427,"value":741},{"type":421,"tag":457,"props":1932,"children":1933},{"style":697},[1934],{"type":427,"value":1764},{"type":421,"tag":457,"props":1936,"children":1937},{"class":459,"line":1394},[1938,1943,1948,1953,1957,1962,1966,1971,1976,1981,1985,1989,1993,1997],{"type":421,"tag":457,"props":1939,"children":1940},{"style":1718},[1941],{"type":427,"value":1942},"  for",{"type":421,"tag":457,"props":1944,"children":1945},{"style":1412},[1946],{"type":427,"value":1947}," (",{"type":421,"tag":457,"props":1949,"children":1950},{"style":691},[1951],{"type":427,"value":1952},"j",{"type":421,"tag":457,"props":1954,"children":1955},{"style":487},[1956],{"type":427,"value":1378},{"type":421,"tag":457,"props":1958,"children":1959},{"style":719},[1960],{"type":427,"value":1961}," 5",{"type":421,"tag":457,"props":1963,"children":1964},{"style":697},[1965],{"type":427,"value":1797},{"type":421,"tag":457,"props":1967,"children":1968},{"style":691},[1969],{"type":427,"value":1970}," j",{"type":421,"tag":457,"props":1972,"children":1973},{"style":487},[1974],{"type":427,"value":1975}," \u003C",{"type":421,"tag":457,"props":1977,"children":1978},{"style":719},[1979],{"type":427,"value":1980}," 8",{"type":421,"tag":457,"props":1982,"children":1983},{"style":697},[1984],{"type":427,"value":1797},{"type":421,"tag":457,"props":1986,"children":1987},{"style":691},[1988],{"type":427,"value":1970},{"type":421,"tag":457,"props":1990,"children":1991},{"style":487},[1992],{"type":427,"value":1926},{"type":421,"tag":457,"props":1994,"children":1995},{"style":1412},[1996],{"type":427,"value":741},{"type":421,"tag":457,"props":1998,"children":1999},{"style":697},[2000],{"type":427,"value":1764},{"type":421,"tag":457,"props":2002,"children":2003},{"class":459,"line":1435},[2004,2009,2013,2017,2022,2027,2031,2036,2041],{"type":421,"tag":457,"props":2005,"children":2006},{"style":1718},[2007],{"type":427,"value":2008},"    if",{"type":421,"tag":457,"props":2010,"children":2011},{"style":1412},[2012],{"type":427,"value":1947},{"type":421,"tag":457,"props":2014,"children":2015},{"style":691},[2016],{"type":427,"value":1952},{"type":421,"tag":457,"props":2018,"children":2019},{"style":487},[2020],{"type":427,"value":2021}," ===",{"type":421,"tag":457,"props":2023,"children":2024},{"style":719},[2025],{"type":427,"value":2026}," 6",{"type":421,"tag":457,"props":2028,"children":2029},{"style":1412},[2030],{"type":427,"value":741},{"type":421,"tag":457,"props":2032,"children":2033},{"style":1718},[2034],{"type":427,"value":2035},"continue",{"type":421,"tag":457,"props":2037,"children":2038},{"style":1867},[2039],{"type":427,"value":2040}," test",{"type":421,"tag":457,"props":2042,"children":2043},{"style":697},[2044],{"type":427,"value":1829},{"type":421,"tag":457,"props":2046,"children":2047},{"class":459,"line":1444},[2048,2053,2058,2062,2066,2070,2075,2079,2083],{"type":421,"tag":457,"props":2049,"children":2050},{"style":1718},[2051],{"type":427,"value":2052},"    else",{"type":421,"tag":457,"props":2054,"children":2055},{"style":691},[2056],{"type":427,"value":2057}," console",{"type":421,"tag":457,"props":2059,"children":2060},{"style":697},[2061],{"type":427,"value":700},{"type":421,"tag":457,"props":2063,"children":2064},{"style":703},[2065],{"type":427,"value":1409},{"type":421,"tag":457,"props":2067,"children":2068},{"style":1412},[2069],{"type":427,"value":711},{"type":421,"tag":457,"props":2071,"children":2072},{"style":691},[2073],{"type":427,"value":2074},"i",{"type":421,"tag":457,"props":2076,"children":2077},{"style":697},[2078],{"type":427,"value":727},{"type":421,"tag":457,"props":2080,"children":2081},{"style":691},[2082],{"type":427,"value":1970},{"type":421,"tag":457,"props":2084,"children":2085},{"style":1412},[2086],{"type":427,"value":1432},{"type":421,"tag":457,"props":2088,"children":2089},{"class":459,"line":1479},[2090],{"type":421,"tag":457,"props":2091,"children":2092},{"style":697},[2093],{"type":427,"value":2094},"  }\n",{"type":421,"tag":457,"props":2096,"children":2097},{"class":459,"line":1516},[2098],{"type":421,"tag":457,"props":2099,"children":2100},{"style":697},[2101],{"type":427,"value":1441},{"type":421,"tag":457,"props":2103,"children":2104},{"class":459,"line":1524},[2105],{"type":421,"tag":457,"props":2106,"children":2107},{"style":744},[2108],{"type":427,"value":2109},"// SyntaxError !\n",{"type":421,"tag":457,"props":2111,"children":2112},{"class":459,"line":1551},[2113,2117,2121],{"type":421,"tag":457,"props":2114,"children":2115},{"style":1867},[2116],{"type":427,"value":1740},{"type":421,"tag":457,"props":2118,"children":2119},{"style":697},[2120],{"type":427,"value":1874},{"type":421,"tag":457,"props":2122,"children":2123},{"style":697},[2124],{"type":427,"value":1355},{"type":421,"tag":457,"props":2126,"children":2128},{"class":459,"line":2127},10,[2129,2133,2137,2141,2145,2149,2153,2157,2161,2165,2169,2173,2177,2181],{"type":421,"tag":457,"props":2130,"children":2131},{"style":1718},[2132],{"type":427,"value":1942},{"type":421,"tag":457,"props":2134,"children":2135},{"style":1412},[2136],{"type":427,"value":1947},{"type":421,"tag":457,"props":2138,"children":2139},{"style":691},[2140],{"type":427,"value":2074},{"type":421,"tag":457,"props":2142,"children":2143},{"style":487},[2144],{"type":427,"value":1378},{"type":421,"tag":457,"props":2146,"children":2147},{"style":719},[2148],{"type":427,"value":1824},{"type":421,"tag":457,"props":2150,"children":2151},{"style":697},[2152],{"type":427,"value":1797},{"type":421,"tag":457,"props":2154,"children":2155},{"style":691},[2156],{"type":427,"value":1921},{"type":421,"tag":457,"props":2158,"children":2159},{"style":487},[2160],{"type":427,"value":1975},{"type":421,"tag":457,"props":2162,"children":2163},{"style":719},[2164],{"type":427,"value":1912},{"type":421,"tag":457,"props":2166,"children":2167},{"style":697},[2168],{"type":427,"value":1797},{"type":421,"tag":457,"props":2170,"children":2171},{"style":691},[2172],{"type":427,"value":1921},{"type":421,"tag":457,"props":2174,"children":2175},{"style":487},[2176],{"type":427,"value":1926},{"type":421,"tag":457,"props":2178,"children":2179},{"style":1412},[2180],{"type":427,"value":741},{"type":421,"tag":457,"props":2182,"children":2183},{"style":697},[2184],{"type":427,"value":1764},{"type":421,"tag":457,"props":2186,"children":2188},{"class":459,"line":2187},11,[2189,2194,2198,2202,2206,2210,2214,2218,2222,2226,2230,2234,2238,2242],{"type":421,"tag":457,"props":2190,"children":2191},{"style":1718},[2192],{"type":427,"value":2193},"    for",{"type":421,"tag":457,"props":2195,"children":2196},{"style":1412},[2197],{"type":427,"value":1947},{"type":421,"tag":457,"props":2199,"children":2200},{"style":691},[2201],{"type":427,"value":1952},{"type":421,"tag":457,"props":2203,"children":2204},{"style":487},[2205],{"type":427,"value":1378},{"type":421,"tag":457,"props":2207,"children":2208},{"style":719},[2209],{"type":427,"value":1961},{"type":421,"tag":457,"props":2211,"children":2212},{"style":697},[2213],{"type":427,"value":1797},{"type":421,"tag":457,"props":2215,"children":2216},{"style":691},[2217],{"type":427,"value":1970},{"type":421,"tag":457,"props":2219,"children":2220},{"style":487},[2221],{"type":427,"value":1975},{"type":421,"tag":457,"props":2223,"children":2224},{"style":719},[2225],{"type":427,"value":1980},{"type":421,"tag":457,"props":2227,"children":2228},{"style":697},[2229],{"type":427,"value":1797},{"type":421,"tag":457,"props":2231,"children":2232},{"style":691},[2233],{"type":427,"value":1970},{"type":421,"tag":457,"props":2235,"children":2236},{"style":487},[2237],{"type":427,"value":1926},{"type":421,"tag":457,"props":2239,"children":2240},{"style":1412},[2241],{"type":427,"value":741},{"type":421,"tag":457,"props":2243,"children":2244},{"style":697},[2245],{"type":427,"value":1764},{"type":421,"tag":457,"props":2247,"children":2249},{"class":459,"line":2248},12,[2250,2255,2259,2263,2267,2271,2275,2279,2283],{"type":421,"tag":457,"props":2251,"children":2252},{"style":1718},[2253],{"type":427,"value":2254},"      if",{"type":421,"tag":457,"props":2256,"children":2257},{"style":1412},[2258],{"type":427,"value":1947},{"type":421,"tag":457,"props":2260,"children":2261},{"style":691},[2262],{"type":427,"value":1952},{"type":421,"tag":457,"props":2264,"children":2265},{"style":487},[2266],{"type":427,"value":2021},{"type":421,"tag":457,"props":2268,"children":2269},{"style":719},[2270],{"type":427,"value":2026},{"type":421,"tag":457,"props":2272,"children":2273},{"style":1412},[2274],{"type":427,"value":741},{"type":421,"tag":457,"props":2276,"children":2277},{"style":1718},[2278],{"type":427,"value":2035},{"type":421,"tag":457,"props":2280,"children":2281},{"style":1867},[2282],{"type":427,"value":2040},{"type":421,"tag":457,"props":2284,"children":2285},{"style":697},[2286],{"type":427,"value":1829},{"type":421,"tag":457,"props":2288,"children":2290},{"class":459,"line":2289},13,[2291,2296,2300,2304,2308,2312,2316,2320,2324],{"type":421,"tag":457,"props":2292,"children":2293},{"style":1718},[2294],{"type":427,"value":2295},"      else",{"type":421,"tag":457,"props":2297,"children":2298},{"style":691},[2299],{"type":427,"value":2057},{"type":421,"tag":457,"props":2301,"children":2302},{"style":697},[2303],{"type":427,"value":700},{"type":421,"tag":457,"props":2305,"children":2306},{"style":703},[2307],{"type":427,"value":1409},{"type":421,"tag":457,"props":2309,"children":2310},{"style":1412},[2311],{"type":427,"value":711},{"type":421,"tag":457,"props":2313,"children":2314},{"style":691},[2315],{"type":427,"value":2074},{"type":421,"tag":457,"props":2317,"children":2318},{"style":697},[2319],{"type":427,"value":727},{"type":421,"tag":457,"props":2321,"children":2322},{"style":691},[2323],{"type":427,"value":1970},{"type":421,"tag":457,"props":2325,"children":2326},{"style":1412},[2327],{"type":427,"value":1432},{"type":421,"tag":457,"props":2329,"children":2331},{"class":459,"line":2330},14,[2332],{"type":421,"tag":457,"props":2333,"children":2334},{"style":697},[2335],{"type":427,"value":2336},"    }\n",{"type":421,"tag":457,"props":2338,"children":2340},{"class":459,"line":2339},15,[2341],{"type":421,"tag":457,"props":2342,"children":2343},{"style":697},[2344],{"type":427,"value":2094},{"type":421,"tag":457,"props":2346,"children":2348},{"class":459,"line":2347},16,[2349],{"type":421,"tag":457,"props":2350,"children":2351},{"style":697},[2352],{"type":427,"value":1441},{"type":421,"tag":435,"props":2354,"children":2355},{},[2356],{"type":427,"value":2357},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":421,"tag":435,"props":2359,"children":2360},{},[2361],{"type":427,"value":2362},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":421,"tag":429,"props":2364,"children":2366},{"id":2365},"模块",[2367],{"type":427,"value":2365},{"type":421,"tag":435,"props":2369,"children":2370},{},[2371],{"type":427,"value":2372},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":421,"tag":446,"props":2374,"children":2376},{"className":679,"code":2375,"language":681,"meta":415,"style":415},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2377],{"type":421,"tag":453,"props":2378,"children":2379},{"__ignoreMap":415},[2380,2428],{"type":421,"tag":457,"props":2381,"children":2382},{"class":459,"line":460},[2383,2388,2393,2397,2401,2406,2410,2415,2419,2424],{"type":421,"tag":457,"props":2384,"children":2385},{"style":1718},[2386],{"type":427,"value":2387},"import",{"type":421,"tag":457,"props":2389,"children":2390},{"style":691},[2391],{"type":427,"value":2392}," defaultExport",{"type":421,"tag":457,"props":2394,"children":2395},{"style":697},[2396],{"type":427,"value":727},{"type":421,"tag":457,"props":2398,"children":2399},{"style":697},[2400],{"type":427,"value":1726},{"type":421,"tag":457,"props":2402,"children":2403},{"style":691},[2404],{"type":427,"value":2405}," toolA",{"type":421,"tag":457,"props":2407,"children":2408},{"style":697},[2409],{"type":427,"value":1749},{"type":421,"tag":457,"props":2411,"children":2412},{"style":1718},[2413],{"type":427,"value":2414}," from",{"type":421,"tag":457,"props":2416,"children":2417},{"style":470},[2418],{"type":427,"value":473},{"type":421,"tag":457,"props":2420,"children":2421},{"style":476},[2422],{"type":427,"value":2423},"test.mjs",{"type":421,"tag":457,"props":2425,"children":2426},{"style":470},[2427],{"type":427,"value":1391},{"type":421,"tag":457,"props":2429,"children":2430},{"class":459,"line":750},[2431,2435,2439,2443,2448,2453,2458,2463,2467,2471],{"type":421,"tag":457,"props":2432,"children":2433},{"style":1718},[2434],{"type":427,"value":2387},{"type":421,"tag":457,"props":2436,"children":2437},{"style":691},[2438],{"type":427,"value":2392},{"type":421,"tag":457,"props":2440,"children":2441},{"style":697},[2442],{"type":427,"value":727},{"type":421,"tag":457,"props":2444,"children":2445},{"style":770},[2446],{"type":427,"value":2447}," *",{"type":421,"tag":457,"props":2449,"children":2450},{"style":1718},[2451],{"type":427,"value":2452}," as",{"type":421,"tag":457,"props":2454,"children":2455},{"style":691},[2456],{"type":427,"value":2457}," namespace ",{"type":421,"tag":457,"props":2459,"children":2460},{"style":1718},[2461],{"type":427,"value":2462},"from",{"type":421,"tag":457,"props":2464,"children":2465},{"style":470},[2466],{"type":427,"value":473},{"type":421,"tag":457,"props":2468,"children":2469},{"style":476},[2470],{"type":427,"value":2423},{"type":421,"tag":457,"props":2472,"children":2473},{"style":470},[2474],{"type":427,"value":1391},{"type":421,"tag":435,"props":2476,"children":2477},{},[2478],{"type":427,"value":2479},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":421,"tag":435,"props":2481,"children":2482},{},[2483],{"type":427,"value":2484},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":421,"tag":435,"props":2486,"children":2487},{},[2488],{"type":427,"value":2489},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":421,"tag":429,"props":2491,"children":2493},{"id":2492},"严格模式",[2494],{"type":427,"value":2492},{"type":421,"tag":435,"props":2496,"children":2497},{},[2498],{"type":427,"value":2499},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":421,"tag":435,"props":2501,"children":2502},{},[2503],{"type":427,"value":2504},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":421,"tag":435,"props":2506,"children":2507},{},[2508],{"type":427,"value":2509},"总的来说，严格模式一共有七条限制：",{"type":421,"tag":535,"props":2511,"children":2512},{},[2513,2518,2523,2528,2533,2538,2543,2548,2553,2558],{"type":421,"tag":539,"props":2514,"children":2515},{},[2516],{"type":427,"value":2517},"对象字面量中不能有相同的属性声明",{"type":421,"tag":539,"props":2519,"children":2520},{},[2521],{"type":427,"value":2522},"函数实参列表中不能有同名参数",{"type":421,"tag":539,"props":2524,"children":2525},{},[2526],{"type":427,"value":2527},"不能声明、重写或删除 eval、arguments 标识符",{"type":421,"tag":539,"props":2529,"children":2530},{},[2531],{"type":427,"value":2532},"不允许使用八进制数字字面量",{"type":421,"tag":539,"props":2534,"children":2535},{},[2536],{"type":427,"value":2537},"不能删除显式声明的标识符、名字或具名函数",{"type":421,"tag":539,"props":2539,"children":2540},{},[2541],{"type":427,"value":2542},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":421,"tag":539,"props":2544,"children":2545},{},[2546],{"type":427,"value":2547},"禁用 with 语句",{"type":421,"tag":539,"props":2549,"children":2550},{},[2551],{"type":427,"value":2552},"禁用隐式声明",{"type":421,"tag":539,"props":2554,"children":2555},{},[2556],{"type":427,"value":2557},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":421,"tag":539,"props":2559,"children":2560},{},[2561],{"type":427,"value":2562},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":421,"tag":435,"props":2564,"children":2565},{},[2566],{"type":427,"value":2567},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":421,"tag":535,"props":2569,"children":2570},{},[2571,2576],{"type":421,"tag":539,"props":2572,"children":2573},{},[2574],{"type":427,"value":2575},"间接调用 eval 函数",{"type":421,"tag":539,"props":2577,"children":2578},{},[2579],{"type":427,"value":2580},"使用 new Function 构造的新函数",{"type":421,"tag":429,"props":2582,"children":2584},{"id":2583},"运算符的二义性",[2585],{"type":427,"value":2583},{"type":421,"tag":435,"props":2587,"children":2588},{},[2589],{"type":427,"value":2590},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":421,"tag":435,"props":2592,"children":2593},{},[2594],{"type":427,"value":2595},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":421,"tag":435,"props":2597,"children":2598},{},[2599],{"type":427,"value":2600},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":421,"tag":435,"props":2602,"children":2603},{},[2604],{"type":427,"value":2605},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":421,"tag":422,"props":2607,"children":2609},{"id":2608},"面向对象语言特性",[2610],{"type":427,"value":2608},{"type":421,"tag":429,"props":2612,"children":2614},{"id":2613},"语法综述-1",[2615],{"type":427,"value":431},{"type":421,"tag":435,"props":2617,"children":2618},{},[2619],{"type":427,"value":2620},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":421,"tag":435,"props":2622,"children":2623},{},[2624],{"type":427,"value":2625},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":421,"tag":435,"props":2627,"children":2628},{},[2629],{"type":427,"value":2630},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":421,"tag":435,"props":2632,"children":2633},{},[2634],{"type":427,"value":2635},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":421,"tag":446,"props":2637,"children":2639},{"className":679,"code":2638,"language":681,"meta":415,"style":415},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2640],{"type":421,"tag":453,"props":2641,"children":2642},{"__ignoreMap":415},[2643,2664,2691,2720,2728,2745,2758,2765,2773,2781,2805],{"type":421,"tag":457,"props":2644,"children":2645},{"class":459,"line":460},[2646,2651,2656,2660],{"type":421,"tag":457,"props":2647,"children":2648},{"style":1014},[2649],{"type":427,"value":2650},"var",{"type":421,"tag":457,"props":2652,"children":2653},{"style":691},[2654],{"type":427,"value":2655}," obj",{"type":421,"tag":457,"props":2657,"children":2658},{"style":487},[2659],{"type":427,"value":1889},{"type":421,"tag":457,"props":2661,"children":2662},{"style":697},[2663],{"type":427,"value":1764},{"type":421,"tag":457,"props":2665,"children":2666},{"class":459,"line":750},[2667,2672,2677,2681,2686],{"type":421,"tag":457,"props":2668,"children":2669},{"style":1014},[2670],{"type":427,"value":2671},"  set",{"type":421,"tag":457,"props":2673,"children":2675},{"style":2674},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2676],{"type":427,"value":2040},{"type":421,"tag":457,"props":2678,"children":2679},{"style":697},[2680],{"type":427,"value":711},{"type":421,"tag":457,"props":2682,"children":2683},{"style":1641},[2684],{"type":427,"value":2685},"x",{"type":421,"tag":457,"props":2687,"children":2688},{"style":697},[2689],{"type":427,"value":2690},"){\n",{"type":421,"tag":457,"props":2692,"children":2693},{"class":459,"line":1394},[2694,2699,2703,2707,2712,2716],{"type":421,"tag":457,"props":2695,"children":2696},{"style":691},[2697],{"type":427,"value":2698},"    c",{"type":421,"tag":457,"props":2700,"children":2701},{"style":487},[2702],{"type":427,"value":1889},{"type":421,"tag":457,"props":2704,"children":2705},{"style":470},[2706],{"type":427,"value":484},{"type":421,"tag":457,"props":2708,"children":2709},{"style":476},[2710],{"type":427,"value":2711},"other",{"type":421,"tag":457,"props":2713,"children":2714},{"style":470},[2715],{"type":427,"value":484},{"type":421,"tag":457,"props":2717,"children":2718},{"style":697},[2719],{"type":427,"value":1829},{"type":421,"tag":457,"props":2721,"children":2722},{"class":459,"line":1435},[2723],{"type":421,"tag":457,"props":2724,"children":2725},{"style":697},[2726],{"type":427,"value":2727},"  },\n",{"type":421,"tag":457,"props":2729,"children":2730},{"class":459,"line":1444},[2731,2736,2740],{"type":421,"tag":457,"props":2732,"children":2733},{"style":1014},[2734],{"type":427,"value":2735},"  get",{"type":421,"tag":457,"props":2737,"children":2738},{"style":2674},[2739],{"type":427,"value":2040},{"type":421,"tag":457,"props":2741,"children":2742},{"style":697},[2743],{"type":427,"value":2744},"(){\n",{"type":421,"tag":457,"props":2746,"children":2747},{"class":459,"line":1479},[2748,2753],{"type":421,"tag":457,"props":2749,"children":2750},{"style":1718},[2751],{"type":427,"value":2752},"    return",{"type":421,"tag":457,"props":2754,"children":2755},{"style":691},[2756],{"type":427,"value":2757}," c\n",{"type":421,"tag":457,"props":2759,"children":2760},{"class":459,"line":1516},[2761],{"type":421,"tag":457,"props":2762,"children":2763},{"style":697},[2764],{"type":427,"value":2727},{"type":421,"tag":457,"props":2766,"children":2767},{"class":459,"line":1524},[2768],{"type":421,"tag":457,"props":2769,"children":2770},{"style":744},[2771],{"type":427,"value":2772},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":421,"tag":457,"props":2774,"children":2775},{"class":459,"line":1551},[2776],{"type":421,"tag":457,"props":2777,"children":2778},{"style":744},[2779],{"type":427,"value":2780},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":421,"tag":457,"props":2782,"children":2783},{"class":459,"line":2127},[2784,2789,2793,2797,2801],{"type":421,"tag":457,"props":2785,"children":2786},{"style":1412},[2787],{"type":427,"value":2788},"  test",{"type":421,"tag":457,"props":2790,"children":2791},{"style":697},[2792],{"type":427,"value":1874},{"type":421,"tag":457,"props":2794,"children":2795},{"style":470},[2796],{"type":427,"value":473},{"type":421,"tag":457,"props":2798,"children":2799},{"style":476},[2800],{"type":427,"value":1740},{"type":421,"tag":457,"props":2802,"children":2803},{"style":470},[2804],{"type":427,"value":1391},{"type":421,"tag":457,"props":2806,"children":2807},{"class":459,"line":2187},[2808],{"type":421,"tag":457,"props":2809,"children":2810},{"style":697},[2811],{"type":427,"value":1441},{"type":421,"tag":435,"props":2813,"children":2814},{},[2815],{"type":427,"value":2816},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":421,"tag":446,"props":2818,"children":2820},{"className":679,"code":2819,"language":681,"meta":415,"style":415},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2821],{"type":421,"tag":453,"props":2822,"children":2823},{"__ignoreMap":415},[2824,2832,2876],{"type":421,"tag":457,"props":2825,"children":2826},{"class":459,"line":460},[2827],{"type":421,"tag":457,"props":2828,"children":2829},{"style":744},[2830],{"type":427,"value":2831},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":421,"tag":457,"props":2833,"children":2834},{"class":459,"line":750},[2835,2840,2844,2849,2853,2858,2863,2867,2872],{"type":421,"tag":457,"props":2836,"children":2838},{"style":2837},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2839],{"type":427,"value":1451},{"type":421,"tag":457,"props":2841,"children":2842},{"style":697},[2843],{"type":427,"value":700},{"type":421,"tag":457,"props":2845,"children":2846},{"style":1448},[2847],{"type":427,"value":2848},"prototype",{"type":421,"tag":457,"props":2850,"children":2851},{"style":487},[2852],{"type":427,"value":1378},{"type":421,"tag":457,"props":2854,"children":2855},{"style":487},[2856],{"type":427,"value":2857}," new",{"type":421,"tag":457,"props":2859,"children":2860},{"style":703},[2861],{"type":427,"value":2862}," B",{"type":421,"tag":457,"props":2864,"children":2865},{"style":691},[2866],{"type":427,"value":711},{"type":421,"tag":457,"props":2868,"children":2869},{"style":744},[2870],{"type":427,"value":2871},"/* 传入参数 */",{"type":421,"tag":457,"props":2873,"children":2874},{"style":691},[2875],{"type":427,"value":1432},{"type":421,"tag":457,"props":2877,"children":2878},{"class":459,"line":1394},[2879,2883,2887,2891,2895,2900,2904],{"type":421,"tag":457,"props":2880,"children":2881},{"style":2837},[2882],{"type":427,"value":1451},{"type":421,"tag":457,"props":2884,"children":2885},{"style":697},[2886],{"type":427,"value":700},{"type":421,"tag":457,"props":2888,"children":2889},{"style":1448},[2890],{"type":427,"value":2848},{"type":421,"tag":457,"props":2892,"children":2893},{"style":697},[2894],{"type":427,"value":700},{"type":421,"tag":457,"props":2896,"children":2897},{"style":1448},[2898],{"type":427,"value":2899},"constructor",{"type":421,"tag":457,"props":2901,"children":2902},{"style":487},[2903],{"type":427,"value":1378},{"type":421,"tag":457,"props":2905,"children":2906},{"style":1448},[2907],{"type":427,"value":2908}," A\n",{"type":421,"tag":435,"props":2910,"children":2911},{},[2912],{"type":427,"value":2913},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":421,"tag":435,"props":2915,"children":2916},{},[2917],{"type":427,"value":2918},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":421,"tag":435,"props":2920,"children":2921},{},[2922],{"type":427,"value":2923},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":421,"tag":435,"props":2925,"children":2926},{},[2927],{"type":427,"value":2928},"总结一下遍历对象成员的方法：",{"type":421,"tag":1029,"props":2930,"children":2931},{},[2932,2956],{"type":421,"tag":1033,"props":2933,"children":2934},{},[2935],{"type":421,"tag":1037,"props":2936,"children":2937},{},[2938,2943,2948,2952],{"type":421,"tag":1041,"props":2939,"children":2940},{},[2941],{"type":427,"value":2942},"键名",{"type":421,"tag":1041,"props":2944,"children":2945},{},[2946],{"type":427,"value":2947},"显隐式",{"type":421,"tag":1041,"props":2949,"children":2950},{},[2951],{"type":427,"value":424},{"type":421,"tag":1041,"props":2953,"children":2954},{},[2955],{"type":427,"value":1050},{"type":421,"tag":1052,"props":2957,"children":2958},{},[2959,2982,3002,3024],{"type":421,"tag":1037,"props":2960,"children":2961},{},[2962,2967,2972,2977],{"type":421,"tag":1059,"props":2963,"children":2964},{},[2965],{"type":427,"value":2966},"一般键名",{"type":421,"tag":1059,"props":2968,"children":2969},{},[2970],{"type":427,"value":2971},"显式",{"type":421,"tag":1059,"props":2973,"children":2974},{},[2975],{"type":427,"value":2976},"for...in",{"type":421,"tag":1059,"props":2978,"children":2979},{},[2980],{"type":427,"value":2981},"可列举的成员名（包含原型链）",{"type":421,"tag":1037,"props":2983,"children":2984},{},[2985,2989,2993,2998],{"type":421,"tag":1059,"props":2986,"children":2987},{},[2988],{"type":427,"value":2966},{"type":421,"tag":1059,"props":2990,"children":2991},{},[2992],{"type":427,"value":2971},{"type":421,"tag":1059,"props":2994,"children":2995},{},[2996],{"type":427,"value":2997},"Object.prototype.map、Object.prototype.entries、...",{"type":421,"tag":1059,"props":2999,"children":3000},{},[3001],{"type":427,"value":1302},{"type":421,"tag":1037,"props":3003,"children":3004},{},[3005,3009,3014,3019],{"type":421,"tag":1059,"props":3006,"children":3007},{},[3008],{"type":427,"value":2966},{"type":421,"tag":1059,"props":3010,"children":3011},{},[3012],{"type":427,"value":3013},"显式 & 隐式",{"type":421,"tag":1059,"props":3015,"children":3016},{},[3017],{"type":427,"value":3018},"Object.getOwnPropertyNames()",{"type":421,"tag":1059,"props":3020,"children":3021},{},[3022],{"type":427,"value":3023},"所有非符号的自由属性名",{"type":421,"tag":1037,"props":3025,"children":3026},{},[3027,3032,3036,3041],{"type":421,"tag":1059,"props":3028,"children":3029},{},[3030],{"type":427,"value":3031},"符号键名键名",{"type":421,"tag":1059,"props":3033,"children":3034},{},[3035],{"type":427,"value":3013},{"type":421,"tag":1059,"props":3037,"children":3038},{},[3039],{"type":427,"value":3040},"Object.getOwnPropertySymbols()",{"type":421,"tag":1059,"props":3042,"children":3043},{},[3044],{"type":427,"value":3045},"所有符号键名的自有属性名",{"type":421,"tag":435,"props":3047,"children":3048},{},[3049,3051,3056,3058,3062],{"type":427,"value":3050},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":421,"tag":457,"props":3052,"children":3053},{},[3054],{"type":427,"value":3055},"prop",{"type":427,"value":3057}," 更好的替代方案是 typeof(obj",{"type":421,"tag":457,"props":3059,"children":3060},{},[3061],{"type":427,"value":3055},{"type":427,"value":3063},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":421,"tag":435,"props":3065,"children":3066},{},[3067],{"type":427,"value":3068},"delete 运算符有些特殊的地方：",{"type":421,"tag":535,"props":3070,"children":3071},{},[3072,3077],{"type":421,"tag":539,"props":3073,"children":3074},{},[3075],{"type":427,"value":3076},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":421,"tag":539,"props":3078,"children":3079},{},[3080],{"type":427,"value":3081},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":421,"tag":429,"props":3083,"children":3085},{"id":3084},"原型继承",[3086],{"type":427,"value":3084},{"type":421,"tag":435,"props":3088,"children":3089},{},[3090],{"type":427,"value":3091},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":421,"tag":435,"props":3093,"children":3094},{},[3095],{"type":427,"value":3096},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":421,"tag":535,"props":3098,"children":3099},{},[3100,3105],{"type":421,"tag":539,"props":3101,"children":3102},{},[3103],{"type":427,"value":3104},"读对象的属性时优先读取对象的自有属性表",{"type":421,"tag":539,"props":3106,"children":3107},{},[3108],{"type":427,"value":3109},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":421,"tag":435,"props":3111,"children":3112},{},[3113],{"type":427,"value":3114},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":421,"tag":435,"props":3116,"children":3117},{},[3118],{"type":427,"value":3119},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":421,"tag":446,"props":3121,"children":3123},{"className":679,"code":3122,"language":681,"meta":415,"style":415},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3124],{"type":421,"tag":453,"props":3125,"children":3126},{"__ignoreMap":415},[3127,3147,3186,3227],{"type":421,"tag":457,"props":3128,"children":3129},{"class":459,"line":460},[3130,3134,3138,3142],{"type":421,"tag":457,"props":3131,"children":3132},{"style":1014},[3133],{"type":427,"value":1340},{"type":421,"tag":457,"props":3135,"children":3136},{"style":703},[3137],{"type":427,"value":2040},{"type":421,"tag":457,"props":3139,"children":3140},{"style":697},[3141],{"type":427,"value":1350},{"type":421,"tag":457,"props":3143,"children":3144},{"style":697},[3145],{"type":427,"value":3146}," {}\n",{"type":421,"tag":457,"props":3148,"children":3149},{"class":459,"line":750},[3150,3154,3159,3163,3167,3172,3176,3181],{"type":421,"tag":457,"props":3151,"children":3152},{"style":1014},[3153],{"type":427,"value":2650},{"type":421,"tag":457,"props":3155,"children":3156},{"style":691},[3157],{"type":427,"value":3158}," a ",{"type":421,"tag":457,"props":3160,"children":3161},{"style":487},[3162],{"type":427,"value":1889},{"type":421,"tag":457,"props":3164,"children":3165},{"style":697},[3166],{"type":427,"value":1726},{"type":421,"tag":457,"props":3168,"children":3169},{"style":2674},[3170],{"type":427,"value":3171}," testb",{"type":421,"tag":457,"props":3173,"children":3174},{"style":697},[3175],{"type":427,"value":1350},{"type":421,"tag":457,"props":3177,"children":3178},{"style":697},[3179],{"type":427,"value":3180}," {}",{"type":421,"tag":457,"props":3182,"children":3183},{"style":697},[3184],{"type":427,"value":3185}," }\n",{"type":421,"tag":457,"props":3187,"children":3188},{"class":459,"line":1394},[3189,3193,3197,3202,3206,3210,3214,3218,3222],{"type":421,"tag":457,"props":3190,"children":3191},{"style":691},[3192],{"type":427,"value":518},{"type":421,"tag":457,"props":3194,"children":3195},{"style":697},[3196],{"type":427,"value":700},{"type":421,"tag":457,"props":3198,"children":3199},{"style":691},[3200],{"type":427,"value":3201},"testb",{"type":421,"tag":457,"props":3203,"children":3204},{"style":697},[3205],{"type":427,"value":700},{"type":421,"tag":457,"props":3207,"children":3208},{"style":1448},[3209],{"type":427,"value":2848},{"type":421,"tag":457,"props":3211,"children":3212},{"style":487},[3213],{"type":427,"value":1378},{"type":421,"tag":457,"props":3215,"children":3216},{"style":2837},[3217],{"type":427,"value":2040},{"type":421,"tag":457,"props":3219,"children":3220},{"style":697},[3221],{"type":427,"value":700},{"type":421,"tag":457,"props":3223,"children":3224},{"style":1448},[3225],{"type":427,"value":3226},"prototype\n",{"type":421,"tag":457,"props":3228,"children":3229},{"class":459,"line":1435},[3230,3234,3239,3243,3247,3251],{"type":421,"tag":457,"props":3231,"children":3232},{"style":487},[3233],{"type":427,"value":1530},{"type":421,"tag":457,"props":3235,"children":3236},{"style":691},[3237],{"type":427,"value":3238}," a",{"type":421,"tag":457,"props":3240,"children":3241},{"style":697},[3242],{"type":427,"value":700},{"type":421,"tag":457,"props":3244,"children":3245},{"style":703},[3246],{"type":427,"value":3201},{"type":421,"tag":457,"props":3248,"children":3249},{"style":691},[3250],{"type":427,"value":845},{"type":421,"tag":457,"props":3252,"children":3253},{"style":744},[3254],{"type":427,"value":3255},"// TypeError\n",{"type":421,"tag":435,"props":3257,"children":3258},{},[3259,3261,3269],{"type":427,"value":3260},"在",{"type":421,"tag":518,"props":3262,"children":3266},{"href":3263,"rel":3264},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3265],"nofollow",[3267],{"type":427,"value":3268},"规范",{"type":427,"value":3270},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":421,"tag":435,"props":3272,"children":3273},{},[3274],{"type":427,"value":3275},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":421,"tag":446,"props":3277,"children":3279},{"className":679,"code":3278,"language":681,"meta":415,"style":415},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3280],{"type":421,"tag":453,"props":3281,"children":3282},{"__ignoreMap":415},[3283,3303,3323],{"type":421,"tag":457,"props":3284,"children":3285},{"class":459,"line":460},[3286,3290,3295,3299],{"type":421,"tag":457,"props":3287,"children":3288},{"style":1014},[3289],{"type":427,"value":1340},{"type":421,"tag":457,"props":3291,"children":3292},{"style":703},[3293],{"type":427,"value":3294}," Parent",{"type":421,"tag":457,"props":3296,"children":3297},{"style":697},[3298],{"type":427,"value":1350},{"type":421,"tag":457,"props":3300,"children":3301},{"style":697},[3302],{"type":427,"value":3146},{"type":421,"tag":457,"props":3304,"children":3305},{"class":459,"line":750},[3306,3310,3315,3319],{"type":421,"tag":457,"props":3307,"children":3308},{"style":1014},[3309],{"type":427,"value":1340},{"type":421,"tag":457,"props":3311,"children":3312},{"style":703},[3313],{"type":427,"value":3314}," Child",{"type":421,"tag":457,"props":3316,"children":3317},{"style":697},[3318],{"type":427,"value":1350},{"type":421,"tag":457,"props":3320,"children":3321},{"style":697},[3322],{"type":427,"value":3146},{"type":421,"tag":457,"props":3324,"children":3325},{"class":459,"line":1394},[3326,3331,3335,3339,3343,3347,3351],{"type":421,"tag":457,"props":3327,"children":3328},{"style":2837},[3329],{"type":427,"value":3330},"Child",{"type":421,"tag":457,"props":3332,"children":3333},{"style":697},[3334],{"type":427,"value":700},{"type":421,"tag":457,"props":3336,"children":3337},{"style":1448},[3338],{"type":427,"value":2848},{"type":421,"tag":457,"props":3340,"children":3341},{"style":487},[3342],{"type":427,"value":1378},{"type":421,"tag":457,"props":3344,"children":3345},{"style":487},[3346],{"type":427,"value":2857},{"type":421,"tag":457,"props":3348,"children":3349},{"style":703},[3350],{"type":427,"value":3294},{"type":421,"tag":457,"props":3352,"children":3353},{"style":691},[3354],{"type":427,"value":3355},"()\n",{"type":421,"tag":435,"props":3357,"children":3358},{},[3359],{"type":427,"value":3360},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":421,"tag":446,"props":3362,"children":3364},{"className":679,"code":3363,"language":681,"meta":415,"style":415},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3365],{"type":421,"tag":453,"props":3366,"children":3367},{"__ignoreMap":415},[3368,3376],{"type":421,"tag":457,"props":3369,"children":3370},{"class":459,"line":460},[3371],{"type":421,"tag":457,"props":3372,"children":3373},{"style":744},[3374],{"type":427,"value":3375},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":421,"tag":457,"props":3377,"children":3378},{"class":459,"line":750},[3379,3383,3387,3391,3395,3399,3403],{"type":421,"tag":457,"props":3380,"children":3381},{"style":2837},[3382],{"type":427,"value":3330},{"type":421,"tag":457,"props":3384,"children":3385},{"style":697},[3386],{"type":427,"value":700},{"type":421,"tag":457,"props":3388,"children":3389},{"style":1448},[3390],{"type":427,"value":2848},{"type":421,"tag":457,"props":3392,"children":3393},{"style":697},[3394],{"type":427,"value":700},{"type":421,"tag":457,"props":3396,"children":3397},{"style":1448},[3398],{"type":427,"value":2899},{"type":421,"tag":457,"props":3400,"children":3401},{"style":487},[3402],{"type":427,"value":1378},{"type":421,"tag":457,"props":3404,"children":3405},{"style":691},[3406],{"type":427,"value":3407}," Child\n",{"type":421,"tag":446,"props":3409,"children":3411},{"className":679,"code":3410,"language":681,"meta":415,"style":415},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3412],{"type":421,"tag":453,"props":3413,"children":3414},{"__ignoreMap":415},[3415,3423,3442,3461,3484,3491],{"type":421,"tag":457,"props":3416,"children":3417},{"class":459,"line":460},[3418],{"type":421,"tag":457,"props":3419,"children":3420},{"style":744},[3421],{"type":427,"value":3422},"// 这种方法叫做圣杯模式\n",{"type":421,"tag":457,"props":3424,"children":3425},{"class":459,"line":750},[3426,3430,3434,3438],{"type":421,"tag":457,"props":3427,"children":3428},{"style":1014},[3429],{"type":427,"value":1340},{"type":421,"tag":457,"props":3431,"children":3432},{"style":703},[3433],{"type":427,"value":3294},{"type":421,"tag":457,"props":3435,"children":3436},{"style":697},[3437],{"type":427,"value":1350},{"type":421,"tag":457,"props":3439,"children":3440},{"style":697},[3441],{"type":427,"value":3146},{"type":421,"tag":457,"props":3443,"children":3444},{"class":459,"line":1394},[3445,3449,3453,3457],{"type":421,"tag":457,"props":3446,"children":3447},{"style":1014},[3448],{"type":427,"value":1340},{"type":421,"tag":457,"props":3450,"children":3451},{"style":703},[3452],{"type":427,"value":3314},{"type":421,"tag":457,"props":3454,"children":3455},{"style":697},[3456],{"type":427,"value":1350},{"type":421,"tag":457,"props":3458,"children":3459},{"style":697},[3460],{"type":427,"value":1355},{"type":421,"tag":457,"props":3462,"children":3463},{"class":459,"line":1435},[3464,3468,3472,3476,3480],{"type":421,"tag":457,"props":3465,"children":3466},{"style":1361},[3467],{"type":427,"value":1364},{"type":421,"tag":457,"props":3469,"children":3470},{"style":697},[3471],{"type":427,"value":700},{"type":421,"tag":457,"props":3473,"children":3474},{"style":1448},[3475],{"type":427,"value":2899},{"type":421,"tag":457,"props":3477,"children":3478},{"style":487},[3479],{"type":427,"value":1378},{"type":421,"tag":457,"props":3481,"children":3482},{"style":691},[3483],{"type":427,"value":3407},{"type":421,"tag":457,"props":3485,"children":3486},{"class":459,"line":1444},[3487],{"type":421,"tag":457,"props":3488,"children":3489},{"style":697},[3490],{"type":427,"value":1441},{"type":421,"tag":457,"props":3492,"children":3493},{"class":459,"line":1479},[3494,3498,3502,3506,3510,3514,3518],{"type":421,"tag":457,"props":3495,"children":3496},{"style":2837},[3497],{"type":427,"value":3330},{"type":421,"tag":457,"props":3499,"children":3500},{"style":697},[3501],{"type":427,"value":700},{"type":421,"tag":457,"props":3503,"children":3504},{"style":1448},[3505],{"type":427,"value":2848},{"type":421,"tag":457,"props":3507,"children":3508},{"style":487},[3509],{"type":427,"value":1378},{"type":421,"tag":457,"props":3511,"children":3512},{"style":487},[3513],{"type":427,"value":2857},{"type":421,"tag":457,"props":3515,"children":3516},{"style":703},[3517],{"type":427,"value":3294},{"type":421,"tag":457,"props":3519,"children":3520},{"style":691},[3521],{"type":427,"value":3355},{"type":421,"tag":435,"props":3523,"children":3524},{},[3525],{"type":427,"value":3526},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":421,"tag":429,"props":3528,"children":3530},{"id":3529},"类继承",[3531],{"type":427,"value":3529},{"type":421,"tag":435,"props":3533,"children":3534},{},[3535],{"type":427,"value":3536},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":421,"tag":446,"props":3538,"children":3540},{"className":679,"code":3539,"language":681,"meta":415,"style":415},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3541],{"type":421,"tag":453,"props":3542,"children":3543},{"__ignoreMap":415},[3544,3552,3569,3595,3603,3622,3641,3671],{"type":421,"tag":457,"props":3545,"children":3546},{"class":459,"line":460},[3547],{"type":421,"tag":457,"props":3548,"children":3549},{"style":744},[3550],{"type":427,"value":3551},"/* 类声明 */\n",{"type":421,"tag":457,"props":3553,"children":3554},{"class":459,"line":750},[3555,3560,3565],{"type":421,"tag":457,"props":3556,"children":3557},{"style":1014},[3558],{"type":427,"value":3559},"class",{"type":421,"tag":457,"props":3561,"children":3563},{"style":3562},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3564],{"type":427,"value":3294},{"type":421,"tag":457,"props":3566,"children":3567},{"style":697},[3568],{"type":427,"value":3146},{"type":421,"tag":457,"props":3570,"children":3571},{"class":459,"line":1394},[3572,3576,3580,3586,3591],{"type":421,"tag":457,"props":3573,"children":3574},{"style":1014},[3575],{"type":427,"value":3559},{"type":421,"tag":457,"props":3577,"children":3578},{"style":3562},[3579],{"type":427,"value":3314},{"type":421,"tag":457,"props":3581,"children":3583},{"style":3582},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3584],{"type":427,"value":3585}," extends",{"type":421,"tag":457,"props":3587,"children":3589},{"style":3588},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3590],{"type":427,"value":3294},{"type":421,"tag":457,"props":3592,"children":3593},{"style":697},[3594],{"type":427,"value":3146},{"type":421,"tag":457,"props":3596,"children":3597},{"class":459,"line":1435},[3598],{"type":421,"tag":457,"props":3599,"children":3600},{"style":744},[3601],{"type":427,"value":3602},"/* 仿制代码 */\n",{"type":421,"tag":457,"props":3604,"children":3605},{"class":459,"line":1444},[3606,3610,3614,3618],{"type":421,"tag":457,"props":3607,"children":3608},{"style":1014},[3609],{"type":427,"value":1340},{"type":421,"tag":457,"props":3611,"children":3612},{"style":703},[3613],{"type":427,"value":3294},{"type":421,"tag":457,"props":3615,"children":3616},{"style":697},[3617],{"type":427,"value":1063},{"type":421,"tag":457,"props":3619,"children":3620},{"style":697},[3621],{"type":427,"value":3146},{"type":421,"tag":457,"props":3623,"children":3624},{"class":459,"line":1479},[3625,3629,3633,3637],{"type":421,"tag":457,"props":3626,"children":3627},{"style":1014},[3628],{"type":427,"value":1340},{"type":421,"tag":457,"props":3630,"children":3631},{"style":703},[3632],{"type":427,"value":3314},{"type":421,"tag":457,"props":3634,"children":3635},{"style":697},[3636],{"type":427,"value":1063},{"type":421,"tag":457,"props":3638,"children":3639},{"style":697},[3640],{"type":427,"value":3146},{"type":421,"tag":457,"props":3642,"children":3643},{"class":459,"line":1516},[3644,3648,3652,3657,3662,3666],{"type":421,"tag":457,"props":3645,"children":3646},{"style":691},[3647],{"type":427,"value":694},{"type":421,"tag":457,"props":3649,"children":3650},{"style":697},[3651],{"type":427,"value":700},{"type":421,"tag":457,"props":3653,"children":3654},{"style":703},[3655],{"type":427,"value":3656},"setPrototypeOf",{"type":421,"tag":457,"props":3658,"children":3659},{"style":691},[3660],{"type":427,"value":3661},"(Child",{"type":421,"tag":457,"props":3663,"children":3664},{"style":697},[3665],{"type":427,"value":727},{"type":421,"tag":457,"props":3667,"children":3668},{"style":691},[3669],{"type":427,"value":3670}," Parent)\n",{"type":421,"tag":457,"props":3672,"children":3673},{"class":459,"line":1524},[3674,3678,3682,3686,3690,3694,3698,3702,3706,3710,3714,3718],{"type":421,"tag":457,"props":3675,"children":3676},{"style":691},[3677],{"type":427,"value":694},{"type":421,"tag":457,"props":3679,"children":3680},{"style":697},[3681],{"type":427,"value":700},{"type":421,"tag":457,"props":3683,"children":3684},{"style":703},[3685],{"type":427,"value":3656},{"type":421,"tag":457,"props":3687,"children":3688},{"style":691},[3689],{"type":427,"value":711},{"type":421,"tag":457,"props":3691,"children":3692},{"style":2837},[3693],{"type":427,"value":3330},{"type":421,"tag":457,"props":3695,"children":3696},{"style":697},[3697],{"type":427,"value":700},{"type":421,"tag":457,"props":3699,"children":3700},{"style":1448},[3701],{"type":427,"value":2848},{"type":421,"tag":457,"props":3703,"children":3704},{"style":697},[3705],{"type":427,"value":727},{"type":421,"tag":457,"props":3707,"children":3708},{"style":2837},[3709],{"type":427,"value":3294},{"type":421,"tag":457,"props":3711,"children":3712},{"style":697},[3713],{"type":427,"value":700},{"type":421,"tag":457,"props":3715,"children":3716},{"style":1448},[3717],{"type":427,"value":2848},{"type":421,"tag":457,"props":3719,"children":3720},{"style":691},[3721],{"type":427,"value":1432},{"type":421,"tag":435,"props":3723,"children":3724},{},[3725],{"type":427,"value":3726},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":421,"tag":435,"props":3728,"children":3729},{},[3730],{"type":427,"value":3731},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":421,"tag":435,"props":3733,"children":3734},{},[3735],{"type":427,"value":3736},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":421,"tag":446,"props":3738,"children":3740},{"className":679,"code":3739,"language":681,"meta":415,"style":415},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3741],{"type":421,"tag":453,"props":3742,"children":3743},{"__ignoreMap":415},[3744,3785,3816,3852,3881,3893],{"type":421,"tag":457,"props":3745,"children":3746},{"class":459,"line":460},[3747,3752,3756,3760,3764,3769,3773,3777,3781],{"type":421,"tag":457,"props":3748,"children":3749},{"style":2837},[3750],{"type":427,"value":3751},"object",{"type":421,"tag":457,"props":3753,"children":3754},{"style":697},[3755],{"type":427,"value":700},{"type":421,"tag":457,"props":3757,"children":3758},{"style":1448},[3759],{"type":427,"value":2848},{"type":421,"tag":457,"props":3761,"children":3762},{"style":697},[3763],{"type":427,"value":700},{"type":421,"tag":457,"props":3765,"children":3766},{"style":703},[3767],{"type":427,"value":3768},"method",{"type":421,"tag":457,"props":3770,"children":3771},{"style":487},[3772],{"type":427,"value":1378},{"type":421,"tag":457,"props":3774,"children":3775},{"style":1014},[3776],{"type":427,"value":1468},{"type":421,"tag":457,"props":3778,"children":3779},{"style":697},[3780],{"type":427,"value":1350},{"type":421,"tag":457,"props":3782,"children":3783},{"style":697},[3784],{"type":427,"value":1355},{"type":421,"tag":457,"props":3786,"children":3787},{"class":459,"line":750},[3788,3793,3798,3802,3807,3811],{"type":421,"tag":457,"props":3789,"children":3790},{"style":1014},[3791],{"type":427,"value":3792},"  const",{"type":421,"tag":457,"props":3794,"children":3795},{"style":1448},[3796],{"type":427,"value":3797}," thisClass",{"type":421,"tag":457,"props":3799,"children":3800},{"style":487},[3801],{"type":427,"value":1378},{"type":421,"tag":457,"props":3803,"children":3804},{"style":1361},[3805],{"type":427,"value":3806}," this",{"type":421,"tag":457,"props":3808,"children":3809},{"style":697},[3810],{"type":427,"value":700},{"type":421,"tag":457,"props":3812,"children":3813},{"style":1448},[3814],{"type":427,"value":3815},"constructor\n",{"type":421,"tag":457,"props":3817,"children":3818},{"class":459,"line":1394},[3819,3823,3828,3832,3836,3840,3844,3848],{"type":421,"tag":457,"props":3820,"children":3821},{"style":1014},[3822],{"type":427,"value":3792},{"type":421,"tag":457,"props":3824,"children":3825},{"style":1448},[3826],{"type":427,"value":3827}," parentClass",{"type":421,"tag":457,"props":3829,"children":3830},{"style":487},[3831],{"type":427,"value":1378},{"type":421,"tag":457,"props":3833,"children":3834},{"style":2837},[3835],{"type":427,"value":3797},{"type":421,"tag":457,"props":3837,"children":3838},{"style":697},[3839],{"type":427,"value":700},{"type":421,"tag":457,"props":3841,"children":3842},{"style":1448},[3843],{"type":427,"value":2848},{"type":421,"tag":457,"props":3845,"children":3846},{"style":697},[3847],{"type":427,"value":700},{"type":421,"tag":457,"props":3849,"children":3850},{"style":1448},[3851],{"type":427,"value":3815},{"type":421,"tag":457,"props":3853,"children":3854},{"class":459,"line":1435},[3855,3859,3864,3868,3872,3876],{"type":421,"tag":457,"props":3856,"children":3857},{"style":1014},[3858],{"type":427,"value":3792},{"type":421,"tag":457,"props":3860,"children":3861},{"style":1448},[3862],{"type":427,"value":3863}," parentMethod",{"type":421,"tag":457,"props":3865,"children":3866},{"style":487},[3867],{"type":427,"value":1378},{"type":421,"tag":457,"props":3869,"children":3870},{"style":691},[3871],{"type":427,"value":3827},{"type":421,"tag":457,"props":3873,"children":3874},{"style":697},[3875],{"type":427,"value":700},{"type":421,"tag":457,"props":3877,"children":3878},{"style":691},[3879],{"type":427,"value":3880},"method\n",{"type":421,"tag":457,"props":3882,"children":3883},{"class":459,"line":1444},[3884,3889],{"type":421,"tag":457,"props":3885,"children":3886},{"style":703},[3887],{"type":427,"value":3888},"  parentMethod",{"type":421,"tag":457,"props":3890,"children":3891},{"style":1412},[3892],{"type":427,"value":3355},{"type":421,"tag":457,"props":3894,"children":3895},{"class":459,"line":1479},[3896],{"type":421,"tag":457,"props":3897,"children":3898},{"style":697},[3899],{"type":427,"value":1441},{"type":421,"tag":435,"props":3901,"children":3902},{},[3903],{"type":427,"value":3904},"super 的指向由几个规则所限制：",{"type":421,"tag":535,"props":3906,"children":3907},{},[3908,3913,3918,3923,3928],{"type":421,"tag":539,"props":3909,"children":3910},{},[3911],{"type":427,"value":3912},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":421,"tag":539,"props":3914,"children":3915},{},[3916],{"type":427,"value":3917},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":421,"tag":539,"props":3919,"children":3920},{},[3921],{"type":427,"value":3922},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":421,"tag":539,"props":3924,"children":3925},{},[3926],{"type":427,"value":3927},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":421,"tag":539,"props":3929,"children":3930},{},[3931],{"type":427,"value":3932},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":421,"tag":435,"props":3934,"children":3935},{},[3936],{"type":427,"value":3937},"总结可以得出规律：",{"type":421,"tag":535,"props":3939,"children":3940},{},[3941,3946],{"type":421,"tag":539,"props":3942,"children":3943},{},[3944],{"type":427,"value":3945},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":421,"tag":539,"props":3947,"children":3948},{},[3949],{"type":427,"value":3950},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":421,"tag":435,"props":3952,"children":3953},{},[3954],{"type":427,"value":3955},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":421,"tag":446,"props":3957,"children":3959},{"className":679,"code":3958,"language":681,"meta":415,"style":415},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3960],{"type":421,"tag":453,"props":3961,"children":3962},{"__ignoreMap":415},[3963,4004,4074,4103,4111,4150,4184],{"type":421,"tag":457,"props":3964,"children":3965},{"class":459,"line":460},[3966,3971,3975,3979,3984,3988,3992,3996,4000],{"type":421,"tag":457,"props":3967,"children":3968},{"style":691},[3969],{"type":427,"value":3970},"proto ",{"type":421,"tag":457,"props":3972,"children":3973},{"style":487},[3974],{"type":427,"value":1889},{"type":421,"tag":457,"props":3976,"children":3977},{"style":697},[3978],{"type":427,"value":1726},{"type":421,"tag":457,"props":3980,"children":3981},{"style":1412},[3982],{"type":427,"value":3983},"data",{"type":421,"tag":457,"props":3985,"children":3986},{"style":697},[3987],{"type":427,"value":1874},{"type":421,"tag":457,"props":3989,"children":3990},{"style":470},[3991],{"type":427,"value":473},{"type":421,"tag":457,"props":3993,"children":3994},{"style":476},[3995],{"type":427,"value":1740},{"type":421,"tag":457,"props":3997,"children":3998},{"style":470},[3999],{"type":427,"value":484},{"type":421,"tag":457,"props":4001,"children":4002},{"style":697},[4003],{"type":427,"value":1441},{"type":421,"tag":457,"props":4005,"children":4006},{"class":459,"line":750},[4007,4012,4016,4020,4024,4028,4032,4036,4040,4044,4048,4054,4058,4062,4066,4070],{"type":421,"tag":457,"props":4008,"children":4009},{"style":691},[4010],{"type":427,"value":4011},"obj ",{"type":421,"tag":457,"props":4013,"children":4014},{"style":487},[4015],{"type":427,"value":1889},{"type":421,"tag":457,"props":4017,"children":4018},{"style":697},[4019],{"type":427,"value":1726},{"type":421,"tag":457,"props":4021,"children":4022},{"style":2674},[4023],{"type":427,"value":2040},{"type":421,"tag":457,"props":4025,"children":4026},{"style":697},[4027],{"type":427,"value":1063},{"type":421,"tag":457,"props":4029,"children":4030},{"style":697},[4031],{"type":427,"value":1726},{"type":421,"tag":457,"props":4033,"children":4034},{"style":691},[4035],{"type":427,"value":2057},{"type":421,"tag":457,"props":4037,"children":4038},{"style":697},[4039],{"type":427,"value":700},{"type":421,"tag":457,"props":4041,"children":4042},{"style":703},[4043],{"type":427,"value":1409},{"type":421,"tag":457,"props":4045,"children":4046},{"style":1412},[4047],{"type":427,"value":711},{"type":421,"tag":457,"props":4049,"children":4051},{"style":4050},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4052],{"type":427,"value":4053},"super",{"type":421,"tag":457,"props":4055,"children":4056},{"style":697},[4057],{"type":427,"value":700},{"type":421,"tag":457,"props":4059,"children":4060},{"style":691},[4061],{"type":427,"value":3983},{"type":421,"tag":457,"props":4063,"children":4064},{"style":1412},[4065],{"type":427,"value":741},{"type":421,"tag":457,"props":4067,"children":4068},{"style":697},[4069],{"type":427,"value":1688},{"type":421,"tag":457,"props":4071,"children":4072},{"style":697},[4073],{"type":427,"value":3185},{"type":421,"tag":457,"props":4075,"children":4076},{"class":459,"line":1394},[4077,4081,4085,4089,4094,4098],{"type":421,"tag":457,"props":4078,"children":4079},{"style":691},[4080],{"type":427,"value":694},{"type":421,"tag":457,"props":4082,"children":4083},{"style":697},[4084],{"type":427,"value":700},{"type":421,"tag":457,"props":4086,"children":4087},{"style":703},[4088],{"type":427,"value":3656},{"type":421,"tag":457,"props":4090,"children":4091},{"style":691},[4092],{"type":427,"value":4093},"(obj",{"type":421,"tag":457,"props":4095,"children":4096},{"style":697},[4097],{"type":427,"value":727},{"type":421,"tag":457,"props":4099,"children":4100},{"style":691},[4101],{"type":427,"value":4102}," proto)\n",{"type":421,"tag":457,"props":4104,"children":4105},{"class":459,"line":1435},[4106],{"type":421,"tag":457,"props":4107,"children":4108},{"emptyLinePlaceholder":414},[4109],{"type":427,"value":4110},"\n",{"type":421,"tag":457,"props":4112,"children":4113},{"class":459,"line":1444},[4114,4119,4123,4128,4132,4137,4141,4146],{"type":421,"tag":457,"props":4115,"children":4116},{"style":691},[4117],{"type":427,"value":4118},"obj2 ",{"type":421,"tag":457,"props":4120,"children":4121},{"style":487},[4122],{"type":427,"value":1889},{"type":421,"tag":457,"props":4124,"children":4125},{"style":691},[4126],{"type":427,"value":4127}," Object",{"type":421,"tag":457,"props":4129,"children":4130},{"style":697},[4131],{"type":427,"value":700},{"type":421,"tag":457,"props":4133,"children":4134},{"style":703},[4135],{"type":427,"value":4136},"create",{"type":421,"tag":457,"props":4138,"children":4139},{"style":691},[4140],{"type":427,"value":711},{"type":421,"tag":457,"props":4142,"children":4143},{"style":770},[4144],{"type":427,"value":4145},"null",{"type":421,"tag":457,"props":4147,"children":4148},{"style":691},[4149],{"type":427,"value":1432},{"type":421,"tag":457,"props":4151,"children":4152},{"class":459,"line":1479},[4153,4158,4162,4167,4171,4175,4179],{"type":421,"tag":457,"props":4154,"children":4155},{"style":691},[4156],{"type":427,"value":4157},"obj2",{"type":421,"tag":457,"props":4159,"children":4160},{"style":697},[4161],{"type":427,"value":700},{"type":421,"tag":457,"props":4163,"children":4164},{"style":691},[4165],{"type":427,"value":4166},"test ",{"type":421,"tag":457,"props":4168,"children":4169},{"style":487},[4170],{"type":427,"value":1889},{"type":421,"tag":457,"props":4172,"children":4173},{"style":691},[4174],{"type":427,"value":2655},{"type":421,"tag":457,"props":4176,"children":4177},{"style":697},[4178],{"type":427,"value":700},{"type":421,"tag":457,"props":4180,"children":4181},{"style":691},[4182],{"type":427,"value":4183},"test\n",{"type":421,"tag":457,"props":4185,"children":4186},{"class":459,"line":1516},[4187,4191,4195,4199,4203],{"type":421,"tag":457,"props":4188,"children":4189},{"style":691},[4190],{"type":427,"value":4157},{"type":421,"tag":457,"props":4192,"children":4193},{"style":697},[4194],{"type":427,"value":700},{"type":421,"tag":457,"props":4196,"children":4197},{"style":703},[4198],{"type":427,"value":1740},{"type":421,"tag":457,"props":4200,"children":4201},{"style":691},[4202],{"type":427,"value":845},{"type":421,"tag":457,"props":4204,"children":4205},{"style":744},[4206],{"type":427,"value":4207},"// 'test'\n",{"type":421,"tag":435,"props":4209,"children":4210},{},[4211],{"type":427,"value":4212},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":421,"tag":435,"props":4214,"children":4215},{},[4216],{"type":427,"value":4217},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":421,"tag":435,"props":4219,"children":4220},{},[4221],{"type":427,"value":4222},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":421,"tag":446,"props":4224,"children":4226},{"className":679,"code":4225,"language":681,"meta":415,"style":415},"class StaticClass extends null {\n  static pow () {}\n}\n",[4227],{"type":421,"tag":453,"props":4228,"children":4229},{"__ignoreMap":415},[4230,4255,4276],{"type":421,"tag":457,"props":4231,"children":4232},{"class":459,"line":460},[4233,4237,4242,4246,4251],{"type":421,"tag":457,"props":4234,"children":4235},{"style":1014},[4236],{"type":427,"value":3559},{"type":421,"tag":457,"props":4238,"children":4239},{"style":3562},[4240],{"type":427,"value":4241}," StaticClass",{"type":421,"tag":457,"props":4243,"children":4244},{"style":3582},[4245],{"type":427,"value":3585},{"type":421,"tag":457,"props":4247,"children":4248},{"style":770},[4249],{"type":427,"value":4250}," null",{"type":421,"tag":457,"props":4252,"children":4253},{"style":697},[4254],{"type":427,"value":1355},{"type":421,"tag":457,"props":4256,"children":4257},{"class":459,"line":750},[4258,4263,4268,4272],{"type":421,"tag":457,"props":4259,"children":4260},{"style":3582},[4261],{"type":427,"value":4262},"  static",{"type":421,"tag":457,"props":4264,"children":4265},{"style":2674},[4266],{"type":427,"value":4267}," pow",{"type":421,"tag":457,"props":4269,"children":4270},{"style":697},[4271],{"type":427,"value":1350},{"type":421,"tag":457,"props":4273,"children":4274},{"style":697},[4275],{"type":427,"value":3146},{"type":421,"tag":457,"props":4277,"children":4278},{"class":459,"line":1394},[4279],{"type":421,"tag":457,"props":4280,"children":4281},{"style":697},[4282],{"type":427,"value":1441},{"type":421,"tag":435,"props":4284,"children":4285},{},[4286],{"type":427,"value":4287},"P196，这个 new.target.prototype 没看懂。",{"type":421,"tag":429,"props":4289,"children":4291},{"id":4290},"对象系统",[4292],{"type":427,"value":4290},{"type":421,"tag":435,"props":4294,"children":4295},{},[4296],{"type":427,"value":4297},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":421,"tag":435,"props":4299,"children":4300},{},[4301],{"type":427,"value":4302},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":421,"tag":435,"props":4304,"children":4305},{},[4306],{"type":427,"value":4307},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":421,"tag":446,"props":4309,"children":4311},{"className":679,"code":4310,"language":681,"meta":415,"style":415},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4312],{"type":421,"tag":453,"props":4313,"children":4314},{"__ignoreMap":415},[4315,4330,4353,4374],{"type":421,"tag":457,"props":4316,"children":4317},{"class":459,"line":460},[4318,4322,4326],{"type":421,"tag":457,"props":4319,"children":4320},{"style":1014},[4321],{"type":427,"value":3559},{"type":421,"tag":457,"props":4323,"children":4324},{"style":3562},[4325],{"type":427,"value":1345},{"type":421,"tag":457,"props":4327,"children":4328},{"style":697},[4329],{"type":427,"value":3146},{"type":421,"tag":457,"props":4331,"children":4332},{"class":459,"line":750},[4333,4337,4341,4345,4349],{"type":421,"tag":457,"props":4334,"children":4335},{"style":1014},[4336],{"type":427,"value":3559},{"type":421,"tag":457,"props":4338,"children":4339},{"style":3562},[4340],{"type":427,"value":2862},{"type":421,"tag":457,"props":4342,"children":4343},{"style":3582},[4344],{"type":427,"value":3585},{"type":421,"tag":457,"props":4346,"children":4347},{"style":3588},[4348],{"type":427,"value":1345},{"type":421,"tag":457,"props":4350,"children":4351},{"style":697},[4352],{"type":427,"value":3146},{"type":421,"tag":457,"props":4354,"children":4355},{"class":459,"line":1394},[4356,4361,4366,4370],{"type":421,"tag":457,"props":4357,"children":4358},{"style":1448},[4359],{"type":427,"value":4360},"B",{"type":421,"tag":457,"props":4362,"children":4363},{"style":487},[4364],{"type":427,"value":4365}," instanceof",{"type":421,"tag":457,"props":4367,"children":4368},{"style":3562},[4369],{"type":427,"value":1345},{"type":421,"tag":457,"props":4371,"children":4372},{"style":744},[4373],{"type":427,"value":861},{"type":421,"tag":457,"props":4375,"children":4376},{"class":459,"line":1435},[4377,4381,4385,4390,4394,4398,4402],{"type":421,"tag":457,"props":4378,"children":4379},{"style":1448},[4380],{"type":427,"value":1451},{"type":421,"tag":457,"props":4382,"children":4383},{"style":697},[4384],{"type":427,"value":700},{"type":421,"tag":457,"props":4386,"children":4387},{"style":703},[4388],{"type":427,"value":4389},"isPrototypeOf",{"type":421,"tag":457,"props":4391,"children":4392},{"style":691},[4393],{"type":427,"value":711},{"type":421,"tag":457,"props":4395,"children":4396},{"style":1448},[4397],{"type":427,"value":4360},{"type":421,"tag":457,"props":4399,"children":4400},{"style":691},[4401],{"type":427,"value":741},{"type":421,"tag":457,"props":4403,"children":4404},{"style":744},[4405],{"type":427,"value":791},{"type":421,"tag":435,"props":4407,"children":4408},{},[4409],{"type":427,"value":4410},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":421,"tag":435,"props":4412,"children":4413},{},[4414],{"type":427,"value":4415},"this 实在函数执行时动态传入的，规则有三：",{"type":421,"tag":535,"props":4417,"children":4418},{},[4419,4424,4429],{"type":421,"tag":539,"props":4420,"children":4421},{},[4422],{"type":427,"value":4423},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":421,"tag":539,"props":4425,"children":4426},{},[4427],{"type":427,"value":4428},"根据存取运算符将左操作符作为 this 传入",{"type":421,"tag":539,"props":4430,"children":4431},{},[4432],{"type":427,"value":4433},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":421,"tag":435,"props":4435,"children":4436},{},[4437],{"type":427,"value":4438},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":421,"tag":535,"props":4440,"children":4441},{},[4442,4447],{"type":421,"tag":539,"props":4443,"children":4444},{},[4445],{"type":427,"value":4446},"如果运行在严格模式中，不改变 this 的值，否则",{"type":421,"tag":539,"props":4448,"children":4449},{},[4450],{"type":427,"value":4451},"使用全局对象作为 this 值",{"type":421,"tag":435,"props":4453,"children":4454},{},[4455],{"type":427,"value":4456},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":421,"tag":435,"props":4458,"children":4459},{},[4460],{"type":427,"value":4461},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":421,"tag":535,"props":4463,"children":4464},{},[4465,4470],{"type":421,"tag":539,"props":4466,"children":4467},{},[4468],{"type":427,"value":4469},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":421,"tag":539,"props":4471,"children":4472},{},[4473],{"type":427,"value":4474},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":421,"tag":435,"props":4476,"children":4477},{},[4478],{"type":427,"value":4479},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":421,"tag":435,"props":4481,"children":4482},{},[4483],{"type":427,"value":4484},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":421,"tag":446,"props":4486,"children":4488},{"className":679,"code":4487,"language":681,"meta":415,"style":415},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4489],{"type":421,"tag":453,"props":4490,"children":4491},{"__ignoreMap":415},[4492,4500,4521,4528,4536],{"type":421,"tag":457,"props":4493,"children":4494},{"class":459,"line":460},[4495],{"type":421,"tag":457,"props":4496,"children":4497},{"style":744},[4498],{"type":427,"value":4499},"// 获得所有原生对象、宿主对象等\n",{"type":421,"tag":457,"props":4501,"children":4502},{"class":459,"line":750},[4503,4507,4511,4516],{"type":421,"tag":457,"props":4504,"children":4505},{"style":691},[4506],{"type":427,"value":694},{"type":421,"tag":457,"props":4508,"children":4509},{"style":697},[4510],{"type":427,"value":700},{"type":421,"tag":457,"props":4512,"children":4513},{"style":703},[4514],{"type":427,"value":4515},"getOwnPropertyNames",{"type":421,"tag":457,"props":4517,"children":4518},{"style":691},[4519],{"type":427,"value":4520},"(global)\n",{"type":421,"tag":457,"props":4522,"children":4523},{"class":459,"line":1394},[4524],{"type":421,"tag":457,"props":4525,"children":4526},{"emptyLinePlaceholder":414},[4527],{"type":427,"value":4110},{"type":421,"tag":457,"props":4529,"children":4530},{"class":459,"line":1435},[4531],{"type":421,"tag":457,"props":4532,"children":4533},{"style":744},[4534],{"type":427,"value":4535},"// 验证 undefined 是否存在 global 对象中\n",{"type":421,"tag":457,"props":4537,"children":4538},{"class":459,"line":1444},[4539,4543,4547,4552,4557,4561,4565,4570,4574,4578],{"type":421,"tag":457,"props":4540,"children":4541},{"style":691},[4542],{"type":427,"value":694},{"type":421,"tag":457,"props":4544,"children":4545},{"style":697},[4546],{"type":427,"value":700},{"type":421,"tag":457,"props":4548,"children":4549},{"style":703},[4550],{"type":427,"value":4551},"getOwnPropertyDescriptor",{"type":421,"tag":457,"props":4553,"children":4554},{"style":691},[4555],{"type":427,"value":4556},"(global",{"type":421,"tag":457,"props":4558,"children":4559},{"style":697},[4560],{"type":427,"value":727},{"type":421,"tag":457,"props":4562,"children":4563},{"style":470},[4564],{"type":427,"value":473},{"type":421,"tag":457,"props":4566,"children":4567},{"style":476},[4568],{"type":427,"value":4569},"undefined",{"type":421,"tag":457,"props":4571,"children":4572},{"style":470},[4573],{"type":427,"value":484},{"type":421,"tag":457,"props":4575,"children":4576},{"style":691},[4577],{"type":427,"value":741},{"type":421,"tag":457,"props":4579,"children":4580},{"style":744},[4581],{"type":427,"value":4582},"// {value: undefined /* ... */ }\n",{"type":421,"tag":435,"props":4584,"children":4585},{},[4586],{"type":427,"value":4587},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":421,"tag":435,"props":4589,"children":4590},{},[4591],{"type":427,"value":4592},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":421,"tag":435,"props":4594,"children":4595},{},[4596],{"type":427,"value":4597},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":421,"tag":1029,"props":4599,"children":4600},{},[4601,4622],{"type":421,"tag":1033,"props":4602,"children":4603},{},[4604],{"type":421,"tag":1037,"props":4605,"children":4606},{},[4607,4612,4617],{"type":421,"tag":1041,"props":4608,"children":4609},{},[4610],{"type":427,"value":4611},"对象",{"type":421,"tag":1041,"props":4613,"children":4614},{},[4615],{"type":427,"value":4616},"特殊效果",{"type":421,"tag":1041,"props":4618,"children":4619},{},[4620],{"type":427,"value":4621},"注",{"type":421,"tag":1052,"props":4623,"children":4624},{},[4625,4643,4660,4676,4692,4708,4726,4742,4758,4774],{"type":421,"tag":1037,"props":4626,"children":4627},{},[4628,4633,4638],{"type":421,"tag":1059,"props":4629,"children":4630},{},[4631],{"type":427,"value":4632},"Number、String、Boolean、Symbol",{"type":421,"tag":1059,"props":4634,"children":4635},{},[4636],{"type":427,"value":4637},"包装类",{"type":421,"tag":1059,"props":4639,"children":4640},{},[4641],{"type":427,"value":4642},"({}).toString()",{"type":421,"tag":1037,"props":4644,"children":4645},{},[4646,4650,4655],{"type":421,"tag":1059,"props":4647,"children":4648},{},[4649],{"type":427,"value":694},{"type":421,"tag":1059,"props":4651,"children":4652},{},[4653],{"type":427,"value":4654},"调用包装类",{"type":421,"tag":1059,"props":4656,"children":4657},{},[4658],{"type":427,"value":4659},"new Object(5) + new Object(3)",{"type":421,"tag":1037,"props":4661,"children":4662},{},[4663,4668,4673],{"type":421,"tag":1059,"props":4664,"children":4665},{},[4666],{"type":427,"value":4667},"Array",{"type":421,"tag":1059,"props":4669,"children":4670},{},[4671],{"type":427,"value":4672},"自动维护 length 属性",{"type":421,"tag":1059,"props":4674,"children":4675},{},[],{"type":421,"tag":1037,"props":4677,"children":4678},{},[4679,4684,4689],{"type":421,"tag":1059,"props":4680,"children":4681},{},[4682],{"type":427,"value":4683},"Date",{"type":421,"tag":1059,"props":4685,"children":4686},{},[4687],{"type":427,"value":4688},"日期对象相关的运算",{"type":421,"tag":1059,"props":4690,"children":4691},{},[],{"type":421,"tag":1037,"props":4693,"children":4694},{},[4695,4700,4705],{"type":421,"tag":1059,"props":4696,"children":4697},{},[4698],{"type":427,"value":4699},"Function",{"type":421,"tag":1059,"props":4701,"children":4702},{},[4703],{"type":427,"value":4704},"创建可执行的函数",{"type":421,"tag":1059,"props":4706,"children":4707},{},[],{"type":421,"tag":1037,"props":4709,"children":4710},{},[4711,4716,4721],{"type":421,"tag":1059,"props":4712,"children":4713},{},[4714],{"type":427,"value":4715},"RegExp",{"type":421,"tag":1059,"props":4717,"children":4718},{},[4719],{"type":427,"value":4720},"可执行",{"type":421,"tag":1059,"props":4722,"children":4723},{},[4724],{"type":427,"value":4725},"仅在某些宿主中",{"type":421,"tag":1037,"props":4727,"children":4728},{},[4729,4734,4739],{"type":421,"tag":1059,"props":4730,"children":4731},{},[4732],{"type":427,"value":4733},"Proxy",{"type":421,"tag":1059,"props":4735,"children":4736},{},[4737],{"type":427,"value":4738},"代理目标对象、回收代理",{"type":421,"tag":1059,"props":4740,"children":4741},{},[],{"type":421,"tag":1037,"props":4743,"children":4744},{},[4745,4750,4755],{"type":421,"tag":1059,"props":4746,"children":4747},{},[4748],{"type":427,"value":4749},"TypedArray、DataView",{"type":421,"tag":1059,"props":4751,"children":4752},{},[4753],{"type":427,"value":4754},"创建及绑定 buffer",{"type":421,"tag":1059,"props":4756,"children":4757},{},[],{"type":421,"tag":1037,"props":4759,"children":4760},{},[4761,4766,4771],{"type":421,"tag":1059,"props":4762,"children":4763},{},[4764],{"type":427,"value":4765},"ArrayBuffer、SharedArray、Buffer",{"type":421,"tag":1059,"props":4767,"children":4768},{},[4769],{"type":427,"value":4770},"初始化 buffer 并维护 byteLength 属性",{"type":421,"tag":1059,"props":4772,"children":4773},{},[],{"type":421,"tag":1037,"props":4775,"children":4776},{},[4777,4782,4787],{"type":421,"tag":1059,"props":4778,"children":4779},{},[4780],{"type":427,"value":4781},"WeakMap、WeakSet",{"type":421,"tag":1059,"props":4783,"children":4784},{},[4785],{"type":427,"value":4786},"不修改引用并自动回收对象",{"type":421,"tag":1059,"props":4788,"children":4789},{},[],{"type":421,"tag":435,"props":4791,"children":4792},{},[4793],{"type":427,"value":4794},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":421,"tag":446,"props":4796,"children":4798},{"className":679,"code":4797,"language":681,"meta":415,"style":415},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4799],{"type":421,"tag":453,"props":4800,"children":4801},{"__ignoreMap":415},[4802,4835,4872,4948,4961,4968,5020,5027],{"type":421,"tag":457,"props":4803,"children":4804},{"class":459,"line":460},[4805,4809,4814,4818,4822,4827,4831],{"type":421,"tag":457,"props":4806,"children":4807},{"style":1014},[4808],{"type":427,"value":1340},{"type":421,"tag":457,"props":4810,"children":4811},{"style":703},[4812],{"type":427,"value":4813}," MyDate",{"type":421,"tag":457,"props":4815,"children":4816},{"style":697},[4817],{"type":427,"value":711},{"type":421,"tag":457,"props":4819,"children":4820},{"style":487},[4821],{"type":427,"value":1302},{"type":421,"tag":457,"props":4823,"children":4824},{"style":1641},[4825],{"type":427,"value":4826},"args",{"type":421,"tag":457,"props":4828,"children":4829},{"style":697},[4830],{"type":427,"value":1649},{"type":421,"tag":457,"props":4832,"children":4833},{"style":697},[4834],{"type":427,"value":1355},{"type":421,"tag":457,"props":4836,"children":4837},{"class":459,"line":750},[4838,4842,4847,4851,4856,4860,4864,4868],{"type":421,"tag":457,"props":4839,"children":4840},{"style":1014},[4841],{"type":427,"value":3792},{"type":421,"tag":457,"props":4843,"children":4844},{"style":1448},[4845],{"type":427,"value":4846}," Base",{"type":421,"tag":457,"props":4848,"children":4849},{"style":487},[4850],{"type":427,"value":1378},{"type":421,"tag":457,"props":4852,"children":4853},{"style":2837},[4854],{"type":427,"value":4855}," Date",{"type":421,"tag":457,"props":4857,"children":4858},{"style":697},[4859],{"type":427,"value":700},{"type":421,"tag":457,"props":4861,"children":4862},{"style":1448},[4863],{"type":427,"value":2848},{"type":421,"tag":457,"props":4865,"children":4866},{"style":697},[4867],{"type":427,"value":700},{"type":421,"tag":457,"props":4869,"children":4870},{"style":1448},[4871],{"type":427,"value":3815},{"type":421,"tag":457,"props":4873,"children":4874},{"class":459,"line":1394},[4875,4879,4884,4888,4892,4896,4900,4904,4908,4912,4916,4920,4924,4928,4932,4936,4940,4944],{"type":421,"tag":457,"props":4876,"children":4877},{"style":1014},[4878],{"type":427,"value":3792},{"type":421,"tag":457,"props":4880,"children":4881},{"style":1448},[4882],{"type":427,"value":4883}," instance",{"type":421,"tag":457,"props":4885,"children":4886},{"style":487},[4887],{"type":427,"value":1378},{"type":421,"tag":457,"props":4889,"children":4890},{"style":691},[4891],{"type":427,"value":4127},{"type":421,"tag":457,"props":4893,"children":4894},{"style":697},[4895],{"type":427,"value":700},{"type":421,"tag":457,"props":4897,"children":4898},{"style":703},[4899],{"type":427,"value":3656},{"type":421,"tag":457,"props":4901,"children":4902},{"style":1412},[4903],{"type":427,"value":711},{"type":421,"tag":457,"props":4905,"children":4906},{"style":487},[4907],{"type":427,"value":1530},{"type":421,"tag":457,"props":4909,"children":4910},{"style":703},[4911],{"type":427,"value":4846},{"type":421,"tag":457,"props":4913,"children":4914},{"style":1412},[4915],{"type":427,"value":711},{"type":421,"tag":457,"props":4917,"children":4918},{"style":487},[4919],{"type":427,"value":1302},{"type":421,"tag":457,"props":4921,"children":4922},{"style":691},[4923],{"type":427,"value":4826},{"type":421,"tag":457,"props":4925,"children":4926},{"style":1412},[4927],{"type":427,"value":1649},{"type":421,"tag":457,"props":4929,"children":4930},{"style":697},[4931],{"type":427,"value":727},{"type":421,"tag":457,"props":4933,"children":4934},{"style":2837},[4935],{"type":427,"value":4813},{"type":421,"tag":457,"props":4937,"children":4938},{"style":697},[4939],{"type":427,"value":700},{"type":421,"tag":457,"props":4941,"children":4942},{"style":1448},[4943],{"type":427,"value":2848},{"type":421,"tag":457,"props":4945,"children":4946},{"style":1412},[4947],{"type":427,"value":1432},{"type":421,"tag":457,"props":4949,"children":4950},{"class":459,"line":1435},[4951,4956],{"type":421,"tag":457,"props":4952,"children":4953},{"style":1718},[4954],{"type":427,"value":4955},"  return",{"type":421,"tag":457,"props":4957,"children":4958},{"style":691},[4959],{"type":427,"value":4960}," instance\n",{"type":421,"tag":457,"props":4962,"children":4963},{"class":459,"line":1444},[4964],{"type":421,"tag":457,"props":4965,"children":4966},{"style":697},[4967],{"type":427,"value":1441},{"type":421,"tag":457,"props":4969,"children":4970},{"class":459,"line":1479},[4971,4975,4979,4983,4987,4992,4996,5000,5004,5008,5012,5016],{"type":421,"tag":457,"props":4972,"children":4973},{"style":691},[4974],{"type":427,"value":694},{"type":421,"tag":457,"props":4976,"children":4977},{"style":697},[4978],{"type":427,"value":700},{"type":421,"tag":457,"props":4980,"children":4981},{"style":703},[4982],{"type":427,"value":3656},{"type":421,"tag":457,"props":4984,"children":4985},{"style":691},[4986],{"type":427,"value":711},{"type":421,"tag":457,"props":4988,"children":4989},{"style":2837},[4990],{"type":427,"value":4991},"MyDate",{"type":421,"tag":457,"props":4993,"children":4994},{"style":697},[4995],{"type":427,"value":700},{"type":421,"tag":457,"props":4997,"children":4998},{"style":1448},[4999],{"type":427,"value":2848},{"type":421,"tag":457,"props":5001,"children":5002},{"style":697},[5003],{"type":427,"value":727},{"type":421,"tag":457,"props":5005,"children":5006},{"style":2837},[5007],{"type":427,"value":4855},{"type":421,"tag":457,"props":5009,"children":5010},{"style":697},[5011],{"type":427,"value":700},{"type":421,"tag":457,"props":5013,"children":5014},{"style":1448},[5015],{"type":427,"value":2848},{"type":421,"tag":457,"props":5017,"children":5018},{"style":691},[5019],{"type":427,"value":1432},{"type":421,"tag":457,"props":5021,"children":5022},{"class":459,"line":1516},[5023],{"type":421,"tag":457,"props":5024,"children":5025},{"emptyLinePlaceholder":414},[5026],{"type":427,"value":4110},{"type":421,"tag":457,"props":5028,"children":5029},{"class":459,"line":1524},[5030,5035,5039,5043,5047,5051,5055,5059],{"type":421,"tag":457,"props":5031,"children":5032},{"style":691},[5033],{"type":427,"value":5034},"console",{"type":421,"tag":457,"props":5036,"children":5037},{"style":697},[5038],{"type":427,"value":700},{"type":421,"tag":457,"props":5040,"children":5041},{"style":703},[5042],{"type":427,"value":1409},{"type":421,"tag":457,"props":5044,"children":5045},{"style":691},[5046],{"type":427,"value":711},{"type":421,"tag":457,"props":5048,"children":5049},{"style":487},[5050],{"type":427,"value":1530},{"type":421,"tag":457,"props":5052,"children":5053},{"style":703},[5054],{"type":427,"value":4813},{"type":421,"tag":457,"props":5056,"children":5057},{"style":691},[5058],{"type":427,"value":829},{"type":421,"tag":457,"props":5060,"children":5061},{"style":744},[5062],{"type":427,"value":5063},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":421,"tag":429,"props":5065,"children":5067},{"id":5066},"可定制的对象属性",[5068],{"type":427,"value":5066},{"type":421,"tag":435,"props":5070,"children":5071},{},[5072],{"type":427,"value":5073},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":421,"tag":535,"props":5075,"children":5076},{},[5077,5082,5087],{"type":421,"tag":539,"props":5078,"children":5079},{},[5080],{"type":427,"value":5081},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":421,"tag":539,"props":5083,"children":5084},{},[5085],{"type":427,"value":5086},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":421,"tag":539,"props":5088,"children":5089},{},[5090],{"type":427,"value":5091},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":421,"tag":435,"props":5093,"children":5094},{},[5095],{"type":427,"value":5096},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":421,"tag":1029,"props":5098,"children":5099},{},[5100,5126],{"type":421,"tag":1033,"props":5101,"children":5102},{},[5103],{"type":421,"tag":1037,"props":5104,"children":5105},{},[5106,5111,5116,5121],{"type":421,"tag":1041,"props":5107,"children":5108},{},[5109],{"type":427,"value":5110},"Object.xxx 方法",{"type":421,"tag":1041,"props":5112,"children":5113},{},[5114],{"type":427,"value":5115},"方法说明",{"type":421,"tag":1041,"props":5117,"children":5118},{},[5119],{"type":427,"value":5120},"对自有属性表的操作",{"type":421,"tag":1041,"props":5122,"children":5123},{},[5124],{"type":427,"value":5125},"检查方法",{"type":421,"tag":1052,"props":5127,"children":5128},{},[5129,5158,5186],{"type":421,"tag":1037,"props":5130,"children":5131},{},[5132,5137,5142,5153],{"type":421,"tag":1059,"props":5133,"children":5134},{},[5135],{"type":427,"value":5136},"preventExtensions(obj)",{"type":421,"tag":1059,"props":5138,"children":5139},{},[5140],{"type":427,"value":5141},"使实例不能添加新属性，也不可重置原型",{"type":421,"tag":1059,"props":5143,"children":5144},{},[5145,5151],{"type":421,"tag":5146,"props":5147,"children":5148},"del",{},[5149],{"type":427,"value":5150},"add",{"type":427,"value":5152},"、delete、update",{"type":421,"tag":1059,"props":5154,"children":5155},{},[5156],{"type":427,"value":5157},"isExtensible(obj)",{"type":421,"tag":1037,"props":5159,"children":5160},{},[5161,5166,5171,5181],{"type":421,"tag":1059,"props":5162,"children":5163},{},[5164],{"type":427,"value":5165},"seal(obj)",{"type":421,"tag":1059,"props":5167,"children":5168},{},[5169],{"type":427,"value":5170},"使实例不能新增新属性，也不能删除既有属性",{"type":421,"tag":1059,"props":5172,"children":5173},{},[5174,5179],{"type":421,"tag":5146,"props":5175,"children":5176},{},[5177],{"type":427,"value":5178},"add、delete",{"type":427,"value":5180},"、update",{"type":421,"tag":1059,"props":5182,"children":5183},{},[5184],{"type":427,"value":5185},"isSealed(obj)",{"type":421,"tag":1037,"props":5187,"children":5188},{},[5189,5194,5199,5207],{"type":421,"tag":1059,"props":5190,"children":5191},{},[5192],{"type":427,"value":5193},"freeze(obj)",{"type":421,"tag":1059,"props":5195,"children":5196},{},[5197],{"type":427,"value":5198},"使实例所有属性只读，且不能再添加、删除属性",{"type":421,"tag":1059,"props":5200,"children":5201},{},[5202],{"type":421,"tag":5146,"props":5203,"children":5204},{},[5205],{"type":427,"value":5206},"add、delete、update",{"type":421,"tag":1059,"props":5208,"children":5209},{},[5210],{"type":427,"value":5211},"isFrozen(obj)",{"type":421,"tag":435,"props":5213,"children":5214},{},[5215],{"type":427,"value":5216},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":421,"tag":535,"props":5218,"children":5219},{},[5220,5225,5230],{"type":421,"tag":539,"props":5221,"children":5222},{},[5223],{"type":427,"value":5224},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":421,"tag":539,"props":5226,"children":5227},{},[5228],{"type":427,"value":5229},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":421,"tag":539,"props":5231,"children":5232},{},[5233],{"type":427,"value":5234},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":421,"tag":429,"props":5236,"children":5238},{"id":5237},"运行期侵入",[5239],{"type":427,"value":5237},{"type":421,"tag":435,"props":5241,"children":5242},{},[5243],{"type":427,"value":5244},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":421,"tag":435,"props":5246,"children":5247},{},[5248],{"type":427,"value":5249},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":421,"tag":435,"props":5251,"children":5252},{},[5253],{"type":427,"value":5254},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":421,"tag":1029,"props":5256,"children":5257},{},[5258,5274],{"type":421,"tag":1033,"props":5259,"children":5260},{},[5261],{"type":421,"tag":1037,"props":5262,"children":5263},{},[5264,5269],{"type":421,"tag":1041,"props":5265,"children":5266},{},[5267],{"type":427,"value":5268},"内部方法",{"type":421,"tag":1041,"props":5270,"children":5271},{},[5272],{"type":427,"value":5273},"handler.xxx",{"type":421,"tag":1052,"props":5275,"children":5276},{},[5277,5290,5303,5316,5329,5342,5355,5368,5381,5394,5407,5420,5433],{"type":421,"tag":1037,"props":5278,"children":5279},{},[5280,5285],{"type":421,"tag":1059,"props":5281,"children":5282},{},[5283],{"type":427,"value":5284},"[[GetPrototypeOf]]",{"type":421,"tag":1059,"props":5286,"children":5287},{},[5288],{"type":427,"value":5289},"getPrototypeOf()",{"type":421,"tag":1037,"props":5291,"children":5292},{},[5293,5298],{"type":421,"tag":1059,"props":5294,"children":5295},{},[5296],{"type":427,"value":5297},"[[SetPrototypeOf]]",{"type":421,"tag":1059,"props":5299,"children":5300},{},[5301],{"type":427,"value":5302},"setPrototypeOf()",{"type":421,"tag":1037,"props":5304,"children":5305},{},[5306,5311],{"type":421,"tag":1059,"props":5307,"children":5308},{},[5309],{"type":427,"value":5310},"[[IsExtensible]]",{"type":421,"tag":1059,"props":5312,"children":5313},{},[5314],{"type":427,"value":5315},"isExtensible()",{"type":421,"tag":1037,"props":5317,"children":5318},{},[5319,5324],{"type":421,"tag":1059,"props":5320,"children":5321},{},[5322],{"type":427,"value":5323},"[[PreventExtensions]]",{"type":421,"tag":1059,"props":5325,"children":5326},{},[5327],{"type":427,"value":5328},"preventExtensions()",{"type":421,"tag":1037,"props":5330,"children":5331},{},[5332,5337],{"type":421,"tag":1059,"props":5333,"children":5334},{},[5335],{"type":427,"value":5336},"[[GetOwnProperty]]",{"type":421,"tag":1059,"props":5338,"children":5339},{},[5340],{"type":427,"value":5341},"getOwnPropertyDescriptor()",{"type":421,"tag":1037,"props":5343,"children":5344},{},[5345,5350],{"type":421,"tag":1059,"props":5346,"children":5347},{},[5348],{"type":427,"value":5349},"[[HasProperty]]",{"type":421,"tag":1059,"props":5351,"children":5352},{},[5353],{"type":427,"value":5354},"has()",{"type":421,"tag":1037,"props":5356,"children":5357},{},[5358,5363],{"type":421,"tag":1059,"props":5359,"children":5360},{},[5361],{"type":427,"value":5362},"[[DefineOwnProperty]]",{"type":421,"tag":1059,"props":5364,"children":5365},{},[5366],{"type":427,"value":5367},"defineProperty()",{"type":421,"tag":1037,"props":5369,"children":5370},{},[5371,5376],{"type":421,"tag":1059,"props":5372,"children":5373},{},[5374],{"type":427,"value":5375},"[[Get]]",{"type":421,"tag":1059,"props":5377,"children":5378},{},[5379],{"type":427,"value":5380},"get()",{"type":421,"tag":1037,"props":5382,"children":5383},{},[5384,5389],{"type":421,"tag":1059,"props":5385,"children":5386},{},[5387],{"type":427,"value":5388},"[[Set]]",{"type":421,"tag":1059,"props":5390,"children":5391},{},[5392],{"type":427,"value":5393},"set()",{"type":421,"tag":1037,"props":5395,"children":5396},{},[5397,5402],{"type":421,"tag":1059,"props":5398,"children":5399},{},[5400],{"type":427,"value":5401},"[[Delete]]",{"type":421,"tag":1059,"props":5403,"children":5404},{},[5405],{"type":427,"value":5406},"deleteProperty()",{"type":421,"tag":1037,"props":5408,"children":5409},{},[5410,5415],{"type":421,"tag":1059,"props":5411,"children":5412},{},[5413],{"type":427,"value":5414},"[[OwnPropertyKeys]]",{"type":421,"tag":1059,"props":5416,"children":5417},{},[5418],{"type":427,"value":5419},"ownKeys()",{"type":421,"tag":1037,"props":5421,"children":5422},{},[5423,5428],{"type":421,"tag":1059,"props":5424,"children":5425},{},[5426],{"type":427,"value":5427},"[[Call]]",{"type":421,"tag":1059,"props":5429,"children":5430},{},[5431],{"type":427,"value":5432},"apply()",{"type":421,"tag":1037,"props":5434,"children":5435},{},[5436,5441],{"type":421,"tag":1059,"props":5437,"children":5438},{},[5439],{"type":427,"value":5440},"[[Construct]]",{"type":421,"tag":1059,"props":5442,"children":5443},{},[5444],{"type":427,"value":5445},"construct()",{"type":421,"tag":435,"props":5447,"children":5448},{},[5449],{"type":427,"value":5450},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":421,"tag":535,"props":5452,"children":5453},{},[5454,5459],{"type":421,"tag":539,"props":5455,"children":5456},{},[5457],{"type":427,"value":5458},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":421,"tag":539,"props":5460,"children":5461},{},[5462],{"type":427,"value":5463},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":421,"tag":435,"props":5465,"children":5466},{},[5467],{"type":427,"value":5468},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":421,"tag":446,"props":5470,"children":5472},{"className":679,"code":5471,"language":681,"meta":415,"style":415},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5473],{"type":421,"tag":453,"props":5474,"children":5475},{"__ignoreMap":415},[5476,5514,5563,5604,5682,5726,5791,5798,5832,5872,5911,5931,5948,5986,5993,6000,6011],{"type":421,"tag":457,"props":5477,"children":5478},{"class":459,"line":460},[5479,5483,5488,5492,5497,5501,5506,5510],{"type":421,"tag":457,"props":5480,"children":5481},{"style":1014},[5482],{"type":427,"value":1340},{"type":421,"tag":457,"props":5484,"children":5485},{"style":703},[5486],{"type":427,"value":5487}," intrudeOnPrototype",{"type":421,"tag":457,"props":5489,"children":5490},{"style":697},[5491],{"type":427,"value":711},{"type":421,"tag":457,"props":5493,"children":5494},{"style":1641},[5495],{"type":427,"value":5496},"Fn",{"type":421,"tag":457,"props":5498,"children":5499},{"style":697},[5500],{"type":427,"value":727},{"type":421,"tag":457,"props":5502,"children":5503},{"style":1641},[5504],{"type":427,"value":5505}," handler",{"type":421,"tag":457,"props":5507,"children":5508},{"style":697},[5509],{"type":427,"value":1649},{"type":421,"tag":457,"props":5511,"children":5512},{"style":697},[5513],{"type":427,"value":1355},{"type":421,"tag":457,"props":5515,"children":5516},{"class":459,"line":750},[5517,5521,5526,5530,5534,5538,5543,5547,5551,5555,5559],{"type":421,"tag":457,"props":5518,"children":5519},{"style":1014},[5520],{"type":427,"value":3792},{"type":421,"tag":457,"props":5522,"children":5523},{"style":1448},[5524],{"type":427,"value":5525}," originPrototype",{"type":421,"tag":457,"props":5527,"children":5528},{"style":487},[5529],{"type":427,"value":1378},{"type":421,"tag":457,"props":5531,"children":5532},{"style":691},[5533],{"type":427,"value":4127},{"type":421,"tag":457,"props":5535,"children":5536},{"style":697},[5537],{"type":427,"value":700},{"type":421,"tag":457,"props":5539,"children":5540},{"style":703},[5541],{"type":427,"value":5542},"getPrototypeOf",{"type":421,"tag":457,"props":5544,"children":5545},{"style":1412},[5546],{"type":427,"value":711},{"type":421,"tag":457,"props":5548,"children":5549},{"style":2837},[5550],{"type":427,"value":5496},{"type":421,"tag":457,"props":5552,"children":5553},{"style":697},[5554],{"type":427,"value":700},{"type":421,"tag":457,"props":5556,"children":5557},{"style":1448},[5558],{"type":427,"value":2848},{"type":421,"tag":457,"props":5560,"children":5561},{"style":1412},[5562],{"type":427,"value":1432},{"type":421,"tag":457,"props":5564,"children":5565},{"class":459,"line":1394},[5566,5570,5575,5579,5583,5587,5591,5595,5600],{"type":421,"tag":457,"props":5567,"children":5568},{"style":1014},[5569],{"type":427,"value":3792},{"type":421,"tag":457,"props":5571,"children":5572},{"style":1448},[5573],{"type":427,"value":5574}," target",{"type":421,"tag":457,"props":5576,"children":5577},{"style":487},[5578],{"type":427,"value":1378},{"type":421,"tag":457,"props":5580,"children":5581},{"style":691},[5582],{"type":427,"value":4127},{"type":421,"tag":457,"props":5584,"children":5585},{"style":697},[5586],{"type":427,"value":700},{"type":421,"tag":457,"props":5588,"children":5589},{"style":703},[5590],{"type":427,"value":4136},{"type":421,"tag":457,"props":5592,"children":5593},{"style":1412},[5594],{"type":427,"value":711},{"type":421,"tag":457,"props":5596,"children":5597},{"style":691},[5598],{"type":427,"value":5599},"originPrototype",{"type":421,"tag":457,"props":5601,"children":5602},{"style":1412},[5603],{"type":427,"value":1432},{"type":421,"tag":457,"props":5605,"children":5606},{"class":459,"line":1435},[5607,5611,5615,5621,5625,5630,5634,5639,5643,5647,5652,5656,5661,5665,5670,5674,5678],{"type":421,"tag":457,"props":5608,"children":5609},{"style":1014},[5610],{"type":427,"value":3792},{"type":421,"tag":457,"props":5612,"children":5613},{"style":697},[5614],{"type":427,"value":1726},{"type":421,"tag":457,"props":5616,"children":5618},{"style":5617},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5619],{"type":427,"value":5620}," proxy",{"type":421,"tag":457,"props":5622,"children":5623},{"style":697},[5624],{"type":427,"value":1874},{"type":421,"tag":457,"props":5626,"children":5627},{"style":1448},[5628],{"type":427,"value":5629}," newPrototype",{"type":421,"tag":457,"props":5631,"children":5632},{"style":697},[5633],{"type":427,"value":727},{"type":421,"tag":457,"props":5635,"children":5636},{"style":1448},[5637],{"type":427,"value":5638}," revoke",{"type":421,"tag":457,"props":5640,"children":5641},{"style":697},[5642],{"type":427,"value":1749},{"type":421,"tag":457,"props":5644,"children":5645},{"style":487},[5646],{"type":427,"value":1378},{"type":421,"tag":457,"props":5648,"children":5649},{"style":691},[5650],{"type":427,"value":5651}," Proxy",{"type":421,"tag":457,"props":5653,"children":5654},{"style":697},[5655],{"type":427,"value":700},{"type":421,"tag":457,"props":5657,"children":5658},{"style":703},[5659],{"type":427,"value":5660},"revocable",{"type":421,"tag":457,"props":5662,"children":5663},{"style":1412},[5664],{"type":427,"value":711},{"type":421,"tag":457,"props":5666,"children":5667},{"style":691},[5668],{"type":427,"value":5669},"target",{"type":421,"tag":457,"props":5671,"children":5672},{"style":697},[5673],{"type":427,"value":727},{"type":421,"tag":457,"props":5675,"children":5676},{"style":691},[5677],{"type":427,"value":5505},{"type":421,"tag":457,"props":5679,"children":5680},{"style":1412},[5681],{"type":427,"value":1432},{"type":421,"tag":457,"props":5683,"children":5684},{"class":459,"line":1444},[5685,5690,5694,5698,5702,5706,5710,5714,5718,5722],{"type":421,"tag":457,"props":5686,"children":5687},{"style":691},[5688],{"type":427,"value":5689},"  Object",{"type":421,"tag":457,"props":5691,"children":5692},{"style":697},[5693],{"type":427,"value":700},{"type":421,"tag":457,"props":5695,"children":5696},{"style":703},[5697],{"type":427,"value":3656},{"type":421,"tag":457,"props":5699,"children":5700},{"style":1412},[5701],{"type":427,"value":711},{"type":421,"tag":457,"props":5703,"children":5704},{"style":2837},[5705],{"type":427,"value":5496},{"type":421,"tag":457,"props":5707,"children":5708},{"style":697},[5709],{"type":427,"value":700},{"type":421,"tag":457,"props":5711,"children":5712},{"style":1448},[5713],{"type":427,"value":2848},{"type":421,"tag":457,"props":5715,"children":5716},{"style":697},[5717],{"type":427,"value":727},{"type":421,"tag":457,"props":5719,"children":5720},{"style":691},[5721],{"type":427,"value":5629},{"type":421,"tag":457,"props":5723,"children":5724},{"style":1412},[5725],{"type":427,"value":1432},{"type":421,"tag":457,"props":5727,"children":5728},{"class":459,"line":1479},[5729,5733,5737,5742,5746,5750,5754,5758,5762,5766,5770,5774,5778,5782,5786],{"type":421,"tag":457,"props":5730,"children":5731},{"style":1718},[5732],{"type":427,"value":4955},{"type":421,"tag":457,"props":5734,"children":5735},{"style":697},[5736],{"type":427,"value":1350},{"type":421,"tag":457,"props":5738,"children":5739},{"style":1014},[5740],{"type":427,"value":5741}," =>",{"type":421,"tag":457,"props":5743,"children":5744},{"style":703},[5745],{"type":427,"value":5638},{"type":421,"tag":457,"props":5747,"children":5748},{"style":1412},[5749],{"type":427,"value":711},{"type":421,"tag":457,"props":5751,"children":5752},{"style":691},[5753],{"type":427,"value":694},{"type":421,"tag":457,"props":5755,"children":5756},{"style":697},[5757],{"type":427,"value":700},{"type":421,"tag":457,"props":5759,"children":5760},{"style":703},[5761],{"type":427,"value":3656},{"type":421,"tag":457,"props":5763,"children":5764},{"style":1412},[5765],{"type":427,"value":711},{"type":421,"tag":457,"props":5767,"children":5768},{"style":2837},[5769],{"type":427,"value":5496},{"type":421,"tag":457,"props":5771,"children":5772},{"style":697},[5773],{"type":427,"value":700},{"type":421,"tag":457,"props":5775,"children":5776},{"style":1448},[5777],{"type":427,"value":2848},{"type":421,"tag":457,"props":5779,"children":5780},{"style":697},[5781],{"type":427,"value":727},{"type":421,"tag":457,"props":5783,"children":5784},{"style":691},[5785],{"type":427,"value":5525},{"type":421,"tag":457,"props":5787,"children":5788},{"style":1412},[5789],{"type":427,"value":5790},"))\n",{"type":421,"tag":457,"props":5792,"children":5793},{"class":459,"line":1516},[5794],{"type":421,"tag":457,"props":5795,"children":5796},{"style":697},[5797],{"type":427,"value":1441},{"type":421,"tag":457,"props":5799,"children":5800},{"class":459,"line":1524},[5801,5806,5811,5815,5819,5824,5828],{"type":421,"tag":457,"props":5802,"children":5803},{"style":1014},[5804],{"type":427,"value":5805},"const",{"type":421,"tag":457,"props":5807,"children":5808},{"style":1448},[5809],{"type":427,"value":5810}," recovery",{"type":421,"tag":457,"props":5812,"children":5813},{"style":487},[5814],{"type":427,"value":1378},{"type":421,"tag":457,"props":5816,"children":5817},{"style":703},[5818],{"type":427,"value":5487},{"type":421,"tag":457,"props":5820,"children":5821},{"style":691},[5822],{"type":427,"value":5823},"(String",{"type":421,"tag":457,"props":5825,"children":5826},{"style":697},[5827],{"type":427,"value":727},{"type":421,"tag":457,"props":5829,"children":5830},{"style":697},[5831],{"type":427,"value":1355},{"type":421,"tag":457,"props":5833,"children":5834},{"class":459,"line":1551},[5835,5839,5843,5847,5851,5855,5859,5864,5868],{"type":421,"tag":457,"props":5836,"children":5837},{"style":703},[5838],{"type":427,"value":2735},{"type":421,"tag":457,"props":5840,"children":5841},{"style":697},[5842],{"type":427,"value":1874},{"type":421,"tag":457,"props":5844,"children":5845},{"style":1014},[5846],{"type":427,"value":1468},{"type":421,"tag":457,"props":5848,"children":5849},{"style":697},[5850],{"type":427,"value":1947},{"type":421,"tag":457,"props":5852,"children":5853},{"style":1641},[5854],{"type":427,"value":5669},{"type":421,"tag":457,"props":5856,"children":5857},{"style":697},[5858],{"type":427,"value":727},{"type":421,"tag":457,"props":5860,"children":5861},{"style":1641},[5862],{"type":427,"value":5863}," prop",{"type":421,"tag":457,"props":5865,"children":5866},{"style":697},[5867],{"type":427,"value":1649},{"type":421,"tag":457,"props":5869,"children":5870},{"style":697},[5871],{"type":427,"value":1355},{"type":421,"tag":457,"props":5873,"children":5874},{"class":459,"line":2127},[5875,5879,5883,5887,5891,5895,5899,5903,5907],{"type":421,"tag":457,"props":5876,"children":5877},{"style":1718},[5878],{"type":427,"value":2008},{"type":421,"tag":457,"props":5880,"children":5881},{"style":1412},[5882],{"type":427,"value":1947},{"type":421,"tag":457,"props":5884,"children":5885},{"style":691},[5886],{"type":427,"value":3055},{"type":421,"tag":457,"props":5888,"children":5889},{"style":487},[5890],{"type":427,"value":2021},{"type":421,"tag":457,"props":5892,"children":5893},{"style":470},[5894],{"type":427,"value":473},{"type":421,"tag":457,"props":5896,"children":5897},{"style":476},[5898],{"type":427,"value":1740},{"type":421,"tag":457,"props":5900,"children":5901},{"style":470},[5902],{"type":427,"value":484},{"type":421,"tag":457,"props":5904,"children":5905},{"style":1412},[5906],{"type":427,"value":741},{"type":421,"tag":457,"props":5908,"children":5909},{"style":697},[5910],{"type":427,"value":1764},{"type":421,"tag":457,"props":5912,"children":5913},{"class":459,"line":2187},[5914,5919,5923,5927],{"type":421,"tag":457,"props":5915,"children":5916},{"style":1718},[5917],{"type":427,"value":5918},"      return",{"type":421,"tag":457,"props":5920,"children":5921},{"style":470},[5922],{"type":427,"value":473},{"type":421,"tag":457,"props":5924,"children":5925},{"style":476},[5926],{"type":427,"value":1740},{"type":421,"tag":457,"props":5928,"children":5929},{"style":470},[5930],{"type":427,"value":1391},{"type":421,"tag":457,"props":5932,"children":5933},{"class":459,"line":2248},[5934,5939,5944],{"type":421,"tag":457,"props":5935,"children":5936},{"style":697},[5937],{"type":427,"value":5938},"    }",{"type":421,"tag":457,"props":5940,"children":5941},{"style":1718},[5942],{"type":427,"value":5943}," else",{"type":421,"tag":457,"props":5945,"children":5946},{"style":697},[5947],{"type":427,"value":1355},{"type":421,"tag":457,"props":5949,"children":5950},{"class":459,"line":2289},[5951,5955,5960,5964,5969,5973,5977,5982],{"type":421,"tag":457,"props":5952,"children":5953},{"style":1718},[5954],{"type":427,"value":5918},{"type":421,"tag":457,"props":5956,"children":5957},{"style":691},[5958],{"type":427,"value":5959}," Reflect",{"type":421,"tag":457,"props":5961,"children":5962},{"style":697},[5963],{"type":427,"value":700},{"type":421,"tag":457,"props":5965,"children":5966},{"style":703},[5967],{"type":427,"value":5968},"get",{"type":421,"tag":457,"props":5970,"children":5971},{"style":1412},[5972],{"type":427,"value":711},{"type":421,"tag":457,"props":5974,"children":5975},{"style":487},[5976],{"type":427,"value":1302},{"type":421,"tag":457,"props":5978,"children":5979},{"style":4050},[5980],{"type":427,"value":5981},"arguments",{"type":421,"tag":457,"props":5983,"children":5984},{"style":1412},[5985],{"type":427,"value":1432},{"type":421,"tag":457,"props":5987,"children":5988},{"class":459,"line":2330},[5989],{"type":421,"tag":457,"props":5990,"children":5991},{"style":697},[5992],{"type":427,"value":2336},{"type":421,"tag":457,"props":5994,"children":5995},{"class":459,"line":2339},[5996],{"type":421,"tag":457,"props":5997,"children":5998},{"style":697},[5999],{"type":427,"value":2094},{"type":421,"tag":457,"props":6001,"children":6002},{"class":459,"line":2347},[6003,6007],{"type":421,"tag":457,"props":6004,"children":6005},{"style":697},[6006],{"type":427,"value":1688},{"type":421,"tag":457,"props":6008,"children":6009},{"style":691},[6010],{"type":427,"value":1432},{"type":421,"tag":457,"props":6012,"children":6014},{"class":459,"line":6013},17,[6015,6019,6023,6027,6031,6036,6040,6045],{"type":421,"tag":457,"props":6016,"children":6017},{"style":691},[6018],{"type":427,"value":5034},{"type":421,"tag":457,"props":6020,"children":6021},{"style":697},[6022],{"type":427,"value":700},{"type":421,"tag":457,"props":6024,"children":6025},{"style":703},[6026],{"type":427,"value":1409},{"type":421,"tag":457,"props":6028,"children":6029},{"style":691},[6030],{"type":427,"value":711},{"type":421,"tag":457,"props":6032,"children":6033},{"style":470},[6034],{"type":427,"value":6035},"''",{"type":421,"tag":457,"props":6037,"children":6038},{"style":697},[6039],{"type":427,"value":700},{"type":421,"tag":457,"props":6041,"children":6042},{"style":691},[6043],{"type":427,"value":6044},"test) ",{"type":421,"tag":457,"props":6046,"children":6047},{"style":744},[6048],{"type":427,"value":6049},"// test\n",{"type":421,"tag":429,"props":6051,"children":6053},{"id":6052},"元编程系统",[6054],{"type":427,"value":6052},{"type":421,"tag":435,"props":6056,"children":6057},{},[6058],{"type":427,"value":6059},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":421,"tag":422,"props":6061,"children":6063},{"id":6062},"结构化",[6064],{"type":427,"value":6062},{"type":421,"tag":429,"props":6066,"children":6068},{"id":6067},"概述",[6069],{"type":427,"value":6067},{"type":421,"tag":435,"props":6071,"children":6072},{},[6073],{"type":427,"value":6074},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":421,"tag":435,"props":6076,"children":6077},{},[6078],{"type":427,"value":6079},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":421,"tag":435,"props":6081,"children":6082},{},[6083],{"type":427,"value":6084},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":421,"tag":435,"props":6086,"children":6087},{},[6088],{"type":427,"value":6089},"面向对象解决了结构化带来诸多问题的三点：",{"type":421,"tag":535,"props":6091,"children":6092},{},[6093,6098,6103],{"type":421,"tag":539,"props":6094,"children":6095},{},[6096],{"type":427,"value":6097},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":421,"tag":539,"props":6099,"children":6100},{},[6101],{"type":427,"value":6102},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":421,"tag":539,"props":6104,"children":6105},{},[6106],{"type":427,"value":6107},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":421,"tag":435,"props":6109,"children":6110},{},[6111],{"type":427,"value":6112},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":421,"tag":435,"props":6114,"children":6115},{},[6116],{"type":427,"value":6117},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":421,"tag":429,"props":6119,"children":6121},{"id":6120},"基本的组织元素",[6122],{"type":427,"value":6120},{"type":421,"tag":435,"props":6124,"children":6125},{},[6126],{"type":427,"value":6127},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":421,"tag":1029,"props":6129,"children":6130},{},[6131,6157],{"type":421,"tag":1033,"props":6132,"children":6133},{},[6134],{"type":421,"tag":1037,"props":6135,"children":6136},{},[6137,6142,6147,6152],{"type":421,"tag":1041,"props":6138,"children":6139},{},[6140],{"type":427,"value":6141},"元素",{"type":421,"tag":1041,"props":6143,"children":6144},{},[6145],{"type":427,"value":6146},"物理形态",{"type":421,"tag":1041,"props":6148,"children":6149},{},[6150],{"type":427,"value":6151},"静态",{"type":421,"tag":1041,"props":6153,"children":6154},{},[6155],{"type":427,"value":6156},"动态",{"type":421,"tag":1052,"props":6158,"children":6159},{},[6160,6181,6204,6226],{"type":421,"tag":1037,"props":6161,"children":6162},{},[6163,6168,6171,6176],{"type":421,"tag":1059,"props":6164,"children":6165},{},[6166],{"type":427,"value":6167},"标识符",{"type":421,"tag":1059,"props":6169,"children":6170},{},[],{"type":421,"tag":1059,"props":6172,"children":6173},{},[6174],{"type":427,"value":6175},"变量声明、函数声明、类声明",{"type":421,"tag":1059,"props":6177,"children":6178},{},[6179],{"type":427,"value":6180},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":421,"tag":1037,"props":6182,"children":6183},{},[6184,6189,6194,6199],{"type":421,"tag":1059,"props":6185,"children":6186},{},[6187],{"type":427,"value":6188},"表达式",{"type":421,"tag":1059,"props":6190,"children":6191},{},[6192],{"type":427,"value":6193},"模板字符串",{"type":421,"tag":1059,"props":6195,"children":6196},{},[6197],{"type":427,"value":6198},"值、箭头函数体",{"type":421,"tag":1059,"props":6200,"children":6201},{},[6202],{"type":427,"value":6203},"通过 eval 执行表达式语句",{"type":421,"tag":1037,"props":6205,"children":6206},{},[6207,6211,6216,6221],{"type":421,"tag":1059,"props":6208,"children":6209},{},[6210],{"type":427,"value":1580},{"type":421,"tag":1059,"props":6212,"children":6213},{},[6214],{"type":427,"value":6215},".js 文件",{"type":421,"tag":1059,"props":6217,"children":6218},{},[6219],{"type":427,"value":6220},"块和块级作用域",{"type":421,"tag":1059,"props":6222,"children":6223},{},[6224],{"type":427,"value":6225},"eval()",{"type":421,"tag":1037,"props":6227,"children":6228},{},[6229,6233,6238,6243],{"type":421,"tag":1059,"props":6230,"children":6231},{},[6232],{"type":427,"value":2365},{"type":421,"tag":1059,"props":6234,"children":6235},{},[6236],{"type":427,"value":6237},".mjs 文件",{"type":421,"tag":1059,"props":6239,"children":6240},{},[6241],{"type":427,"value":6242},"import、export、require()",{"type":421,"tag":1059,"props":6244,"children":6245},{},[6246],{"type":427,"value":6247},"import().then()",{"type":421,"tag":435,"props":6249,"children":6250},{},[6251],{"type":427,"value":6252},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":421,"tag":435,"props":6254,"children":6255},{},[6256],{"type":427,"value":6257},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":421,"tag":435,"props":6259,"children":6260},{},[6261],{"type":427,"value":6262},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":421,"tag":435,"props":6264,"children":6265},{},[6266,6268,6273],{"type":427,"value":6267},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":421,"tag":457,"props":6269,"children":6270},{},[6271],{"type":427,"value":6272},"1,2,3",{"type":427,"value":6274}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":421,"tag":435,"props":6276,"children":6277},{},[6278],{"type":427,"value":6279},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":421,"tag":435,"props":6281,"children":6282},{},[6283],{"type":427,"value":6284},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":421,"tag":435,"props":6286,"children":6287},{},[6288],{"type":427,"value":6289},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":421,"tag":435,"props":6291,"children":6292},{},[6293],{"type":427,"value":6294},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":421,"tag":429,"props":6296,"children":6298},{"id":6297},"声明",[6299],{"type":427,"value":6297},{"type":421,"tag":435,"props":6301,"children":6302},{},[6303,6305,6316],{"type":427,"value":6304},"除了 const 和 namespace",{"type":421,"tag":514,"props":6306,"children":6307},{},[6308],{"type":421,"tag":518,"props":6309,"children":6313},{"href":6310,"ariaDescribedBy":6311,"dataFootnoteRef":415,"id":6312},"#user-content-fn-namespace",[522],"user-content-fnref-namespace",[6314],{"type":427,"value":6315},"4",{"type":427,"value":6317}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":421,"tag":446,"props":6319,"children":6321},{"className":679,"code":6320,"language":681,"meta":415,"style":415},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6322],{"type":421,"tag":453,"props":6323,"children":6324},{"__ignoreMap":415},[6325,6353,6369,6401,6423],{"type":421,"tag":457,"props":6326,"children":6327},{"class":459,"line":460},[6328,6333,6337,6341,6345,6349],{"type":421,"tag":457,"props":6329,"children":6330},{"style":487},[6331],{"type":427,"value":6332},"!",{"type":421,"tag":457,"props":6334,"children":6335},{"style":691},[6336],{"type":427,"value":711},{"type":421,"tag":457,"props":6338,"children":6339},{"style":1014},[6340],{"type":427,"value":1340},{"type":421,"tag":457,"props":6342,"children":6343},{"style":703},[6344],{"type":427,"value":2040},{"type":421,"tag":457,"props":6346,"children":6347},{"style":697},[6348],{"type":427,"value":1063},{"type":421,"tag":457,"props":6350,"children":6351},{"style":697},[6352],{"type":427,"value":1355},{"type":421,"tag":457,"props":6354,"children":6355},{"class":459,"line":750},[6356,6360,6364],{"type":421,"tag":457,"props":6357,"children":6358},{"style":691},[6359],{"type":427,"value":2788},{"type":421,"tag":457,"props":6361,"children":6362},{"style":487},[6363],{"type":427,"value":1378},{"type":421,"tag":457,"props":6365,"children":6366},{"style":719},[6367],{"type":427,"value":6368}," 100\n",{"type":421,"tag":457,"props":6370,"children":6371},{"class":459,"line":1394},[6372,6376,6380,6384,6388,6392,6396],{"type":421,"tag":457,"props":6373,"children":6374},{"style":691},[6375],{"type":427,"value":1400},{"type":421,"tag":457,"props":6377,"children":6378},{"style":697},[6379],{"type":427,"value":700},{"type":421,"tag":457,"props":6381,"children":6382},{"style":703},[6383],{"type":427,"value":1409},{"type":421,"tag":457,"props":6385,"children":6386},{"style":1412},[6387],{"type":427,"value":711},{"type":421,"tag":457,"props":6389,"children":6390},{"style":691},[6391],{"type":427,"value":1740},{"type":421,"tag":457,"props":6393,"children":6394},{"style":1412},[6395],{"type":427,"value":741},{"type":421,"tag":457,"props":6397,"children":6398},{"style":744},[6399],{"type":427,"value":6400},"// [Function ...]\n",{"type":421,"tag":457,"props":6402,"children":6403},{"class":459,"line":1435},[6404,6409,6413,6418],{"type":421,"tag":457,"props":6405,"children":6406},{"style":4050},[6407],{"type":427,"value":6408},"  arguments",{"type":421,"tag":457,"props":6410,"children":6411},{"style":487},[6412],{"type":427,"value":1378},{"type":421,"tag":457,"props":6414,"children":6415},{"style":1412},[6416],{"type":427,"value":6417}," [] ",{"type":421,"tag":457,"props":6419,"children":6420},{"style":744},[6421],{"type":427,"value":6422},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":421,"tag":457,"props":6424,"children":6425},{"class":459,"line":1444},[6426,6430],{"type":421,"tag":457,"props":6427,"children":6428},{"style":697},[6429],{"type":427,"value":1688},{"type":421,"tag":457,"props":6431,"children":6432},{"style":691},[6433],{"type":427,"value":6434},"())\n",{"type":421,"tag":435,"props":6436,"children":6437},{},[6438],{"type":427,"value":6439},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":421,"tag":446,"props":6441,"children":6443},{"className":679,"code":6442,"language":681,"meta":415,"style":415},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6444],{"type":421,"tag":453,"props":6445,"children":6446},{"__ignoreMap":415},[6447,6455,6474,6500,6528,6566],{"type":421,"tag":457,"props":6448,"children":6449},{"class":459,"line":460},[6450],{"type":421,"tag":457,"props":6451,"children":6452},{"style":744},[6453],{"type":427,"value":6454},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":421,"tag":457,"props":6456,"children":6457},{"class":459,"line":750},[6458,6462,6466,6470],{"type":421,"tag":457,"props":6459,"children":6460},{"style":1014},[6461],{"type":427,"value":1340},{"type":421,"tag":457,"props":6463,"children":6464},{"style":703},[6465],{"type":427,"value":2040},{"type":421,"tag":457,"props":6467,"children":6468},{"style":697},[6469],{"type":427,"value":1063},{"type":421,"tag":457,"props":6471,"children":6472},{"style":697},[6473],{"type":427,"value":1355},{"type":421,"tag":457,"props":6475,"children":6476},{"class":459,"line":1394},[6477,6482,6486,6491,6495],{"type":421,"tag":457,"props":6478,"children":6479},{"style":697},[6480],{"type":427,"value":6481},"  {",{"type":421,"tag":457,"props":6483,"children":6484},{"style":1014},[6485],{"type":427,"value":1340},{"type":421,"tag":457,"props":6487,"children":6488},{"style":703},[6489],{"type":427,"value":6490}," x",{"type":421,"tag":457,"props":6492,"children":6493},{"style":697},[6494],{"type":427,"value":1350},{"type":421,"tag":457,"props":6496,"children":6497},{"style":697},[6498],{"type":427,"value":6499}," {}};\n",{"type":421,"tag":457,"props":6501,"children":6502},{"class":459,"line":1435},[6503,6507,6511,6515,6520,6524],{"type":421,"tag":457,"props":6504,"children":6505},{"style":1867},[6506],{"type":427,"value":2788},{"type":421,"tag":457,"props":6508,"children":6509},{"style":697},[6510],{"type":427,"value":1874},{"type":421,"tag":457,"props":6512,"children":6513},{"style":1014},[6514],{"type":427,"value":1468},{"type":421,"tag":457,"props":6516,"children":6517},{"style":703},[6518],{"type":427,"value":6519}," y",{"type":421,"tag":457,"props":6521,"children":6522},{"style":697},[6523],{"type":427,"value":1350},{"type":421,"tag":457,"props":6525,"children":6526},{"style":697},[6527],{"type":427,"value":3146},{"type":421,"tag":457,"props":6529,"children":6530},{"class":459,"line":1444},[6531,6536,6540,6545,6549,6553,6558,6562],{"type":421,"tag":457,"props":6532,"children":6533},{"style":1718},[6534],{"type":427,"value":6535},"  if",{"type":421,"tag":457,"props":6537,"children":6538},{"style":1412},[6539],{"type":427,"value":1947},{"type":421,"tag":457,"props":6541,"children":6542},{"style":853},[6543],{"type":427,"value":6544},"true",{"type":421,"tag":457,"props":6546,"children":6547},{"style":1412},[6548],{"type":427,"value":741},{"type":421,"tag":457,"props":6550,"children":6551},{"style":1014},[6552],{"type":427,"value":1340},{"type":421,"tag":457,"props":6554,"children":6555},{"style":703},[6556],{"type":427,"value":6557}," z",{"type":421,"tag":457,"props":6559,"children":6560},{"style":697},[6561],{"type":427,"value":1350},{"type":421,"tag":457,"props":6563,"children":6564},{"style":697},[6565],{"type":427,"value":3146},{"type":421,"tag":457,"props":6567,"children":6568},{"class":459,"line":1479},[6569],{"type":421,"tag":457,"props":6570,"children":6571},{"style":697},[6572],{"type":427,"value":1441},{"type":421,"tag":429,"props":6574,"children":6576},{"id":6575},"语句与代码分块",[6577],{"type":427,"value":6575},{"type":421,"tag":435,"props":6579,"children":6580},{},[6581],{"type":427,"value":6582},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":421,"tag":435,"props":6584,"children":6585},{},[6586],{"type":427,"value":6587},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":421,"tag":435,"props":6589,"children":6590},{},[6591,6593,6604],{"type":427,"value":6592},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":421,"tag":514,"props":6594,"children":6595},{},[6596],{"type":421,"tag":518,"props":6597,"children":6601},{"href":6598,"ariaDescribedBy":6599,"dataFootnoteRef":415,"id":6600},"#user-content-fn-iterationenv",[522],"user-content-fnref-iterationenv",[6602],{"type":427,"value":6603},"5",{"type":427,"value":6605},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":421,"tag":435,"props":6607,"children":6608},{},[6609],{"type":427,"value":6610},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":421,"tag":435,"props":6612,"children":6613},{},[6614],{"type":427,"value":6615},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":421,"tag":446,"props":6617,"children":6619},{"className":679,"code":6618,"language":681,"meta":415,"style":415},"eval(`if (true) ; else ;`) // undefined\n",[6620],{"type":421,"tag":453,"props":6621,"children":6622},{"__ignoreMap":415},[6623],{"type":421,"tag":457,"props":6624,"children":6625},{"class":459,"line":460},[6626,6631,6635,6640,6645,6649,6653],{"type":421,"tag":457,"props":6627,"children":6628},{"style":703},[6629],{"type":427,"value":6630},"eval",{"type":421,"tag":457,"props":6632,"children":6633},{"style":691},[6634],{"type":427,"value":711},{"type":421,"tag":457,"props":6636,"children":6637},{"style":470},[6638],{"type":427,"value":6639},"`",{"type":421,"tag":457,"props":6641,"children":6642},{"style":476},[6643],{"type":427,"value":6644},"if (true) ; else ;",{"type":421,"tag":457,"props":6646,"children":6647},{"style":470},[6648],{"type":427,"value":6639},{"type":421,"tag":457,"props":6650,"children":6651},{"style":691},[6652],{"type":427,"value":741},{"type":421,"tag":457,"props":6654,"children":6655},{"style":744},[6656],{"type":427,"value":980},{"type":421,"tag":429,"props":6658,"children":6660},{"id":6659},"组织形式分块的方法",[6661],{"type":427,"value":6659},{"type":421,"tag":435,"props":6663,"children":6664},{},[6665],{"type":427,"value":6666},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":421,"tag":435,"props":6668,"children":6669},{},[6670],{"type":427,"value":6671},"数据声明语句中存在块级作用域，如：",{"type":421,"tag":446,"props":6673,"children":6675},{"className":679,"code":6674,"language":681,"meta":415,"style":415},"const x = 1, y = x\nconsole.log(y) // 1\n",[6676],{"type":421,"tag":453,"props":6677,"children":6678},{"__ignoreMap":415},[6679,6714],{"type":421,"tag":457,"props":6680,"children":6681},{"class":459,"line":460},[6682,6686,6690,6694,6698,6702,6706,6710],{"type":421,"tag":457,"props":6683,"children":6684},{"style":1014},[6685],{"type":427,"value":5805},{"type":421,"tag":457,"props":6687,"children":6688},{"style":1448},[6689],{"type":427,"value":6490},{"type":421,"tag":457,"props":6691,"children":6692},{"style":487},[6693],{"type":427,"value":1378},{"type":421,"tag":457,"props":6695,"children":6696},{"style":719},[6697],{"type":427,"value":1824},{"type":421,"tag":457,"props":6699,"children":6700},{"style":697},[6701],{"type":427,"value":727},{"type":421,"tag":457,"props":6703,"children":6704},{"style":1448},[6705],{"type":427,"value":6519},{"type":421,"tag":457,"props":6707,"children":6708},{"style":487},[6709],{"type":427,"value":1378},{"type":421,"tag":457,"props":6711,"children":6712},{"style":691},[6713],{"type":427,"value":1022},{"type":421,"tag":457,"props":6715,"children":6716},{"class":459,"line":750},[6717,6721,6725,6729,6734],{"type":421,"tag":457,"props":6718,"children":6719},{"style":691},[6720],{"type":427,"value":5034},{"type":421,"tag":457,"props":6722,"children":6723},{"style":697},[6724],{"type":427,"value":700},{"type":421,"tag":457,"props":6726,"children":6727},{"style":703},[6728],{"type":427,"value":1409},{"type":421,"tag":457,"props":6730,"children":6731},{"style":691},[6732],{"type":427,"value":6733},"(y) ",{"type":421,"tag":457,"props":6735,"children":6736},{"style":744},[6737],{"type":427,"value":6738},"// 1\n",{"type":421,"tag":435,"props":6740,"children":6741},{},[6742],{"type":427,"value":6743},"表达式级别的作用域只存在于 eval 调用中。",{"type":421,"tag":435,"props":6745,"children":6746},{},[6747],{"type":427,"value":6748},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":421,"tag":446,"props":6750,"children":6752},{"className":679,"code":6751,"language":681,"meta":415,"style":415},"if (1) let x = 1\n",[6753],{"type":421,"tag":453,"props":6754,"children":6755},{"__ignoreMap":415},[6756],{"type":421,"tag":457,"props":6757,"children":6758},{"class":459,"line":460},[6759,6764,6768,6772,6776,6780,6784,6788],{"type":421,"tag":457,"props":6760,"children":6761},{"style":1718},[6762],{"type":427,"value":6763},"if",{"type":421,"tag":457,"props":6765,"children":6766},{"style":691},[6767],{"type":427,"value":1947},{"type":421,"tag":457,"props":6769,"children":6770},{"style":719},[6771],{"type":427,"value":526},{"type":421,"tag":457,"props":6773,"children":6774},{"style":691},[6775],{"type":427,"value":741},{"type":421,"tag":457,"props":6777,"children":6778},{"style":1014},[6779],{"type":427,"value":1017},{"type":421,"tag":457,"props":6781,"children":6782},{"style":691},[6783],{"type":427,"value":975},{"type":421,"tag":457,"props":6785,"children":6786},{"style":487},[6787],{"type":427,"value":1889},{"type":421,"tag":457,"props":6789,"children":6790},{"style":719},[6791],{"type":427,"value":6792}," 1\n",{"type":421,"tag":435,"props":6794,"children":6795},{},[6796],{"type":427,"value":6797},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":421,"tag":435,"props":6799,"children":6800},{},[6801],{"type":427,"value":6802},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":421,"tag":435,"props":6804,"children":6805},{},[6806],{"type":427,"value":6807},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":421,"tag":535,"props":6809,"children":6810},{},[6811,6816,6821],{"type":421,"tag":539,"props":6812,"children":6813},{},[6814],{"type":427,"value":6815},"词法作用域互不相交。",{"type":421,"tag":539,"props":6817,"children":6818},{},[6819],{"type":427,"value":6820},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":421,"tag":539,"props":6822,"children":6823},{},[6824],{"type":427,"value":6825},"高级别流程变更语句可以跨越低级别的作用域。",{"type":421,"tag":435,"props":6827,"children":6828},{},[6829],{"type":427,"value":6830},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":421,"tag":429,"props":6832,"children":6834},{"id":6833},"层次结构程序设计",[6835],{"type":427,"value":6833},{"type":421,"tag":435,"props":6837,"children":6838},{},[6839],{"type":427,"value":6840},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":421,"tag":446,"props":6842,"children":6844},{"className":679,"code":6843,"language":681,"meta":415,"style":415},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6845],{"type":421,"tag":453,"props":6846,"children":6847},{"__ignoreMap":415},[6848,6887],{"type":421,"tag":457,"props":6849,"children":6850},{"class":459,"line":460},[6851,6855,6860,6864,6869,6873,6878,6882],{"type":421,"tag":457,"props":6852,"children":6853},{"style":1014},[6854],{"type":427,"value":5805},{"type":421,"tag":457,"props":6856,"children":6857},{"style":1448},[6858],{"type":427,"value":6859}," method",{"type":421,"tag":457,"props":6861,"children":6862},{"style":487},[6863],{"type":427,"value":1378},{"type":421,"tag":457,"props":6865,"children":6866},{"style":691},[6867],{"type":427,"value":6868}," obj[Object",{"type":421,"tag":457,"props":6870,"children":6871},{"style":697},[6872],{"type":427,"value":700},{"type":421,"tag":457,"props":6874,"children":6875},{"style":691},[6876],{"type":427,"value":6877},"getPropertySymbols[",{"type":421,"tag":457,"props":6879,"children":6880},{"style":719},[6881],{"type":427,"value":722},{"type":421,"tag":457,"props":6883,"children":6884},{"style":691},[6885],{"type":427,"value":6886},"]]\n",{"type":421,"tag":457,"props":6888,"children":6889},{"class":459,"line":750},[6890,6894,6898,6903],{"type":421,"tag":457,"props":6891,"children":6892},{"style":691},[6893],{"type":427,"value":3768},{"type":421,"tag":457,"props":6895,"children":6896},{"style":697},[6897],{"type":427,"value":700},{"type":421,"tag":457,"props":6899,"children":6900},{"style":703},[6901],{"type":427,"value":6902},"call",{"type":421,"tag":457,"props":6904,"children":6905},{"style":691},[6906],{"type":427,"value":6907},"(obj)\n",{"type":421,"tag":435,"props":6909,"children":6910},{},[6911],{"type":427,"value":6912},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":421,"tag":429,"props":6914,"children":6916},{"id":6915},"变量作用域",[6917],{"type":427,"value":6915},{"type":421,"tag":435,"props":6919,"children":6920},{},[6921],{"type":427,"value":6922},"变量作用域有三个特殊之处：",{"type":421,"tag":535,"props":6924,"children":6925},{},[6926,6931,6936],{"type":421,"tag":539,"props":6927,"children":6928},{},[6929],{"type":427,"value":6930},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":421,"tag":539,"props":6932,"children":6933},{},[6934],{"type":427,"value":6935},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":421,"tag":539,"props":6937,"children":6938},{},[6939],{"type":427,"value":6940},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":421,"tag":435,"props":6942,"children":6943},{},[6944],{"type":427,"value":6945},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":421,"tag":435,"props":6947,"children":6948},{},[6949],{"type":427,"value":6950},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":421,"tag":429,"props":6952,"children":6954},{"id":6953},"私有属性和私有字段的纷争",[6955],{"type":427,"value":6953},{"type":421,"tag":435,"props":6957,"children":6958},{},[6959],{"type":427,"value":6960},"(_　_)。゜zｚＺ",{"type":421,"tag":422,"props":6962,"children":6964},{"id":6963},"函数式语言特性",[6965],{"type":427,"value":6963},{"type":421,"tag":429,"props":6967,"children":6969},{"id":6968},"概述-1",[6970],{"type":427,"value":6067},{"type":421,"tag":435,"props":6972,"children":6973},{},[6974],{"type":427,"value":6975},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":421,"tag":435,"props":6977,"children":6978},{},[6979],{"type":427,"value":6980},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":421,"tag":429,"props":6982,"children":6984},{"id":6983},"js中的函数",[6985],{"type":427,"value":6986},"JS中的函数",{"type":421,"tag":435,"props":6988,"children":6989},{},[6990],{"type":427,"value":6991},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":421,"tag":535,"props":6993,"children":6994},{},[6995,7000,7005],{"type":421,"tag":539,"props":6996,"children":6997},{},[6998],{"type":427,"value":6999},"无法显式使用“use strict”切换到严格模式。",{"type":421,"tag":539,"props":7001,"children":7002},{},[7003],{"type":427,"value":7004},"不接受重名参数。",{"type":421,"tag":539,"props":7006,"children":7007},{},[7008],{"type":427,"value":7009},"形参和 arguments 之间将解除绑定关系。",{"type":421,"tag":435,"props":7011,"children":7012},{},[7013],{"type":427,"value":7014},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":421,"tag":446,"props":7016,"children":7018},{"className":679,"code":7017,"language":681,"meta":415,"style":415},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[7019],{"type":421,"tag":453,"props":7020,"children":7021},{"__ignoreMap":415},[7022,7066,7119,7126],{"type":421,"tag":457,"props":7023,"children":7024},{"class":459,"line":460},[7025,7029,7033,7037,7041,7045,7050,7054,7058,7062],{"type":421,"tag":457,"props":7026,"children":7027},{"style":1014},[7028],{"type":427,"value":1340},{"type":421,"tag":457,"props":7030,"children":7031},{"style":703},[7032],{"type":427,"value":2040},{"type":421,"tag":457,"props":7034,"children":7035},{"style":697},[7036],{"type":427,"value":711},{"type":421,"tag":457,"props":7038,"children":7039},{"style":1641},[7040],{"type":427,"value":518},{"type":421,"tag":457,"props":7042,"children":7043},{"style":697},[7044],{"type":427,"value":727},{"type":421,"tag":457,"props":7046,"children":7047},{"style":1641},[7048],{"type":427,"value":7049}," b",{"type":421,"tag":457,"props":7051,"children":7052},{"style":487},[7053],{"type":427,"value":1378},{"type":421,"tag":457,"props":7055,"children":7056},{"style":719},[7057],{"type":427,"value":1824},{"type":421,"tag":457,"props":7059,"children":7060},{"style":697},[7061],{"type":427,"value":1649},{"type":421,"tag":457,"props":7063,"children":7064},{"style":697},[7065],{"type":427,"value":1355},{"type":421,"tag":457,"props":7067,"children":7068},{"class":459,"line":750},[7069,7073,7077,7081,7085,7089,7093,7098,7102,7107,7111,7115],{"type":421,"tag":457,"props":7070,"children":7071},{"style":691},[7072],{"type":427,"value":1400},{"type":421,"tag":457,"props":7074,"children":7075},{"style":697},[7076],{"type":427,"value":700},{"type":421,"tag":457,"props":7078,"children":7079},{"style":703},[7080],{"type":427,"value":1409},{"type":421,"tag":457,"props":7082,"children":7083},{"style":1412},[7084],{"type":427,"value":711},{"type":421,"tag":457,"props":7086,"children":7087},{"style":691},[7088],{"type":427,"value":1740},{"type":421,"tag":457,"props":7090,"children":7091},{"style":697},[7092],{"type":427,"value":700},{"type":421,"tag":457,"props":7094,"children":7095},{"style":1448},[7096],{"type":427,"value":7097},"length",{"type":421,"tag":457,"props":7099,"children":7100},{"style":697},[7101],{"type":427,"value":727},{"type":421,"tag":457,"props":7103,"children":7104},{"style":4050},[7105],{"type":427,"value":7106}," arguments",{"type":421,"tag":457,"props":7108,"children":7109},{"style":697},[7110],{"type":427,"value":700},{"type":421,"tag":457,"props":7112,"children":7113},{"style":1448},[7114],{"type":427,"value":7097},{"type":421,"tag":457,"props":7116,"children":7117},{"style":1412},[7118],{"type":427,"value":1432},{"type":421,"tag":457,"props":7120,"children":7121},{"class":459,"line":1394},[7122],{"type":421,"tag":457,"props":7123,"children":7124},{"style":697},[7125],{"type":427,"value":1441},{"type":421,"tag":457,"props":7127,"children":7128},{"class":459,"line":1435},[7129,7133,7137,7141,7145,7150,7154],{"type":421,"tag":457,"props":7130,"children":7131},{"style":703},[7132],{"type":427,"value":1740},{"type":421,"tag":457,"props":7134,"children":7135},{"style":691},[7136],{"type":427,"value":711},{"type":421,"tag":457,"props":7138,"children":7139},{"style":719},[7140],{"type":427,"value":526},{"type":421,"tag":457,"props":7142,"children":7143},{"style":697},[7144],{"type":427,"value":727},{"type":421,"tag":457,"props":7146,"children":7147},{"style":719},[7148],{"type":427,"value":7149}," 2",{"type":421,"tag":457,"props":7151,"children":7152},{"style":691},[7153],{"type":427,"value":741},{"type":421,"tag":457,"props":7155,"children":7156},{"style":744},[7157],{"type":427,"value":7158},"// 1，2\n",{"type":421,"tag":435,"props":7160,"children":7161},{},[7162,7164,7175],{"type":427,"value":7163},"表达式最后返回的是值而不是引用",{"type":421,"tag":514,"props":7165,"children":7166},{},[7167],{"type":421,"tag":518,"props":7168,"children":7172},{"href":7169,"ariaDescribedBy":7170,"dataFootnoteRef":415,"id":7171},"#user-content-fn-reference",[522],"user-content-fnref-reference",[7173],{"type":427,"value":7174},"6",{"type":427,"value":7176},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":421,"tag":446,"props":7178,"children":7180},{"className":679,"code":7179,"language":681,"meta":415,"style":415},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7181],{"type":421,"tag":453,"props":7182,"children":7183},{"__ignoreMap":415},[7184,7209,7228,7249,7265,7302,7309,7316,7353],{"type":421,"tag":457,"props":7185,"children":7186},{"class":459,"line":460},[7187,7192,7196,7201,7205],{"type":421,"tag":457,"props":7188,"children":7189},{"style":691},[7190],{"type":427,"value":7191},"window",{"type":421,"tag":457,"props":7193,"children":7194},{"style":697},[7195],{"type":427,"value":700},{"type":421,"tag":457,"props":7197,"children":7198},{"style":691},[7199],{"type":427,"value":7200},"x ",{"type":421,"tag":457,"props":7202,"children":7203},{"style":487},[7204],{"type":427,"value":1889},{"type":421,"tag":457,"props":7206,"children":7207},{"style":719},[7208],{"type":427,"value":6792},{"type":421,"tag":457,"props":7210,"children":7211},{"class":459,"line":750},[7212,7216,7220,7224],{"type":421,"tag":457,"props":7213,"children":7214},{"style":1014},[7215],{"type":427,"value":5805},{"type":421,"tag":457,"props":7217,"children":7218},{"style":1448},[7219],{"type":427,"value":3238},{"type":421,"tag":457,"props":7221,"children":7222},{"style":487},[7223],{"type":427,"value":1378},{"type":421,"tag":457,"props":7225,"children":7226},{"style":697},[7227],{"type":427,"value":1355},{"type":421,"tag":457,"props":7229,"children":7230},{"class":459,"line":1394},[7231,7236,7240,7244],{"type":421,"tag":457,"props":7232,"children":7233},{"style":1412},[7234],{"type":427,"value":7235},"  x",{"type":421,"tag":457,"props":7237,"children":7238},{"style":697},[7239],{"type":427,"value":1874},{"type":421,"tag":457,"props":7241,"children":7242},{"style":719},[7243],{"type":427,"value":7149},{"type":421,"tag":457,"props":7245,"children":7246},{"style":697},[7247],{"type":427,"value":7248},",\n",{"type":421,"tag":457,"props":7250,"children":7251},{"class":459,"line":1435},[7252,7257,7261],{"type":421,"tag":457,"props":7253,"children":7254},{"style":2674},[7255],{"type":427,"value":7256},"  b",{"type":421,"tag":457,"props":7258,"children":7259},{"style":697},[7260],{"type":427,"value":1350},{"type":421,"tag":457,"props":7262,"children":7263},{"style":697},[7264],{"type":427,"value":1355},{"type":421,"tag":457,"props":7266,"children":7267},{"class":459,"line":1444},[7268,7273,7277,7281,7285,7290,7294,7298],{"type":421,"tag":457,"props":7269,"children":7270},{"style":691},[7271],{"type":427,"value":7272},"    console",{"type":421,"tag":457,"props":7274,"children":7275},{"style":697},[7276],{"type":427,"value":700},{"type":421,"tag":457,"props":7278,"children":7279},{"style":703},[7280],{"type":427,"value":1409},{"type":421,"tag":457,"props":7282,"children":7283},{"style":1412},[7284],{"type":427,"value":711},{"type":421,"tag":457,"props":7286,"children":7287},{"style":1361},[7288],{"type":427,"value":7289},"this",{"type":421,"tag":457,"props":7291,"children":7292},{"style":697},[7293],{"type":427,"value":700},{"type":421,"tag":457,"props":7295,"children":7296},{"style":691},[7297],{"type":427,"value":2685},{"type":421,"tag":457,"props":7299,"children":7300},{"style":1412},[7301],{"type":427,"value":1432},{"type":421,"tag":457,"props":7303,"children":7304},{"class":459,"line":1479},[7305],{"type":421,"tag":457,"props":7306,"children":7307},{"style":697},[7308],{"type":427,"value":2094},{"type":421,"tag":457,"props":7310,"children":7311},{"class":459,"line":1516},[7312],{"type":421,"tag":457,"props":7313,"children":7314},{"style":697},[7315],{"type":427,"value":1441},{"type":421,"tag":457,"props":7317,"children":7318},{"class":459,"line":1524},[7319,7323,7327,7331,7336,7340,7344,7348],{"type":421,"tag":457,"props":7320,"children":7321},{"style":691},[7322],{"type":427,"value":5034},{"type":421,"tag":457,"props":7324,"children":7325},{"style":697},[7326],{"type":427,"value":700},{"type":421,"tag":457,"props":7328,"children":7329},{"style":703},[7330],{"type":427,"value":1409},{"type":421,"tag":457,"props":7332,"children":7333},{"style":691},[7334],{"type":427,"value":7335},"(a",{"type":421,"tag":457,"props":7337,"children":7338},{"style":697},[7339],{"type":427,"value":700},{"type":421,"tag":457,"props":7341,"children":7342},{"style":703},[7343],{"type":427,"value":1373},{"type":421,"tag":457,"props":7345,"children":7346},{"style":691},[7347],{"type":427,"value":829},{"type":421,"tag":457,"props":7349,"children":7350},{"style":744},[7351],{"type":427,"value":7352},"// 2\n",{"type":421,"tag":457,"props":7354,"children":7355},{"class":459,"line":1551},[7356,7360,7364,7368,7373,7377,7381,7385,7389,7394],{"type":421,"tag":457,"props":7357,"children":7358},{"style":691},[7359],{"type":427,"value":5034},{"type":421,"tag":457,"props":7361,"children":7362},{"style":697},[7363],{"type":427,"value":700},{"type":421,"tag":457,"props":7365,"children":7366},{"style":703},[7367],{"type":427,"value":1409},{"type":421,"tag":457,"props":7369,"children":7370},{"style":691},[7371],{"type":427,"value":7372},"((",{"type":421,"tag":457,"props":7374,"children":7375},{"style":719},[7376],{"type":427,"value":722},{"type":421,"tag":457,"props":7378,"children":7379},{"style":697},[7380],{"type":427,"value":727},{"type":421,"tag":457,"props":7382,"children":7383},{"style":691},[7384],{"type":427,"value":3238},{"type":421,"tag":457,"props":7386,"children":7387},{"style":697},[7388],{"type":427,"value":700},{"type":421,"tag":457,"props":7390,"children":7391},{"style":691},[7392],{"type":427,"value":7393},"b)()) ",{"type":421,"tag":457,"props":7395,"children":7396},{"style":744},[7397],{"type":427,"value":6738},{"type":421,"tag":435,"props":7399,"children":7400},{},[7401],{"type":427,"value":7402},"具名函数在表达式中时不会声明标识符。",{"type":421,"tag":435,"props":7404,"children":7405},{},[7406],{"type":427,"value":7407},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":421,"tag":446,"props":7409,"children":7411},{"className":679,"code":7410,"language":681,"meta":415,"style":415},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7412],{"type":421,"tag":453,"props":7413,"children":7414},{"__ignoreMap":415},[7415,7434,7462,7477,7484,7512],{"type":421,"tag":457,"props":7416,"children":7417},{"class":459,"line":460},[7418,7422,7426,7430],{"type":421,"tag":457,"props":7419,"children":7420},{"style":1014},[7421],{"type":427,"value":5805},{"type":421,"tag":457,"props":7423,"children":7424},{"style":1448},[7425],{"type":427,"value":3238},{"type":421,"tag":457,"props":7427,"children":7428},{"style":487},[7429],{"type":427,"value":1378},{"type":421,"tag":457,"props":7431,"children":7432},{"style":697},[7433],{"type":427,"value":1355},{"type":421,"tag":457,"props":7435,"children":7436},{"class":459,"line":750},[7437,7441,7445,7449,7453,7457],{"type":421,"tag":457,"props":7438,"children":7439},{"style":703},[7440],{"type":427,"value":7256},{"type":421,"tag":457,"props":7442,"children":7443},{"style":697},[7444],{"type":427,"value":1874},{"type":421,"tag":457,"props":7446,"children":7447},{"style":1014},[7448],{"type":427,"value":1468},{"type":421,"tag":457,"props":7450,"children":7451},{"style":703},[7452],{"type":427,"value":2040},{"type":421,"tag":457,"props":7454,"children":7455},{"style":697},[7456],{"type":427,"value":1063},{"type":421,"tag":457,"props":7458,"children":7459},{"style":697},[7460],{"type":427,"value":7461}," {},\n",{"type":421,"tag":457,"props":7463,"children":7464},{"class":459,"line":1394},[7465,7469,7473],{"type":421,"tag":457,"props":7466,"children":7467},{"style":2674},[7468],{"type":427,"value":2788},{"type":421,"tag":457,"props":7470,"children":7471},{"style":697},[7472],{"type":427,"value":1063},{"type":421,"tag":457,"props":7474,"children":7475},{"style":697},[7476],{"type":427,"value":3146},{"type":421,"tag":457,"props":7478,"children":7479},{"class":459,"line":1435},[7480],{"type":421,"tag":457,"props":7481,"children":7482},{"style":697},[7483],{"type":427,"value":1441},{"type":421,"tag":457,"props":7485,"children":7486},{"class":459,"line":1444},[7487,7491,7495,7499,7503,7507],{"type":421,"tag":457,"props":7488,"children":7489},{"style":487},[7490],{"type":427,"value":1530},{"type":421,"tag":457,"props":7492,"children":7493},{"style":691},[7494],{"type":427,"value":3238},{"type":421,"tag":457,"props":7496,"children":7497},{"style":697},[7498],{"type":427,"value":700},{"type":421,"tag":457,"props":7500,"children":7501},{"style":703},[7502],{"type":427,"value":1373},{"type":421,"tag":457,"props":7504,"children":7505},{"style":691},[7506],{"type":427,"value":845},{"type":421,"tag":457,"props":7508,"children":7509},{"style":744},[7510],{"type":427,"value":7511},"// {}\n",{"type":421,"tag":457,"props":7513,"children":7514},{"class":459,"line":1479},[7515,7519,7523,7527,7531,7535],{"type":421,"tag":457,"props":7516,"children":7517},{"style":487},[7518],{"type":427,"value":1530},{"type":421,"tag":457,"props":7520,"children":7521},{"style":691},[7522],{"type":427,"value":3238},{"type":421,"tag":457,"props":7524,"children":7525},{"style":697},[7526],{"type":427,"value":700},{"type":421,"tag":457,"props":7528,"children":7529},{"style":703},[7530],{"type":427,"value":1740},{"type":421,"tag":457,"props":7532,"children":7533},{"style":691},[7534],{"type":427,"value":845},{"type":421,"tag":457,"props":7536,"children":7537},{"style":744},[7538],{"type":427,"value":3255},{"type":421,"tag":435,"props":7540,"children":7541},{},[7542],{"type":427,"value":7543},"方法的特性总结以下三点：",{"type":421,"tag":535,"props":7545,"children":7546},{},[7547,7552,7557],{"type":421,"tag":539,"props":7548,"children":7549},{},[7550],{"type":427,"value":7551},"不能作为构造器。",{"type":421,"tag":539,"props":7553,"children":7554},{},[7555],{"type":427,"value":7556},"除了生成器方法，没有内部原型。",{"type":421,"tag":539,"props":7558,"children":7559},{},[7560],{"type":427,"value":7561},"方法不能具名。",{"type":421,"tag":435,"props":7563,"children":7564},{},[7565],{"type":427,"value":7566},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":421,"tag":446,"props":7568,"children":7570},{"className":679,"code":7569,"language":681,"meta":415,"style":415},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7571],{"type":421,"tag":453,"props":7572,"children":7573},{"__ignoreMap":415},[7574],{"type":421,"tag":457,"props":7575,"children":7576},{"class":459,"line":460},[7577,7581,7585,7589,7594,7598,7602,7606,7610],{"type":421,"tag":457,"props":7578,"children":7579},{"style":691},[7580],{"type":427,"value":694},{"type":421,"tag":457,"props":7582,"children":7583},{"style":697},[7584],{"type":427,"value":700},{"type":421,"tag":457,"props":7586,"children":7587},{"style":703},[7588],{"type":427,"value":3656},{"type":421,"tag":457,"props":7590,"children":7591},{"style":691},[7592],{"type":427,"value":7593},"(boundFn",{"type":421,"tag":457,"props":7595,"children":7596},{"style":697},[7597],{"type":427,"value":727},{"type":421,"tag":457,"props":7599,"children":7600},{"style":691},[7601],{"type":427,"value":4127},{"type":421,"tag":457,"props":7603,"children":7604},{"style":697},[7605],{"type":427,"value":700},{"type":421,"tag":457,"props":7607,"children":7608},{"style":703},[7609],{"type":427,"value":5542},{"type":421,"tag":457,"props":7611,"children":7612},{"style":691},[7613],{"type":427,"value":7614},"(targetFn))\n",{"type":421,"tag":435,"props":7616,"children":7617},{},[7618],{"type":427,"value":7619},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":421,"tag":446,"props":7621,"children":7623},{"className":679,"code":7622,"language":681,"meta":415,"style":415},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7624],{"type":421,"tag":453,"props":7625,"children":7626},{"__ignoreMap":415},[7627,7646,7689,7696],{"type":421,"tag":457,"props":7628,"children":7629},{"class":459,"line":460},[7630,7634,7638,7642],{"type":421,"tag":457,"props":7631,"children":7632},{"style":1014},[7633],{"type":427,"value":1340},{"type":421,"tag":457,"props":7635,"children":7636},{"style":703},[7637],{"type":427,"value":3238},{"type":421,"tag":457,"props":7639,"children":7640},{"style":697},[7641],{"type":427,"value":1350},{"type":421,"tag":457,"props":7643,"children":7644},{"style":697},[7645],{"type":427,"value":1355},{"type":421,"tag":457,"props":7647,"children":7648},{"class":459,"line":750},[7649,7653,7657,7661,7665,7669,7673,7677,7681,7685],{"type":421,"tag":457,"props":7650,"children":7651},{"style":691},[7652],{"type":427,"value":1400},{"type":421,"tag":457,"props":7654,"children":7655},{"style":697},[7656],{"type":427,"value":700},{"type":421,"tag":457,"props":7658,"children":7659},{"style":703},[7660],{"type":427,"value":1409},{"type":421,"tag":457,"props":7662,"children":7663},{"style":1412},[7664],{"type":427,"value":711},{"type":421,"tag":457,"props":7666,"children":7667},{"style":487},[7668],{"type":427,"value":1530},{"type":421,"tag":457,"props":7670,"children":7671},{"style":697},[7672],{"type":427,"value":700},{"type":421,"tag":457,"props":7674,"children":7675},{"style":1448},[7676],{"type":427,"value":5669},{"type":421,"tag":457,"props":7678,"children":7679},{"style":487},[7680],{"type":427,"value":2021},{"type":421,"tag":457,"props":7682,"children":7683},{"style":691},[7684],{"type":427,"value":3238},{"type":421,"tag":457,"props":7686,"children":7687},{"style":1412},[7688],{"type":427,"value":1432},{"type":421,"tag":457,"props":7690,"children":7691},{"class":459,"line":1394},[7692],{"type":421,"tag":457,"props":7693,"children":7694},{"style":697},[7695],{"type":427,"value":1441},{"type":421,"tag":457,"props":7697,"children":7698},{"class":459,"line":1435},[7699,7703,7707,7711,7715,7719,7724,7728,7733,7738],{"type":421,"tag":457,"props":7700,"children":7701},{"style":691},[7702],{"type":427,"value":5034},{"type":421,"tag":457,"props":7704,"children":7705},{"style":697},[7706],{"type":427,"value":700},{"type":421,"tag":457,"props":7708,"children":7709},{"style":703},[7710],{"type":427,"value":1409},{"type":421,"tag":457,"props":7712,"children":7713},{"style":691},[7714],{"type":427,"value":711},{"type":421,"tag":457,"props":7716,"children":7717},{"style":487},[7718],{"type":427,"value":1530},{"type":421,"tag":457,"props":7720,"children":7721},{"style":691},[7722],{"type":427,"value":7723}," (a",{"type":421,"tag":457,"props":7725,"children":7726},{"style":697},[7727],{"type":427,"value":700},{"type":421,"tag":457,"props":7729,"children":7730},{"style":703},[7731],{"type":427,"value":7732},"bind",{"type":421,"tag":457,"props":7734,"children":7735},{"style":691},[7736],{"type":427,"value":7737},"())) ",{"type":421,"tag":457,"props":7739,"children":7740},{"style":744},[7741],{"type":427,"value":791},{"type":421,"tag":435,"props":7743,"children":7744},{},[7745],{"type":427,"value":7746},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":421,"tag":435,"props":7748,"children":7749},{},[7750],{"type":427,"value":7751},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":421,"tag":446,"props":7753,"children":7755},{"className":679,"code":7754,"language":681,"meta":415,"style":415},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7756],{"type":421,"tag":453,"props":7757,"children":7758},{"__ignoreMap":415},[7759,7778,7799,7824,7854,7886,7914,7940,7968,7984,8036,8044,8051,8074,8081,8088],{"type":421,"tag":457,"props":7760,"children":7761},{"class":459,"line":460},[7762,7766,7770,7774],{"type":421,"tag":457,"props":7763,"children":7764},{"style":1014},[7765],{"type":427,"value":5805},{"type":421,"tag":457,"props":7767,"children":7768},{"style":1448},[7769],{"type":427,"value":2655},{"type":421,"tag":457,"props":7771,"children":7772},{"style":487},[7773],{"type":427,"value":1378},{"type":421,"tag":457,"props":7775,"children":7776},{"style":697},[7777],{"type":427,"value":1355},{"type":421,"tag":457,"props":7779,"children":7780},{"class":459,"line":750},[7781,7786,7790,7795],{"type":421,"tag":457,"props":7782,"children":7783},{"style":1412},[7784],{"type":427,"value":7785},"  step",{"type":421,"tag":457,"props":7787,"children":7788},{"style":697},[7789],{"type":427,"value":1874},{"type":421,"tag":457,"props":7791,"children":7792},{"style":719},[7793],{"type":427,"value":7794}," 0",{"type":421,"tag":457,"props":7796,"children":7797},{"style":697},[7798],{"type":427,"value":7248},{"type":421,"tag":457,"props":7800,"children":7801},{"class":459,"line":1394},[7802,7807,7811,7816,7820],{"type":421,"tag":457,"props":7803,"children":7804},{"style":2674},[7805],{"type":427,"value":7806},"  run",{"type":421,"tag":457,"props":7808,"children":7809},{"style":697},[7810],{"type":427,"value":1947},{"type":421,"tag":457,"props":7812,"children":7813},{"style":1641},[7814],{"type":427,"value":7815},"init",{"type":421,"tag":457,"props":7817,"children":7818},{"style":697},[7819],{"type":427,"value":1649},{"type":421,"tag":457,"props":7821,"children":7822},{"style":697},[7823],{"type":427,"value":1355},{"type":421,"tag":457,"props":7825,"children":7826},{"class":459,"line":1435},[7827,7832,7838,7842,7846,7850],{"type":421,"tag":457,"props":7828,"children":7829},{"style":1014},[7830],{"type":427,"value":7831},"    const",{"type":421,"tag":457,"props":7833,"children":7835},{"style":7834},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7836],{"type":427,"value":7837}," exec",{"type":421,"tag":457,"props":7839,"children":7840},{"style":487},[7841],{"type":427,"value":1378},{"type":421,"tag":457,"props":7843,"children":7844},{"style":1641},[7845],{"type":427,"value":6490},{"type":421,"tag":457,"props":7847,"children":7848},{"style":1014},[7849],{"type":427,"value":5741},{"type":421,"tag":457,"props":7851,"children":7852},{"style":697},[7853],{"type":427,"value":1355},{"type":421,"tag":457,"props":7855,"children":7856},{"class":459,"line":1444},[7857,7861,7865,7869,7874,7878,7882],{"type":421,"tag":457,"props":7858,"children":7859},{"style":1718},[7860],{"type":427,"value":2254},{"type":421,"tag":457,"props":7862,"children":7863},{"style":1412},[7864],{"type":427,"value":1947},{"type":421,"tag":457,"props":7866,"children":7867},{"style":691},[7868],{"type":427,"value":2685},{"type":421,"tag":457,"props":7870,"children":7871},{"style":487},[7872],{"type":427,"value":7873}," >",{"type":421,"tag":457,"props":7875,"children":7876},{"style":719},[7877],{"type":427,"value":7794},{"type":421,"tag":457,"props":7879,"children":7880},{"style":1412},[7881],{"type":427,"value":741},{"type":421,"tag":457,"props":7883,"children":7884},{"style":697},[7885],{"type":427,"value":1764},{"type":421,"tag":457,"props":7887,"children":7888},{"class":459,"line":1479},[7889,7894,7898,7902,7906,7910],{"type":421,"tag":457,"props":7890,"children":7891},{"style":691},[7892],{"type":427,"value":7893},"        console",{"type":421,"tag":457,"props":7895,"children":7896},{"style":697},[7897],{"type":427,"value":700},{"type":421,"tag":457,"props":7899,"children":7900},{"style":703},[7901],{"type":427,"value":1409},{"type":421,"tag":457,"props":7903,"children":7904},{"style":1412},[7905],{"type":427,"value":711},{"type":421,"tag":457,"props":7907,"children":7908},{"style":691},[7909],{"type":427,"value":2685},{"type":421,"tag":457,"props":7911,"children":7912},{"style":1412},[7913],{"type":427,"value":1432},{"type":421,"tag":457,"props":7915,"children":7916},{"class":459,"line":1516},[7917,7922,7926,7931,7936],{"type":421,"tag":457,"props":7918,"children":7919},{"style":1361},[7920],{"type":427,"value":7921},"        this",{"type":421,"tag":457,"props":7923,"children":7924},{"style":697},[7925],{"type":427,"value":700},{"type":421,"tag":457,"props":7927,"children":7928},{"style":691},[7929],{"type":427,"value":7930},"step",{"type":421,"tag":457,"props":7932,"children":7933},{"style":487},[7934],{"type":427,"value":7935}," +=",{"type":421,"tag":457,"props":7937,"children":7938},{"style":719},[7939],{"type":427,"value":6792},{"type":421,"tag":457,"props":7941,"children":7942},{"class":459,"line":1524},[7943,7948,7952,7956,7960,7964],{"type":421,"tag":457,"props":7944,"children":7945},{"style":703},[7946],{"type":427,"value":7947},"        exec",{"type":421,"tag":457,"props":7949,"children":7950},{"style":1412},[7951],{"type":427,"value":711},{"type":421,"tag":457,"props":7953,"children":7954},{"style":691},[7955],{"type":427,"value":2685},{"type":421,"tag":457,"props":7957,"children":7958},{"style":487},[7959],{"type":427,"value":732},{"type":421,"tag":457,"props":7961,"children":7962},{"style":719},[7963],{"type":427,"value":1824},{"type":421,"tag":457,"props":7965,"children":7966},{"style":1412},[7967],{"type":427,"value":1432},{"type":421,"tag":457,"props":7969,"children":7970},{"class":459,"line":1551},[7971,7976,7980],{"type":421,"tag":457,"props":7972,"children":7973},{"style":697},[7974],{"type":427,"value":7975},"      }",{"type":421,"tag":457,"props":7977,"children":7978},{"style":1718},[7979],{"type":427,"value":5943},{"type":421,"tag":457,"props":7981,"children":7982},{"style":697},[7983],{"type":427,"value":1355},{"type":421,"tag":457,"props":7985,"children":7986},{"class":459,"line":2127},[7987,7991,7995,7999,8003,8007,8012,8016,8020,8024,8028,8032],{"type":421,"tag":457,"props":7988,"children":7989},{"style":691},[7990],{"type":427,"value":7893},{"type":421,"tag":457,"props":7992,"children":7993},{"style":697},[7994],{"type":427,"value":700},{"type":421,"tag":457,"props":7996,"children":7997},{"style":703},[7998],{"type":427,"value":1409},{"type":421,"tag":457,"props":8000,"children":8001},{"style":1412},[8002],{"type":427,"value":711},{"type":421,"tag":457,"props":8004,"children":8005},{"style":470},[8006],{"type":427,"value":484},{"type":421,"tag":457,"props":8008,"children":8009},{"style":476},[8010],{"type":427,"value":8011},"steps: ",{"type":421,"tag":457,"props":8013,"children":8014},{"style":470},[8015],{"type":427,"value":484},{"type":421,"tag":457,"props":8017,"children":8018},{"style":697},[8019],{"type":427,"value":727},{"type":421,"tag":457,"props":8021,"children":8022},{"style":1361},[8023],{"type":427,"value":3806},{"type":421,"tag":457,"props":8025,"children":8026},{"style":697},[8027],{"type":427,"value":700},{"type":421,"tag":457,"props":8029,"children":8030},{"style":691},[8031],{"type":427,"value":7930},{"type":421,"tag":457,"props":8033,"children":8034},{"style":1412},[8035],{"type":427,"value":1432},{"type":421,"tag":457,"props":8037,"children":8038},{"class":459,"line":2187},[8039],{"type":421,"tag":457,"props":8040,"children":8041},{"style":697},[8042],{"type":427,"value":8043},"      }\n",{"type":421,"tag":457,"props":8045,"children":8046},{"class":459,"line":2248},[8047],{"type":421,"tag":457,"props":8048,"children":8049},{"style":697},[8050],{"type":427,"value":2336},{"type":421,"tag":457,"props":8052,"children":8053},{"class":459,"line":2289},[8054,8058,8062,8066,8070],{"type":421,"tag":457,"props":8055,"children":8056},{"style":1718},[8057],{"type":427,"value":2752},{"type":421,"tag":457,"props":8059,"children":8060},{"style":703},[8061],{"type":427,"value":7837},{"type":421,"tag":457,"props":8063,"children":8064},{"style":1412},[8065],{"type":427,"value":711},{"type":421,"tag":457,"props":8067,"children":8068},{"style":691},[8069],{"type":427,"value":7815},{"type":421,"tag":457,"props":8071,"children":8072},{"style":1412},[8073],{"type":427,"value":1432},{"type":421,"tag":457,"props":8075,"children":8076},{"class":459,"line":2330},[8077],{"type":421,"tag":457,"props":8078,"children":8079},{"style":697},[8080],{"type":427,"value":2094},{"type":421,"tag":457,"props":8082,"children":8083},{"class":459,"line":2339},[8084],{"type":421,"tag":457,"props":8085,"children":8086},{"style":697},[8087],{"type":427,"value":1441},{"type":421,"tag":457,"props":8089,"children":8090},{"class":459,"line":2347},[8091,8096,8100,8105,8109,8114,8118],{"type":421,"tag":457,"props":8092,"children":8093},{"style":691},[8094],{"type":427,"value":8095},"obj",{"type":421,"tag":457,"props":8097,"children":8098},{"style":697},[8099],{"type":427,"value":700},{"type":421,"tag":457,"props":8101,"children":8102},{"style":703},[8103],{"type":427,"value":8104},"run",{"type":421,"tag":457,"props":8106,"children":8107},{"style":691},[8108],{"type":427,"value":711},{"type":421,"tag":457,"props":8110,"children":8111},{"style":719},[8112],{"type":427,"value":8113},"10",{"type":421,"tag":457,"props":8115,"children":8116},{"style":691},[8117],{"type":427,"value":741},{"type":421,"tag":457,"props":8119,"children":8120},{"style":744},[8121],{"type":427,"value":8122},"// steps: 10\n",{"type":421,"tag":429,"props":8124,"children":8126},{"id":8125},"函数的行为",[8127],{"type":427,"value":8125},{"type":421,"tag":435,"props":8129,"children":8130},{},[8131],{"type":427,"value":8132},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":421,"tag":435,"props":8134,"children":8135},{},[8136],{"type":427,"value":8137},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":421,"tag":435,"props":8139,"children":8140},{},[8141],{"type":427,"value":8142},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":421,"tag":435,"props":8144,"children":8145},{},[8146],{"type":427,"value":8147},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":421,"tag":446,"props":8149,"children":8151},{"className":679,"code":8150,"language":681,"meta":415,"style":415},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8152],{"type":421,"tag":453,"props":8153,"children":8154},{"__ignoreMap":415},[8155,8180,8192,8204,8216,8227,8244,8280,8287,8294,8318,8330,8377,8410,8455,8470,8506,8527,8535,8543,8552,8561],{"type":421,"tag":457,"props":8156,"children":8157},{"class":459,"line":460},[8158,8162,8167,8172,8176],{"type":421,"tag":457,"props":8159,"children":8160},{"style":1014},[8161],{"type":427,"value":1340},{"type":421,"tag":457,"props":8163,"children":8164},{"style":487},[8165],{"type":427,"value":8166},"*",{"type":421,"tag":457,"props":8168,"children":8169},{"style":703},[8170],{"type":427,"value":8171}," GetThisDone",{"type":421,"tag":457,"props":8173,"children":8174},{"style":697},[8175],{"type":427,"value":1063},{"type":421,"tag":457,"props":8177,"children":8178},{"style":697},[8179],{"type":427,"value":1355},{"type":421,"tag":457,"props":8181,"children":8182},{"class":459,"line":750},[8183,8188],{"type":421,"tag":457,"props":8184,"children":8185},{"style":1718},[8186],{"type":427,"value":8187},"  try",{"type":421,"tag":457,"props":8189,"children":8190},{"style":697},[8191],{"type":427,"value":1355},{"type":421,"tag":457,"props":8193,"children":8194},{"class":459,"line":1394},[8195,8200],{"type":421,"tag":457,"props":8196,"children":8197},{"style":1718},[8198],{"type":427,"value":8199},"    yield",{"type":421,"tag":457,"props":8201,"children":8202},{"style":719},[8203],{"type":427,"value":6792},{"type":421,"tag":457,"props":8205,"children":8206},{"class":459,"line":1435},[8207,8211],{"type":421,"tag":457,"props":8208,"children":8209},{"style":1718},[8210],{"type":427,"value":8199},{"type":421,"tag":457,"props":8212,"children":8213},{"style":719},[8214],{"type":427,"value":8215}," 10\n",{"type":421,"tag":457,"props":8217,"children":8218},{"class":459,"line":1444},[8219,8223],{"type":421,"tag":457,"props":8220,"children":8221},{"style":1718},[8222],{"type":427,"value":8199},{"type":421,"tag":457,"props":8224,"children":8225},{"style":719},[8226],{"type":427,"value":6792},{"type":421,"tag":457,"props":8228,"children":8229},{"class":459,"line":1479},[8230,8235,8240],{"type":421,"tag":457,"props":8231,"children":8232},{"style":697},[8233],{"type":427,"value":8234},"  }",{"type":421,"tag":457,"props":8236,"children":8237},{"style":1718},[8238],{"type":427,"value":8239}," finally",{"type":421,"tag":457,"props":8241,"children":8242},{"style":697},[8243],{"type":427,"value":1355},{"type":421,"tag":457,"props":8245,"children":8246},{"class":459,"line":1516},[8247,8251,8255,8259,8263,8267,8272,8276],{"type":421,"tag":457,"props":8248,"children":8249},{"style":691},[8250],{"type":427,"value":7272},{"type":421,"tag":457,"props":8252,"children":8253},{"style":697},[8254],{"type":427,"value":700},{"type":421,"tag":457,"props":8256,"children":8257},{"style":703},[8258],{"type":427,"value":1409},{"type":421,"tag":457,"props":8260,"children":8261},{"style":1412},[8262],{"type":427,"value":711},{"type":421,"tag":457,"props":8264,"children":8265},{"style":470},[8266],{"type":427,"value":484},{"type":421,"tag":457,"props":8268,"children":8269},{"style":476},[8270],{"type":427,"value":8271},"done",{"type":421,"tag":457,"props":8273,"children":8274},{"style":470},[8275],{"type":427,"value":484},{"type":421,"tag":457,"props":8277,"children":8278},{"style":1412},[8279],{"type":427,"value":1432},{"type":421,"tag":457,"props":8281,"children":8282},{"class":459,"line":1524},[8283],{"type":421,"tag":457,"props":8284,"children":8285},{"style":697},[8286],{"type":427,"value":2094},{"type":421,"tag":457,"props":8288,"children":8289},{"class":459,"line":1551},[8290],{"type":421,"tag":457,"props":8291,"children":8292},{"style":697},[8293],{"type":427,"value":1441},{"type":421,"tag":457,"props":8295,"children":8296},{"class":459,"line":2127},[8297,8301,8306,8310,8314],{"type":421,"tag":457,"props":8298,"children":8299},{"style":1014},[8300],{"type":427,"value":5805},{"type":421,"tag":457,"props":8302,"children":8303},{"style":1448},[8304],{"type":427,"value":8305}," get",{"type":421,"tag":457,"props":8307,"children":8308},{"style":487},[8309],{"type":427,"value":1378},{"type":421,"tag":457,"props":8311,"children":8312},{"style":703},[8313],{"type":427,"value":8171},{"type":421,"tag":457,"props":8315,"children":8316},{"style":691},[8317],{"type":427,"value":3355},{"type":421,"tag":457,"props":8319,"children":8320},{"class":459,"line":2187},[8321,8325],{"type":421,"tag":457,"props":8322,"children":8323},{"style":1014},[8324],{"type":427,"value":1017},{"type":421,"tag":457,"props":8326,"children":8327},{"style":691},[8328],{"type":427,"value":8329}," val\n",{"type":421,"tag":457,"props":8331,"children":8332},{"class":459,"line":2248},[8333,8338,8343,8347,8351,8355,8360,8364,8368,8373],{"type":421,"tag":457,"props":8334,"children":8335},{"style":1718},[8336],{"type":427,"value":8337},"while",{"type":421,"tag":457,"props":8339,"children":8340},{"style":691},[8341],{"type":427,"value":8342}," (val ",{"type":421,"tag":457,"props":8344,"children":8345},{"style":487},[8346],{"type":427,"value":1889},{"type":421,"tag":457,"props":8348,"children":8349},{"style":691},[8350],{"type":427,"value":8305},{"type":421,"tag":457,"props":8352,"children":8353},{"style":697},[8354],{"type":427,"value":700},{"type":421,"tag":457,"props":8356,"children":8357},{"style":703},[8358],{"type":427,"value":8359},"next",{"type":421,"tag":457,"props":8361,"children":8362},{"style":691},[8363],{"type":427,"value":1063},{"type":421,"tag":457,"props":8365,"children":8366},{"style":697},[8367],{"type":427,"value":700},{"type":421,"tag":457,"props":8369,"children":8370},{"style":691},[8371],{"type":427,"value":8372},"value) ",{"type":421,"tag":457,"props":8374,"children":8375},{"style":697},[8376],{"type":427,"value":1764},{"type":421,"tag":457,"props":8378,"children":8379},{"class":459,"line":2289},[8380,8384,8388,8393,8397,8402,8406],{"type":421,"tag":457,"props":8381,"children":8382},{"style":1718},[8383],{"type":427,"value":6535},{"type":421,"tag":457,"props":8385,"children":8386},{"style":1412},[8387],{"type":427,"value":1947},{"type":421,"tag":457,"props":8389,"children":8390},{"style":691},[8391],{"type":427,"value":8392},"val",{"type":421,"tag":457,"props":8394,"children":8395},{"style":487},[8396],{"type":427,"value":1975},{"type":421,"tag":457,"props":8398,"children":8399},{"style":719},[8400],{"type":427,"value":8401}," 10",{"type":421,"tag":457,"props":8403,"children":8404},{"style":1412},[8405],{"type":427,"value":741},{"type":421,"tag":457,"props":8407,"children":8408},{"style":697},[8409],{"type":427,"value":1764},{"type":421,"tag":457,"props":8411,"children":8412},{"class":459,"line":2330},[8413,8417,8421,8425,8429,8433,8438,8442,8446,8451],{"type":421,"tag":457,"props":8414,"children":8415},{"style":691},[8416],{"type":427,"value":7272},{"type":421,"tag":457,"props":8418,"children":8419},{"style":697},[8420],{"type":427,"value":700},{"type":421,"tag":457,"props":8422,"children":8423},{"style":703},[8424],{"type":427,"value":1409},{"type":421,"tag":457,"props":8426,"children":8427},{"style":1412},[8428],{"type":427,"value":711},{"type":421,"tag":457,"props":8430,"children":8431},{"style":470},[8432],{"type":427,"value":484},{"type":421,"tag":457,"props":8434,"children":8435},{"style":476},[8436],{"type":427,"value":8437},"right val:",{"type":421,"tag":457,"props":8439,"children":8440},{"style":470},[8441],{"type":427,"value":484},{"type":421,"tag":457,"props":8443,"children":8444},{"style":697},[8445],{"type":427,"value":727},{"type":421,"tag":457,"props":8447,"children":8448},{"style":691},[8449],{"type":427,"value":8450}," val",{"type":421,"tag":457,"props":8452,"children":8453},{"style":1412},[8454],{"type":427,"value":1432},{"type":421,"tag":457,"props":8456,"children":8457},{"class":459,"line":2339},[8458,8462,8466],{"type":421,"tag":457,"props":8459,"children":8460},{"style":697},[8461],{"type":427,"value":8234},{"type":421,"tag":457,"props":8463,"children":8464},{"style":1718},[8465],{"type":427,"value":5943},{"type":421,"tag":457,"props":8467,"children":8468},{"style":697},[8469],{"type":427,"value":1355},{"type":421,"tag":457,"props":8471,"children":8472},{"class":459,"line":2347},[8473,8477,8481,8485,8489,8493,8498,8502],{"type":421,"tag":457,"props":8474,"children":8475},{"style":691},[8476],{"type":427,"value":7272},{"type":421,"tag":457,"props":8478,"children":8479},{"style":697},[8480],{"type":427,"value":700},{"type":421,"tag":457,"props":8482,"children":8483},{"style":703},[8484],{"type":427,"value":1409},{"type":421,"tag":457,"props":8486,"children":8487},{"style":1412},[8488],{"type":427,"value":711},{"type":421,"tag":457,"props":8490,"children":8491},{"style":470},[8492],{"type":427,"value":484},{"type":421,"tag":457,"props":8494,"children":8495},{"style":476},[8496],{"type":427,"value":8497},"wrong val",{"type":421,"tag":457,"props":8499,"children":8500},{"style":470},[8501],{"type":427,"value":484},{"type":421,"tag":457,"props":8503,"children":8504},{"style":1412},[8505],{"type":427,"value":1432},{"type":421,"tag":457,"props":8507,"children":8508},{"class":459,"line":6013},[8509,8514,8518,8523],{"type":421,"tag":457,"props":8510,"children":8511},{"style":691},[8512],{"type":427,"value":8513},"    get",{"type":421,"tag":457,"props":8515,"children":8516},{"style":697},[8517],{"type":427,"value":700},{"type":421,"tag":457,"props":8519,"children":8520},{"style":703},[8521],{"type":427,"value":8522},"return",{"type":421,"tag":457,"props":8524,"children":8525},{"style":1412},[8526],{"type":427,"value":3355},{"type":421,"tag":457,"props":8528,"children":8530},{"class":459,"line":8529},18,[8531],{"type":421,"tag":457,"props":8532,"children":8533},{"style":697},[8534],{"type":427,"value":2094},{"type":421,"tag":457,"props":8536,"children":8538},{"class":459,"line":8537},19,[8539],{"type":421,"tag":457,"props":8540,"children":8541},{"style":697},[8542],{"type":427,"value":1441},{"type":421,"tag":457,"props":8544,"children":8546},{"class":459,"line":8545},20,[8547],{"type":421,"tag":457,"props":8548,"children":8549},{"style":744},[8550],{"type":427,"value":8551},"// right val: 1\n",{"type":421,"tag":457,"props":8553,"children":8555},{"class":459,"line":8554},21,[8556],{"type":421,"tag":457,"props":8557,"children":8558},{"style":744},[8559],{"type":427,"value":8560},"// wrong val\n",{"type":421,"tag":457,"props":8562,"children":8564},{"class":459,"line":8563},22,[8565],{"type":421,"tag":457,"props":8566,"children":8567},{"style":744},[8568],{"type":427,"value":8569},"// done\n",{"type":421,"tag":429,"props":8571,"children":8573},{"id":8572},"闭包",[8574],{"type":427,"value":8572},{"type":421,"tag":435,"props":8576,"children":8577},{},[8578],{"type":427,"value":8579},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":421,"tag":435,"props":8581,"children":8582},{},[8583],{"type":427,"value":8584},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":421,"tag":535,"props":8586,"children":8587},{},[8588,8593,8598],{"type":421,"tag":539,"props":8589,"children":8590},{},[8591],{"type":427,"value":8592},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":421,"tag":539,"props":8594,"children":8595},{},[8596],{"type":427,"value":8597},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":421,"tag":539,"props":8599,"children":8600},{},[8601],{"type":427,"value":8602},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":421,"tag":435,"props":8604,"children":8605},{},[8606],{"type":427,"value":8607},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":421,"tag":446,"props":8609,"children":8611},{"className":679,"code":8610,"language":681,"meta":415,"style":415},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8612],{"type":421,"tag":453,"props":8613,"children":8614},{"__ignoreMap":415},[8615,8634,8649,8656,8667],{"type":421,"tag":457,"props":8616,"children":8617},{"class":459,"line":460},[8618,8622,8626,8630],{"type":421,"tag":457,"props":8619,"children":8620},{"style":1014},[8621],{"type":427,"value":1340},{"type":421,"tag":457,"props":8623,"children":8624},{"style":703},[8625],{"type":427,"value":2040},{"type":421,"tag":457,"props":8627,"children":8628},{"style":697},[8629],{"type":427,"value":1350},{"type":421,"tag":457,"props":8631,"children":8632},{"style":697},[8633],{"type":427,"value":1355},{"type":421,"tag":457,"props":8635,"children":8636},{"class":459,"line":750},[8637,8641,8645],{"type":421,"tag":457,"props":8638,"children":8639},{"style":691},[8640],{"type":427,"value":2788},{"type":421,"tag":457,"props":8642,"children":8643},{"style":487},[8644],{"type":427,"value":1378},{"type":421,"tag":457,"props":8646,"children":8647},{"style":719},[8648],{"type":427,"value":6792},{"type":421,"tag":457,"props":8650,"children":8651},{"class":459,"line":1394},[8652],{"type":421,"tag":457,"props":8653,"children":8654},{"style":697},[8655],{"type":427,"value":1441},{"type":421,"tag":457,"props":8657,"children":8658},{"class":459,"line":1435},[8659,8663],{"type":421,"tag":457,"props":8660,"children":8661},{"style":703},[8662],{"type":427,"value":1740},{"type":421,"tag":457,"props":8664,"children":8665},{"style":691},[8666],{"type":427,"value":3355},{"type":421,"tag":457,"props":8668,"children":8669},{"class":459,"line":1444},[8670,8674,8678,8682,8686,8690,8695],{"type":421,"tag":457,"props":8671,"children":8672},{"style":691},[8673],{"type":427,"value":5034},{"type":421,"tag":457,"props":8675,"children":8676},{"style":697},[8677],{"type":427,"value":700},{"type":421,"tag":457,"props":8679,"children":8680},{"style":703},[8681],{"type":427,"value":1409},{"type":421,"tag":457,"props":8683,"children":8684},{"style":691},[8685],{"type":427,"value":711},{"type":421,"tag":457,"props":8687,"children":8688},{"style":487},[8689],{"type":427,"value":970},{"type":421,"tag":457,"props":8691,"children":8692},{"style":691},[8693],{"type":427,"value":8694}," test) ",{"type":421,"tag":457,"props":8696,"children":8697},{"style":744},[8698],{"type":427,"value":8699},"// number\n",{"type":421,"tag":435,"props":8701,"children":8702},{},[8703],{"type":427,"value":8704},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":421,"tag":435,"props":8706,"children":8707},{},[8708],{"type":427,"value":8709},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":421,"tag":446,"props":8711,"children":8713},{"className":679,"code":8712,"language":681,"meta":415,"style":415},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8714],{"type":421,"tag":453,"props":8715,"children":8716},{"__ignoreMap":415},[8717,8753,8773,8790,8810,8833,8849,8856],{"type":421,"tag":457,"props":8718,"children":8719},{"class":459,"line":460},[8720,8724,8728,8732,8736,8741,8745,8749],{"type":421,"tag":457,"props":8721,"children":8722},{"style":1014},[8723],{"type":427,"value":1017},{"type":421,"tag":457,"props":8725,"children":8726},{"style":691},[8727],{"type":427,"value":3158},{"type":421,"tag":457,"props":8729,"children":8730},{"style":487},[8731],{"type":427,"value":1889},{"type":421,"tag":457,"props":8733,"children":8734},{"style":697},[8735],{"type":427,"value":1726},{"type":421,"tag":457,"props":8737,"children":8738},{"style":1412},[8739],{"type":427,"value":8740}," value",{"type":421,"tag":457,"props":8742,"children":8743},{"style":697},[8744],{"type":427,"value":1874},{"type":421,"tag":457,"props":8746,"children":8747},{"style":719},[8748],{"type":427,"value":526},{"type":421,"tag":457,"props":8750,"children":8751},{"style":697},[8752],{"type":427,"value":3185},{"type":421,"tag":457,"props":8754,"children":8755},{"class":459,"line":750},[8756,8760,8765,8769],{"type":421,"tag":457,"props":8757,"children":8758},{"style":1014},[8759],{"type":427,"value":1017},{"type":421,"tag":457,"props":8761,"children":8762},{"style":691},[8763],{"type":427,"value":8764}," b ",{"type":421,"tag":457,"props":8766,"children":8767},{"style":487},[8768],{"type":427,"value":1889},{"type":421,"tag":457,"props":8770,"children":8771},{"style":719},[8772],{"type":427,"value":6792},{"type":421,"tag":457,"props":8774,"children":8775},{"class":459,"line":1394},[8776,8781,8786],{"type":421,"tag":457,"props":8777,"children":8778},{"style":1718},[8779],{"type":427,"value":8780},"with",{"type":421,"tag":457,"props":8782,"children":8783},{"style":691},[8784],{"type":427,"value":8785}," (a) ",{"type":421,"tag":457,"props":8787,"children":8788},{"style":697},[8789],{"type":427,"value":1764},{"type":421,"tag":457,"props":8791,"children":8792},{"class":459,"line":1435},[8793,8798,8802,8806],{"type":421,"tag":457,"props":8794,"children":8795},{"style":1014},[8796],{"type":427,"value":8797}," var",{"type":421,"tag":457,"props":8799,"children":8800},{"style":691},[8801],{"type":427,"value":8740},{"type":421,"tag":457,"props":8803,"children":8804},{"style":487},[8805],{"type":427,"value":1378},{"type":421,"tag":457,"props":8807,"children":8808},{"style":719},[8809],{"type":427,"value":6368},{"type":421,"tag":457,"props":8811,"children":8812},{"class":459,"line":1444},[8813,8817,8821,8825,8829],{"type":421,"tag":457,"props":8814,"children":8815},{"style":691},[8816],{"type":427,"value":3238},{"type":421,"tag":457,"props":8818,"children":8819},{"style":697},[8820],{"type":427,"value":700},{"type":421,"tag":457,"props":8822,"children":8823},{"style":691},[8824],{"type":427,"value":1373},{"type":421,"tag":457,"props":8826,"children":8827},{"style":487},[8828],{"type":427,"value":1378},{"type":421,"tag":457,"props":8830,"children":8831},{"style":719},[8832],{"type":427,"value":6792},{"type":421,"tag":457,"props":8834,"children":8835},{"class":459,"line":1479},[8836,8840,8844],{"type":421,"tag":457,"props":8837,"children":8838},{"style":691},[8839],{"type":427,"value":7049},{"type":421,"tag":457,"props":8841,"children":8842},{"style":487},[8843],{"type":427,"value":1378},{"type":421,"tag":457,"props":8845,"children":8846},{"style":719},[8847],{"type":427,"value":8848}," 2\n",{"type":421,"tag":457,"props":8850,"children":8851},{"class":459,"line":1516},[8852],{"type":421,"tag":457,"props":8853,"children":8854},{"style":697},[8855],{"type":427,"value":1441},{"type":421,"tag":457,"props":8857,"children":8858},{"class":459,"line":1524},[8859,8863,8867,8871,8875,8879,8883,8887,8892],{"type":421,"tag":457,"props":8860,"children":8861},{"style":691},[8862],{"type":427,"value":5034},{"type":421,"tag":457,"props":8864,"children":8865},{"style":697},[8866],{"type":427,"value":700},{"type":421,"tag":457,"props":8868,"children":8869},{"style":703},[8870],{"type":427,"value":1409},{"type":421,"tag":457,"props":8872,"children":8873},{"style":691},[8874],{"type":427,"value":7335},{"type":421,"tag":457,"props":8876,"children":8877},{"style":697},[8878],{"type":427,"value":727},{"type":421,"tag":457,"props":8880,"children":8881},{"style":691},[8882],{"type":427,"value":7049},{"type":421,"tag":457,"props":8884,"children":8885},{"style":697},[8886],{"type":427,"value":727},{"type":421,"tag":457,"props":8888,"children":8889},{"style":691},[8890],{"type":427,"value":8891}," value) ",{"type":421,"tag":457,"props":8893,"children":8894},{"style":744},[8895],{"type":427,"value":8896},"// { value:100, b:2 }, 1, undefined\n",{"type":421,"tag":435,"props":8898,"children":8899},{},[8900],{"type":427,"value":8901},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":421,"tag":435,"props":8903,"children":8904},{},[8905],{"type":427,"value":8906},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":421,"tag":435,"props":8908,"children":8909},{},[8910],{"type":427,"value":8911},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":421,"tag":435,"props":8913,"children":8914},{},[8915],{"type":427,"value":8916},"闭包内标识符系统的优先级规则：",{"type":421,"tag":535,"props":8918,"children":8919},{},[8920,8925,8930],{"type":421,"tag":539,"props":8921,"children":8922},{},[8923],{"type":427,"value":8924},"内部函数声明 > 函数参数名列表",{"type":421,"tag":539,"props":8926,"children":8927},{},[8928],{"type":427,"value":8929},"参数中的 arguments 名字 > 函数的 arguments",{"type":421,"tag":539,"props":8931,"children":8932},{},[8933],{"type":427,"value":8934},"var 声明的名字如果已存在，则不再创建新变量",{"type":421,"tag":435,"props":8936,"children":8937},{},[8938],{"type":427,"value":8939},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":421,"tag":422,"props":8941,"children":8943},{"id":8942},"动态语言特性",[8944],{"type":427,"value":8942},{"type":421,"tag":429,"props":8946,"children":8948},{"id":8947},"概述-2",[8949],{"type":427,"value":6067},{"type":421,"tag":435,"props":8951,"children":8952},{},[8953],{"type":427,"value":8954},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":421,"tag":435,"props":8956,"children":8957},{},[8958],{"type":427,"value":8959},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":421,"tag":429,"props":8961,"children":8963},{"id":8962},"对象与值类型之间的转换",[8964],{"type":427,"value":8962},{"type":421,"tag":435,"props":8966,"children":8967},{},[8968],{"type":427,"value":8969},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":421,"tag":446,"props":8971,"children":8973},{"className":679,"code":8972,"language":681,"meta":415,"style":415},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8974],{"type":421,"tag":453,"props":8975,"children":8976},{"__ignoreMap":415},[8977,9025,9048,9056,9100,9107],{"type":421,"tag":457,"props":8978,"children":8979},{"class":459,"line":460},[8980,8984,8989,8993,8997,9001,9005,9009,9013,9017,9021],{"type":421,"tag":457,"props":8981,"children":8982},{"style":1014},[8983],{"type":427,"value":2650},{"type":421,"tag":457,"props":8985,"children":8986},{"style":7834},[8987],{"type":427,"value":8988}," toString",{"type":421,"tag":457,"props":8990,"children":8991},{"style":487},[8992],{"type":427,"value":1378},{"type":421,"tag":457,"props":8994,"children":8995},{"style":697},[8996],{"type":427,"value":1350},{"type":421,"tag":457,"props":8998,"children":8999},{"style":1014},[9000],{"type":427,"value":5741},{"type":421,"tag":457,"props":9002,"children":9003},{"style":691},[9004],{"type":427,"value":2057},{"type":421,"tag":457,"props":9006,"children":9007},{"style":697},[9008],{"type":427,"value":700},{"type":421,"tag":457,"props":9010,"children":9011},{"style":703},[9012],{"type":427,"value":1409},{"type":421,"tag":457,"props":9014,"children":9015},{"style":691},[9016],{"type":427,"value":711},{"type":421,"tag":457,"props":9018,"children":9019},{"style":719},[9020],{"type":427,"value":526},{"type":421,"tag":457,"props":9022,"children":9023},{"style":691},[9024],{"type":427,"value":1432},{"type":421,"tag":457,"props":9026,"children":9027},{"class":459,"line":750},[9028,9032,9036,9040,9044],{"type":421,"tag":457,"props":9029,"children":9030},{"style":1718},[9031],{"type":427,"value":8780},{"type":421,"tag":457,"props":9033,"children":9034},{"style":691},[9035],{"type":427,"value":1947},{"type":421,"tag":457,"props":9037,"children":9038},{"style":719},[9039],{"type":427,"value":526},{"type":421,"tag":457,"props":9041,"children":9042},{"style":691},[9043],{"type":427,"value":741},{"type":421,"tag":457,"props":9045,"children":9046},{"style":697},[9047],{"type":427,"value":1764},{"type":421,"tag":457,"props":9049,"children":9050},{"class":459,"line":1394},[9051],{"type":421,"tag":457,"props":9052,"children":9053},{"style":744},[9054],{"type":427,"value":9055},"  // equal to (1).toString = ...\n",{"type":421,"tag":457,"props":9057,"children":9058},{"class":459,"line":1435},[9059,9064,9068,9072,9076,9080,9084,9088,9092,9096],{"type":421,"tag":457,"props":9060,"children":9061},{"style":703},[9062],{"type":427,"value":9063},"  toString",{"type":421,"tag":457,"props":9065,"children":9066},{"style":487},[9067],{"type":427,"value":1378},{"type":421,"tag":457,"props":9069,"children":9070},{"style":697},[9071],{"type":427,"value":1350},{"type":421,"tag":457,"props":9073,"children":9074},{"style":1014},[9075],{"type":427,"value":5741},{"type":421,"tag":457,"props":9077,"children":9078},{"style":691},[9079],{"type":427,"value":2057},{"type":421,"tag":457,"props":9081,"children":9082},{"style":697},[9083],{"type":427,"value":700},{"type":421,"tag":457,"props":9085,"children":9086},{"style":703},[9087],{"type":427,"value":1409},{"type":421,"tag":457,"props":9089,"children":9090},{"style":1412},[9091],{"type":427,"value":711},{"type":421,"tag":457,"props":9093,"children":9094},{"style":719},[9095],{"type":427,"value":554},{"type":421,"tag":457,"props":9097,"children":9098},{"style":1412},[9099],{"type":427,"value":1432},{"type":421,"tag":457,"props":9101,"children":9102},{"class":459,"line":1444},[9103],{"type":421,"tag":457,"props":9104,"children":9105},{"style":697},[9106],{"type":427,"value":1441},{"type":421,"tag":457,"props":9108,"children":9109},{"class":459,"line":1479},[9110,9114,9118,9122,9126,9131,9135],{"type":421,"tag":457,"props":9111,"children":9112},{"style":691},[9113],{"type":427,"value":5034},{"type":421,"tag":457,"props":9115,"children":9116},{"style":697},[9117],{"type":427,"value":700},{"type":421,"tag":457,"props":9119,"children":9120},{"style":703},[9121],{"type":427,"value":1409},{"type":421,"tag":457,"props":9123,"children":9124},{"style":691},[9125],{"type":427,"value":711},{"type":421,"tag":457,"props":9127,"children":9128},{"style":703},[9129],{"type":427,"value":9130},"toString",{"type":421,"tag":457,"props":9132,"children":9133},{"style":691},[9134],{"type":427,"value":829},{"type":421,"tag":457,"props":9136,"children":9137},{"style":744},[9138],{"type":427,"value":6738},{"type":421,"tag":435,"props":9140,"children":9141},{},[9142],{"type":427,"value":9143},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":421,"tag":435,"props":9145,"children":9146},{},[9147],{"type":427,"value":9148},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":421,"tag":446,"props":9150,"children":9152},{"className":679,"code":9151,"language":681,"meta":415,"style":415},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9153],{"type":421,"tag":453,"props":9154,"children":9155},{"__ignoreMap":415},[9156,9198,9241],{"type":421,"tag":457,"props":9157,"children":9158},{"class":459,"line":460},[9159,9164,9168,9172,9176,9181,9185,9189,9193],{"type":421,"tag":457,"props":9160,"children":9161},{"style":2837},[9162],{"type":427,"value":9163},"String",{"type":421,"tag":457,"props":9165,"children":9166},{"style":697},[9167],{"type":427,"value":700},{"type":421,"tag":457,"props":9169,"children":9170},{"style":1448},[9171],{"type":427,"value":2848},{"type":421,"tag":457,"props":9173,"children":9174},{"style":697},[9175],{"type":427,"value":700},{"type":421,"tag":457,"props":9177,"children":9178},{"style":703},[9179],{"type":427,"value":9180},"valueOf",{"type":421,"tag":457,"props":9182,"children":9183},{"style":487},[9184],{"type":427,"value":1378},{"type":421,"tag":457,"props":9186,"children":9187},{"style":697},[9188],{"type":427,"value":1350},{"type":421,"tag":457,"props":9190,"children":9191},{"style":1014},[9192],{"type":427,"value":5741},{"type":421,"tag":457,"props":9194,"children":9195},{"style":719},[9196],{"type":427,"value":9197}," 0\n",{"type":421,"tag":457,"props":9199,"children":9200},{"class":459,"line":750},[9201,9205,9209,9213,9217,9221,9225,9229,9233,9237],{"type":421,"tag":457,"props":9202,"children":9203},{"style":691},[9204],{"type":427,"value":5034},{"type":421,"tag":457,"props":9206,"children":9207},{"style":697},[9208],{"type":427,"value":700},{"type":421,"tag":457,"props":9210,"children":9211},{"style":703},[9212],{"type":427,"value":1409},{"type":421,"tag":457,"props":9214,"children":9215},{"style":691},[9216],{"type":427,"value":711},{"type":421,"tag":457,"props":9218,"children":9219},{"style":487},[9220],{"type":427,"value":716},{"type":421,"tag":457,"props":9222,"children":9223},{"style":470},[9224],{"type":427,"value":484},{"type":421,"tag":457,"props":9226,"children":9227},{"style":476},[9228],{"type":427,"value":526},{"type":421,"tag":457,"props":9230,"children":9231},{"style":470},[9232],{"type":427,"value":484},{"type":421,"tag":457,"props":9234,"children":9235},{"style":691},[9236],{"type":427,"value":741},{"type":421,"tag":457,"props":9238,"children":9239},{"style":744},[9240],{"type":427,"value":6738},{"type":421,"tag":457,"props":9242,"children":9243},{"class":459,"line":1394},[9244,9248,9252,9256,9260,9265,9269,9273,9277,9281,9285,9290],{"type":421,"tag":457,"props":9245,"children":9246},{"style":691},[9247],{"type":427,"value":5034},{"type":421,"tag":457,"props":9249,"children":9250},{"style":697},[9251],{"type":427,"value":700},{"type":421,"tag":457,"props":9253,"children":9254},{"style":703},[9255],{"type":427,"value":1409},{"type":421,"tag":457,"props":9257,"children":9258},{"style":691},[9259],{"type":427,"value":711},{"type":421,"tag":457,"props":9261,"children":9262},{"style":487},[9263],{"type":427,"value":9264},"+new",{"type":421,"tag":457,"props":9266,"children":9267},{"style":703},[9268],{"type":427,"value":4127},{"type":421,"tag":457,"props":9270,"children":9271},{"style":691},[9272],{"type":427,"value":711},{"type":421,"tag":457,"props":9274,"children":9275},{"style":470},[9276],{"type":427,"value":484},{"type":421,"tag":457,"props":9278,"children":9279},{"style":476},[9280],{"type":427,"value":526},{"type":421,"tag":457,"props":9282,"children":9283},{"style":470},[9284],{"type":427,"value":484},{"type":421,"tag":457,"props":9286,"children":9287},{"style":691},[9288],{"type":427,"value":9289},")) ",{"type":421,"tag":457,"props":9291,"children":9292},{"style":744},[9293],{"type":427,"value":9294},"// 0\n",{"type":421,"tag":435,"props":9296,"children":9297},{},[9298],{"type":427,"value":9299},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":421,"tag":446,"props":9301,"children":9303},{"className":679,"code":9302,"language":681,"meta":415,"style":415},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9304],{"type":421,"tag":453,"props":9305,"children":9306},{"__ignoreMap":415},[9307,9344,9376,9408],{"type":421,"tag":457,"props":9308,"children":9309},{"class":459,"line":460},[9310,9314,9319,9323,9327,9331,9335,9340],{"type":421,"tag":457,"props":9311,"children":9312},{"style":1014},[9313],{"type":427,"value":5805},{"type":421,"tag":457,"props":9315,"children":9316},{"style":1448},[9317],{"type":427,"value":9318}," f",{"type":421,"tag":457,"props":9320,"children":9321},{"style":487},[9322],{"type":427,"value":1378},{"type":421,"tag":457,"props":9324,"children":9325},{"style":487},[9326],{"type":427,"value":2857},{"type":421,"tag":457,"props":9328,"children":9329},{"style":703},[9330],{"type":427,"value":4127},{"type":421,"tag":457,"props":9332,"children":9333},{"style":691},[9334],{"type":427,"value":711},{"type":421,"tag":457,"props":9336,"children":9337},{"style":853},[9338],{"type":427,"value":9339},"false",{"type":421,"tag":457,"props":9341,"children":9342},{"style":691},[9343],{"type":427,"value":1432},{"type":421,"tag":457,"props":9345,"children":9346},{"class":459,"line":750},[9347,9351,9355,9359,9363,9367,9372],{"type":421,"tag":457,"props":9348,"children":9349},{"style":691},[9350],{"type":427,"value":5034},{"type":421,"tag":457,"props":9352,"children":9353},{"style":697},[9354],{"type":427,"value":700},{"type":421,"tag":457,"props":9356,"children":9357},{"style":703},[9358],{"type":427,"value":1409},{"type":421,"tag":457,"props":9360,"children":9361},{"style":691},[9362],{"type":427,"value":711},{"type":421,"tag":457,"props":9364,"children":9365},{"style":487},[9366],{"type":427,"value":716},{"type":421,"tag":457,"props":9368,"children":9369},{"style":691},[9370],{"type":427,"value":9371},"f) ",{"type":421,"tag":457,"props":9373,"children":9374},{"style":744},[9375],{"type":427,"value":9294},{"type":421,"tag":457,"props":9377,"children":9378},{"class":459,"line":1394},[9379,9383,9387,9391,9395,9400,9404],{"type":421,"tag":457,"props":9380,"children":9381},{"style":691},[9382],{"type":427,"value":5034},{"type":421,"tag":457,"props":9384,"children":9385},{"style":697},[9386],{"type":427,"value":700},{"type":421,"tag":457,"props":9388,"children":9389},{"style":703},[9390],{"type":427,"value":1409},{"type":421,"tag":457,"props":9392,"children":9393},{"style":691},[9394],{"type":427,"value":711},{"type":421,"tag":457,"props":9396,"children":9397},{"style":487},[9398],{"type":427,"value":9399},"!!",{"type":421,"tag":457,"props":9401,"children":9402},{"style":691},[9403],{"type":427,"value":9371},{"type":421,"tag":457,"props":9405,"children":9406},{"style":744},[9407],{"type":427,"value":791},{"type":421,"tag":457,"props":9409,"children":9410},{"class":459,"line":1435},[9411,9415,9419,9423,9427,9431,9436],{"type":421,"tag":457,"props":9412,"children":9413},{"style":691},[9414],{"type":427,"value":5034},{"type":421,"tag":457,"props":9416,"children":9417},{"style":697},[9418],{"type":427,"value":700},{"type":421,"tag":457,"props":9420,"children":9421},{"style":703},[9422],{"type":427,"value":1409},{"type":421,"tag":457,"props":9424,"children":9425},{"style":691},[9426],{"type":427,"value":711},{"type":421,"tag":457,"props":9428,"children":9429},{"style":703},[9430],{"type":427,"value":816},{"type":421,"tag":457,"props":9432,"children":9433},{"style":691},[9434],{"type":427,"value":9435},"(f)) ",{"type":421,"tag":457,"props":9437,"children":9438},{"style":744},[9439],{"type":427,"value":791},{"type":421,"tag":435,"props":9441,"children":9442},{},[9443],{"type":427,"value":9444},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":421,"tag":429,"props":9446,"children":9448},{"id":9447},"值类型的转换",[9449],{"type":427,"value":9447},{"type":421,"tag":435,"props":9451,"children":9452},{},[9453],{"type":427,"value":9454},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":421,"tag":435,"props":9456,"children":9457},{},[9458],{"type":427,"value":9459},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":421,"tag":435,"props":9461,"children":9462},{},[9463],{"type":427,"value":9464},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":421,"tag":446,"props":9466,"children":9468},{"className":679,"code":9467,"language":681,"meta":415,"style":415},"parseInt(1e35) // 1\n",[9469],{"type":421,"tag":453,"props":9470,"children":9471},{"__ignoreMap":415},[9472],{"type":421,"tag":457,"props":9473,"children":9474},{"class":459,"line":460},[9475,9480,9484,9489,9493],{"type":421,"tag":457,"props":9476,"children":9477},{"style":703},[9478],{"type":427,"value":9479},"parseInt",{"type":421,"tag":457,"props":9481,"children":9482},{"style":691},[9483],{"type":427,"value":711},{"type":421,"tag":457,"props":9485,"children":9486},{"style":719},[9487],{"type":427,"value":9488},"1e35",{"type":421,"tag":457,"props":9490,"children":9491},{"style":691},[9492],{"type":427,"value":741},{"type":421,"tag":457,"props":9494,"children":9495},{"style":744},[9496],{"type":427,"value":6738},{"type":421,"tag":435,"props":9498,"children":9499},{},[9500],{"type":427,"value":9501},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":421,"tag":446,"props":9503,"children":9505},{"className":679,"code":9504,"language":681,"meta":415,"style":415},"String() // ''\nString(undefined) // undefined\n",[9506],{"type":421,"tag":453,"props":9507,"children":9508},{"__ignoreMap":415},[9509,9525],{"type":421,"tag":457,"props":9510,"children":9511},{"class":459,"line":460},[9512,9516,9520],{"type":421,"tag":457,"props":9513,"children":9514},{"style":703},[9515],{"type":427,"value":9163},{"type":421,"tag":457,"props":9517,"children":9518},{"style":691},[9519],{"type":427,"value":845},{"type":421,"tag":457,"props":9521,"children":9522},{"style":744},[9523],{"type":427,"value":9524},"// ''\n",{"type":421,"tag":457,"props":9526,"children":9527},{"class":459,"line":750},[9528,9532,9536,9540,9544],{"type":421,"tag":457,"props":9529,"children":9530},{"style":703},[9531],{"type":427,"value":9163},{"type":421,"tag":457,"props":9533,"children":9534},{"style":691},[9535],{"type":427,"value":711},{"type":421,"tag":457,"props":9537,"children":9538},{"style":770},[9539],{"type":427,"value":4569},{"type":421,"tag":457,"props":9541,"children":9542},{"style":691},[9543],{"type":427,"value":741},{"type":421,"tag":457,"props":9545,"children":9546},{"style":744},[9547],{"type":427,"value":980},{"type":421,"tag":429,"props":9549,"children":9551},{"id":9550},"对象与数组的动态特性",[9552],{"type":427,"value":9550},{"type":421,"tag":435,"props":9554,"children":9555},{},[9556],{"type":427,"value":9557},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":421,"tag":446,"props":9559,"children":9561},{"className":679,"code":9560,"language":681,"meta":415,"style":415},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9562],{"type":421,"tag":453,"props":9563,"children":9564},{"__ignoreMap":415},[9565,9601,9626,9649,9673],{"type":421,"tag":457,"props":9566,"children":9567},{"class":459,"line":460},[9568,9572,9576,9580,9584,9589,9593,9597],{"type":421,"tag":457,"props":9569,"children":9570},{"style":1014},[9571],{"type":427,"value":5805},{"type":421,"tag":457,"props":9573,"children":9574},{"style":1448},[9575],{"type":427,"value":3238},{"type":421,"tag":457,"props":9577,"children":9578},{"style":487},[9579],{"type":427,"value":1378},{"type":421,"tag":457,"props":9581,"children":9582},{"style":487},[9583],{"type":427,"value":2857},{"type":421,"tag":457,"props":9585,"children":9586},{"style":703},[9587],{"type":427,"value":9588}," Array",{"type":421,"tag":457,"props":9590,"children":9591},{"style":691},[9592],{"type":427,"value":711},{"type":421,"tag":457,"props":9594,"children":9595},{"style":719},[9596],{"type":427,"value":8113},{"type":421,"tag":457,"props":9598,"children":9599},{"style":691},[9600],{"type":427,"value":1432},{"type":421,"tag":457,"props":9602,"children":9603},{"class":459,"line":750},[9604,9609,9613,9618,9622],{"type":421,"tag":457,"props":9605,"children":9606},{"style":691},[9607],{"type":427,"value":9608},"a[",{"type":421,"tag":457,"props":9610,"children":9611},{"style":719},[9612],{"type":427,"value":526},{"type":421,"tag":457,"props":9614,"children":9615},{"style":691},[9616],{"type":427,"value":9617},"] ",{"type":421,"tag":457,"props":9619,"children":9620},{"style":487},[9621],{"type":427,"value":1889},{"type":421,"tag":457,"props":9623,"children":9624},{"style":719},[9625],{"type":427,"value":6792},{"type":421,"tag":457,"props":9627,"children":9628},{"class":459,"line":1394},[9629,9633,9637,9641,9645],{"type":421,"tag":457,"props":9630,"children":9631},{"style":691},[9632],{"type":427,"value":9608},{"type":421,"tag":457,"props":9634,"children":9635},{"style":719},[9636],{"type":427,"value":6315},{"type":421,"tag":457,"props":9638,"children":9639},{"style":691},[9640],{"type":427,"value":9617},{"type":421,"tag":457,"props":9642,"children":9643},{"style":487},[9644],{"type":427,"value":1889},{"type":421,"tag":457,"props":9646,"children":9647},{"style":719},[9648],{"type":427,"value":6792},{"type":421,"tag":457,"props":9650,"children":9651},{"class":459,"line":1435},[9652,9656,9661,9665,9669],{"type":421,"tag":457,"props":9653,"children":9654},{"style":691},[9655],{"type":427,"value":9608},{"type":421,"tag":457,"props":9657,"children":9658},{"style":719},[9659],{"type":427,"value":9660},"7",{"type":421,"tag":457,"props":9662,"children":9663},{"style":691},[9664],{"type":427,"value":9617},{"type":421,"tag":457,"props":9666,"children":9667},{"style":487},[9668],{"type":427,"value":1889},{"type":421,"tag":457,"props":9670,"children":9671},{"style":719},[9672],{"type":427,"value":6792},{"type":421,"tag":457,"props":9674,"children":9675},{"class":459,"line":1444},[9676,9680,9684,9689,9693,9697,9701,9706,9710,9715,9719,9724,9729,9733],{"type":421,"tag":457,"props":9677,"children":9678},{"style":691},[9679],{"type":427,"value":518},{"type":421,"tag":457,"props":9681,"children":9682},{"style":697},[9683],{"type":427,"value":700},{"type":421,"tag":457,"props":9685,"children":9686},{"style":703},[9687],{"type":427,"value":9688},"sort",{"type":421,"tag":457,"props":9690,"children":9691},{"style":691},[9692],{"type":427,"value":711},{"type":421,"tag":457,"props":9694,"children":9695},{"style":697},[9696],{"type":427,"value":1063},{"type":421,"tag":457,"props":9698,"children":9699},{"style":1014},[9700],{"type":427,"value":5741},{"type":421,"tag":457,"props":9702,"children":9703},{"style":691},[9704],{"type":427,"value":9705}," Math",{"type":421,"tag":457,"props":9707,"children":9708},{"style":697},[9709],{"type":427,"value":700},{"type":421,"tag":457,"props":9711,"children":9712},{"style":703},[9713],{"type":427,"value":9714},"random",{"type":421,"tag":457,"props":9716,"children":9717},{"style":691},[9718],{"type":427,"value":845},{"type":421,"tag":457,"props":9720,"children":9721},{"style":487},[9722],{"type":427,"value":9723},"-",{"type":421,"tag":457,"props":9725,"children":9726},{"style":719},[9727],{"type":427,"value":9728}," 0.5",{"type":421,"tag":457,"props":9730,"children":9731},{"style":691},[9732],{"type":427,"value":741},{"type":421,"tag":457,"props":9734,"children":9735},{"style":744},[9736],{"type":427,"value":9737},"// [1, 1, 1, empty x 7]\n",{"type":421,"tag":435,"props":9739,"children":9740},{},[9741],{"type":427,"value":9742},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":421,"tag":435,"props":9744,"children":9745},{},[9746],{"type":427,"value":9747},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":421,"tag":429,"props":9749,"children":9751},{"id":9750},"重写",[9752],{"type":427,"value":9750},{"type":421,"tag":435,"props":9754,"children":9755},{},[9756],{"type":427,"value":9757},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":421,"tag":435,"props":9759,"children":9760},{},[9761],{"type":427,"value":9762},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":421,"tag":435,"props":9764,"children":9765},{},[9766],{"type":427,"value":9767},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":421,"tag":446,"props":9769,"children":9771},{"className":679,"code":9770,"language":681,"meta":415,"style":415},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9772],{"type":421,"tag":453,"props":9773,"children":9774},{"__ignoreMap":415},[9775,9816,9831,9852,9869,9876,9887,9910,9942,9977,10017,10057,10065,10121,10136,10184,10191,10198,10209,10232],{"type":421,"tag":457,"props":9776,"children":9777},{"class":459,"line":460},[9778,9782,9786,9790,9794,9798,9803,9807,9812],{"type":421,"tag":457,"props":9779,"children":9780},{"style":1014},[9781],{"type":427,"value":5805},{"type":421,"tag":457,"props":9783,"children":9784},{"style":1448},[9785],{"type":427,"value":3238},{"type":421,"tag":457,"props":9787,"children":9788},{"style":487},[9789],{"type":427,"value":1378},{"type":421,"tag":457,"props":9791,"children":9792},{"style":691},[9793],{"type":427,"value":4127},{"type":421,"tag":457,"props":9795,"children":9796},{"style":697},[9797],{"type":427,"value":700},{"type":421,"tag":457,"props":9799,"children":9800},{"style":703},[9801],{"type":427,"value":9802},"defineProperties",{"type":421,"tag":457,"props":9804,"children":9805},{"style":691},[9806],{"type":427,"value":711},{"type":421,"tag":457,"props":9808,"children":9809},{"style":697},[9810],{"type":427,"value":9811},"{},",{"type":421,"tag":457,"props":9813,"children":9814},{"style":697},[9815],{"type":427,"value":1355},{"type":421,"tag":457,"props":9817,"children":9818},{"class":459,"line":750},[9819,9823,9827],{"type":421,"tag":457,"props":9820,"children":9821},{"style":1412},[9822],{"type":427,"value":2788},{"type":421,"tag":457,"props":9824,"children":9825},{"style":697},[9826],{"type":427,"value":1874},{"type":421,"tag":457,"props":9828,"children":9829},{"style":697},[9830],{"type":427,"value":1355},{"type":421,"tag":457,"props":9832,"children":9833},{"class":459,"line":1394},[9834,9839,9843,9848],{"type":421,"tag":457,"props":9835,"children":9836},{"style":1412},[9837],{"type":427,"value":9838},"    value",{"type":421,"tag":457,"props":9840,"children":9841},{"style":697},[9842],{"type":427,"value":1874},{"type":421,"tag":457,"props":9844,"children":9845},{"style":719},[9846],{"type":427,"value":9847}," 100",{"type":421,"tag":457,"props":9849,"children":9850},{"style":697},[9851],{"type":427,"value":7248},{"type":421,"tag":457,"props":9853,"children":9854},{"class":459,"line":1435},[9855,9860,9864],{"type":421,"tag":457,"props":9856,"children":9857},{"style":1412},[9858],{"type":427,"value":9859},"    configurable",{"type":421,"tag":457,"props":9861,"children":9862},{"style":697},[9863],{"type":427,"value":1874},{"type":421,"tag":457,"props":9865,"children":9866},{"style":853},[9867],{"type":427,"value":9868}," true\n",{"type":421,"tag":457,"props":9870,"children":9871},{"class":459,"line":1444},[9872],{"type":421,"tag":457,"props":9873,"children":9874},{"style":697},[9875],{"type":427,"value":2094},{"type":421,"tag":457,"props":9877,"children":9878},{"class":459,"line":1479},[9879,9883],{"type":421,"tag":457,"props":9880,"children":9881},{"style":697},[9882],{"type":427,"value":1688},{"type":421,"tag":457,"props":9884,"children":9885},{"style":691},[9886],{"type":427,"value":1432},{"type":421,"tag":457,"props":9888,"children":9889},{"class":459,"line":1516},[9890,9894,9898,9902,9906],{"type":421,"tag":457,"props":9891,"children":9892},{"style":691},[9893],{"type":427,"value":518},{"type":421,"tag":457,"props":9895,"children":9896},{"style":697},[9897],{"type":427,"value":700},{"type":421,"tag":457,"props":9899,"children":9900},{"style":691},[9901],{"type":427,"value":4166},{"type":421,"tag":457,"props":9903,"children":9904},{"style":487},[9905],{"type":427,"value":1889},{"type":421,"tag":457,"props":9907,"children":9908},{"style":719},[9909],{"type":427,"value":6792},{"type":421,"tag":457,"props":9911,"children":9912},{"class":459,"line":1524},[9913,9917,9921,9925,9929,9933,9937],{"type":421,"tag":457,"props":9914,"children":9915},{"style":691},[9916],{"type":427,"value":5034},{"type":421,"tag":457,"props":9918,"children":9919},{"style":697},[9920],{"type":427,"value":700},{"type":421,"tag":457,"props":9922,"children":9923},{"style":703},[9924],{"type":427,"value":1409},{"type":421,"tag":457,"props":9926,"children":9927},{"style":691},[9928],{"type":427,"value":7335},{"type":421,"tag":457,"props":9930,"children":9931},{"style":697},[9932],{"type":427,"value":700},{"type":421,"tag":457,"props":9934,"children":9935},{"style":691},[9936],{"type":427,"value":6044},{"type":421,"tag":457,"props":9938,"children":9939},{"style":744},[9940],{"type":427,"value":9941},"// 100\n",{"type":421,"tag":457,"props":9943,"children":9944},{"class":459,"line":1551},[9945,9949,9953,9957,9961,9965,9969,9973],{"type":421,"tag":457,"props":9946,"children":9947},{"style":1014},[9948],{"type":427,"value":5805},{"type":421,"tag":457,"props":9950,"children":9951},{"style":1448},[9952],{"type":427,"value":7049},{"type":421,"tag":457,"props":9954,"children":9955},{"style":487},[9956],{"type":427,"value":1378},{"type":421,"tag":457,"props":9958,"children":9959},{"style":487},[9960],{"type":427,"value":2857},{"type":421,"tag":457,"props":9962,"children":9963},{"style":703},[9964],{"type":427,"value":5651},{"type":421,"tag":457,"props":9966,"children":9967},{"style":691},[9968],{"type":427,"value":7335},{"type":421,"tag":457,"props":9970,"children":9971},{"style":697},[9972],{"type":427,"value":727},{"type":421,"tag":457,"props":9974,"children":9975},{"style":697},[9976],{"type":427,"value":1355},{"type":421,"tag":457,"props":9978,"children":9979},{"class":459,"line":2127},[9980,9984,9988,9992,9996,10001,10005,10009,10013],{"type":421,"tag":457,"props":9981,"children":9982},{"style":2674},[9983],{"type":427,"value":2671},{"type":421,"tag":457,"props":9985,"children":9986},{"style":697},[9987],{"type":427,"value":1947},{"type":421,"tag":457,"props":9989,"children":9990},{"style":1641},[9991],{"type":427,"value":5669},{"type":421,"tag":457,"props":9993,"children":9994},{"style":697},[9995],{"type":427,"value":727},{"type":421,"tag":457,"props":9997,"children":9998},{"style":1641},[9999],{"type":427,"value":10000}," key",{"type":421,"tag":457,"props":10002,"children":10003},{"style":697},[10004],{"type":427,"value":727},{"type":421,"tag":457,"props":10006,"children":10007},{"style":1641},[10008],{"type":427,"value":8740},{"type":421,"tag":457,"props":10010,"children":10011},{"style":697},[10012],{"type":427,"value":1649},{"type":421,"tag":457,"props":10014,"children":10015},{"style":697},[10016],{"type":427,"value":1355},{"type":421,"tag":457,"props":10018,"children":10019},{"class":459,"line":2187},[10020,10024,10028,10033,10037,10041,10045,10049,10053],{"type":421,"tag":457,"props":10021,"children":10022},{"style":1718},[10023],{"type":427,"value":2008},{"type":421,"tag":457,"props":10025,"children":10026},{"style":1412},[10027],{"type":427,"value":1947},{"type":421,"tag":457,"props":10029,"children":10030},{"style":691},[10031],{"type":427,"value":10032},"key",{"type":421,"tag":457,"props":10034,"children":10035},{"style":487},[10036],{"type":427,"value":2021},{"type":421,"tag":457,"props":10038,"children":10039},{"style":470},[10040],{"type":427,"value":473},{"type":421,"tag":457,"props":10042,"children":10043},{"style":476},[10044],{"type":427,"value":1740},{"type":421,"tag":457,"props":10046,"children":10047},{"style":470},[10048],{"type":427,"value":484},{"type":421,"tag":457,"props":10050,"children":10051},{"style":1412},[10052],{"type":427,"value":741},{"type":421,"tag":457,"props":10054,"children":10055},{"style":697},[10056],{"type":427,"value":1764},{"type":421,"tag":457,"props":10058,"children":10059},{"class":459,"line":2248},[10060],{"type":421,"tag":457,"props":10061,"children":10062},{"style":744},[10063],{"type":427,"value":10064},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":421,"tag":457,"props":10066,"children":10067},{"class":459,"line":2289},[10068,10072,10076,10080,10085,10089,10093,10097,10101,10105,10109,10113,10117],{"type":421,"tag":457,"props":10069,"children":10070},{"style":1718},[10071],{"type":427,"value":5918},{"type":421,"tag":457,"props":10073,"children":10074},{"style":691},[10075],{"type":427,"value":5959},{"type":421,"tag":457,"props":10077,"children":10078},{"style":697},[10079],{"type":427,"value":700},{"type":421,"tag":457,"props":10081,"children":10082},{"style":703},[10083],{"type":427,"value":10084},"defineProperty",{"type":421,"tag":457,"props":10086,"children":10087},{"style":1412},[10088],{"type":427,"value":711},{"type":421,"tag":457,"props":10090,"children":10091},{"style":691},[10092],{"type":427,"value":5669},{"type":421,"tag":457,"props":10094,"children":10095},{"style":697},[10096],{"type":427,"value":727},{"type":421,"tag":457,"props":10098,"children":10099},{"style":691},[10100],{"type":427,"value":10000},{"type":421,"tag":457,"props":10102,"children":10103},{"style":697},[10104],{"type":427,"value":727},{"type":421,"tag":457,"props":10106,"children":10107},{"style":697},[10108],{"type":427,"value":1726},{"type":421,"tag":457,"props":10110,"children":10111},{"style":691},[10112],{"type":427,"value":8740},{"type":421,"tag":457,"props":10114,"children":10115},{"style":697},[10116],{"type":427,"value":1749},{"type":421,"tag":457,"props":10118,"children":10119},{"style":1412},[10120],{"type":427,"value":1432},{"type":421,"tag":457,"props":10122,"children":10123},{"class":459,"line":2330},[10124,10128,10132],{"type":421,"tag":457,"props":10125,"children":10126},{"style":697},[10127],{"type":427,"value":5938},{"type":421,"tag":457,"props":10129,"children":10130},{"style":1718},[10131],{"type":427,"value":5943},{"type":421,"tag":457,"props":10133,"children":10134},{"style":697},[10135],{"type":427,"value":1355},{"type":421,"tag":457,"props":10137,"children":10138},{"class":459,"line":2339},[10139,10143,10147,10151,10156,10160,10164,10168,10172,10176,10180],{"type":421,"tag":457,"props":10140,"children":10141},{"style":1718},[10142],{"type":427,"value":5918},{"type":421,"tag":457,"props":10144,"children":10145},{"style":691},[10146],{"type":427,"value":5959},{"type":421,"tag":457,"props":10148,"children":10149},{"style":697},[10150],{"type":427,"value":700},{"type":421,"tag":457,"props":10152,"children":10153},{"style":703},[10154],{"type":427,"value":10155},"set",{"type":421,"tag":457,"props":10157,"children":10158},{"style":1412},[10159],{"type":427,"value":711},{"type":421,"tag":457,"props":10161,"children":10162},{"style":691},[10163],{"type":427,"value":5669},{"type":421,"tag":457,"props":10165,"children":10166},{"style":697},[10167],{"type":427,"value":727},{"type":421,"tag":457,"props":10169,"children":10170},{"style":691},[10171],{"type":427,"value":10000},{"type":421,"tag":457,"props":10173,"children":10174},{"style":697},[10175],{"type":427,"value":727},{"type":421,"tag":457,"props":10177,"children":10178},{"style":691},[10179],{"type":427,"value":8740},{"type":421,"tag":457,"props":10181,"children":10182},{"style":1412},[10183],{"type":427,"value":1432},{"type":421,"tag":457,"props":10185,"children":10186},{"class":459,"line":2347},[10187],{"type":421,"tag":457,"props":10188,"children":10189},{"style":697},[10190],{"type":427,"value":2336},{"type":421,"tag":457,"props":10192,"children":10193},{"class":459,"line":6013},[10194],{"type":421,"tag":457,"props":10195,"children":10196},{"style":697},[10197],{"type":427,"value":2094},{"type":421,"tag":457,"props":10199,"children":10200},{"class":459,"line":8529},[10201,10205],{"type":421,"tag":457,"props":10202,"children":10203},{"style":697},[10204],{"type":427,"value":1688},{"type":421,"tag":457,"props":10206,"children":10207},{"style":691},[10208],{"type":427,"value":1432},{"type":421,"tag":457,"props":10210,"children":10211},{"class":459,"line":8537},[10212,10216,10220,10224,10228],{"type":421,"tag":457,"props":10213,"children":10214},{"style":691},[10215],{"type":427,"value":1373},{"type":421,"tag":457,"props":10217,"children":10218},{"style":697},[10219],{"type":427,"value":700},{"type":421,"tag":457,"props":10221,"children":10222},{"style":691},[10223],{"type":427,"value":4166},{"type":421,"tag":457,"props":10225,"children":10226},{"style":487},[10227],{"type":427,"value":1889},{"type":421,"tag":457,"props":10229,"children":10230},{"style":719},[10231],{"type":427,"value":6792},{"type":421,"tag":457,"props":10233,"children":10234},{"class":459,"line":8545},[10235,10239,10243,10247,10252,10256,10260],{"type":421,"tag":457,"props":10236,"children":10237},{"style":691},[10238],{"type":427,"value":5034},{"type":421,"tag":457,"props":10240,"children":10241},{"style":697},[10242],{"type":427,"value":700},{"type":421,"tag":457,"props":10244,"children":10245},{"style":703},[10246],{"type":427,"value":1409},{"type":421,"tag":457,"props":10248,"children":10249},{"style":691},[10250],{"type":427,"value":10251},"(b",{"type":421,"tag":457,"props":10253,"children":10254},{"style":697},[10255],{"type":427,"value":700},{"type":421,"tag":457,"props":10257,"children":10258},{"style":691},[10259],{"type":427,"value":6044},{"type":421,"tag":457,"props":10261,"children":10262},{"style":744},[10263],{"type":427,"value":6738},{"type":421,"tag":435,"props":10265,"children":10266},{},[10267],{"type":427,"value":10268},"自增自减运算符会隐式的转换操作数的类型。",{"type":421,"tag":435,"props":10270,"children":10271},{},[10272],{"type":427,"value":10273},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":421,"tag":446,"props":10275,"children":10277},{"className":679,"code":10276,"language":681,"meta":415,"style":415},"class a extends a {}\n",[10278],{"type":421,"tag":453,"props":10279,"children":10280},{"__ignoreMap":415},[10281],{"type":421,"tag":457,"props":10282,"children":10283},{"class":459,"line":460},[10284,10288,10292,10296,10300],{"type":421,"tag":457,"props":10285,"children":10286},{"style":1014},[10287],{"type":427,"value":3559},{"type":421,"tag":457,"props":10289,"children":10290},{"style":3562},[10291],{"type":427,"value":3238},{"type":421,"tag":457,"props":10293,"children":10294},{"style":3582},[10295],{"type":427,"value":3585},{"type":421,"tag":457,"props":10297,"children":10298},{"style":3588},[10299],{"type":427,"value":3238},{"type":421,"tag":457,"props":10301,"children":10302},{"style":697},[10303],{"type":427,"value":3146},{"type":421,"tag":435,"props":10305,"children":10306},{},[10307],{"type":427,"value":10308},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":421,"tag":435,"props":10310,"children":10311},{},[10312],{"type":427,"value":10313},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":421,"tag":435,"props":10315,"children":10316},{},[10317],{"type":427,"value":10318},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":421,"tag":446,"props":10320,"children":10322},{"className":679,"code":10321,"language":681,"meta":415,"style":415},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10323],{"type":421,"tag":453,"props":10324,"children":10325},{"__ignoreMap":415},[10326,10379,10392,10399],{"type":421,"tag":457,"props":10327,"children":10328},{"class":459,"line":460},[10329,10333,10338,10342,10346,10351,10355,10359,10363,10367,10371,10375],{"type":421,"tag":457,"props":10330,"children":10331},{"style":1718},[10332],{"type":427,"value":8780},{"type":421,"tag":457,"props":10334,"children":10335},{"style":691},[10336],{"type":427,"value":10337}," (a ",{"type":421,"tag":457,"props":10339,"children":10340},{"style":487},[10341],{"type":427,"value":1889},{"type":421,"tag":457,"props":10343,"children":10344},{"style":697},[10345],{"type":427,"value":1726},{"type":421,"tag":457,"props":10347,"children":10348},{"style":1412},[10349],{"type":427,"value":10350}," undefined",{"type":421,"tag":457,"props":10352,"children":10353},{"style":697},[10354],{"type":427,"value":1874},{"type":421,"tag":457,"props":10356,"children":10357},{"style":470},[10358],{"type":427,"value":473},{"type":421,"tag":457,"props":10360,"children":10361},{"style":476},[10362],{"type":427,"value":1740},{"type":421,"tag":457,"props":10364,"children":10365},{"style":470},[10366],{"type":427,"value":484},{"type":421,"tag":457,"props":10368,"children":10369},{"style":697},[10370],{"type":427,"value":1749},{"type":421,"tag":457,"props":10372,"children":10373},{"style":691},[10374],{"type":427,"value":741},{"type":421,"tag":457,"props":10376,"children":10377},{"style":697},[10378],{"type":427,"value":1764},{"type":421,"tag":457,"props":10380,"children":10381},{"class":459,"line":750},[10382,10387],{"type":421,"tag":457,"props":10383,"children":10384},{"style":487},[10385],{"type":427,"value":10386},"  delete",{"type":421,"tag":457,"props":10388,"children":10389},{"style":770},[10390],{"type":427,"value":10391}," undefined\n",{"type":421,"tag":457,"props":10393,"children":10394},{"class":459,"line":1394},[10395],{"type":421,"tag":457,"props":10396,"children":10397},{"style":697},[10398],{"type":427,"value":1441},{"type":421,"tag":457,"props":10400,"children":10401},{"class":459,"line":1435},[10402,10406,10410,10414,10419],{"type":421,"tag":457,"props":10403,"children":10404},{"style":691},[10405],{"type":427,"value":5034},{"type":421,"tag":457,"props":10407,"children":10408},{"style":697},[10409],{"type":427,"value":700},{"type":421,"tag":457,"props":10411,"children":10412},{"style":703},[10413],{"type":427,"value":1409},{"type":421,"tag":457,"props":10415,"children":10416},{"style":691},[10417],{"type":427,"value":10418},"(a) ",{"type":421,"tag":457,"props":10420,"children":10421},{"style":744},[10422],{"type":427,"value":7511},{"type":421,"tag":429,"props":10424,"children":10426},{"id":10425},"动态绑定",[10427],{"type":427,"value":10425},{"type":421,"tag":435,"props":10429,"children":10430},{},[10431],{"type":427,"value":10432},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":421,"tag":446,"props":10434,"children":10436},{"className":679,"code":10435,"language":681,"meta":415,"style":415},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10437],{"type":421,"tag":453,"props":10438,"children":10439},{"__ignoreMap":415},[10440,10460,10480,10508,10516,10545,10553,10582,10590,10636,10644,10685,10692],{"type":421,"tag":457,"props":10441,"children":10442},{"class":459,"line":460},[10443,10447,10452,10456],{"type":421,"tag":457,"props":10444,"children":10445},{"style":1014},[10446],{"type":427,"value":1340},{"type":421,"tag":457,"props":10448,"children":10449},{"style":703},[10450],{"type":427,"value":10451}," indirect",{"type":421,"tag":457,"props":10453,"children":10454},{"style":697},[10455],{"type":427,"value":1063},{"type":421,"tag":457,"props":10457,"children":10458},{"style":697},[10459],{"type":427,"value":1355},{"type":421,"tag":457,"props":10461,"children":10462},{"class":459,"line":750},[10463,10467,10471,10475],{"type":421,"tag":457,"props":10464,"children":10465},{"style":1014},[10466],{"type":427,"value":3792},{"type":421,"tag":457,"props":10468,"children":10469},{"style":1448},[10470],{"type":427,"value":7837},{"type":421,"tag":457,"props":10472,"children":10473},{"style":487},[10474],{"type":427,"value":1378},{"type":421,"tag":457,"props":10476,"children":10477},{"style":691},[10478],{"type":427,"value":10479}," eval\n",{"type":421,"tag":457,"props":10481,"children":10482},{"class":459,"line":1394},[10483,10487,10492,10496,10500,10504],{"type":421,"tag":457,"props":10484,"children":10485},{"style":1014},[10486],{"type":427,"value":3792},{"type":421,"tag":457,"props":10488,"children":10489},{"style":7834},[10490],{"type":427,"value":10491}," getEval",{"type":421,"tag":457,"props":10493,"children":10494},{"style":487},[10495],{"type":427,"value":1378},{"type":421,"tag":457,"props":10497,"children":10498},{"style":697},[10499],{"type":427,"value":1350},{"type":421,"tag":457,"props":10501,"children":10502},{"style":1014},[10503],{"type":427,"value":5741},{"type":421,"tag":457,"props":10505,"children":10506},{"style":691},[10507],{"type":427,"value":10479},{"type":421,"tag":457,"props":10509,"children":10510},{"class":459,"line":1435},[10511],{"type":421,"tag":457,"props":10512,"children":10513},{"style":744},[10514],{"type":427,"value":10515},"  // 单值表达式\n",{"type":421,"tag":457,"props":10517,"children":10518},{"class":459,"line":1444},[10519,10524,10528,10532,10537,10541],{"type":421,"tag":457,"props":10520,"children":10521},{"style":703},[10522],{"type":427,"value":10523},"  exec",{"type":421,"tag":457,"props":10525,"children":10526},{"style":1412},[10527],{"type":427,"value":711},{"type":421,"tag":457,"props":10529,"children":10530},{"style":470},[10531],{"type":427,"value":484},{"type":421,"tag":457,"props":10533,"children":10534},{"style":476},[10535],{"type":427,"value":10536},"console.log(this === globalThis)",{"type":421,"tag":457,"props":10538,"children":10539},{"style":470},[10540],{"type":427,"value":484},{"type":421,"tag":457,"props":10542,"children":10543},{"style":1412},[10544],{"type":427,"value":1432},{"type":421,"tag":457,"props":10546,"children":10547},{"class":459,"line":1479},[10548],{"type":421,"tag":457,"props":10549,"children":10550},{"style":744},[10551],{"type":427,"value":10552},"  // 函数返回\n",{"type":421,"tag":457,"props":10554,"children":10555},{"class":459,"line":1516},[10556,10561,10566,10570,10574,10578],{"type":421,"tag":457,"props":10557,"children":10558},{"style":703},[10559],{"type":427,"value":10560},"  getEval",{"type":421,"tag":457,"props":10562,"children":10563},{"style":1412},[10564],{"type":427,"value":10565},"()(",{"type":421,"tag":457,"props":10567,"children":10568},{"style":470},[10569],{"type":427,"value":484},{"type":421,"tag":457,"props":10571,"children":10572},{"style":476},[10573],{"type":427,"value":10536},{"type":421,"tag":457,"props":10575,"children":10576},{"style":470},[10577],{"type":427,"value":484},{"type":421,"tag":457,"props":10579,"children":10580},{"style":1412},[10581],{"type":427,"value":1432},{"type":421,"tag":457,"props":10583,"children":10584},{"class":459,"line":1524},[10585],{"type":421,"tag":457,"props":10586,"children":10587},{"style":744},[10588],{"type":427,"value":10589},"  // 携带逗号运算符的分组运算符\n",{"type":421,"tag":457,"props":10591,"children":10592},{"class":459,"line":1551},[10593,10598,10602,10606,10610,10615,10620,10624,10628,10632],{"type":421,"tag":457,"props":10594,"children":10595},{"style":697},[10596],{"type":427,"value":10597},"  ;",{"type":421,"tag":457,"props":10599,"children":10600},{"style":1412},[10601],{"type":427,"value":711},{"type":421,"tag":457,"props":10603,"children":10604},{"style":719},[10605],{"type":427,"value":722},{"type":421,"tag":457,"props":10607,"children":10608},{"style":697},[10609],{"type":427,"value":727},{"type":421,"tag":457,"props":10611,"children":10612},{"style":691},[10613],{"type":427,"value":10614}," eval",{"type":421,"tag":457,"props":10616,"children":10617},{"style":1412},[10618],{"type":427,"value":10619},")(",{"type":421,"tag":457,"props":10621,"children":10622},{"style":470},[10623],{"type":427,"value":484},{"type":421,"tag":457,"props":10625,"children":10626},{"style":476},[10627],{"type":427,"value":10536},{"type":421,"tag":457,"props":10629,"children":10630},{"style":470},[10631],{"type":427,"value":484},{"type":421,"tag":457,"props":10633,"children":10634},{"style":1412},[10635],{"type":427,"value":1432},{"type":421,"tag":457,"props":10637,"children":10638},{"class":459,"line":2127},[10639],{"type":421,"tag":457,"props":10640,"children":10641},{"style":744},[10642],{"type":427,"value":10643},"  // eval.call 等方法\n",{"type":421,"tag":457,"props":10645,"children":10646},{"class":459,"line":2187},[10647,10652,10656,10660,10665,10669,10673,10677,10681],{"type":421,"tag":457,"props":10648,"children":10649},{"style":691},[10650],{"type":427,"value":10651},"  eval",{"type":421,"tag":457,"props":10653,"children":10654},{"style":697},[10655],{"type":427,"value":700},{"type":421,"tag":457,"props":10657,"children":10658},{"style":703},[10659],{"type":427,"value":6902},{"type":421,"tag":457,"props":10661,"children":10662},{"style":1412},[10663],{"type":427,"value":10664},"(()",{"type":421,"tag":457,"props":10666,"children":10667},{"style":697},[10668],{"type":427,"value":727},{"type":421,"tag":457,"props":10670,"children":10671},{"style":470},[10672],{"type":427,"value":473},{"type":421,"tag":457,"props":10674,"children":10675},{"style":476},[10676],{"type":427,"value":10536},{"type":421,"tag":457,"props":10678,"children":10679},{"style":470},[10680],{"type":427,"value":484},{"type":421,"tag":457,"props":10682,"children":10683},{"style":1412},[10684],{"type":427,"value":1432},{"type":421,"tag":457,"props":10686,"children":10687},{"class":459,"line":2248},[10688],{"type":421,"tag":457,"props":10689,"children":10690},{"style":697},[10691],{"type":427,"value":1441},{"type":421,"tag":457,"props":10693,"children":10694},{"class":459,"line":2289},[10695,10700,10704,10708,10712,10717],{"type":421,"tag":457,"props":10696,"children":10697},{"style":691},[10698],{"type":427,"value":10699},"indirect",{"type":421,"tag":457,"props":10701,"children":10702},{"style":697},[10703],{"type":427,"value":700},{"type":421,"tag":457,"props":10705,"children":10706},{"style":703},[10707],{"type":427,"value":7732},{"type":421,"tag":457,"props":10709,"children":10710},{"style":691},[10711],{"type":427,"value":711},{"type":421,"tag":457,"props":10713,"children":10714},{"style":697},[10715],{"type":427,"value":10716},"{}",{"type":421,"tag":457,"props":10718,"children":10719},{"style":691},[10720],{"type":427,"value":10721},")()\n",{"type":421,"tag":435,"props":10723,"children":10724},{},[10725],{"type":427,"value":10726},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":421,"tag":435,"props":10728,"children":10729},{},[10730],{"type":427,"value":10731},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":421,"tag":446,"props":10733,"children":10735},{"className":679,"code":10734,"language":681,"meta":415,"style":415},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10736],{"type":421,"tag":453,"props":10737,"children":10738},{"__ignoreMap":415},[10739,10754,10790,10812,10868],{"type":421,"tag":457,"props":10740,"children":10741},{"class":459,"line":460},[10742,10746,10750],{"type":421,"tag":457,"props":10743,"children":10744},{"style":691},[10745],{"type":427,"value":7200},{"type":421,"tag":457,"props":10747,"children":10748},{"style":487},[10749],{"type":427,"value":1889},{"type":421,"tag":457,"props":10751,"children":10752},{"style":719},[10753],{"type":427,"value":6368},{"type":421,"tag":457,"props":10755,"children":10756},{"class":459,"line":750},[10757,10761,10765,10769,10773,10777,10781,10786],{"type":421,"tag":457,"props":10758,"children":10759},{"style":1014},[10760],{"type":427,"value":5805},{"type":421,"tag":457,"props":10762,"children":10763},{"style":1448},[10764],{"type":427,"value":2655},{"type":421,"tag":457,"props":10766,"children":10767},{"style":487},[10768],{"type":427,"value":1378},{"type":421,"tag":457,"props":10770,"children":10771},{"style":697},[10772],{"type":427,"value":1726},{"type":421,"tag":457,"props":10774,"children":10775},{"style":1412},[10776],{"type":427,"value":6490},{"type":421,"tag":457,"props":10778,"children":10779},{"style":697},[10780],{"type":427,"value":1874},{"type":421,"tag":457,"props":10782,"children":10783},{"style":719},[10784],{"type":427,"value":10785}," 200",{"type":421,"tag":457,"props":10787,"children":10788},{"style":697},[10789],{"type":427,"value":3185},{"type":421,"tag":457,"props":10791,"children":10792},{"class":459,"line":1394},[10793,10797,10802,10807],{"type":421,"tag":457,"props":10794,"children":10795},{"style":1718},[10796],{"type":427,"value":8780},{"type":421,"tag":457,"props":10798,"children":10799},{"style":691},[10800],{"type":427,"value":10801}," (obj) ",{"type":421,"tag":457,"props":10803,"children":10804},{"style":697},[10805],{"type":427,"value":10806},"{",{"type":421,"tag":457,"props":10808,"children":10809},{"style":1412},[10810],{"type":427,"value":10811}," \n",{"type":421,"tag":457,"props":10813,"children":10814},{"class":459,"line":1435},[10815,10819,10823,10827,10831,10835,10839,10843,10847,10851,10855,10859,10863],{"type":421,"tag":457,"props":10816,"children":10817},{"style":703},[10818],{"type":427,"value":10651},{"type":421,"tag":457,"props":10820,"children":10821},{"style":1412},[10822],{"type":427,"value":711},{"type":421,"tag":457,"props":10824,"children":10825},{"style":691},[10826],{"type":427,"value":5034},{"type":421,"tag":457,"props":10828,"children":10829},{"style":697},[10830],{"type":427,"value":700},{"type":421,"tag":457,"props":10832,"children":10833},{"style":703},[10834],{"type":427,"value":1409},{"type":421,"tag":457,"props":10836,"children":10837},{"style":1412},[10838],{"type":427,"value":711},{"type":421,"tag":457,"props":10840,"children":10841},{"style":691},[10842],{"type":427,"value":2685},{"type":421,"tag":457,"props":10844,"children":10845},{"style":697},[10846],{"type":427,"value":727},{"type":421,"tag":457,"props":10848,"children":10849},{"style":1361},[10850],{"type":427,"value":3806},{"type":421,"tag":457,"props":10852,"children":10853},{"style":697},[10854],{"type":427,"value":700},{"type":421,"tag":457,"props":10856,"children":10857},{"style":691},[10858],{"type":427,"value":2685},{"type":421,"tag":457,"props":10860,"children":10861},{"style":1412},[10862],{"type":427,"value":9289},{"type":421,"tag":457,"props":10864,"children":10865},{"style":744},[10866],{"type":427,"value":10867},"// 200 100\n",{"type":421,"tag":457,"props":10869,"children":10870},{"class":459,"line":1444},[10871],{"type":421,"tag":457,"props":10872,"children":10873},{"style":697},[10874],{"type":427,"value":1441},{"type":421,"tag":435,"props":10876,"children":10877},{},[10878],{"type":427,"value":10879},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":421,"tag":429,"props":10881,"children":10883},{"id":10882},"动态方法调用",[10884],{"type":427,"value":10882},{"type":421,"tag":435,"props":10886,"children":10887},{},[10888],{"type":427,"value":10889},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":421,"tag":435,"props":10891,"children":10892},{},[10893],{"type":427,"value":10894},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":421,"tag":435,"props":10896,"children":10897},{},[10898],{"type":427,"value":10899},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":421,"tag":435,"props":10901,"children":10902},{},[10903],{"type":427,"value":10904},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":421,"tag":446,"props":10906,"children":10908},{"className":679,"code":10907,"language":681,"meta":415,"style":415},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10909],{"type":421,"tag":453,"props":10910,"children":10911},{"__ignoreMap":415},[10912,10932,10968,11017],{"type":421,"tag":457,"props":10913,"children":10914},{"class":459,"line":460},[10915,10919,10924,10928],{"type":421,"tag":457,"props":10916,"children":10917},{"style":1014},[10918],{"type":427,"value":1340},{"type":421,"tag":457,"props":10920,"children":10921},{"style":703},[10922],{"type":427,"value":10923}," Test",{"type":421,"tag":457,"props":10925,"children":10926},{"style":697},[10927],{"type":427,"value":1063},{"type":421,"tag":457,"props":10929,"children":10930},{"style":697},[10931],{"type":427,"value":3146},{"type":421,"tag":457,"props":10933,"children":10934},{"class":459,"line":750},[10935,10940,10944,10948,10952,10956,10960,10964],{"type":421,"tag":457,"props":10936,"children":10937},{"style":691},[10938],{"type":427,"value":10939},"TestAnother ",{"type":421,"tag":457,"props":10941,"children":10942},{"style":487},[10943],{"type":427,"value":1889},{"type":421,"tag":457,"props":10945,"children":10946},{"style":691},[10947],{"type":427,"value":10923},{"type":421,"tag":457,"props":10949,"children":10950},{"style":697},[10951],{"type":427,"value":700},{"type":421,"tag":457,"props":10953,"children":10954},{"style":703},[10955],{"type":427,"value":7732},{"type":421,"tag":457,"props":10957,"children":10958},{"style":691},[10959],{"type":427,"value":711},{"type":421,"tag":457,"props":10961,"children":10962},{"style":697},[10963],{"type":427,"value":10716},{"type":421,"tag":457,"props":10965,"children":10966},{"style":691},[10967],{"type":427,"value":1432},{"type":421,"tag":457,"props":10969,"children":10970},{"class":459,"line":1394},[10971,10975,10979,10983,10987,10991,10995,10999,11004,11009,11013],{"type":421,"tag":457,"props":10972,"children":10973},{"style":691},[10974],{"type":427,"value":5034},{"type":421,"tag":457,"props":10976,"children":10977},{"style":697},[10978],{"type":427,"value":700},{"type":421,"tag":457,"props":10980,"children":10981},{"style":703},[10982],{"type":427,"value":1409},{"type":421,"tag":457,"props":10984,"children":10985},{"style":691},[10986],{"type":427,"value":711},{"type":421,"tag":457,"props":10988,"children":10989},{"style":487},[10990],{"type":427,"value":1530},{"type":421,"tag":457,"props":10992,"children":10993},{"style":703},[10994],{"type":427,"value":10923},{"type":421,"tag":457,"props":10996,"children":10997},{"style":691},[10998],{"type":427,"value":845},{"type":421,"tag":457,"props":11000,"children":11001},{"style":487},[11002],{"type":427,"value":11003},"instanceof",{"type":421,"tag":457,"props":11005,"children":11006},{"style":3562},[11007],{"type":427,"value":11008}," TestAnother",{"type":421,"tag":457,"props":11010,"children":11011},{"style":691},[11012],{"type":427,"value":741},{"type":421,"tag":457,"props":11014,"children":11015},{"style":744},[11016],{"type":427,"value":791},{"type":421,"tag":457,"props":11018,"children":11019},{"class":459,"line":1435},[11020,11024,11028,11032,11036,11041,11045,11049,11053],{"type":421,"tag":457,"props":11021,"children":11022},{"style":691},[11023],{"type":427,"value":5034},{"type":421,"tag":457,"props":11025,"children":11026},{"style":697},[11027],{"type":427,"value":700},{"type":421,"tag":457,"props":11029,"children":11030},{"style":703},[11031],{"type":427,"value":1409},{"type":421,"tag":457,"props":11033,"children":11034},{"style":691},[11035],{"type":427,"value":711},{"type":421,"tag":457,"props":11037,"children":11038},{"style":2837},[11039],{"type":427,"value":11040},"test2",{"type":421,"tag":457,"props":11042,"children":11043},{"style":697},[11044],{"type":427,"value":700},{"type":421,"tag":457,"props":11046,"children":11047},{"style":1448},[11048],{"type":427,"value":2848},{"type":421,"tag":457,"props":11050,"children":11051},{"style":691},[11052],{"type":427,"value":741},{"type":421,"tag":457,"props":11054,"children":11055},{"style":744},[11056],{"type":427,"value":980},{"type":421,"tag":435,"props":11058,"children":11059},{},[11060],{"type":427,"value":11061},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":421,"tag":429,"props":11063,"children":11065},{"id":11064},"通用执行环境的实现",[11066],{"type":427,"value":11064},{"type":421,"tag":435,"props":11068,"children":11069},{},[11070],{"type":427,"value":11071},"跳过。",{"type":421,"tag":422,"props":11073,"children":11075},{"id":11074},"勘误",[11076],{"type":427,"value":11077},"勘误？",{"type":421,"tag":535,"props":11079,"children":11080},{},[11081,11086,11091,11096,11101,11106,11111,11116,11121,11126,11131,11136,11141],{"type":421,"tag":539,"props":11082,"children":11083},{},[11084],{"type":427,"value":11085},"P71，属性读取器",{"type":421,"tag":539,"props":11087,"children":11088},{},[11089],{"type":427,"value":11090},"P77，逻辑与、按位非",{"type":421,"tag":539,"props":11092,"children":11093},{},[11094],{"type":427,"value":11095},"P107，catch 子句隐式声明",{"type":421,"tag":539,"props":11097,"children":11098},{},[11099],{"type":427,"value":11100},"P134，第二段代码，computedName 括号",{"type":421,"tag":539,"props":11102,"children":11103},{},[11104],{"type":427,"value":11105},"P148，ES8",{"type":421,"tag":539,"props":11107,"children":11108},{},[11109],{"type":427,"value":11110},"P179，MyObject() 有没有必要用括号",{"type":421,"tag":539,"props":11112,"children":11113},{},[11114],{"type":427,"value":11115},"P206，语言仅提供了...能力而已",{"type":421,"tag":539,"props":11117,"children":11118},{},[11119],{"type":427,"value":11120},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":421,"tag":539,"props":11122,"children":11123},{},[11124],{"type":427,"value":11125},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":421,"tag":539,"props":11127,"children":11128},{},[11129],{"type":427,"value":11130},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":421,"tag":539,"props":11132,"children":11133},{},[11134],{"type":427,"value":11135},"P536，表格最后一行 String",{"type":421,"tag":539,"props":11137,"children":11138},{},[11139],{"type":427,"value":11140},"P535，存取描述符",{"type":421,"tag":539,"props":11142,"children":11143},{},[11144],{"type":427,"value":11145},"P564，运算符",{"type":421,"tag":11147,"props":11148,"children":11151},"section",{"className":11149,"dataFootnotes":415},[11150],"footnotes",[11152,11159],{"type":421,"tag":422,"props":11153,"children":11156},{"className":11154,"id":522},[11155],"sr-only",[11157],{"type":427,"value":11158},"Footnotes",{"type":421,"tag":11160,"props":11161,"children":11162},"ol",{},[11163,11178,11191,11204,11217,11230],{"type":421,"tag":539,"props":11164,"children":11166},{"id":11165},"user-content-fn-first-class",[11167,11169],{"type":427,"value":11168},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":421,"tag":518,"props":11170,"children":11175},{"href":11171,"ariaLabel":11172,"className":11173,"dataFootnoteBackref":415},"#user-content-fnref-first-class","Back to reference 1",[11174],"data-footnote-backref",[11176],{"type":427,"value":11177},"↩",{"type":421,"tag":539,"props":11179,"children":11181},{"id":11180},"user-content-fn-oo",[11182,11184],{"type":427,"value":11183},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":421,"tag":518,"props":11185,"children":11189},{"href":11186,"ariaLabel":11187,"className":11188,"dataFootnoteBackref":415},"#user-content-fnref-oo","Back to reference 2",[11174],[11190],{"type":427,"value":11177},{"type":421,"tag":539,"props":11192,"children":11194},{"id":11193},"user-content-fn-string",[11195,11197],{"type":427,"value":11196},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":421,"tag":518,"props":11198,"children":11202},{"href":11199,"ariaLabel":11200,"className":11201,"dataFootnoteBackref":415},"#user-content-fnref-string","Back to reference 3",[11174],[11203],{"type":427,"value":11177},{"type":421,"tag":539,"props":11205,"children":11207},{"id":11206},"user-content-fn-namespace",[11208,11210],{"type":427,"value":11209},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":421,"tag":518,"props":11211,"children":11215},{"href":11212,"ariaLabel":11213,"className":11214,"dataFootnoteBackref":415},"#user-content-fnref-namespace","Back to reference 4",[11174],[11216],{"type":427,"value":11177},{"type":421,"tag":539,"props":11218,"children":11220},{"id":11219},"user-content-fn-iterationenv",[11221,11223],{"type":427,"value":11222},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":421,"tag":518,"props":11224,"children":11228},{"href":11225,"ariaLabel":11226,"className":11227,"dataFootnoteBackref":415},"#user-content-fnref-iterationenv","Back to reference 5",[11174],[11229],{"type":427,"value":11177},{"type":421,"tag":539,"props":11231,"children":11233},{"id":11232},"user-content-fn-reference",[11234,11236],{"type":427,"value":11235},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":421,"tag":518,"props":11237,"children":11241},{"href":11238,"ariaLabel":11239,"className":11240,"dataFootnoteBackref":415},"#user-content-fnref-reference","Back to reference 6",[11174],[11242],{"type":427,"value":11177},{"type":421,"tag":11244,"props":11245,"children":11246},"style",{},[11247],{"type":427,"value":11248},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":415,"searchDepth":750,"depth":750,"links":11250},[11251,11260,11269,11279,11285,11295,11296],{"id":424,"depth":750,"text":424,"children":11252},[11253,11254,11255,11256,11257,11258,11259],{"id":431,"depth":1394,"text":431},{"id":505,"depth":1394,"text":505},{"id":631,"depth":1394,"text":631},{"id":1580,"depth":1394,"text":1580},{"id":2365,"depth":1394,"text":2365},{"id":2492,"depth":1394,"text":2492},{"id":2583,"depth":1394,"text":2583},{"id":2608,"depth":750,"text":2608,"children":11261},[11262,11263,11264,11265,11266,11267,11268],{"id":2613,"depth":1394,"text":431},{"id":3084,"depth":1394,"text":3084},{"id":3529,"depth":1394,"text":3529},{"id":4290,"depth":1394,"text":4290},{"id":5066,"depth":1394,"text":5066},{"id":5237,"depth":1394,"text":5237},{"id":6052,"depth":1394,"text":6052},{"id":6062,"depth":750,"text":6062,"children":11270},[11271,11272,11273,11274,11275,11276,11277,11278],{"id":6067,"depth":1394,"text":6067},{"id":6120,"depth":1394,"text":6120},{"id":6297,"depth":1394,"text":6297},{"id":6575,"depth":1394,"text":6575},{"id":6659,"depth":1394,"text":6659},{"id":6833,"depth":1394,"text":6833},{"id":6915,"depth":1394,"text":6915},{"id":6953,"depth":1394,"text":6953},{"id":6963,"depth":750,"text":6963,"children":11280},[11281,11282,11283,11284],{"id":6968,"depth":1394,"text":6067},{"id":6983,"depth":1394,"text":6986},{"id":8125,"depth":1394,"text":8125},{"id":8572,"depth":1394,"text":8572},{"id":8942,"depth":750,"text":8942,"children":11286},[11287,11288,11289,11290,11291,11292,11293,11294],{"id":8947,"depth":1394,"text":6067},{"id":8962,"depth":1394,"text":8962},{"id":9447,"depth":1394,"text":9447},{"id":9550,"depth":1394,"text":9550},{"id":9750,"depth":1394,"text":9750},{"id":10425,"depth":1394,"text":10425},{"id":10882,"depth":1394,"text":10882},{"id":11064,"depth":1394,"text":11064},{"id":11074,"depth":750,"text":11077},{"id":522,"depth":750,"text":11158},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11304,11308],{"_path":11305,"title":11306,"description":11307},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11309,"title":11310,"description":415},"/_books/9787301135907","日常生活中的自我呈现",1732808728537]