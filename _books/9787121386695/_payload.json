[{"data":1,"prerenderedAt":11285},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":384,"/_books/9787121386695-surround":11277},[4,35,86,105,132,138,144,150,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":205,"_path":206},"正则表达式","/gists/eegex",{"title":208,"_path":209},"Emoji","/gists/emoji",{"title":211,"_path":212},"工程","/gists/engineering",{"title":214,"_path":215},"熵","/gists/entropy",{"title":217,"_path":218},"Environment","/gists/environment",{"title":220,"_path":221},"Erlang","/gists/erlang",{"title":223,"_path":224},"逃离塔克夫","/gists/escape-from-tarkov",{"title":226,"_path":227},"ESNext (ES6-ES11)","/gists/esnext",{"title":229,"_path":230},"Eval！","/gists/eval",{"title":232,"_path":233},"Flutter","/gists/flutter",{"title":235,"_path":236},"字体","/gists/font",{"title":238,"_path":239},"JS 函数式编程","/gists/functional",{"title":241,"_path":242},"游戏化","/gists/gamification",{"title":244,"_path":245},"Google C++ Standard","/gists/google-cpp-standard",{"title":247,"_path":248},"双向链接完全体","/gists/graph",{"title":250,"_path":251},"Hardwares","/gists/hardwares",{"title":253,"_path":254},"哈希冲突","/gists/hash-collision",{"title":256,"_path":257},"信息设计","/gists/information-design",{"title":259,"_path":260},"InstantPage","/gists/instant.page",{"title":262,"_path":263},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":265,"_path":266},"KVStore","/gists/key-value-db",{"title":268,"_path":269},"Kubernetes","/gists/kubernetes",{"title":271,"_path":272},"Makefile","/gists/makefile",{"title":274,"_path":275},"Markdown Inline Style","/gists/markdown-nice",{"title":277,"_path":278},"减小页面快照体积","/gists/minify-html",{"title":280,"_path":281},"mklink","/gists/mklink",{"title":283,"_path":284},"Mock","/gists/mock",{"title":286,"_path":287},"多人协作系统","/gists/multiplayer",{"title":289,"_path":290},"多端应用","/gists/multy-end-app",{"title":292,"_path":293},"神经科学","/gists/neuroscience",{"title":295,"_path":296},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":298,"_path":299},"PInvoke","/gists/pinvoke",{"title":301,"_path":302},"像素","/gists/pixel",{"title":304,"_path":305},"PowerShell","/gists/powershell",{"title":307,"_path":308},"量子","/gists/quantum",{"title":310,"_path":311},"保持好奇心","/gists/questions",{"title":313,"_path":314},"React Native","/gists/react-native",{"title":316,"_path":317},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":319,"_path":320},"SEO","/gists/seo",{"title":322,"_path":323},"Shader","/gists/shader",{"title":325,"_path":326},"Shape Up","/gists/shape-up",{"title":328,"_path":329},"睡觉","/gists/sleep",{"title":331,"_path":332},"记录奇怪的问题","/gists/solved",{"title":334,"_path":335},"States","/gists/states",{"title":337,"_path":338},"Storage","/gists/storage",{"title":340,"_path":341},"音视频流处理","/gists/stream-cli",{"title":343,"_path":344},"Symbol","/gists/symbol",{"title":346,"_path":347},"系统论","/gists/systems-theory",{"title":349,"_path":350},"任务切片","/gists/task-slice",{"title":352,"_path":353},"技术偏好","/gists/tech-dudge",{"title":355,"_path":356},"Untitled","/gists/untitled",{"title":358,"_path":359},"可变字体","/gists/variable-font",{"title":361,"_path":362},"视觉错觉","/gists/visual-illusion",{"title":364,"_path":365},"SS(SSR)","/gists/vpn",{"title":367,"_path":368},"VS Code 插件开发","/gists/vscode-plugin",{"title":370,"_path":371},"Web Components","/gists/web-components",{"title":373,"_path":374},"Windows","/gists/windows",{"title":376,"_path":377},"查缺补漏","/gists/wrong",{"title":379,"_path":380,"children":381},"我 / About","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"_path":385,"_dir":386,"_draft":387,"_partial":388,"_locale":389,"title":390,"description":389,"body":391,"_type":11271,"_id":11272,"_source":11273,"_file":11274,"_stem":11275,"_extension":11276},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":392,"children":393,"toc":11223},"root",[394,402,408,414,419,477,482,503,508,547,552,565,570,575,580,585,603,608,613,618,631,636,641,646,651,766,771,776,836,841,882,887,920,925,930,955,960,997,1002,1295,1300,1552,1557,1562,1567,1585,1590,1675,1680,1811,1816,1821,2327,2332,2337,2342,2347,2449,2454,2459,2464,2469,2474,2479,2484,2537,2542,2555,2560,2565,2570,2575,2580,2585,2590,2595,2600,2605,2610,2786,2791,2883,2888,2893,2898,2903,3020,3038,3043,3056,3061,3066,3071,3084,3089,3094,3230,3245,3250,3330,3335,3382,3496,3501,3506,3511,3696,3701,3706,3711,3874,3879,3907,3912,3925,3930,4182,4187,4192,4197,4257,4262,4267,4272,4277,4282,4380,4385,4390,4408,4413,4426,4431,4436,4449,4454,4459,4557,4562,4567,4572,4764,4769,5038,5043,5048,5066,5071,5186,5191,5209,5214,5219,5224,5229,5420,5425,5438,5443,6024,6029,6034,6039,6044,6049,6054,6059,6064,6082,6087,6092,6097,6102,6222,6227,6232,6237,6249,6254,6259,6264,6269,6274,6292,6409,6414,6547,6552,6557,6562,6580,6585,6590,6631,6636,6641,6646,6713,6718,6723,6767,6772,6777,6782,6800,6805,6810,6815,6882,6887,6892,6897,6915,6920,6925,6930,6935,6940,6945,6950,6955,6961,6966,6984,6989,7133,7151,7372,7377,7382,7513,7518,7536,7541,7589,7594,7716,7721,7726,8097,8102,8107,8112,8117,8122,8544,8549,8554,8559,8577,8582,8674,8679,8684,8871,8876,8881,8886,8891,8909,8914,8919,8924,8929,8934,8939,8944,9113,9118,9123,9269,9274,9414,9419,9424,9429,9434,9439,9471,9476,9522,9527,9532,9712,9717,9722,9727,9732,9737,9742,10238,10243,10248,10278,10283,10288,10293,10397,10402,10407,10696,10701,10706,10849,10854,10859,10864,10869,10874,10879,11031,11036,11041,11046,11052,11120,11217],{"type":395,"tag":396,"props":397,"children":399},"element","h2",{"id":398},"语法",[400],{"type":401,"value":398},"text",{"type":395,"tag":403,"props":404,"children":406},"h3",{"id":405},"语法综述",[407],{"type":401,"value":405},{"type":395,"tag":409,"props":410,"children":411},"p",{},[412],{"type":401,"value":413},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":395,"tag":409,"props":415,"children":416},{},[417],{"type":401,"value":418},"可以使用 --check 指令检测语法错误：",{"type":395,"tag":420,"props":421,"children":425},"pre",{"className":422,"code":423,"language":424,"meta":389,"style":389},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[426],{"type":395,"tag":427,"props":428,"children":429},"code",{"__ignoreMap":389},[430],{"type":395,"tag":431,"props":432,"children":435},"span",{"class":433,"line":434},"line",1,[436,442,448,454,459,465,471],{"type":395,"tag":431,"props":437,"children":439},{"style":438},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[440],{"type":401,"value":441},"echo",{"type":395,"tag":431,"props":443,"children":445},{"style":444},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[446],{"type":401,"value":447}," '",{"type":395,"tag":431,"props":449,"children":451},{"style":450},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[452],{"type":401,"value":453},"\"hello world\"",{"type":395,"tag":431,"props":455,"children":456},{"style":444},[457],{"type":401,"value":458},"'",{"type":395,"tag":431,"props":460,"children":462},{"style":461},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[463],{"type":401,"value":464}," |",{"type":395,"tag":431,"props":466,"children":468},{"style":467},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[469],{"type":401,"value":470}," node",{"type":395,"tag":431,"props":472,"children":474},{"style":473},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[475],{"type":401,"value":476}," -c\n",{"type":395,"tag":403,"props":478,"children":480},{"id":479},"声明语法",[481],{"type":401,"value":479},{"type":395,"tag":409,"props":483,"children":484},{},[485,487,501],{"type":401,"value":486},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":395,"tag":488,"props":489,"children":490},"sup",{},[491],{"type":395,"tag":492,"props":493,"children":498},"a",{"href":494,"ariaDescribedBy":495,"dataFootnoteRef":389,"id":497},"#user-content-fn-first-class",[496],"footnote-label","user-content-fnref-first-class",[499],{"type":401,"value":500},"1",{"type":401,"value":502},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":395,"tag":409,"props":504,"children":505},{},[506],{"type":401,"value":507},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":395,"tag":509,"props":510,"children":511},"ul",{},[512,531],{"type":395,"tag":513,"props":514,"children":515},"li",{},[516,518,529],{"type":401,"value":517},"基本数据类型：undefined、string、number、object",{"type":395,"tag":488,"props":519,"children":520},{},[521],{"type":395,"tag":492,"props":522,"children":526},{"href":523,"ariaDescribedBy":524,"dataFootnoteRef":389,"id":525},"#user-content-fn-oo",[496],"user-content-fnref-oo",[527],{"type":401,"value":528},"2",{"type":401,"value":530},"、function、boolean、symbol、bigint",{"type":395,"tag":513,"props":532,"children":533},{},[534,536],{"type":401,"value":535},"值类型和引用类型",{"type":395,"tag":488,"props":537,"children":538},{},[539],{"type":395,"tag":492,"props":540,"children":544},{"href":541,"ariaDescribedBy":542,"dataFootnoteRef":389,"id":543},"#user-content-fn-string",[496],"user-content-fnref-string",[545],{"type":401,"value":546},"3",{"type":395,"tag":409,"props":548,"children":549},{},[550],{"type":401,"value":551},"如果算上规范，可以再增加两种类型系统：",{"type":395,"tag":509,"props":553,"children":554},{},[555,560],{"type":395,"tag":513,"props":556,"children":557},{},[558],{"type":401,"value":559},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":395,"tag":513,"props":561,"children":562},{},[563],{"type":401,"value":564},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":395,"tag":409,"props":566,"children":567},{},[568],{"type":401,"value":569},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":395,"tag":409,"props":571,"children":572},{},[573],{"type":401,"value":574},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":395,"tag":409,"props":576,"children":577},{},[578],{"type":401,"value":579},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":395,"tag":409,"props":581,"children":582},{},[583],{"type":401,"value":584},"相关字符串字面量的一些冷知识：",{"type":395,"tag":509,"props":586,"children":587},{},[588,593,598],{"type":395,"tag":513,"props":589,"children":590},{},[591],{"type":401,"value":592},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":395,"tag":513,"props":594,"children":595},{},[596],{"type":401,"value":597},"空字符串也能作为对象的键。",{"type":395,"tag":513,"props":599,"children":600},{},[601],{"type":401,"value":602},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":395,"tag":403,"props":604,"children":606},{"id":605},"表达式运算",[607],{"type":401,"value":605},{"type":395,"tag":409,"props":609,"children":610},{},[611],{"type":401,"value":612},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":395,"tag":409,"props":614,"children":615},{},[616],{"type":401,"value":617},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":395,"tag":509,"props":619,"children":620},{},[621,626],{"type":395,"tag":513,"props":622,"children":623},{},[624],{"type":401,"value":625},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":395,"tag":513,"props":627,"children":628},{},[629],{"type":401,"value":630},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":395,"tag":409,"props":632,"children":633},{},[634],{"type":401,"value":635},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":395,"tag":409,"props":637,"children":638},{},[639],{"type":401,"value":640},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":395,"tag":409,"props":642,"children":643},{},[644],{"type":401,"value":645},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":395,"tag":409,"props":647,"children":648},{},[649],{"type":401,"value":650},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":395,"tag":420,"props":652,"children":656},{"className":653,"code":654,"language":655,"meta":389,"style":389},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[657],{"type":395,"tag":427,"props":658,"children":659},{"__ignoreMap":389},[660,722],{"type":395,"tag":431,"props":661,"children":662},{"class":433,"line":434},[663,669,675,681,686,691,697,702,707,711,716],{"type":395,"tag":431,"props":664,"children":666},{"style":665},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[667],{"type":401,"value":668},"Object",{"type":395,"tag":431,"props":670,"children":672},{"style":671},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[673],{"type":401,"value":674},".",{"type":395,"tag":431,"props":676,"children":678},{"style":677},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[679],{"type":401,"value":680},"is",{"type":395,"tag":431,"props":682,"children":683},{"style":665},[684],{"type":401,"value":685},"(",{"type":395,"tag":431,"props":687,"children":688},{"style":461},[689],{"type":401,"value":690},"+",{"type":395,"tag":431,"props":692,"children":694},{"style":693},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[695],{"type":401,"value":696},"0",{"type":395,"tag":431,"props":698,"children":699},{"style":671},[700],{"type":401,"value":701},",",{"type":395,"tag":431,"props":703,"children":704},{"style":461},[705],{"type":401,"value":706}," -",{"type":395,"tag":431,"props":708,"children":709},{"style":693},[710],{"type":401,"value":696},{"type":395,"tag":431,"props":712,"children":713},{"style":665},[714],{"type":401,"value":715},") ",{"type":395,"tag":431,"props":717,"children":719},{"style":718},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[720],{"type":401,"value":721},"// false\n",{"type":395,"tag":431,"props":723,"children":725},{"class":433,"line":724},2,[726,730,734,738,742,748,752,757,761],{"type":395,"tag":431,"props":727,"children":728},{"style":665},[729],{"type":401,"value":668},{"type":395,"tag":431,"props":731,"children":732},{"style":671},[733],{"type":401,"value":674},{"type":395,"tag":431,"props":735,"children":736},{"style":677},[737],{"type":401,"value":680},{"type":395,"tag":431,"props":739,"children":740},{"style":665},[741],{"type":401,"value":685},{"type":395,"tag":431,"props":743,"children":745},{"style":744},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[746],{"type":401,"value":747},"NaN",{"type":395,"tag":431,"props":749,"children":750},{"style":671},[751],{"type":401,"value":701},{"type":395,"tag":431,"props":753,"children":754},{"style":744},[755],{"type":401,"value":756}," NaN",{"type":395,"tag":431,"props":758,"children":759},{"style":665},[760],{"type":401,"value":715},{"type":395,"tag":431,"props":762,"children":763},{"style":718},[764],{"type":401,"value":765},"// true\n",{"type":395,"tag":409,"props":767,"children":768},{},[769],{"type":401,"value":770},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":395,"tag":409,"props":772,"children":773},{},[774],{"type":401,"value":775},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":395,"tag":420,"props":777,"children":779},{"className":653,"code":778,"language":655,"meta":389,"style":389},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[780],{"type":395,"tag":427,"props":781,"children":782},{"__ignoreMap":389},[783,808],{"type":395,"tag":431,"props":784,"children":785},{"class":433,"line":434},[786,791,795,799,804],{"type":395,"tag":431,"props":787,"children":788},{"style":677},[789],{"type":401,"value":790},"Boolean",{"type":395,"tag":431,"props":792,"children":793},{"style":665},[794],{"type":401,"value":685},{"type":395,"tag":431,"props":796,"children":797},{"style":677},[798],{"type":401,"value":343},{"type":395,"tag":431,"props":800,"children":801},{"style":665},[802],{"type":401,"value":803},"()) ",{"type":395,"tag":431,"props":805,"children":806},{"style":718},[807],{"type":401,"value":765},{"type":395,"tag":431,"props":809,"children":810},{"class":433,"line":724},[811,815,820,825,831],{"type":395,"tag":431,"props":812,"children":813},{"style":677},[814],{"type":401,"value":343},{"type":395,"tag":431,"props":816,"children":817},{"style":665},[818],{"type":401,"value":819},"() ",{"type":395,"tag":431,"props":821,"children":822},{"style":461},[823],{"type":401,"value":824},"==",{"type":395,"tag":431,"props":826,"children":828},{"style":827},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[829],{"type":401,"value":830}," true",{"type":395,"tag":431,"props":832,"children":833},{"style":718},[834],{"type":401,"value":835}," // false\n",{"type":395,"tag":409,"props":837,"children":838},{},[839],{"type":401,"value":840},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":395,"tag":420,"props":842,"children":844},{"className":422,"code":843,"language":424,"meta":389,"style":389},"echo \"1 = 1\" | node -c\n",[845],{"type":395,"tag":427,"props":846,"children":847},{"__ignoreMap":389},[848],{"type":395,"tag":431,"props":849,"children":850},{"class":433,"line":434},[851,855,860,865,870,874,878],{"type":395,"tag":431,"props":852,"children":853},{"style":438},[854],{"type":401,"value":441},{"type":395,"tag":431,"props":856,"children":857},{"style":444},[858],{"type":401,"value":859}," \"",{"type":395,"tag":431,"props":861,"children":862},{"style":450},[863],{"type":401,"value":864},"1 = 1",{"type":395,"tag":431,"props":866,"children":867},{"style":444},[868],{"type":401,"value":869},"\"",{"type":395,"tag":431,"props":871,"children":872},{"style":461},[873],{"type":401,"value":464},{"type":395,"tag":431,"props":875,"children":876},{"style":467},[877],{"type":401,"value":470},{"type":395,"tag":431,"props":879,"children":880},{"style":473},[881],{"type":401,"value":476},{"type":395,"tag":409,"props":883,"children":884},{},[885],{"type":401,"value":886},"函数调用也有“隐式调用”这一概念：",{"type":395,"tag":509,"props":888,"children":889},{},[890,895,900,905,910,915],{"type":395,"tag":513,"props":891,"children":892},{},[893],{"type":401,"value":894},"使用 new 运算符",{"type":395,"tag":513,"props":896,"children":897},{},[898],{"type":401,"value":899},"模板处理函数 + 模板字符串调用",{"type":395,"tag":513,"props":901,"children":902},{},[903],{"type":401,"value":904},"函数作为属性存取器且发生了属性存取操作时",{"type":395,"tag":513,"props":906,"children":907},{},[908],{"type":401,"value":909},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":395,"tag":513,"props":911,"children":912},{},[913],{"type":401,"value":914},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":395,"tag":513,"props":916,"children":917},{},[918],{"type":401,"value":919},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":395,"tag":409,"props":921,"children":922},{},[923],{"type":401,"value":924},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":395,"tag":409,"props":926,"children":927},{},[928],{"type":401,"value":929},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":395,"tag":420,"props":931,"children":933},{"className":653,"code":932,"language":655,"meta":389,"style":389},"typeof x // undefined\n",[934],{"type":395,"tag":427,"props":935,"children":936},{"__ignoreMap":389},[937],{"type":395,"tag":431,"props":938,"children":939},{"class":433,"line":434},[940,945,950],{"type":395,"tag":431,"props":941,"children":942},{"style":461},[943],{"type":401,"value":944},"typeof",{"type":395,"tag":431,"props":946,"children":947},{"style":665},[948],{"type":401,"value":949}," x ",{"type":395,"tag":431,"props":951,"children":952},{"style":718},[953],{"type":401,"value":954},"// undefined\n",{"type":395,"tag":409,"props":956,"children":957},{},[958],{"type":401,"value":959},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":395,"tag":420,"props":961,"children":963},{"className":653,"code":962,"language":655,"meta":389,"style":389},"typeof x // ReferenceError\nlet x\n",[964],{"type":395,"tag":427,"props":965,"children":966},{"__ignoreMap":389},[967,983],{"type":395,"tag":431,"props":968,"children":969},{"class":433,"line":434},[970,974,978],{"type":395,"tag":431,"props":971,"children":972},{"style":461},[973],{"type":401,"value":944},{"type":395,"tag":431,"props":975,"children":976},{"style":665},[977],{"type":401,"value":949},{"type":395,"tag":431,"props":979,"children":980},{"style":718},[981],{"type":401,"value":982},"// ReferenceError\n",{"type":395,"tag":431,"props":984,"children":985},{"class":433,"line":724},[986,992],{"type":395,"tag":431,"props":987,"children":989},{"style":988},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[990],{"type":401,"value":991},"let",{"type":395,"tag":431,"props":993,"children":994},{"style":665},[995],{"type":401,"value":996}," x\n",{"type":395,"tag":409,"props":998,"children":999},{},[1000],{"type":401,"value":1001},"完整的运算符优先级列表如下：",{"type":395,"tag":1003,"props":1004,"children":1005},"table",{},[1006,1025],{"type":395,"tag":1007,"props":1008,"children":1009},"thead",{},[1010],{"type":395,"tag":1011,"props":1012,"children":1013},"tr",{},[1014,1020],{"type":395,"tag":1015,"props":1016,"children":1017},"th",{},[1018],{"type":401,"value":1019},"运算符",{"type":395,"tag":1015,"props":1021,"children":1022},{},[1023],{"type":401,"value":1024},"描述",{"type":395,"tag":1026,"props":1027,"children":1028},"tbody",{},[1029,1043,1061,1074,1087,1100,1113,1126,1139,1152,1165,1178,1191,1204,1217,1230,1243,1256,1269,1282],{"type":395,"tag":1011,"props":1030,"children":1031},{},[1032,1038],{"type":395,"tag":1033,"props":1034,"children":1035},"td",{},[1036],{"type":401,"value":1037},"()",{"type":395,"tag":1033,"props":1039,"children":1040},{},[1041],{"type":401,"value":1042},"成组运算",{"type":395,"tag":1011,"props":1044,"children":1045},{},[1046,1056],{"type":395,"tag":1033,"props":1047,"children":1048},{},[1049,1051,1054],{"type":401,"value":1050},".、",{"type":395,"tag":431,"props":1052,"children":1053},{},[],{"type":401,"value":1055},"、new ()",{"type":395,"tag":1033,"props":1057,"children":1058},{},[1059],{"type":401,"value":1060},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":395,"tag":1011,"props":1062,"children":1063},{},[1064,1069],{"type":395,"tag":1033,"props":1065,"children":1066},{},[1067],{"type":401,"value":1068},"()、new",{"type":395,"tag":1033,"props":1070,"children":1071},{},[1072],{"type":401,"value":1073},"函数调用、new 运算符",{"type":395,"tag":1011,"props":1075,"children":1076},{},[1077,1082],{"type":395,"tag":1033,"props":1078,"children":1079},{},[1080],{"type":401,"value":1081},"++、--",{"type":395,"tag":1033,"props":1083,"children":1084},{},[1085],{"type":401,"value":1086},"后置递增、后置递减",{"type":395,"tag":1011,"props":1088,"children":1089},{},[1090,1095],{"type":395,"tag":1033,"props":1091,"children":1092},{},[1093],{"type":401,"value":1094},"+、-、++、--、~、!、delete、typeof、void",{"type":395,"tag":1033,"props":1096,"children":1097},{},[1098],{"type":401,"value":1099},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":395,"tag":1011,"props":1101,"children":1102},{},[1103,1108],{"type":395,"tag":1033,"props":1104,"children":1105},{},[1106],{"type":401,"value":1107},"*、/、%",{"type":395,"tag":1033,"props":1109,"children":1110},{},[1111],{"type":401,"value":1112},"乘法、除法、取模",{"type":395,"tag":1011,"props":1114,"children":1115},{},[1116,1121],{"type":395,"tag":1033,"props":1117,"children":1118},{},[1119],{"type":401,"value":1120},"+、-、+",{"type":395,"tag":1033,"props":1122,"children":1123},{},[1124],{"type":401,"value":1125},"加法、减法、字符串连接",{"type":395,"tag":1011,"props":1127,"children":1128},{},[1129,1134],{"type":395,"tag":1033,"props":1130,"children":1131},{},[1132],{"type":401,"value":1133},"\u003C\u003C、>>、>>>",{"type":395,"tag":1033,"props":1135,"children":1136},{},[1137],{"type":401,"value":1138},"移位运算符",{"type":395,"tag":1011,"props":1140,"children":1141},{},[1142,1147],{"type":395,"tag":1033,"props":1143,"children":1144},{},[1145],{"type":401,"value":1146},"\u003C、\u003C=、>=、>、in、instanceof",{"type":395,"tag":1033,"props":1148,"children":1149},{},[1150],{"type":401,"value":1151},"关系运算符、in、instanceof",{"type":395,"tag":1011,"props":1153,"children":1154},{},[1155,1160],{"type":395,"tag":1033,"props":1156,"children":1157},{},[1158],{"type":401,"value":1159},"==、!=、===、!==",{"type":395,"tag":1033,"props":1161,"children":1162},{},[1163],{"type":401,"value":1164},"等值检测",{"type":395,"tag":1011,"props":1166,"children":1167},{},[1168,1173],{"type":395,"tag":1033,"props":1169,"children":1170},{},[1171],{"type":401,"value":1172},"&",{"type":395,"tag":1033,"props":1174,"children":1175},{},[1176],{"type":401,"value":1177},"按位与",{"type":395,"tag":1011,"props":1179,"children":1180},{},[1181,1186],{"type":395,"tag":1033,"props":1182,"children":1183},{},[1184],{"type":401,"value":1185},"^",{"type":395,"tag":1033,"props":1187,"children":1188},{},[1189],{"type":401,"value":1190},"按位异或",{"type":395,"tag":1011,"props":1192,"children":1193},{},[1194,1199],{"type":395,"tag":1033,"props":1195,"children":1196},{},[1197],{"type":401,"value":1198},"|",{"type":395,"tag":1033,"props":1200,"children":1201},{},[1202],{"type":401,"value":1203},"按位或",{"type":395,"tag":1011,"props":1205,"children":1206},{},[1207,1212],{"type":395,"tag":1033,"props":1208,"children":1209},{},[1210],{"type":401,"value":1211},"&&",{"type":395,"tag":1033,"props":1213,"children":1214},{},[1215],{"type":401,"value":1216},"逻辑与",{"type":395,"tag":1011,"props":1218,"children":1219},{},[1220,1225],{"type":395,"tag":1033,"props":1221,"children":1222},{},[1223],{"type":401,"value":1224},"||",{"type":395,"tag":1033,"props":1226,"children":1227},{},[1228],{"type":401,"value":1229},"逻辑或",{"type":395,"tag":1011,"props":1231,"children":1232},{},[1233,1238],{"type":395,"tag":1033,"props":1234,"children":1235},{},[1236],{"type":401,"value":1237},"?:",{"type":395,"tag":1033,"props":1239,"children":1240},{},[1241],{"type":401,"value":1242},"三木运算",{"type":395,"tag":1011,"props":1244,"children":1245},{},[1246,1251],{"type":395,"tag":1033,"props":1247,"children":1248},{},[1249],{"type":401,"value":1250},"=、oP=",{"type":395,"tag":1033,"props":1252,"children":1253},{},[1254],{"type":401,"value":1255},"赋值、运算赋值",{"type":395,"tag":1011,"props":1257,"children":1258},{},[1259,1264],{"type":395,"tag":1033,"props":1260,"children":1261},{},[1262],{"type":401,"value":1263},"yield、yield*",{"type":395,"tag":1033,"props":1265,"children":1266},{},[1267],{"type":401,"value":1268},"yield 表达式",{"type":395,"tag":1011,"props":1270,"children":1271},{},[1272,1277],{"type":395,"tag":1033,"props":1273,"children":1274},{},[1275],{"type":401,"value":1276},"...",{"type":395,"tag":1033,"props":1278,"children":1279},{},[1280],{"type":401,"value":1281},"展开运算符",{"type":395,"tag":1011,"props":1283,"children":1284},{},[1285,1290],{"type":395,"tag":1033,"props":1286,"children":1287},{},[1288],{"type":401,"value":1289},"，",{"type":395,"tag":1033,"props":1291,"children":1292},{},[1293],{"type":401,"value":1294},"逗号运算符、多重求值",{"type":395,"tag":409,"props":1296,"children":1297},{},[1298],{"type":401,"value":1299},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":395,"tag":420,"props":1301,"children":1303},{"className":653,"code":1302,"language":655,"meta":389,"style":389},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1304],{"type":395,"tag":427,"props":1305,"children":1306},{"__ignoreMap":389},[1307,1330,1366,1407,1416,1451,1488,1496,1523],{"type":395,"tag":431,"props":1308,"children":1309},{"class":433,"line":434},[1310,1315,1320,1325],{"type":395,"tag":431,"props":1311,"children":1312},{"style":988},[1313],{"type":401,"value":1314},"function",{"type":395,"tag":431,"props":1316,"children":1317},{"style":677},[1318],{"type":401,"value":1319}," A",{"type":395,"tag":431,"props":1321,"children":1322},{"style":671},[1323],{"type":401,"value":1324}," ()",{"type":395,"tag":431,"props":1326,"children":1327},{"style":671},[1328],{"type":401,"value":1329}," {\n",{"type":395,"tag":431,"props":1331,"children":1332},{"class":433,"line":724},[1333,1339,1343,1348,1353,1357,1361],{"type":395,"tag":431,"props":1334,"children":1336},{"style":1335},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1337],{"type":401,"value":1338},"  this",{"type":395,"tag":431,"props":1340,"children":1341},{"style":671},[1342],{"type":401,"value":674},{"type":395,"tag":431,"props":1344,"children":1345},{"style":665},[1346],{"type":401,"value":1347},"b",{"type":395,"tag":431,"props":1349,"children":1350},{"style":461},[1351],{"type":401,"value":1352}," =",{"type":395,"tag":431,"props":1354,"children":1355},{"style":444},[1356],{"type":401,"value":447},{"type":395,"tag":431,"props":1358,"children":1359},{"style":450},[1360],{"type":401,"value":1347},{"type":395,"tag":431,"props":1362,"children":1363},{"style":444},[1364],{"type":401,"value":1365},"'\n",{"type":395,"tag":431,"props":1367,"children":1369},{"class":433,"line":1368},3,[1370,1375,1379,1384,1389,1393,1398,1402],{"type":395,"tag":431,"props":1371,"children":1372},{"style":665},[1373],{"type":401,"value":1374},"  console",{"type":395,"tag":431,"props":1376,"children":1377},{"style":671},[1378],{"type":401,"value":674},{"type":395,"tag":431,"props":1380,"children":1381},{"style":677},[1382],{"type":401,"value":1383},"log",{"type":395,"tag":431,"props":1385,"children":1387},{"style":1386},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1388],{"type":401,"value":685},{"type":395,"tag":431,"props":1390,"children":1391},{"style":444},[1392],{"type":401,"value":458},{"type":395,"tag":431,"props":1394,"children":1395},{"style":450},[1396],{"type":401,"value":1397},"A().b",{"type":395,"tag":431,"props":1399,"children":1400},{"style":444},[1401],{"type":401,"value":458},{"type":395,"tag":431,"props":1403,"children":1404},{"style":1386},[1405],{"type":401,"value":1406},")\n",{"type":395,"tag":431,"props":1408,"children":1410},{"class":433,"line":1409},4,[1411],{"type":395,"tag":431,"props":1412,"children":1413},{"style":671},[1414],{"type":401,"value":1415},"}\n",{"type":395,"tag":431,"props":1417,"children":1419},{"class":433,"line":1418},5,[1420,1426,1430,1434,1438,1443,1447],{"type":395,"tag":431,"props":1421,"children":1423},{"style":1422},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1424],{"type":401,"value":1425},"A",{"type":395,"tag":431,"props":1427,"children":1428},{"style":671},[1429],{"type":401,"value":674},{"type":395,"tag":431,"props":1431,"children":1432},{"style":677},[1433],{"type":401,"value":1347},{"type":395,"tag":431,"props":1435,"children":1436},{"style":461},[1437],{"type":401,"value":1352},{"type":395,"tag":431,"props":1439,"children":1440},{"style":988},[1441],{"type":401,"value":1442}," function",{"type":395,"tag":431,"props":1444,"children":1445},{"style":671},[1446],{"type":401,"value":1324},{"type":395,"tag":431,"props":1448,"children":1449},{"style":671},[1450],{"type":401,"value":1329},{"type":395,"tag":431,"props":1452,"children":1454},{"class":433,"line":1453},6,[1455,1459,1463,1467,1471,1475,1480,1484],{"type":395,"tag":431,"props":1456,"children":1457},{"style":665},[1458],{"type":401,"value":1374},{"type":395,"tag":431,"props":1460,"children":1461},{"style":671},[1462],{"type":401,"value":674},{"type":395,"tag":431,"props":1464,"children":1465},{"style":677},[1466],{"type":401,"value":1383},{"type":395,"tag":431,"props":1468,"children":1469},{"style":1386},[1470],{"type":401,"value":685},{"type":395,"tag":431,"props":1472,"children":1473},{"style":444},[1474],{"type":401,"value":458},{"type":395,"tag":431,"props":1476,"children":1477},{"style":450},[1478],{"type":401,"value":1479},"A.b",{"type":395,"tag":431,"props":1481,"children":1482},{"style":444},[1483],{"type":401,"value":458},{"type":395,"tag":431,"props":1485,"children":1486},{"style":1386},[1487],{"type":401,"value":1406},{"type":395,"tag":431,"props":1489,"children":1491},{"class":433,"line":1490},7,[1492],{"type":395,"tag":431,"props":1493,"children":1494},{"style":671},[1495],{"type":401,"value":1415},{"type":395,"tag":431,"props":1497,"children":1499},{"class":433,"line":1498},8,[1500,1505,1509,1513,1518],{"type":395,"tag":431,"props":1501,"children":1502},{"style":461},[1503],{"type":401,"value":1504},"new",{"type":395,"tag":431,"props":1506,"children":1507},{"style":1422},[1508],{"type":401,"value":1319},{"type":395,"tag":431,"props":1510,"children":1511},{"style":671},[1512],{"type":401,"value":674},{"type":395,"tag":431,"props":1514,"children":1515},{"style":665},[1516],{"type":401,"value":1517},"b ",{"type":395,"tag":431,"props":1519,"children":1520},{"style":718},[1521],{"type":401,"value":1522},"// A.b\n",{"type":395,"tag":431,"props":1524,"children":1526},{"class":433,"line":1525},9,[1527,1531,1535,1539,1543,1547],{"type":395,"tag":431,"props":1528,"children":1529},{"style":461},[1530],{"type":401,"value":1504},{"type":395,"tag":431,"props":1532,"children":1533},{"style":677},[1534],{"type":401,"value":1319},{"type":395,"tag":431,"props":1536,"children":1537},{"style":665},[1538],{"type":401,"value":1037},{"type":395,"tag":431,"props":1540,"children":1541},{"style":671},[1542],{"type":401,"value":674},{"type":395,"tag":431,"props":1544,"children":1545},{"style":665},[1546],{"type":401,"value":1517},{"type":395,"tag":431,"props":1548,"children":1549},{"style":718},[1550],{"type":401,"value":1551},"// A().b\n",{"type":395,"tag":403,"props":1553,"children":1555},{"id":1554},"语句",[1556],{"type":401,"value":1554},{"type":395,"tag":409,"props":1558,"children":1559},{},[1560],{"type":401,"value":1561},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":395,"tag":409,"props":1563,"children":1564},{},[1565],{"type":401,"value":1566},"需要注意的点：",{"type":395,"tag":509,"props":1568,"children":1569},{},[1570,1575,1580],{"type":395,"tag":513,"props":1571,"children":1572},{},[1573],{"type":401,"value":1574},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":395,"tag":513,"props":1576,"children":1577},{},[1578],{"type":401,"value":1579},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":395,"tag":513,"props":1581,"children":1582},{},[1583],{"type":401,"value":1584},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":395,"tag":409,"props":1586,"children":1587},{},[1588],{"type":401,"value":1589},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":395,"tag":420,"props":1591,"children":1593},{"className":653,"code":1592,"language":655,"meta":389,"style":389},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1594],{"type":395,"tag":427,"props":1595,"children":1596},{"__ignoreMap":389},[1597,1628,1655],{"type":395,"tag":431,"props":1598,"children":1599},{"class":433,"line":434},[1600,1604,1609,1613,1619,1624],{"type":395,"tag":431,"props":1601,"children":1602},{"style":988},[1603],{"type":401,"value":1314},{"type":395,"tag":431,"props":1605,"children":1606},{"style":677},[1607],{"type":401,"value":1608}," log",{"type":395,"tag":431,"props":1610,"children":1611},{"style":671},[1612],{"type":401,"value":685},{"type":395,"tag":431,"props":1614,"children":1616},{"style":1615},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1617],{"type":401,"value":1618},"arg",{"type":395,"tag":431,"props":1620,"children":1621},{"style":671},[1622],{"type":401,"value":1623},")",{"type":395,"tag":431,"props":1625,"children":1626},{"style":671},[1627],{"type":401,"value":1329},{"type":395,"tag":431,"props":1629,"children":1630},{"class":433,"line":724},[1631,1635,1639,1643,1647,1651],{"type":395,"tag":431,"props":1632,"children":1633},{"style":665},[1634],{"type":401,"value":1374},{"type":395,"tag":431,"props":1636,"children":1637},{"style":671},[1638],{"type":401,"value":674},{"type":395,"tag":431,"props":1640,"children":1641},{"style":677},[1642],{"type":401,"value":1383},{"type":395,"tag":431,"props":1644,"children":1645},{"style":1386},[1646],{"type":401,"value":685},{"type":395,"tag":431,"props":1648,"children":1649},{"style":665},[1650],{"type":401,"value":1618},{"type":395,"tag":431,"props":1652,"children":1653},{"style":1386},[1654],{"type":401,"value":1406},{"type":395,"tag":431,"props":1656,"children":1657},{"class":433,"line":1368},[1658,1663,1667,1671],{"type":395,"tag":431,"props":1659,"children":1660},{"style":671},[1661],{"type":401,"value":1662},"}",{"type":395,"tag":431,"props":1664,"children":1665},{"style":665},[1666],{"type":401,"value":685},{"type":395,"tag":431,"props":1668,"children":1669},{"style":693},[1670],{"type":401,"value":528},{"type":395,"tag":431,"props":1672,"children":1673},{"style":665},[1674],{"type":401,"value":1406},{"type":395,"tag":409,"props":1676,"children":1677},{},[1678],{"type":401,"value":1679},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":395,"tag":420,"props":1681,"children":1683},{"className":653,"code":1682,"language":655,"meta":389,"style":389},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1684],{"type":395,"tag":427,"props":1685,"children":1686},{"__ignoreMap":389},[1687,1739,1777,1804],{"type":395,"tag":431,"props":1688,"children":1689},{"class":433,"line":434},[1690,1696,1701,1706,1710,1715,1719,1724,1729,1734],{"type":395,"tag":431,"props":1691,"children":1693},{"style":1692},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1694],{"type":401,"value":1695},"try",{"type":395,"tag":431,"props":1697,"children":1698},{"style":671},[1699],{"type":401,"value":1700}," {",{"type":395,"tag":431,"props":1702,"children":1703},{"style":1692},[1704],{"type":401,"value":1705}," throw",{"type":395,"tag":431,"props":1707,"children":1708},{"style":444},[1709],{"type":401,"value":447},{"type":395,"tag":431,"props":1711,"children":1712},{"style":450},[1713],{"type":401,"value":1714},"test",{"type":395,"tag":431,"props":1716,"children":1717},{"style":444},[1718],{"type":401,"value":458},{"type":395,"tag":431,"props":1720,"children":1721},{"style":671},[1722],{"type":401,"value":1723}," }",{"type":395,"tag":431,"props":1725,"children":1726},{"style":1692},[1727],{"type":401,"value":1728}," catch",{"type":395,"tag":431,"props":1730,"children":1731},{"style":665},[1732],{"type":401,"value":1733}," (e) ",{"type":395,"tag":431,"props":1735,"children":1736},{"style":671},[1737],{"type":401,"value":1738},"{\n",{"type":395,"tag":431,"props":1740,"children":1741},{"class":433,"line":724},[1742,1746,1750,1754,1758,1763,1767,1772],{"type":395,"tag":431,"props":1743,"children":1744},{"style":665},[1745],{"type":401,"value":1374},{"type":395,"tag":431,"props":1747,"children":1748},{"style":671},[1749],{"type":401,"value":674},{"type":395,"tag":431,"props":1751,"children":1752},{"style":677},[1753],{"type":401,"value":1383},{"type":395,"tag":431,"props":1755,"children":1756},{"style":1386},[1757],{"type":401,"value":685},{"type":395,"tag":431,"props":1759,"children":1760},{"style":665},[1761],{"type":401,"value":1762},"e",{"type":395,"tag":431,"props":1764,"children":1765},{"style":1386},[1766],{"type":401,"value":1623},{"type":395,"tag":431,"props":1768,"children":1769},{"style":671},[1770],{"type":401,"value":1771},";",{"type":395,"tag":431,"props":1773,"children":1774},{"style":718},[1775],{"type":401,"value":1776}," // test\n",{"type":395,"tag":431,"props":1778,"children":1779},{"class":433,"line":1368},[1780,1785,1790,1794,1799],{"type":395,"tag":431,"props":1781,"children":1782},{"style":988},[1783],{"type":401,"value":1784},"  var",{"type":395,"tag":431,"props":1786,"children":1787},{"style":665},[1788],{"type":401,"value":1789}," e",{"type":395,"tag":431,"props":1791,"children":1792},{"style":461},[1793],{"type":401,"value":1352},{"type":395,"tag":431,"props":1795,"children":1796},{"style":693},[1797],{"type":401,"value":1798}," 1",{"type":395,"tag":431,"props":1800,"children":1801},{"style":671},[1802],{"type":401,"value":1803},";\n",{"type":395,"tag":431,"props":1805,"children":1806},{"class":433,"line":1409},[1807],{"type":395,"tag":431,"props":1808,"children":1809},{"style":671},[1810],{"type":401,"value":1415},{"type":395,"tag":409,"props":1812,"children":1813},{},[1814],{"type":401,"value":1815},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":395,"tag":409,"props":1817,"children":1818},{},[1819],{"type":401,"value":1820},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":395,"tag":420,"props":1822,"children":1824},{"className":653,"code":1823,"language":655,"meta":389,"style":389},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1825],{"type":395,"tag":427,"props":1826,"children":1827},{"__ignoreMap":389},[1828,1836,1909,1975,2019,2061,2069,2076,2084,2099,2159,2220,2261,2302,2311,2319],{"type":395,"tag":431,"props":1829,"children":1830},{"class":433,"line":434},[1831],{"type":395,"tag":431,"props":1832,"children":1833},{"style":718},[1834],{"type":401,"value":1835},"// it works !\n",{"type":395,"tag":431,"props":1837,"children":1838},{"class":433,"line":724},[1839,1844,1849,1854,1859,1864,1868,1872,1877,1882,1887,1891,1896,1901,1905],{"type":395,"tag":431,"props":1840,"children":1842},{"style":1841},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1843],{"type":401,"value":1714},{"type":395,"tag":431,"props":1845,"children":1846},{"style":671},[1847],{"type":401,"value":1848},":",{"type":395,"tag":431,"props":1850,"children":1851},{"style":1692},[1852],{"type":401,"value":1853}," for",{"type":395,"tag":431,"props":1855,"children":1856},{"style":665},[1857],{"type":401,"value":1858}," (i ",{"type":395,"tag":431,"props":1860,"children":1861},{"style":461},[1862],{"type":401,"value":1863},"=",{"type":395,"tag":431,"props":1865,"children":1866},{"style":693},[1867],{"type":401,"value":1798},{"type":395,"tag":431,"props":1869,"children":1870},{"style":671},[1871],{"type":401,"value":1771},{"type":395,"tag":431,"props":1873,"children":1874},{"style":665},[1875],{"type":401,"value":1876}," i ",{"type":395,"tag":431,"props":1878,"children":1879},{"style":461},[1880],{"type":401,"value":1881},"\u003C",{"type":395,"tag":431,"props":1883,"children":1884},{"style":693},[1885],{"type":401,"value":1886}," 3",{"type":395,"tag":431,"props":1888,"children":1889},{"style":671},[1890],{"type":401,"value":1771},{"type":395,"tag":431,"props":1892,"children":1893},{"style":665},[1894],{"type":401,"value":1895}," i",{"type":395,"tag":431,"props":1897,"children":1898},{"style":461},[1899],{"type":401,"value":1900},"++",{"type":395,"tag":431,"props":1902,"children":1903},{"style":665},[1904],{"type":401,"value":715},{"type":395,"tag":431,"props":1906,"children":1907},{"style":671},[1908],{"type":401,"value":1738},{"type":395,"tag":431,"props":1910,"children":1911},{"class":433,"line":1368},[1912,1917,1922,1927,1931,1936,1940,1945,1950,1955,1959,1963,1967,1971],{"type":395,"tag":431,"props":1913,"children":1914},{"style":1692},[1915],{"type":401,"value":1916},"  for",{"type":395,"tag":431,"props":1918,"children":1919},{"style":1386},[1920],{"type":401,"value":1921}," (",{"type":395,"tag":431,"props":1923,"children":1924},{"style":665},[1925],{"type":401,"value":1926},"j",{"type":395,"tag":431,"props":1928,"children":1929},{"style":461},[1930],{"type":401,"value":1352},{"type":395,"tag":431,"props":1932,"children":1933},{"style":693},[1934],{"type":401,"value":1935}," 5",{"type":395,"tag":431,"props":1937,"children":1938},{"style":671},[1939],{"type":401,"value":1771},{"type":395,"tag":431,"props":1941,"children":1942},{"style":665},[1943],{"type":401,"value":1944}," j",{"type":395,"tag":431,"props":1946,"children":1947},{"style":461},[1948],{"type":401,"value":1949}," \u003C",{"type":395,"tag":431,"props":1951,"children":1952},{"style":693},[1953],{"type":401,"value":1954}," 8",{"type":395,"tag":431,"props":1956,"children":1957},{"style":671},[1958],{"type":401,"value":1771},{"type":395,"tag":431,"props":1960,"children":1961},{"style":665},[1962],{"type":401,"value":1944},{"type":395,"tag":431,"props":1964,"children":1965},{"style":461},[1966],{"type":401,"value":1900},{"type":395,"tag":431,"props":1968,"children":1969},{"style":1386},[1970],{"type":401,"value":715},{"type":395,"tag":431,"props":1972,"children":1973},{"style":671},[1974],{"type":401,"value":1738},{"type":395,"tag":431,"props":1976,"children":1977},{"class":433,"line":1409},[1978,1983,1987,1991,1996,2001,2005,2010,2015],{"type":395,"tag":431,"props":1979,"children":1980},{"style":1692},[1981],{"type":401,"value":1982},"    if",{"type":395,"tag":431,"props":1984,"children":1985},{"style":1386},[1986],{"type":401,"value":1921},{"type":395,"tag":431,"props":1988,"children":1989},{"style":665},[1990],{"type":401,"value":1926},{"type":395,"tag":431,"props":1992,"children":1993},{"style":461},[1994],{"type":401,"value":1995}," ===",{"type":395,"tag":431,"props":1997,"children":1998},{"style":693},[1999],{"type":401,"value":2000}," 6",{"type":395,"tag":431,"props":2002,"children":2003},{"style":1386},[2004],{"type":401,"value":715},{"type":395,"tag":431,"props":2006,"children":2007},{"style":1692},[2008],{"type":401,"value":2009},"continue",{"type":395,"tag":431,"props":2011,"children":2012},{"style":1841},[2013],{"type":401,"value":2014}," test",{"type":395,"tag":431,"props":2016,"children":2017},{"style":671},[2018],{"type":401,"value":1803},{"type":395,"tag":431,"props":2020,"children":2021},{"class":433,"line":1418},[2022,2027,2032,2036,2040,2044,2049,2053,2057],{"type":395,"tag":431,"props":2023,"children":2024},{"style":1692},[2025],{"type":401,"value":2026},"    else",{"type":395,"tag":431,"props":2028,"children":2029},{"style":665},[2030],{"type":401,"value":2031}," console",{"type":395,"tag":431,"props":2033,"children":2034},{"style":671},[2035],{"type":401,"value":674},{"type":395,"tag":431,"props":2037,"children":2038},{"style":677},[2039],{"type":401,"value":1383},{"type":395,"tag":431,"props":2041,"children":2042},{"style":1386},[2043],{"type":401,"value":685},{"type":395,"tag":431,"props":2045,"children":2046},{"style":665},[2047],{"type":401,"value":2048},"i",{"type":395,"tag":431,"props":2050,"children":2051},{"style":671},[2052],{"type":401,"value":701},{"type":395,"tag":431,"props":2054,"children":2055},{"style":665},[2056],{"type":401,"value":1944},{"type":395,"tag":431,"props":2058,"children":2059},{"style":1386},[2060],{"type":401,"value":1406},{"type":395,"tag":431,"props":2062,"children":2063},{"class":433,"line":1453},[2064],{"type":395,"tag":431,"props":2065,"children":2066},{"style":671},[2067],{"type":401,"value":2068},"  }\n",{"type":395,"tag":431,"props":2070,"children":2071},{"class":433,"line":1490},[2072],{"type":395,"tag":431,"props":2073,"children":2074},{"style":671},[2075],{"type":401,"value":1415},{"type":395,"tag":431,"props":2077,"children":2078},{"class":433,"line":1498},[2079],{"type":395,"tag":431,"props":2080,"children":2081},{"style":718},[2082],{"type":401,"value":2083},"// SyntaxError !\n",{"type":395,"tag":431,"props":2085,"children":2086},{"class":433,"line":1525},[2087,2091,2095],{"type":395,"tag":431,"props":2088,"children":2089},{"style":1841},[2090],{"type":401,"value":1714},{"type":395,"tag":431,"props":2092,"children":2093},{"style":671},[2094],{"type":401,"value":1848},{"type":395,"tag":431,"props":2096,"children":2097},{"style":671},[2098],{"type":401,"value":1329},{"type":395,"tag":431,"props":2100,"children":2102},{"class":433,"line":2101},10,[2103,2107,2111,2115,2119,2123,2127,2131,2135,2139,2143,2147,2151,2155],{"type":395,"tag":431,"props":2104,"children":2105},{"style":1692},[2106],{"type":401,"value":1916},{"type":395,"tag":431,"props":2108,"children":2109},{"style":1386},[2110],{"type":401,"value":1921},{"type":395,"tag":431,"props":2112,"children":2113},{"style":665},[2114],{"type":401,"value":2048},{"type":395,"tag":431,"props":2116,"children":2117},{"style":461},[2118],{"type":401,"value":1352},{"type":395,"tag":431,"props":2120,"children":2121},{"style":693},[2122],{"type":401,"value":1798},{"type":395,"tag":431,"props":2124,"children":2125},{"style":671},[2126],{"type":401,"value":1771},{"type":395,"tag":431,"props":2128,"children":2129},{"style":665},[2130],{"type":401,"value":1895},{"type":395,"tag":431,"props":2132,"children":2133},{"style":461},[2134],{"type":401,"value":1949},{"type":395,"tag":431,"props":2136,"children":2137},{"style":693},[2138],{"type":401,"value":1886},{"type":395,"tag":431,"props":2140,"children":2141},{"style":671},[2142],{"type":401,"value":1771},{"type":395,"tag":431,"props":2144,"children":2145},{"style":665},[2146],{"type":401,"value":1895},{"type":395,"tag":431,"props":2148,"children":2149},{"style":461},[2150],{"type":401,"value":1900},{"type":395,"tag":431,"props":2152,"children":2153},{"style":1386},[2154],{"type":401,"value":715},{"type":395,"tag":431,"props":2156,"children":2157},{"style":671},[2158],{"type":401,"value":1738},{"type":395,"tag":431,"props":2160,"children":2162},{"class":433,"line":2161},11,[2163,2168,2172,2176,2180,2184,2188,2192,2196,2200,2204,2208,2212,2216],{"type":395,"tag":431,"props":2164,"children":2165},{"style":1692},[2166],{"type":401,"value":2167},"    for",{"type":395,"tag":431,"props":2169,"children":2170},{"style":1386},[2171],{"type":401,"value":1921},{"type":395,"tag":431,"props":2173,"children":2174},{"style":665},[2175],{"type":401,"value":1926},{"type":395,"tag":431,"props":2177,"children":2178},{"style":461},[2179],{"type":401,"value":1352},{"type":395,"tag":431,"props":2181,"children":2182},{"style":693},[2183],{"type":401,"value":1935},{"type":395,"tag":431,"props":2185,"children":2186},{"style":671},[2187],{"type":401,"value":1771},{"type":395,"tag":431,"props":2189,"children":2190},{"style":665},[2191],{"type":401,"value":1944},{"type":395,"tag":431,"props":2193,"children":2194},{"style":461},[2195],{"type":401,"value":1949},{"type":395,"tag":431,"props":2197,"children":2198},{"style":693},[2199],{"type":401,"value":1954},{"type":395,"tag":431,"props":2201,"children":2202},{"style":671},[2203],{"type":401,"value":1771},{"type":395,"tag":431,"props":2205,"children":2206},{"style":665},[2207],{"type":401,"value":1944},{"type":395,"tag":431,"props":2209,"children":2210},{"style":461},[2211],{"type":401,"value":1900},{"type":395,"tag":431,"props":2213,"children":2214},{"style":1386},[2215],{"type":401,"value":715},{"type":395,"tag":431,"props":2217,"children":2218},{"style":671},[2219],{"type":401,"value":1738},{"type":395,"tag":431,"props":2221,"children":2223},{"class":433,"line":2222},12,[2224,2229,2233,2237,2241,2245,2249,2253,2257],{"type":395,"tag":431,"props":2225,"children":2226},{"style":1692},[2227],{"type":401,"value":2228},"      if",{"type":395,"tag":431,"props":2230,"children":2231},{"style":1386},[2232],{"type":401,"value":1921},{"type":395,"tag":431,"props":2234,"children":2235},{"style":665},[2236],{"type":401,"value":1926},{"type":395,"tag":431,"props":2238,"children":2239},{"style":461},[2240],{"type":401,"value":1995},{"type":395,"tag":431,"props":2242,"children":2243},{"style":693},[2244],{"type":401,"value":2000},{"type":395,"tag":431,"props":2246,"children":2247},{"style":1386},[2248],{"type":401,"value":715},{"type":395,"tag":431,"props":2250,"children":2251},{"style":1692},[2252],{"type":401,"value":2009},{"type":395,"tag":431,"props":2254,"children":2255},{"style":1841},[2256],{"type":401,"value":2014},{"type":395,"tag":431,"props":2258,"children":2259},{"style":671},[2260],{"type":401,"value":1803},{"type":395,"tag":431,"props":2262,"children":2264},{"class":433,"line":2263},13,[2265,2270,2274,2278,2282,2286,2290,2294,2298],{"type":395,"tag":431,"props":2266,"children":2267},{"style":1692},[2268],{"type":401,"value":2269},"      else",{"type":395,"tag":431,"props":2271,"children":2272},{"style":665},[2273],{"type":401,"value":2031},{"type":395,"tag":431,"props":2275,"children":2276},{"style":671},[2277],{"type":401,"value":674},{"type":395,"tag":431,"props":2279,"children":2280},{"style":677},[2281],{"type":401,"value":1383},{"type":395,"tag":431,"props":2283,"children":2284},{"style":1386},[2285],{"type":401,"value":685},{"type":395,"tag":431,"props":2287,"children":2288},{"style":665},[2289],{"type":401,"value":2048},{"type":395,"tag":431,"props":2291,"children":2292},{"style":671},[2293],{"type":401,"value":701},{"type":395,"tag":431,"props":2295,"children":2296},{"style":665},[2297],{"type":401,"value":1944},{"type":395,"tag":431,"props":2299,"children":2300},{"style":1386},[2301],{"type":401,"value":1406},{"type":395,"tag":431,"props":2303,"children":2305},{"class":433,"line":2304},14,[2306],{"type":395,"tag":431,"props":2307,"children":2308},{"style":671},[2309],{"type":401,"value":2310},"    }\n",{"type":395,"tag":431,"props":2312,"children":2314},{"class":433,"line":2313},15,[2315],{"type":395,"tag":431,"props":2316,"children":2317},{"style":671},[2318],{"type":401,"value":2068},{"type":395,"tag":431,"props":2320,"children":2322},{"class":433,"line":2321},16,[2323],{"type":395,"tag":431,"props":2324,"children":2325},{"style":671},[2326],{"type":401,"value":1415},{"type":395,"tag":409,"props":2328,"children":2329},{},[2330],{"type":401,"value":2331},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":395,"tag":409,"props":2333,"children":2334},{},[2335],{"type":401,"value":2336},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":395,"tag":403,"props":2338,"children":2340},{"id":2339},"模块",[2341],{"type":401,"value":2339},{"type":395,"tag":409,"props":2343,"children":2344},{},[2345],{"type":401,"value":2346},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":395,"tag":420,"props":2348,"children":2350},{"className":653,"code":2349,"language":655,"meta":389,"style":389},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2351],{"type":395,"tag":427,"props":2352,"children":2353},{"__ignoreMap":389},[2354,2402],{"type":395,"tag":431,"props":2355,"children":2356},{"class":433,"line":434},[2357,2362,2367,2371,2375,2380,2384,2389,2393,2398],{"type":395,"tag":431,"props":2358,"children":2359},{"style":1692},[2360],{"type":401,"value":2361},"import",{"type":395,"tag":431,"props":2363,"children":2364},{"style":665},[2365],{"type":401,"value":2366}," defaultExport",{"type":395,"tag":431,"props":2368,"children":2369},{"style":671},[2370],{"type":401,"value":701},{"type":395,"tag":431,"props":2372,"children":2373},{"style":671},[2374],{"type":401,"value":1700},{"type":395,"tag":431,"props":2376,"children":2377},{"style":665},[2378],{"type":401,"value":2379}," toolA",{"type":395,"tag":431,"props":2381,"children":2382},{"style":671},[2383],{"type":401,"value":1723},{"type":395,"tag":431,"props":2385,"children":2386},{"style":1692},[2387],{"type":401,"value":2388}," from",{"type":395,"tag":431,"props":2390,"children":2391},{"style":444},[2392],{"type":401,"value":447},{"type":395,"tag":431,"props":2394,"children":2395},{"style":450},[2396],{"type":401,"value":2397},"test.mjs",{"type":395,"tag":431,"props":2399,"children":2400},{"style":444},[2401],{"type":401,"value":1365},{"type":395,"tag":431,"props":2403,"children":2404},{"class":433,"line":724},[2405,2409,2413,2417,2422,2427,2432,2437,2441,2445],{"type":395,"tag":431,"props":2406,"children":2407},{"style":1692},[2408],{"type":401,"value":2361},{"type":395,"tag":431,"props":2410,"children":2411},{"style":665},[2412],{"type":401,"value":2366},{"type":395,"tag":431,"props":2414,"children":2415},{"style":671},[2416],{"type":401,"value":701},{"type":395,"tag":431,"props":2418,"children":2419},{"style":744},[2420],{"type":401,"value":2421}," *",{"type":395,"tag":431,"props":2423,"children":2424},{"style":1692},[2425],{"type":401,"value":2426}," as",{"type":395,"tag":431,"props":2428,"children":2429},{"style":665},[2430],{"type":401,"value":2431}," namespace ",{"type":395,"tag":431,"props":2433,"children":2434},{"style":1692},[2435],{"type":401,"value":2436},"from",{"type":395,"tag":431,"props":2438,"children":2439},{"style":444},[2440],{"type":401,"value":447},{"type":395,"tag":431,"props":2442,"children":2443},{"style":450},[2444],{"type":401,"value":2397},{"type":395,"tag":431,"props":2446,"children":2447},{"style":444},[2448],{"type":401,"value":1365},{"type":395,"tag":409,"props":2450,"children":2451},{},[2452],{"type":401,"value":2453},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":395,"tag":409,"props":2455,"children":2456},{},[2457],{"type":401,"value":2458},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":395,"tag":409,"props":2460,"children":2461},{},[2462],{"type":401,"value":2463},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":395,"tag":403,"props":2465,"children":2467},{"id":2466},"严格模式",[2468],{"type":401,"value":2466},{"type":395,"tag":409,"props":2470,"children":2471},{},[2472],{"type":401,"value":2473},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":395,"tag":409,"props":2475,"children":2476},{},[2477],{"type":401,"value":2478},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":395,"tag":409,"props":2480,"children":2481},{},[2482],{"type":401,"value":2483},"总的来说，严格模式一共有七条限制：",{"type":395,"tag":509,"props":2485,"children":2486},{},[2487,2492,2497,2502,2507,2512,2517,2522,2527,2532],{"type":395,"tag":513,"props":2488,"children":2489},{},[2490],{"type":401,"value":2491},"对象字面量中不能有相同的属性声明",{"type":395,"tag":513,"props":2493,"children":2494},{},[2495],{"type":401,"value":2496},"函数实参列表中不能有同名参数",{"type":395,"tag":513,"props":2498,"children":2499},{},[2500],{"type":401,"value":2501},"不能声明、重写或删除 eval、arguments 标识符",{"type":395,"tag":513,"props":2503,"children":2504},{},[2505],{"type":401,"value":2506},"不允许使用八进制数字字面量",{"type":395,"tag":513,"props":2508,"children":2509},{},[2510],{"type":401,"value":2511},"不能删除显式声明的标识符、名字或具名函数",{"type":395,"tag":513,"props":2513,"children":2514},{},[2515],{"type":401,"value":2516},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":395,"tag":513,"props":2518,"children":2519},{},[2520],{"type":401,"value":2521},"禁用 with 语句",{"type":395,"tag":513,"props":2523,"children":2524},{},[2525],{"type":401,"value":2526},"禁用隐式声明",{"type":395,"tag":513,"props":2528,"children":2529},{},[2530],{"type":401,"value":2531},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":395,"tag":513,"props":2533,"children":2534},{},[2535],{"type":401,"value":2536},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":395,"tag":409,"props":2538,"children":2539},{},[2540],{"type":401,"value":2541},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":395,"tag":509,"props":2543,"children":2544},{},[2545,2550],{"type":395,"tag":513,"props":2546,"children":2547},{},[2548],{"type":401,"value":2549},"间接调用 eval 函数",{"type":395,"tag":513,"props":2551,"children":2552},{},[2553],{"type":401,"value":2554},"使用 new Function 构造的新函数",{"type":395,"tag":403,"props":2556,"children":2558},{"id":2557},"运算符的二义性",[2559],{"type":401,"value":2557},{"type":395,"tag":409,"props":2561,"children":2562},{},[2563],{"type":401,"value":2564},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":395,"tag":409,"props":2566,"children":2567},{},[2568],{"type":401,"value":2569},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":395,"tag":409,"props":2571,"children":2572},{},[2573],{"type":401,"value":2574},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":395,"tag":409,"props":2576,"children":2577},{},[2578],{"type":401,"value":2579},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":395,"tag":396,"props":2581,"children":2583},{"id":2582},"面向对象语言特性",[2584],{"type":401,"value":2582},{"type":395,"tag":403,"props":2586,"children":2588},{"id":2587},"语法综述-1",[2589],{"type":401,"value":405},{"type":395,"tag":409,"props":2591,"children":2592},{},[2593],{"type":401,"value":2594},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":395,"tag":409,"props":2596,"children":2597},{},[2598],{"type":401,"value":2599},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":395,"tag":409,"props":2601,"children":2602},{},[2603],{"type":401,"value":2604},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":395,"tag":409,"props":2606,"children":2607},{},[2608],{"type":401,"value":2609},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":395,"tag":420,"props":2611,"children":2613},{"className":653,"code":2612,"language":655,"meta":389,"style":389},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2614],{"type":395,"tag":427,"props":2615,"children":2616},{"__ignoreMap":389},[2617,2638,2665,2694,2702,2719,2732,2739,2747,2755,2779],{"type":395,"tag":431,"props":2618,"children":2619},{"class":433,"line":434},[2620,2625,2630,2634],{"type":395,"tag":431,"props":2621,"children":2622},{"style":988},[2623],{"type":401,"value":2624},"var",{"type":395,"tag":431,"props":2626,"children":2627},{"style":665},[2628],{"type":401,"value":2629}," obj",{"type":395,"tag":431,"props":2631,"children":2632},{"style":461},[2633],{"type":401,"value":1863},{"type":395,"tag":431,"props":2635,"children":2636},{"style":671},[2637],{"type":401,"value":1738},{"type":395,"tag":431,"props":2639,"children":2640},{"class":433,"line":724},[2641,2646,2651,2655,2660],{"type":395,"tag":431,"props":2642,"children":2643},{"style":988},[2644],{"type":401,"value":2645},"  set",{"type":395,"tag":431,"props":2647,"children":2649},{"style":2648},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2650],{"type":401,"value":2014},{"type":395,"tag":431,"props":2652,"children":2653},{"style":671},[2654],{"type":401,"value":685},{"type":395,"tag":431,"props":2656,"children":2657},{"style":1615},[2658],{"type":401,"value":2659},"x",{"type":395,"tag":431,"props":2661,"children":2662},{"style":671},[2663],{"type":401,"value":2664},"){\n",{"type":395,"tag":431,"props":2666,"children":2667},{"class":433,"line":1368},[2668,2673,2677,2681,2686,2690],{"type":395,"tag":431,"props":2669,"children":2670},{"style":665},[2671],{"type":401,"value":2672},"    c",{"type":395,"tag":431,"props":2674,"children":2675},{"style":461},[2676],{"type":401,"value":1863},{"type":395,"tag":431,"props":2678,"children":2679},{"style":444},[2680],{"type":401,"value":458},{"type":395,"tag":431,"props":2682,"children":2683},{"style":450},[2684],{"type":401,"value":2685},"other",{"type":395,"tag":431,"props":2687,"children":2688},{"style":444},[2689],{"type":401,"value":458},{"type":395,"tag":431,"props":2691,"children":2692},{"style":671},[2693],{"type":401,"value":1803},{"type":395,"tag":431,"props":2695,"children":2696},{"class":433,"line":1409},[2697],{"type":395,"tag":431,"props":2698,"children":2699},{"style":671},[2700],{"type":401,"value":2701},"  },\n",{"type":395,"tag":431,"props":2703,"children":2704},{"class":433,"line":1418},[2705,2710,2714],{"type":395,"tag":431,"props":2706,"children":2707},{"style":988},[2708],{"type":401,"value":2709},"  get",{"type":395,"tag":431,"props":2711,"children":2712},{"style":2648},[2713],{"type":401,"value":2014},{"type":395,"tag":431,"props":2715,"children":2716},{"style":671},[2717],{"type":401,"value":2718},"(){\n",{"type":395,"tag":431,"props":2720,"children":2721},{"class":433,"line":1453},[2722,2727],{"type":395,"tag":431,"props":2723,"children":2724},{"style":1692},[2725],{"type":401,"value":2726},"    return",{"type":395,"tag":431,"props":2728,"children":2729},{"style":665},[2730],{"type":401,"value":2731}," c\n",{"type":395,"tag":431,"props":2733,"children":2734},{"class":433,"line":1490},[2735],{"type":395,"tag":431,"props":2736,"children":2737},{"style":671},[2738],{"type":401,"value":2701},{"type":395,"tag":431,"props":2740,"children":2741},{"class":433,"line":1498},[2742],{"type":395,"tag":431,"props":2743,"children":2744},{"style":718},[2745],{"type":401,"value":2746},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":395,"tag":431,"props":2748,"children":2749},{"class":433,"line":1525},[2750],{"type":395,"tag":431,"props":2751,"children":2752},{"style":718},[2753],{"type":401,"value":2754},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":395,"tag":431,"props":2756,"children":2757},{"class":433,"line":2101},[2758,2763,2767,2771,2775],{"type":395,"tag":431,"props":2759,"children":2760},{"style":1386},[2761],{"type":401,"value":2762},"  test",{"type":395,"tag":431,"props":2764,"children":2765},{"style":671},[2766],{"type":401,"value":1848},{"type":395,"tag":431,"props":2768,"children":2769},{"style":444},[2770],{"type":401,"value":447},{"type":395,"tag":431,"props":2772,"children":2773},{"style":450},[2774],{"type":401,"value":1714},{"type":395,"tag":431,"props":2776,"children":2777},{"style":444},[2778],{"type":401,"value":1365},{"type":395,"tag":431,"props":2780,"children":2781},{"class":433,"line":2161},[2782],{"type":395,"tag":431,"props":2783,"children":2784},{"style":671},[2785],{"type":401,"value":1415},{"type":395,"tag":409,"props":2787,"children":2788},{},[2789],{"type":401,"value":2790},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":395,"tag":420,"props":2792,"children":2794},{"className":653,"code":2793,"language":655,"meta":389,"style":389},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2795],{"type":395,"tag":427,"props":2796,"children":2797},{"__ignoreMap":389},[2798,2806,2850],{"type":395,"tag":431,"props":2799,"children":2800},{"class":433,"line":434},[2801],{"type":395,"tag":431,"props":2802,"children":2803},{"style":718},[2804],{"type":401,"value":2805},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":395,"tag":431,"props":2807,"children":2808},{"class":433,"line":724},[2809,2814,2818,2823,2827,2832,2837,2841,2846],{"type":395,"tag":431,"props":2810,"children":2812},{"style":2811},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2813],{"type":401,"value":1425},{"type":395,"tag":431,"props":2815,"children":2816},{"style":671},[2817],{"type":401,"value":674},{"type":395,"tag":431,"props":2819,"children":2820},{"style":1422},[2821],{"type":401,"value":2822},"prototype",{"type":395,"tag":431,"props":2824,"children":2825},{"style":461},[2826],{"type":401,"value":1352},{"type":395,"tag":431,"props":2828,"children":2829},{"style":461},[2830],{"type":401,"value":2831}," new",{"type":395,"tag":431,"props":2833,"children":2834},{"style":677},[2835],{"type":401,"value":2836}," B",{"type":395,"tag":431,"props":2838,"children":2839},{"style":665},[2840],{"type":401,"value":685},{"type":395,"tag":431,"props":2842,"children":2843},{"style":718},[2844],{"type":401,"value":2845},"/* 传入参数 */",{"type":395,"tag":431,"props":2847,"children":2848},{"style":665},[2849],{"type":401,"value":1406},{"type":395,"tag":431,"props":2851,"children":2852},{"class":433,"line":1368},[2853,2857,2861,2865,2869,2874,2878],{"type":395,"tag":431,"props":2854,"children":2855},{"style":2811},[2856],{"type":401,"value":1425},{"type":395,"tag":431,"props":2858,"children":2859},{"style":671},[2860],{"type":401,"value":674},{"type":395,"tag":431,"props":2862,"children":2863},{"style":1422},[2864],{"type":401,"value":2822},{"type":395,"tag":431,"props":2866,"children":2867},{"style":671},[2868],{"type":401,"value":674},{"type":395,"tag":431,"props":2870,"children":2871},{"style":1422},[2872],{"type":401,"value":2873},"constructor",{"type":395,"tag":431,"props":2875,"children":2876},{"style":461},[2877],{"type":401,"value":1352},{"type":395,"tag":431,"props":2879,"children":2880},{"style":1422},[2881],{"type":401,"value":2882}," A\n",{"type":395,"tag":409,"props":2884,"children":2885},{},[2886],{"type":401,"value":2887},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":395,"tag":409,"props":2889,"children":2890},{},[2891],{"type":401,"value":2892},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":395,"tag":409,"props":2894,"children":2895},{},[2896],{"type":401,"value":2897},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":395,"tag":409,"props":2899,"children":2900},{},[2901],{"type":401,"value":2902},"总结一下遍历对象成员的方法：",{"type":395,"tag":1003,"props":2904,"children":2905},{},[2906,2930],{"type":395,"tag":1007,"props":2907,"children":2908},{},[2909],{"type":395,"tag":1011,"props":2910,"children":2911},{},[2912,2917,2922,2926],{"type":395,"tag":1015,"props":2913,"children":2914},{},[2915],{"type":401,"value":2916},"键名",{"type":395,"tag":1015,"props":2918,"children":2919},{},[2920],{"type":401,"value":2921},"显隐式",{"type":395,"tag":1015,"props":2923,"children":2924},{},[2925],{"type":401,"value":398},{"type":395,"tag":1015,"props":2927,"children":2928},{},[2929],{"type":401,"value":1024},{"type":395,"tag":1026,"props":2931,"children":2932},{},[2933,2956,2976,2998],{"type":395,"tag":1011,"props":2934,"children":2935},{},[2936,2941,2946,2951],{"type":395,"tag":1033,"props":2937,"children":2938},{},[2939],{"type":401,"value":2940},"一般键名",{"type":395,"tag":1033,"props":2942,"children":2943},{},[2944],{"type":401,"value":2945},"显式",{"type":395,"tag":1033,"props":2947,"children":2948},{},[2949],{"type":401,"value":2950},"for...in",{"type":395,"tag":1033,"props":2952,"children":2953},{},[2954],{"type":401,"value":2955},"可列举的成员名（包含原型链）",{"type":395,"tag":1011,"props":2957,"children":2958},{},[2959,2963,2967,2972],{"type":395,"tag":1033,"props":2960,"children":2961},{},[2962],{"type":401,"value":2940},{"type":395,"tag":1033,"props":2964,"children":2965},{},[2966],{"type":401,"value":2945},{"type":395,"tag":1033,"props":2968,"children":2969},{},[2970],{"type":401,"value":2971},"Object.prototype.map、Object.prototype.entries、...",{"type":395,"tag":1033,"props":2973,"children":2974},{},[2975],{"type":401,"value":1276},{"type":395,"tag":1011,"props":2977,"children":2978},{},[2979,2983,2988,2993],{"type":395,"tag":1033,"props":2980,"children":2981},{},[2982],{"type":401,"value":2940},{"type":395,"tag":1033,"props":2984,"children":2985},{},[2986],{"type":401,"value":2987},"显式 & 隐式",{"type":395,"tag":1033,"props":2989,"children":2990},{},[2991],{"type":401,"value":2992},"Object.getOwnPropertyNames()",{"type":395,"tag":1033,"props":2994,"children":2995},{},[2996],{"type":401,"value":2997},"所有非符号的自由属性名",{"type":395,"tag":1011,"props":2999,"children":3000},{},[3001,3006,3010,3015],{"type":395,"tag":1033,"props":3002,"children":3003},{},[3004],{"type":401,"value":3005},"符号键名键名",{"type":395,"tag":1033,"props":3007,"children":3008},{},[3009],{"type":401,"value":2987},{"type":395,"tag":1033,"props":3011,"children":3012},{},[3013],{"type":401,"value":3014},"Object.getOwnPropertySymbols()",{"type":395,"tag":1033,"props":3016,"children":3017},{},[3018],{"type":401,"value":3019},"所有符号键名的自有属性名",{"type":395,"tag":409,"props":3021,"children":3022},{},[3023,3025,3030,3032,3036],{"type":401,"value":3024},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":395,"tag":431,"props":3026,"children":3027},{},[3028],{"type":401,"value":3029},"prop",{"type":401,"value":3031}," 更好的替代方案是 typeof(obj",{"type":395,"tag":431,"props":3033,"children":3034},{},[3035],{"type":401,"value":3029},{"type":401,"value":3037},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":395,"tag":409,"props":3039,"children":3040},{},[3041],{"type":401,"value":3042},"delete 运算符有些特殊的地方：",{"type":395,"tag":509,"props":3044,"children":3045},{},[3046,3051],{"type":395,"tag":513,"props":3047,"children":3048},{},[3049],{"type":401,"value":3050},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":395,"tag":513,"props":3052,"children":3053},{},[3054],{"type":401,"value":3055},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":395,"tag":403,"props":3057,"children":3059},{"id":3058},"原型继承",[3060],{"type":401,"value":3058},{"type":395,"tag":409,"props":3062,"children":3063},{},[3064],{"type":401,"value":3065},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":395,"tag":409,"props":3067,"children":3068},{},[3069],{"type":401,"value":3070},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":395,"tag":509,"props":3072,"children":3073},{},[3074,3079],{"type":395,"tag":513,"props":3075,"children":3076},{},[3077],{"type":401,"value":3078},"读对象的属性时优先读取对象的自有属性表",{"type":395,"tag":513,"props":3080,"children":3081},{},[3082],{"type":401,"value":3083},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":395,"tag":409,"props":3085,"children":3086},{},[3087],{"type":401,"value":3088},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":395,"tag":409,"props":3090,"children":3091},{},[3092],{"type":401,"value":3093},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":395,"tag":420,"props":3095,"children":3097},{"className":653,"code":3096,"language":655,"meta":389,"style":389},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3098],{"type":395,"tag":427,"props":3099,"children":3100},{"__ignoreMap":389},[3101,3121,3160,3201],{"type":395,"tag":431,"props":3102,"children":3103},{"class":433,"line":434},[3104,3108,3112,3116],{"type":395,"tag":431,"props":3105,"children":3106},{"style":988},[3107],{"type":401,"value":1314},{"type":395,"tag":431,"props":3109,"children":3110},{"style":677},[3111],{"type":401,"value":2014},{"type":395,"tag":431,"props":3113,"children":3114},{"style":671},[3115],{"type":401,"value":1324},{"type":395,"tag":431,"props":3117,"children":3118},{"style":671},[3119],{"type":401,"value":3120}," {}\n",{"type":395,"tag":431,"props":3122,"children":3123},{"class":433,"line":724},[3124,3128,3133,3137,3141,3146,3150,3155],{"type":395,"tag":431,"props":3125,"children":3126},{"style":988},[3127],{"type":401,"value":2624},{"type":395,"tag":431,"props":3129,"children":3130},{"style":665},[3131],{"type":401,"value":3132}," a ",{"type":395,"tag":431,"props":3134,"children":3135},{"style":461},[3136],{"type":401,"value":1863},{"type":395,"tag":431,"props":3138,"children":3139},{"style":671},[3140],{"type":401,"value":1700},{"type":395,"tag":431,"props":3142,"children":3143},{"style":2648},[3144],{"type":401,"value":3145}," testb",{"type":395,"tag":431,"props":3147,"children":3148},{"style":671},[3149],{"type":401,"value":1324},{"type":395,"tag":431,"props":3151,"children":3152},{"style":671},[3153],{"type":401,"value":3154}," {}",{"type":395,"tag":431,"props":3156,"children":3157},{"style":671},[3158],{"type":401,"value":3159}," }\n",{"type":395,"tag":431,"props":3161,"children":3162},{"class":433,"line":1368},[3163,3167,3171,3176,3180,3184,3188,3192,3196],{"type":395,"tag":431,"props":3164,"children":3165},{"style":665},[3166],{"type":401,"value":492},{"type":395,"tag":431,"props":3168,"children":3169},{"style":671},[3170],{"type":401,"value":674},{"type":395,"tag":431,"props":3172,"children":3173},{"style":665},[3174],{"type":401,"value":3175},"testb",{"type":395,"tag":431,"props":3177,"children":3178},{"style":671},[3179],{"type":401,"value":674},{"type":395,"tag":431,"props":3181,"children":3182},{"style":1422},[3183],{"type":401,"value":2822},{"type":395,"tag":431,"props":3185,"children":3186},{"style":461},[3187],{"type":401,"value":1352},{"type":395,"tag":431,"props":3189,"children":3190},{"style":2811},[3191],{"type":401,"value":2014},{"type":395,"tag":431,"props":3193,"children":3194},{"style":671},[3195],{"type":401,"value":674},{"type":395,"tag":431,"props":3197,"children":3198},{"style":1422},[3199],{"type":401,"value":3200},"prototype\n",{"type":395,"tag":431,"props":3202,"children":3203},{"class":433,"line":1409},[3204,3208,3213,3217,3221,3225],{"type":395,"tag":431,"props":3205,"children":3206},{"style":461},[3207],{"type":401,"value":1504},{"type":395,"tag":431,"props":3209,"children":3210},{"style":665},[3211],{"type":401,"value":3212}," a",{"type":395,"tag":431,"props":3214,"children":3215},{"style":671},[3216],{"type":401,"value":674},{"type":395,"tag":431,"props":3218,"children":3219},{"style":677},[3220],{"type":401,"value":3175},{"type":395,"tag":431,"props":3222,"children":3223},{"style":665},[3224],{"type":401,"value":819},{"type":395,"tag":431,"props":3226,"children":3227},{"style":718},[3228],{"type":401,"value":3229},"// TypeError\n",{"type":395,"tag":409,"props":3231,"children":3232},{},[3233,3235,3243],{"type":401,"value":3234},"在",{"type":395,"tag":492,"props":3236,"children":3240},{"href":3237,"rel":3238},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3239],"nofollow",[3241],{"type":401,"value":3242},"规范",{"type":401,"value":3244},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":395,"tag":409,"props":3246,"children":3247},{},[3248],{"type":401,"value":3249},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":395,"tag":420,"props":3251,"children":3253},{"className":653,"code":3252,"language":655,"meta":389,"style":389},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3254],{"type":395,"tag":427,"props":3255,"children":3256},{"__ignoreMap":389},[3257,3277,3297],{"type":395,"tag":431,"props":3258,"children":3259},{"class":433,"line":434},[3260,3264,3269,3273],{"type":395,"tag":431,"props":3261,"children":3262},{"style":988},[3263],{"type":401,"value":1314},{"type":395,"tag":431,"props":3265,"children":3266},{"style":677},[3267],{"type":401,"value":3268}," Parent",{"type":395,"tag":431,"props":3270,"children":3271},{"style":671},[3272],{"type":401,"value":1324},{"type":395,"tag":431,"props":3274,"children":3275},{"style":671},[3276],{"type":401,"value":3120},{"type":395,"tag":431,"props":3278,"children":3279},{"class":433,"line":724},[3280,3284,3289,3293],{"type":395,"tag":431,"props":3281,"children":3282},{"style":988},[3283],{"type":401,"value":1314},{"type":395,"tag":431,"props":3285,"children":3286},{"style":677},[3287],{"type":401,"value":3288}," Child",{"type":395,"tag":431,"props":3290,"children":3291},{"style":671},[3292],{"type":401,"value":1324},{"type":395,"tag":431,"props":3294,"children":3295},{"style":671},[3296],{"type":401,"value":3120},{"type":395,"tag":431,"props":3298,"children":3299},{"class":433,"line":1368},[3300,3305,3309,3313,3317,3321,3325],{"type":395,"tag":431,"props":3301,"children":3302},{"style":2811},[3303],{"type":401,"value":3304},"Child",{"type":395,"tag":431,"props":3306,"children":3307},{"style":671},[3308],{"type":401,"value":674},{"type":395,"tag":431,"props":3310,"children":3311},{"style":1422},[3312],{"type":401,"value":2822},{"type":395,"tag":431,"props":3314,"children":3315},{"style":461},[3316],{"type":401,"value":1352},{"type":395,"tag":431,"props":3318,"children":3319},{"style":461},[3320],{"type":401,"value":2831},{"type":395,"tag":431,"props":3322,"children":3323},{"style":677},[3324],{"type":401,"value":3268},{"type":395,"tag":431,"props":3326,"children":3327},{"style":665},[3328],{"type":401,"value":3329},"()\n",{"type":395,"tag":409,"props":3331,"children":3332},{},[3333],{"type":401,"value":3334},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":395,"tag":420,"props":3336,"children":3338},{"className":653,"code":3337,"language":655,"meta":389,"style":389},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3339],{"type":395,"tag":427,"props":3340,"children":3341},{"__ignoreMap":389},[3342,3350],{"type":395,"tag":431,"props":3343,"children":3344},{"class":433,"line":434},[3345],{"type":395,"tag":431,"props":3346,"children":3347},{"style":718},[3348],{"type":401,"value":3349},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":395,"tag":431,"props":3351,"children":3352},{"class":433,"line":724},[3353,3357,3361,3365,3369,3373,3377],{"type":395,"tag":431,"props":3354,"children":3355},{"style":2811},[3356],{"type":401,"value":3304},{"type":395,"tag":431,"props":3358,"children":3359},{"style":671},[3360],{"type":401,"value":674},{"type":395,"tag":431,"props":3362,"children":3363},{"style":1422},[3364],{"type":401,"value":2822},{"type":395,"tag":431,"props":3366,"children":3367},{"style":671},[3368],{"type":401,"value":674},{"type":395,"tag":431,"props":3370,"children":3371},{"style":1422},[3372],{"type":401,"value":2873},{"type":395,"tag":431,"props":3374,"children":3375},{"style":461},[3376],{"type":401,"value":1352},{"type":395,"tag":431,"props":3378,"children":3379},{"style":665},[3380],{"type":401,"value":3381}," Child\n",{"type":395,"tag":420,"props":3383,"children":3385},{"className":653,"code":3384,"language":655,"meta":389,"style":389},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3386],{"type":395,"tag":427,"props":3387,"children":3388},{"__ignoreMap":389},[3389,3397,3416,3435,3458,3465],{"type":395,"tag":431,"props":3390,"children":3391},{"class":433,"line":434},[3392],{"type":395,"tag":431,"props":3393,"children":3394},{"style":718},[3395],{"type":401,"value":3396},"// 这种方法叫做圣杯模式\n",{"type":395,"tag":431,"props":3398,"children":3399},{"class":433,"line":724},[3400,3404,3408,3412],{"type":395,"tag":431,"props":3401,"children":3402},{"style":988},[3403],{"type":401,"value":1314},{"type":395,"tag":431,"props":3405,"children":3406},{"style":677},[3407],{"type":401,"value":3268},{"type":395,"tag":431,"props":3409,"children":3410},{"style":671},[3411],{"type":401,"value":1324},{"type":395,"tag":431,"props":3413,"children":3414},{"style":671},[3415],{"type":401,"value":3120},{"type":395,"tag":431,"props":3417,"children":3418},{"class":433,"line":1368},[3419,3423,3427,3431],{"type":395,"tag":431,"props":3420,"children":3421},{"style":988},[3422],{"type":401,"value":1314},{"type":395,"tag":431,"props":3424,"children":3425},{"style":677},[3426],{"type":401,"value":3288},{"type":395,"tag":431,"props":3428,"children":3429},{"style":671},[3430],{"type":401,"value":1324},{"type":395,"tag":431,"props":3432,"children":3433},{"style":671},[3434],{"type":401,"value":1329},{"type":395,"tag":431,"props":3436,"children":3437},{"class":433,"line":1409},[3438,3442,3446,3450,3454],{"type":395,"tag":431,"props":3439,"children":3440},{"style":1335},[3441],{"type":401,"value":1338},{"type":395,"tag":431,"props":3443,"children":3444},{"style":671},[3445],{"type":401,"value":674},{"type":395,"tag":431,"props":3447,"children":3448},{"style":1422},[3449],{"type":401,"value":2873},{"type":395,"tag":431,"props":3451,"children":3452},{"style":461},[3453],{"type":401,"value":1352},{"type":395,"tag":431,"props":3455,"children":3456},{"style":665},[3457],{"type":401,"value":3381},{"type":395,"tag":431,"props":3459,"children":3460},{"class":433,"line":1418},[3461],{"type":395,"tag":431,"props":3462,"children":3463},{"style":671},[3464],{"type":401,"value":1415},{"type":395,"tag":431,"props":3466,"children":3467},{"class":433,"line":1453},[3468,3472,3476,3480,3484,3488,3492],{"type":395,"tag":431,"props":3469,"children":3470},{"style":2811},[3471],{"type":401,"value":3304},{"type":395,"tag":431,"props":3473,"children":3474},{"style":671},[3475],{"type":401,"value":674},{"type":395,"tag":431,"props":3477,"children":3478},{"style":1422},[3479],{"type":401,"value":2822},{"type":395,"tag":431,"props":3481,"children":3482},{"style":461},[3483],{"type":401,"value":1352},{"type":395,"tag":431,"props":3485,"children":3486},{"style":461},[3487],{"type":401,"value":2831},{"type":395,"tag":431,"props":3489,"children":3490},{"style":677},[3491],{"type":401,"value":3268},{"type":395,"tag":431,"props":3493,"children":3494},{"style":665},[3495],{"type":401,"value":3329},{"type":395,"tag":409,"props":3497,"children":3498},{},[3499],{"type":401,"value":3500},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":395,"tag":403,"props":3502,"children":3504},{"id":3503},"类继承",[3505],{"type":401,"value":3503},{"type":395,"tag":409,"props":3507,"children":3508},{},[3509],{"type":401,"value":3510},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":395,"tag":420,"props":3512,"children":3514},{"className":653,"code":3513,"language":655,"meta":389,"style":389},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3515],{"type":395,"tag":427,"props":3516,"children":3517},{"__ignoreMap":389},[3518,3526,3543,3569,3577,3596,3615,3645],{"type":395,"tag":431,"props":3519,"children":3520},{"class":433,"line":434},[3521],{"type":395,"tag":431,"props":3522,"children":3523},{"style":718},[3524],{"type":401,"value":3525},"/* 类声明 */\n",{"type":395,"tag":431,"props":3527,"children":3528},{"class":433,"line":724},[3529,3534,3539],{"type":395,"tag":431,"props":3530,"children":3531},{"style":988},[3532],{"type":401,"value":3533},"class",{"type":395,"tag":431,"props":3535,"children":3537},{"style":3536},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3538],{"type":401,"value":3268},{"type":395,"tag":431,"props":3540,"children":3541},{"style":671},[3542],{"type":401,"value":3120},{"type":395,"tag":431,"props":3544,"children":3545},{"class":433,"line":1368},[3546,3550,3554,3560,3565],{"type":395,"tag":431,"props":3547,"children":3548},{"style":988},[3549],{"type":401,"value":3533},{"type":395,"tag":431,"props":3551,"children":3552},{"style":3536},[3553],{"type":401,"value":3288},{"type":395,"tag":431,"props":3555,"children":3557},{"style":3556},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3558],{"type":401,"value":3559}," extends",{"type":395,"tag":431,"props":3561,"children":3563},{"style":3562},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3564],{"type":401,"value":3268},{"type":395,"tag":431,"props":3566,"children":3567},{"style":671},[3568],{"type":401,"value":3120},{"type":395,"tag":431,"props":3570,"children":3571},{"class":433,"line":1409},[3572],{"type":395,"tag":431,"props":3573,"children":3574},{"style":718},[3575],{"type":401,"value":3576},"/* 仿制代码 */\n",{"type":395,"tag":431,"props":3578,"children":3579},{"class":433,"line":1418},[3580,3584,3588,3592],{"type":395,"tag":431,"props":3581,"children":3582},{"style":988},[3583],{"type":401,"value":1314},{"type":395,"tag":431,"props":3585,"children":3586},{"style":677},[3587],{"type":401,"value":3268},{"type":395,"tag":431,"props":3589,"children":3590},{"style":671},[3591],{"type":401,"value":1037},{"type":395,"tag":431,"props":3593,"children":3594},{"style":671},[3595],{"type":401,"value":3120},{"type":395,"tag":431,"props":3597,"children":3598},{"class":433,"line":1453},[3599,3603,3607,3611],{"type":395,"tag":431,"props":3600,"children":3601},{"style":988},[3602],{"type":401,"value":1314},{"type":395,"tag":431,"props":3604,"children":3605},{"style":677},[3606],{"type":401,"value":3288},{"type":395,"tag":431,"props":3608,"children":3609},{"style":671},[3610],{"type":401,"value":1037},{"type":395,"tag":431,"props":3612,"children":3613},{"style":671},[3614],{"type":401,"value":3120},{"type":395,"tag":431,"props":3616,"children":3617},{"class":433,"line":1490},[3618,3622,3626,3631,3636,3640],{"type":395,"tag":431,"props":3619,"children":3620},{"style":665},[3621],{"type":401,"value":668},{"type":395,"tag":431,"props":3623,"children":3624},{"style":671},[3625],{"type":401,"value":674},{"type":395,"tag":431,"props":3627,"children":3628},{"style":677},[3629],{"type":401,"value":3630},"setPrototypeOf",{"type":395,"tag":431,"props":3632,"children":3633},{"style":665},[3634],{"type":401,"value":3635},"(Child",{"type":395,"tag":431,"props":3637,"children":3638},{"style":671},[3639],{"type":401,"value":701},{"type":395,"tag":431,"props":3641,"children":3642},{"style":665},[3643],{"type":401,"value":3644}," Parent)\n",{"type":395,"tag":431,"props":3646,"children":3647},{"class":433,"line":1498},[3648,3652,3656,3660,3664,3668,3672,3676,3680,3684,3688,3692],{"type":395,"tag":431,"props":3649,"children":3650},{"style":665},[3651],{"type":401,"value":668},{"type":395,"tag":431,"props":3653,"children":3654},{"style":671},[3655],{"type":401,"value":674},{"type":395,"tag":431,"props":3657,"children":3658},{"style":677},[3659],{"type":401,"value":3630},{"type":395,"tag":431,"props":3661,"children":3662},{"style":665},[3663],{"type":401,"value":685},{"type":395,"tag":431,"props":3665,"children":3666},{"style":2811},[3667],{"type":401,"value":3304},{"type":395,"tag":431,"props":3669,"children":3670},{"style":671},[3671],{"type":401,"value":674},{"type":395,"tag":431,"props":3673,"children":3674},{"style":1422},[3675],{"type":401,"value":2822},{"type":395,"tag":431,"props":3677,"children":3678},{"style":671},[3679],{"type":401,"value":701},{"type":395,"tag":431,"props":3681,"children":3682},{"style":2811},[3683],{"type":401,"value":3268},{"type":395,"tag":431,"props":3685,"children":3686},{"style":671},[3687],{"type":401,"value":674},{"type":395,"tag":431,"props":3689,"children":3690},{"style":1422},[3691],{"type":401,"value":2822},{"type":395,"tag":431,"props":3693,"children":3694},{"style":665},[3695],{"type":401,"value":1406},{"type":395,"tag":409,"props":3697,"children":3698},{},[3699],{"type":401,"value":3700},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":395,"tag":409,"props":3702,"children":3703},{},[3704],{"type":401,"value":3705},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":395,"tag":409,"props":3707,"children":3708},{},[3709],{"type":401,"value":3710},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":395,"tag":420,"props":3712,"children":3714},{"className":653,"code":3713,"language":655,"meta":389,"style":389},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3715],{"type":395,"tag":427,"props":3716,"children":3717},{"__ignoreMap":389},[3718,3759,3790,3826,3855,3867],{"type":395,"tag":431,"props":3719,"children":3720},{"class":433,"line":434},[3721,3726,3730,3734,3738,3743,3747,3751,3755],{"type":395,"tag":431,"props":3722,"children":3723},{"style":2811},[3724],{"type":401,"value":3725},"object",{"type":395,"tag":431,"props":3727,"children":3728},{"style":671},[3729],{"type":401,"value":674},{"type":395,"tag":431,"props":3731,"children":3732},{"style":1422},[3733],{"type":401,"value":2822},{"type":395,"tag":431,"props":3735,"children":3736},{"style":671},[3737],{"type":401,"value":674},{"type":395,"tag":431,"props":3739,"children":3740},{"style":677},[3741],{"type":401,"value":3742},"method",{"type":395,"tag":431,"props":3744,"children":3745},{"style":461},[3746],{"type":401,"value":1352},{"type":395,"tag":431,"props":3748,"children":3749},{"style":988},[3750],{"type":401,"value":1442},{"type":395,"tag":431,"props":3752,"children":3753},{"style":671},[3754],{"type":401,"value":1324},{"type":395,"tag":431,"props":3756,"children":3757},{"style":671},[3758],{"type":401,"value":1329},{"type":395,"tag":431,"props":3760,"children":3761},{"class":433,"line":724},[3762,3767,3772,3776,3781,3785],{"type":395,"tag":431,"props":3763,"children":3764},{"style":988},[3765],{"type":401,"value":3766},"  const",{"type":395,"tag":431,"props":3768,"children":3769},{"style":1422},[3770],{"type":401,"value":3771}," thisClass",{"type":395,"tag":431,"props":3773,"children":3774},{"style":461},[3775],{"type":401,"value":1352},{"type":395,"tag":431,"props":3777,"children":3778},{"style":1335},[3779],{"type":401,"value":3780}," this",{"type":395,"tag":431,"props":3782,"children":3783},{"style":671},[3784],{"type":401,"value":674},{"type":395,"tag":431,"props":3786,"children":3787},{"style":1422},[3788],{"type":401,"value":3789},"constructor\n",{"type":395,"tag":431,"props":3791,"children":3792},{"class":433,"line":1368},[3793,3797,3802,3806,3810,3814,3818,3822],{"type":395,"tag":431,"props":3794,"children":3795},{"style":988},[3796],{"type":401,"value":3766},{"type":395,"tag":431,"props":3798,"children":3799},{"style":1422},[3800],{"type":401,"value":3801}," parentClass",{"type":395,"tag":431,"props":3803,"children":3804},{"style":461},[3805],{"type":401,"value":1352},{"type":395,"tag":431,"props":3807,"children":3808},{"style":2811},[3809],{"type":401,"value":3771},{"type":395,"tag":431,"props":3811,"children":3812},{"style":671},[3813],{"type":401,"value":674},{"type":395,"tag":431,"props":3815,"children":3816},{"style":1422},[3817],{"type":401,"value":2822},{"type":395,"tag":431,"props":3819,"children":3820},{"style":671},[3821],{"type":401,"value":674},{"type":395,"tag":431,"props":3823,"children":3824},{"style":1422},[3825],{"type":401,"value":3789},{"type":395,"tag":431,"props":3827,"children":3828},{"class":433,"line":1409},[3829,3833,3838,3842,3846,3850],{"type":395,"tag":431,"props":3830,"children":3831},{"style":988},[3832],{"type":401,"value":3766},{"type":395,"tag":431,"props":3834,"children":3835},{"style":1422},[3836],{"type":401,"value":3837}," parentMethod",{"type":395,"tag":431,"props":3839,"children":3840},{"style":461},[3841],{"type":401,"value":1352},{"type":395,"tag":431,"props":3843,"children":3844},{"style":665},[3845],{"type":401,"value":3801},{"type":395,"tag":431,"props":3847,"children":3848},{"style":671},[3849],{"type":401,"value":674},{"type":395,"tag":431,"props":3851,"children":3852},{"style":665},[3853],{"type":401,"value":3854},"method\n",{"type":395,"tag":431,"props":3856,"children":3857},{"class":433,"line":1418},[3858,3863],{"type":395,"tag":431,"props":3859,"children":3860},{"style":677},[3861],{"type":401,"value":3862},"  parentMethod",{"type":395,"tag":431,"props":3864,"children":3865},{"style":1386},[3866],{"type":401,"value":3329},{"type":395,"tag":431,"props":3868,"children":3869},{"class":433,"line":1453},[3870],{"type":395,"tag":431,"props":3871,"children":3872},{"style":671},[3873],{"type":401,"value":1415},{"type":395,"tag":409,"props":3875,"children":3876},{},[3877],{"type":401,"value":3878},"super 的指向由几个规则所限制：",{"type":395,"tag":509,"props":3880,"children":3881},{},[3882,3887,3892,3897,3902],{"type":395,"tag":513,"props":3883,"children":3884},{},[3885],{"type":401,"value":3886},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":395,"tag":513,"props":3888,"children":3889},{},[3890],{"type":401,"value":3891},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":395,"tag":513,"props":3893,"children":3894},{},[3895],{"type":401,"value":3896},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":395,"tag":513,"props":3898,"children":3899},{},[3900],{"type":401,"value":3901},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":395,"tag":513,"props":3903,"children":3904},{},[3905],{"type":401,"value":3906},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":395,"tag":409,"props":3908,"children":3909},{},[3910],{"type":401,"value":3911},"总结可以得出规律：",{"type":395,"tag":509,"props":3913,"children":3914},{},[3915,3920],{"type":395,"tag":513,"props":3916,"children":3917},{},[3918],{"type":401,"value":3919},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":395,"tag":513,"props":3921,"children":3922},{},[3923],{"type":401,"value":3924},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":395,"tag":409,"props":3926,"children":3927},{},[3928],{"type":401,"value":3929},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":395,"tag":420,"props":3931,"children":3933},{"className":653,"code":3932,"language":655,"meta":389,"style":389},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3934],{"type":395,"tag":427,"props":3935,"children":3936},{"__ignoreMap":389},[3937,3978,4048,4077,4085,4124,4158],{"type":395,"tag":431,"props":3938,"children":3939},{"class":433,"line":434},[3940,3945,3949,3953,3958,3962,3966,3970,3974],{"type":395,"tag":431,"props":3941,"children":3942},{"style":665},[3943],{"type":401,"value":3944},"proto ",{"type":395,"tag":431,"props":3946,"children":3947},{"style":461},[3948],{"type":401,"value":1863},{"type":395,"tag":431,"props":3950,"children":3951},{"style":671},[3952],{"type":401,"value":1700},{"type":395,"tag":431,"props":3954,"children":3955},{"style":1386},[3956],{"type":401,"value":3957},"data",{"type":395,"tag":431,"props":3959,"children":3960},{"style":671},[3961],{"type":401,"value":1848},{"type":395,"tag":431,"props":3963,"children":3964},{"style":444},[3965],{"type":401,"value":447},{"type":395,"tag":431,"props":3967,"children":3968},{"style":450},[3969],{"type":401,"value":1714},{"type":395,"tag":431,"props":3971,"children":3972},{"style":444},[3973],{"type":401,"value":458},{"type":395,"tag":431,"props":3975,"children":3976},{"style":671},[3977],{"type":401,"value":1415},{"type":395,"tag":431,"props":3979,"children":3980},{"class":433,"line":724},[3981,3986,3990,3994,3998,4002,4006,4010,4014,4018,4022,4028,4032,4036,4040,4044],{"type":395,"tag":431,"props":3982,"children":3983},{"style":665},[3984],{"type":401,"value":3985},"obj ",{"type":395,"tag":431,"props":3987,"children":3988},{"style":461},[3989],{"type":401,"value":1863},{"type":395,"tag":431,"props":3991,"children":3992},{"style":671},[3993],{"type":401,"value":1700},{"type":395,"tag":431,"props":3995,"children":3996},{"style":2648},[3997],{"type":401,"value":2014},{"type":395,"tag":431,"props":3999,"children":4000},{"style":671},[4001],{"type":401,"value":1037},{"type":395,"tag":431,"props":4003,"children":4004},{"style":671},[4005],{"type":401,"value":1700},{"type":395,"tag":431,"props":4007,"children":4008},{"style":665},[4009],{"type":401,"value":2031},{"type":395,"tag":431,"props":4011,"children":4012},{"style":671},[4013],{"type":401,"value":674},{"type":395,"tag":431,"props":4015,"children":4016},{"style":677},[4017],{"type":401,"value":1383},{"type":395,"tag":431,"props":4019,"children":4020},{"style":1386},[4021],{"type":401,"value":685},{"type":395,"tag":431,"props":4023,"children":4025},{"style":4024},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4026],{"type":401,"value":4027},"super",{"type":395,"tag":431,"props":4029,"children":4030},{"style":671},[4031],{"type":401,"value":674},{"type":395,"tag":431,"props":4033,"children":4034},{"style":665},[4035],{"type":401,"value":3957},{"type":395,"tag":431,"props":4037,"children":4038},{"style":1386},[4039],{"type":401,"value":715},{"type":395,"tag":431,"props":4041,"children":4042},{"style":671},[4043],{"type":401,"value":1662},{"type":395,"tag":431,"props":4045,"children":4046},{"style":671},[4047],{"type":401,"value":3159},{"type":395,"tag":431,"props":4049,"children":4050},{"class":433,"line":1368},[4051,4055,4059,4063,4068,4072],{"type":395,"tag":431,"props":4052,"children":4053},{"style":665},[4054],{"type":401,"value":668},{"type":395,"tag":431,"props":4056,"children":4057},{"style":671},[4058],{"type":401,"value":674},{"type":395,"tag":431,"props":4060,"children":4061},{"style":677},[4062],{"type":401,"value":3630},{"type":395,"tag":431,"props":4064,"children":4065},{"style":665},[4066],{"type":401,"value":4067},"(obj",{"type":395,"tag":431,"props":4069,"children":4070},{"style":671},[4071],{"type":401,"value":701},{"type":395,"tag":431,"props":4073,"children":4074},{"style":665},[4075],{"type":401,"value":4076}," proto)\n",{"type":395,"tag":431,"props":4078,"children":4079},{"class":433,"line":1409},[4080],{"type":395,"tag":431,"props":4081,"children":4082},{"emptyLinePlaceholder":388},[4083],{"type":401,"value":4084},"\n",{"type":395,"tag":431,"props":4086,"children":4087},{"class":433,"line":1418},[4088,4093,4097,4102,4106,4111,4115,4120],{"type":395,"tag":431,"props":4089,"children":4090},{"style":665},[4091],{"type":401,"value":4092},"obj2 ",{"type":395,"tag":431,"props":4094,"children":4095},{"style":461},[4096],{"type":401,"value":1863},{"type":395,"tag":431,"props":4098,"children":4099},{"style":665},[4100],{"type":401,"value":4101}," Object",{"type":395,"tag":431,"props":4103,"children":4104},{"style":671},[4105],{"type":401,"value":674},{"type":395,"tag":431,"props":4107,"children":4108},{"style":677},[4109],{"type":401,"value":4110},"create",{"type":395,"tag":431,"props":4112,"children":4113},{"style":665},[4114],{"type":401,"value":685},{"type":395,"tag":431,"props":4116,"children":4117},{"style":744},[4118],{"type":401,"value":4119},"null",{"type":395,"tag":431,"props":4121,"children":4122},{"style":665},[4123],{"type":401,"value":1406},{"type":395,"tag":431,"props":4125,"children":4126},{"class":433,"line":1453},[4127,4132,4136,4141,4145,4149,4153],{"type":395,"tag":431,"props":4128,"children":4129},{"style":665},[4130],{"type":401,"value":4131},"obj2",{"type":395,"tag":431,"props":4133,"children":4134},{"style":671},[4135],{"type":401,"value":674},{"type":395,"tag":431,"props":4137,"children":4138},{"style":665},[4139],{"type":401,"value":4140},"test ",{"type":395,"tag":431,"props":4142,"children":4143},{"style":461},[4144],{"type":401,"value":1863},{"type":395,"tag":431,"props":4146,"children":4147},{"style":665},[4148],{"type":401,"value":2629},{"type":395,"tag":431,"props":4150,"children":4151},{"style":671},[4152],{"type":401,"value":674},{"type":395,"tag":431,"props":4154,"children":4155},{"style":665},[4156],{"type":401,"value":4157},"test\n",{"type":395,"tag":431,"props":4159,"children":4160},{"class":433,"line":1490},[4161,4165,4169,4173,4177],{"type":395,"tag":431,"props":4162,"children":4163},{"style":665},[4164],{"type":401,"value":4131},{"type":395,"tag":431,"props":4166,"children":4167},{"style":671},[4168],{"type":401,"value":674},{"type":395,"tag":431,"props":4170,"children":4171},{"style":677},[4172],{"type":401,"value":1714},{"type":395,"tag":431,"props":4174,"children":4175},{"style":665},[4176],{"type":401,"value":819},{"type":395,"tag":431,"props":4178,"children":4179},{"style":718},[4180],{"type":401,"value":4181},"// 'test'\n",{"type":395,"tag":409,"props":4183,"children":4184},{},[4185],{"type":401,"value":4186},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":395,"tag":409,"props":4188,"children":4189},{},[4190],{"type":401,"value":4191},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":395,"tag":409,"props":4193,"children":4194},{},[4195],{"type":401,"value":4196},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":395,"tag":420,"props":4198,"children":4200},{"className":653,"code":4199,"language":655,"meta":389,"style":389},"class StaticClass extends null {\n  static pow () {}\n}\n",[4201],{"type":395,"tag":427,"props":4202,"children":4203},{"__ignoreMap":389},[4204,4229,4250],{"type":395,"tag":431,"props":4205,"children":4206},{"class":433,"line":434},[4207,4211,4216,4220,4225],{"type":395,"tag":431,"props":4208,"children":4209},{"style":988},[4210],{"type":401,"value":3533},{"type":395,"tag":431,"props":4212,"children":4213},{"style":3536},[4214],{"type":401,"value":4215}," StaticClass",{"type":395,"tag":431,"props":4217,"children":4218},{"style":3556},[4219],{"type":401,"value":3559},{"type":395,"tag":431,"props":4221,"children":4222},{"style":744},[4223],{"type":401,"value":4224}," null",{"type":395,"tag":431,"props":4226,"children":4227},{"style":671},[4228],{"type":401,"value":1329},{"type":395,"tag":431,"props":4230,"children":4231},{"class":433,"line":724},[4232,4237,4242,4246],{"type":395,"tag":431,"props":4233,"children":4234},{"style":3556},[4235],{"type":401,"value":4236},"  static",{"type":395,"tag":431,"props":4238,"children":4239},{"style":2648},[4240],{"type":401,"value":4241}," pow",{"type":395,"tag":431,"props":4243,"children":4244},{"style":671},[4245],{"type":401,"value":1324},{"type":395,"tag":431,"props":4247,"children":4248},{"style":671},[4249],{"type":401,"value":3120},{"type":395,"tag":431,"props":4251,"children":4252},{"class":433,"line":1368},[4253],{"type":395,"tag":431,"props":4254,"children":4255},{"style":671},[4256],{"type":401,"value":1415},{"type":395,"tag":409,"props":4258,"children":4259},{},[4260],{"type":401,"value":4261},"P196，这个 new.target.prototype 没看懂。",{"type":395,"tag":403,"props":4263,"children":4265},{"id":4264},"对象系统",[4266],{"type":401,"value":4264},{"type":395,"tag":409,"props":4268,"children":4269},{},[4270],{"type":401,"value":4271},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":395,"tag":409,"props":4273,"children":4274},{},[4275],{"type":401,"value":4276},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":395,"tag":409,"props":4278,"children":4279},{},[4280],{"type":401,"value":4281},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":395,"tag":420,"props":4283,"children":4285},{"className":653,"code":4284,"language":655,"meta":389,"style":389},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4286],{"type":395,"tag":427,"props":4287,"children":4288},{"__ignoreMap":389},[4289,4304,4327,4348],{"type":395,"tag":431,"props":4290,"children":4291},{"class":433,"line":434},[4292,4296,4300],{"type":395,"tag":431,"props":4293,"children":4294},{"style":988},[4295],{"type":401,"value":3533},{"type":395,"tag":431,"props":4297,"children":4298},{"style":3536},[4299],{"type":401,"value":1319},{"type":395,"tag":431,"props":4301,"children":4302},{"style":671},[4303],{"type":401,"value":3120},{"type":395,"tag":431,"props":4305,"children":4306},{"class":433,"line":724},[4307,4311,4315,4319,4323],{"type":395,"tag":431,"props":4308,"children":4309},{"style":988},[4310],{"type":401,"value":3533},{"type":395,"tag":431,"props":4312,"children":4313},{"style":3536},[4314],{"type":401,"value":2836},{"type":395,"tag":431,"props":4316,"children":4317},{"style":3556},[4318],{"type":401,"value":3559},{"type":395,"tag":431,"props":4320,"children":4321},{"style":3562},[4322],{"type":401,"value":1319},{"type":395,"tag":431,"props":4324,"children":4325},{"style":671},[4326],{"type":401,"value":3120},{"type":395,"tag":431,"props":4328,"children":4329},{"class":433,"line":1368},[4330,4335,4340,4344],{"type":395,"tag":431,"props":4331,"children":4332},{"style":1422},[4333],{"type":401,"value":4334},"B",{"type":395,"tag":431,"props":4336,"children":4337},{"style":461},[4338],{"type":401,"value":4339}," instanceof",{"type":395,"tag":431,"props":4341,"children":4342},{"style":3536},[4343],{"type":401,"value":1319},{"type":395,"tag":431,"props":4345,"children":4346},{"style":718},[4347],{"type":401,"value":835},{"type":395,"tag":431,"props":4349,"children":4350},{"class":433,"line":1409},[4351,4355,4359,4364,4368,4372,4376],{"type":395,"tag":431,"props":4352,"children":4353},{"style":1422},[4354],{"type":401,"value":1425},{"type":395,"tag":431,"props":4356,"children":4357},{"style":671},[4358],{"type":401,"value":674},{"type":395,"tag":431,"props":4360,"children":4361},{"style":677},[4362],{"type":401,"value":4363},"isPrototypeOf",{"type":395,"tag":431,"props":4365,"children":4366},{"style":665},[4367],{"type":401,"value":685},{"type":395,"tag":431,"props":4369,"children":4370},{"style":1422},[4371],{"type":401,"value":4334},{"type":395,"tag":431,"props":4373,"children":4374},{"style":665},[4375],{"type":401,"value":715},{"type":395,"tag":431,"props":4377,"children":4378},{"style":718},[4379],{"type":401,"value":765},{"type":395,"tag":409,"props":4381,"children":4382},{},[4383],{"type":401,"value":4384},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":395,"tag":409,"props":4386,"children":4387},{},[4388],{"type":401,"value":4389},"this 实在函数执行时动态传入的，规则有三：",{"type":395,"tag":509,"props":4391,"children":4392},{},[4393,4398,4403],{"type":395,"tag":513,"props":4394,"children":4395},{},[4396],{"type":401,"value":4397},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":395,"tag":513,"props":4399,"children":4400},{},[4401],{"type":401,"value":4402},"根据存取运算符将左操作符作为 this 传入",{"type":395,"tag":513,"props":4404,"children":4405},{},[4406],{"type":401,"value":4407},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":395,"tag":409,"props":4409,"children":4410},{},[4411],{"type":401,"value":4412},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":395,"tag":509,"props":4414,"children":4415},{},[4416,4421],{"type":395,"tag":513,"props":4417,"children":4418},{},[4419],{"type":401,"value":4420},"如果运行在严格模式中，不改变 this 的值，否则",{"type":395,"tag":513,"props":4422,"children":4423},{},[4424],{"type":401,"value":4425},"使用全局对象作为 this 值",{"type":395,"tag":409,"props":4427,"children":4428},{},[4429],{"type":401,"value":4430},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":395,"tag":409,"props":4432,"children":4433},{},[4434],{"type":401,"value":4435},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":395,"tag":509,"props":4437,"children":4438},{},[4439,4444],{"type":395,"tag":513,"props":4440,"children":4441},{},[4442],{"type":401,"value":4443},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":395,"tag":513,"props":4445,"children":4446},{},[4447],{"type":401,"value":4448},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":395,"tag":409,"props":4450,"children":4451},{},[4452],{"type":401,"value":4453},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":395,"tag":409,"props":4455,"children":4456},{},[4457],{"type":401,"value":4458},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":395,"tag":420,"props":4460,"children":4462},{"className":653,"code":4461,"language":655,"meta":389,"style":389},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4463],{"type":395,"tag":427,"props":4464,"children":4465},{"__ignoreMap":389},[4466,4474,4495,4502,4510],{"type":395,"tag":431,"props":4467,"children":4468},{"class":433,"line":434},[4469],{"type":395,"tag":431,"props":4470,"children":4471},{"style":718},[4472],{"type":401,"value":4473},"// 获得所有原生对象、宿主对象等\n",{"type":395,"tag":431,"props":4475,"children":4476},{"class":433,"line":724},[4477,4481,4485,4490],{"type":395,"tag":431,"props":4478,"children":4479},{"style":665},[4480],{"type":401,"value":668},{"type":395,"tag":431,"props":4482,"children":4483},{"style":671},[4484],{"type":401,"value":674},{"type":395,"tag":431,"props":4486,"children":4487},{"style":677},[4488],{"type":401,"value":4489},"getOwnPropertyNames",{"type":395,"tag":431,"props":4491,"children":4492},{"style":665},[4493],{"type":401,"value":4494},"(global)\n",{"type":395,"tag":431,"props":4496,"children":4497},{"class":433,"line":1368},[4498],{"type":395,"tag":431,"props":4499,"children":4500},{"emptyLinePlaceholder":388},[4501],{"type":401,"value":4084},{"type":395,"tag":431,"props":4503,"children":4504},{"class":433,"line":1409},[4505],{"type":395,"tag":431,"props":4506,"children":4507},{"style":718},[4508],{"type":401,"value":4509},"// 验证 undefined 是否存在 global 对象中\n",{"type":395,"tag":431,"props":4511,"children":4512},{"class":433,"line":1418},[4513,4517,4521,4526,4531,4535,4539,4544,4548,4552],{"type":395,"tag":431,"props":4514,"children":4515},{"style":665},[4516],{"type":401,"value":668},{"type":395,"tag":431,"props":4518,"children":4519},{"style":671},[4520],{"type":401,"value":674},{"type":395,"tag":431,"props":4522,"children":4523},{"style":677},[4524],{"type":401,"value":4525},"getOwnPropertyDescriptor",{"type":395,"tag":431,"props":4527,"children":4528},{"style":665},[4529],{"type":401,"value":4530},"(global",{"type":395,"tag":431,"props":4532,"children":4533},{"style":671},[4534],{"type":401,"value":701},{"type":395,"tag":431,"props":4536,"children":4537},{"style":444},[4538],{"type":401,"value":447},{"type":395,"tag":431,"props":4540,"children":4541},{"style":450},[4542],{"type":401,"value":4543},"undefined",{"type":395,"tag":431,"props":4545,"children":4546},{"style":444},[4547],{"type":401,"value":458},{"type":395,"tag":431,"props":4549,"children":4550},{"style":665},[4551],{"type":401,"value":715},{"type":395,"tag":431,"props":4553,"children":4554},{"style":718},[4555],{"type":401,"value":4556},"// {value: undefined /* ... */ }\n",{"type":395,"tag":409,"props":4558,"children":4559},{},[4560],{"type":401,"value":4561},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":395,"tag":409,"props":4563,"children":4564},{},[4565],{"type":401,"value":4566},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":395,"tag":409,"props":4568,"children":4569},{},[4570],{"type":401,"value":4571},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":395,"tag":1003,"props":4573,"children":4574},{},[4575,4596],{"type":395,"tag":1007,"props":4576,"children":4577},{},[4578],{"type":395,"tag":1011,"props":4579,"children":4580},{},[4581,4586,4591],{"type":395,"tag":1015,"props":4582,"children":4583},{},[4584],{"type":401,"value":4585},"对象",{"type":395,"tag":1015,"props":4587,"children":4588},{},[4589],{"type":401,"value":4590},"特殊效果",{"type":395,"tag":1015,"props":4592,"children":4593},{},[4594],{"type":401,"value":4595},"注",{"type":395,"tag":1026,"props":4597,"children":4598},{},[4599,4617,4634,4650,4666,4682,4700,4716,4732,4748],{"type":395,"tag":1011,"props":4600,"children":4601},{},[4602,4607,4612],{"type":395,"tag":1033,"props":4603,"children":4604},{},[4605],{"type":401,"value":4606},"Number、String、Boolean、Symbol",{"type":395,"tag":1033,"props":4608,"children":4609},{},[4610],{"type":401,"value":4611},"包装类",{"type":395,"tag":1033,"props":4613,"children":4614},{},[4615],{"type":401,"value":4616},"({}).toString()",{"type":395,"tag":1011,"props":4618,"children":4619},{},[4620,4624,4629],{"type":395,"tag":1033,"props":4621,"children":4622},{},[4623],{"type":401,"value":668},{"type":395,"tag":1033,"props":4625,"children":4626},{},[4627],{"type":401,"value":4628},"调用包装类",{"type":395,"tag":1033,"props":4630,"children":4631},{},[4632],{"type":401,"value":4633},"new Object(5) + new Object(3)",{"type":395,"tag":1011,"props":4635,"children":4636},{},[4637,4642,4647],{"type":395,"tag":1033,"props":4638,"children":4639},{},[4640],{"type":401,"value":4641},"Array",{"type":395,"tag":1033,"props":4643,"children":4644},{},[4645],{"type":401,"value":4646},"自动维护 length 属性",{"type":395,"tag":1033,"props":4648,"children":4649},{},[],{"type":395,"tag":1011,"props":4651,"children":4652},{},[4653,4658,4663],{"type":395,"tag":1033,"props":4654,"children":4655},{},[4656],{"type":401,"value":4657},"Date",{"type":395,"tag":1033,"props":4659,"children":4660},{},[4661],{"type":401,"value":4662},"日期对象相关的运算",{"type":395,"tag":1033,"props":4664,"children":4665},{},[],{"type":395,"tag":1011,"props":4667,"children":4668},{},[4669,4674,4679],{"type":395,"tag":1033,"props":4670,"children":4671},{},[4672],{"type":401,"value":4673},"Function",{"type":395,"tag":1033,"props":4675,"children":4676},{},[4677],{"type":401,"value":4678},"创建可执行的函数",{"type":395,"tag":1033,"props":4680,"children":4681},{},[],{"type":395,"tag":1011,"props":4683,"children":4684},{},[4685,4690,4695],{"type":395,"tag":1033,"props":4686,"children":4687},{},[4688],{"type":401,"value":4689},"RegExp",{"type":395,"tag":1033,"props":4691,"children":4692},{},[4693],{"type":401,"value":4694},"可执行",{"type":395,"tag":1033,"props":4696,"children":4697},{},[4698],{"type":401,"value":4699},"仅在某些宿主中",{"type":395,"tag":1011,"props":4701,"children":4702},{},[4703,4708,4713],{"type":395,"tag":1033,"props":4704,"children":4705},{},[4706],{"type":401,"value":4707},"Proxy",{"type":395,"tag":1033,"props":4709,"children":4710},{},[4711],{"type":401,"value":4712},"代理目标对象、回收代理",{"type":395,"tag":1033,"props":4714,"children":4715},{},[],{"type":395,"tag":1011,"props":4717,"children":4718},{},[4719,4724,4729],{"type":395,"tag":1033,"props":4720,"children":4721},{},[4722],{"type":401,"value":4723},"TypedArray、DataView",{"type":395,"tag":1033,"props":4725,"children":4726},{},[4727],{"type":401,"value":4728},"创建及绑定 buffer",{"type":395,"tag":1033,"props":4730,"children":4731},{},[],{"type":395,"tag":1011,"props":4733,"children":4734},{},[4735,4740,4745],{"type":395,"tag":1033,"props":4736,"children":4737},{},[4738],{"type":401,"value":4739},"ArrayBuffer、SharedArray、Buffer",{"type":395,"tag":1033,"props":4741,"children":4742},{},[4743],{"type":401,"value":4744},"初始化 buffer 并维护 byteLength 属性",{"type":395,"tag":1033,"props":4746,"children":4747},{},[],{"type":395,"tag":1011,"props":4749,"children":4750},{},[4751,4756,4761],{"type":395,"tag":1033,"props":4752,"children":4753},{},[4754],{"type":401,"value":4755},"WeakMap、WeakSet",{"type":395,"tag":1033,"props":4757,"children":4758},{},[4759],{"type":401,"value":4760},"不修改引用并自动回收对象",{"type":395,"tag":1033,"props":4762,"children":4763},{},[],{"type":395,"tag":409,"props":4765,"children":4766},{},[4767],{"type":401,"value":4768},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":395,"tag":420,"props":4770,"children":4772},{"className":653,"code":4771,"language":655,"meta":389,"style":389},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4773],{"type":395,"tag":427,"props":4774,"children":4775},{"__ignoreMap":389},[4776,4809,4846,4922,4935,4942,4994,5001],{"type":395,"tag":431,"props":4777,"children":4778},{"class":433,"line":434},[4779,4783,4788,4792,4796,4801,4805],{"type":395,"tag":431,"props":4780,"children":4781},{"style":988},[4782],{"type":401,"value":1314},{"type":395,"tag":431,"props":4784,"children":4785},{"style":677},[4786],{"type":401,"value":4787}," MyDate",{"type":395,"tag":431,"props":4789,"children":4790},{"style":671},[4791],{"type":401,"value":685},{"type":395,"tag":431,"props":4793,"children":4794},{"style":461},[4795],{"type":401,"value":1276},{"type":395,"tag":431,"props":4797,"children":4798},{"style":1615},[4799],{"type":401,"value":4800},"args",{"type":395,"tag":431,"props":4802,"children":4803},{"style":671},[4804],{"type":401,"value":1623},{"type":395,"tag":431,"props":4806,"children":4807},{"style":671},[4808],{"type":401,"value":1329},{"type":395,"tag":431,"props":4810,"children":4811},{"class":433,"line":724},[4812,4816,4821,4825,4830,4834,4838,4842],{"type":395,"tag":431,"props":4813,"children":4814},{"style":988},[4815],{"type":401,"value":3766},{"type":395,"tag":431,"props":4817,"children":4818},{"style":1422},[4819],{"type":401,"value":4820}," Base",{"type":395,"tag":431,"props":4822,"children":4823},{"style":461},[4824],{"type":401,"value":1352},{"type":395,"tag":431,"props":4826,"children":4827},{"style":2811},[4828],{"type":401,"value":4829}," Date",{"type":395,"tag":431,"props":4831,"children":4832},{"style":671},[4833],{"type":401,"value":674},{"type":395,"tag":431,"props":4835,"children":4836},{"style":1422},[4837],{"type":401,"value":2822},{"type":395,"tag":431,"props":4839,"children":4840},{"style":671},[4841],{"type":401,"value":674},{"type":395,"tag":431,"props":4843,"children":4844},{"style":1422},[4845],{"type":401,"value":3789},{"type":395,"tag":431,"props":4847,"children":4848},{"class":433,"line":1368},[4849,4853,4858,4862,4866,4870,4874,4878,4882,4886,4890,4894,4898,4902,4906,4910,4914,4918],{"type":395,"tag":431,"props":4850,"children":4851},{"style":988},[4852],{"type":401,"value":3766},{"type":395,"tag":431,"props":4854,"children":4855},{"style":1422},[4856],{"type":401,"value":4857}," instance",{"type":395,"tag":431,"props":4859,"children":4860},{"style":461},[4861],{"type":401,"value":1352},{"type":395,"tag":431,"props":4863,"children":4864},{"style":665},[4865],{"type":401,"value":4101},{"type":395,"tag":431,"props":4867,"children":4868},{"style":671},[4869],{"type":401,"value":674},{"type":395,"tag":431,"props":4871,"children":4872},{"style":677},[4873],{"type":401,"value":3630},{"type":395,"tag":431,"props":4875,"children":4876},{"style":1386},[4877],{"type":401,"value":685},{"type":395,"tag":431,"props":4879,"children":4880},{"style":461},[4881],{"type":401,"value":1504},{"type":395,"tag":431,"props":4883,"children":4884},{"style":677},[4885],{"type":401,"value":4820},{"type":395,"tag":431,"props":4887,"children":4888},{"style":1386},[4889],{"type":401,"value":685},{"type":395,"tag":431,"props":4891,"children":4892},{"style":461},[4893],{"type":401,"value":1276},{"type":395,"tag":431,"props":4895,"children":4896},{"style":665},[4897],{"type":401,"value":4800},{"type":395,"tag":431,"props":4899,"children":4900},{"style":1386},[4901],{"type":401,"value":1623},{"type":395,"tag":431,"props":4903,"children":4904},{"style":671},[4905],{"type":401,"value":701},{"type":395,"tag":431,"props":4907,"children":4908},{"style":2811},[4909],{"type":401,"value":4787},{"type":395,"tag":431,"props":4911,"children":4912},{"style":671},[4913],{"type":401,"value":674},{"type":395,"tag":431,"props":4915,"children":4916},{"style":1422},[4917],{"type":401,"value":2822},{"type":395,"tag":431,"props":4919,"children":4920},{"style":1386},[4921],{"type":401,"value":1406},{"type":395,"tag":431,"props":4923,"children":4924},{"class":433,"line":1409},[4925,4930],{"type":395,"tag":431,"props":4926,"children":4927},{"style":1692},[4928],{"type":401,"value":4929},"  return",{"type":395,"tag":431,"props":4931,"children":4932},{"style":665},[4933],{"type":401,"value":4934}," instance\n",{"type":395,"tag":431,"props":4936,"children":4937},{"class":433,"line":1418},[4938],{"type":395,"tag":431,"props":4939,"children":4940},{"style":671},[4941],{"type":401,"value":1415},{"type":395,"tag":431,"props":4943,"children":4944},{"class":433,"line":1453},[4945,4949,4953,4957,4961,4966,4970,4974,4978,4982,4986,4990],{"type":395,"tag":431,"props":4946,"children":4947},{"style":665},[4948],{"type":401,"value":668},{"type":395,"tag":431,"props":4950,"children":4951},{"style":671},[4952],{"type":401,"value":674},{"type":395,"tag":431,"props":4954,"children":4955},{"style":677},[4956],{"type":401,"value":3630},{"type":395,"tag":431,"props":4958,"children":4959},{"style":665},[4960],{"type":401,"value":685},{"type":395,"tag":431,"props":4962,"children":4963},{"style":2811},[4964],{"type":401,"value":4965},"MyDate",{"type":395,"tag":431,"props":4967,"children":4968},{"style":671},[4969],{"type":401,"value":674},{"type":395,"tag":431,"props":4971,"children":4972},{"style":1422},[4973],{"type":401,"value":2822},{"type":395,"tag":431,"props":4975,"children":4976},{"style":671},[4977],{"type":401,"value":701},{"type":395,"tag":431,"props":4979,"children":4980},{"style":2811},[4981],{"type":401,"value":4829},{"type":395,"tag":431,"props":4983,"children":4984},{"style":671},[4985],{"type":401,"value":674},{"type":395,"tag":431,"props":4987,"children":4988},{"style":1422},[4989],{"type":401,"value":2822},{"type":395,"tag":431,"props":4991,"children":4992},{"style":665},[4993],{"type":401,"value":1406},{"type":395,"tag":431,"props":4995,"children":4996},{"class":433,"line":1490},[4997],{"type":395,"tag":431,"props":4998,"children":4999},{"emptyLinePlaceholder":388},[5000],{"type":401,"value":4084},{"type":395,"tag":431,"props":5002,"children":5003},{"class":433,"line":1498},[5004,5009,5013,5017,5021,5025,5029,5033],{"type":395,"tag":431,"props":5005,"children":5006},{"style":665},[5007],{"type":401,"value":5008},"console",{"type":395,"tag":431,"props":5010,"children":5011},{"style":671},[5012],{"type":401,"value":674},{"type":395,"tag":431,"props":5014,"children":5015},{"style":677},[5016],{"type":401,"value":1383},{"type":395,"tag":431,"props":5018,"children":5019},{"style":665},[5020],{"type":401,"value":685},{"type":395,"tag":431,"props":5022,"children":5023},{"style":461},[5024],{"type":401,"value":1504},{"type":395,"tag":431,"props":5026,"children":5027},{"style":677},[5028],{"type":401,"value":4787},{"type":395,"tag":431,"props":5030,"children":5031},{"style":665},[5032],{"type":401,"value":803},{"type":395,"tag":431,"props":5034,"children":5035},{"style":718},[5036],{"type":401,"value":5037},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":395,"tag":403,"props":5039,"children":5041},{"id":5040},"可定制的对象属性",[5042],{"type":401,"value":5040},{"type":395,"tag":409,"props":5044,"children":5045},{},[5046],{"type":401,"value":5047},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":395,"tag":509,"props":5049,"children":5050},{},[5051,5056,5061],{"type":395,"tag":513,"props":5052,"children":5053},{},[5054],{"type":401,"value":5055},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":395,"tag":513,"props":5057,"children":5058},{},[5059],{"type":401,"value":5060},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":395,"tag":513,"props":5062,"children":5063},{},[5064],{"type":401,"value":5065},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":395,"tag":409,"props":5067,"children":5068},{},[5069],{"type":401,"value":5070},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":395,"tag":1003,"props":5072,"children":5073},{},[5074,5100],{"type":395,"tag":1007,"props":5075,"children":5076},{},[5077],{"type":395,"tag":1011,"props":5078,"children":5079},{},[5080,5085,5090,5095],{"type":395,"tag":1015,"props":5081,"children":5082},{},[5083],{"type":401,"value":5084},"Object.xxx 方法",{"type":395,"tag":1015,"props":5086,"children":5087},{},[5088],{"type":401,"value":5089},"方法说明",{"type":395,"tag":1015,"props":5091,"children":5092},{},[5093],{"type":401,"value":5094},"对自有属性表的操作",{"type":395,"tag":1015,"props":5096,"children":5097},{},[5098],{"type":401,"value":5099},"检查方法",{"type":395,"tag":1026,"props":5101,"children":5102},{},[5103,5132,5160],{"type":395,"tag":1011,"props":5104,"children":5105},{},[5106,5111,5116,5127],{"type":395,"tag":1033,"props":5107,"children":5108},{},[5109],{"type":401,"value":5110},"preventExtensions(obj)",{"type":395,"tag":1033,"props":5112,"children":5113},{},[5114],{"type":401,"value":5115},"使实例不能添加新属性，也不可重置原型",{"type":395,"tag":1033,"props":5117,"children":5118},{},[5119,5125],{"type":395,"tag":5120,"props":5121,"children":5122},"del",{},[5123],{"type":401,"value":5124},"add",{"type":401,"value":5126},"、delete、update",{"type":395,"tag":1033,"props":5128,"children":5129},{},[5130],{"type":401,"value":5131},"isExtensible(obj)",{"type":395,"tag":1011,"props":5133,"children":5134},{},[5135,5140,5145,5155],{"type":395,"tag":1033,"props":5136,"children":5137},{},[5138],{"type":401,"value":5139},"seal(obj)",{"type":395,"tag":1033,"props":5141,"children":5142},{},[5143],{"type":401,"value":5144},"使实例不能新增新属性，也不能删除既有属性",{"type":395,"tag":1033,"props":5146,"children":5147},{},[5148,5153],{"type":395,"tag":5120,"props":5149,"children":5150},{},[5151],{"type":401,"value":5152},"add、delete",{"type":401,"value":5154},"、update",{"type":395,"tag":1033,"props":5156,"children":5157},{},[5158],{"type":401,"value":5159},"isSealed(obj)",{"type":395,"tag":1011,"props":5161,"children":5162},{},[5163,5168,5173,5181],{"type":395,"tag":1033,"props":5164,"children":5165},{},[5166],{"type":401,"value":5167},"freeze(obj)",{"type":395,"tag":1033,"props":5169,"children":5170},{},[5171],{"type":401,"value":5172},"使实例所有属性只读，且不能再添加、删除属性",{"type":395,"tag":1033,"props":5174,"children":5175},{},[5176],{"type":395,"tag":5120,"props":5177,"children":5178},{},[5179],{"type":401,"value":5180},"add、delete、update",{"type":395,"tag":1033,"props":5182,"children":5183},{},[5184],{"type":401,"value":5185},"isFrozen(obj)",{"type":395,"tag":409,"props":5187,"children":5188},{},[5189],{"type":401,"value":5190},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":395,"tag":509,"props":5192,"children":5193},{},[5194,5199,5204],{"type":395,"tag":513,"props":5195,"children":5196},{},[5197],{"type":401,"value":5198},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":395,"tag":513,"props":5200,"children":5201},{},[5202],{"type":401,"value":5203},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":395,"tag":513,"props":5205,"children":5206},{},[5207],{"type":401,"value":5208},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":395,"tag":403,"props":5210,"children":5212},{"id":5211},"运行期侵入",[5213],{"type":401,"value":5211},{"type":395,"tag":409,"props":5215,"children":5216},{},[5217],{"type":401,"value":5218},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":395,"tag":409,"props":5220,"children":5221},{},[5222],{"type":401,"value":5223},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":395,"tag":409,"props":5225,"children":5226},{},[5227],{"type":401,"value":5228},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":395,"tag":1003,"props":5230,"children":5231},{},[5232,5248],{"type":395,"tag":1007,"props":5233,"children":5234},{},[5235],{"type":395,"tag":1011,"props":5236,"children":5237},{},[5238,5243],{"type":395,"tag":1015,"props":5239,"children":5240},{},[5241],{"type":401,"value":5242},"内部方法",{"type":395,"tag":1015,"props":5244,"children":5245},{},[5246],{"type":401,"value":5247},"handler.xxx",{"type":395,"tag":1026,"props":5249,"children":5250},{},[5251,5264,5277,5290,5303,5316,5329,5342,5355,5368,5381,5394,5407],{"type":395,"tag":1011,"props":5252,"children":5253},{},[5254,5259],{"type":395,"tag":1033,"props":5255,"children":5256},{},[5257],{"type":401,"value":5258},"[[GetPrototypeOf]]",{"type":395,"tag":1033,"props":5260,"children":5261},{},[5262],{"type":401,"value":5263},"getPrototypeOf()",{"type":395,"tag":1011,"props":5265,"children":5266},{},[5267,5272],{"type":395,"tag":1033,"props":5268,"children":5269},{},[5270],{"type":401,"value":5271},"[[SetPrototypeOf]]",{"type":395,"tag":1033,"props":5273,"children":5274},{},[5275],{"type":401,"value":5276},"setPrototypeOf()",{"type":395,"tag":1011,"props":5278,"children":5279},{},[5280,5285],{"type":395,"tag":1033,"props":5281,"children":5282},{},[5283],{"type":401,"value":5284},"[[IsExtensible]]",{"type":395,"tag":1033,"props":5286,"children":5287},{},[5288],{"type":401,"value":5289},"isExtensible()",{"type":395,"tag":1011,"props":5291,"children":5292},{},[5293,5298],{"type":395,"tag":1033,"props":5294,"children":5295},{},[5296],{"type":401,"value":5297},"[[PreventExtensions]]",{"type":395,"tag":1033,"props":5299,"children":5300},{},[5301],{"type":401,"value":5302},"preventExtensions()",{"type":395,"tag":1011,"props":5304,"children":5305},{},[5306,5311],{"type":395,"tag":1033,"props":5307,"children":5308},{},[5309],{"type":401,"value":5310},"[[GetOwnProperty]]",{"type":395,"tag":1033,"props":5312,"children":5313},{},[5314],{"type":401,"value":5315},"getOwnPropertyDescriptor()",{"type":395,"tag":1011,"props":5317,"children":5318},{},[5319,5324],{"type":395,"tag":1033,"props":5320,"children":5321},{},[5322],{"type":401,"value":5323},"[[HasProperty]]",{"type":395,"tag":1033,"props":5325,"children":5326},{},[5327],{"type":401,"value":5328},"has()",{"type":395,"tag":1011,"props":5330,"children":5331},{},[5332,5337],{"type":395,"tag":1033,"props":5333,"children":5334},{},[5335],{"type":401,"value":5336},"[[DefineOwnProperty]]",{"type":395,"tag":1033,"props":5338,"children":5339},{},[5340],{"type":401,"value":5341},"defineProperty()",{"type":395,"tag":1011,"props":5343,"children":5344},{},[5345,5350],{"type":395,"tag":1033,"props":5346,"children":5347},{},[5348],{"type":401,"value":5349},"[[Get]]",{"type":395,"tag":1033,"props":5351,"children":5352},{},[5353],{"type":401,"value":5354},"get()",{"type":395,"tag":1011,"props":5356,"children":5357},{},[5358,5363],{"type":395,"tag":1033,"props":5359,"children":5360},{},[5361],{"type":401,"value":5362},"[[Set]]",{"type":395,"tag":1033,"props":5364,"children":5365},{},[5366],{"type":401,"value":5367},"set()",{"type":395,"tag":1011,"props":5369,"children":5370},{},[5371,5376],{"type":395,"tag":1033,"props":5372,"children":5373},{},[5374],{"type":401,"value":5375},"[[Delete]]",{"type":395,"tag":1033,"props":5377,"children":5378},{},[5379],{"type":401,"value":5380},"deleteProperty()",{"type":395,"tag":1011,"props":5382,"children":5383},{},[5384,5389],{"type":395,"tag":1033,"props":5385,"children":5386},{},[5387],{"type":401,"value":5388},"[[OwnPropertyKeys]]",{"type":395,"tag":1033,"props":5390,"children":5391},{},[5392],{"type":401,"value":5393},"ownKeys()",{"type":395,"tag":1011,"props":5395,"children":5396},{},[5397,5402],{"type":395,"tag":1033,"props":5398,"children":5399},{},[5400],{"type":401,"value":5401},"[[Call]]",{"type":395,"tag":1033,"props":5403,"children":5404},{},[5405],{"type":401,"value":5406},"apply()",{"type":395,"tag":1011,"props":5408,"children":5409},{},[5410,5415],{"type":395,"tag":1033,"props":5411,"children":5412},{},[5413],{"type":401,"value":5414},"[[Construct]]",{"type":395,"tag":1033,"props":5416,"children":5417},{},[5418],{"type":401,"value":5419},"construct()",{"type":395,"tag":409,"props":5421,"children":5422},{},[5423],{"type":401,"value":5424},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":395,"tag":509,"props":5426,"children":5427},{},[5428,5433],{"type":395,"tag":513,"props":5429,"children":5430},{},[5431],{"type":401,"value":5432},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":395,"tag":513,"props":5434,"children":5435},{},[5436],{"type":401,"value":5437},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":395,"tag":409,"props":5439,"children":5440},{},[5441],{"type":401,"value":5442},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":395,"tag":420,"props":5444,"children":5446},{"className":653,"code":5445,"language":655,"meta":389,"style":389},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5447],{"type":395,"tag":427,"props":5448,"children":5449},{"__ignoreMap":389},[5450,5488,5537,5578,5656,5700,5765,5772,5806,5846,5885,5905,5922,5960,5967,5974,5985],{"type":395,"tag":431,"props":5451,"children":5452},{"class":433,"line":434},[5453,5457,5462,5466,5471,5475,5480,5484],{"type":395,"tag":431,"props":5454,"children":5455},{"style":988},[5456],{"type":401,"value":1314},{"type":395,"tag":431,"props":5458,"children":5459},{"style":677},[5460],{"type":401,"value":5461}," intrudeOnPrototype",{"type":395,"tag":431,"props":5463,"children":5464},{"style":671},[5465],{"type":401,"value":685},{"type":395,"tag":431,"props":5467,"children":5468},{"style":1615},[5469],{"type":401,"value":5470},"Fn",{"type":395,"tag":431,"props":5472,"children":5473},{"style":671},[5474],{"type":401,"value":701},{"type":395,"tag":431,"props":5476,"children":5477},{"style":1615},[5478],{"type":401,"value":5479}," handler",{"type":395,"tag":431,"props":5481,"children":5482},{"style":671},[5483],{"type":401,"value":1623},{"type":395,"tag":431,"props":5485,"children":5486},{"style":671},[5487],{"type":401,"value":1329},{"type":395,"tag":431,"props":5489,"children":5490},{"class":433,"line":724},[5491,5495,5500,5504,5508,5512,5517,5521,5525,5529,5533],{"type":395,"tag":431,"props":5492,"children":5493},{"style":988},[5494],{"type":401,"value":3766},{"type":395,"tag":431,"props":5496,"children":5497},{"style":1422},[5498],{"type":401,"value":5499}," originPrototype",{"type":395,"tag":431,"props":5501,"children":5502},{"style":461},[5503],{"type":401,"value":1352},{"type":395,"tag":431,"props":5505,"children":5506},{"style":665},[5507],{"type":401,"value":4101},{"type":395,"tag":431,"props":5509,"children":5510},{"style":671},[5511],{"type":401,"value":674},{"type":395,"tag":431,"props":5513,"children":5514},{"style":677},[5515],{"type":401,"value":5516},"getPrototypeOf",{"type":395,"tag":431,"props":5518,"children":5519},{"style":1386},[5520],{"type":401,"value":685},{"type":395,"tag":431,"props":5522,"children":5523},{"style":2811},[5524],{"type":401,"value":5470},{"type":395,"tag":431,"props":5526,"children":5527},{"style":671},[5528],{"type":401,"value":674},{"type":395,"tag":431,"props":5530,"children":5531},{"style":1422},[5532],{"type":401,"value":2822},{"type":395,"tag":431,"props":5534,"children":5535},{"style":1386},[5536],{"type":401,"value":1406},{"type":395,"tag":431,"props":5538,"children":5539},{"class":433,"line":1368},[5540,5544,5549,5553,5557,5561,5565,5569,5574],{"type":395,"tag":431,"props":5541,"children":5542},{"style":988},[5543],{"type":401,"value":3766},{"type":395,"tag":431,"props":5545,"children":5546},{"style":1422},[5547],{"type":401,"value":5548}," target",{"type":395,"tag":431,"props":5550,"children":5551},{"style":461},[5552],{"type":401,"value":1352},{"type":395,"tag":431,"props":5554,"children":5555},{"style":665},[5556],{"type":401,"value":4101},{"type":395,"tag":431,"props":5558,"children":5559},{"style":671},[5560],{"type":401,"value":674},{"type":395,"tag":431,"props":5562,"children":5563},{"style":677},[5564],{"type":401,"value":4110},{"type":395,"tag":431,"props":5566,"children":5567},{"style":1386},[5568],{"type":401,"value":685},{"type":395,"tag":431,"props":5570,"children":5571},{"style":665},[5572],{"type":401,"value":5573},"originPrototype",{"type":395,"tag":431,"props":5575,"children":5576},{"style":1386},[5577],{"type":401,"value":1406},{"type":395,"tag":431,"props":5579,"children":5580},{"class":433,"line":1409},[5581,5585,5589,5595,5599,5604,5608,5613,5617,5621,5626,5630,5635,5639,5644,5648,5652],{"type":395,"tag":431,"props":5582,"children":5583},{"style":988},[5584],{"type":401,"value":3766},{"type":395,"tag":431,"props":5586,"children":5587},{"style":671},[5588],{"type":401,"value":1700},{"type":395,"tag":431,"props":5590,"children":5592},{"style":5591},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5593],{"type":401,"value":5594}," proxy",{"type":395,"tag":431,"props":5596,"children":5597},{"style":671},[5598],{"type":401,"value":1848},{"type":395,"tag":431,"props":5600,"children":5601},{"style":1422},[5602],{"type":401,"value":5603}," newPrototype",{"type":395,"tag":431,"props":5605,"children":5606},{"style":671},[5607],{"type":401,"value":701},{"type":395,"tag":431,"props":5609,"children":5610},{"style":1422},[5611],{"type":401,"value":5612}," revoke",{"type":395,"tag":431,"props":5614,"children":5615},{"style":671},[5616],{"type":401,"value":1723},{"type":395,"tag":431,"props":5618,"children":5619},{"style":461},[5620],{"type":401,"value":1352},{"type":395,"tag":431,"props":5622,"children":5623},{"style":665},[5624],{"type":401,"value":5625}," Proxy",{"type":395,"tag":431,"props":5627,"children":5628},{"style":671},[5629],{"type":401,"value":674},{"type":395,"tag":431,"props":5631,"children":5632},{"style":677},[5633],{"type":401,"value":5634},"revocable",{"type":395,"tag":431,"props":5636,"children":5637},{"style":1386},[5638],{"type":401,"value":685},{"type":395,"tag":431,"props":5640,"children":5641},{"style":665},[5642],{"type":401,"value":5643},"target",{"type":395,"tag":431,"props":5645,"children":5646},{"style":671},[5647],{"type":401,"value":701},{"type":395,"tag":431,"props":5649,"children":5650},{"style":665},[5651],{"type":401,"value":5479},{"type":395,"tag":431,"props":5653,"children":5654},{"style":1386},[5655],{"type":401,"value":1406},{"type":395,"tag":431,"props":5657,"children":5658},{"class":433,"line":1418},[5659,5664,5668,5672,5676,5680,5684,5688,5692,5696],{"type":395,"tag":431,"props":5660,"children":5661},{"style":665},[5662],{"type":401,"value":5663},"  Object",{"type":395,"tag":431,"props":5665,"children":5666},{"style":671},[5667],{"type":401,"value":674},{"type":395,"tag":431,"props":5669,"children":5670},{"style":677},[5671],{"type":401,"value":3630},{"type":395,"tag":431,"props":5673,"children":5674},{"style":1386},[5675],{"type":401,"value":685},{"type":395,"tag":431,"props":5677,"children":5678},{"style":2811},[5679],{"type":401,"value":5470},{"type":395,"tag":431,"props":5681,"children":5682},{"style":671},[5683],{"type":401,"value":674},{"type":395,"tag":431,"props":5685,"children":5686},{"style":1422},[5687],{"type":401,"value":2822},{"type":395,"tag":431,"props":5689,"children":5690},{"style":671},[5691],{"type":401,"value":701},{"type":395,"tag":431,"props":5693,"children":5694},{"style":665},[5695],{"type":401,"value":5603},{"type":395,"tag":431,"props":5697,"children":5698},{"style":1386},[5699],{"type":401,"value":1406},{"type":395,"tag":431,"props":5701,"children":5702},{"class":433,"line":1453},[5703,5707,5711,5716,5720,5724,5728,5732,5736,5740,5744,5748,5752,5756,5760],{"type":395,"tag":431,"props":5704,"children":5705},{"style":1692},[5706],{"type":401,"value":4929},{"type":395,"tag":431,"props":5708,"children":5709},{"style":671},[5710],{"type":401,"value":1324},{"type":395,"tag":431,"props":5712,"children":5713},{"style":988},[5714],{"type":401,"value":5715}," =>",{"type":395,"tag":431,"props":5717,"children":5718},{"style":677},[5719],{"type":401,"value":5612},{"type":395,"tag":431,"props":5721,"children":5722},{"style":1386},[5723],{"type":401,"value":685},{"type":395,"tag":431,"props":5725,"children":5726},{"style":665},[5727],{"type":401,"value":668},{"type":395,"tag":431,"props":5729,"children":5730},{"style":671},[5731],{"type":401,"value":674},{"type":395,"tag":431,"props":5733,"children":5734},{"style":677},[5735],{"type":401,"value":3630},{"type":395,"tag":431,"props":5737,"children":5738},{"style":1386},[5739],{"type":401,"value":685},{"type":395,"tag":431,"props":5741,"children":5742},{"style":2811},[5743],{"type":401,"value":5470},{"type":395,"tag":431,"props":5745,"children":5746},{"style":671},[5747],{"type":401,"value":674},{"type":395,"tag":431,"props":5749,"children":5750},{"style":1422},[5751],{"type":401,"value":2822},{"type":395,"tag":431,"props":5753,"children":5754},{"style":671},[5755],{"type":401,"value":701},{"type":395,"tag":431,"props":5757,"children":5758},{"style":665},[5759],{"type":401,"value":5499},{"type":395,"tag":431,"props":5761,"children":5762},{"style":1386},[5763],{"type":401,"value":5764},"))\n",{"type":395,"tag":431,"props":5766,"children":5767},{"class":433,"line":1490},[5768],{"type":395,"tag":431,"props":5769,"children":5770},{"style":671},[5771],{"type":401,"value":1415},{"type":395,"tag":431,"props":5773,"children":5774},{"class":433,"line":1498},[5775,5780,5785,5789,5793,5798,5802],{"type":395,"tag":431,"props":5776,"children":5777},{"style":988},[5778],{"type":401,"value":5779},"const",{"type":395,"tag":431,"props":5781,"children":5782},{"style":1422},[5783],{"type":401,"value":5784}," recovery",{"type":395,"tag":431,"props":5786,"children":5787},{"style":461},[5788],{"type":401,"value":1352},{"type":395,"tag":431,"props":5790,"children":5791},{"style":677},[5792],{"type":401,"value":5461},{"type":395,"tag":431,"props":5794,"children":5795},{"style":665},[5796],{"type":401,"value":5797},"(String",{"type":395,"tag":431,"props":5799,"children":5800},{"style":671},[5801],{"type":401,"value":701},{"type":395,"tag":431,"props":5803,"children":5804},{"style":671},[5805],{"type":401,"value":1329},{"type":395,"tag":431,"props":5807,"children":5808},{"class":433,"line":1525},[5809,5813,5817,5821,5825,5829,5833,5838,5842],{"type":395,"tag":431,"props":5810,"children":5811},{"style":677},[5812],{"type":401,"value":2709},{"type":395,"tag":431,"props":5814,"children":5815},{"style":671},[5816],{"type":401,"value":1848},{"type":395,"tag":431,"props":5818,"children":5819},{"style":988},[5820],{"type":401,"value":1442},{"type":395,"tag":431,"props":5822,"children":5823},{"style":671},[5824],{"type":401,"value":1921},{"type":395,"tag":431,"props":5826,"children":5827},{"style":1615},[5828],{"type":401,"value":5643},{"type":395,"tag":431,"props":5830,"children":5831},{"style":671},[5832],{"type":401,"value":701},{"type":395,"tag":431,"props":5834,"children":5835},{"style":1615},[5836],{"type":401,"value":5837}," prop",{"type":395,"tag":431,"props":5839,"children":5840},{"style":671},[5841],{"type":401,"value":1623},{"type":395,"tag":431,"props":5843,"children":5844},{"style":671},[5845],{"type":401,"value":1329},{"type":395,"tag":431,"props":5847,"children":5848},{"class":433,"line":2101},[5849,5853,5857,5861,5865,5869,5873,5877,5881],{"type":395,"tag":431,"props":5850,"children":5851},{"style":1692},[5852],{"type":401,"value":1982},{"type":395,"tag":431,"props":5854,"children":5855},{"style":1386},[5856],{"type":401,"value":1921},{"type":395,"tag":431,"props":5858,"children":5859},{"style":665},[5860],{"type":401,"value":3029},{"type":395,"tag":431,"props":5862,"children":5863},{"style":461},[5864],{"type":401,"value":1995},{"type":395,"tag":431,"props":5866,"children":5867},{"style":444},[5868],{"type":401,"value":447},{"type":395,"tag":431,"props":5870,"children":5871},{"style":450},[5872],{"type":401,"value":1714},{"type":395,"tag":431,"props":5874,"children":5875},{"style":444},[5876],{"type":401,"value":458},{"type":395,"tag":431,"props":5878,"children":5879},{"style":1386},[5880],{"type":401,"value":715},{"type":395,"tag":431,"props":5882,"children":5883},{"style":671},[5884],{"type":401,"value":1738},{"type":395,"tag":431,"props":5886,"children":5887},{"class":433,"line":2161},[5888,5893,5897,5901],{"type":395,"tag":431,"props":5889,"children":5890},{"style":1692},[5891],{"type":401,"value":5892},"      return",{"type":395,"tag":431,"props":5894,"children":5895},{"style":444},[5896],{"type":401,"value":447},{"type":395,"tag":431,"props":5898,"children":5899},{"style":450},[5900],{"type":401,"value":1714},{"type":395,"tag":431,"props":5902,"children":5903},{"style":444},[5904],{"type":401,"value":1365},{"type":395,"tag":431,"props":5906,"children":5907},{"class":433,"line":2222},[5908,5913,5918],{"type":395,"tag":431,"props":5909,"children":5910},{"style":671},[5911],{"type":401,"value":5912},"    }",{"type":395,"tag":431,"props":5914,"children":5915},{"style":1692},[5916],{"type":401,"value":5917}," else",{"type":395,"tag":431,"props":5919,"children":5920},{"style":671},[5921],{"type":401,"value":1329},{"type":395,"tag":431,"props":5923,"children":5924},{"class":433,"line":2263},[5925,5929,5934,5938,5943,5947,5951,5956],{"type":395,"tag":431,"props":5926,"children":5927},{"style":1692},[5928],{"type":401,"value":5892},{"type":395,"tag":431,"props":5930,"children":5931},{"style":665},[5932],{"type":401,"value":5933}," Reflect",{"type":395,"tag":431,"props":5935,"children":5936},{"style":671},[5937],{"type":401,"value":674},{"type":395,"tag":431,"props":5939,"children":5940},{"style":677},[5941],{"type":401,"value":5942},"get",{"type":395,"tag":431,"props":5944,"children":5945},{"style":1386},[5946],{"type":401,"value":685},{"type":395,"tag":431,"props":5948,"children":5949},{"style":461},[5950],{"type":401,"value":1276},{"type":395,"tag":431,"props":5952,"children":5953},{"style":4024},[5954],{"type":401,"value":5955},"arguments",{"type":395,"tag":431,"props":5957,"children":5958},{"style":1386},[5959],{"type":401,"value":1406},{"type":395,"tag":431,"props":5961,"children":5962},{"class":433,"line":2304},[5963],{"type":395,"tag":431,"props":5964,"children":5965},{"style":671},[5966],{"type":401,"value":2310},{"type":395,"tag":431,"props":5968,"children":5969},{"class":433,"line":2313},[5970],{"type":395,"tag":431,"props":5971,"children":5972},{"style":671},[5973],{"type":401,"value":2068},{"type":395,"tag":431,"props":5975,"children":5976},{"class":433,"line":2321},[5977,5981],{"type":395,"tag":431,"props":5978,"children":5979},{"style":671},[5980],{"type":401,"value":1662},{"type":395,"tag":431,"props":5982,"children":5983},{"style":665},[5984],{"type":401,"value":1406},{"type":395,"tag":431,"props":5986,"children":5988},{"class":433,"line":5987},17,[5989,5993,5997,6001,6005,6010,6014,6019],{"type":395,"tag":431,"props":5990,"children":5991},{"style":665},[5992],{"type":401,"value":5008},{"type":395,"tag":431,"props":5994,"children":5995},{"style":671},[5996],{"type":401,"value":674},{"type":395,"tag":431,"props":5998,"children":5999},{"style":677},[6000],{"type":401,"value":1383},{"type":395,"tag":431,"props":6002,"children":6003},{"style":665},[6004],{"type":401,"value":685},{"type":395,"tag":431,"props":6006,"children":6007},{"style":444},[6008],{"type":401,"value":6009},"''",{"type":395,"tag":431,"props":6011,"children":6012},{"style":671},[6013],{"type":401,"value":674},{"type":395,"tag":431,"props":6015,"children":6016},{"style":665},[6017],{"type":401,"value":6018},"test) ",{"type":395,"tag":431,"props":6020,"children":6021},{"style":718},[6022],{"type":401,"value":6023},"// test\n",{"type":395,"tag":403,"props":6025,"children":6027},{"id":6026},"元编程系统",[6028],{"type":401,"value":6026},{"type":395,"tag":409,"props":6030,"children":6031},{},[6032],{"type":401,"value":6033},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":395,"tag":396,"props":6035,"children":6037},{"id":6036},"结构化",[6038],{"type":401,"value":6036},{"type":395,"tag":403,"props":6040,"children":6042},{"id":6041},"概述",[6043],{"type":401,"value":6041},{"type":395,"tag":409,"props":6045,"children":6046},{},[6047],{"type":401,"value":6048},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":395,"tag":409,"props":6050,"children":6051},{},[6052],{"type":401,"value":6053},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":395,"tag":409,"props":6055,"children":6056},{},[6057],{"type":401,"value":6058},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":395,"tag":409,"props":6060,"children":6061},{},[6062],{"type":401,"value":6063},"面向对象解决了结构化带来诸多问题的三点：",{"type":395,"tag":509,"props":6065,"children":6066},{},[6067,6072,6077],{"type":395,"tag":513,"props":6068,"children":6069},{},[6070],{"type":401,"value":6071},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":395,"tag":513,"props":6073,"children":6074},{},[6075],{"type":401,"value":6076},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":395,"tag":513,"props":6078,"children":6079},{},[6080],{"type":401,"value":6081},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":395,"tag":409,"props":6083,"children":6084},{},[6085],{"type":401,"value":6086},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":395,"tag":409,"props":6088,"children":6089},{},[6090],{"type":401,"value":6091},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":395,"tag":403,"props":6093,"children":6095},{"id":6094},"基本的组织元素",[6096],{"type":401,"value":6094},{"type":395,"tag":409,"props":6098,"children":6099},{},[6100],{"type":401,"value":6101},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":395,"tag":1003,"props":6103,"children":6104},{},[6105,6131],{"type":395,"tag":1007,"props":6106,"children":6107},{},[6108],{"type":395,"tag":1011,"props":6109,"children":6110},{},[6111,6116,6121,6126],{"type":395,"tag":1015,"props":6112,"children":6113},{},[6114],{"type":401,"value":6115},"元素",{"type":395,"tag":1015,"props":6117,"children":6118},{},[6119],{"type":401,"value":6120},"物理形态",{"type":395,"tag":1015,"props":6122,"children":6123},{},[6124],{"type":401,"value":6125},"静态",{"type":395,"tag":1015,"props":6127,"children":6128},{},[6129],{"type":401,"value":6130},"动态",{"type":395,"tag":1026,"props":6132,"children":6133},{},[6134,6155,6178,6200],{"type":395,"tag":1011,"props":6135,"children":6136},{},[6137,6142,6145,6150],{"type":395,"tag":1033,"props":6138,"children":6139},{},[6140],{"type":401,"value":6141},"标识符",{"type":395,"tag":1033,"props":6143,"children":6144},{},[],{"type":395,"tag":1033,"props":6146,"children":6147},{},[6148],{"type":401,"value":6149},"变量声明、函数声明、类声明",{"type":395,"tag":1033,"props":6151,"children":6152},{},[6153],{"type":401,"value":6154},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":395,"tag":1011,"props":6156,"children":6157},{},[6158,6163,6168,6173],{"type":395,"tag":1033,"props":6159,"children":6160},{},[6161],{"type":401,"value":6162},"表达式",{"type":395,"tag":1033,"props":6164,"children":6165},{},[6166],{"type":401,"value":6167},"模板字符串",{"type":395,"tag":1033,"props":6169,"children":6170},{},[6171],{"type":401,"value":6172},"值、箭头函数体",{"type":395,"tag":1033,"props":6174,"children":6175},{},[6176],{"type":401,"value":6177},"通过 eval 执行表达式语句",{"type":395,"tag":1011,"props":6179,"children":6180},{},[6181,6185,6190,6195],{"type":395,"tag":1033,"props":6182,"children":6183},{},[6184],{"type":401,"value":1554},{"type":395,"tag":1033,"props":6186,"children":6187},{},[6188],{"type":401,"value":6189},".js 文件",{"type":395,"tag":1033,"props":6191,"children":6192},{},[6193],{"type":401,"value":6194},"块和块级作用域",{"type":395,"tag":1033,"props":6196,"children":6197},{},[6198],{"type":401,"value":6199},"eval()",{"type":395,"tag":1011,"props":6201,"children":6202},{},[6203,6207,6212,6217],{"type":395,"tag":1033,"props":6204,"children":6205},{},[6206],{"type":401,"value":2339},{"type":395,"tag":1033,"props":6208,"children":6209},{},[6210],{"type":401,"value":6211},".mjs 文件",{"type":395,"tag":1033,"props":6213,"children":6214},{},[6215],{"type":401,"value":6216},"import、export、require()",{"type":395,"tag":1033,"props":6218,"children":6219},{},[6220],{"type":401,"value":6221},"import().then()",{"type":395,"tag":409,"props":6223,"children":6224},{},[6225],{"type":401,"value":6226},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":395,"tag":409,"props":6228,"children":6229},{},[6230],{"type":401,"value":6231},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":395,"tag":409,"props":6233,"children":6234},{},[6235],{"type":401,"value":6236},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":395,"tag":409,"props":6238,"children":6239},{},[6240,6242,6247],{"type":401,"value":6241},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":395,"tag":431,"props":6243,"children":6244},{},[6245],{"type":401,"value":6246},"1,2,3",{"type":401,"value":6248}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":395,"tag":409,"props":6250,"children":6251},{},[6252],{"type":401,"value":6253},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":395,"tag":409,"props":6255,"children":6256},{},[6257],{"type":401,"value":6258},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":395,"tag":409,"props":6260,"children":6261},{},[6262],{"type":401,"value":6263},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":395,"tag":409,"props":6265,"children":6266},{},[6267],{"type":401,"value":6268},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":395,"tag":403,"props":6270,"children":6272},{"id":6271},"声明",[6273],{"type":401,"value":6271},{"type":395,"tag":409,"props":6275,"children":6276},{},[6277,6279,6290],{"type":401,"value":6278},"除了 const 和 namespace",{"type":395,"tag":488,"props":6280,"children":6281},{},[6282],{"type":395,"tag":492,"props":6283,"children":6287},{"href":6284,"ariaDescribedBy":6285,"dataFootnoteRef":389,"id":6286},"#user-content-fn-namespace",[496],"user-content-fnref-namespace",[6288],{"type":401,"value":6289},"4",{"type":401,"value":6291}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":395,"tag":420,"props":6293,"children":6295},{"className":653,"code":6294,"language":655,"meta":389,"style":389},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6296],{"type":395,"tag":427,"props":6297,"children":6298},{"__ignoreMap":389},[6299,6327,6343,6375,6397],{"type":395,"tag":431,"props":6300,"children":6301},{"class":433,"line":434},[6302,6307,6311,6315,6319,6323],{"type":395,"tag":431,"props":6303,"children":6304},{"style":461},[6305],{"type":401,"value":6306},"!",{"type":395,"tag":431,"props":6308,"children":6309},{"style":665},[6310],{"type":401,"value":685},{"type":395,"tag":431,"props":6312,"children":6313},{"style":988},[6314],{"type":401,"value":1314},{"type":395,"tag":431,"props":6316,"children":6317},{"style":677},[6318],{"type":401,"value":2014},{"type":395,"tag":431,"props":6320,"children":6321},{"style":671},[6322],{"type":401,"value":1037},{"type":395,"tag":431,"props":6324,"children":6325},{"style":671},[6326],{"type":401,"value":1329},{"type":395,"tag":431,"props":6328,"children":6329},{"class":433,"line":724},[6330,6334,6338],{"type":395,"tag":431,"props":6331,"children":6332},{"style":665},[6333],{"type":401,"value":2762},{"type":395,"tag":431,"props":6335,"children":6336},{"style":461},[6337],{"type":401,"value":1352},{"type":395,"tag":431,"props":6339,"children":6340},{"style":693},[6341],{"type":401,"value":6342}," 100\n",{"type":395,"tag":431,"props":6344,"children":6345},{"class":433,"line":1368},[6346,6350,6354,6358,6362,6366,6370],{"type":395,"tag":431,"props":6347,"children":6348},{"style":665},[6349],{"type":401,"value":1374},{"type":395,"tag":431,"props":6351,"children":6352},{"style":671},[6353],{"type":401,"value":674},{"type":395,"tag":431,"props":6355,"children":6356},{"style":677},[6357],{"type":401,"value":1383},{"type":395,"tag":431,"props":6359,"children":6360},{"style":1386},[6361],{"type":401,"value":685},{"type":395,"tag":431,"props":6363,"children":6364},{"style":665},[6365],{"type":401,"value":1714},{"type":395,"tag":431,"props":6367,"children":6368},{"style":1386},[6369],{"type":401,"value":715},{"type":395,"tag":431,"props":6371,"children":6372},{"style":718},[6373],{"type":401,"value":6374},"// [Function ...]\n",{"type":395,"tag":431,"props":6376,"children":6377},{"class":433,"line":1409},[6378,6383,6387,6392],{"type":395,"tag":431,"props":6379,"children":6380},{"style":4024},[6381],{"type":401,"value":6382},"  arguments",{"type":395,"tag":431,"props":6384,"children":6385},{"style":461},[6386],{"type":401,"value":1352},{"type":395,"tag":431,"props":6388,"children":6389},{"style":1386},[6390],{"type":401,"value":6391}," [] ",{"type":395,"tag":431,"props":6393,"children":6394},{"style":718},[6395],{"type":401,"value":6396},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":395,"tag":431,"props":6398,"children":6399},{"class":433,"line":1418},[6400,6404],{"type":395,"tag":431,"props":6401,"children":6402},{"style":671},[6403],{"type":401,"value":1662},{"type":395,"tag":431,"props":6405,"children":6406},{"style":665},[6407],{"type":401,"value":6408},"())\n",{"type":395,"tag":409,"props":6410,"children":6411},{},[6412],{"type":401,"value":6413},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":395,"tag":420,"props":6415,"children":6417},{"className":653,"code":6416,"language":655,"meta":389,"style":389},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6418],{"type":395,"tag":427,"props":6419,"children":6420},{"__ignoreMap":389},[6421,6429,6448,6474,6502,6540],{"type":395,"tag":431,"props":6422,"children":6423},{"class":433,"line":434},[6424],{"type":395,"tag":431,"props":6425,"children":6426},{"style":718},[6427],{"type":401,"value":6428},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":395,"tag":431,"props":6430,"children":6431},{"class":433,"line":724},[6432,6436,6440,6444],{"type":395,"tag":431,"props":6433,"children":6434},{"style":988},[6435],{"type":401,"value":1314},{"type":395,"tag":431,"props":6437,"children":6438},{"style":677},[6439],{"type":401,"value":2014},{"type":395,"tag":431,"props":6441,"children":6442},{"style":671},[6443],{"type":401,"value":1037},{"type":395,"tag":431,"props":6445,"children":6446},{"style":671},[6447],{"type":401,"value":1329},{"type":395,"tag":431,"props":6449,"children":6450},{"class":433,"line":1368},[6451,6456,6460,6465,6469],{"type":395,"tag":431,"props":6452,"children":6453},{"style":671},[6454],{"type":401,"value":6455},"  {",{"type":395,"tag":431,"props":6457,"children":6458},{"style":988},[6459],{"type":401,"value":1314},{"type":395,"tag":431,"props":6461,"children":6462},{"style":677},[6463],{"type":401,"value":6464}," x",{"type":395,"tag":431,"props":6466,"children":6467},{"style":671},[6468],{"type":401,"value":1324},{"type":395,"tag":431,"props":6470,"children":6471},{"style":671},[6472],{"type":401,"value":6473}," {}};\n",{"type":395,"tag":431,"props":6475,"children":6476},{"class":433,"line":1409},[6477,6481,6485,6489,6494,6498],{"type":395,"tag":431,"props":6478,"children":6479},{"style":1841},[6480],{"type":401,"value":2762},{"type":395,"tag":431,"props":6482,"children":6483},{"style":671},[6484],{"type":401,"value":1848},{"type":395,"tag":431,"props":6486,"children":6487},{"style":988},[6488],{"type":401,"value":1442},{"type":395,"tag":431,"props":6490,"children":6491},{"style":677},[6492],{"type":401,"value":6493}," y",{"type":395,"tag":431,"props":6495,"children":6496},{"style":671},[6497],{"type":401,"value":1324},{"type":395,"tag":431,"props":6499,"children":6500},{"style":671},[6501],{"type":401,"value":3120},{"type":395,"tag":431,"props":6503,"children":6504},{"class":433,"line":1418},[6505,6510,6514,6519,6523,6527,6532,6536],{"type":395,"tag":431,"props":6506,"children":6507},{"style":1692},[6508],{"type":401,"value":6509},"  if",{"type":395,"tag":431,"props":6511,"children":6512},{"style":1386},[6513],{"type":401,"value":1921},{"type":395,"tag":431,"props":6515,"children":6516},{"style":827},[6517],{"type":401,"value":6518},"true",{"type":395,"tag":431,"props":6520,"children":6521},{"style":1386},[6522],{"type":401,"value":715},{"type":395,"tag":431,"props":6524,"children":6525},{"style":988},[6526],{"type":401,"value":1314},{"type":395,"tag":431,"props":6528,"children":6529},{"style":677},[6530],{"type":401,"value":6531}," z",{"type":395,"tag":431,"props":6533,"children":6534},{"style":671},[6535],{"type":401,"value":1324},{"type":395,"tag":431,"props":6537,"children":6538},{"style":671},[6539],{"type":401,"value":3120},{"type":395,"tag":431,"props":6541,"children":6542},{"class":433,"line":1453},[6543],{"type":395,"tag":431,"props":6544,"children":6545},{"style":671},[6546],{"type":401,"value":1415},{"type":395,"tag":403,"props":6548,"children":6550},{"id":6549},"语句与代码分块",[6551],{"type":401,"value":6549},{"type":395,"tag":409,"props":6553,"children":6554},{},[6555],{"type":401,"value":6556},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":395,"tag":409,"props":6558,"children":6559},{},[6560],{"type":401,"value":6561},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":395,"tag":409,"props":6563,"children":6564},{},[6565,6567,6578],{"type":401,"value":6566},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":395,"tag":488,"props":6568,"children":6569},{},[6570],{"type":395,"tag":492,"props":6571,"children":6575},{"href":6572,"ariaDescribedBy":6573,"dataFootnoteRef":389,"id":6574},"#user-content-fn-iterationenv",[496],"user-content-fnref-iterationenv",[6576],{"type":401,"value":6577},"5",{"type":401,"value":6579},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":395,"tag":409,"props":6581,"children":6582},{},[6583],{"type":401,"value":6584},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":395,"tag":409,"props":6586,"children":6587},{},[6588],{"type":401,"value":6589},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":395,"tag":420,"props":6591,"children":6593},{"className":653,"code":6592,"language":655,"meta":389,"style":389},"eval(`if (true) ; else ;`) // undefined\n",[6594],{"type":395,"tag":427,"props":6595,"children":6596},{"__ignoreMap":389},[6597],{"type":395,"tag":431,"props":6598,"children":6599},{"class":433,"line":434},[6600,6605,6609,6614,6619,6623,6627],{"type":395,"tag":431,"props":6601,"children":6602},{"style":677},[6603],{"type":401,"value":6604},"eval",{"type":395,"tag":431,"props":6606,"children":6607},{"style":665},[6608],{"type":401,"value":685},{"type":395,"tag":431,"props":6610,"children":6611},{"style":444},[6612],{"type":401,"value":6613},"`",{"type":395,"tag":431,"props":6615,"children":6616},{"style":450},[6617],{"type":401,"value":6618},"if (true) ; else ;",{"type":395,"tag":431,"props":6620,"children":6621},{"style":444},[6622],{"type":401,"value":6613},{"type":395,"tag":431,"props":6624,"children":6625},{"style":665},[6626],{"type":401,"value":715},{"type":395,"tag":431,"props":6628,"children":6629},{"style":718},[6630],{"type":401,"value":954},{"type":395,"tag":403,"props":6632,"children":6634},{"id":6633},"组织形式分块的方法",[6635],{"type":401,"value":6633},{"type":395,"tag":409,"props":6637,"children":6638},{},[6639],{"type":401,"value":6640},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":395,"tag":409,"props":6642,"children":6643},{},[6644],{"type":401,"value":6645},"数据声明语句中存在块级作用域，如：",{"type":395,"tag":420,"props":6647,"children":6649},{"className":653,"code":6648,"language":655,"meta":389,"style":389},"const x = 1, y = x\nconsole.log(y) // 1\n",[6650],{"type":395,"tag":427,"props":6651,"children":6652},{"__ignoreMap":389},[6653,6688],{"type":395,"tag":431,"props":6654,"children":6655},{"class":433,"line":434},[6656,6660,6664,6668,6672,6676,6680,6684],{"type":395,"tag":431,"props":6657,"children":6658},{"style":988},[6659],{"type":401,"value":5779},{"type":395,"tag":431,"props":6661,"children":6662},{"style":1422},[6663],{"type":401,"value":6464},{"type":395,"tag":431,"props":6665,"children":6666},{"style":461},[6667],{"type":401,"value":1352},{"type":395,"tag":431,"props":6669,"children":6670},{"style":693},[6671],{"type":401,"value":1798},{"type":395,"tag":431,"props":6673,"children":6674},{"style":671},[6675],{"type":401,"value":701},{"type":395,"tag":431,"props":6677,"children":6678},{"style":1422},[6679],{"type":401,"value":6493},{"type":395,"tag":431,"props":6681,"children":6682},{"style":461},[6683],{"type":401,"value":1352},{"type":395,"tag":431,"props":6685,"children":6686},{"style":665},[6687],{"type":401,"value":996},{"type":395,"tag":431,"props":6689,"children":6690},{"class":433,"line":724},[6691,6695,6699,6703,6708],{"type":395,"tag":431,"props":6692,"children":6693},{"style":665},[6694],{"type":401,"value":5008},{"type":395,"tag":431,"props":6696,"children":6697},{"style":671},[6698],{"type":401,"value":674},{"type":395,"tag":431,"props":6700,"children":6701},{"style":677},[6702],{"type":401,"value":1383},{"type":395,"tag":431,"props":6704,"children":6705},{"style":665},[6706],{"type":401,"value":6707},"(y) ",{"type":395,"tag":431,"props":6709,"children":6710},{"style":718},[6711],{"type":401,"value":6712},"// 1\n",{"type":395,"tag":409,"props":6714,"children":6715},{},[6716],{"type":401,"value":6717},"表达式级别的作用域只存在于 eval 调用中。",{"type":395,"tag":409,"props":6719,"children":6720},{},[6721],{"type":401,"value":6722},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":395,"tag":420,"props":6724,"children":6726},{"className":653,"code":6725,"language":655,"meta":389,"style":389},"if (1) let x = 1\n",[6727],{"type":395,"tag":427,"props":6728,"children":6729},{"__ignoreMap":389},[6730],{"type":395,"tag":431,"props":6731,"children":6732},{"class":433,"line":434},[6733,6738,6742,6746,6750,6754,6758,6762],{"type":395,"tag":431,"props":6734,"children":6735},{"style":1692},[6736],{"type":401,"value":6737},"if",{"type":395,"tag":431,"props":6739,"children":6740},{"style":665},[6741],{"type":401,"value":1921},{"type":395,"tag":431,"props":6743,"children":6744},{"style":693},[6745],{"type":401,"value":500},{"type":395,"tag":431,"props":6747,"children":6748},{"style":665},[6749],{"type":401,"value":715},{"type":395,"tag":431,"props":6751,"children":6752},{"style":988},[6753],{"type":401,"value":991},{"type":395,"tag":431,"props":6755,"children":6756},{"style":665},[6757],{"type":401,"value":949},{"type":395,"tag":431,"props":6759,"children":6760},{"style":461},[6761],{"type":401,"value":1863},{"type":395,"tag":431,"props":6763,"children":6764},{"style":693},[6765],{"type":401,"value":6766}," 1\n",{"type":395,"tag":409,"props":6768,"children":6769},{},[6770],{"type":401,"value":6771},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":395,"tag":409,"props":6773,"children":6774},{},[6775],{"type":401,"value":6776},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":395,"tag":409,"props":6778,"children":6779},{},[6780],{"type":401,"value":6781},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":395,"tag":509,"props":6783,"children":6784},{},[6785,6790,6795],{"type":395,"tag":513,"props":6786,"children":6787},{},[6788],{"type":401,"value":6789},"词法作用域互不相交。",{"type":395,"tag":513,"props":6791,"children":6792},{},[6793],{"type":401,"value":6794},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":395,"tag":513,"props":6796,"children":6797},{},[6798],{"type":401,"value":6799},"高级别流程变更语句可以跨越低级别的作用域。",{"type":395,"tag":409,"props":6801,"children":6802},{},[6803],{"type":401,"value":6804},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":395,"tag":403,"props":6806,"children":6808},{"id":6807},"层次结构程序设计",[6809],{"type":401,"value":6807},{"type":395,"tag":409,"props":6811,"children":6812},{},[6813],{"type":401,"value":6814},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":395,"tag":420,"props":6816,"children":6818},{"className":653,"code":6817,"language":655,"meta":389,"style":389},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6819],{"type":395,"tag":427,"props":6820,"children":6821},{"__ignoreMap":389},[6822,6861],{"type":395,"tag":431,"props":6823,"children":6824},{"class":433,"line":434},[6825,6829,6834,6838,6843,6847,6852,6856],{"type":395,"tag":431,"props":6826,"children":6827},{"style":988},[6828],{"type":401,"value":5779},{"type":395,"tag":431,"props":6830,"children":6831},{"style":1422},[6832],{"type":401,"value":6833}," method",{"type":395,"tag":431,"props":6835,"children":6836},{"style":461},[6837],{"type":401,"value":1352},{"type":395,"tag":431,"props":6839,"children":6840},{"style":665},[6841],{"type":401,"value":6842}," obj[Object",{"type":395,"tag":431,"props":6844,"children":6845},{"style":671},[6846],{"type":401,"value":674},{"type":395,"tag":431,"props":6848,"children":6849},{"style":665},[6850],{"type":401,"value":6851},"getPropertySymbols[",{"type":395,"tag":431,"props":6853,"children":6854},{"style":693},[6855],{"type":401,"value":696},{"type":395,"tag":431,"props":6857,"children":6858},{"style":665},[6859],{"type":401,"value":6860},"]]\n",{"type":395,"tag":431,"props":6862,"children":6863},{"class":433,"line":724},[6864,6868,6872,6877],{"type":395,"tag":431,"props":6865,"children":6866},{"style":665},[6867],{"type":401,"value":3742},{"type":395,"tag":431,"props":6869,"children":6870},{"style":671},[6871],{"type":401,"value":674},{"type":395,"tag":431,"props":6873,"children":6874},{"style":677},[6875],{"type":401,"value":6876},"call",{"type":395,"tag":431,"props":6878,"children":6879},{"style":665},[6880],{"type":401,"value":6881},"(obj)\n",{"type":395,"tag":409,"props":6883,"children":6884},{},[6885],{"type":401,"value":6886},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":395,"tag":403,"props":6888,"children":6890},{"id":6889},"变量作用域",[6891],{"type":401,"value":6889},{"type":395,"tag":409,"props":6893,"children":6894},{},[6895],{"type":401,"value":6896},"变量作用域有三个特殊之处：",{"type":395,"tag":509,"props":6898,"children":6899},{},[6900,6905,6910],{"type":395,"tag":513,"props":6901,"children":6902},{},[6903],{"type":401,"value":6904},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":395,"tag":513,"props":6906,"children":6907},{},[6908],{"type":401,"value":6909},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":395,"tag":513,"props":6911,"children":6912},{},[6913],{"type":401,"value":6914},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":395,"tag":409,"props":6916,"children":6917},{},[6918],{"type":401,"value":6919},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":395,"tag":409,"props":6921,"children":6922},{},[6923],{"type":401,"value":6924},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":395,"tag":403,"props":6926,"children":6928},{"id":6927},"私有属性和私有字段的纷争",[6929],{"type":401,"value":6927},{"type":395,"tag":409,"props":6931,"children":6932},{},[6933],{"type":401,"value":6934},"(_　_)。゜zｚＺ",{"type":395,"tag":396,"props":6936,"children":6938},{"id":6937},"函数式语言特性",[6939],{"type":401,"value":6937},{"type":395,"tag":403,"props":6941,"children":6943},{"id":6942},"概述-1",[6944],{"type":401,"value":6041},{"type":395,"tag":409,"props":6946,"children":6947},{},[6948],{"type":401,"value":6949},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":395,"tag":409,"props":6951,"children":6952},{},[6953],{"type":401,"value":6954},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":395,"tag":403,"props":6956,"children":6958},{"id":6957},"js中的函数",[6959],{"type":401,"value":6960},"JS中的函数",{"type":395,"tag":409,"props":6962,"children":6963},{},[6964],{"type":401,"value":6965},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":395,"tag":509,"props":6967,"children":6968},{},[6969,6974,6979],{"type":395,"tag":513,"props":6970,"children":6971},{},[6972],{"type":401,"value":6973},"无法显式使用“use strict”切换到严格模式。",{"type":395,"tag":513,"props":6975,"children":6976},{},[6977],{"type":401,"value":6978},"不接受重名参数。",{"type":395,"tag":513,"props":6980,"children":6981},{},[6982],{"type":401,"value":6983},"形参和 arguments 之间将解除绑定关系。",{"type":395,"tag":409,"props":6985,"children":6986},{},[6987],{"type":401,"value":6988},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":395,"tag":420,"props":6990,"children":6992},{"className":653,"code":6991,"language":655,"meta":389,"style":389},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[6993],{"type":395,"tag":427,"props":6994,"children":6995},{"__ignoreMap":389},[6996,7040,7093,7100],{"type":395,"tag":431,"props":6997,"children":6998},{"class":433,"line":434},[6999,7003,7007,7011,7015,7019,7024,7028,7032,7036],{"type":395,"tag":431,"props":7000,"children":7001},{"style":988},[7002],{"type":401,"value":1314},{"type":395,"tag":431,"props":7004,"children":7005},{"style":677},[7006],{"type":401,"value":2014},{"type":395,"tag":431,"props":7008,"children":7009},{"style":671},[7010],{"type":401,"value":685},{"type":395,"tag":431,"props":7012,"children":7013},{"style":1615},[7014],{"type":401,"value":492},{"type":395,"tag":431,"props":7016,"children":7017},{"style":671},[7018],{"type":401,"value":701},{"type":395,"tag":431,"props":7020,"children":7021},{"style":1615},[7022],{"type":401,"value":7023}," b",{"type":395,"tag":431,"props":7025,"children":7026},{"style":461},[7027],{"type":401,"value":1352},{"type":395,"tag":431,"props":7029,"children":7030},{"style":693},[7031],{"type":401,"value":1798},{"type":395,"tag":431,"props":7033,"children":7034},{"style":671},[7035],{"type":401,"value":1623},{"type":395,"tag":431,"props":7037,"children":7038},{"style":671},[7039],{"type":401,"value":1329},{"type":395,"tag":431,"props":7041,"children":7042},{"class":433,"line":724},[7043,7047,7051,7055,7059,7063,7067,7072,7076,7081,7085,7089],{"type":395,"tag":431,"props":7044,"children":7045},{"style":665},[7046],{"type":401,"value":1374},{"type":395,"tag":431,"props":7048,"children":7049},{"style":671},[7050],{"type":401,"value":674},{"type":395,"tag":431,"props":7052,"children":7053},{"style":677},[7054],{"type":401,"value":1383},{"type":395,"tag":431,"props":7056,"children":7057},{"style":1386},[7058],{"type":401,"value":685},{"type":395,"tag":431,"props":7060,"children":7061},{"style":665},[7062],{"type":401,"value":1714},{"type":395,"tag":431,"props":7064,"children":7065},{"style":671},[7066],{"type":401,"value":674},{"type":395,"tag":431,"props":7068,"children":7069},{"style":1422},[7070],{"type":401,"value":7071},"length",{"type":395,"tag":431,"props":7073,"children":7074},{"style":671},[7075],{"type":401,"value":701},{"type":395,"tag":431,"props":7077,"children":7078},{"style":4024},[7079],{"type":401,"value":7080}," arguments",{"type":395,"tag":431,"props":7082,"children":7083},{"style":671},[7084],{"type":401,"value":674},{"type":395,"tag":431,"props":7086,"children":7087},{"style":1422},[7088],{"type":401,"value":7071},{"type":395,"tag":431,"props":7090,"children":7091},{"style":1386},[7092],{"type":401,"value":1406},{"type":395,"tag":431,"props":7094,"children":7095},{"class":433,"line":1368},[7096],{"type":395,"tag":431,"props":7097,"children":7098},{"style":671},[7099],{"type":401,"value":1415},{"type":395,"tag":431,"props":7101,"children":7102},{"class":433,"line":1409},[7103,7107,7111,7115,7119,7124,7128],{"type":395,"tag":431,"props":7104,"children":7105},{"style":677},[7106],{"type":401,"value":1714},{"type":395,"tag":431,"props":7108,"children":7109},{"style":665},[7110],{"type":401,"value":685},{"type":395,"tag":431,"props":7112,"children":7113},{"style":693},[7114],{"type":401,"value":500},{"type":395,"tag":431,"props":7116,"children":7117},{"style":671},[7118],{"type":401,"value":701},{"type":395,"tag":431,"props":7120,"children":7121},{"style":693},[7122],{"type":401,"value":7123}," 2",{"type":395,"tag":431,"props":7125,"children":7126},{"style":665},[7127],{"type":401,"value":715},{"type":395,"tag":431,"props":7129,"children":7130},{"style":718},[7131],{"type":401,"value":7132},"// 1，2\n",{"type":395,"tag":409,"props":7134,"children":7135},{},[7136,7138,7149],{"type":401,"value":7137},"表达式最后返回的是值而不是引用",{"type":395,"tag":488,"props":7139,"children":7140},{},[7141],{"type":395,"tag":492,"props":7142,"children":7146},{"href":7143,"ariaDescribedBy":7144,"dataFootnoteRef":389,"id":7145},"#user-content-fn-reference",[496],"user-content-fnref-reference",[7147],{"type":401,"value":7148},"6",{"type":401,"value":7150},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":395,"tag":420,"props":7152,"children":7154},{"className":653,"code":7153,"language":655,"meta":389,"style":389},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7155],{"type":395,"tag":427,"props":7156,"children":7157},{"__ignoreMap":389},[7158,7183,7202,7223,7239,7276,7283,7290,7327],{"type":395,"tag":431,"props":7159,"children":7160},{"class":433,"line":434},[7161,7166,7170,7175,7179],{"type":395,"tag":431,"props":7162,"children":7163},{"style":665},[7164],{"type":401,"value":7165},"window",{"type":395,"tag":431,"props":7167,"children":7168},{"style":671},[7169],{"type":401,"value":674},{"type":395,"tag":431,"props":7171,"children":7172},{"style":665},[7173],{"type":401,"value":7174},"x ",{"type":395,"tag":431,"props":7176,"children":7177},{"style":461},[7178],{"type":401,"value":1863},{"type":395,"tag":431,"props":7180,"children":7181},{"style":693},[7182],{"type":401,"value":6766},{"type":395,"tag":431,"props":7184,"children":7185},{"class":433,"line":724},[7186,7190,7194,7198],{"type":395,"tag":431,"props":7187,"children":7188},{"style":988},[7189],{"type":401,"value":5779},{"type":395,"tag":431,"props":7191,"children":7192},{"style":1422},[7193],{"type":401,"value":3212},{"type":395,"tag":431,"props":7195,"children":7196},{"style":461},[7197],{"type":401,"value":1352},{"type":395,"tag":431,"props":7199,"children":7200},{"style":671},[7201],{"type":401,"value":1329},{"type":395,"tag":431,"props":7203,"children":7204},{"class":433,"line":1368},[7205,7210,7214,7218],{"type":395,"tag":431,"props":7206,"children":7207},{"style":1386},[7208],{"type":401,"value":7209},"  x",{"type":395,"tag":431,"props":7211,"children":7212},{"style":671},[7213],{"type":401,"value":1848},{"type":395,"tag":431,"props":7215,"children":7216},{"style":693},[7217],{"type":401,"value":7123},{"type":395,"tag":431,"props":7219,"children":7220},{"style":671},[7221],{"type":401,"value":7222},",\n",{"type":395,"tag":431,"props":7224,"children":7225},{"class":433,"line":1409},[7226,7231,7235],{"type":395,"tag":431,"props":7227,"children":7228},{"style":2648},[7229],{"type":401,"value":7230},"  b",{"type":395,"tag":431,"props":7232,"children":7233},{"style":671},[7234],{"type":401,"value":1324},{"type":395,"tag":431,"props":7236,"children":7237},{"style":671},[7238],{"type":401,"value":1329},{"type":395,"tag":431,"props":7240,"children":7241},{"class":433,"line":1418},[7242,7247,7251,7255,7259,7264,7268,7272],{"type":395,"tag":431,"props":7243,"children":7244},{"style":665},[7245],{"type":401,"value":7246},"    console",{"type":395,"tag":431,"props":7248,"children":7249},{"style":671},[7250],{"type":401,"value":674},{"type":395,"tag":431,"props":7252,"children":7253},{"style":677},[7254],{"type":401,"value":1383},{"type":395,"tag":431,"props":7256,"children":7257},{"style":1386},[7258],{"type":401,"value":685},{"type":395,"tag":431,"props":7260,"children":7261},{"style":1335},[7262],{"type":401,"value":7263},"this",{"type":395,"tag":431,"props":7265,"children":7266},{"style":671},[7267],{"type":401,"value":674},{"type":395,"tag":431,"props":7269,"children":7270},{"style":665},[7271],{"type":401,"value":2659},{"type":395,"tag":431,"props":7273,"children":7274},{"style":1386},[7275],{"type":401,"value":1406},{"type":395,"tag":431,"props":7277,"children":7278},{"class":433,"line":1453},[7279],{"type":395,"tag":431,"props":7280,"children":7281},{"style":671},[7282],{"type":401,"value":2068},{"type":395,"tag":431,"props":7284,"children":7285},{"class":433,"line":1490},[7286],{"type":395,"tag":431,"props":7287,"children":7288},{"style":671},[7289],{"type":401,"value":1415},{"type":395,"tag":431,"props":7291,"children":7292},{"class":433,"line":1498},[7293,7297,7301,7305,7310,7314,7318,7322],{"type":395,"tag":431,"props":7294,"children":7295},{"style":665},[7296],{"type":401,"value":5008},{"type":395,"tag":431,"props":7298,"children":7299},{"style":671},[7300],{"type":401,"value":674},{"type":395,"tag":431,"props":7302,"children":7303},{"style":677},[7304],{"type":401,"value":1383},{"type":395,"tag":431,"props":7306,"children":7307},{"style":665},[7308],{"type":401,"value":7309},"(a",{"type":395,"tag":431,"props":7311,"children":7312},{"style":671},[7313],{"type":401,"value":674},{"type":395,"tag":431,"props":7315,"children":7316},{"style":677},[7317],{"type":401,"value":1347},{"type":395,"tag":431,"props":7319,"children":7320},{"style":665},[7321],{"type":401,"value":803},{"type":395,"tag":431,"props":7323,"children":7324},{"style":718},[7325],{"type":401,"value":7326},"// 2\n",{"type":395,"tag":431,"props":7328,"children":7329},{"class":433,"line":1525},[7330,7334,7338,7342,7347,7351,7355,7359,7363,7368],{"type":395,"tag":431,"props":7331,"children":7332},{"style":665},[7333],{"type":401,"value":5008},{"type":395,"tag":431,"props":7335,"children":7336},{"style":671},[7337],{"type":401,"value":674},{"type":395,"tag":431,"props":7339,"children":7340},{"style":677},[7341],{"type":401,"value":1383},{"type":395,"tag":431,"props":7343,"children":7344},{"style":665},[7345],{"type":401,"value":7346},"((",{"type":395,"tag":431,"props":7348,"children":7349},{"style":693},[7350],{"type":401,"value":696},{"type":395,"tag":431,"props":7352,"children":7353},{"style":671},[7354],{"type":401,"value":701},{"type":395,"tag":431,"props":7356,"children":7357},{"style":665},[7358],{"type":401,"value":3212},{"type":395,"tag":431,"props":7360,"children":7361},{"style":671},[7362],{"type":401,"value":674},{"type":395,"tag":431,"props":7364,"children":7365},{"style":665},[7366],{"type":401,"value":7367},"b)()) ",{"type":395,"tag":431,"props":7369,"children":7370},{"style":718},[7371],{"type":401,"value":6712},{"type":395,"tag":409,"props":7373,"children":7374},{},[7375],{"type":401,"value":7376},"具名函数在表达式中时不会声明标识符。",{"type":395,"tag":409,"props":7378,"children":7379},{},[7380],{"type":401,"value":7381},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":395,"tag":420,"props":7383,"children":7385},{"className":653,"code":7384,"language":655,"meta":389,"style":389},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7386],{"type":395,"tag":427,"props":7387,"children":7388},{"__ignoreMap":389},[7389,7408,7436,7451,7458,7486],{"type":395,"tag":431,"props":7390,"children":7391},{"class":433,"line":434},[7392,7396,7400,7404],{"type":395,"tag":431,"props":7393,"children":7394},{"style":988},[7395],{"type":401,"value":5779},{"type":395,"tag":431,"props":7397,"children":7398},{"style":1422},[7399],{"type":401,"value":3212},{"type":395,"tag":431,"props":7401,"children":7402},{"style":461},[7403],{"type":401,"value":1352},{"type":395,"tag":431,"props":7405,"children":7406},{"style":671},[7407],{"type":401,"value":1329},{"type":395,"tag":431,"props":7409,"children":7410},{"class":433,"line":724},[7411,7415,7419,7423,7427,7431],{"type":395,"tag":431,"props":7412,"children":7413},{"style":677},[7414],{"type":401,"value":7230},{"type":395,"tag":431,"props":7416,"children":7417},{"style":671},[7418],{"type":401,"value":1848},{"type":395,"tag":431,"props":7420,"children":7421},{"style":988},[7422],{"type":401,"value":1442},{"type":395,"tag":431,"props":7424,"children":7425},{"style":677},[7426],{"type":401,"value":2014},{"type":395,"tag":431,"props":7428,"children":7429},{"style":671},[7430],{"type":401,"value":1037},{"type":395,"tag":431,"props":7432,"children":7433},{"style":671},[7434],{"type":401,"value":7435}," {},\n",{"type":395,"tag":431,"props":7437,"children":7438},{"class":433,"line":1368},[7439,7443,7447],{"type":395,"tag":431,"props":7440,"children":7441},{"style":2648},[7442],{"type":401,"value":2762},{"type":395,"tag":431,"props":7444,"children":7445},{"style":671},[7446],{"type":401,"value":1037},{"type":395,"tag":431,"props":7448,"children":7449},{"style":671},[7450],{"type":401,"value":3120},{"type":395,"tag":431,"props":7452,"children":7453},{"class":433,"line":1409},[7454],{"type":395,"tag":431,"props":7455,"children":7456},{"style":671},[7457],{"type":401,"value":1415},{"type":395,"tag":431,"props":7459,"children":7460},{"class":433,"line":1418},[7461,7465,7469,7473,7477,7481],{"type":395,"tag":431,"props":7462,"children":7463},{"style":461},[7464],{"type":401,"value":1504},{"type":395,"tag":431,"props":7466,"children":7467},{"style":665},[7468],{"type":401,"value":3212},{"type":395,"tag":431,"props":7470,"children":7471},{"style":671},[7472],{"type":401,"value":674},{"type":395,"tag":431,"props":7474,"children":7475},{"style":677},[7476],{"type":401,"value":1347},{"type":395,"tag":431,"props":7478,"children":7479},{"style":665},[7480],{"type":401,"value":819},{"type":395,"tag":431,"props":7482,"children":7483},{"style":718},[7484],{"type":401,"value":7485},"// {}\n",{"type":395,"tag":431,"props":7487,"children":7488},{"class":433,"line":1453},[7489,7493,7497,7501,7505,7509],{"type":395,"tag":431,"props":7490,"children":7491},{"style":461},[7492],{"type":401,"value":1504},{"type":395,"tag":431,"props":7494,"children":7495},{"style":665},[7496],{"type":401,"value":3212},{"type":395,"tag":431,"props":7498,"children":7499},{"style":671},[7500],{"type":401,"value":674},{"type":395,"tag":431,"props":7502,"children":7503},{"style":677},[7504],{"type":401,"value":1714},{"type":395,"tag":431,"props":7506,"children":7507},{"style":665},[7508],{"type":401,"value":819},{"type":395,"tag":431,"props":7510,"children":7511},{"style":718},[7512],{"type":401,"value":3229},{"type":395,"tag":409,"props":7514,"children":7515},{},[7516],{"type":401,"value":7517},"方法的特性总结以下三点：",{"type":395,"tag":509,"props":7519,"children":7520},{},[7521,7526,7531],{"type":395,"tag":513,"props":7522,"children":7523},{},[7524],{"type":401,"value":7525},"不能作为构造器。",{"type":395,"tag":513,"props":7527,"children":7528},{},[7529],{"type":401,"value":7530},"除了生成器方法，没有内部原型。",{"type":395,"tag":513,"props":7532,"children":7533},{},[7534],{"type":401,"value":7535},"方法不能具名。",{"type":395,"tag":409,"props":7537,"children":7538},{},[7539],{"type":401,"value":7540},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":395,"tag":420,"props":7542,"children":7544},{"className":653,"code":7543,"language":655,"meta":389,"style":389},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7545],{"type":395,"tag":427,"props":7546,"children":7547},{"__ignoreMap":389},[7548],{"type":395,"tag":431,"props":7549,"children":7550},{"class":433,"line":434},[7551,7555,7559,7563,7568,7572,7576,7580,7584],{"type":395,"tag":431,"props":7552,"children":7553},{"style":665},[7554],{"type":401,"value":668},{"type":395,"tag":431,"props":7556,"children":7557},{"style":671},[7558],{"type":401,"value":674},{"type":395,"tag":431,"props":7560,"children":7561},{"style":677},[7562],{"type":401,"value":3630},{"type":395,"tag":431,"props":7564,"children":7565},{"style":665},[7566],{"type":401,"value":7567},"(boundFn",{"type":395,"tag":431,"props":7569,"children":7570},{"style":671},[7571],{"type":401,"value":701},{"type":395,"tag":431,"props":7573,"children":7574},{"style":665},[7575],{"type":401,"value":4101},{"type":395,"tag":431,"props":7577,"children":7578},{"style":671},[7579],{"type":401,"value":674},{"type":395,"tag":431,"props":7581,"children":7582},{"style":677},[7583],{"type":401,"value":5516},{"type":395,"tag":431,"props":7585,"children":7586},{"style":665},[7587],{"type":401,"value":7588},"(targetFn))\n",{"type":395,"tag":409,"props":7590,"children":7591},{},[7592],{"type":401,"value":7593},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":395,"tag":420,"props":7595,"children":7597},{"className":653,"code":7596,"language":655,"meta":389,"style":389},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7598],{"type":395,"tag":427,"props":7599,"children":7600},{"__ignoreMap":389},[7601,7620,7663,7670],{"type":395,"tag":431,"props":7602,"children":7603},{"class":433,"line":434},[7604,7608,7612,7616],{"type":395,"tag":431,"props":7605,"children":7606},{"style":988},[7607],{"type":401,"value":1314},{"type":395,"tag":431,"props":7609,"children":7610},{"style":677},[7611],{"type":401,"value":3212},{"type":395,"tag":431,"props":7613,"children":7614},{"style":671},[7615],{"type":401,"value":1324},{"type":395,"tag":431,"props":7617,"children":7618},{"style":671},[7619],{"type":401,"value":1329},{"type":395,"tag":431,"props":7621,"children":7622},{"class":433,"line":724},[7623,7627,7631,7635,7639,7643,7647,7651,7655,7659],{"type":395,"tag":431,"props":7624,"children":7625},{"style":665},[7626],{"type":401,"value":1374},{"type":395,"tag":431,"props":7628,"children":7629},{"style":671},[7630],{"type":401,"value":674},{"type":395,"tag":431,"props":7632,"children":7633},{"style":677},[7634],{"type":401,"value":1383},{"type":395,"tag":431,"props":7636,"children":7637},{"style":1386},[7638],{"type":401,"value":685},{"type":395,"tag":431,"props":7640,"children":7641},{"style":461},[7642],{"type":401,"value":1504},{"type":395,"tag":431,"props":7644,"children":7645},{"style":671},[7646],{"type":401,"value":674},{"type":395,"tag":431,"props":7648,"children":7649},{"style":1422},[7650],{"type":401,"value":5643},{"type":395,"tag":431,"props":7652,"children":7653},{"style":461},[7654],{"type":401,"value":1995},{"type":395,"tag":431,"props":7656,"children":7657},{"style":665},[7658],{"type":401,"value":3212},{"type":395,"tag":431,"props":7660,"children":7661},{"style":1386},[7662],{"type":401,"value":1406},{"type":395,"tag":431,"props":7664,"children":7665},{"class":433,"line":1368},[7666],{"type":395,"tag":431,"props":7667,"children":7668},{"style":671},[7669],{"type":401,"value":1415},{"type":395,"tag":431,"props":7671,"children":7672},{"class":433,"line":1409},[7673,7677,7681,7685,7689,7693,7698,7702,7707,7712],{"type":395,"tag":431,"props":7674,"children":7675},{"style":665},[7676],{"type":401,"value":5008},{"type":395,"tag":431,"props":7678,"children":7679},{"style":671},[7680],{"type":401,"value":674},{"type":395,"tag":431,"props":7682,"children":7683},{"style":677},[7684],{"type":401,"value":1383},{"type":395,"tag":431,"props":7686,"children":7687},{"style":665},[7688],{"type":401,"value":685},{"type":395,"tag":431,"props":7690,"children":7691},{"style":461},[7692],{"type":401,"value":1504},{"type":395,"tag":431,"props":7694,"children":7695},{"style":665},[7696],{"type":401,"value":7697}," (a",{"type":395,"tag":431,"props":7699,"children":7700},{"style":671},[7701],{"type":401,"value":674},{"type":395,"tag":431,"props":7703,"children":7704},{"style":677},[7705],{"type":401,"value":7706},"bind",{"type":395,"tag":431,"props":7708,"children":7709},{"style":665},[7710],{"type":401,"value":7711},"())) ",{"type":395,"tag":431,"props":7713,"children":7714},{"style":718},[7715],{"type":401,"value":765},{"type":395,"tag":409,"props":7717,"children":7718},{},[7719],{"type":401,"value":7720},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":395,"tag":409,"props":7722,"children":7723},{},[7724],{"type":401,"value":7725},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":395,"tag":420,"props":7727,"children":7729},{"className":653,"code":7728,"language":655,"meta":389,"style":389},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7730],{"type":395,"tag":427,"props":7731,"children":7732},{"__ignoreMap":389},[7733,7752,7773,7798,7828,7860,7888,7914,7942,7958,8010,8018,8025,8048,8055,8062],{"type":395,"tag":431,"props":7734,"children":7735},{"class":433,"line":434},[7736,7740,7744,7748],{"type":395,"tag":431,"props":7737,"children":7738},{"style":988},[7739],{"type":401,"value":5779},{"type":395,"tag":431,"props":7741,"children":7742},{"style":1422},[7743],{"type":401,"value":2629},{"type":395,"tag":431,"props":7745,"children":7746},{"style":461},[7747],{"type":401,"value":1352},{"type":395,"tag":431,"props":7749,"children":7750},{"style":671},[7751],{"type":401,"value":1329},{"type":395,"tag":431,"props":7753,"children":7754},{"class":433,"line":724},[7755,7760,7764,7769],{"type":395,"tag":431,"props":7756,"children":7757},{"style":1386},[7758],{"type":401,"value":7759},"  step",{"type":395,"tag":431,"props":7761,"children":7762},{"style":671},[7763],{"type":401,"value":1848},{"type":395,"tag":431,"props":7765,"children":7766},{"style":693},[7767],{"type":401,"value":7768}," 0",{"type":395,"tag":431,"props":7770,"children":7771},{"style":671},[7772],{"type":401,"value":7222},{"type":395,"tag":431,"props":7774,"children":7775},{"class":433,"line":1368},[7776,7781,7785,7790,7794],{"type":395,"tag":431,"props":7777,"children":7778},{"style":2648},[7779],{"type":401,"value":7780},"  run",{"type":395,"tag":431,"props":7782,"children":7783},{"style":671},[7784],{"type":401,"value":1921},{"type":395,"tag":431,"props":7786,"children":7787},{"style":1615},[7788],{"type":401,"value":7789},"init",{"type":395,"tag":431,"props":7791,"children":7792},{"style":671},[7793],{"type":401,"value":1623},{"type":395,"tag":431,"props":7795,"children":7796},{"style":671},[7797],{"type":401,"value":1329},{"type":395,"tag":431,"props":7799,"children":7800},{"class":433,"line":1409},[7801,7806,7812,7816,7820,7824],{"type":395,"tag":431,"props":7802,"children":7803},{"style":988},[7804],{"type":401,"value":7805},"    const",{"type":395,"tag":431,"props":7807,"children":7809},{"style":7808},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7810],{"type":401,"value":7811}," exec",{"type":395,"tag":431,"props":7813,"children":7814},{"style":461},[7815],{"type":401,"value":1352},{"type":395,"tag":431,"props":7817,"children":7818},{"style":1615},[7819],{"type":401,"value":6464},{"type":395,"tag":431,"props":7821,"children":7822},{"style":988},[7823],{"type":401,"value":5715},{"type":395,"tag":431,"props":7825,"children":7826},{"style":671},[7827],{"type":401,"value":1329},{"type":395,"tag":431,"props":7829,"children":7830},{"class":433,"line":1418},[7831,7835,7839,7843,7848,7852,7856],{"type":395,"tag":431,"props":7832,"children":7833},{"style":1692},[7834],{"type":401,"value":2228},{"type":395,"tag":431,"props":7836,"children":7837},{"style":1386},[7838],{"type":401,"value":1921},{"type":395,"tag":431,"props":7840,"children":7841},{"style":665},[7842],{"type":401,"value":2659},{"type":395,"tag":431,"props":7844,"children":7845},{"style":461},[7846],{"type":401,"value":7847}," >",{"type":395,"tag":431,"props":7849,"children":7850},{"style":693},[7851],{"type":401,"value":7768},{"type":395,"tag":431,"props":7853,"children":7854},{"style":1386},[7855],{"type":401,"value":715},{"type":395,"tag":431,"props":7857,"children":7858},{"style":671},[7859],{"type":401,"value":1738},{"type":395,"tag":431,"props":7861,"children":7862},{"class":433,"line":1453},[7863,7868,7872,7876,7880,7884],{"type":395,"tag":431,"props":7864,"children":7865},{"style":665},[7866],{"type":401,"value":7867},"        console",{"type":395,"tag":431,"props":7869,"children":7870},{"style":671},[7871],{"type":401,"value":674},{"type":395,"tag":431,"props":7873,"children":7874},{"style":677},[7875],{"type":401,"value":1383},{"type":395,"tag":431,"props":7877,"children":7878},{"style":1386},[7879],{"type":401,"value":685},{"type":395,"tag":431,"props":7881,"children":7882},{"style":665},[7883],{"type":401,"value":2659},{"type":395,"tag":431,"props":7885,"children":7886},{"style":1386},[7887],{"type":401,"value":1406},{"type":395,"tag":431,"props":7889,"children":7890},{"class":433,"line":1490},[7891,7896,7900,7905,7910],{"type":395,"tag":431,"props":7892,"children":7893},{"style":1335},[7894],{"type":401,"value":7895},"        this",{"type":395,"tag":431,"props":7897,"children":7898},{"style":671},[7899],{"type":401,"value":674},{"type":395,"tag":431,"props":7901,"children":7902},{"style":665},[7903],{"type":401,"value":7904},"step",{"type":395,"tag":431,"props":7906,"children":7907},{"style":461},[7908],{"type":401,"value":7909}," +=",{"type":395,"tag":431,"props":7911,"children":7912},{"style":693},[7913],{"type":401,"value":6766},{"type":395,"tag":431,"props":7915,"children":7916},{"class":433,"line":1498},[7917,7922,7926,7930,7934,7938],{"type":395,"tag":431,"props":7918,"children":7919},{"style":677},[7920],{"type":401,"value":7921},"        exec",{"type":395,"tag":431,"props":7923,"children":7924},{"style":1386},[7925],{"type":401,"value":685},{"type":395,"tag":431,"props":7927,"children":7928},{"style":665},[7929],{"type":401,"value":2659},{"type":395,"tag":431,"props":7931,"children":7932},{"style":461},[7933],{"type":401,"value":706},{"type":395,"tag":431,"props":7935,"children":7936},{"style":693},[7937],{"type":401,"value":1798},{"type":395,"tag":431,"props":7939,"children":7940},{"style":1386},[7941],{"type":401,"value":1406},{"type":395,"tag":431,"props":7943,"children":7944},{"class":433,"line":1525},[7945,7950,7954],{"type":395,"tag":431,"props":7946,"children":7947},{"style":671},[7948],{"type":401,"value":7949},"      }",{"type":395,"tag":431,"props":7951,"children":7952},{"style":1692},[7953],{"type":401,"value":5917},{"type":395,"tag":431,"props":7955,"children":7956},{"style":671},[7957],{"type":401,"value":1329},{"type":395,"tag":431,"props":7959,"children":7960},{"class":433,"line":2101},[7961,7965,7969,7973,7977,7981,7986,7990,7994,7998,8002,8006],{"type":395,"tag":431,"props":7962,"children":7963},{"style":665},[7964],{"type":401,"value":7867},{"type":395,"tag":431,"props":7966,"children":7967},{"style":671},[7968],{"type":401,"value":674},{"type":395,"tag":431,"props":7970,"children":7971},{"style":677},[7972],{"type":401,"value":1383},{"type":395,"tag":431,"props":7974,"children":7975},{"style":1386},[7976],{"type":401,"value":685},{"type":395,"tag":431,"props":7978,"children":7979},{"style":444},[7980],{"type":401,"value":458},{"type":395,"tag":431,"props":7982,"children":7983},{"style":450},[7984],{"type":401,"value":7985},"steps: ",{"type":395,"tag":431,"props":7987,"children":7988},{"style":444},[7989],{"type":401,"value":458},{"type":395,"tag":431,"props":7991,"children":7992},{"style":671},[7993],{"type":401,"value":701},{"type":395,"tag":431,"props":7995,"children":7996},{"style":1335},[7997],{"type":401,"value":3780},{"type":395,"tag":431,"props":7999,"children":8000},{"style":671},[8001],{"type":401,"value":674},{"type":395,"tag":431,"props":8003,"children":8004},{"style":665},[8005],{"type":401,"value":7904},{"type":395,"tag":431,"props":8007,"children":8008},{"style":1386},[8009],{"type":401,"value":1406},{"type":395,"tag":431,"props":8011,"children":8012},{"class":433,"line":2161},[8013],{"type":395,"tag":431,"props":8014,"children":8015},{"style":671},[8016],{"type":401,"value":8017},"      }\n",{"type":395,"tag":431,"props":8019,"children":8020},{"class":433,"line":2222},[8021],{"type":395,"tag":431,"props":8022,"children":8023},{"style":671},[8024],{"type":401,"value":2310},{"type":395,"tag":431,"props":8026,"children":8027},{"class":433,"line":2263},[8028,8032,8036,8040,8044],{"type":395,"tag":431,"props":8029,"children":8030},{"style":1692},[8031],{"type":401,"value":2726},{"type":395,"tag":431,"props":8033,"children":8034},{"style":677},[8035],{"type":401,"value":7811},{"type":395,"tag":431,"props":8037,"children":8038},{"style":1386},[8039],{"type":401,"value":685},{"type":395,"tag":431,"props":8041,"children":8042},{"style":665},[8043],{"type":401,"value":7789},{"type":395,"tag":431,"props":8045,"children":8046},{"style":1386},[8047],{"type":401,"value":1406},{"type":395,"tag":431,"props":8049,"children":8050},{"class":433,"line":2304},[8051],{"type":395,"tag":431,"props":8052,"children":8053},{"style":671},[8054],{"type":401,"value":2068},{"type":395,"tag":431,"props":8056,"children":8057},{"class":433,"line":2313},[8058],{"type":395,"tag":431,"props":8059,"children":8060},{"style":671},[8061],{"type":401,"value":1415},{"type":395,"tag":431,"props":8063,"children":8064},{"class":433,"line":2321},[8065,8070,8074,8079,8083,8088,8092],{"type":395,"tag":431,"props":8066,"children":8067},{"style":665},[8068],{"type":401,"value":8069},"obj",{"type":395,"tag":431,"props":8071,"children":8072},{"style":671},[8073],{"type":401,"value":674},{"type":395,"tag":431,"props":8075,"children":8076},{"style":677},[8077],{"type":401,"value":8078},"run",{"type":395,"tag":431,"props":8080,"children":8081},{"style":665},[8082],{"type":401,"value":685},{"type":395,"tag":431,"props":8084,"children":8085},{"style":693},[8086],{"type":401,"value":8087},"10",{"type":395,"tag":431,"props":8089,"children":8090},{"style":665},[8091],{"type":401,"value":715},{"type":395,"tag":431,"props":8093,"children":8094},{"style":718},[8095],{"type":401,"value":8096},"// steps: 10\n",{"type":395,"tag":403,"props":8098,"children":8100},{"id":8099},"函数的行为",[8101],{"type":401,"value":8099},{"type":395,"tag":409,"props":8103,"children":8104},{},[8105],{"type":401,"value":8106},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":395,"tag":409,"props":8108,"children":8109},{},[8110],{"type":401,"value":8111},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":395,"tag":409,"props":8113,"children":8114},{},[8115],{"type":401,"value":8116},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":395,"tag":409,"props":8118,"children":8119},{},[8120],{"type":401,"value":8121},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":395,"tag":420,"props":8123,"children":8125},{"className":653,"code":8124,"language":655,"meta":389,"style":389},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8126],{"type":395,"tag":427,"props":8127,"children":8128},{"__ignoreMap":389},[8129,8154,8166,8178,8190,8201,8218,8254,8261,8268,8292,8304,8351,8384,8429,8444,8480,8501,8509,8517,8526,8535],{"type":395,"tag":431,"props":8130,"children":8131},{"class":433,"line":434},[8132,8136,8141,8146,8150],{"type":395,"tag":431,"props":8133,"children":8134},{"style":988},[8135],{"type":401,"value":1314},{"type":395,"tag":431,"props":8137,"children":8138},{"style":461},[8139],{"type":401,"value":8140},"*",{"type":395,"tag":431,"props":8142,"children":8143},{"style":677},[8144],{"type":401,"value":8145}," GetThisDone",{"type":395,"tag":431,"props":8147,"children":8148},{"style":671},[8149],{"type":401,"value":1037},{"type":395,"tag":431,"props":8151,"children":8152},{"style":671},[8153],{"type":401,"value":1329},{"type":395,"tag":431,"props":8155,"children":8156},{"class":433,"line":724},[8157,8162],{"type":395,"tag":431,"props":8158,"children":8159},{"style":1692},[8160],{"type":401,"value":8161},"  try",{"type":395,"tag":431,"props":8163,"children":8164},{"style":671},[8165],{"type":401,"value":1329},{"type":395,"tag":431,"props":8167,"children":8168},{"class":433,"line":1368},[8169,8174],{"type":395,"tag":431,"props":8170,"children":8171},{"style":1692},[8172],{"type":401,"value":8173},"    yield",{"type":395,"tag":431,"props":8175,"children":8176},{"style":693},[8177],{"type":401,"value":6766},{"type":395,"tag":431,"props":8179,"children":8180},{"class":433,"line":1409},[8181,8185],{"type":395,"tag":431,"props":8182,"children":8183},{"style":1692},[8184],{"type":401,"value":8173},{"type":395,"tag":431,"props":8186,"children":8187},{"style":693},[8188],{"type":401,"value":8189}," 10\n",{"type":395,"tag":431,"props":8191,"children":8192},{"class":433,"line":1418},[8193,8197],{"type":395,"tag":431,"props":8194,"children":8195},{"style":1692},[8196],{"type":401,"value":8173},{"type":395,"tag":431,"props":8198,"children":8199},{"style":693},[8200],{"type":401,"value":6766},{"type":395,"tag":431,"props":8202,"children":8203},{"class":433,"line":1453},[8204,8209,8214],{"type":395,"tag":431,"props":8205,"children":8206},{"style":671},[8207],{"type":401,"value":8208},"  }",{"type":395,"tag":431,"props":8210,"children":8211},{"style":1692},[8212],{"type":401,"value":8213}," finally",{"type":395,"tag":431,"props":8215,"children":8216},{"style":671},[8217],{"type":401,"value":1329},{"type":395,"tag":431,"props":8219,"children":8220},{"class":433,"line":1490},[8221,8225,8229,8233,8237,8241,8246,8250],{"type":395,"tag":431,"props":8222,"children":8223},{"style":665},[8224],{"type":401,"value":7246},{"type":395,"tag":431,"props":8226,"children":8227},{"style":671},[8228],{"type":401,"value":674},{"type":395,"tag":431,"props":8230,"children":8231},{"style":677},[8232],{"type":401,"value":1383},{"type":395,"tag":431,"props":8234,"children":8235},{"style":1386},[8236],{"type":401,"value":685},{"type":395,"tag":431,"props":8238,"children":8239},{"style":444},[8240],{"type":401,"value":458},{"type":395,"tag":431,"props":8242,"children":8243},{"style":450},[8244],{"type":401,"value":8245},"done",{"type":395,"tag":431,"props":8247,"children":8248},{"style":444},[8249],{"type":401,"value":458},{"type":395,"tag":431,"props":8251,"children":8252},{"style":1386},[8253],{"type":401,"value":1406},{"type":395,"tag":431,"props":8255,"children":8256},{"class":433,"line":1498},[8257],{"type":395,"tag":431,"props":8258,"children":8259},{"style":671},[8260],{"type":401,"value":2068},{"type":395,"tag":431,"props":8262,"children":8263},{"class":433,"line":1525},[8264],{"type":395,"tag":431,"props":8265,"children":8266},{"style":671},[8267],{"type":401,"value":1415},{"type":395,"tag":431,"props":8269,"children":8270},{"class":433,"line":2101},[8271,8275,8280,8284,8288],{"type":395,"tag":431,"props":8272,"children":8273},{"style":988},[8274],{"type":401,"value":5779},{"type":395,"tag":431,"props":8276,"children":8277},{"style":1422},[8278],{"type":401,"value":8279}," get",{"type":395,"tag":431,"props":8281,"children":8282},{"style":461},[8283],{"type":401,"value":1352},{"type":395,"tag":431,"props":8285,"children":8286},{"style":677},[8287],{"type":401,"value":8145},{"type":395,"tag":431,"props":8289,"children":8290},{"style":665},[8291],{"type":401,"value":3329},{"type":395,"tag":431,"props":8293,"children":8294},{"class":433,"line":2161},[8295,8299],{"type":395,"tag":431,"props":8296,"children":8297},{"style":988},[8298],{"type":401,"value":991},{"type":395,"tag":431,"props":8300,"children":8301},{"style":665},[8302],{"type":401,"value":8303}," val\n",{"type":395,"tag":431,"props":8305,"children":8306},{"class":433,"line":2222},[8307,8312,8317,8321,8325,8329,8334,8338,8342,8347],{"type":395,"tag":431,"props":8308,"children":8309},{"style":1692},[8310],{"type":401,"value":8311},"while",{"type":395,"tag":431,"props":8313,"children":8314},{"style":665},[8315],{"type":401,"value":8316}," (val ",{"type":395,"tag":431,"props":8318,"children":8319},{"style":461},[8320],{"type":401,"value":1863},{"type":395,"tag":431,"props":8322,"children":8323},{"style":665},[8324],{"type":401,"value":8279},{"type":395,"tag":431,"props":8326,"children":8327},{"style":671},[8328],{"type":401,"value":674},{"type":395,"tag":431,"props":8330,"children":8331},{"style":677},[8332],{"type":401,"value":8333},"next",{"type":395,"tag":431,"props":8335,"children":8336},{"style":665},[8337],{"type":401,"value":1037},{"type":395,"tag":431,"props":8339,"children":8340},{"style":671},[8341],{"type":401,"value":674},{"type":395,"tag":431,"props":8343,"children":8344},{"style":665},[8345],{"type":401,"value":8346},"value) ",{"type":395,"tag":431,"props":8348,"children":8349},{"style":671},[8350],{"type":401,"value":1738},{"type":395,"tag":431,"props":8352,"children":8353},{"class":433,"line":2263},[8354,8358,8362,8367,8371,8376,8380],{"type":395,"tag":431,"props":8355,"children":8356},{"style":1692},[8357],{"type":401,"value":6509},{"type":395,"tag":431,"props":8359,"children":8360},{"style":1386},[8361],{"type":401,"value":1921},{"type":395,"tag":431,"props":8363,"children":8364},{"style":665},[8365],{"type":401,"value":8366},"val",{"type":395,"tag":431,"props":8368,"children":8369},{"style":461},[8370],{"type":401,"value":1949},{"type":395,"tag":431,"props":8372,"children":8373},{"style":693},[8374],{"type":401,"value":8375}," 10",{"type":395,"tag":431,"props":8377,"children":8378},{"style":1386},[8379],{"type":401,"value":715},{"type":395,"tag":431,"props":8381,"children":8382},{"style":671},[8383],{"type":401,"value":1738},{"type":395,"tag":431,"props":8385,"children":8386},{"class":433,"line":2304},[8387,8391,8395,8399,8403,8407,8412,8416,8420,8425],{"type":395,"tag":431,"props":8388,"children":8389},{"style":665},[8390],{"type":401,"value":7246},{"type":395,"tag":431,"props":8392,"children":8393},{"style":671},[8394],{"type":401,"value":674},{"type":395,"tag":431,"props":8396,"children":8397},{"style":677},[8398],{"type":401,"value":1383},{"type":395,"tag":431,"props":8400,"children":8401},{"style":1386},[8402],{"type":401,"value":685},{"type":395,"tag":431,"props":8404,"children":8405},{"style":444},[8406],{"type":401,"value":458},{"type":395,"tag":431,"props":8408,"children":8409},{"style":450},[8410],{"type":401,"value":8411},"right val:",{"type":395,"tag":431,"props":8413,"children":8414},{"style":444},[8415],{"type":401,"value":458},{"type":395,"tag":431,"props":8417,"children":8418},{"style":671},[8419],{"type":401,"value":701},{"type":395,"tag":431,"props":8421,"children":8422},{"style":665},[8423],{"type":401,"value":8424}," val",{"type":395,"tag":431,"props":8426,"children":8427},{"style":1386},[8428],{"type":401,"value":1406},{"type":395,"tag":431,"props":8430,"children":8431},{"class":433,"line":2313},[8432,8436,8440],{"type":395,"tag":431,"props":8433,"children":8434},{"style":671},[8435],{"type":401,"value":8208},{"type":395,"tag":431,"props":8437,"children":8438},{"style":1692},[8439],{"type":401,"value":5917},{"type":395,"tag":431,"props":8441,"children":8442},{"style":671},[8443],{"type":401,"value":1329},{"type":395,"tag":431,"props":8445,"children":8446},{"class":433,"line":2321},[8447,8451,8455,8459,8463,8467,8472,8476],{"type":395,"tag":431,"props":8448,"children":8449},{"style":665},[8450],{"type":401,"value":7246},{"type":395,"tag":431,"props":8452,"children":8453},{"style":671},[8454],{"type":401,"value":674},{"type":395,"tag":431,"props":8456,"children":8457},{"style":677},[8458],{"type":401,"value":1383},{"type":395,"tag":431,"props":8460,"children":8461},{"style":1386},[8462],{"type":401,"value":685},{"type":395,"tag":431,"props":8464,"children":8465},{"style":444},[8466],{"type":401,"value":458},{"type":395,"tag":431,"props":8468,"children":8469},{"style":450},[8470],{"type":401,"value":8471},"wrong val",{"type":395,"tag":431,"props":8473,"children":8474},{"style":444},[8475],{"type":401,"value":458},{"type":395,"tag":431,"props":8477,"children":8478},{"style":1386},[8479],{"type":401,"value":1406},{"type":395,"tag":431,"props":8481,"children":8482},{"class":433,"line":5987},[8483,8488,8492,8497],{"type":395,"tag":431,"props":8484,"children":8485},{"style":665},[8486],{"type":401,"value":8487},"    get",{"type":395,"tag":431,"props":8489,"children":8490},{"style":671},[8491],{"type":401,"value":674},{"type":395,"tag":431,"props":8493,"children":8494},{"style":677},[8495],{"type":401,"value":8496},"return",{"type":395,"tag":431,"props":8498,"children":8499},{"style":1386},[8500],{"type":401,"value":3329},{"type":395,"tag":431,"props":8502,"children":8504},{"class":433,"line":8503},18,[8505],{"type":395,"tag":431,"props":8506,"children":8507},{"style":671},[8508],{"type":401,"value":2068},{"type":395,"tag":431,"props":8510,"children":8512},{"class":433,"line":8511},19,[8513],{"type":395,"tag":431,"props":8514,"children":8515},{"style":671},[8516],{"type":401,"value":1415},{"type":395,"tag":431,"props":8518,"children":8520},{"class":433,"line":8519},20,[8521],{"type":395,"tag":431,"props":8522,"children":8523},{"style":718},[8524],{"type":401,"value":8525},"// right val: 1\n",{"type":395,"tag":431,"props":8527,"children":8529},{"class":433,"line":8528},21,[8530],{"type":395,"tag":431,"props":8531,"children":8532},{"style":718},[8533],{"type":401,"value":8534},"// wrong val\n",{"type":395,"tag":431,"props":8536,"children":8538},{"class":433,"line":8537},22,[8539],{"type":395,"tag":431,"props":8540,"children":8541},{"style":718},[8542],{"type":401,"value":8543},"// done\n",{"type":395,"tag":403,"props":8545,"children":8547},{"id":8546},"闭包",[8548],{"type":401,"value":8546},{"type":395,"tag":409,"props":8550,"children":8551},{},[8552],{"type":401,"value":8553},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":395,"tag":409,"props":8555,"children":8556},{},[8557],{"type":401,"value":8558},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":395,"tag":509,"props":8560,"children":8561},{},[8562,8567,8572],{"type":395,"tag":513,"props":8563,"children":8564},{},[8565],{"type":401,"value":8566},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":395,"tag":513,"props":8568,"children":8569},{},[8570],{"type":401,"value":8571},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":395,"tag":513,"props":8573,"children":8574},{},[8575],{"type":401,"value":8576},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":395,"tag":409,"props":8578,"children":8579},{},[8580],{"type":401,"value":8581},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":395,"tag":420,"props":8583,"children":8585},{"className":653,"code":8584,"language":655,"meta":389,"style":389},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8586],{"type":395,"tag":427,"props":8587,"children":8588},{"__ignoreMap":389},[8589,8608,8623,8630,8641],{"type":395,"tag":431,"props":8590,"children":8591},{"class":433,"line":434},[8592,8596,8600,8604],{"type":395,"tag":431,"props":8593,"children":8594},{"style":988},[8595],{"type":401,"value":1314},{"type":395,"tag":431,"props":8597,"children":8598},{"style":677},[8599],{"type":401,"value":2014},{"type":395,"tag":431,"props":8601,"children":8602},{"style":671},[8603],{"type":401,"value":1324},{"type":395,"tag":431,"props":8605,"children":8606},{"style":671},[8607],{"type":401,"value":1329},{"type":395,"tag":431,"props":8609,"children":8610},{"class":433,"line":724},[8611,8615,8619],{"type":395,"tag":431,"props":8612,"children":8613},{"style":665},[8614],{"type":401,"value":2762},{"type":395,"tag":431,"props":8616,"children":8617},{"style":461},[8618],{"type":401,"value":1352},{"type":395,"tag":431,"props":8620,"children":8621},{"style":693},[8622],{"type":401,"value":6766},{"type":395,"tag":431,"props":8624,"children":8625},{"class":433,"line":1368},[8626],{"type":395,"tag":431,"props":8627,"children":8628},{"style":671},[8629],{"type":401,"value":1415},{"type":395,"tag":431,"props":8631,"children":8632},{"class":433,"line":1409},[8633,8637],{"type":395,"tag":431,"props":8634,"children":8635},{"style":677},[8636],{"type":401,"value":1714},{"type":395,"tag":431,"props":8638,"children":8639},{"style":665},[8640],{"type":401,"value":3329},{"type":395,"tag":431,"props":8642,"children":8643},{"class":433,"line":1418},[8644,8648,8652,8656,8660,8664,8669],{"type":395,"tag":431,"props":8645,"children":8646},{"style":665},[8647],{"type":401,"value":5008},{"type":395,"tag":431,"props":8649,"children":8650},{"style":671},[8651],{"type":401,"value":674},{"type":395,"tag":431,"props":8653,"children":8654},{"style":677},[8655],{"type":401,"value":1383},{"type":395,"tag":431,"props":8657,"children":8658},{"style":665},[8659],{"type":401,"value":685},{"type":395,"tag":431,"props":8661,"children":8662},{"style":461},[8663],{"type":401,"value":944},{"type":395,"tag":431,"props":8665,"children":8666},{"style":665},[8667],{"type":401,"value":8668}," test) ",{"type":395,"tag":431,"props":8670,"children":8671},{"style":718},[8672],{"type":401,"value":8673},"// number\n",{"type":395,"tag":409,"props":8675,"children":8676},{},[8677],{"type":401,"value":8678},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":395,"tag":409,"props":8680,"children":8681},{},[8682],{"type":401,"value":8683},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":395,"tag":420,"props":8685,"children":8687},{"className":653,"code":8686,"language":655,"meta":389,"style":389},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8688],{"type":395,"tag":427,"props":8689,"children":8690},{"__ignoreMap":389},[8691,8727,8747,8764,8784,8807,8823,8830],{"type":395,"tag":431,"props":8692,"children":8693},{"class":433,"line":434},[8694,8698,8702,8706,8710,8715,8719,8723],{"type":395,"tag":431,"props":8695,"children":8696},{"style":988},[8697],{"type":401,"value":991},{"type":395,"tag":431,"props":8699,"children":8700},{"style":665},[8701],{"type":401,"value":3132},{"type":395,"tag":431,"props":8703,"children":8704},{"style":461},[8705],{"type":401,"value":1863},{"type":395,"tag":431,"props":8707,"children":8708},{"style":671},[8709],{"type":401,"value":1700},{"type":395,"tag":431,"props":8711,"children":8712},{"style":1386},[8713],{"type":401,"value":8714}," value",{"type":395,"tag":431,"props":8716,"children":8717},{"style":671},[8718],{"type":401,"value":1848},{"type":395,"tag":431,"props":8720,"children":8721},{"style":693},[8722],{"type":401,"value":500},{"type":395,"tag":431,"props":8724,"children":8725},{"style":671},[8726],{"type":401,"value":3159},{"type":395,"tag":431,"props":8728,"children":8729},{"class":433,"line":724},[8730,8734,8739,8743],{"type":395,"tag":431,"props":8731,"children":8732},{"style":988},[8733],{"type":401,"value":991},{"type":395,"tag":431,"props":8735,"children":8736},{"style":665},[8737],{"type":401,"value":8738}," b ",{"type":395,"tag":431,"props":8740,"children":8741},{"style":461},[8742],{"type":401,"value":1863},{"type":395,"tag":431,"props":8744,"children":8745},{"style":693},[8746],{"type":401,"value":6766},{"type":395,"tag":431,"props":8748,"children":8749},{"class":433,"line":1368},[8750,8755,8760],{"type":395,"tag":431,"props":8751,"children":8752},{"style":1692},[8753],{"type":401,"value":8754},"with",{"type":395,"tag":431,"props":8756,"children":8757},{"style":665},[8758],{"type":401,"value":8759}," (a) ",{"type":395,"tag":431,"props":8761,"children":8762},{"style":671},[8763],{"type":401,"value":1738},{"type":395,"tag":431,"props":8765,"children":8766},{"class":433,"line":1409},[8767,8772,8776,8780],{"type":395,"tag":431,"props":8768,"children":8769},{"style":988},[8770],{"type":401,"value":8771}," var",{"type":395,"tag":431,"props":8773,"children":8774},{"style":665},[8775],{"type":401,"value":8714},{"type":395,"tag":431,"props":8777,"children":8778},{"style":461},[8779],{"type":401,"value":1352},{"type":395,"tag":431,"props":8781,"children":8782},{"style":693},[8783],{"type":401,"value":6342},{"type":395,"tag":431,"props":8785,"children":8786},{"class":433,"line":1418},[8787,8791,8795,8799,8803],{"type":395,"tag":431,"props":8788,"children":8789},{"style":665},[8790],{"type":401,"value":3212},{"type":395,"tag":431,"props":8792,"children":8793},{"style":671},[8794],{"type":401,"value":674},{"type":395,"tag":431,"props":8796,"children":8797},{"style":665},[8798],{"type":401,"value":1347},{"type":395,"tag":431,"props":8800,"children":8801},{"style":461},[8802],{"type":401,"value":1352},{"type":395,"tag":431,"props":8804,"children":8805},{"style":693},[8806],{"type":401,"value":6766},{"type":395,"tag":431,"props":8808,"children":8809},{"class":433,"line":1453},[8810,8814,8818],{"type":395,"tag":431,"props":8811,"children":8812},{"style":665},[8813],{"type":401,"value":7023},{"type":395,"tag":431,"props":8815,"children":8816},{"style":461},[8817],{"type":401,"value":1352},{"type":395,"tag":431,"props":8819,"children":8820},{"style":693},[8821],{"type":401,"value":8822}," 2\n",{"type":395,"tag":431,"props":8824,"children":8825},{"class":433,"line":1490},[8826],{"type":395,"tag":431,"props":8827,"children":8828},{"style":671},[8829],{"type":401,"value":1415},{"type":395,"tag":431,"props":8831,"children":8832},{"class":433,"line":1498},[8833,8837,8841,8845,8849,8853,8857,8861,8866],{"type":395,"tag":431,"props":8834,"children":8835},{"style":665},[8836],{"type":401,"value":5008},{"type":395,"tag":431,"props":8838,"children":8839},{"style":671},[8840],{"type":401,"value":674},{"type":395,"tag":431,"props":8842,"children":8843},{"style":677},[8844],{"type":401,"value":1383},{"type":395,"tag":431,"props":8846,"children":8847},{"style":665},[8848],{"type":401,"value":7309},{"type":395,"tag":431,"props":8850,"children":8851},{"style":671},[8852],{"type":401,"value":701},{"type":395,"tag":431,"props":8854,"children":8855},{"style":665},[8856],{"type":401,"value":7023},{"type":395,"tag":431,"props":8858,"children":8859},{"style":671},[8860],{"type":401,"value":701},{"type":395,"tag":431,"props":8862,"children":8863},{"style":665},[8864],{"type":401,"value":8865}," value) ",{"type":395,"tag":431,"props":8867,"children":8868},{"style":718},[8869],{"type":401,"value":8870},"// { value:100, b:2 }, 1, undefined\n",{"type":395,"tag":409,"props":8872,"children":8873},{},[8874],{"type":401,"value":8875},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":395,"tag":409,"props":8877,"children":8878},{},[8879],{"type":401,"value":8880},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":395,"tag":409,"props":8882,"children":8883},{},[8884],{"type":401,"value":8885},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":395,"tag":409,"props":8887,"children":8888},{},[8889],{"type":401,"value":8890},"闭包内标识符系统的优先级规则：",{"type":395,"tag":509,"props":8892,"children":8893},{},[8894,8899,8904],{"type":395,"tag":513,"props":8895,"children":8896},{},[8897],{"type":401,"value":8898},"内部函数声明 > 函数参数名列表",{"type":395,"tag":513,"props":8900,"children":8901},{},[8902],{"type":401,"value":8903},"参数中的 arguments 名字 > 函数的 arguments",{"type":395,"tag":513,"props":8905,"children":8906},{},[8907],{"type":401,"value":8908},"var 声明的名字如果已存在，则不再创建新变量",{"type":395,"tag":409,"props":8910,"children":8911},{},[8912],{"type":401,"value":8913},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":395,"tag":396,"props":8915,"children":8917},{"id":8916},"动态语言特性",[8918],{"type":401,"value":8916},{"type":395,"tag":403,"props":8920,"children":8922},{"id":8921},"概述-2",[8923],{"type":401,"value":6041},{"type":395,"tag":409,"props":8925,"children":8926},{},[8927],{"type":401,"value":8928},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":395,"tag":409,"props":8930,"children":8931},{},[8932],{"type":401,"value":8933},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":395,"tag":403,"props":8935,"children":8937},{"id":8936},"对象与值类型之间的转换",[8938],{"type":401,"value":8936},{"type":395,"tag":409,"props":8940,"children":8941},{},[8942],{"type":401,"value":8943},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":395,"tag":420,"props":8945,"children":8947},{"className":653,"code":8946,"language":655,"meta":389,"style":389},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8948],{"type":395,"tag":427,"props":8949,"children":8950},{"__ignoreMap":389},[8951,8999,9022,9030,9074,9081],{"type":395,"tag":431,"props":8952,"children":8953},{"class":433,"line":434},[8954,8958,8963,8967,8971,8975,8979,8983,8987,8991,8995],{"type":395,"tag":431,"props":8955,"children":8956},{"style":988},[8957],{"type":401,"value":2624},{"type":395,"tag":431,"props":8959,"children":8960},{"style":7808},[8961],{"type":401,"value":8962}," toString",{"type":395,"tag":431,"props":8964,"children":8965},{"style":461},[8966],{"type":401,"value":1352},{"type":395,"tag":431,"props":8968,"children":8969},{"style":671},[8970],{"type":401,"value":1324},{"type":395,"tag":431,"props":8972,"children":8973},{"style":988},[8974],{"type":401,"value":5715},{"type":395,"tag":431,"props":8976,"children":8977},{"style":665},[8978],{"type":401,"value":2031},{"type":395,"tag":431,"props":8980,"children":8981},{"style":671},[8982],{"type":401,"value":674},{"type":395,"tag":431,"props":8984,"children":8985},{"style":677},[8986],{"type":401,"value":1383},{"type":395,"tag":431,"props":8988,"children":8989},{"style":665},[8990],{"type":401,"value":685},{"type":395,"tag":431,"props":8992,"children":8993},{"style":693},[8994],{"type":401,"value":500},{"type":395,"tag":431,"props":8996,"children":8997},{"style":665},[8998],{"type":401,"value":1406},{"type":395,"tag":431,"props":9000,"children":9001},{"class":433,"line":724},[9002,9006,9010,9014,9018],{"type":395,"tag":431,"props":9003,"children":9004},{"style":1692},[9005],{"type":401,"value":8754},{"type":395,"tag":431,"props":9007,"children":9008},{"style":665},[9009],{"type":401,"value":1921},{"type":395,"tag":431,"props":9011,"children":9012},{"style":693},[9013],{"type":401,"value":500},{"type":395,"tag":431,"props":9015,"children":9016},{"style":665},[9017],{"type":401,"value":715},{"type":395,"tag":431,"props":9019,"children":9020},{"style":671},[9021],{"type":401,"value":1738},{"type":395,"tag":431,"props":9023,"children":9024},{"class":433,"line":1368},[9025],{"type":395,"tag":431,"props":9026,"children":9027},{"style":718},[9028],{"type":401,"value":9029},"  // equal to (1).toString = ...\n",{"type":395,"tag":431,"props":9031,"children":9032},{"class":433,"line":1409},[9033,9038,9042,9046,9050,9054,9058,9062,9066,9070],{"type":395,"tag":431,"props":9034,"children":9035},{"style":677},[9036],{"type":401,"value":9037},"  toString",{"type":395,"tag":431,"props":9039,"children":9040},{"style":461},[9041],{"type":401,"value":1352},{"type":395,"tag":431,"props":9043,"children":9044},{"style":671},[9045],{"type":401,"value":1324},{"type":395,"tag":431,"props":9047,"children":9048},{"style":988},[9049],{"type":401,"value":5715},{"type":395,"tag":431,"props":9051,"children":9052},{"style":665},[9053],{"type":401,"value":2031},{"type":395,"tag":431,"props":9055,"children":9056},{"style":671},[9057],{"type":401,"value":674},{"type":395,"tag":431,"props":9059,"children":9060},{"style":677},[9061],{"type":401,"value":1383},{"type":395,"tag":431,"props":9063,"children":9064},{"style":1386},[9065],{"type":401,"value":685},{"type":395,"tag":431,"props":9067,"children":9068},{"style":693},[9069],{"type":401,"value":528},{"type":395,"tag":431,"props":9071,"children":9072},{"style":1386},[9073],{"type":401,"value":1406},{"type":395,"tag":431,"props":9075,"children":9076},{"class":433,"line":1418},[9077],{"type":395,"tag":431,"props":9078,"children":9079},{"style":671},[9080],{"type":401,"value":1415},{"type":395,"tag":431,"props":9082,"children":9083},{"class":433,"line":1453},[9084,9088,9092,9096,9100,9105,9109],{"type":395,"tag":431,"props":9085,"children":9086},{"style":665},[9087],{"type":401,"value":5008},{"type":395,"tag":431,"props":9089,"children":9090},{"style":671},[9091],{"type":401,"value":674},{"type":395,"tag":431,"props":9093,"children":9094},{"style":677},[9095],{"type":401,"value":1383},{"type":395,"tag":431,"props":9097,"children":9098},{"style":665},[9099],{"type":401,"value":685},{"type":395,"tag":431,"props":9101,"children":9102},{"style":677},[9103],{"type":401,"value":9104},"toString",{"type":395,"tag":431,"props":9106,"children":9107},{"style":665},[9108],{"type":401,"value":803},{"type":395,"tag":431,"props":9110,"children":9111},{"style":718},[9112],{"type":401,"value":6712},{"type":395,"tag":409,"props":9114,"children":9115},{},[9116],{"type":401,"value":9117},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":395,"tag":409,"props":9119,"children":9120},{},[9121],{"type":401,"value":9122},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":395,"tag":420,"props":9124,"children":9126},{"className":653,"code":9125,"language":655,"meta":389,"style":389},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9127],{"type":395,"tag":427,"props":9128,"children":9129},{"__ignoreMap":389},[9130,9172,9215],{"type":395,"tag":431,"props":9131,"children":9132},{"class":433,"line":434},[9133,9138,9142,9146,9150,9155,9159,9163,9167],{"type":395,"tag":431,"props":9134,"children":9135},{"style":2811},[9136],{"type":401,"value":9137},"String",{"type":395,"tag":431,"props":9139,"children":9140},{"style":671},[9141],{"type":401,"value":674},{"type":395,"tag":431,"props":9143,"children":9144},{"style":1422},[9145],{"type":401,"value":2822},{"type":395,"tag":431,"props":9147,"children":9148},{"style":671},[9149],{"type":401,"value":674},{"type":395,"tag":431,"props":9151,"children":9152},{"style":677},[9153],{"type":401,"value":9154},"valueOf",{"type":395,"tag":431,"props":9156,"children":9157},{"style":461},[9158],{"type":401,"value":1352},{"type":395,"tag":431,"props":9160,"children":9161},{"style":671},[9162],{"type":401,"value":1324},{"type":395,"tag":431,"props":9164,"children":9165},{"style":988},[9166],{"type":401,"value":5715},{"type":395,"tag":431,"props":9168,"children":9169},{"style":693},[9170],{"type":401,"value":9171}," 0\n",{"type":395,"tag":431,"props":9173,"children":9174},{"class":433,"line":724},[9175,9179,9183,9187,9191,9195,9199,9203,9207,9211],{"type":395,"tag":431,"props":9176,"children":9177},{"style":665},[9178],{"type":401,"value":5008},{"type":395,"tag":431,"props":9180,"children":9181},{"style":671},[9182],{"type":401,"value":674},{"type":395,"tag":431,"props":9184,"children":9185},{"style":677},[9186],{"type":401,"value":1383},{"type":395,"tag":431,"props":9188,"children":9189},{"style":665},[9190],{"type":401,"value":685},{"type":395,"tag":431,"props":9192,"children":9193},{"style":461},[9194],{"type":401,"value":690},{"type":395,"tag":431,"props":9196,"children":9197},{"style":444},[9198],{"type":401,"value":458},{"type":395,"tag":431,"props":9200,"children":9201},{"style":450},[9202],{"type":401,"value":500},{"type":395,"tag":431,"props":9204,"children":9205},{"style":444},[9206],{"type":401,"value":458},{"type":395,"tag":431,"props":9208,"children":9209},{"style":665},[9210],{"type":401,"value":715},{"type":395,"tag":431,"props":9212,"children":9213},{"style":718},[9214],{"type":401,"value":6712},{"type":395,"tag":431,"props":9216,"children":9217},{"class":433,"line":1368},[9218,9222,9226,9230,9234,9239,9243,9247,9251,9255,9259,9264],{"type":395,"tag":431,"props":9219,"children":9220},{"style":665},[9221],{"type":401,"value":5008},{"type":395,"tag":431,"props":9223,"children":9224},{"style":671},[9225],{"type":401,"value":674},{"type":395,"tag":431,"props":9227,"children":9228},{"style":677},[9229],{"type":401,"value":1383},{"type":395,"tag":431,"props":9231,"children":9232},{"style":665},[9233],{"type":401,"value":685},{"type":395,"tag":431,"props":9235,"children":9236},{"style":461},[9237],{"type":401,"value":9238},"+new",{"type":395,"tag":431,"props":9240,"children":9241},{"style":677},[9242],{"type":401,"value":4101},{"type":395,"tag":431,"props":9244,"children":9245},{"style":665},[9246],{"type":401,"value":685},{"type":395,"tag":431,"props":9248,"children":9249},{"style":444},[9250],{"type":401,"value":458},{"type":395,"tag":431,"props":9252,"children":9253},{"style":450},[9254],{"type":401,"value":500},{"type":395,"tag":431,"props":9256,"children":9257},{"style":444},[9258],{"type":401,"value":458},{"type":395,"tag":431,"props":9260,"children":9261},{"style":665},[9262],{"type":401,"value":9263},")) ",{"type":395,"tag":431,"props":9265,"children":9266},{"style":718},[9267],{"type":401,"value":9268},"// 0\n",{"type":395,"tag":409,"props":9270,"children":9271},{},[9272],{"type":401,"value":9273},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":395,"tag":420,"props":9275,"children":9277},{"className":653,"code":9276,"language":655,"meta":389,"style":389},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9278],{"type":395,"tag":427,"props":9279,"children":9280},{"__ignoreMap":389},[9281,9318,9350,9382],{"type":395,"tag":431,"props":9282,"children":9283},{"class":433,"line":434},[9284,9288,9293,9297,9301,9305,9309,9314],{"type":395,"tag":431,"props":9285,"children":9286},{"style":988},[9287],{"type":401,"value":5779},{"type":395,"tag":431,"props":9289,"children":9290},{"style":1422},[9291],{"type":401,"value":9292}," f",{"type":395,"tag":431,"props":9294,"children":9295},{"style":461},[9296],{"type":401,"value":1352},{"type":395,"tag":431,"props":9298,"children":9299},{"style":461},[9300],{"type":401,"value":2831},{"type":395,"tag":431,"props":9302,"children":9303},{"style":677},[9304],{"type":401,"value":4101},{"type":395,"tag":431,"props":9306,"children":9307},{"style":665},[9308],{"type":401,"value":685},{"type":395,"tag":431,"props":9310,"children":9311},{"style":827},[9312],{"type":401,"value":9313},"false",{"type":395,"tag":431,"props":9315,"children":9316},{"style":665},[9317],{"type":401,"value":1406},{"type":395,"tag":431,"props":9319,"children":9320},{"class":433,"line":724},[9321,9325,9329,9333,9337,9341,9346],{"type":395,"tag":431,"props":9322,"children":9323},{"style":665},[9324],{"type":401,"value":5008},{"type":395,"tag":431,"props":9326,"children":9327},{"style":671},[9328],{"type":401,"value":674},{"type":395,"tag":431,"props":9330,"children":9331},{"style":677},[9332],{"type":401,"value":1383},{"type":395,"tag":431,"props":9334,"children":9335},{"style":665},[9336],{"type":401,"value":685},{"type":395,"tag":431,"props":9338,"children":9339},{"style":461},[9340],{"type":401,"value":690},{"type":395,"tag":431,"props":9342,"children":9343},{"style":665},[9344],{"type":401,"value":9345},"f) ",{"type":395,"tag":431,"props":9347,"children":9348},{"style":718},[9349],{"type":401,"value":9268},{"type":395,"tag":431,"props":9351,"children":9352},{"class":433,"line":1368},[9353,9357,9361,9365,9369,9374,9378],{"type":395,"tag":431,"props":9354,"children":9355},{"style":665},[9356],{"type":401,"value":5008},{"type":395,"tag":431,"props":9358,"children":9359},{"style":671},[9360],{"type":401,"value":674},{"type":395,"tag":431,"props":9362,"children":9363},{"style":677},[9364],{"type":401,"value":1383},{"type":395,"tag":431,"props":9366,"children":9367},{"style":665},[9368],{"type":401,"value":685},{"type":395,"tag":431,"props":9370,"children":9371},{"style":461},[9372],{"type":401,"value":9373},"!!",{"type":395,"tag":431,"props":9375,"children":9376},{"style":665},[9377],{"type":401,"value":9345},{"type":395,"tag":431,"props":9379,"children":9380},{"style":718},[9381],{"type":401,"value":765},{"type":395,"tag":431,"props":9383,"children":9384},{"class":433,"line":1409},[9385,9389,9393,9397,9401,9405,9410],{"type":395,"tag":431,"props":9386,"children":9387},{"style":665},[9388],{"type":401,"value":5008},{"type":395,"tag":431,"props":9390,"children":9391},{"style":671},[9392],{"type":401,"value":674},{"type":395,"tag":431,"props":9394,"children":9395},{"style":677},[9396],{"type":401,"value":1383},{"type":395,"tag":431,"props":9398,"children":9399},{"style":665},[9400],{"type":401,"value":685},{"type":395,"tag":431,"props":9402,"children":9403},{"style":677},[9404],{"type":401,"value":790},{"type":395,"tag":431,"props":9406,"children":9407},{"style":665},[9408],{"type":401,"value":9409},"(f)) ",{"type":395,"tag":431,"props":9411,"children":9412},{"style":718},[9413],{"type":401,"value":765},{"type":395,"tag":409,"props":9415,"children":9416},{},[9417],{"type":401,"value":9418},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":395,"tag":403,"props":9420,"children":9422},{"id":9421},"值类型的转换",[9423],{"type":401,"value":9421},{"type":395,"tag":409,"props":9425,"children":9426},{},[9427],{"type":401,"value":9428},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":395,"tag":409,"props":9430,"children":9431},{},[9432],{"type":401,"value":9433},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":395,"tag":409,"props":9435,"children":9436},{},[9437],{"type":401,"value":9438},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":395,"tag":420,"props":9440,"children":9442},{"className":653,"code":9441,"language":655,"meta":389,"style":389},"parseInt(1e35) // 1\n",[9443],{"type":395,"tag":427,"props":9444,"children":9445},{"__ignoreMap":389},[9446],{"type":395,"tag":431,"props":9447,"children":9448},{"class":433,"line":434},[9449,9454,9458,9463,9467],{"type":395,"tag":431,"props":9450,"children":9451},{"style":677},[9452],{"type":401,"value":9453},"parseInt",{"type":395,"tag":431,"props":9455,"children":9456},{"style":665},[9457],{"type":401,"value":685},{"type":395,"tag":431,"props":9459,"children":9460},{"style":693},[9461],{"type":401,"value":9462},"1e35",{"type":395,"tag":431,"props":9464,"children":9465},{"style":665},[9466],{"type":401,"value":715},{"type":395,"tag":431,"props":9468,"children":9469},{"style":718},[9470],{"type":401,"value":6712},{"type":395,"tag":409,"props":9472,"children":9473},{},[9474],{"type":401,"value":9475},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":395,"tag":420,"props":9477,"children":9479},{"className":653,"code":9478,"language":655,"meta":389,"style":389},"String() // ''\nString(undefined) // undefined\n",[9480],{"type":395,"tag":427,"props":9481,"children":9482},{"__ignoreMap":389},[9483,9499],{"type":395,"tag":431,"props":9484,"children":9485},{"class":433,"line":434},[9486,9490,9494],{"type":395,"tag":431,"props":9487,"children":9488},{"style":677},[9489],{"type":401,"value":9137},{"type":395,"tag":431,"props":9491,"children":9492},{"style":665},[9493],{"type":401,"value":819},{"type":395,"tag":431,"props":9495,"children":9496},{"style":718},[9497],{"type":401,"value":9498},"// ''\n",{"type":395,"tag":431,"props":9500,"children":9501},{"class":433,"line":724},[9502,9506,9510,9514,9518],{"type":395,"tag":431,"props":9503,"children":9504},{"style":677},[9505],{"type":401,"value":9137},{"type":395,"tag":431,"props":9507,"children":9508},{"style":665},[9509],{"type":401,"value":685},{"type":395,"tag":431,"props":9511,"children":9512},{"style":744},[9513],{"type":401,"value":4543},{"type":395,"tag":431,"props":9515,"children":9516},{"style":665},[9517],{"type":401,"value":715},{"type":395,"tag":431,"props":9519,"children":9520},{"style":718},[9521],{"type":401,"value":954},{"type":395,"tag":403,"props":9523,"children":9525},{"id":9524},"对象与数组的动态特性",[9526],{"type":401,"value":9524},{"type":395,"tag":409,"props":9528,"children":9529},{},[9530],{"type":401,"value":9531},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":395,"tag":420,"props":9533,"children":9535},{"className":653,"code":9534,"language":655,"meta":389,"style":389},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9536],{"type":395,"tag":427,"props":9537,"children":9538},{"__ignoreMap":389},[9539,9575,9600,9623,9647],{"type":395,"tag":431,"props":9540,"children":9541},{"class":433,"line":434},[9542,9546,9550,9554,9558,9563,9567,9571],{"type":395,"tag":431,"props":9543,"children":9544},{"style":988},[9545],{"type":401,"value":5779},{"type":395,"tag":431,"props":9547,"children":9548},{"style":1422},[9549],{"type":401,"value":3212},{"type":395,"tag":431,"props":9551,"children":9552},{"style":461},[9553],{"type":401,"value":1352},{"type":395,"tag":431,"props":9555,"children":9556},{"style":461},[9557],{"type":401,"value":2831},{"type":395,"tag":431,"props":9559,"children":9560},{"style":677},[9561],{"type":401,"value":9562}," Array",{"type":395,"tag":431,"props":9564,"children":9565},{"style":665},[9566],{"type":401,"value":685},{"type":395,"tag":431,"props":9568,"children":9569},{"style":693},[9570],{"type":401,"value":8087},{"type":395,"tag":431,"props":9572,"children":9573},{"style":665},[9574],{"type":401,"value":1406},{"type":395,"tag":431,"props":9576,"children":9577},{"class":433,"line":724},[9578,9583,9587,9592,9596],{"type":395,"tag":431,"props":9579,"children":9580},{"style":665},[9581],{"type":401,"value":9582},"a[",{"type":395,"tag":431,"props":9584,"children":9585},{"style":693},[9586],{"type":401,"value":500},{"type":395,"tag":431,"props":9588,"children":9589},{"style":665},[9590],{"type":401,"value":9591},"] ",{"type":395,"tag":431,"props":9593,"children":9594},{"style":461},[9595],{"type":401,"value":1863},{"type":395,"tag":431,"props":9597,"children":9598},{"style":693},[9599],{"type":401,"value":6766},{"type":395,"tag":431,"props":9601,"children":9602},{"class":433,"line":1368},[9603,9607,9611,9615,9619],{"type":395,"tag":431,"props":9604,"children":9605},{"style":665},[9606],{"type":401,"value":9582},{"type":395,"tag":431,"props":9608,"children":9609},{"style":693},[9610],{"type":401,"value":6289},{"type":395,"tag":431,"props":9612,"children":9613},{"style":665},[9614],{"type":401,"value":9591},{"type":395,"tag":431,"props":9616,"children":9617},{"style":461},[9618],{"type":401,"value":1863},{"type":395,"tag":431,"props":9620,"children":9621},{"style":693},[9622],{"type":401,"value":6766},{"type":395,"tag":431,"props":9624,"children":9625},{"class":433,"line":1409},[9626,9630,9635,9639,9643],{"type":395,"tag":431,"props":9627,"children":9628},{"style":665},[9629],{"type":401,"value":9582},{"type":395,"tag":431,"props":9631,"children":9632},{"style":693},[9633],{"type":401,"value":9634},"7",{"type":395,"tag":431,"props":9636,"children":9637},{"style":665},[9638],{"type":401,"value":9591},{"type":395,"tag":431,"props":9640,"children":9641},{"style":461},[9642],{"type":401,"value":1863},{"type":395,"tag":431,"props":9644,"children":9645},{"style":693},[9646],{"type":401,"value":6766},{"type":395,"tag":431,"props":9648,"children":9649},{"class":433,"line":1418},[9650,9654,9658,9663,9667,9671,9675,9680,9684,9689,9693,9698,9703,9707],{"type":395,"tag":431,"props":9651,"children":9652},{"style":665},[9653],{"type":401,"value":492},{"type":395,"tag":431,"props":9655,"children":9656},{"style":671},[9657],{"type":401,"value":674},{"type":395,"tag":431,"props":9659,"children":9660},{"style":677},[9661],{"type":401,"value":9662},"sort",{"type":395,"tag":431,"props":9664,"children":9665},{"style":665},[9666],{"type":401,"value":685},{"type":395,"tag":431,"props":9668,"children":9669},{"style":671},[9670],{"type":401,"value":1037},{"type":395,"tag":431,"props":9672,"children":9673},{"style":988},[9674],{"type":401,"value":5715},{"type":395,"tag":431,"props":9676,"children":9677},{"style":665},[9678],{"type":401,"value":9679}," Math",{"type":395,"tag":431,"props":9681,"children":9682},{"style":671},[9683],{"type":401,"value":674},{"type":395,"tag":431,"props":9685,"children":9686},{"style":677},[9687],{"type":401,"value":9688},"random",{"type":395,"tag":431,"props":9690,"children":9691},{"style":665},[9692],{"type":401,"value":819},{"type":395,"tag":431,"props":9694,"children":9695},{"style":461},[9696],{"type":401,"value":9697},"-",{"type":395,"tag":431,"props":9699,"children":9700},{"style":693},[9701],{"type":401,"value":9702}," 0.5",{"type":395,"tag":431,"props":9704,"children":9705},{"style":665},[9706],{"type":401,"value":715},{"type":395,"tag":431,"props":9708,"children":9709},{"style":718},[9710],{"type":401,"value":9711},"// [1, 1, 1, empty x 7]\n",{"type":395,"tag":409,"props":9713,"children":9714},{},[9715],{"type":401,"value":9716},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":395,"tag":409,"props":9718,"children":9719},{},[9720],{"type":401,"value":9721},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":395,"tag":403,"props":9723,"children":9725},{"id":9724},"重写",[9726],{"type":401,"value":9724},{"type":395,"tag":409,"props":9728,"children":9729},{},[9730],{"type":401,"value":9731},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":395,"tag":409,"props":9733,"children":9734},{},[9735],{"type":401,"value":9736},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":395,"tag":409,"props":9738,"children":9739},{},[9740],{"type":401,"value":9741},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":395,"tag":420,"props":9743,"children":9745},{"className":653,"code":9744,"language":655,"meta":389,"style":389},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9746],{"type":395,"tag":427,"props":9747,"children":9748},{"__ignoreMap":389},[9749,9790,9805,9826,9843,9850,9861,9884,9916,9951,9991,10031,10039,10095,10110,10158,10165,10172,10183,10206],{"type":395,"tag":431,"props":9750,"children":9751},{"class":433,"line":434},[9752,9756,9760,9764,9768,9772,9777,9781,9786],{"type":395,"tag":431,"props":9753,"children":9754},{"style":988},[9755],{"type":401,"value":5779},{"type":395,"tag":431,"props":9757,"children":9758},{"style":1422},[9759],{"type":401,"value":3212},{"type":395,"tag":431,"props":9761,"children":9762},{"style":461},[9763],{"type":401,"value":1352},{"type":395,"tag":431,"props":9765,"children":9766},{"style":665},[9767],{"type":401,"value":4101},{"type":395,"tag":431,"props":9769,"children":9770},{"style":671},[9771],{"type":401,"value":674},{"type":395,"tag":431,"props":9773,"children":9774},{"style":677},[9775],{"type":401,"value":9776},"defineProperties",{"type":395,"tag":431,"props":9778,"children":9779},{"style":665},[9780],{"type":401,"value":685},{"type":395,"tag":431,"props":9782,"children":9783},{"style":671},[9784],{"type":401,"value":9785},"{},",{"type":395,"tag":431,"props":9787,"children":9788},{"style":671},[9789],{"type":401,"value":1329},{"type":395,"tag":431,"props":9791,"children":9792},{"class":433,"line":724},[9793,9797,9801],{"type":395,"tag":431,"props":9794,"children":9795},{"style":1386},[9796],{"type":401,"value":2762},{"type":395,"tag":431,"props":9798,"children":9799},{"style":671},[9800],{"type":401,"value":1848},{"type":395,"tag":431,"props":9802,"children":9803},{"style":671},[9804],{"type":401,"value":1329},{"type":395,"tag":431,"props":9806,"children":9807},{"class":433,"line":1368},[9808,9813,9817,9822],{"type":395,"tag":431,"props":9809,"children":9810},{"style":1386},[9811],{"type":401,"value":9812},"    value",{"type":395,"tag":431,"props":9814,"children":9815},{"style":671},[9816],{"type":401,"value":1848},{"type":395,"tag":431,"props":9818,"children":9819},{"style":693},[9820],{"type":401,"value":9821}," 100",{"type":395,"tag":431,"props":9823,"children":9824},{"style":671},[9825],{"type":401,"value":7222},{"type":395,"tag":431,"props":9827,"children":9828},{"class":433,"line":1409},[9829,9834,9838],{"type":395,"tag":431,"props":9830,"children":9831},{"style":1386},[9832],{"type":401,"value":9833},"    configurable",{"type":395,"tag":431,"props":9835,"children":9836},{"style":671},[9837],{"type":401,"value":1848},{"type":395,"tag":431,"props":9839,"children":9840},{"style":827},[9841],{"type":401,"value":9842}," true\n",{"type":395,"tag":431,"props":9844,"children":9845},{"class":433,"line":1418},[9846],{"type":395,"tag":431,"props":9847,"children":9848},{"style":671},[9849],{"type":401,"value":2068},{"type":395,"tag":431,"props":9851,"children":9852},{"class":433,"line":1453},[9853,9857],{"type":395,"tag":431,"props":9854,"children":9855},{"style":671},[9856],{"type":401,"value":1662},{"type":395,"tag":431,"props":9858,"children":9859},{"style":665},[9860],{"type":401,"value":1406},{"type":395,"tag":431,"props":9862,"children":9863},{"class":433,"line":1490},[9864,9868,9872,9876,9880],{"type":395,"tag":431,"props":9865,"children":9866},{"style":665},[9867],{"type":401,"value":492},{"type":395,"tag":431,"props":9869,"children":9870},{"style":671},[9871],{"type":401,"value":674},{"type":395,"tag":431,"props":9873,"children":9874},{"style":665},[9875],{"type":401,"value":4140},{"type":395,"tag":431,"props":9877,"children":9878},{"style":461},[9879],{"type":401,"value":1863},{"type":395,"tag":431,"props":9881,"children":9882},{"style":693},[9883],{"type":401,"value":6766},{"type":395,"tag":431,"props":9885,"children":9886},{"class":433,"line":1498},[9887,9891,9895,9899,9903,9907,9911],{"type":395,"tag":431,"props":9888,"children":9889},{"style":665},[9890],{"type":401,"value":5008},{"type":395,"tag":431,"props":9892,"children":9893},{"style":671},[9894],{"type":401,"value":674},{"type":395,"tag":431,"props":9896,"children":9897},{"style":677},[9898],{"type":401,"value":1383},{"type":395,"tag":431,"props":9900,"children":9901},{"style":665},[9902],{"type":401,"value":7309},{"type":395,"tag":431,"props":9904,"children":9905},{"style":671},[9906],{"type":401,"value":674},{"type":395,"tag":431,"props":9908,"children":9909},{"style":665},[9910],{"type":401,"value":6018},{"type":395,"tag":431,"props":9912,"children":9913},{"style":718},[9914],{"type":401,"value":9915},"// 100\n",{"type":395,"tag":431,"props":9917,"children":9918},{"class":433,"line":1525},[9919,9923,9927,9931,9935,9939,9943,9947],{"type":395,"tag":431,"props":9920,"children":9921},{"style":988},[9922],{"type":401,"value":5779},{"type":395,"tag":431,"props":9924,"children":9925},{"style":1422},[9926],{"type":401,"value":7023},{"type":395,"tag":431,"props":9928,"children":9929},{"style":461},[9930],{"type":401,"value":1352},{"type":395,"tag":431,"props":9932,"children":9933},{"style":461},[9934],{"type":401,"value":2831},{"type":395,"tag":431,"props":9936,"children":9937},{"style":677},[9938],{"type":401,"value":5625},{"type":395,"tag":431,"props":9940,"children":9941},{"style":665},[9942],{"type":401,"value":7309},{"type":395,"tag":431,"props":9944,"children":9945},{"style":671},[9946],{"type":401,"value":701},{"type":395,"tag":431,"props":9948,"children":9949},{"style":671},[9950],{"type":401,"value":1329},{"type":395,"tag":431,"props":9952,"children":9953},{"class":433,"line":2101},[9954,9958,9962,9966,9970,9975,9979,9983,9987],{"type":395,"tag":431,"props":9955,"children":9956},{"style":2648},[9957],{"type":401,"value":2645},{"type":395,"tag":431,"props":9959,"children":9960},{"style":671},[9961],{"type":401,"value":1921},{"type":395,"tag":431,"props":9963,"children":9964},{"style":1615},[9965],{"type":401,"value":5643},{"type":395,"tag":431,"props":9967,"children":9968},{"style":671},[9969],{"type":401,"value":701},{"type":395,"tag":431,"props":9971,"children":9972},{"style":1615},[9973],{"type":401,"value":9974}," key",{"type":395,"tag":431,"props":9976,"children":9977},{"style":671},[9978],{"type":401,"value":701},{"type":395,"tag":431,"props":9980,"children":9981},{"style":1615},[9982],{"type":401,"value":8714},{"type":395,"tag":431,"props":9984,"children":9985},{"style":671},[9986],{"type":401,"value":1623},{"type":395,"tag":431,"props":9988,"children":9989},{"style":671},[9990],{"type":401,"value":1329},{"type":395,"tag":431,"props":9992,"children":9993},{"class":433,"line":2161},[9994,9998,10002,10007,10011,10015,10019,10023,10027],{"type":395,"tag":431,"props":9995,"children":9996},{"style":1692},[9997],{"type":401,"value":1982},{"type":395,"tag":431,"props":9999,"children":10000},{"style":1386},[10001],{"type":401,"value":1921},{"type":395,"tag":431,"props":10003,"children":10004},{"style":665},[10005],{"type":401,"value":10006},"key",{"type":395,"tag":431,"props":10008,"children":10009},{"style":461},[10010],{"type":401,"value":1995},{"type":395,"tag":431,"props":10012,"children":10013},{"style":444},[10014],{"type":401,"value":447},{"type":395,"tag":431,"props":10016,"children":10017},{"style":450},[10018],{"type":401,"value":1714},{"type":395,"tag":431,"props":10020,"children":10021},{"style":444},[10022],{"type":401,"value":458},{"type":395,"tag":431,"props":10024,"children":10025},{"style":1386},[10026],{"type":401,"value":715},{"type":395,"tag":431,"props":10028,"children":10029},{"style":671},[10030],{"type":401,"value":1738},{"type":395,"tag":431,"props":10032,"children":10033},{"class":433,"line":2222},[10034],{"type":395,"tag":431,"props":10035,"children":10036},{"style":718},[10037],{"type":401,"value":10038},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":395,"tag":431,"props":10040,"children":10041},{"class":433,"line":2263},[10042,10046,10050,10054,10059,10063,10067,10071,10075,10079,10083,10087,10091],{"type":395,"tag":431,"props":10043,"children":10044},{"style":1692},[10045],{"type":401,"value":5892},{"type":395,"tag":431,"props":10047,"children":10048},{"style":665},[10049],{"type":401,"value":5933},{"type":395,"tag":431,"props":10051,"children":10052},{"style":671},[10053],{"type":401,"value":674},{"type":395,"tag":431,"props":10055,"children":10056},{"style":677},[10057],{"type":401,"value":10058},"defineProperty",{"type":395,"tag":431,"props":10060,"children":10061},{"style":1386},[10062],{"type":401,"value":685},{"type":395,"tag":431,"props":10064,"children":10065},{"style":665},[10066],{"type":401,"value":5643},{"type":395,"tag":431,"props":10068,"children":10069},{"style":671},[10070],{"type":401,"value":701},{"type":395,"tag":431,"props":10072,"children":10073},{"style":665},[10074],{"type":401,"value":9974},{"type":395,"tag":431,"props":10076,"children":10077},{"style":671},[10078],{"type":401,"value":701},{"type":395,"tag":431,"props":10080,"children":10081},{"style":671},[10082],{"type":401,"value":1700},{"type":395,"tag":431,"props":10084,"children":10085},{"style":665},[10086],{"type":401,"value":8714},{"type":395,"tag":431,"props":10088,"children":10089},{"style":671},[10090],{"type":401,"value":1723},{"type":395,"tag":431,"props":10092,"children":10093},{"style":1386},[10094],{"type":401,"value":1406},{"type":395,"tag":431,"props":10096,"children":10097},{"class":433,"line":2304},[10098,10102,10106],{"type":395,"tag":431,"props":10099,"children":10100},{"style":671},[10101],{"type":401,"value":5912},{"type":395,"tag":431,"props":10103,"children":10104},{"style":1692},[10105],{"type":401,"value":5917},{"type":395,"tag":431,"props":10107,"children":10108},{"style":671},[10109],{"type":401,"value":1329},{"type":395,"tag":431,"props":10111,"children":10112},{"class":433,"line":2313},[10113,10117,10121,10125,10130,10134,10138,10142,10146,10150,10154],{"type":395,"tag":431,"props":10114,"children":10115},{"style":1692},[10116],{"type":401,"value":5892},{"type":395,"tag":431,"props":10118,"children":10119},{"style":665},[10120],{"type":401,"value":5933},{"type":395,"tag":431,"props":10122,"children":10123},{"style":671},[10124],{"type":401,"value":674},{"type":395,"tag":431,"props":10126,"children":10127},{"style":677},[10128],{"type":401,"value":10129},"set",{"type":395,"tag":431,"props":10131,"children":10132},{"style":1386},[10133],{"type":401,"value":685},{"type":395,"tag":431,"props":10135,"children":10136},{"style":665},[10137],{"type":401,"value":5643},{"type":395,"tag":431,"props":10139,"children":10140},{"style":671},[10141],{"type":401,"value":701},{"type":395,"tag":431,"props":10143,"children":10144},{"style":665},[10145],{"type":401,"value":9974},{"type":395,"tag":431,"props":10147,"children":10148},{"style":671},[10149],{"type":401,"value":701},{"type":395,"tag":431,"props":10151,"children":10152},{"style":665},[10153],{"type":401,"value":8714},{"type":395,"tag":431,"props":10155,"children":10156},{"style":1386},[10157],{"type":401,"value":1406},{"type":395,"tag":431,"props":10159,"children":10160},{"class":433,"line":2321},[10161],{"type":395,"tag":431,"props":10162,"children":10163},{"style":671},[10164],{"type":401,"value":2310},{"type":395,"tag":431,"props":10166,"children":10167},{"class":433,"line":5987},[10168],{"type":395,"tag":431,"props":10169,"children":10170},{"style":671},[10171],{"type":401,"value":2068},{"type":395,"tag":431,"props":10173,"children":10174},{"class":433,"line":8503},[10175,10179],{"type":395,"tag":431,"props":10176,"children":10177},{"style":671},[10178],{"type":401,"value":1662},{"type":395,"tag":431,"props":10180,"children":10181},{"style":665},[10182],{"type":401,"value":1406},{"type":395,"tag":431,"props":10184,"children":10185},{"class":433,"line":8511},[10186,10190,10194,10198,10202],{"type":395,"tag":431,"props":10187,"children":10188},{"style":665},[10189],{"type":401,"value":1347},{"type":395,"tag":431,"props":10191,"children":10192},{"style":671},[10193],{"type":401,"value":674},{"type":395,"tag":431,"props":10195,"children":10196},{"style":665},[10197],{"type":401,"value":4140},{"type":395,"tag":431,"props":10199,"children":10200},{"style":461},[10201],{"type":401,"value":1863},{"type":395,"tag":431,"props":10203,"children":10204},{"style":693},[10205],{"type":401,"value":6766},{"type":395,"tag":431,"props":10207,"children":10208},{"class":433,"line":8519},[10209,10213,10217,10221,10226,10230,10234],{"type":395,"tag":431,"props":10210,"children":10211},{"style":665},[10212],{"type":401,"value":5008},{"type":395,"tag":431,"props":10214,"children":10215},{"style":671},[10216],{"type":401,"value":674},{"type":395,"tag":431,"props":10218,"children":10219},{"style":677},[10220],{"type":401,"value":1383},{"type":395,"tag":431,"props":10222,"children":10223},{"style":665},[10224],{"type":401,"value":10225},"(b",{"type":395,"tag":431,"props":10227,"children":10228},{"style":671},[10229],{"type":401,"value":674},{"type":395,"tag":431,"props":10231,"children":10232},{"style":665},[10233],{"type":401,"value":6018},{"type":395,"tag":431,"props":10235,"children":10236},{"style":718},[10237],{"type":401,"value":6712},{"type":395,"tag":409,"props":10239,"children":10240},{},[10241],{"type":401,"value":10242},"自增自减运算符会隐式的转换操作数的类型。",{"type":395,"tag":409,"props":10244,"children":10245},{},[10246],{"type":401,"value":10247},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":395,"tag":420,"props":10249,"children":10251},{"className":653,"code":10250,"language":655,"meta":389,"style":389},"class a extends a {}\n",[10252],{"type":395,"tag":427,"props":10253,"children":10254},{"__ignoreMap":389},[10255],{"type":395,"tag":431,"props":10256,"children":10257},{"class":433,"line":434},[10258,10262,10266,10270,10274],{"type":395,"tag":431,"props":10259,"children":10260},{"style":988},[10261],{"type":401,"value":3533},{"type":395,"tag":431,"props":10263,"children":10264},{"style":3536},[10265],{"type":401,"value":3212},{"type":395,"tag":431,"props":10267,"children":10268},{"style":3556},[10269],{"type":401,"value":3559},{"type":395,"tag":431,"props":10271,"children":10272},{"style":3562},[10273],{"type":401,"value":3212},{"type":395,"tag":431,"props":10275,"children":10276},{"style":671},[10277],{"type":401,"value":3120},{"type":395,"tag":409,"props":10279,"children":10280},{},[10281],{"type":401,"value":10282},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":395,"tag":409,"props":10284,"children":10285},{},[10286],{"type":401,"value":10287},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":395,"tag":409,"props":10289,"children":10290},{},[10291],{"type":401,"value":10292},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":395,"tag":420,"props":10294,"children":10296},{"className":653,"code":10295,"language":655,"meta":389,"style":389},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10297],{"type":395,"tag":427,"props":10298,"children":10299},{"__ignoreMap":389},[10300,10353,10366,10373],{"type":395,"tag":431,"props":10301,"children":10302},{"class":433,"line":434},[10303,10307,10312,10316,10320,10325,10329,10333,10337,10341,10345,10349],{"type":395,"tag":431,"props":10304,"children":10305},{"style":1692},[10306],{"type":401,"value":8754},{"type":395,"tag":431,"props":10308,"children":10309},{"style":665},[10310],{"type":401,"value":10311}," (a ",{"type":395,"tag":431,"props":10313,"children":10314},{"style":461},[10315],{"type":401,"value":1863},{"type":395,"tag":431,"props":10317,"children":10318},{"style":671},[10319],{"type":401,"value":1700},{"type":395,"tag":431,"props":10321,"children":10322},{"style":1386},[10323],{"type":401,"value":10324}," undefined",{"type":395,"tag":431,"props":10326,"children":10327},{"style":671},[10328],{"type":401,"value":1848},{"type":395,"tag":431,"props":10330,"children":10331},{"style":444},[10332],{"type":401,"value":447},{"type":395,"tag":431,"props":10334,"children":10335},{"style":450},[10336],{"type":401,"value":1714},{"type":395,"tag":431,"props":10338,"children":10339},{"style":444},[10340],{"type":401,"value":458},{"type":395,"tag":431,"props":10342,"children":10343},{"style":671},[10344],{"type":401,"value":1723},{"type":395,"tag":431,"props":10346,"children":10347},{"style":665},[10348],{"type":401,"value":715},{"type":395,"tag":431,"props":10350,"children":10351},{"style":671},[10352],{"type":401,"value":1738},{"type":395,"tag":431,"props":10354,"children":10355},{"class":433,"line":724},[10356,10361],{"type":395,"tag":431,"props":10357,"children":10358},{"style":461},[10359],{"type":401,"value":10360},"  delete",{"type":395,"tag":431,"props":10362,"children":10363},{"style":744},[10364],{"type":401,"value":10365}," undefined\n",{"type":395,"tag":431,"props":10367,"children":10368},{"class":433,"line":1368},[10369],{"type":395,"tag":431,"props":10370,"children":10371},{"style":671},[10372],{"type":401,"value":1415},{"type":395,"tag":431,"props":10374,"children":10375},{"class":433,"line":1409},[10376,10380,10384,10388,10393],{"type":395,"tag":431,"props":10377,"children":10378},{"style":665},[10379],{"type":401,"value":5008},{"type":395,"tag":431,"props":10381,"children":10382},{"style":671},[10383],{"type":401,"value":674},{"type":395,"tag":431,"props":10385,"children":10386},{"style":677},[10387],{"type":401,"value":1383},{"type":395,"tag":431,"props":10389,"children":10390},{"style":665},[10391],{"type":401,"value":10392},"(a) ",{"type":395,"tag":431,"props":10394,"children":10395},{"style":718},[10396],{"type":401,"value":7485},{"type":395,"tag":403,"props":10398,"children":10400},{"id":10399},"动态绑定",[10401],{"type":401,"value":10399},{"type":395,"tag":409,"props":10403,"children":10404},{},[10405],{"type":401,"value":10406},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":395,"tag":420,"props":10408,"children":10410},{"className":653,"code":10409,"language":655,"meta":389,"style":389},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10411],{"type":395,"tag":427,"props":10412,"children":10413},{"__ignoreMap":389},[10414,10434,10454,10482,10490,10519,10527,10556,10564,10610,10618,10659,10666],{"type":395,"tag":431,"props":10415,"children":10416},{"class":433,"line":434},[10417,10421,10426,10430],{"type":395,"tag":431,"props":10418,"children":10419},{"style":988},[10420],{"type":401,"value":1314},{"type":395,"tag":431,"props":10422,"children":10423},{"style":677},[10424],{"type":401,"value":10425}," indirect",{"type":395,"tag":431,"props":10427,"children":10428},{"style":671},[10429],{"type":401,"value":1037},{"type":395,"tag":431,"props":10431,"children":10432},{"style":671},[10433],{"type":401,"value":1329},{"type":395,"tag":431,"props":10435,"children":10436},{"class":433,"line":724},[10437,10441,10445,10449],{"type":395,"tag":431,"props":10438,"children":10439},{"style":988},[10440],{"type":401,"value":3766},{"type":395,"tag":431,"props":10442,"children":10443},{"style":1422},[10444],{"type":401,"value":7811},{"type":395,"tag":431,"props":10446,"children":10447},{"style":461},[10448],{"type":401,"value":1352},{"type":395,"tag":431,"props":10450,"children":10451},{"style":665},[10452],{"type":401,"value":10453}," eval\n",{"type":395,"tag":431,"props":10455,"children":10456},{"class":433,"line":1368},[10457,10461,10466,10470,10474,10478],{"type":395,"tag":431,"props":10458,"children":10459},{"style":988},[10460],{"type":401,"value":3766},{"type":395,"tag":431,"props":10462,"children":10463},{"style":7808},[10464],{"type":401,"value":10465}," getEval",{"type":395,"tag":431,"props":10467,"children":10468},{"style":461},[10469],{"type":401,"value":1352},{"type":395,"tag":431,"props":10471,"children":10472},{"style":671},[10473],{"type":401,"value":1324},{"type":395,"tag":431,"props":10475,"children":10476},{"style":988},[10477],{"type":401,"value":5715},{"type":395,"tag":431,"props":10479,"children":10480},{"style":665},[10481],{"type":401,"value":10453},{"type":395,"tag":431,"props":10483,"children":10484},{"class":433,"line":1409},[10485],{"type":395,"tag":431,"props":10486,"children":10487},{"style":718},[10488],{"type":401,"value":10489},"  // 单值表达式\n",{"type":395,"tag":431,"props":10491,"children":10492},{"class":433,"line":1418},[10493,10498,10502,10506,10511,10515],{"type":395,"tag":431,"props":10494,"children":10495},{"style":677},[10496],{"type":401,"value":10497},"  exec",{"type":395,"tag":431,"props":10499,"children":10500},{"style":1386},[10501],{"type":401,"value":685},{"type":395,"tag":431,"props":10503,"children":10504},{"style":444},[10505],{"type":401,"value":458},{"type":395,"tag":431,"props":10507,"children":10508},{"style":450},[10509],{"type":401,"value":10510},"console.log(this === globalThis)",{"type":395,"tag":431,"props":10512,"children":10513},{"style":444},[10514],{"type":401,"value":458},{"type":395,"tag":431,"props":10516,"children":10517},{"style":1386},[10518],{"type":401,"value":1406},{"type":395,"tag":431,"props":10520,"children":10521},{"class":433,"line":1453},[10522],{"type":395,"tag":431,"props":10523,"children":10524},{"style":718},[10525],{"type":401,"value":10526},"  // 函数返回\n",{"type":395,"tag":431,"props":10528,"children":10529},{"class":433,"line":1490},[10530,10535,10540,10544,10548,10552],{"type":395,"tag":431,"props":10531,"children":10532},{"style":677},[10533],{"type":401,"value":10534},"  getEval",{"type":395,"tag":431,"props":10536,"children":10537},{"style":1386},[10538],{"type":401,"value":10539},"()(",{"type":395,"tag":431,"props":10541,"children":10542},{"style":444},[10543],{"type":401,"value":458},{"type":395,"tag":431,"props":10545,"children":10546},{"style":450},[10547],{"type":401,"value":10510},{"type":395,"tag":431,"props":10549,"children":10550},{"style":444},[10551],{"type":401,"value":458},{"type":395,"tag":431,"props":10553,"children":10554},{"style":1386},[10555],{"type":401,"value":1406},{"type":395,"tag":431,"props":10557,"children":10558},{"class":433,"line":1498},[10559],{"type":395,"tag":431,"props":10560,"children":10561},{"style":718},[10562],{"type":401,"value":10563},"  // 携带逗号运算符的分组运算符\n",{"type":395,"tag":431,"props":10565,"children":10566},{"class":433,"line":1525},[10567,10572,10576,10580,10584,10589,10594,10598,10602,10606],{"type":395,"tag":431,"props":10568,"children":10569},{"style":671},[10570],{"type":401,"value":10571},"  ;",{"type":395,"tag":431,"props":10573,"children":10574},{"style":1386},[10575],{"type":401,"value":685},{"type":395,"tag":431,"props":10577,"children":10578},{"style":693},[10579],{"type":401,"value":696},{"type":395,"tag":431,"props":10581,"children":10582},{"style":671},[10583],{"type":401,"value":701},{"type":395,"tag":431,"props":10585,"children":10586},{"style":665},[10587],{"type":401,"value":10588}," eval",{"type":395,"tag":431,"props":10590,"children":10591},{"style":1386},[10592],{"type":401,"value":10593},")(",{"type":395,"tag":431,"props":10595,"children":10596},{"style":444},[10597],{"type":401,"value":458},{"type":395,"tag":431,"props":10599,"children":10600},{"style":450},[10601],{"type":401,"value":10510},{"type":395,"tag":431,"props":10603,"children":10604},{"style":444},[10605],{"type":401,"value":458},{"type":395,"tag":431,"props":10607,"children":10608},{"style":1386},[10609],{"type":401,"value":1406},{"type":395,"tag":431,"props":10611,"children":10612},{"class":433,"line":2101},[10613],{"type":395,"tag":431,"props":10614,"children":10615},{"style":718},[10616],{"type":401,"value":10617},"  // eval.call 等方法\n",{"type":395,"tag":431,"props":10619,"children":10620},{"class":433,"line":2161},[10621,10626,10630,10634,10639,10643,10647,10651,10655],{"type":395,"tag":431,"props":10622,"children":10623},{"style":665},[10624],{"type":401,"value":10625},"  eval",{"type":395,"tag":431,"props":10627,"children":10628},{"style":671},[10629],{"type":401,"value":674},{"type":395,"tag":431,"props":10631,"children":10632},{"style":677},[10633],{"type":401,"value":6876},{"type":395,"tag":431,"props":10635,"children":10636},{"style":1386},[10637],{"type":401,"value":10638},"(()",{"type":395,"tag":431,"props":10640,"children":10641},{"style":671},[10642],{"type":401,"value":701},{"type":395,"tag":431,"props":10644,"children":10645},{"style":444},[10646],{"type":401,"value":447},{"type":395,"tag":431,"props":10648,"children":10649},{"style":450},[10650],{"type":401,"value":10510},{"type":395,"tag":431,"props":10652,"children":10653},{"style":444},[10654],{"type":401,"value":458},{"type":395,"tag":431,"props":10656,"children":10657},{"style":1386},[10658],{"type":401,"value":1406},{"type":395,"tag":431,"props":10660,"children":10661},{"class":433,"line":2222},[10662],{"type":395,"tag":431,"props":10663,"children":10664},{"style":671},[10665],{"type":401,"value":1415},{"type":395,"tag":431,"props":10667,"children":10668},{"class":433,"line":2263},[10669,10674,10678,10682,10686,10691],{"type":395,"tag":431,"props":10670,"children":10671},{"style":665},[10672],{"type":401,"value":10673},"indirect",{"type":395,"tag":431,"props":10675,"children":10676},{"style":671},[10677],{"type":401,"value":674},{"type":395,"tag":431,"props":10679,"children":10680},{"style":677},[10681],{"type":401,"value":7706},{"type":395,"tag":431,"props":10683,"children":10684},{"style":665},[10685],{"type":401,"value":685},{"type":395,"tag":431,"props":10687,"children":10688},{"style":671},[10689],{"type":401,"value":10690},"{}",{"type":395,"tag":431,"props":10692,"children":10693},{"style":665},[10694],{"type":401,"value":10695},")()\n",{"type":395,"tag":409,"props":10697,"children":10698},{},[10699],{"type":401,"value":10700},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":395,"tag":409,"props":10702,"children":10703},{},[10704],{"type":401,"value":10705},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":395,"tag":420,"props":10707,"children":10709},{"className":653,"code":10708,"language":655,"meta":389,"style":389},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10710],{"type":395,"tag":427,"props":10711,"children":10712},{"__ignoreMap":389},[10713,10728,10764,10786,10842],{"type":395,"tag":431,"props":10714,"children":10715},{"class":433,"line":434},[10716,10720,10724],{"type":395,"tag":431,"props":10717,"children":10718},{"style":665},[10719],{"type":401,"value":7174},{"type":395,"tag":431,"props":10721,"children":10722},{"style":461},[10723],{"type":401,"value":1863},{"type":395,"tag":431,"props":10725,"children":10726},{"style":693},[10727],{"type":401,"value":6342},{"type":395,"tag":431,"props":10729,"children":10730},{"class":433,"line":724},[10731,10735,10739,10743,10747,10751,10755,10760],{"type":395,"tag":431,"props":10732,"children":10733},{"style":988},[10734],{"type":401,"value":5779},{"type":395,"tag":431,"props":10736,"children":10737},{"style":1422},[10738],{"type":401,"value":2629},{"type":395,"tag":431,"props":10740,"children":10741},{"style":461},[10742],{"type":401,"value":1352},{"type":395,"tag":431,"props":10744,"children":10745},{"style":671},[10746],{"type":401,"value":1700},{"type":395,"tag":431,"props":10748,"children":10749},{"style":1386},[10750],{"type":401,"value":6464},{"type":395,"tag":431,"props":10752,"children":10753},{"style":671},[10754],{"type":401,"value":1848},{"type":395,"tag":431,"props":10756,"children":10757},{"style":693},[10758],{"type":401,"value":10759}," 200",{"type":395,"tag":431,"props":10761,"children":10762},{"style":671},[10763],{"type":401,"value":3159},{"type":395,"tag":431,"props":10765,"children":10766},{"class":433,"line":1368},[10767,10771,10776,10781],{"type":395,"tag":431,"props":10768,"children":10769},{"style":1692},[10770],{"type":401,"value":8754},{"type":395,"tag":431,"props":10772,"children":10773},{"style":665},[10774],{"type":401,"value":10775}," (obj) ",{"type":395,"tag":431,"props":10777,"children":10778},{"style":671},[10779],{"type":401,"value":10780},"{",{"type":395,"tag":431,"props":10782,"children":10783},{"style":1386},[10784],{"type":401,"value":10785}," \n",{"type":395,"tag":431,"props":10787,"children":10788},{"class":433,"line":1409},[10789,10793,10797,10801,10805,10809,10813,10817,10821,10825,10829,10833,10837],{"type":395,"tag":431,"props":10790,"children":10791},{"style":677},[10792],{"type":401,"value":10625},{"type":395,"tag":431,"props":10794,"children":10795},{"style":1386},[10796],{"type":401,"value":685},{"type":395,"tag":431,"props":10798,"children":10799},{"style":665},[10800],{"type":401,"value":5008},{"type":395,"tag":431,"props":10802,"children":10803},{"style":671},[10804],{"type":401,"value":674},{"type":395,"tag":431,"props":10806,"children":10807},{"style":677},[10808],{"type":401,"value":1383},{"type":395,"tag":431,"props":10810,"children":10811},{"style":1386},[10812],{"type":401,"value":685},{"type":395,"tag":431,"props":10814,"children":10815},{"style":665},[10816],{"type":401,"value":2659},{"type":395,"tag":431,"props":10818,"children":10819},{"style":671},[10820],{"type":401,"value":701},{"type":395,"tag":431,"props":10822,"children":10823},{"style":1335},[10824],{"type":401,"value":3780},{"type":395,"tag":431,"props":10826,"children":10827},{"style":671},[10828],{"type":401,"value":674},{"type":395,"tag":431,"props":10830,"children":10831},{"style":665},[10832],{"type":401,"value":2659},{"type":395,"tag":431,"props":10834,"children":10835},{"style":1386},[10836],{"type":401,"value":9263},{"type":395,"tag":431,"props":10838,"children":10839},{"style":718},[10840],{"type":401,"value":10841},"// 200 100\n",{"type":395,"tag":431,"props":10843,"children":10844},{"class":433,"line":1418},[10845],{"type":395,"tag":431,"props":10846,"children":10847},{"style":671},[10848],{"type":401,"value":1415},{"type":395,"tag":409,"props":10850,"children":10851},{},[10852],{"type":401,"value":10853},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":395,"tag":403,"props":10855,"children":10857},{"id":10856},"动态方法调用",[10858],{"type":401,"value":10856},{"type":395,"tag":409,"props":10860,"children":10861},{},[10862],{"type":401,"value":10863},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":395,"tag":409,"props":10865,"children":10866},{},[10867],{"type":401,"value":10868},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":395,"tag":409,"props":10870,"children":10871},{},[10872],{"type":401,"value":10873},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":395,"tag":409,"props":10875,"children":10876},{},[10877],{"type":401,"value":10878},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":395,"tag":420,"props":10880,"children":10882},{"className":653,"code":10881,"language":655,"meta":389,"style":389},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10883],{"type":395,"tag":427,"props":10884,"children":10885},{"__ignoreMap":389},[10886,10906,10942,10991],{"type":395,"tag":431,"props":10887,"children":10888},{"class":433,"line":434},[10889,10893,10898,10902],{"type":395,"tag":431,"props":10890,"children":10891},{"style":988},[10892],{"type":401,"value":1314},{"type":395,"tag":431,"props":10894,"children":10895},{"style":677},[10896],{"type":401,"value":10897}," Test",{"type":395,"tag":431,"props":10899,"children":10900},{"style":671},[10901],{"type":401,"value":1037},{"type":395,"tag":431,"props":10903,"children":10904},{"style":671},[10905],{"type":401,"value":3120},{"type":395,"tag":431,"props":10907,"children":10908},{"class":433,"line":724},[10909,10914,10918,10922,10926,10930,10934,10938],{"type":395,"tag":431,"props":10910,"children":10911},{"style":665},[10912],{"type":401,"value":10913},"TestAnother ",{"type":395,"tag":431,"props":10915,"children":10916},{"style":461},[10917],{"type":401,"value":1863},{"type":395,"tag":431,"props":10919,"children":10920},{"style":665},[10921],{"type":401,"value":10897},{"type":395,"tag":431,"props":10923,"children":10924},{"style":671},[10925],{"type":401,"value":674},{"type":395,"tag":431,"props":10927,"children":10928},{"style":677},[10929],{"type":401,"value":7706},{"type":395,"tag":431,"props":10931,"children":10932},{"style":665},[10933],{"type":401,"value":685},{"type":395,"tag":431,"props":10935,"children":10936},{"style":671},[10937],{"type":401,"value":10690},{"type":395,"tag":431,"props":10939,"children":10940},{"style":665},[10941],{"type":401,"value":1406},{"type":395,"tag":431,"props":10943,"children":10944},{"class":433,"line":1368},[10945,10949,10953,10957,10961,10965,10969,10973,10978,10983,10987],{"type":395,"tag":431,"props":10946,"children":10947},{"style":665},[10948],{"type":401,"value":5008},{"type":395,"tag":431,"props":10950,"children":10951},{"style":671},[10952],{"type":401,"value":674},{"type":395,"tag":431,"props":10954,"children":10955},{"style":677},[10956],{"type":401,"value":1383},{"type":395,"tag":431,"props":10958,"children":10959},{"style":665},[10960],{"type":401,"value":685},{"type":395,"tag":431,"props":10962,"children":10963},{"style":461},[10964],{"type":401,"value":1504},{"type":395,"tag":431,"props":10966,"children":10967},{"style":677},[10968],{"type":401,"value":10897},{"type":395,"tag":431,"props":10970,"children":10971},{"style":665},[10972],{"type":401,"value":819},{"type":395,"tag":431,"props":10974,"children":10975},{"style":461},[10976],{"type":401,"value":10977},"instanceof",{"type":395,"tag":431,"props":10979,"children":10980},{"style":3536},[10981],{"type":401,"value":10982}," TestAnother",{"type":395,"tag":431,"props":10984,"children":10985},{"style":665},[10986],{"type":401,"value":715},{"type":395,"tag":431,"props":10988,"children":10989},{"style":718},[10990],{"type":401,"value":765},{"type":395,"tag":431,"props":10992,"children":10993},{"class":433,"line":1409},[10994,10998,11002,11006,11010,11015,11019,11023,11027],{"type":395,"tag":431,"props":10995,"children":10996},{"style":665},[10997],{"type":401,"value":5008},{"type":395,"tag":431,"props":10999,"children":11000},{"style":671},[11001],{"type":401,"value":674},{"type":395,"tag":431,"props":11003,"children":11004},{"style":677},[11005],{"type":401,"value":1383},{"type":395,"tag":431,"props":11007,"children":11008},{"style":665},[11009],{"type":401,"value":685},{"type":395,"tag":431,"props":11011,"children":11012},{"style":2811},[11013],{"type":401,"value":11014},"test2",{"type":395,"tag":431,"props":11016,"children":11017},{"style":671},[11018],{"type":401,"value":674},{"type":395,"tag":431,"props":11020,"children":11021},{"style":1422},[11022],{"type":401,"value":2822},{"type":395,"tag":431,"props":11024,"children":11025},{"style":665},[11026],{"type":401,"value":715},{"type":395,"tag":431,"props":11028,"children":11029},{"style":718},[11030],{"type":401,"value":954},{"type":395,"tag":409,"props":11032,"children":11033},{},[11034],{"type":401,"value":11035},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":395,"tag":403,"props":11037,"children":11039},{"id":11038},"通用执行环境的实现",[11040],{"type":401,"value":11038},{"type":395,"tag":409,"props":11042,"children":11043},{},[11044],{"type":401,"value":11045},"跳过。",{"type":395,"tag":396,"props":11047,"children":11049},{"id":11048},"勘误",[11050],{"type":401,"value":11051},"勘误？",{"type":395,"tag":509,"props":11053,"children":11054},{},[11055,11060,11065,11070,11075,11080,11085,11090,11095,11100,11105,11110,11115],{"type":395,"tag":513,"props":11056,"children":11057},{},[11058],{"type":401,"value":11059},"P71，属性读取器",{"type":395,"tag":513,"props":11061,"children":11062},{},[11063],{"type":401,"value":11064},"P77，逻辑与、按位非",{"type":395,"tag":513,"props":11066,"children":11067},{},[11068],{"type":401,"value":11069},"P107，catch 子句隐式声明",{"type":395,"tag":513,"props":11071,"children":11072},{},[11073],{"type":401,"value":11074},"P134，第二段代码，computedName 括号",{"type":395,"tag":513,"props":11076,"children":11077},{},[11078],{"type":401,"value":11079},"P148，ES8",{"type":395,"tag":513,"props":11081,"children":11082},{},[11083],{"type":401,"value":11084},"P179，MyObject() 有没有必要用括号",{"type":395,"tag":513,"props":11086,"children":11087},{},[11088],{"type":401,"value":11089},"P206，语言仅提供了...能力而已",{"type":395,"tag":513,"props":11091,"children":11092},{},[11093],{"type":401,"value":11094},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":395,"tag":513,"props":11096,"children":11097},{},[11098],{"type":401,"value":11099},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":395,"tag":513,"props":11101,"children":11102},{},[11103],{"type":401,"value":11104},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":395,"tag":513,"props":11106,"children":11107},{},[11108],{"type":401,"value":11109},"P536，表格最后一行 String",{"type":395,"tag":513,"props":11111,"children":11112},{},[11113],{"type":401,"value":11114},"P535，存取描述符",{"type":395,"tag":513,"props":11116,"children":11117},{},[11118],{"type":401,"value":11119},"P564，运算符",{"type":395,"tag":11121,"props":11122,"children":11125},"section",{"className":11123,"dataFootnotes":389},[11124],"footnotes",[11126,11133],{"type":395,"tag":396,"props":11127,"children":11130},{"className":11128,"id":496},[11129],"sr-only",[11131],{"type":401,"value":11132},"Footnotes",{"type":395,"tag":11134,"props":11135,"children":11136},"ol",{},[11137,11152,11165,11178,11191,11204],{"type":395,"tag":513,"props":11138,"children":11140},{"id":11139},"user-content-fn-first-class",[11141,11143],{"type":401,"value":11142},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":395,"tag":492,"props":11144,"children":11149},{"href":11145,"ariaLabel":11146,"className":11147,"dataFootnoteBackref":389},"#user-content-fnref-first-class","Back to reference 1",[11148],"data-footnote-backref",[11150],{"type":401,"value":11151},"↩",{"type":395,"tag":513,"props":11153,"children":11155},{"id":11154},"user-content-fn-oo",[11156,11158],{"type":401,"value":11157},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":395,"tag":492,"props":11159,"children":11163},{"href":11160,"ariaLabel":11161,"className":11162,"dataFootnoteBackref":389},"#user-content-fnref-oo","Back to reference 2",[11148],[11164],{"type":401,"value":11151},{"type":395,"tag":513,"props":11166,"children":11168},{"id":11167},"user-content-fn-string",[11169,11171],{"type":401,"value":11170},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":395,"tag":492,"props":11172,"children":11176},{"href":11173,"ariaLabel":11174,"className":11175,"dataFootnoteBackref":389},"#user-content-fnref-string","Back to reference 3",[11148],[11177],{"type":401,"value":11151},{"type":395,"tag":513,"props":11179,"children":11181},{"id":11180},"user-content-fn-namespace",[11182,11184],{"type":401,"value":11183},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":395,"tag":492,"props":11185,"children":11189},{"href":11186,"ariaLabel":11187,"className":11188,"dataFootnoteBackref":389},"#user-content-fnref-namespace","Back to reference 4",[11148],[11190],{"type":401,"value":11151},{"type":395,"tag":513,"props":11192,"children":11194},{"id":11193},"user-content-fn-iterationenv",[11195,11197],{"type":401,"value":11196},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":395,"tag":492,"props":11198,"children":11202},{"href":11199,"ariaLabel":11200,"className":11201,"dataFootnoteBackref":389},"#user-content-fnref-iterationenv","Back to reference 5",[11148],[11203],{"type":401,"value":11151},{"type":395,"tag":513,"props":11205,"children":11207},{"id":11206},"user-content-fn-reference",[11208,11210],{"type":401,"value":11209},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":395,"tag":492,"props":11211,"children":11215},{"href":11212,"ariaLabel":11213,"className":11214,"dataFootnoteBackref":389},"#user-content-fnref-reference","Back to reference 6",[11148],[11216],{"type":401,"value":11151},{"type":395,"tag":11218,"props":11219,"children":11220},"style",{},[11221],{"type":401,"value":11222},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":389,"searchDepth":724,"depth":724,"links":11224},[11225,11234,11243,11253,11259,11269,11270],{"id":398,"depth":724,"text":398,"children":11226},[11227,11228,11229,11230,11231,11232,11233],{"id":405,"depth":1368,"text":405},{"id":479,"depth":1368,"text":479},{"id":605,"depth":1368,"text":605},{"id":1554,"depth":1368,"text":1554},{"id":2339,"depth":1368,"text":2339},{"id":2466,"depth":1368,"text":2466},{"id":2557,"depth":1368,"text":2557},{"id":2582,"depth":724,"text":2582,"children":11235},[11236,11237,11238,11239,11240,11241,11242],{"id":2587,"depth":1368,"text":405},{"id":3058,"depth":1368,"text":3058},{"id":3503,"depth":1368,"text":3503},{"id":4264,"depth":1368,"text":4264},{"id":5040,"depth":1368,"text":5040},{"id":5211,"depth":1368,"text":5211},{"id":6026,"depth":1368,"text":6026},{"id":6036,"depth":724,"text":6036,"children":11244},[11245,11246,11247,11248,11249,11250,11251,11252],{"id":6041,"depth":1368,"text":6041},{"id":6094,"depth":1368,"text":6094},{"id":6271,"depth":1368,"text":6271},{"id":6549,"depth":1368,"text":6549},{"id":6633,"depth":1368,"text":6633},{"id":6807,"depth":1368,"text":6807},{"id":6889,"depth":1368,"text":6889},{"id":6927,"depth":1368,"text":6927},{"id":6937,"depth":724,"text":6937,"children":11254},[11255,11256,11257,11258],{"id":6942,"depth":1368,"text":6041},{"id":6957,"depth":1368,"text":6960},{"id":8099,"depth":1368,"text":8099},{"id":8546,"depth":1368,"text":8546},{"id":8916,"depth":724,"text":8916,"children":11260},[11261,11262,11263,11264,11265,11266,11267,11268],{"id":8921,"depth":1368,"text":6041},{"id":8936,"depth":1368,"text":8936},{"id":9421,"depth":1368,"text":9421},{"id":9524,"depth":1368,"text":9524},{"id":9724,"depth":1368,"text":9724},{"id":10399,"depth":1368,"text":10399},{"id":10856,"depth":1368,"text":10856},{"id":11038,"depth":1368,"text":11038},{"id":11048,"depth":724,"text":11051},{"id":496,"depth":724,"text":11132},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11278,11282],{"_path":11279,"title":11280,"description":11281},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11283,"title":11284,"description":389},"/_books/9787301135907","日常生活中的自我呈现",1742039262893]