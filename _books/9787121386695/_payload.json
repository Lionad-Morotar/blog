[{"data":1,"prerenderedAt":11297},["Reactive",2],{"navigation":3,"/_books/9787121386695":386,"/_books/9787121386695-surround":11289},[4,32,80,96,123,129,135,369,375,381],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"Bit","/gists/bit",{"title":148,"_path":149},"图片模糊","/gists/blur",{"title":151,"_path":152},"渲染相关笔记","/gists/c4d",{"title":154,"_path":155},"CDN 问题记录","/gists/cdn",{"title":157,"_path":158},"消毒剂","/gists/cleaner",{"title":160,"_path":161},"Windows Command","/gists/cmd",{"title":163,"_path":164},"Command","/gists/command",{"title":166,"_path":167},"复杂科学","/gists/complexity-science",{"title":169,"_path":170},"宇宙","/gists/cosmos",{"title":172,"_path":173},"C++","/gists/cpp",{"title":175,"_path":176},"Data Structure","/gists/data-structure",{"title":178,"_path":179},"DEPRESSION","/gists/depression",{"title":181,"_path":182},"设计模式","/gists/design-patterns",{"title":184,"_path":185},"Developer Experience","/gists/developer-experience",{"title":187,"_path":188},"Device Metrics","/gists/device-metrix",{"title":190,"_path":191},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":193,"_path":194},"正则表达式","/gists/eegex",{"title":196,"_path":197},"Emoji","/gists/emoji",{"title":199,"_path":200},"工程","/gists/engineering",{"title":202,"_path":203},"熵","/gists/entropy",{"title":205,"_path":206},"Environment","/gists/environment",{"title":208,"_path":209},"Erlang","/gists/erlang",{"title":211,"_path":212},"逃离塔克夫","/gists/escape-from-tarkov",{"title":214,"_path":215},"ESNext (ES6-ES11)","/gists/esnext",{"title":217,"_path":218},"Eval！","/gists/eval",{"title":220,"_path":221},"Flutter","/gists/flutter",{"title":223,"_path":224},"字体","/gists/font",{"title":226,"_path":227},"JS 函数式编程","/gists/functional",{"title":229,"_path":230},"Google C++ Standard","/gists/google-cpp-standard",{"title":232,"_path":233},"双向链接完全体","/gists/graph",{"title":235,"_path":236},"Hardwares","/gists/hardwares",{"title":238,"_path":239},"哈希冲突","/gists/hash-collision",{"title":241,"_path":242},"信息设计","/gists/information-design",{"title":244,"_path":245},"InstantPage","/gists/instant.page",{"title":247,"_path":248},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":250,"_path":251},"KVStore","/gists/key-value-db",{"title":253,"_path":254},"Kubernetes","/gists/kubernetes",{"title":256,"_path":257},"Makefile","/gists/makefile",{"title":259,"_path":260},"Markdown Inline Style","/gists/markdown-nice",{"title":262,"_path":263},"小程序","/gists/miniapp",{"title":265,"_path":266},"减小页面快照体积","/gists/minify-html",{"title":268,"_path":269},"mklink","/gists/mklink",{"title":271,"_path":272},"Mock","/gists/mock",{"title":274,"_path":275},"多端应用","/gists/multy-end-app",{"title":277,"_path":278},"神经科学","/gists/neuroscience",{"title":280,"_path":281},"OO","/gists/oo",{"title":283,"_path":284},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":286,"_path":287},"人物","/gists/person",{"title":289,"_path":290},"PInvoke","/gists/pinvoke",{"title":292,"_path":293},"像素","/gists/pixel",{"title":295,"_path":296},"PowerShell","/gists/powershell",{"title":298,"_path":299},"量子","/gists/quantum",{"title":301,"_path":302},"保持好奇心","/gists/questions",{"title":304,"_path":305},"React Native","/gists/react-native",{"title":307,"_path":308},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":310,"_path":311},"SEO","/gists/seo",{"title":313,"_path":314},"Shader","/gists/shader",{"title":316,"_path":317},"Shape Up","/gists/shape-up",{"title":319,"_path":320},"睡觉","/gists/sleep",{"title":322,"_path":323},"States","/gists/states",{"title":325,"_path":326},"Storage","/gists/storage",{"title":328,"_path":329},"音视频流处理","/gists/stream-cli",{"title":331,"_path":332},"Symbol","/gists/symbol",{"title":334,"_path":335},"系统论","/gists/systems-theory",{"title":337,"_path":338},"Taro","/gists/taro",{"title":340,"_path":341},"任务切片","/gists/task-slice",{"title":343,"_path":344},"技术偏好","/gists/tech-dudge",{"title":346,"_path":347},"Untitled","/gists/untitled",{"title":349,"_path":350},"可变字体","/gists/variable-font",{"title":352,"_path":353},"视觉错觉","/gists/visual-illusion",{"title":355,"_path":356},"SS(SSR)","/gists/vpn",{"title":358,"_path":359},"VS Code 插件开发","/gists/vscode-plugin",{"title":361,"_path":362},"Web Components","/gists/web-components",{"title":364,"_path":365},"Windows","/gists/windows",{"title":367,"_path":368},"查缺补漏","/gists/wrong",{"title":370,"_path":371,"children":372},"代码笔记 / Gists","/source-code",[373],{"title":374,"_path":371},"🚄 代码笔记",{"title":376,"_path":377,"children":378},"我 / Abount","/hire",[379],{"title":380,"_path":377},"📬 技术简历",{"title":382,"_path":383,"children":384},"todo","/todo",[385],{"title":382,"_path":383},{"_path":387,"_dir":388,"_draft":389,"_partial":390,"_locale":391,"title":392,"description":391,"body":393,"_type":11284,"_id":11285,"_source":11286,"_file":11287,"_extension":11288},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":394,"children":395,"toc":11236},"root",[396,404,410,416,421,479,484,505,510,549,554,567,572,577,582,587,605,610,615,620,633,638,643,648,653,768,773,778,838,843,884,889,922,927,932,957,962,999,1004,1006,1299,1304,1556,1561,1566,1571,1589,1594,1679,1684,1815,1820,1825,2331,2336,2341,2346,2351,2453,2458,2463,2468,2473,2478,2483,2488,2541,2546,2559,2564,2569,2574,2579,2584,2589,2594,2599,2604,2609,2614,2790,2795,2887,2892,2897,2902,2907,2909,3026,3044,3049,3062,3067,3072,3077,3090,3095,3100,3236,3251,3256,3336,3341,3388,3502,3507,3512,3517,3702,3707,3712,3717,3880,3885,3913,3918,3931,3936,4188,4193,4198,4203,4263,4268,4273,4278,4283,4288,4386,4391,4396,4414,4419,4432,4437,4442,4455,4460,4465,4563,4568,4573,4578,4580,4772,4777,5046,5051,5056,5074,5079,5081,5196,5201,5219,5224,5229,5234,5239,5241,5432,5437,5450,5455,6036,6041,6046,6051,6056,6061,6066,6071,6076,6094,6099,6104,6109,6114,6115,6235,6240,6245,6250,6262,6267,6272,6277,6282,6287,6305,6422,6427,6560,6565,6570,6575,6593,6598,6603,6644,6649,6654,6659,6726,6731,6736,6780,6785,6790,6795,6813,6818,6823,6828,6895,6900,6905,6910,6928,6933,6938,6943,6948,6953,6958,6963,6968,6974,6979,6997,7002,7146,7164,7385,7390,7395,7526,7531,7549,7554,7602,7607,7729,7734,7739,8110,8115,8120,8125,8130,8135,8557,8562,8567,8572,8590,8595,8687,8692,8697,8884,8889,8894,8899,8904,8922,8927,8932,8937,8942,8947,8952,8957,9126,9131,9136,9282,9287,9427,9432,9437,9442,9447,9452,9484,9489,9535,9540,9545,9725,9730,9735,9740,9745,9750,9755,10251,10256,10261,10291,10296,10301,10306,10410,10415,10420,10709,10714,10719,10862,10867,10872,10877,10882,10887,10892,11044,11049,11054,11059,11065,11133,11230],{"type":397,"tag":398,"props":399,"children":401},"element","h2",{"id":400},"语法",[402],{"type":403,"value":400},"text",{"type":397,"tag":405,"props":406,"children":408},"h3",{"id":407},"语法综述",[409],{"type":403,"value":407},{"type":397,"tag":411,"props":412,"children":413},"p",{},[414],{"type":403,"value":415},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":397,"tag":411,"props":417,"children":418},{},[419],{"type":403,"value":420},"可以使用 --check 指令检测语法错误：",{"type":397,"tag":422,"props":423,"children":427},"pre",{"className":424,"code":425,"language":426,"meta":391,"style":391},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[428],{"type":397,"tag":429,"props":430,"children":431},"code",{"__ignoreMap":391},[432],{"type":397,"tag":433,"props":434,"children":437},"span",{"class":435,"line":436},"line",1,[438,444,450,456,461,467,473],{"type":397,"tag":433,"props":439,"children":441},{"style":440},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[442],{"type":403,"value":443},"echo",{"type":397,"tag":433,"props":445,"children":447},{"style":446},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[448],{"type":403,"value":449}," '",{"type":397,"tag":433,"props":451,"children":453},{"style":452},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[454],{"type":403,"value":455},"\"hello world\"",{"type":397,"tag":433,"props":457,"children":458},{"style":446},[459],{"type":403,"value":460},"'",{"type":397,"tag":433,"props":462,"children":464},{"style":463},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[465],{"type":403,"value":466}," |",{"type":397,"tag":433,"props":468,"children":470},{"style":469},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[471],{"type":403,"value":472}," node",{"type":397,"tag":433,"props":474,"children":476},{"style":475},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[477],{"type":403,"value":478}," -c\n",{"type":397,"tag":405,"props":480,"children":482},{"id":481},"声明语法",[483],{"type":403,"value":481},{"type":397,"tag":411,"props":485,"children":486},{},[487,489,503],{"type":403,"value":488},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":397,"tag":490,"props":491,"children":492},"sup",{},[493],{"type":397,"tag":494,"props":495,"children":500},"a",{"href":496,"ariaDescribedBy":497,"dataFootnoteRef":391,"id":499},"#user-content-fn-first-class",[498],"footnote-label","user-content-fnref-first-class",[501],{"type":403,"value":502},"1",{"type":403,"value":504},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":397,"tag":411,"props":506,"children":507},{},[508],{"type":403,"value":509},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":397,"tag":511,"props":512,"children":513},"ul",{},[514,533],{"type":397,"tag":515,"props":516,"children":517},"li",{},[518,520,531],{"type":403,"value":519},"基本数据类型：undefined、string、number、object",{"type":397,"tag":490,"props":521,"children":522},{},[523],{"type":397,"tag":494,"props":524,"children":528},{"href":525,"ariaDescribedBy":526,"dataFootnoteRef":391,"id":527},"#user-content-fn-oo",[498],"user-content-fnref-oo",[529],{"type":403,"value":530},"2",{"type":403,"value":532},"、function、boolean、symbol、bigint",{"type":397,"tag":515,"props":534,"children":535},{},[536,538],{"type":403,"value":537},"值类型和引用类型",{"type":397,"tag":490,"props":539,"children":540},{},[541],{"type":397,"tag":494,"props":542,"children":546},{"href":543,"ariaDescribedBy":544,"dataFootnoteRef":391,"id":545},"#user-content-fn-string",[498],"user-content-fnref-string",[547],{"type":403,"value":548},"3",{"type":397,"tag":411,"props":550,"children":551},{},[552],{"type":403,"value":553},"如果算上规范，可以再增加两种类型系统：",{"type":397,"tag":511,"props":555,"children":556},{},[557,562],{"type":397,"tag":515,"props":558,"children":559},{},[560],{"type":403,"value":561},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":397,"tag":515,"props":563,"children":564},{},[565],{"type":403,"value":566},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":397,"tag":411,"props":568,"children":569},{},[570],{"type":403,"value":571},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":397,"tag":411,"props":573,"children":574},{},[575],{"type":403,"value":576},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":397,"tag":411,"props":578,"children":579},{},[580],{"type":403,"value":581},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":397,"tag":411,"props":583,"children":584},{},[585],{"type":403,"value":586},"相关字符串字面量的一些冷知识：",{"type":397,"tag":511,"props":588,"children":589},{},[590,595,600],{"type":397,"tag":515,"props":591,"children":592},{},[593],{"type":403,"value":594},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":397,"tag":515,"props":596,"children":597},{},[598],{"type":403,"value":599},"空字符串也能作为对象的键。",{"type":397,"tag":515,"props":601,"children":602},{},[603],{"type":403,"value":604},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":397,"tag":405,"props":606,"children":608},{"id":607},"表达式运算",[609],{"type":403,"value":607},{"type":397,"tag":411,"props":611,"children":612},{},[613],{"type":403,"value":614},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":397,"tag":411,"props":616,"children":617},{},[618],{"type":403,"value":619},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":397,"tag":511,"props":621,"children":622},{},[623,628],{"type":397,"tag":515,"props":624,"children":625},{},[626],{"type":403,"value":627},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":397,"tag":515,"props":629,"children":630},{},[631],{"type":403,"value":632},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":397,"tag":411,"props":634,"children":635},{},[636],{"type":403,"value":637},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":397,"tag":411,"props":639,"children":640},{},[641],{"type":403,"value":642},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":397,"tag":411,"props":644,"children":645},{},[646],{"type":403,"value":647},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":397,"tag":411,"props":649,"children":650},{},[651],{"type":403,"value":652},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":397,"tag":422,"props":654,"children":658},{"className":655,"code":656,"language":657,"meta":391,"style":391},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[659],{"type":397,"tag":429,"props":660,"children":661},{"__ignoreMap":391},[662,724],{"type":397,"tag":433,"props":663,"children":664},{"class":435,"line":436},[665,671,677,683,688,693,699,704,709,713,718],{"type":397,"tag":433,"props":666,"children":668},{"style":667},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[669],{"type":403,"value":670},"Object",{"type":397,"tag":433,"props":672,"children":674},{"style":673},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[675],{"type":403,"value":676},".",{"type":397,"tag":433,"props":678,"children":680},{"style":679},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[681],{"type":403,"value":682},"is",{"type":397,"tag":433,"props":684,"children":685},{"style":667},[686],{"type":403,"value":687},"(",{"type":397,"tag":433,"props":689,"children":690},{"style":463},[691],{"type":403,"value":692},"+",{"type":397,"tag":433,"props":694,"children":696},{"style":695},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[697],{"type":403,"value":698},"0",{"type":397,"tag":433,"props":700,"children":701},{"style":673},[702],{"type":403,"value":703},",",{"type":397,"tag":433,"props":705,"children":706},{"style":463},[707],{"type":403,"value":708}," -",{"type":397,"tag":433,"props":710,"children":711},{"style":695},[712],{"type":403,"value":698},{"type":397,"tag":433,"props":714,"children":715},{"style":667},[716],{"type":403,"value":717},") ",{"type":397,"tag":433,"props":719,"children":721},{"style":720},"--shiki-light:#90A4AE;--shiki-default:#6A737D;--shiki-dark:#6A737D;--shiki-sepia:#88846F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[722],{"type":403,"value":723},"// false\n",{"type":397,"tag":433,"props":725,"children":727},{"class":435,"line":726},2,[728,732,736,740,744,750,754,759,763],{"type":397,"tag":433,"props":729,"children":730},{"style":667},[731],{"type":403,"value":670},{"type":397,"tag":433,"props":733,"children":734},{"style":673},[735],{"type":403,"value":676},{"type":397,"tag":433,"props":737,"children":738},{"style":679},[739],{"type":403,"value":682},{"type":397,"tag":433,"props":741,"children":742},{"style":667},[743],{"type":403,"value":687},{"type":397,"tag":433,"props":745,"children":747},{"style":746},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[748],{"type":403,"value":749},"NaN",{"type":397,"tag":433,"props":751,"children":752},{"style":673},[753],{"type":403,"value":703},{"type":397,"tag":433,"props":755,"children":756},{"style":746},[757],{"type":403,"value":758}," NaN",{"type":397,"tag":433,"props":760,"children":761},{"style":667},[762],{"type":403,"value":717},{"type":397,"tag":433,"props":764,"children":765},{"style":720},[766],{"type":403,"value":767},"// true\n",{"type":397,"tag":411,"props":769,"children":770},{},[771],{"type":403,"value":772},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":397,"tag":411,"props":774,"children":775},{},[776],{"type":403,"value":777},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":397,"tag":422,"props":779,"children":781},{"className":655,"code":780,"language":657,"meta":391,"style":391},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[782],{"type":397,"tag":429,"props":783,"children":784},{"__ignoreMap":391},[785,810],{"type":397,"tag":433,"props":786,"children":787},{"class":435,"line":436},[788,793,797,801,806],{"type":397,"tag":433,"props":789,"children":790},{"style":679},[791],{"type":403,"value":792},"Boolean",{"type":397,"tag":433,"props":794,"children":795},{"style":667},[796],{"type":403,"value":687},{"type":397,"tag":433,"props":798,"children":799},{"style":679},[800],{"type":403,"value":331},{"type":397,"tag":433,"props":802,"children":803},{"style":667},[804],{"type":403,"value":805},"()) ",{"type":397,"tag":433,"props":807,"children":808},{"style":720},[809],{"type":403,"value":767},{"type":397,"tag":433,"props":811,"children":812},{"class":435,"line":726},[813,817,822,827,833],{"type":397,"tag":433,"props":814,"children":815},{"style":679},[816],{"type":403,"value":331},{"type":397,"tag":433,"props":818,"children":819},{"style":667},[820],{"type":403,"value":821},"() ",{"type":397,"tag":433,"props":823,"children":824},{"style":463},[825],{"type":403,"value":826},"==",{"type":397,"tag":433,"props":828,"children":830},{"style":829},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[831],{"type":403,"value":832}," true",{"type":397,"tag":433,"props":834,"children":835},{"style":720},[836],{"type":403,"value":837}," // false\n",{"type":397,"tag":411,"props":839,"children":840},{},[841],{"type":403,"value":842},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":397,"tag":422,"props":844,"children":846},{"className":424,"code":845,"language":426,"meta":391,"style":391},"echo \"1 = 1\" | node -c\n",[847],{"type":397,"tag":429,"props":848,"children":849},{"__ignoreMap":391},[850],{"type":397,"tag":433,"props":851,"children":852},{"class":435,"line":436},[853,857,862,867,872,876,880],{"type":397,"tag":433,"props":854,"children":855},{"style":440},[856],{"type":403,"value":443},{"type":397,"tag":433,"props":858,"children":859},{"style":446},[860],{"type":403,"value":861}," \"",{"type":397,"tag":433,"props":863,"children":864},{"style":452},[865],{"type":403,"value":866},"1 = 1",{"type":397,"tag":433,"props":868,"children":869},{"style":446},[870],{"type":403,"value":871},"\"",{"type":397,"tag":433,"props":873,"children":874},{"style":463},[875],{"type":403,"value":466},{"type":397,"tag":433,"props":877,"children":878},{"style":469},[879],{"type":403,"value":472},{"type":397,"tag":433,"props":881,"children":882},{"style":475},[883],{"type":403,"value":478},{"type":397,"tag":411,"props":885,"children":886},{},[887],{"type":403,"value":888},"函数调用也有“隐式调用”这一概念：",{"type":397,"tag":511,"props":890,"children":891},{},[892,897,902,907,912,917],{"type":397,"tag":515,"props":893,"children":894},{},[895],{"type":403,"value":896},"使用 new 运算符",{"type":397,"tag":515,"props":898,"children":899},{},[900],{"type":403,"value":901},"模板处理函数 + 模板字符串调用",{"type":397,"tag":515,"props":903,"children":904},{},[905],{"type":403,"value":906},"函数作为属性存取器且发生了属性存取操作时",{"type":397,"tag":515,"props":908,"children":909},{},[910],{"type":403,"value":911},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":397,"tag":515,"props":913,"children":914},{},[915],{"type":403,"value":916},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":397,"tag":515,"props":918,"children":919},{},[920],{"type":403,"value":921},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":397,"tag":411,"props":923,"children":924},{},[925],{"type":403,"value":926},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":397,"tag":411,"props":928,"children":929},{},[930],{"type":403,"value":931},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":397,"tag":422,"props":933,"children":935},{"className":655,"code":934,"language":657,"meta":391,"style":391},"typeof x // undefined\n",[936],{"type":397,"tag":429,"props":937,"children":938},{"__ignoreMap":391},[939],{"type":397,"tag":433,"props":940,"children":941},{"class":435,"line":436},[942,947,952],{"type":397,"tag":433,"props":943,"children":944},{"style":463},[945],{"type":403,"value":946},"typeof",{"type":397,"tag":433,"props":948,"children":949},{"style":667},[950],{"type":403,"value":951}," x ",{"type":397,"tag":433,"props":953,"children":954},{"style":720},[955],{"type":403,"value":956},"// undefined\n",{"type":397,"tag":411,"props":958,"children":959},{},[960],{"type":403,"value":961},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":397,"tag":422,"props":963,"children":965},{"className":655,"code":964,"language":657,"meta":391,"style":391},"typeof x // ReferenceError\nlet x\n",[966],{"type":397,"tag":429,"props":967,"children":968},{"__ignoreMap":391},[969,985],{"type":397,"tag":433,"props":970,"children":971},{"class":435,"line":436},[972,976,980],{"type":397,"tag":433,"props":973,"children":974},{"style":463},[975],{"type":403,"value":946},{"type":397,"tag":433,"props":977,"children":978},{"style":667},[979],{"type":403,"value":951},{"type":397,"tag":433,"props":981,"children":982},{"style":720},[983],{"type":403,"value":984},"// ReferenceError\n",{"type":397,"tag":433,"props":986,"children":987},{"class":435,"line":726},[988,994],{"type":397,"tag":433,"props":989,"children":991},{"style":990},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[992],{"type":403,"value":993},"let",{"type":397,"tag":433,"props":995,"children":996},{"style":667},[997],{"type":403,"value":998}," x\n",{"type":397,"tag":411,"props":1000,"children":1001},{},[1002],{"type":403,"value":1003},"完整的运算符优先级列表如下：",{"type":403,"value":1005},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":397,"tag":1007,"props":1008,"children":1009},"table",{},[1010,1029],{"type":397,"tag":1011,"props":1012,"children":1013},"thead",{},[1014],{"type":397,"tag":1015,"props":1016,"children":1017},"tr",{},[1018,1024],{"type":397,"tag":1019,"props":1020,"children":1021},"th",{},[1022],{"type":403,"value":1023},"运算符",{"type":397,"tag":1019,"props":1025,"children":1026},{},[1027],{"type":403,"value":1028},"描述",{"type":397,"tag":1030,"props":1031,"children":1032},"tbody",{},[1033,1047,1065,1078,1091,1104,1117,1130,1143,1156,1169,1182,1195,1208,1221,1234,1247,1260,1273,1286],{"type":397,"tag":1015,"props":1034,"children":1035},{},[1036,1042],{"type":397,"tag":1037,"props":1038,"children":1039},"td",{},[1040],{"type":403,"value":1041},"()",{"type":397,"tag":1037,"props":1043,"children":1044},{},[1045],{"type":403,"value":1046},"成组运算",{"type":397,"tag":1015,"props":1048,"children":1049},{},[1050,1060],{"type":397,"tag":1037,"props":1051,"children":1052},{},[1053,1055,1058],{"type":403,"value":1054},".、",{"type":397,"tag":433,"props":1056,"children":1057},{},[],{"type":403,"value":1059},"、new ()",{"type":397,"tag":1037,"props":1061,"children":1062},{},[1063],{"type":403,"value":1064},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":397,"tag":1015,"props":1066,"children":1067},{},[1068,1073],{"type":397,"tag":1037,"props":1069,"children":1070},{},[1071],{"type":403,"value":1072},"()、new",{"type":397,"tag":1037,"props":1074,"children":1075},{},[1076],{"type":403,"value":1077},"函数调用、new 运算符",{"type":397,"tag":1015,"props":1079,"children":1080},{},[1081,1086],{"type":397,"tag":1037,"props":1082,"children":1083},{},[1084],{"type":403,"value":1085},"++、--",{"type":397,"tag":1037,"props":1087,"children":1088},{},[1089],{"type":403,"value":1090},"后置递增、后置递减",{"type":397,"tag":1015,"props":1092,"children":1093},{},[1094,1099],{"type":397,"tag":1037,"props":1095,"children":1096},{},[1097],{"type":403,"value":1098},"+、-、++、--、~、!、delete、typeof、void",{"type":397,"tag":1037,"props":1100,"children":1101},{},[1102],{"type":403,"value":1103},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":397,"tag":1015,"props":1105,"children":1106},{},[1107,1112],{"type":397,"tag":1037,"props":1108,"children":1109},{},[1110],{"type":403,"value":1111},"*、/、%",{"type":397,"tag":1037,"props":1113,"children":1114},{},[1115],{"type":403,"value":1116},"乘法、除法、取模",{"type":397,"tag":1015,"props":1118,"children":1119},{},[1120,1125],{"type":397,"tag":1037,"props":1121,"children":1122},{},[1123],{"type":403,"value":1124},"+、-、+",{"type":397,"tag":1037,"props":1126,"children":1127},{},[1128],{"type":403,"value":1129},"加法、减法、字符串连接",{"type":397,"tag":1015,"props":1131,"children":1132},{},[1133,1138],{"type":397,"tag":1037,"props":1134,"children":1135},{},[1136],{"type":403,"value":1137},"\u003C\u003C、>>、>>>",{"type":397,"tag":1037,"props":1139,"children":1140},{},[1141],{"type":403,"value":1142},"移位运算符",{"type":397,"tag":1015,"props":1144,"children":1145},{},[1146,1151],{"type":397,"tag":1037,"props":1147,"children":1148},{},[1149],{"type":403,"value":1150},"\u003C、\u003C=、>=、>、in、instanceof",{"type":397,"tag":1037,"props":1152,"children":1153},{},[1154],{"type":403,"value":1155},"关系运算符、in、instanceof",{"type":397,"tag":1015,"props":1157,"children":1158},{},[1159,1164],{"type":397,"tag":1037,"props":1160,"children":1161},{},[1162],{"type":403,"value":1163},"==、!=、===、!==",{"type":397,"tag":1037,"props":1165,"children":1166},{},[1167],{"type":403,"value":1168},"等值检测",{"type":397,"tag":1015,"props":1170,"children":1171},{},[1172,1177],{"type":397,"tag":1037,"props":1173,"children":1174},{},[1175],{"type":403,"value":1176},"&",{"type":397,"tag":1037,"props":1178,"children":1179},{},[1180],{"type":403,"value":1181},"按位与",{"type":397,"tag":1015,"props":1183,"children":1184},{},[1185,1190],{"type":397,"tag":1037,"props":1186,"children":1187},{},[1188],{"type":403,"value":1189},"^",{"type":397,"tag":1037,"props":1191,"children":1192},{},[1193],{"type":403,"value":1194},"按位异或",{"type":397,"tag":1015,"props":1196,"children":1197},{},[1198,1203],{"type":397,"tag":1037,"props":1199,"children":1200},{},[1201],{"type":403,"value":1202},"|",{"type":397,"tag":1037,"props":1204,"children":1205},{},[1206],{"type":403,"value":1207},"按位或",{"type":397,"tag":1015,"props":1209,"children":1210},{},[1211,1216],{"type":397,"tag":1037,"props":1212,"children":1213},{},[1214],{"type":403,"value":1215},"&&",{"type":397,"tag":1037,"props":1217,"children":1218},{},[1219],{"type":403,"value":1220},"逻辑与",{"type":397,"tag":1015,"props":1222,"children":1223},{},[1224,1229],{"type":397,"tag":1037,"props":1225,"children":1226},{},[1227],{"type":403,"value":1228},"||",{"type":397,"tag":1037,"props":1230,"children":1231},{},[1232],{"type":403,"value":1233},"逻辑或",{"type":397,"tag":1015,"props":1235,"children":1236},{},[1237,1242],{"type":397,"tag":1037,"props":1238,"children":1239},{},[1240],{"type":403,"value":1241},"?:",{"type":397,"tag":1037,"props":1243,"children":1244},{},[1245],{"type":403,"value":1246},"三木运算",{"type":397,"tag":1015,"props":1248,"children":1249},{},[1250,1255],{"type":397,"tag":1037,"props":1251,"children":1252},{},[1253],{"type":403,"value":1254},"=、oP=",{"type":397,"tag":1037,"props":1256,"children":1257},{},[1258],{"type":403,"value":1259},"赋值、运算赋值",{"type":397,"tag":1015,"props":1261,"children":1262},{},[1263,1268],{"type":397,"tag":1037,"props":1264,"children":1265},{},[1266],{"type":403,"value":1267},"yield、yield*",{"type":397,"tag":1037,"props":1269,"children":1270},{},[1271],{"type":403,"value":1272},"yield 表达式",{"type":397,"tag":1015,"props":1274,"children":1275},{},[1276,1281],{"type":397,"tag":1037,"props":1277,"children":1278},{},[1279],{"type":403,"value":1280},"...",{"type":397,"tag":1037,"props":1282,"children":1283},{},[1284],{"type":403,"value":1285},"展开运算符",{"type":397,"tag":1015,"props":1287,"children":1288},{},[1289,1294],{"type":397,"tag":1037,"props":1290,"children":1291},{},[1292],{"type":403,"value":1293},"，",{"type":397,"tag":1037,"props":1295,"children":1296},{},[1297],{"type":403,"value":1298},"逗号运算符、多重求值",{"type":397,"tag":411,"props":1300,"children":1301},{},[1302],{"type":403,"value":1303},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":397,"tag":422,"props":1305,"children":1307},{"className":655,"code":1306,"language":657,"meta":391,"style":391},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1308],{"type":397,"tag":429,"props":1309,"children":1310},{"__ignoreMap":391},[1311,1334,1370,1411,1420,1455,1492,1500,1527],{"type":397,"tag":433,"props":1312,"children":1313},{"class":435,"line":436},[1314,1319,1324,1329],{"type":397,"tag":433,"props":1315,"children":1316},{"style":990},[1317],{"type":403,"value":1318},"function",{"type":397,"tag":433,"props":1320,"children":1321},{"style":679},[1322],{"type":403,"value":1323}," A",{"type":397,"tag":433,"props":1325,"children":1326},{"style":673},[1327],{"type":403,"value":1328}," ()",{"type":397,"tag":433,"props":1330,"children":1331},{"style":673},[1332],{"type":403,"value":1333}," {\n",{"type":397,"tag":433,"props":1335,"children":1336},{"class":435,"line":726},[1337,1343,1347,1352,1357,1361,1365],{"type":397,"tag":433,"props":1338,"children":1340},{"style":1339},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1341],{"type":403,"value":1342},"  this",{"type":397,"tag":433,"props":1344,"children":1345},{"style":673},[1346],{"type":403,"value":676},{"type":397,"tag":433,"props":1348,"children":1349},{"style":667},[1350],{"type":403,"value":1351},"b",{"type":397,"tag":433,"props":1353,"children":1354},{"style":463},[1355],{"type":403,"value":1356}," =",{"type":397,"tag":433,"props":1358,"children":1359},{"style":446},[1360],{"type":403,"value":449},{"type":397,"tag":433,"props":1362,"children":1363},{"style":452},[1364],{"type":403,"value":1351},{"type":397,"tag":433,"props":1366,"children":1367},{"style":446},[1368],{"type":403,"value":1369},"'\n",{"type":397,"tag":433,"props":1371,"children":1373},{"class":435,"line":1372},3,[1374,1379,1383,1388,1393,1397,1402,1406],{"type":397,"tag":433,"props":1375,"children":1376},{"style":667},[1377],{"type":403,"value":1378},"  console",{"type":397,"tag":433,"props":1380,"children":1381},{"style":673},[1382],{"type":403,"value":676},{"type":397,"tag":433,"props":1384,"children":1385},{"style":679},[1386],{"type":403,"value":1387},"log",{"type":397,"tag":433,"props":1389,"children":1391},{"style":1390},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1392],{"type":403,"value":687},{"type":397,"tag":433,"props":1394,"children":1395},{"style":446},[1396],{"type":403,"value":460},{"type":397,"tag":433,"props":1398,"children":1399},{"style":452},[1400],{"type":403,"value":1401},"A().b",{"type":397,"tag":433,"props":1403,"children":1404},{"style":446},[1405],{"type":403,"value":460},{"type":397,"tag":433,"props":1407,"children":1408},{"style":1390},[1409],{"type":403,"value":1410},")\n",{"type":397,"tag":433,"props":1412,"children":1414},{"class":435,"line":1413},4,[1415],{"type":397,"tag":433,"props":1416,"children":1417},{"style":673},[1418],{"type":403,"value":1419},"}\n",{"type":397,"tag":433,"props":1421,"children":1423},{"class":435,"line":1422},5,[1424,1430,1434,1438,1442,1447,1451],{"type":397,"tag":433,"props":1425,"children":1427},{"style":1426},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1428],{"type":403,"value":1429},"A",{"type":397,"tag":433,"props":1431,"children":1432},{"style":673},[1433],{"type":403,"value":676},{"type":397,"tag":433,"props":1435,"children":1436},{"style":679},[1437],{"type":403,"value":1351},{"type":397,"tag":433,"props":1439,"children":1440},{"style":463},[1441],{"type":403,"value":1356},{"type":397,"tag":433,"props":1443,"children":1444},{"style":990},[1445],{"type":403,"value":1446}," function",{"type":397,"tag":433,"props":1448,"children":1449},{"style":673},[1450],{"type":403,"value":1328},{"type":397,"tag":433,"props":1452,"children":1453},{"style":673},[1454],{"type":403,"value":1333},{"type":397,"tag":433,"props":1456,"children":1458},{"class":435,"line":1457},6,[1459,1463,1467,1471,1475,1479,1484,1488],{"type":397,"tag":433,"props":1460,"children":1461},{"style":667},[1462],{"type":403,"value":1378},{"type":397,"tag":433,"props":1464,"children":1465},{"style":673},[1466],{"type":403,"value":676},{"type":397,"tag":433,"props":1468,"children":1469},{"style":679},[1470],{"type":403,"value":1387},{"type":397,"tag":433,"props":1472,"children":1473},{"style":1390},[1474],{"type":403,"value":687},{"type":397,"tag":433,"props":1476,"children":1477},{"style":446},[1478],{"type":403,"value":460},{"type":397,"tag":433,"props":1480,"children":1481},{"style":452},[1482],{"type":403,"value":1483},"A.b",{"type":397,"tag":433,"props":1485,"children":1486},{"style":446},[1487],{"type":403,"value":460},{"type":397,"tag":433,"props":1489,"children":1490},{"style":1390},[1491],{"type":403,"value":1410},{"type":397,"tag":433,"props":1493,"children":1495},{"class":435,"line":1494},7,[1496],{"type":397,"tag":433,"props":1497,"children":1498},{"style":673},[1499],{"type":403,"value":1419},{"type":397,"tag":433,"props":1501,"children":1503},{"class":435,"line":1502},8,[1504,1509,1513,1517,1522],{"type":397,"tag":433,"props":1505,"children":1506},{"style":463},[1507],{"type":403,"value":1508},"new",{"type":397,"tag":433,"props":1510,"children":1511},{"style":1426},[1512],{"type":403,"value":1323},{"type":397,"tag":433,"props":1514,"children":1515},{"style":673},[1516],{"type":403,"value":676},{"type":397,"tag":433,"props":1518,"children":1519},{"style":667},[1520],{"type":403,"value":1521},"b ",{"type":397,"tag":433,"props":1523,"children":1524},{"style":720},[1525],{"type":403,"value":1526},"// A.b\n",{"type":397,"tag":433,"props":1528,"children":1530},{"class":435,"line":1529},9,[1531,1535,1539,1543,1547,1551],{"type":397,"tag":433,"props":1532,"children":1533},{"style":463},[1534],{"type":403,"value":1508},{"type":397,"tag":433,"props":1536,"children":1537},{"style":679},[1538],{"type":403,"value":1323},{"type":397,"tag":433,"props":1540,"children":1541},{"style":667},[1542],{"type":403,"value":1041},{"type":397,"tag":433,"props":1544,"children":1545},{"style":673},[1546],{"type":403,"value":676},{"type":397,"tag":433,"props":1548,"children":1549},{"style":667},[1550],{"type":403,"value":1521},{"type":397,"tag":433,"props":1552,"children":1553},{"style":720},[1554],{"type":403,"value":1555},"// A().b\n",{"type":397,"tag":405,"props":1557,"children":1559},{"id":1558},"语句",[1560],{"type":403,"value":1558},{"type":397,"tag":411,"props":1562,"children":1563},{},[1564],{"type":403,"value":1565},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":397,"tag":411,"props":1567,"children":1568},{},[1569],{"type":403,"value":1570},"需要注意的点：",{"type":397,"tag":511,"props":1572,"children":1573},{},[1574,1579,1584],{"type":397,"tag":515,"props":1575,"children":1576},{},[1577],{"type":403,"value":1578},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":397,"tag":515,"props":1580,"children":1581},{},[1582],{"type":403,"value":1583},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":397,"tag":515,"props":1585,"children":1586},{},[1587],{"type":403,"value":1588},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":397,"tag":411,"props":1590,"children":1591},{},[1592],{"type":403,"value":1593},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":397,"tag":422,"props":1595,"children":1597},{"className":655,"code":1596,"language":657,"meta":391,"style":391},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1598],{"type":397,"tag":429,"props":1599,"children":1600},{"__ignoreMap":391},[1601,1632,1659],{"type":397,"tag":433,"props":1602,"children":1603},{"class":435,"line":436},[1604,1608,1613,1617,1623,1628],{"type":397,"tag":433,"props":1605,"children":1606},{"style":990},[1607],{"type":403,"value":1318},{"type":397,"tag":433,"props":1609,"children":1610},{"style":679},[1611],{"type":403,"value":1612}," log",{"type":397,"tag":433,"props":1614,"children":1615},{"style":673},[1616],{"type":403,"value":687},{"type":397,"tag":433,"props":1618,"children":1620},{"style":1619},"--shiki-light:#90A4AE;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#FD971F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[1621],{"type":403,"value":1622},"arg",{"type":397,"tag":433,"props":1624,"children":1625},{"style":673},[1626],{"type":403,"value":1627},")",{"type":397,"tag":433,"props":1629,"children":1630},{"style":673},[1631],{"type":403,"value":1333},{"type":397,"tag":433,"props":1633,"children":1634},{"class":435,"line":726},[1635,1639,1643,1647,1651,1655],{"type":397,"tag":433,"props":1636,"children":1637},{"style":667},[1638],{"type":403,"value":1378},{"type":397,"tag":433,"props":1640,"children":1641},{"style":673},[1642],{"type":403,"value":676},{"type":397,"tag":433,"props":1644,"children":1645},{"style":679},[1646],{"type":403,"value":1387},{"type":397,"tag":433,"props":1648,"children":1649},{"style":1390},[1650],{"type":403,"value":687},{"type":397,"tag":433,"props":1652,"children":1653},{"style":667},[1654],{"type":403,"value":1622},{"type":397,"tag":433,"props":1656,"children":1657},{"style":1390},[1658],{"type":403,"value":1410},{"type":397,"tag":433,"props":1660,"children":1661},{"class":435,"line":1372},[1662,1667,1671,1675],{"type":397,"tag":433,"props":1663,"children":1664},{"style":673},[1665],{"type":403,"value":1666},"}",{"type":397,"tag":433,"props":1668,"children":1669},{"style":667},[1670],{"type":403,"value":687},{"type":397,"tag":433,"props":1672,"children":1673},{"style":695},[1674],{"type":403,"value":530},{"type":397,"tag":433,"props":1676,"children":1677},{"style":667},[1678],{"type":403,"value":1410},{"type":397,"tag":411,"props":1680,"children":1681},{},[1682],{"type":403,"value":1683},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":397,"tag":422,"props":1685,"children":1687},{"className":655,"code":1686,"language":657,"meta":391,"style":391},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1688],{"type":397,"tag":429,"props":1689,"children":1690},{"__ignoreMap":391},[1691,1743,1781,1808],{"type":397,"tag":433,"props":1692,"children":1693},{"class":435,"line":436},[1694,1700,1705,1710,1714,1719,1723,1728,1733,1738],{"type":397,"tag":433,"props":1695,"children":1697},{"style":1696},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[1698],{"type":403,"value":1699},"try",{"type":397,"tag":433,"props":1701,"children":1702},{"style":673},[1703],{"type":403,"value":1704}," {",{"type":397,"tag":433,"props":1706,"children":1707},{"style":1696},[1708],{"type":403,"value":1709}," throw",{"type":397,"tag":433,"props":1711,"children":1712},{"style":446},[1713],{"type":403,"value":449},{"type":397,"tag":433,"props":1715,"children":1716},{"style":452},[1717],{"type":403,"value":1718},"test",{"type":397,"tag":433,"props":1720,"children":1721},{"style":446},[1722],{"type":403,"value":460},{"type":397,"tag":433,"props":1724,"children":1725},{"style":673},[1726],{"type":403,"value":1727}," }",{"type":397,"tag":433,"props":1729,"children":1730},{"style":1696},[1731],{"type":403,"value":1732}," catch",{"type":397,"tag":433,"props":1734,"children":1735},{"style":667},[1736],{"type":403,"value":1737}," (e) ",{"type":397,"tag":433,"props":1739,"children":1740},{"style":673},[1741],{"type":403,"value":1742},"{\n",{"type":397,"tag":433,"props":1744,"children":1745},{"class":435,"line":726},[1746,1750,1754,1758,1762,1767,1771,1776],{"type":397,"tag":433,"props":1747,"children":1748},{"style":667},[1749],{"type":403,"value":1378},{"type":397,"tag":433,"props":1751,"children":1752},{"style":673},[1753],{"type":403,"value":676},{"type":397,"tag":433,"props":1755,"children":1756},{"style":679},[1757],{"type":403,"value":1387},{"type":397,"tag":433,"props":1759,"children":1760},{"style":1390},[1761],{"type":403,"value":687},{"type":397,"tag":433,"props":1763,"children":1764},{"style":667},[1765],{"type":403,"value":1766},"e",{"type":397,"tag":433,"props":1768,"children":1769},{"style":1390},[1770],{"type":403,"value":1627},{"type":397,"tag":433,"props":1772,"children":1773},{"style":673},[1774],{"type":403,"value":1775},";",{"type":397,"tag":433,"props":1777,"children":1778},{"style":720},[1779],{"type":403,"value":1780}," // test\n",{"type":397,"tag":433,"props":1782,"children":1783},{"class":435,"line":1372},[1784,1789,1794,1798,1803],{"type":397,"tag":433,"props":1785,"children":1786},{"style":990},[1787],{"type":403,"value":1788},"  var",{"type":397,"tag":433,"props":1790,"children":1791},{"style":667},[1792],{"type":403,"value":1793}," e",{"type":397,"tag":433,"props":1795,"children":1796},{"style":463},[1797],{"type":403,"value":1356},{"type":397,"tag":433,"props":1799,"children":1800},{"style":695},[1801],{"type":403,"value":1802}," 1",{"type":397,"tag":433,"props":1804,"children":1805},{"style":673},[1806],{"type":403,"value":1807},";\n",{"type":397,"tag":433,"props":1809,"children":1810},{"class":435,"line":1413},[1811],{"type":397,"tag":433,"props":1812,"children":1813},{"style":673},[1814],{"type":403,"value":1419},{"type":397,"tag":411,"props":1816,"children":1817},{},[1818],{"type":403,"value":1819},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":397,"tag":411,"props":1821,"children":1822},{},[1823],{"type":403,"value":1824},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":397,"tag":422,"props":1826,"children":1828},{"className":655,"code":1827,"language":657,"meta":391,"style":391},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1829],{"type":397,"tag":429,"props":1830,"children":1831},{"__ignoreMap":391},[1832,1840,1913,1979,2023,2065,2073,2080,2088,2103,2163,2224,2265,2306,2315,2323],{"type":397,"tag":433,"props":1833,"children":1834},{"class":435,"line":436},[1835],{"type":397,"tag":433,"props":1836,"children":1837},{"style":720},[1838],{"type":403,"value":1839},"// it works !\n",{"type":397,"tag":433,"props":1841,"children":1842},{"class":435,"line":726},[1843,1848,1853,1858,1863,1868,1872,1876,1881,1886,1891,1895,1900,1905,1909],{"type":397,"tag":433,"props":1844,"children":1846},{"style":1845},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1847],{"type":403,"value":1718},{"type":397,"tag":433,"props":1849,"children":1850},{"style":673},[1851],{"type":403,"value":1852},":",{"type":397,"tag":433,"props":1854,"children":1855},{"style":1696},[1856],{"type":403,"value":1857}," for",{"type":397,"tag":433,"props":1859,"children":1860},{"style":667},[1861],{"type":403,"value":1862}," (i ",{"type":397,"tag":433,"props":1864,"children":1865},{"style":463},[1866],{"type":403,"value":1867},"=",{"type":397,"tag":433,"props":1869,"children":1870},{"style":695},[1871],{"type":403,"value":1802},{"type":397,"tag":433,"props":1873,"children":1874},{"style":673},[1875],{"type":403,"value":1775},{"type":397,"tag":433,"props":1877,"children":1878},{"style":667},[1879],{"type":403,"value":1880}," i ",{"type":397,"tag":433,"props":1882,"children":1883},{"style":463},[1884],{"type":403,"value":1885},"\u003C",{"type":397,"tag":433,"props":1887,"children":1888},{"style":695},[1889],{"type":403,"value":1890}," 3",{"type":397,"tag":433,"props":1892,"children":1893},{"style":673},[1894],{"type":403,"value":1775},{"type":397,"tag":433,"props":1896,"children":1897},{"style":667},[1898],{"type":403,"value":1899}," i",{"type":397,"tag":433,"props":1901,"children":1902},{"style":463},[1903],{"type":403,"value":1904},"++",{"type":397,"tag":433,"props":1906,"children":1907},{"style":667},[1908],{"type":403,"value":717},{"type":397,"tag":433,"props":1910,"children":1911},{"style":673},[1912],{"type":403,"value":1742},{"type":397,"tag":433,"props":1914,"children":1915},{"class":435,"line":1372},[1916,1921,1926,1931,1935,1940,1944,1949,1954,1959,1963,1967,1971,1975],{"type":397,"tag":433,"props":1917,"children":1918},{"style":1696},[1919],{"type":403,"value":1920},"  for",{"type":397,"tag":433,"props":1922,"children":1923},{"style":1390},[1924],{"type":403,"value":1925}," (",{"type":397,"tag":433,"props":1927,"children":1928},{"style":667},[1929],{"type":403,"value":1930},"j",{"type":397,"tag":433,"props":1932,"children":1933},{"style":463},[1934],{"type":403,"value":1356},{"type":397,"tag":433,"props":1936,"children":1937},{"style":695},[1938],{"type":403,"value":1939}," 5",{"type":397,"tag":433,"props":1941,"children":1942},{"style":673},[1943],{"type":403,"value":1775},{"type":397,"tag":433,"props":1945,"children":1946},{"style":667},[1947],{"type":403,"value":1948}," j",{"type":397,"tag":433,"props":1950,"children":1951},{"style":463},[1952],{"type":403,"value":1953}," \u003C",{"type":397,"tag":433,"props":1955,"children":1956},{"style":695},[1957],{"type":403,"value":1958}," 8",{"type":397,"tag":433,"props":1960,"children":1961},{"style":673},[1962],{"type":403,"value":1775},{"type":397,"tag":433,"props":1964,"children":1965},{"style":667},[1966],{"type":403,"value":1948},{"type":397,"tag":433,"props":1968,"children":1969},{"style":463},[1970],{"type":403,"value":1904},{"type":397,"tag":433,"props":1972,"children":1973},{"style":1390},[1974],{"type":403,"value":717},{"type":397,"tag":433,"props":1976,"children":1977},{"style":673},[1978],{"type":403,"value":1742},{"type":397,"tag":433,"props":1980,"children":1981},{"class":435,"line":1413},[1982,1987,1991,1995,2000,2005,2009,2014,2019],{"type":397,"tag":433,"props":1983,"children":1984},{"style":1696},[1985],{"type":403,"value":1986},"    if",{"type":397,"tag":433,"props":1988,"children":1989},{"style":1390},[1990],{"type":403,"value":1925},{"type":397,"tag":433,"props":1992,"children":1993},{"style":667},[1994],{"type":403,"value":1930},{"type":397,"tag":433,"props":1996,"children":1997},{"style":463},[1998],{"type":403,"value":1999}," ===",{"type":397,"tag":433,"props":2001,"children":2002},{"style":695},[2003],{"type":403,"value":2004}," 6",{"type":397,"tag":433,"props":2006,"children":2007},{"style":1390},[2008],{"type":403,"value":717},{"type":397,"tag":433,"props":2010,"children":2011},{"style":1696},[2012],{"type":403,"value":2013},"continue",{"type":397,"tag":433,"props":2015,"children":2016},{"style":1845},[2017],{"type":403,"value":2018}," test",{"type":397,"tag":433,"props":2020,"children":2021},{"style":673},[2022],{"type":403,"value":1807},{"type":397,"tag":433,"props":2024,"children":2025},{"class":435,"line":1422},[2026,2031,2036,2040,2044,2048,2053,2057,2061],{"type":397,"tag":433,"props":2027,"children":2028},{"style":1696},[2029],{"type":403,"value":2030},"    else",{"type":397,"tag":433,"props":2032,"children":2033},{"style":667},[2034],{"type":403,"value":2035}," console",{"type":397,"tag":433,"props":2037,"children":2038},{"style":673},[2039],{"type":403,"value":676},{"type":397,"tag":433,"props":2041,"children":2042},{"style":679},[2043],{"type":403,"value":1387},{"type":397,"tag":433,"props":2045,"children":2046},{"style":1390},[2047],{"type":403,"value":687},{"type":397,"tag":433,"props":2049,"children":2050},{"style":667},[2051],{"type":403,"value":2052},"i",{"type":397,"tag":433,"props":2054,"children":2055},{"style":673},[2056],{"type":403,"value":703},{"type":397,"tag":433,"props":2058,"children":2059},{"style":667},[2060],{"type":403,"value":1948},{"type":397,"tag":433,"props":2062,"children":2063},{"style":1390},[2064],{"type":403,"value":1410},{"type":397,"tag":433,"props":2066,"children":2067},{"class":435,"line":1457},[2068],{"type":397,"tag":433,"props":2069,"children":2070},{"style":673},[2071],{"type":403,"value":2072},"  }\n",{"type":397,"tag":433,"props":2074,"children":2075},{"class":435,"line":1494},[2076],{"type":397,"tag":433,"props":2077,"children":2078},{"style":673},[2079],{"type":403,"value":1419},{"type":397,"tag":433,"props":2081,"children":2082},{"class":435,"line":1502},[2083],{"type":397,"tag":433,"props":2084,"children":2085},{"style":720},[2086],{"type":403,"value":2087},"// SyntaxError !\n",{"type":397,"tag":433,"props":2089,"children":2090},{"class":435,"line":1529},[2091,2095,2099],{"type":397,"tag":433,"props":2092,"children":2093},{"style":1845},[2094],{"type":403,"value":1718},{"type":397,"tag":433,"props":2096,"children":2097},{"style":673},[2098],{"type":403,"value":1852},{"type":397,"tag":433,"props":2100,"children":2101},{"style":673},[2102],{"type":403,"value":1333},{"type":397,"tag":433,"props":2104,"children":2106},{"class":435,"line":2105},10,[2107,2111,2115,2119,2123,2127,2131,2135,2139,2143,2147,2151,2155,2159],{"type":397,"tag":433,"props":2108,"children":2109},{"style":1696},[2110],{"type":403,"value":1920},{"type":397,"tag":433,"props":2112,"children":2113},{"style":1390},[2114],{"type":403,"value":1925},{"type":397,"tag":433,"props":2116,"children":2117},{"style":667},[2118],{"type":403,"value":2052},{"type":397,"tag":433,"props":2120,"children":2121},{"style":463},[2122],{"type":403,"value":1356},{"type":397,"tag":433,"props":2124,"children":2125},{"style":695},[2126],{"type":403,"value":1802},{"type":397,"tag":433,"props":2128,"children":2129},{"style":673},[2130],{"type":403,"value":1775},{"type":397,"tag":433,"props":2132,"children":2133},{"style":667},[2134],{"type":403,"value":1899},{"type":397,"tag":433,"props":2136,"children":2137},{"style":463},[2138],{"type":403,"value":1953},{"type":397,"tag":433,"props":2140,"children":2141},{"style":695},[2142],{"type":403,"value":1890},{"type":397,"tag":433,"props":2144,"children":2145},{"style":673},[2146],{"type":403,"value":1775},{"type":397,"tag":433,"props":2148,"children":2149},{"style":667},[2150],{"type":403,"value":1899},{"type":397,"tag":433,"props":2152,"children":2153},{"style":463},[2154],{"type":403,"value":1904},{"type":397,"tag":433,"props":2156,"children":2157},{"style":1390},[2158],{"type":403,"value":717},{"type":397,"tag":433,"props":2160,"children":2161},{"style":673},[2162],{"type":403,"value":1742},{"type":397,"tag":433,"props":2164,"children":2166},{"class":435,"line":2165},11,[2167,2172,2176,2180,2184,2188,2192,2196,2200,2204,2208,2212,2216,2220],{"type":397,"tag":433,"props":2168,"children":2169},{"style":1696},[2170],{"type":403,"value":2171},"    for",{"type":397,"tag":433,"props":2173,"children":2174},{"style":1390},[2175],{"type":403,"value":1925},{"type":397,"tag":433,"props":2177,"children":2178},{"style":667},[2179],{"type":403,"value":1930},{"type":397,"tag":433,"props":2181,"children":2182},{"style":463},[2183],{"type":403,"value":1356},{"type":397,"tag":433,"props":2185,"children":2186},{"style":695},[2187],{"type":403,"value":1939},{"type":397,"tag":433,"props":2189,"children":2190},{"style":673},[2191],{"type":403,"value":1775},{"type":397,"tag":433,"props":2193,"children":2194},{"style":667},[2195],{"type":403,"value":1948},{"type":397,"tag":433,"props":2197,"children":2198},{"style":463},[2199],{"type":403,"value":1953},{"type":397,"tag":433,"props":2201,"children":2202},{"style":695},[2203],{"type":403,"value":1958},{"type":397,"tag":433,"props":2205,"children":2206},{"style":673},[2207],{"type":403,"value":1775},{"type":397,"tag":433,"props":2209,"children":2210},{"style":667},[2211],{"type":403,"value":1948},{"type":397,"tag":433,"props":2213,"children":2214},{"style":463},[2215],{"type":403,"value":1904},{"type":397,"tag":433,"props":2217,"children":2218},{"style":1390},[2219],{"type":403,"value":717},{"type":397,"tag":433,"props":2221,"children":2222},{"style":673},[2223],{"type":403,"value":1742},{"type":397,"tag":433,"props":2225,"children":2227},{"class":435,"line":2226},12,[2228,2233,2237,2241,2245,2249,2253,2257,2261],{"type":397,"tag":433,"props":2229,"children":2230},{"style":1696},[2231],{"type":403,"value":2232},"      if",{"type":397,"tag":433,"props":2234,"children":2235},{"style":1390},[2236],{"type":403,"value":1925},{"type":397,"tag":433,"props":2238,"children":2239},{"style":667},[2240],{"type":403,"value":1930},{"type":397,"tag":433,"props":2242,"children":2243},{"style":463},[2244],{"type":403,"value":1999},{"type":397,"tag":433,"props":2246,"children":2247},{"style":695},[2248],{"type":403,"value":2004},{"type":397,"tag":433,"props":2250,"children":2251},{"style":1390},[2252],{"type":403,"value":717},{"type":397,"tag":433,"props":2254,"children":2255},{"style":1696},[2256],{"type":403,"value":2013},{"type":397,"tag":433,"props":2258,"children":2259},{"style":1845},[2260],{"type":403,"value":2018},{"type":397,"tag":433,"props":2262,"children":2263},{"style":673},[2264],{"type":403,"value":1807},{"type":397,"tag":433,"props":2266,"children":2268},{"class":435,"line":2267},13,[2269,2274,2278,2282,2286,2290,2294,2298,2302],{"type":397,"tag":433,"props":2270,"children":2271},{"style":1696},[2272],{"type":403,"value":2273},"      else",{"type":397,"tag":433,"props":2275,"children":2276},{"style":667},[2277],{"type":403,"value":2035},{"type":397,"tag":433,"props":2279,"children":2280},{"style":673},[2281],{"type":403,"value":676},{"type":397,"tag":433,"props":2283,"children":2284},{"style":679},[2285],{"type":403,"value":1387},{"type":397,"tag":433,"props":2287,"children":2288},{"style":1390},[2289],{"type":403,"value":687},{"type":397,"tag":433,"props":2291,"children":2292},{"style":667},[2293],{"type":403,"value":2052},{"type":397,"tag":433,"props":2295,"children":2296},{"style":673},[2297],{"type":403,"value":703},{"type":397,"tag":433,"props":2299,"children":2300},{"style":667},[2301],{"type":403,"value":1948},{"type":397,"tag":433,"props":2303,"children":2304},{"style":1390},[2305],{"type":403,"value":1410},{"type":397,"tag":433,"props":2307,"children":2309},{"class":435,"line":2308},14,[2310],{"type":397,"tag":433,"props":2311,"children":2312},{"style":673},[2313],{"type":403,"value":2314},"    }\n",{"type":397,"tag":433,"props":2316,"children":2318},{"class":435,"line":2317},15,[2319],{"type":397,"tag":433,"props":2320,"children":2321},{"style":673},[2322],{"type":403,"value":2072},{"type":397,"tag":433,"props":2324,"children":2326},{"class":435,"line":2325},16,[2327],{"type":397,"tag":433,"props":2328,"children":2329},{"style":673},[2330],{"type":403,"value":1419},{"type":397,"tag":411,"props":2332,"children":2333},{},[2334],{"type":403,"value":2335},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":397,"tag":411,"props":2337,"children":2338},{},[2339],{"type":403,"value":2340},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":397,"tag":405,"props":2342,"children":2344},{"id":2343},"模块",[2345],{"type":403,"value":2343},{"type":397,"tag":411,"props":2347,"children":2348},{},[2349],{"type":403,"value":2350},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":397,"tag":422,"props":2352,"children":2354},{"className":655,"code":2353,"language":657,"meta":391,"style":391},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2355],{"type":397,"tag":429,"props":2356,"children":2357},{"__ignoreMap":391},[2358,2406],{"type":397,"tag":433,"props":2359,"children":2360},{"class":435,"line":436},[2361,2366,2371,2375,2379,2384,2388,2393,2397,2402],{"type":397,"tag":433,"props":2362,"children":2363},{"style":1696},[2364],{"type":403,"value":2365},"import",{"type":397,"tag":433,"props":2367,"children":2368},{"style":667},[2369],{"type":403,"value":2370}," defaultExport",{"type":397,"tag":433,"props":2372,"children":2373},{"style":673},[2374],{"type":403,"value":703},{"type":397,"tag":433,"props":2376,"children":2377},{"style":673},[2378],{"type":403,"value":1704},{"type":397,"tag":433,"props":2380,"children":2381},{"style":667},[2382],{"type":403,"value":2383}," toolA",{"type":397,"tag":433,"props":2385,"children":2386},{"style":673},[2387],{"type":403,"value":1727},{"type":397,"tag":433,"props":2389,"children":2390},{"style":1696},[2391],{"type":403,"value":2392}," from",{"type":397,"tag":433,"props":2394,"children":2395},{"style":446},[2396],{"type":403,"value":449},{"type":397,"tag":433,"props":2398,"children":2399},{"style":452},[2400],{"type":403,"value":2401},"test.mjs",{"type":397,"tag":433,"props":2403,"children":2404},{"style":446},[2405],{"type":403,"value":1369},{"type":397,"tag":433,"props":2407,"children":2408},{"class":435,"line":726},[2409,2413,2417,2421,2426,2431,2436,2441,2445,2449],{"type":397,"tag":433,"props":2410,"children":2411},{"style":1696},[2412],{"type":403,"value":2365},{"type":397,"tag":433,"props":2414,"children":2415},{"style":667},[2416],{"type":403,"value":2370},{"type":397,"tag":433,"props":2418,"children":2419},{"style":673},[2420],{"type":403,"value":703},{"type":397,"tag":433,"props":2422,"children":2423},{"style":746},[2424],{"type":403,"value":2425}," *",{"type":397,"tag":433,"props":2427,"children":2428},{"style":1696},[2429],{"type":403,"value":2430}," as",{"type":397,"tag":433,"props":2432,"children":2433},{"style":667},[2434],{"type":403,"value":2435}," namespace ",{"type":397,"tag":433,"props":2437,"children":2438},{"style":1696},[2439],{"type":403,"value":2440},"from",{"type":397,"tag":433,"props":2442,"children":2443},{"style":446},[2444],{"type":403,"value":449},{"type":397,"tag":433,"props":2446,"children":2447},{"style":452},[2448],{"type":403,"value":2401},{"type":397,"tag":433,"props":2450,"children":2451},{"style":446},[2452],{"type":403,"value":1369},{"type":397,"tag":411,"props":2454,"children":2455},{},[2456],{"type":403,"value":2457},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":397,"tag":411,"props":2459,"children":2460},{},[2461],{"type":403,"value":2462},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":397,"tag":411,"props":2464,"children":2465},{},[2466],{"type":403,"value":2467},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":397,"tag":405,"props":2469,"children":2471},{"id":2470},"严格模式",[2472],{"type":403,"value":2470},{"type":397,"tag":411,"props":2474,"children":2475},{},[2476],{"type":403,"value":2477},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":397,"tag":411,"props":2479,"children":2480},{},[2481],{"type":403,"value":2482},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":397,"tag":411,"props":2484,"children":2485},{},[2486],{"type":403,"value":2487},"总的来说，严格模式一共有七条限制：",{"type":397,"tag":511,"props":2489,"children":2490},{},[2491,2496,2501,2506,2511,2516,2521,2526,2531,2536],{"type":397,"tag":515,"props":2492,"children":2493},{},[2494],{"type":403,"value":2495},"对象字面量中不能有相同的属性声明",{"type":397,"tag":515,"props":2497,"children":2498},{},[2499],{"type":403,"value":2500},"函数实参列表中不能有同名参数",{"type":397,"tag":515,"props":2502,"children":2503},{},[2504],{"type":403,"value":2505},"不能声明、重写或删除 eval、arguments 标识符",{"type":397,"tag":515,"props":2507,"children":2508},{},[2509],{"type":403,"value":2510},"不允许使用八进制数字字面量",{"type":397,"tag":515,"props":2512,"children":2513},{},[2514],{"type":403,"value":2515},"不能删除显式声明的标识符、名字或具名函数",{"type":397,"tag":515,"props":2517,"children":2518},{},[2519],{"type":403,"value":2520},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":397,"tag":515,"props":2522,"children":2523},{},[2524],{"type":403,"value":2525},"禁用 with 语句",{"type":397,"tag":515,"props":2527,"children":2528},{},[2529],{"type":403,"value":2530},"禁用隐式声明",{"type":397,"tag":515,"props":2532,"children":2533},{},[2534],{"type":403,"value":2535},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":397,"tag":515,"props":2537,"children":2538},{},[2539],{"type":403,"value":2540},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":397,"tag":411,"props":2542,"children":2543},{},[2544],{"type":403,"value":2545},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":397,"tag":511,"props":2547,"children":2548},{},[2549,2554],{"type":397,"tag":515,"props":2550,"children":2551},{},[2552],{"type":403,"value":2553},"间接调用 eval 函数",{"type":397,"tag":515,"props":2555,"children":2556},{},[2557],{"type":403,"value":2558},"使用 new Function 构造的新函数",{"type":397,"tag":405,"props":2560,"children":2562},{"id":2561},"运算符的二义性",[2563],{"type":403,"value":2561},{"type":397,"tag":411,"props":2565,"children":2566},{},[2567],{"type":403,"value":2568},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":397,"tag":411,"props":2570,"children":2571},{},[2572],{"type":403,"value":2573},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":397,"tag":411,"props":2575,"children":2576},{},[2577],{"type":403,"value":2578},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":397,"tag":411,"props":2580,"children":2581},{},[2582],{"type":403,"value":2583},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":397,"tag":398,"props":2585,"children":2587},{"id":2586},"面向对象语言特性",[2588],{"type":403,"value":2586},{"type":397,"tag":405,"props":2590,"children":2592},{"id":2591},"语法综述-1",[2593],{"type":403,"value":407},{"type":397,"tag":411,"props":2595,"children":2596},{},[2597],{"type":403,"value":2598},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":397,"tag":411,"props":2600,"children":2601},{},[2602],{"type":403,"value":2603},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":397,"tag":411,"props":2605,"children":2606},{},[2607],{"type":403,"value":2608},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":397,"tag":411,"props":2610,"children":2611},{},[2612],{"type":403,"value":2613},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":397,"tag":422,"props":2615,"children":2617},{"className":655,"code":2616,"language":657,"meta":391,"style":391},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2618],{"type":397,"tag":429,"props":2619,"children":2620},{"__ignoreMap":391},[2621,2642,2669,2698,2706,2723,2736,2743,2751,2759,2783],{"type":397,"tag":433,"props":2622,"children":2623},{"class":435,"line":436},[2624,2629,2634,2638],{"type":397,"tag":433,"props":2625,"children":2626},{"style":990},[2627],{"type":403,"value":2628},"var",{"type":397,"tag":433,"props":2630,"children":2631},{"style":667},[2632],{"type":403,"value":2633}," obj",{"type":397,"tag":433,"props":2635,"children":2636},{"style":463},[2637],{"type":403,"value":1867},{"type":397,"tag":433,"props":2639,"children":2640},{"style":673},[2641],{"type":403,"value":1742},{"type":397,"tag":433,"props":2643,"children":2644},{"class":435,"line":726},[2645,2650,2655,2659,2664],{"type":397,"tag":433,"props":2646,"children":2647},{"style":990},[2648],{"type":403,"value":2649},"  set",{"type":397,"tag":433,"props":2651,"children":2653},{"style":2652},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2654],{"type":403,"value":2018},{"type":397,"tag":433,"props":2656,"children":2657},{"style":673},[2658],{"type":403,"value":687},{"type":397,"tag":433,"props":2660,"children":2661},{"style":1619},[2662],{"type":403,"value":2663},"x",{"type":397,"tag":433,"props":2665,"children":2666},{"style":673},[2667],{"type":403,"value":2668},"){\n",{"type":397,"tag":433,"props":2670,"children":2671},{"class":435,"line":1372},[2672,2677,2681,2685,2690,2694],{"type":397,"tag":433,"props":2673,"children":2674},{"style":667},[2675],{"type":403,"value":2676},"    c",{"type":397,"tag":433,"props":2678,"children":2679},{"style":463},[2680],{"type":403,"value":1867},{"type":397,"tag":433,"props":2682,"children":2683},{"style":446},[2684],{"type":403,"value":460},{"type":397,"tag":433,"props":2686,"children":2687},{"style":452},[2688],{"type":403,"value":2689},"other",{"type":397,"tag":433,"props":2691,"children":2692},{"style":446},[2693],{"type":403,"value":460},{"type":397,"tag":433,"props":2695,"children":2696},{"style":673},[2697],{"type":403,"value":1807},{"type":397,"tag":433,"props":2699,"children":2700},{"class":435,"line":1413},[2701],{"type":397,"tag":433,"props":2702,"children":2703},{"style":673},[2704],{"type":403,"value":2705},"  },\n",{"type":397,"tag":433,"props":2707,"children":2708},{"class":435,"line":1422},[2709,2714,2718],{"type":397,"tag":433,"props":2710,"children":2711},{"style":990},[2712],{"type":403,"value":2713},"  get",{"type":397,"tag":433,"props":2715,"children":2716},{"style":2652},[2717],{"type":403,"value":2018},{"type":397,"tag":433,"props":2719,"children":2720},{"style":673},[2721],{"type":403,"value":2722},"(){\n",{"type":397,"tag":433,"props":2724,"children":2725},{"class":435,"line":1457},[2726,2731],{"type":397,"tag":433,"props":2727,"children":2728},{"style":1696},[2729],{"type":403,"value":2730},"    return",{"type":397,"tag":433,"props":2732,"children":2733},{"style":667},[2734],{"type":403,"value":2735}," c\n",{"type":397,"tag":433,"props":2737,"children":2738},{"class":435,"line":1494},[2739],{"type":397,"tag":433,"props":2740,"children":2741},{"style":673},[2742],{"type":403,"value":2705},{"type":397,"tag":433,"props":2744,"children":2745},{"class":435,"line":1502},[2746],{"type":397,"tag":433,"props":2747,"children":2748},{"style":720},[2749],{"type":403,"value":2750},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":397,"tag":433,"props":2752,"children":2753},{"class":435,"line":1529},[2754],{"type":397,"tag":433,"props":2755,"children":2756},{"style":720},[2757],{"type":403,"value":2758},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":397,"tag":433,"props":2760,"children":2761},{"class":435,"line":2105},[2762,2767,2771,2775,2779],{"type":397,"tag":433,"props":2763,"children":2764},{"style":1390},[2765],{"type":403,"value":2766},"  test",{"type":397,"tag":433,"props":2768,"children":2769},{"style":673},[2770],{"type":403,"value":1852},{"type":397,"tag":433,"props":2772,"children":2773},{"style":446},[2774],{"type":403,"value":449},{"type":397,"tag":433,"props":2776,"children":2777},{"style":452},[2778],{"type":403,"value":1718},{"type":397,"tag":433,"props":2780,"children":2781},{"style":446},[2782],{"type":403,"value":1369},{"type":397,"tag":433,"props":2784,"children":2785},{"class":435,"line":2165},[2786],{"type":397,"tag":433,"props":2787,"children":2788},{"style":673},[2789],{"type":403,"value":1419},{"type":397,"tag":411,"props":2791,"children":2792},{},[2793],{"type":403,"value":2794},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":397,"tag":422,"props":2796,"children":2798},{"className":655,"code":2797,"language":657,"meta":391,"style":391},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2799],{"type":397,"tag":429,"props":2800,"children":2801},{"__ignoreMap":391},[2802,2810,2854],{"type":397,"tag":433,"props":2803,"children":2804},{"class":435,"line":436},[2805],{"type":397,"tag":433,"props":2806,"children":2807},{"style":720},[2808],{"type":403,"value":2809},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":397,"tag":433,"props":2811,"children":2812},{"class":435,"line":726},[2813,2818,2822,2827,2831,2836,2841,2845,2850],{"type":397,"tag":433,"props":2814,"children":2816},{"style":2815},"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[2817],{"type":403,"value":1429},{"type":397,"tag":433,"props":2819,"children":2820},{"style":673},[2821],{"type":403,"value":676},{"type":397,"tag":433,"props":2823,"children":2824},{"style":1426},[2825],{"type":403,"value":2826},"prototype",{"type":397,"tag":433,"props":2828,"children":2829},{"style":463},[2830],{"type":403,"value":1356},{"type":397,"tag":433,"props":2832,"children":2833},{"style":463},[2834],{"type":403,"value":2835}," new",{"type":397,"tag":433,"props":2837,"children":2838},{"style":679},[2839],{"type":403,"value":2840}," B",{"type":397,"tag":433,"props":2842,"children":2843},{"style":667},[2844],{"type":403,"value":687},{"type":397,"tag":433,"props":2846,"children":2847},{"style":720},[2848],{"type":403,"value":2849},"/* 传入参数 */",{"type":397,"tag":433,"props":2851,"children":2852},{"style":667},[2853],{"type":403,"value":1410},{"type":397,"tag":433,"props":2855,"children":2856},{"class":435,"line":1372},[2857,2861,2865,2869,2873,2878,2882],{"type":397,"tag":433,"props":2858,"children":2859},{"style":2815},[2860],{"type":403,"value":1429},{"type":397,"tag":433,"props":2862,"children":2863},{"style":673},[2864],{"type":403,"value":676},{"type":397,"tag":433,"props":2866,"children":2867},{"style":1426},[2868],{"type":403,"value":2826},{"type":397,"tag":433,"props":2870,"children":2871},{"style":673},[2872],{"type":403,"value":676},{"type":397,"tag":433,"props":2874,"children":2875},{"style":1426},[2876],{"type":403,"value":2877},"constructor",{"type":397,"tag":433,"props":2879,"children":2880},{"style":463},[2881],{"type":403,"value":1356},{"type":397,"tag":433,"props":2883,"children":2884},{"style":1426},[2885],{"type":403,"value":2886}," A\n",{"type":397,"tag":411,"props":2888,"children":2889},{},[2890],{"type":403,"value":2891},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":397,"tag":411,"props":2893,"children":2894},{},[2895],{"type":403,"value":2896},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":397,"tag":411,"props":2898,"children":2899},{},[2900],{"type":403,"value":2901},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":397,"tag":411,"props":2903,"children":2904},{},[2905],{"type":403,"value":2906},"总结一下遍历对象成员的方法：",{"type":403,"value":2908},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":397,"tag":1007,"props":2910,"children":2911},{},[2912,2936],{"type":397,"tag":1011,"props":2913,"children":2914},{},[2915],{"type":397,"tag":1015,"props":2916,"children":2917},{},[2918,2923,2928,2932],{"type":397,"tag":1019,"props":2919,"children":2920},{},[2921],{"type":403,"value":2922},"键名",{"type":397,"tag":1019,"props":2924,"children":2925},{},[2926],{"type":403,"value":2927},"显隐式",{"type":397,"tag":1019,"props":2929,"children":2930},{},[2931],{"type":403,"value":400},{"type":397,"tag":1019,"props":2933,"children":2934},{},[2935],{"type":403,"value":1028},{"type":397,"tag":1030,"props":2937,"children":2938},{},[2939,2962,2982,3004],{"type":397,"tag":1015,"props":2940,"children":2941},{},[2942,2947,2952,2957],{"type":397,"tag":1037,"props":2943,"children":2944},{},[2945],{"type":403,"value":2946},"一般键名",{"type":397,"tag":1037,"props":2948,"children":2949},{},[2950],{"type":403,"value":2951},"显式",{"type":397,"tag":1037,"props":2953,"children":2954},{},[2955],{"type":403,"value":2956},"for...in",{"type":397,"tag":1037,"props":2958,"children":2959},{},[2960],{"type":403,"value":2961},"可列举的成员名（包含原型链）",{"type":397,"tag":1015,"props":2963,"children":2964},{},[2965,2969,2973,2978],{"type":397,"tag":1037,"props":2966,"children":2967},{},[2968],{"type":403,"value":2946},{"type":397,"tag":1037,"props":2970,"children":2971},{},[2972],{"type":403,"value":2951},{"type":397,"tag":1037,"props":2974,"children":2975},{},[2976],{"type":403,"value":2977},"Object.prototype.map、Object.prototype.entries、...",{"type":397,"tag":1037,"props":2979,"children":2980},{},[2981],{"type":403,"value":1280},{"type":397,"tag":1015,"props":2983,"children":2984},{},[2985,2989,2994,2999],{"type":397,"tag":1037,"props":2986,"children":2987},{},[2988],{"type":403,"value":2946},{"type":397,"tag":1037,"props":2990,"children":2991},{},[2992],{"type":403,"value":2993},"显式 & 隐式",{"type":397,"tag":1037,"props":2995,"children":2996},{},[2997],{"type":403,"value":2998},"Object.getOwnPropertyNames()",{"type":397,"tag":1037,"props":3000,"children":3001},{},[3002],{"type":403,"value":3003},"所有非符号的自由属性名",{"type":397,"tag":1015,"props":3005,"children":3006},{},[3007,3012,3016,3021],{"type":397,"tag":1037,"props":3008,"children":3009},{},[3010],{"type":403,"value":3011},"符号键名键名",{"type":397,"tag":1037,"props":3013,"children":3014},{},[3015],{"type":403,"value":2993},{"type":397,"tag":1037,"props":3017,"children":3018},{},[3019],{"type":403,"value":3020},"Object.getOwnPropertySymbols()",{"type":397,"tag":1037,"props":3022,"children":3023},{},[3024],{"type":403,"value":3025},"所有符号键名的自有属性名",{"type":397,"tag":411,"props":3027,"children":3028},{},[3029,3031,3036,3038,3042],{"type":403,"value":3030},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":397,"tag":433,"props":3032,"children":3033},{},[3034],{"type":403,"value":3035},"prop",{"type":403,"value":3037}," 更好的替代方案是 typeof(obj",{"type":397,"tag":433,"props":3039,"children":3040},{},[3041],{"type":403,"value":3035},{"type":403,"value":3043},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":397,"tag":411,"props":3045,"children":3046},{},[3047],{"type":403,"value":3048},"delete 运算符有些特殊的地方：",{"type":397,"tag":511,"props":3050,"children":3051},{},[3052,3057],{"type":397,"tag":515,"props":3053,"children":3054},{},[3055],{"type":403,"value":3056},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":397,"tag":515,"props":3058,"children":3059},{},[3060],{"type":403,"value":3061},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":397,"tag":405,"props":3063,"children":3065},{"id":3064},"原型继承",[3066],{"type":403,"value":3064},{"type":397,"tag":411,"props":3068,"children":3069},{},[3070],{"type":403,"value":3071},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":397,"tag":411,"props":3073,"children":3074},{},[3075],{"type":403,"value":3076},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":397,"tag":511,"props":3078,"children":3079},{},[3080,3085],{"type":397,"tag":515,"props":3081,"children":3082},{},[3083],{"type":403,"value":3084},"读对象的属性时优先读取对象的自有属性表",{"type":397,"tag":515,"props":3086,"children":3087},{},[3088],{"type":403,"value":3089},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":397,"tag":411,"props":3091,"children":3092},{},[3093],{"type":403,"value":3094},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":397,"tag":411,"props":3096,"children":3097},{},[3098],{"type":403,"value":3099},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":397,"tag":422,"props":3101,"children":3103},{"className":655,"code":3102,"language":657,"meta":391,"style":391},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3104],{"type":397,"tag":429,"props":3105,"children":3106},{"__ignoreMap":391},[3107,3127,3166,3207],{"type":397,"tag":433,"props":3108,"children":3109},{"class":435,"line":436},[3110,3114,3118,3122],{"type":397,"tag":433,"props":3111,"children":3112},{"style":990},[3113],{"type":403,"value":1318},{"type":397,"tag":433,"props":3115,"children":3116},{"style":679},[3117],{"type":403,"value":2018},{"type":397,"tag":433,"props":3119,"children":3120},{"style":673},[3121],{"type":403,"value":1328},{"type":397,"tag":433,"props":3123,"children":3124},{"style":673},[3125],{"type":403,"value":3126}," {}\n",{"type":397,"tag":433,"props":3128,"children":3129},{"class":435,"line":726},[3130,3134,3139,3143,3147,3152,3156,3161],{"type":397,"tag":433,"props":3131,"children":3132},{"style":990},[3133],{"type":403,"value":2628},{"type":397,"tag":433,"props":3135,"children":3136},{"style":667},[3137],{"type":403,"value":3138}," a ",{"type":397,"tag":433,"props":3140,"children":3141},{"style":463},[3142],{"type":403,"value":1867},{"type":397,"tag":433,"props":3144,"children":3145},{"style":673},[3146],{"type":403,"value":1704},{"type":397,"tag":433,"props":3148,"children":3149},{"style":2652},[3150],{"type":403,"value":3151}," testb",{"type":397,"tag":433,"props":3153,"children":3154},{"style":673},[3155],{"type":403,"value":1328},{"type":397,"tag":433,"props":3157,"children":3158},{"style":673},[3159],{"type":403,"value":3160}," {}",{"type":397,"tag":433,"props":3162,"children":3163},{"style":673},[3164],{"type":403,"value":3165}," }\n",{"type":397,"tag":433,"props":3167,"children":3168},{"class":435,"line":1372},[3169,3173,3177,3182,3186,3190,3194,3198,3202],{"type":397,"tag":433,"props":3170,"children":3171},{"style":667},[3172],{"type":403,"value":494},{"type":397,"tag":433,"props":3174,"children":3175},{"style":673},[3176],{"type":403,"value":676},{"type":397,"tag":433,"props":3178,"children":3179},{"style":667},[3180],{"type":403,"value":3181},"testb",{"type":397,"tag":433,"props":3183,"children":3184},{"style":673},[3185],{"type":403,"value":676},{"type":397,"tag":433,"props":3187,"children":3188},{"style":1426},[3189],{"type":403,"value":2826},{"type":397,"tag":433,"props":3191,"children":3192},{"style":463},[3193],{"type":403,"value":1356},{"type":397,"tag":433,"props":3195,"children":3196},{"style":2815},[3197],{"type":403,"value":2018},{"type":397,"tag":433,"props":3199,"children":3200},{"style":673},[3201],{"type":403,"value":676},{"type":397,"tag":433,"props":3203,"children":3204},{"style":1426},[3205],{"type":403,"value":3206},"prototype\n",{"type":397,"tag":433,"props":3208,"children":3209},{"class":435,"line":1413},[3210,3214,3219,3223,3227,3231],{"type":397,"tag":433,"props":3211,"children":3212},{"style":463},[3213],{"type":403,"value":1508},{"type":397,"tag":433,"props":3215,"children":3216},{"style":667},[3217],{"type":403,"value":3218}," a",{"type":397,"tag":433,"props":3220,"children":3221},{"style":673},[3222],{"type":403,"value":676},{"type":397,"tag":433,"props":3224,"children":3225},{"style":679},[3226],{"type":403,"value":3181},{"type":397,"tag":433,"props":3228,"children":3229},{"style":667},[3230],{"type":403,"value":821},{"type":397,"tag":433,"props":3232,"children":3233},{"style":720},[3234],{"type":403,"value":3235},"// TypeError\n",{"type":397,"tag":411,"props":3237,"children":3238},{},[3239,3241,3249],{"type":403,"value":3240},"在",{"type":397,"tag":494,"props":3242,"children":3246},{"href":3243,"rel":3244},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3245],"nofollow",[3247],{"type":403,"value":3248},"规范",{"type":403,"value":3250},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":397,"tag":411,"props":3252,"children":3253},{},[3254],{"type":403,"value":3255},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":397,"tag":422,"props":3257,"children":3259},{"className":655,"code":3258,"language":657,"meta":391,"style":391},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3260],{"type":397,"tag":429,"props":3261,"children":3262},{"__ignoreMap":391},[3263,3283,3303],{"type":397,"tag":433,"props":3264,"children":3265},{"class":435,"line":436},[3266,3270,3275,3279],{"type":397,"tag":433,"props":3267,"children":3268},{"style":990},[3269],{"type":403,"value":1318},{"type":397,"tag":433,"props":3271,"children":3272},{"style":679},[3273],{"type":403,"value":3274}," Parent",{"type":397,"tag":433,"props":3276,"children":3277},{"style":673},[3278],{"type":403,"value":1328},{"type":397,"tag":433,"props":3280,"children":3281},{"style":673},[3282],{"type":403,"value":3126},{"type":397,"tag":433,"props":3284,"children":3285},{"class":435,"line":726},[3286,3290,3295,3299],{"type":397,"tag":433,"props":3287,"children":3288},{"style":990},[3289],{"type":403,"value":1318},{"type":397,"tag":433,"props":3291,"children":3292},{"style":679},[3293],{"type":403,"value":3294}," Child",{"type":397,"tag":433,"props":3296,"children":3297},{"style":673},[3298],{"type":403,"value":1328},{"type":397,"tag":433,"props":3300,"children":3301},{"style":673},[3302],{"type":403,"value":3126},{"type":397,"tag":433,"props":3304,"children":3305},{"class":435,"line":1372},[3306,3311,3315,3319,3323,3327,3331],{"type":397,"tag":433,"props":3307,"children":3308},{"style":2815},[3309],{"type":403,"value":3310},"Child",{"type":397,"tag":433,"props":3312,"children":3313},{"style":673},[3314],{"type":403,"value":676},{"type":397,"tag":433,"props":3316,"children":3317},{"style":1426},[3318],{"type":403,"value":2826},{"type":397,"tag":433,"props":3320,"children":3321},{"style":463},[3322],{"type":403,"value":1356},{"type":397,"tag":433,"props":3324,"children":3325},{"style":463},[3326],{"type":403,"value":2835},{"type":397,"tag":433,"props":3328,"children":3329},{"style":679},[3330],{"type":403,"value":3274},{"type":397,"tag":433,"props":3332,"children":3333},{"style":667},[3334],{"type":403,"value":3335},"()\n",{"type":397,"tag":411,"props":3337,"children":3338},{},[3339],{"type":403,"value":3340},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":397,"tag":422,"props":3342,"children":3344},{"className":655,"code":3343,"language":657,"meta":391,"style":391},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3345],{"type":397,"tag":429,"props":3346,"children":3347},{"__ignoreMap":391},[3348,3356],{"type":397,"tag":433,"props":3349,"children":3350},{"class":435,"line":436},[3351],{"type":397,"tag":433,"props":3352,"children":3353},{"style":720},[3354],{"type":403,"value":3355},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":397,"tag":433,"props":3357,"children":3358},{"class":435,"line":726},[3359,3363,3367,3371,3375,3379,3383],{"type":397,"tag":433,"props":3360,"children":3361},{"style":2815},[3362],{"type":403,"value":3310},{"type":397,"tag":433,"props":3364,"children":3365},{"style":673},[3366],{"type":403,"value":676},{"type":397,"tag":433,"props":3368,"children":3369},{"style":1426},[3370],{"type":403,"value":2826},{"type":397,"tag":433,"props":3372,"children":3373},{"style":673},[3374],{"type":403,"value":676},{"type":397,"tag":433,"props":3376,"children":3377},{"style":1426},[3378],{"type":403,"value":2877},{"type":397,"tag":433,"props":3380,"children":3381},{"style":463},[3382],{"type":403,"value":1356},{"type":397,"tag":433,"props":3384,"children":3385},{"style":667},[3386],{"type":403,"value":3387}," Child\n",{"type":397,"tag":422,"props":3389,"children":3391},{"className":655,"code":3390,"language":657,"meta":391,"style":391},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3392],{"type":397,"tag":429,"props":3393,"children":3394},{"__ignoreMap":391},[3395,3403,3422,3441,3464,3471],{"type":397,"tag":433,"props":3396,"children":3397},{"class":435,"line":436},[3398],{"type":397,"tag":433,"props":3399,"children":3400},{"style":720},[3401],{"type":403,"value":3402},"// 这种方法叫做圣杯模式\n",{"type":397,"tag":433,"props":3404,"children":3405},{"class":435,"line":726},[3406,3410,3414,3418],{"type":397,"tag":433,"props":3407,"children":3408},{"style":990},[3409],{"type":403,"value":1318},{"type":397,"tag":433,"props":3411,"children":3412},{"style":679},[3413],{"type":403,"value":3274},{"type":397,"tag":433,"props":3415,"children":3416},{"style":673},[3417],{"type":403,"value":1328},{"type":397,"tag":433,"props":3419,"children":3420},{"style":673},[3421],{"type":403,"value":3126},{"type":397,"tag":433,"props":3423,"children":3424},{"class":435,"line":1372},[3425,3429,3433,3437],{"type":397,"tag":433,"props":3426,"children":3427},{"style":990},[3428],{"type":403,"value":1318},{"type":397,"tag":433,"props":3430,"children":3431},{"style":679},[3432],{"type":403,"value":3294},{"type":397,"tag":433,"props":3434,"children":3435},{"style":673},[3436],{"type":403,"value":1328},{"type":397,"tag":433,"props":3438,"children":3439},{"style":673},[3440],{"type":403,"value":1333},{"type":397,"tag":433,"props":3442,"children":3443},{"class":435,"line":1413},[3444,3448,3452,3456,3460],{"type":397,"tag":433,"props":3445,"children":3446},{"style":1339},[3447],{"type":403,"value":1342},{"type":397,"tag":433,"props":3449,"children":3450},{"style":673},[3451],{"type":403,"value":676},{"type":397,"tag":433,"props":3453,"children":3454},{"style":1426},[3455],{"type":403,"value":2877},{"type":397,"tag":433,"props":3457,"children":3458},{"style":463},[3459],{"type":403,"value":1356},{"type":397,"tag":433,"props":3461,"children":3462},{"style":667},[3463],{"type":403,"value":3387},{"type":397,"tag":433,"props":3465,"children":3466},{"class":435,"line":1422},[3467],{"type":397,"tag":433,"props":3468,"children":3469},{"style":673},[3470],{"type":403,"value":1419},{"type":397,"tag":433,"props":3472,"children":3473},{"class":435,"line":1457},[3474,3478,3482,3486,3490,3494,3498],{"type":397,"tag":433,"props":3475,"children":3476},{"style":2815},[3477],{"type":403,"value":3310},{"type":397,"tag":433,"props":3479,"children":3480},{"style":673},[3481],{"type":403,"value":676},{"type":397,"tag":433,"props":3483,"children":3484},{"style":1426},[3485],{"type":403,"value":2826},{"type":397,"tag":433,"props":3487,"children":3488},{"style":463},[3489],{"type":403,"value":1356},{"type":397,"tag":433,"props":3491,"children":3492},{"style":463},[3493],{"type":403,"value":2835},{"type":397,"tag":433,"props":3495,"children":3496},{"style":679},[3497],{"type":403,"value":3274},{"type":397,"tag":433,"props":3499,"children":3500},{"style":667},[3501],{"type":403,"value":3335},{"type":397,"tag":411,"props":3503,"children":3504},{},[3505],{"type":403,"value":3506},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":397,"tag":405,"props":3508,"children":3510},{"id":3509},"类继承",[3511],{"type":403,"value":3509},{"type":397,"tag":411,"props":3513,"children":3514},{},[3515],{"type":403,"value":3516},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":397,"tag":422,"props":3518,"children":3520},{"className":655,"code":3519,"language":657,"meta":391,"style":391},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3521],{"type":397,"tag":429,"props":3522,"children":3523},{"__ignoreMap":391},[3524,3532,3549,3575,3583,3602,3621,3651],{"type":397,"tag":433,"props":3525,"children":3526},{"class":435,"line":436},[3527],{"type":397,"tag":433,"props":3528,"children":3529},{"style":720},[3530],{"type":403,"value":3531},"/* 类声明 */\n",{"type":397,"tag":433,"props":3533,"children":3534},{"class":435,"line":726},[3535,3540,3545],{"type":397,"tag":433,"props":3536,"children":3537},{"style":990},[3538],{"type":403,"value":3539},"class",{"type":397,"tag":433,"props":3541,"children":3543},{"style":3542},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E;--shiki-light-text-decoration:inherit;--shiki-default-text-decoration:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia-text-decoration:underline",[3544],{"type":403,"value":3274},{"type":397,"tag":433,"props":3546,"children":3547},{"style":673},[3548],{"type":403,"value":3126},{"type":397,"tag":433,"props":3550,"children":3551},{"class":435,"line":1372},[3552,3556,3560,3566,3571],{"type":397,"tag":433,"props":3553,"children":3554},{"style":990},[3555],{"type":403,"value":3539},{"type":397,"tag":433,"props":3557,"children":3558},{"style":3542},[3559],{"type":403,"value":3294},{"type":397,"tag":433,"props":3561,"children":3563},{"style":3562},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3564],{"type":403,"value":3565}," extends",{"type":397,"tag":433,"props":3567,"children":3569},{"style":3568},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic;--shiki-light-text-decoration:inherit;--shiki-default-text-decoration:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia-text-decoration:underline",[3570],{"type":403,"value":3274},{"type":397,"tag":433,"props":3572,"children":3573},{"style":673},[3574],{"type":403,"value":3126},{"type":397,"tag":433,"props":3576,"children":3577},{"class":435,"line":1413},[3578],{"type":397,"tag":433,"props":3579,"children":3580},{"style":720},[3581],{"type":403,"value":3582},"/* 仿制代码 */\n",{"type":397,"tag":433,"props":3584,"children":3585},{"class":435,"line":1422},[3586,3590,3594,3598],{"type":397,"tag":433,"props":3587,"children":3588},{"style":990},[3589],{"type":403,"value":1318},{"type":397,"tag":433,"props":3591,"children":3592},{"style":679},[3593],{"type":403,"value":3274},{"type":397,"tag":433,"props":3595,"children":3596},{"style":673},[3597],{"type":403,"value":1041},{"type":397,"tag":433,"props":3599,"children":3600},{"style":673},[3601],{"type":403,"value":3126},{"type":397,"tag":433,"props":3603,"children":3604},{"class":435,"line":1457},[3605,3609,3613,3617],{"type":397,"tag":433,"props":3606,"children":3607},{"style":990},[3608],{"type":403,"value":1318},{"type":397,"tag":433,"props":3610,"children":3611},{"style":679},[3612],{"type":403,"value":3294},{"type":397,"tag":433,"props":3614,"children":3615},{"style":673},[3616],{"type":403,"value":1041},{"type":397,"tag":433,"props":3618,"children":3619},{"style":673},[3620],{"type":403,"value":3126},{"type":397,"tag":433,"props":3622,"children":3623},{"class":435,"line":1494},[3624,3628,3632,3637,3642,3646],{"type":397,"tag":433,"props":3625,"children":3626},{"style":667},[3627],{"type":403,"value":670},{"type":397,"tag":433,"props":3629,"children":3630},{"style":673},[3631],{"type":403,"value":676},{"type":397,"tag":433,"props":3633,"children":3634},{"style":679},[3635],{"type":403,"value":3636},"setPrototypeOf",{"type":397,"tag":433,"props":3638,"children":3639},{"style":667},[3640],{"type":403,"value":3641},"(Child",{"type":397,"tag":433,"props":3643,"children":3644},{"style":673},[3645],{"type":403,"value":703},{"type":397,"tag":433,"props":3647,"children":3648},{"style":667},[3649],{"type":403,"value":3650}," Parent)\n",{"type":397,"tag":433,"props":3652,"children":3653},{"class":435,"line":1502},[3654,3658,3662,3666,3670,3674,3678,3682,3686,3690,3694,3698],{"type":397,"tag":433,"props":3655,"children":3656},{"style":667},[3657],{"type":403,"value":670},{"type":397,"tag":433,"props":3659,"children":3660},{"style":673},[3661],{"type":403,"value":676},{"type":397,"tag":433,"props":3663,"children":3664},{"style":679},[3665],{"type":403,"value":3636},{"type":397,"tag":433,"props":3667,"children":3668},{"style":667},[3669],{"type":403,"value":687},{"type":397,"tag":433,"props":3671,"children":3672},{"style":2815},[3673],{"type":403,"value":3310},{"type":397,"tag":433,"props":3675,"children":3676},{"style":673},[3677],{"type":403,"value":676},{"type":397,"tag":433,"props":3679,"children":3680},{"style":1426},[3681],{"type":403,"value":2826},{"type":397,"tag":433,"props":3683,"children":3684},{"style":673},[3685],{"type":403,"value":703},{"type":397,"tag":433,"props":3687,"children":3688},{"style":2815},[3689],{"type":403,"value":3274},{"type":397,"tag":433,"props":3691,"children":3692},{"style":673},[3693],{"type":403,"value":676},{"type":397,"tag":433,"props":3695,"children":3696},{"style":1426},[3697],{"type":403,"value":2826},{"type":397,"tag":433,"props":3699,"children":3700},{"style":667},[3701],{"type":403,"value":1410},{"type":397,"tag":411,"props":3703,"children":3704},{},[3705],{"type":403,"value":3706},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":397,"tag":411,"props":3708,"children":3709},{},[3710],{"type":403,"value":3711},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":397,"tag":411,"props":3713,"children":3714},{},[3715],{"type":403,"value":3716},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":397,"tag":422,"props":3718,"children":3720},{"className":655,"code":3719,"language":657,"meta":391,"style":391},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3721],{"type":397,"tag":429,"props":3722,"children":3723},{"__ignoreMap":391},[3724,3765,3796,3832,3861,3873],{"type":397,"tag":433,"props":3725,"children":3726},{"class":435,"line":436},[3727,3732,3736,3740,3744,3749,3753,3757,3761],{"type":397,"tag":433,"props":3728,"children":3729},{"style":2815},[3730],{"type":403,"value":3731},"object",{"type":397,"tag":433,"props":3733,"children":3734},{"style":673},[3735],{"type":403,"value":676},{"type":397,"tag":433,"props":3737,"children":3738},{"style":1426},[3739],{"type":403,"value":2826},{"type":397,"tag":433,"props":3741,"children":3742},{"style":673},[3743],{"type":403,"value":676},{"type":397,"tag":433,"props":3745,"children":3746},{"style":679},[3747],{"type":403,"value":3748},"method",{"type":397,"tag":433,"props":3750,"children":3751},{"style":463},[3752],{"type":403,"value":1356},{"type":397,"tag":433,"props":3754,"children":3755},{"style":990},[3756],{"type":403,"value":1446},{"type":397,"tag":433,"props":3758,"children":3759},{"style":673},[3760],{"type":403,"value":1328},{"type":397,"tag":433,"props":3762,"children":3763},{"style":673},[3764],{"type":403,"value":1333},{"type":397,"tag":433,"props":3766,"children":3767},{"class":435,"line":726},[3768,3773,3778,3782,3787,3791],{"type":397,"tag":433,"props":3769,"children":3770},{"style":990},[3771],{"type":403,"value":3772},"  const",{"type":397,"tag":433,"props":3774,"children":3775},{"style":1426},[3776],{"type":403,"value":3777}," thisClass",{"type":397,"tag":433,"props":3779,"children":3780},{"style":463},[3781],{"type":403,"value":1356},{"type":397,"tag":433,"props":3783,"children":3784},{"style":1339},[3785],{"type":403,"value":3786}," this",{"type":397,"tag":433,"props":3788,"children":3789},{"style":673},[3790],{"type":403,"value":676},{"type":397,"tag":433,"props":3792,"children":3793},{"style":1426},[3794],{"type":403,"value":3795},"constructor\n",{"type":397,"tag":433,"props":3797,"children":3798},{"class":435,"line":1372},[3799,3803,3808,3812,3816,3820,3824,3828],{"type":397,"tag":433,"props":3800,"children":3801},{"style":990},[3802],{"type":403,"value":3772},{"type":397,"tag":433,"props":3804,"children":3805},{"style":1426},[3806],{"type":403,"value":3807}," parentClass",{"type":397,"tag":433,"props":3809,"children":3810},{"style":463},[3811],{"type":403,"value":1356},{"type":397,"tag":433,"props":3813,"children":3814},{"style":2815},[3815],{"type":403,"value":3777},{"type":397,"tag":433,"props":3817,"children":3818},{"style":673},[3819],{"type":403,"value":676},{"type":397,"tag":433,"props":3821,"children":3822},{"style":1426},[3823],{"type":403,"value":2826},{"type":397,"tag":433,"props":3825,"children":3826},{"style":673},[3827],{"type":403,"value":676},{"type":397,"tag":433,"props":3829,"children":3830},{"style":1426},[3831],{"type":403,"value":3795},{"type":397,"tag":433,"props":3833,"children":3834},{"class":435,"line":1413},[3835,3839,3844,3848,3852,3856],{"type":397,"tag":433,"props":3836,"children":3837},{"style":990},[3838],{"type":403,"value":3772},{"type":397,"tag":433,"props":3840,"children":3841},{"style":1426},[3842],{"type":403,"value":3843}," parentMethod",{"type":397,"tag":433,"props":3845,"children":3846},{"style":463},[3847],{"type":403,"value":1356},{"type":397,"tag":433,"props":3849,"children":3850},{"style":667},[3851],{"type":403,"value":3807},{"type":397,"tag":433,"props":3853,"children":3854},{"style":673},[3855],{"type":403,"value":676},{"type":397,"tag":433,"props":3857,"children":3858},{"style":667},[3859],{"type":403,"value":3860},"method\n",{"type":397,"tag":433,"props":3862,"children":3863},{"class":435,"line":1422},[3864,3869],{"type":397,"tag":433,"props":3865,"children":3866},{"style":679},[3867],{"type":403,"value":3868},"  parentMethod",{"type":397,"tag":433,"props":3870,"children":3871},{"style":1390},[3872],{"type":403,"value":3335},{"type":397,"tag":433,"props":3874,"children":3875},{"class":435,"line":1457},[3876],{"type":397,"tag":433,"props":3877,"children":3878},{"style":673},[3879],{"type":403,"value":1419},{"type":397,"tag":411,"props":3881,"children":3882},{},[3883],{"type":403,"value":3884},"super 的指向由几个规则所限制：",{"type":397,"tag":511,"props":3886,"children":3887},{},[3888,3893,3898,3903,3908],{"type":397,"tag":515,"props":3889,"children":3890},{},[3891],{"type":403,"value":3892},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":397,"tag":515,"props":3894,"children":3895},{},[3896],{"type":403,"value":3897},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":397,"tag":515,"props":3899,"children":3900},{},[3901],{"type":403,"value":3902},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":397,"tag":515,"props":3904,"children":3905},{},[3906],{"type":403,"value":3907},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":397,"tag":515,"props":3909,"children":3910},{},[3911],{"type":403,"value":3912},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":397,"tag":411,"props":3914,"children":3915},{},[3916],{"type":403,"value":3917},"总结可以得出规律：",{"type":397,"tag":511,"props":3919,"children":3920},{},[3921,3926],{"type":397,"tag":515,"props":3922,"children":3923},{},[3924],{"type":403,"value":3925},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":397,"tag":515,"props":3927,"children":3928},{},[3929],{"type":403,"value":3930},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":397,"tag":411,"props":3932,"children":3933},{},[3934],{"type":403,"value":3935},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":397,"tag":422,"props":3937,"children":3939},{"className":655,"code":3938,"language":657,"meta":391,"style":391},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3940],{"type":397,"tag":429,"props":3941,"children":3942},{"__ignoreMap":391},[3943,3984,4054,4083,4091,4130,4164],{"type":397,"tag":433,"props":3944,"children":3945},{"class":435,"line":436},[3946,3951,3955,3959,3964,3968,3972,3976,3980],{"type":397,"tag":433,"props":3947,"children":3948},{"style":667},[3949],{"type":403,"value":3950},"proto ",{"type":397,"tag":433,"props":3952,"children":3953},{"style":463},[3954],{"type":403,"value":1867},{"type":397,"tag":433,"props":3956,"children":3957},{"style":673},[3958],{"type":403,"value":1704},{"type":397,"tag":433,"props":3960,"children":3961},{"style":1390},[3962],{"type":403,"value":3963},"data",{"type":397,"tag":433,"props":3965,"children":3966},{"style":673},[3967],{"type":403,"value":1852},{"type":397,"tag":433,"props":3969,"children":3970},{"style":446},[3971],{"type":403,"value":449},{"type":397,"tag":433,"props":3973,"children":3974},{"style":452},[3975],{"type":403,"value":1718},{"type":397,"tag":433,"props":3977,"children":3978},{"style":446},[3979],{"type":403,"value":460},{"type":397,"tag":433,"props":3981,"children":3982},{"style":673},[3983],{"type":403,"value":1419},{"type":397,"tag":433,"props":3985,"children":3986},{"class":435,"line":726},[3987,3992,3996,4000,4004,4008,4012,4016,4020,4024,4028,4034,4038,4042,4046,4050],{"type":397,"tag":433,"props":3988,"children":3989},{"style":667},[3990],{"type":403,"value":3991},"obj ",{"type":397,"tag":433,"props":3993,"children":3994},{"style":463},[3995],{"type":403,"value":1867},{"type":397,"tag":433,"props":3997,"children":3998},{"style":673},[3999],{"type":403,"value":1704},{"type":397,"tag":433,"props":4001,"children":4002},{"style":2652},[4003],{"type":403,"value":2018},{"type":397,"tag":433,"props":4005,"children":4006},{"style":673},[4007],{"type":403,"value":1041},{"type":397,"tag":433,"props":4009,"children":4010},{"style":673},[4011],{"type":403,"value":1704},{"type":397,"tag":433,"props":4013,"children":4014},{"style":667},[4015],{"type":403,"value":2035},{"type":397,"tag":433,"props":4017,"children":4018},{"style":673},[4019],{"type":403,"value":676},{"type":397,"tag":433,"props":4021,"children":4022},{"style":679},[4023],{"type":403,"value":1387},{"type":397,"tag":433,"props":4025,"children":4026},{"style":1390},[4027],{"type":403,"value":687},{"type":397,"tag":433,"props":4029,"children":4031},{"style":4030},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4032],{"type":403,"value":4033},"super",{"type":397,"tag":433,"props":4035,"children":4036},{"style":673},[4037],{"type":403,"value":676},{"type":397,"tag":433,"props":4039,"children":4040},{"style":667},[4041],{"type":403,"value":3963},{"type":397,"tag":433,"props":4043,"children":4044},{"style":1390},[4045],{"type":403,"value":717},{"type":397,"tag":433,"props":4047,"children":4048},{"style":673},[4049],{"type":403,"value":1666},{"type":397,"tag":433,"props":4051,"children":4052},{"style":673},[4053],{"type":403,"value":3165},{"type":397,"tag":433,"props":4055,"children":4056},{"class":435,"line":1372},[4057,4061,4065,4069,4074,4078],{"type":397,"tag":433,"props":4058,"children":4059},{"style":667},[4060],{"type":403,"value":670},{"type":397,"tag":433,"props":4062,"children":4063},{"style":673},[4064],{"type":403,"value":676},{"type":397,"tag":433,"props":4066,"children":4067},{"style":679},[4068],{"type":403,"value":3636},{"type":397,"tag":433,"props":4070,"children":4071},{"style":667},[4072],{"type":403,"value":4073},"(obj",{"type":397,"tag":433,"props":4075,"children":4076},{"style":673},[4077],{"type":403,"value":703},{"type":397,"tag":433,"props":4079,"children":4080},{"style":667},[4081],{"type":403,"value":4082}," proto)\n",{"type":397,"tag":433,"props":4084,"children":4085},{"class":435,"line":1413},[4086],{"type":397,"tag":433,"props":4087,"children":4088},{"emptyLinePlaceholder":390},[4089],{"type":403,"value":4090},"\n",{"type":397,"tag":433,"props":4092,"children":4093},{"class":435,"line":1422},[4094,4099,4103,4108,4112,4117,4121,4126],{"type":397,"tag":433,"props":4095,"children":4096},{"style":667},[4097],{"type":403,"value":4098},"obj2 ",{"type":397,"tag":433,"props":4100,"children":4101},{"style":463},[4102],{"type":403,"value":1867},{"type":397,"tag":433,"props":4104,"children":4105},{"style":667},[4106],{"type":403,"value":4107}," Object",{"type":397,"tag":433,"props":4109,"children":4110},{"style":673},[4111],{"type":403,"value":676},{"type":397,"tag":433,"props":4113,"children":4114},{"style":679},[4115],{"type":403,"value":4116},"create",{"type":397,"tag":433,"props":4118,"children":4119},{"style":667},[4120],{"type":403,"value":687},{"type":397,"tag":433,"props":4122,"children":4123},{"style":746},[4124],{"type":403,"value":4125},"null",{"type":397,"tag":433,"props":4127,"children":4128},{"style":667},[4129],{"type":403,"value":1410},{"type":397,"tag":433,"props":4131,"children":4132},{"class":435,"line":1457},[4133,4138,4142,4147,4151,4155,4159],{"type":397,"tag":433,"props":4134,"children":4135},{"style":667},[4136],{"type":403,"value":4137},"obj2",{"type":397,"tag":433,"props":4139,"children":4140},{"style":673},[4141],{"type":403,"value":676},{"type":397,"tag":433,"props":4143,"children":4144},{"style":667},[4145],{"type":403,"value":4146},"test ",{"type":397,"tag":433,"props":4148,"children":4149},{"style":463},[4150],{"type":403,"value":1867},{"type":397,"tag":433,"props":4152,"children":4153},{"style":667},[4154],{"type":403,"value":2633},{"type":397,"tag":433,"props":4156,"children":4157},{"style":673},[4158],{"type":403,"value":676},{"type":397,"tag":433,"props":4160,"children":4161},{"style":667},[4162],{"type":403,"value":4163},"test\n",{"type":397,"tag":433,"props":4165,"children":4166},{"class":435,"line":1494},[4167,4171,4175,4179,4183],{"type":397,"tag":433,"props":4168,"children":4169},{"style":667},[4170],{"type":403,"value":4137},{"type":397,"tag":433,"props":4172,"children":4173},{"style":673},[4174],{"type":403,"value":676},{"type":397,"tag":433,"props":4176,"children":4177},{"style":679},[4178],{"type":403,"value":1718},{"type":397,"tag":433,"props":4180,"children":4181},{"style":667},[4182],{"type":403,"value":821},{"type":397,"tag":433,"props":4184,"children":4185},{"style":720},[4186],{"type":403,"value":4187},"// 'test'\n",{"type":397,"tag":411,"props":4189,"children":4190},{},[4191],{"type":403,"value":4192},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":397,"tag":411,"props":4194,"children":4195},{},[4196],{"type":403,"value":4197},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":397,"tag":411,"props":4199,"children":4200},{},[4201],{"type":403,"value":4202},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":397,"tag":422,"props":4204,"children":4206},{"className":655,"code":4205,"language":657,"meta":391,"style":391},"class StaticClass extends null {\n  static pow () {}\n}\n",[4207],{"type":397,"tag":429,"props":4208,"children":4209},{"__ignoreMap":391},[4210,4235,4256],{"type":397,"tag":433,"props":4211,"children":4212},{"class":435,"line":436},[4213,4217,4222,4226,4231],{"type":397,"tag":433,"props":4214,"children":4215},{"style":990},[4216],{"type":403,"value":3539},{"type":397,"tag":433,"props":4218,"children":4219},{"style":3542},[4220],{"type":403,"value":4221}," StaticClass",{"type":397,"tag":433,"props":4223,"children":4224},{"style":3562},[4225],{"type":403,"value":3565},{"type":397,"tag":433,"props":4227,"children":4228},{"style":746},[4229],{"type":403,"value":4230}," null",{"type":397,"tag":433,"props":4232,"children":4233},{"style":673},[4234],{"type":403,"value":1333},{"type":397,"tag":433,"props":4236,"children":4237},{"class":435,"line":726},[4238,4243,4248,4252],{"type":397,"tag":433,"props":4239,"children":4240},{"style":3562},[4241],{"type":403,"value":4242},"  static",{"type":397,"tag":433,"props":4244,"children":4245},{"style":2652},[4246],{"type":403,"value":4247}," pow",{"type":397,"tag":433,"props":4249,"children":4250},{"style":673},[4251],{"type":403,"value":1328},{"type":397,"tag":433,"props":4253,"children":4254},{"style":673},[4255],{"type":403,"value":3126},{"type":397,"tag":433,"props":4257,"children":4258},{"class":435,"line":1372},[4259],{"type":397,"tag":433,"props":4260,"children":4261},{"style":673},[4262],{"type":403,"value":1419},{"type":397,"tag":411,"props":4264,"children":4265},{},[4266],{"type":403,"value":4267},"P196，这个 new.target.prototype 没看懂。",{"type":397,"tag":405,"props":4269,"children":4271},{"id":4270},"对象系统",[4272],{"type":403,"value":4270},{"type":397,"tag":411,"props":4274,"children":4275},{},[4276],{"type":403,"value":4277},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":397,"tag":411,"props":4279,"children":4280},{},[4281],{"type":403,"value":4282},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":397,"tag":411,"props":4284,"children":4285},{},[4286],{"type":403,"value":4287},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":397,"tag":422,"props":4289,"children":4291},{"className":655,"code":4290,"language":657,"meta":391,"style":391},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4292],{"type":397,"tag":429,"props":4293,"children":4294},{"__ignoreMap":391},[4295,4310,4333,4354],{"type":397,"tag":433,"props":4296,"children":4297},{"class":435,"line":436},[4298,4302,4306],{"type":397,"tag":433,"props":4299,"children":4300},{"style":990},[4301],{"type":403,"value":3539},{"type":397,"tag":433,"props":4303,"children":4304},{"style":3542},[4305],{"type":403,"value":1323},{"type":397,"tag":433,"props":4307,"children":4308},{"style":673},[4309],{"type":403,"value":3126},{"type":397,"tag":433,"props":4311,"children":4312},{"class":435,"line":726},[4313,4317,4321,4325,4329],{"type":397,"tag":433,"props":4314,"children":4315},{"style":990},[4316],{"type":403,"value":3539},{"type":397,"tag":433,"props":4318,"children":4319},{"style":3542},[4320],{"type":403,"value":2840},{"type":397,"tag":433,"props":4322,"children":4323},{"style":3562},[4324],{"type":403,"value":3565},{"type":397,"tag":433,"props":4326,"children":4327},{"style":3568},[4328],{"type":403,"value":1323},{"type":397,"tag":433,"props":4330,"children":4331},{"style":673},[4332],{"type":403,"value":3126},{"type":397,"tag":433,"props":4334,"children":4335},{"class":435,"line":1372},[4336,4341,4346,4350],{"type":397,"tag":433,"props":4337,"children":4338},{"style":1426},[4339],{"type":403,"value":4340},"B",{"type":397,"tag":433,"props":4342,"children":4343},{"style":463},[4344],{"type":403,"value":4345}," instanceof",{"type":397,"tag":433,"props":4347,"children":4348},{"style":3542},[4349],{"type":403,"value":1323},{"type":397,"tag":433,"props":4351,"children":4352},{"style":720},[4353],{"type":403,"value":837},{"type":397,"tag":433,"props":4355,"children":4356},{"class":435,"line":1413},[4357,4361,4365,4370,4374,4378,4382],{"type":397,"tag":433,"props":4358,"children":4359},{"style":1426},[4360],{"type":403,"value":1429},{"type":397,"tag":433,"props":4362,"children":4363},{"style":673},[4364],{"type":403,"value":676},{"type":397,"tag":433,"props":4366,"children":4367},{"style":679},[4368],{"type":403,"value":4369},"isPrototypeOf",{"type":397,"tag":433,"props":4371,"children":4372},{"style":667},[4373],{"type":403,"value":687},{"type":397,"tag":433,"props":4375,"children":4376},{"style":1426},[4377],{"type":403,"value":4340},{"type":397,"tag":433,"props":4379,"children":4380},{"style":667},[4381],{"type":403,"value":717},{"type":397,"tag":433,"props":4383,"children":4384},{"style":720},[4385],{"type":403,"value":767},{"type":397,"tag":411,"props":4387,"children":4388},{},[4389],{"type":403,"value":4390},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":397,"tag":411,"props":4392,"children":4393},{},[4394],{"type":403,"value":4395},"this 实在函数执行时动态传入的，规则有三：",{"type":397,"tag":511,"props":4397,"children":4398},{},[4399,4404,4409],{"type":397,"tag":515,"props":4400,"children":4401},{},[4402],{"type":403,"value":4403},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":397,"tag":515,"props":4405,"children":4406},{},[4407],{"type":403,"value":4408},"根据存取运算符将左操作符作为 this 传入",{"type":397,"tag":515,"props":4410,"children":4411},{},[4412],{"type":403,"value":4413},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":397,"tag":411,"props":4415,"children":4416},{},[4417],{"type":403,"value":4418},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":397,"tag":511,"props":4420,"children":4421},{},[4422,4427],{"type":397,"tag":515,"props":4423,"children":4424},{},[4425],{"type":403,"value":4426},"如果运行在严格模式中，不改变 this 的值，否则",{"type":397,"tag":515,"props":4428,"children":4429},{},[4430],{"type":403,"value":4431},"使用全局对象作为 this 值",{"type":397,"tag":411,"props":4433,"children":4434},{},[4435],{"type":403,"value":4436},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":397,"tag":411,"props":4438,"children":4439},{},[4440],{"type":403,"value":4441},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":397,"tag":511,"props":4443,"children":4444},{},[4445,4450],{"type":397,"tag":515,"props":4446,"children":4447},{},[4448],{"type":403,"value":4449},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":397,"tag":515,"props":4451,"children":4452},{},[4453],{"type":403,"value":4454},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":397,"tag":411,"props":4456,"children":4457},{},[4458],{"type":403,"value":4459},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":397,"tag":411,"props":4461,"children":4462},{},[4463],{"type":403,"value":4464},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":397,"tag":422,"props":4466,"children":4468},{"className":655,"code":4467,"language":657,"meta":391,"style":391},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4469],{"type":397,"tag":429,"props":4470,"children":4471},{"__ignoreMap":391},[4472,4480,4501,4508,4516],{"type":397,"tag":433,"props":4473,"children":4474},{"class":435,"line":436},[4475],{"type":397,"tag":433,"props":4476,"children":4477},{"style":720},[4478],{"type":403,"value":4479},"// 获得所有原生对象、宿主对象等\n",{"type":397,"tag":433,"props":4481,"children":4482},{"class":435,"line":726},[4483,4487,4491,4496],{"type":397,"tag":433,"props":4484,"children":4485},{"style":667},[4486],{"type":403,"value":670},{"type":397,"tag":433,"props":4488,"children":4489},{"style":673},[4490],{"type":403,"value":676},{"type":397,"tag":433,"props":4492,"children":4493},{"style":679},[4494],{"type":403,"value":4495},"getOwnPropertyNames",{"type":397,"tag":433,"props":4497,"children":4498},{"style":667},[4499],{"type":403,"value":4500},"(global)\n",{"type":397,"tag":433,"props":4502,"children":4503},{"class":435,"line":1372},[4504],{"type":397,"tag":433,"props":4505,"children":4506},{"emptyLinePlaceholder":390},[4507],{"type":403,"value":4090},{"type":397,"tag":433,"props":4509,"children":4510},{"class":435,"line":1413},[4511],{"type":397,"tag":433,"props":4512,"children":4513},{"style":720},[4514],{"type":403,"value":4515},"// 验证 undefined 是否存在 global 对象中\n",{"type":397,"tag":433,"props":4517,"children":4518},{"class":435,"line":1422},[4519,4523,4527,4532,4537,4541,4545,4550,4554,4558],{"type":397,"tag":433,"props":4520,"children":4521},{"style":667},[4522],{"type":403,"value":670},{"type":397,"tag":433,"props":4524,"children":4525},{"style":673},[4526],{"type":403,"value":676},{"type":397,"tag":433,"props":4528,"children":4529},{"style":679},[4530],{"type":403,"value":4531},"getOwnPropertyDescriptor",{"type":397,"tag":433,"props":4533,"children":4534},{"style":667},[4535],{"type":403,"value":4536},"(global",{"type":397,"tag":433,"props":4538,"children":4539},{"style":673},[4540],{"type":403,"value":703},{"type":397,"tag":433,"props":4542,"children":4543},{"style":446},[4544],{"type":403,"value":449},{"type":397,"tag":433,"props":4546,"children":4547},{"style":452},[4548],{"type":403,"value":4549},"undefined",{"type":397,"tag":433,"props":4551,"children":4552},{"style":446},[4553],{"type":403,"value":460},{"type":397,"tag":433,"props":4555,"children":4556},{"style":667},[4557],{"type":403,"value":717},{"type":397,"tag":433,"props":4559,"children":4560},{"style":720},[4561],{"type":403,"value":4562},"// {value: undefined /* ... */ }\n",{"type":397,"tag":411,"props":4564,"children":4565},{},[4566],{"type":403,"value":4567},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":397,"tag":411,"props":4569,"children":4570},{},[4571],{"type":403,"value":4572},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":397,"tag":411,"props":4574,"children":4575},{},[4576],{"type":403,"value":4577},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":403,"value":4579},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":397,"tag":1007,"props":4581,"children":4582},{},[4583,4604],{"type":397,"tag":1011,"props":4584,"children":4585},{},[4586],{"type":397,"tag":1015,"props":4587,"children":4588},{},[4589,4594,4599],{"type":397,"tag":1019,"props":4590,"children":4591},{},[4592],{"type":403,"value":4593},"对象",{"type":397,"tag":1019,"props":4595,"children":4596},{},[4597],{"type":403,"value":4598},"特殊效果",{"type":397,"tag":1019,"props":4600,"children":4601},{},[4602],{"type":403,"value":4603},"注",{"type":397,"tag":1030,"props":4605,"children":4606},{},[4607,4625,4642,4658,4674,4690,4708,4724,4740,4756],{"type":397,"tag":1015,"props":4608,"children":4609},{},[4610,4615,4620],{"type":397,"tag":1037,"props":4611,"children":4612},{},[4613],{"type":403,"value":4614},"Number、String、Boolean、Symbol",{"type":397,"tag":1037,"props":4616,"children":4617},{},[4618],{"type":403,"value":4619},"包装类",{"type":397,"tag":1037,"props":4621,"children":4622},{},[4623],{"type":403,"value":4624},"({}).toString()",{"type":397,"tag":1015,"props":4626,"children":4627},{},[4628,4632,4637],{"type":397,"tag":1037,"props":4629,"children":4630},{},[4631],{"type":403,"value":670},{"type":397,"tag":1037,"props":4633,"children":4634},{},[4635],{"type":403,"value":4636},"调用包装类",{"type":397,"tag":1037,"props":4638,"children":4639},{},[4640],{"type":403,"value":4641},"new Object(5) + new Object(3)",{"type":397,"tag":1015,"props":4643,"children":4644},{},[4645,4650,4655],{"type":397,"tag":1037,"props":4646,"children":4647},{},[4648],{"type":403,"value":4649},"Array",{"type":397,"tag":1037,"props":4651,"children":4652},{},[4653],{"type":403,"value":4654},"自动维护 length 属性",{"type":397,"tag":1037,"props":4656,"children":4657},{},[],{"type":397,"tag":1015,"props":4659,"children":4660},{},[4661,4666,4671],{"type":397,"tag":1037,"props":4662,"children":4663},{},[4664],{"type":403,"value":4665},"Date",{"type":397,"tag":1037,"props":4667,"children":4668},{},[4669],{"type":403,"value":4670},"日期对象相关的运算",{"type":397,"tag":1037,"props":4672,"children":4673},{},[],{"type":397,"tag":1015,"props":4675,"children":4676},{},[4677,4682,4687],{"type":397,"tag":1037,"props":4678,"children":4679},{},[4680],{"type":403,"value":4681},"Function",{"type":397,"tag":1037,"props":4683,"children":4684},{},[4685],{"type":403,"value":4686},"创建可执行的函数",{"type":397,"tag":1037,"props":4688,"children":4689},{},[],{"type":397,"tag":1015,"props":4691,"children":4692},{},[4693,4698,4703],{"type":397,"tag":1037,"props":4694,"children":4695},{},[4696],{"type":403,"value":4697},"RegExp",{"type":397,"tag":1037,"props":4699,"children":4700},{},[4701],{"type":403,"value":4702},"可执行",{"type":397,"tag":1037,"props":4704,"children":4705},{},[4706],{"type":403,"value":4707},"仅在某些宿主中",{"type":397,"tag":1015,"props":4709,"children":4710},{},[4711,4716,4721],{"type":397,"tag":1037,"props":4712,"children":4713},{},[4714],{"type":403,"value":4715},"Proxy",{"type":397,"tag":1037,"props":4717,"children":4718},{},[4719],{"type":403,"value":4720},"代理目标对象、回收代理",{"type":397,"tag":1037,"props":4722,"children":4723},{},[],{"type":397,"tag":1015,"props":4725,"children":4726},{},[4727,4732,4737],{"type":397,"tag":1037,"props":4728,"children":4729},{},[4730],{"type":403,"value":4731},"TypedArray、DataView",{"type":397,"tag":1037,"props":4733,"children":4734},{},[4735],{"type":403,"value":4736},"创建及绑定 buffer",{"type":397,"tag":1037,"props":4738,"children":4739},{},[],{"type":397,"tag":1015,"props":4741,"children":4742},{},[4743,4748,4753],{"type":397,"tag":1037,"props":4744,"children":4745},{},[4746],{"type":403,"value":4747},"ArrayBuffer、SharedArray、Buffer",{"type":397,"tag":1037,"props":4749,"children":4750},{},[4751],{"type":403,"value":4752},"初始化 buffer 并维护 byteLength 属性",{"type":397,"tag":1037,"props":4754,"children":4755},{},[],{"type":397,"tag":1015,"props":4757,"children":4758},{},[4759,4764,4769],{"type":397,"tag":1037,"props":4760,"children":4761},{},[4762],{"type":403,"value":4763},"WeakMap、WeakSet",{"type":397,"tag":1037,"props":4765,"children":4766},{},[4767],{"type":403,"value":4768},"不修改引用并自动回收对象",{"type":397,"tag":1037,"props":4770,"children":4771},{},[],{"type":397,"tag":411,"props":4773,"children":4774},{},[4775],{"type":403,"value":4776},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":397,"tag":422,"props":4778,"children":4780},{"className":655,"code":4779,"language":657,"meta":391,"style":391},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4781],{"type":397,"tag":429,"props":4782,"children":4783},{"__ignoreMap":391},[4784,4817,4854,4930,4943,4950,5002,5009],{"type":397,"tag":433,"props":4785,"children":4786},{"class":435,"line":436},[4787,4791,4796,4800,4804,4809,4813],{"type":397,"tag":433,"props":4788,"children":4789},{"style":990},[4790],{"type":403,"value":1318},{"type":397,"tag":433,"props":4792,"children":4793},{"style":679},[4794],{"type":403,"value":4795}," MyDate",{"type":397,"tag":433,"props":4797,"children":4798},{"style":673},[4799],{"type":403,"value":687},{"type":397,"tag":433,"props":4801,"children":4802},{"style":463},[4803],{"type":403,"value":1280},{"type":397,"tag":433,"props":4805,"children":4806},{"style":1619},[4807],{"type":403,"value":4808},"args",{"type":397,"tag":433,"props":4810,"children":4811},{"style":673},[4812],{"type":403,"value":1627},{"type":397,"tag":433,"props":4814,"children":4815},{"style":673},[4816],{"type":403,"value":1333},{"type":397,"tag":433,"props":4818,"children":4819},{"class":435,"line":726},[4820,4824,4829,4833,4838,4842,4846,4850],{"type":397,"tag":433,"props":4821,"children":4822},{"style":990},[4823],{"type":403,"value":3772},{"type":397,"tag":433,"props":4825,"children":4826},{"style":1426},[4827],{"type":403,"value":4828}," Base",{"type":397,"tag":433,"props":4830,"children":4831},{"style":463},[4832],{"type":403,"value":1356},{"type":397,"tag":433,"props":4834,"children":4835},{"style":2815},[4836],{"type":403,"value":4837}," Date",{"type":397,"tag":433,"props":4839,"children":4840},{"style":673},[4841],{"type":403,"value":676},{"type":397,"tag":433,"props":4843,"children":4844},{"style":1426},[4845],{"type":403,"value":2826},{"type":397,"tag":433,"props":4847,"children":4848},{"style":673},[4849],{"type":403,"value":676},{"type":397,"tag":433,"props":4851,"children":4852},{"style":1426},[4853],{"type":403,"value":3795},{"type":397,"tag":433,"props":4855,"children":4856},{"class":435,"line":1372},[4857,4861,4866,4870,4874,4878,4882,4886,4890,4894,4898,4902,4906,4910,4914,4918,4922,4926],{"type":397,"tag":433,"props":4858,"children":4859},{"style":990},[4860],{"type":403,"value":3772},{"type":397,"tag":433,"props":4862,"children":4863},{"style":1426},[4864],{"type":403,"value":4865}," instance",{"type":397,"tag":433,"props":4867,"children":4868},{"style":463},[4869],{"type":403,"value":1356},{"type":397,"tag":433,"props":4871,"children":4872},{"style":667},[4873],{"type":403,"value":4107},{"type":397,"tag":433,"props":4875,"children":4876},{"style":673},[4877],{"type":403,"value":676},{"type":397,"tag":433,"props":4879,"children":4880},{"style":679},[4881],{"type":403,"value":3636},{"type":397,"tag":433,"props":4883,"children":4884},{"style":1390},[4885],{"type":403,"value":687},{"type":397,"tag":433,"props":4887,"children":4888},{"style":463},[4889],{"type":403,"value":1508},{"type":397,"tag":433,"props":4891,"children":4892},{"style":679},[4893],{"type":403,"value":4828},{"type":397,"tag":433,"props":4895,"children":4896},{"style":1390},[4897],{"type":403,"value":687},{"type":397,"tag":433,"props":4899,"children":4900},{"style":463},[4901],{"type":403,"value":1280},{"type":397,"tag":433,"props":4903,"children":4904},{"style":667},[4905],{"type":403,"value":4808},{"type":397,"tag":433,"props":4907,"children":4908},{"style":1390},[4909],{"type":403,"value":1627},{"type":397,"tag":433,"props":4911,"children":4912},{"style":673},[4913],{"type":403,"value":703},{"type":397,"tag":433,"props":4915,"children":4916},{"style":2815},[4917],{"type":403,"value":4795},{"type":397,"tag":433,"props":4919,"children":4920},{"style":673},[4921],{"type":403,"value":676},{"type":397,"tag":433,"props":4923,"children":4924},{"style":1426},[4925],{"type":403,"value":2826},{"type":397,"tag":433,"props":4927,"children":4928},{"style":1390},[4929],{"type":403,"value":1410},{"type":397,"tag":433,"props":4931,"children":4932},{"class":435,"line":1413},[4933,4938],{"type":397,"tag":433,"props":4934,"children":4935},{"style":1696},[4936],{"type":403,"value":4937},"  return",{"type":397,"tag":433,"props":4939,"children":4940},{"style":667},[4941],{"type":403,"value":4942}," instance\n",{"type":397,"tag":433,"props":4944,"children":4945},{"class":435,"line":1422},[4946],{"type":397,"tag":433,"props":4947,"children":4948},{"style":673},[4949],{"type":403,"value":1419},{"type":397,"tag":433,"props":4951,"children":4952},{"class":435,"line":1457},[4953,4957,4961,4965,4969,4974,4978,4982,4986,4990,4994,4998],{"type":397,"tag":433,"props":4954,"children":4955},{"style":667},[4956],{"type":403,"value":670},{"type":397,"tag":433,"props":4958,"children":4959},{"style":673},[4960],{"type":403,"value":676},{"type":397,"tag":433,"props":4962,"children":4963},{"style":679},[4964],{"type":403,"value":3636},{"type":397,"tag":433,"props":4966,"children":4967},{"style":667},[4968],{"type":403,"value":687},{"type":397,"tag":433,"props":4970,"children":4971},{"style":2815},[4972],{"type":403,"value":4973},"MyDate",{"type":397,"tag":433,"props":4975,"children":4976},{"style":673},[4977],{"type":403,"value":676},{"type":397,"tag":433,"props":4979,"children":4980},{"style":1426},[4981],{"type":403,"value":2826},{"type":397,"tag":433,"props":4983,"children":4984},{"style":673},[4985],{"type":403,"value":703},{"type":397,"tag":433,"props":4987,"children":4988},{"style":2815},[4989],{"type":403,"value":4837},{"type":397,"tag":433,"props":4991,"children":4992},{"style":673},[4993],{"type":403,"value":676},{"type":397,"tag":433,"props":4995,"children":4996},{"style":1426},[4997],{"type":403,"value":2826},{"type":397,"tag":433,"props":4999,"children":5000},{"style":667},[5001],{"type":403,"value":1410},{"type":397,"tag":433,"props":5003,"children":5004},{"class":435,"line":1494},[5005],{"type":397,"tag":433,"props":5006,"children":5007},{"emptyLinePlaceholder":390},[5008],{"type":403,"value":4090},{"type":397,"tag":433,"props":5010,"children":5011},{"class":435,"line":1502},[5012,5017,5021,5025,5029,5033,5037,5041],{"type":397,"tag":433,"props":5013,"children":5014},{"style":667},[5015],{"type":403,"value":5016},"console",{"type":397,"tag":433,"props":5018,"children":5019},{"style":673},[5020],{"type":403,"value":676},{"type":397,"tag":433,"props":5022,"children":5023},{"style":679},[5024],{"type":403,"value":1387},{"type":397,"tag":433,"props":5026,"children":5027},{"style":667},[5028],{"type":403,"value":687},{"type":397,"tag":433,"props":5030,"children":5031},{"style":463},[5032],{"type":403,"value":1508},{"type":397,"tag":433,"props":5034,"children":5035},{"style":679},[5036],{"type":403,"value":4795},{"type":397,"tag":433,"props":5038,"children":5039},{"style":667},[5040],{"type":403,"value":805},{"type":397,"tag":433,"props":5042,"children":5043},{"style":720},[5044],{"type":403,"value":5045},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":397,"tag":405,"props":5047,"children":5049},{"id":5048},"可定制的对象属性",[5050],{"type":403,"value":5048},{"type":397,"tag":411,"props":5052,"children":5053},{},[5054],{"type":403,"value":5055},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":397,"tag":511,"props":5057,"children":5058},{},[5059,5064,5069],{"type":397,"tag":515,"props":5060,"children":5061},{},[5062],{"type":403,"value":5063},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":397,"tag":515,"props":5065,"children":5066},{},[5067],{"type":403,"value":5068},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":397,"tag":515,"props":5070,"children":5071},{},[5072],{"type":403,"value":5073},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":397,"tag":411,"props":5075,"children":5076},{},[5077],{"type":403,"value":5078},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":403,"value":5080},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":397,"tag":1007,"props":5082,"children":5083},{},[5084,5110],{"type":397,"tag":1011,"props":5085,"children":5086},{},[5087],{"type":397,"tag":1015,"props":5088,"children":5089},{},[5090,5095,5100,5105],{"type":397,"tag":1019,"props":5091,"children":5092},{},[5093],{"type":403,"value":5094},"Object.xxx 方法",{"type":397,"tag":1019,"props":5096,"children":5097},{},[5098],{"type":403,"value":5099},"方法说明",{"type":397,"tag":1019,"props":5101,"children":5102},{},[5103],{"type":403,"value":5104},"对自有属性表的操作",{"type":397,"tag":1019,"props":5106,"children":5107},{},[5108],{"type":403,"value":5109},"检查方法",{"type":397,"tag":1030,"props":5111,"children":5112},{},[5113,5142,5170],{"type":397,"tag":1015,"props":5114,"children":5115},{},[5116,5121,5126,5137],{"type":397,"tag":1037,"props":5117,"children":5118},{},[5119],{"type":403,"value":5120},"preventExtensions(obj)",{"type":397,"tag":1037,"props":5122,"children":5123},{},[5124],{"type":403,"value":5125},"使实例不能添加新属性，也不可重置原型",{"type":397,"tag":1037,"props":5127,"children":5128},{},[5129,5135],{"type":397,"tag":5130,"props":5131,"children":5132},"del",{},[5133],{"type":403,"value":5134},"add",{"type":403,"value":5136},"、delete、update",{"type":397,"tag":1037,"props":5138,"children":5139},{},[5140],{"type":403,"value":5141},"isExtensible(obj)",{"type":397,"tag":1015,"props":5143,"children":5144},{},[5145,5150,5155,5165],{"type":397,"tag":1037,"props":5146,"children":5147},{},[5148],{"type":403,"value":5149},"seal(obj)",{"type":397,"tag":1037,"props":5151,"children":5152},{},[5153],{"type":403,"value":5154},"使实例不能新增新属性，也不能删除既有属性",{"type":397,"tag":1037,"props":5156,"children":5157},{},[5158,5163],{"type":397,"tag":5130,"props":5159,"children":5160},{},[5161],{"type":403,"value":5162},"add、delete",{"type":403,"value":5164},"、update",{"type":397,"tag":1037,"props":5166,"children":5167},{},[5168],{"type":403,"value":5169},"isSealed(obj)",{"type":397,"tag":1015,"props":5171,"children":5172},{},[5173,5178,5183,5191],{"type":397,"tag":1037,"props":5174,"children":5175},{},[5176],{"type":403,"value":5177},"freeze(obj)",{"type":397,"tag":1037,"props":5179,"children":5180},{},[5181],{"type":403,"value":5182},"使实例所有属性只读，且不能再添加、删除属性",{"type":397,"tag":1037,"props":5184,"children":5185},{},[5186],{"type":397,"tag":5130,"props":5187,"children":5188},{},[5189],{"type":403,"value":5190},"add、delete、update",{"type":397,"tag":1037,"props":5192,"children":5193},{},[5194],{"type":403,"value":5195},"isFrozen(obj)",{"type":397,"tag":411,"props":5197,"children":5198},{},[5199],{"type":403,"value":5200},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":397,"tag":511,"props":5202,"children":5203},{},[5204,5209,5214],{"type":397,"tag":515,"props":5205,"children":5206},{},[5207],{"type":403,"value":5208},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":397,"tag":515,"props":5210,"children":5211},{},[5212],{"type":403,"value":5213},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":397,"tag":515,"props":5215,"children":5216},{},[5217],{"type":403,"value":5218},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":397,"tag":405,"props":5220,"children":5222},{"id":5221},"运行期侵入",[5223],{"type":403,"value":5221},{"type":397,"tag":411,"props":5225,"children":5226},{},[5227],{"type":403,"value":5228},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":397,"tag":411,"props":5230,"children":5231},{},[5232],{"type":403,"value":5233},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":397,"tag":411,"props":5235,"children":5236},{},[5237],{"type":403,"value":5238},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":403,"value":5240},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":397,"tag":1007,"props":5242,"children":5243},{},[5244,5260],{"type":397,"tag":1011,"props":5245,"children":5246},{},[5247],{"type":397,"tag":1015,"props":5248,"children":5249},{},[5250,5255],{"type":397,"tag":1019,"props":5251,"children":5252},{},[5253],{"type":403,"value":5254},"内部方法",{"type":397,"tag":1019,"props":5256,"children":5257},{},[5258],{"type":403,"value":5259},"handler.xxx",{"type":397,"tag":1030,"props":5261,"children":5262},{},[5263,5276,5289,5302,5315,5328,5341,5354,5367,5380,5393,5406,5419],{"type":397,"tag":1015,"props":5264,"children":5265},{},[5266,5271],{"type":397,"tag":1037,"props":5267,"children":5268},{},[5269],{"type":403,"value":5270},"[[GetPrototypeOf]]",{"type":397,"tag":1037,"props":5272,"children":5273},{},[5274],{"type":403,"value":5275},"getPrototypeOf()",{"type":397,"tag":1015,"props":5277,"children":5278},{},[5279,5284],{"type":397,"tag":1037,"props":5280,"children":5281},{},[5282],{"type":403,"value":5283},"[[SetPrototypeOf]]",{"type":397,"tag":1037,"props":5285,"children":5286},{},[5287],{"type":403,"value":5288},"setPrototypeOf()",{"type":397,"tag":1015,"props":5290,"children":5291},{},[5292,5297],{"type":397,"tag":1037,"props":5293,"children":5294},{},[5295],{"type":403,"value":5296},"[[IsExtensible]]",{"type":397,"tag":1037,"props":5298,"children":5299},{},[5300],{"type":403,"value":5301},"isExtensible()",{"type":397,"tag":1015,"props":5303,"children":5304},{},[5305,5310],{"type":397,"tag":1037,"props":5306,"children":5307},{},[5308],{"type":403,"value":5309},"[[PreventExtensions]]",{"type":397,"tag":1037,"props":5311,"children":5312},{},[5313],{"type":403,"value":5314},"preventExtensions()",{"type":397,"tag":1015,"props":5316,"children":5317},{},[5318,5323],{"type":397,"tag":1037,"props":5319,"children":5320},{},[5321],{"type":403,"value":5322},"[[GetOwnProperty]]",{"type":397,"tag":1037,"props":5324,"children":5325},{},[5326],{"type":403,"value":5327},"getOwnPropertyDescriptor()",{"type":397,"tag":1015,"props":5329,"children":5330},{},[5331,5336],{"type":397,"tag":1037,"props":5332,"children":5333},{},[5334],{"type":403,"value":5335},"[[HasProperty]]",{"type":397,"tag":1037,"props":5337,"children":5338},{},[5339],{"type":403,"value":5340},"has()",{"type":397,"tag":1015,"props":5342,"children":5343},{},[5344,5349],{"type":397,"tag":1037,"props":5345,"children":5346},{},[5347],{"type":403,"value":5348},"[[DefineOwnProperty]]",{"type":397,"tag":1037,"props":5350,"children":5351},{},[5352],{"type":403,"value":5353},"defineProperty()",{"type":397,"tag":1015,"props":5355,"children":5356},{},[5357,5362],{"type":397,"tag":1037,"props":5358,"children":5359},{},[5360],{"type":403,"value":5361},"[[Get]]",{"type":397,"tag":1037,"props":5363,"children":5364},{},[5365],{"type":403,"value":5366},"get()",{"type":397,"tag":1015,"props":5368,"children":5369},{},[5370,5375],{"type":397,"tag":1037,"props":5371,"children":5372},{},[5373],{"type":403,"value":5374},"[[Set]]",{"type":397,"tag":1037,"props":5376,"children":5377},{},[5378],{"type":403,"value":5379},"set()",{"type":397,"tag":1015,"props":5381,"children":5382},{},[5383,5388],{"type":397,"tag":1037,"props":5384,"children":5385},{},[5386],{"type":403,"value":5387},"[[Delete]]",{"type":397,"tag":1037,"props":5389,"children":5390},{},[5391],{"type":403,"value":5392},"deleteProperty()",{"type":397,"tag":1015,"props":5394,"children":5395},{},[5396,5401],{"type":397,"tag":1037,"props":5397,"children":5398},{},[5399],{"type":403,"value":5400},"[[OwnPropertyKeys]]",{"type":397,"tag":1037,"props":5402,"children":5403},{},[5404],{"type":403,"value":5405},"ownKeys()",{"type":397,"tag":1015,"props":5407,"children":5408},{},[5409,5414],{"type":397,"tag":1037,"props":5410,"children":5411},{},[5412],{"type":403,"value":5413},"[[Call]]",{"type":397,"tag":1037,"props":5415,"children":5416},{},[5417],{"type":403,"value":5418},"apply()",{"type":397,"tag":1015,"props":5420,"children":5421},{},[5422,5427],{"type":397,"tag":1037,"props":5423,"children":5424},{},[5425],{"type":403,"value":5426},"[[Construct]]",{"type":397,"tag":1037,"props":5428,"children":5429},{},[5430],{"type":403,"value":5431},"construct()",{"type":397,"tag":411,"props":5433,"children":5434},{},[5435],{"type":403,"value":5436},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":397,"tag":511,"props":5438,"children":5439},{},[5440,5445],{"type":397,"tag":515,"props":5441,"children":5442},{},[5443],{"type":403,"value":5444},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":397,"tag":515,"props":5446,"children":5447},{},[5448],{"type":403,"value":5449},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":397,"tag":411,"props":5451,"children":5452},{},[5453],{"type":403,"value":5454},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":397,"tag":422,"props":5456,"children":5458},{"className":655,"code":5457,"language":657,"meta":391,"style":391},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5459],{"type":397,"tag":429,"props":5460,"children":5461},{"__ignoreMap":391},[5462,5500,5549,5590,5668,5712,5777,5784,5818,5858,5897,5917,5934,5972,5979,5986,5997],{"type":397,"tag":433,"props":5463,"children":5464},{"class":435,"line":436},[5465,5469,5474,5478,5483,5487,5492,5496],{"type":397,"tag":433,"props":5466,"children":5467},{"style":990},[5468],{"type":403,"value":1318},{"type":397,"tag":433,"props":5470,"children":5471},{"style":679},[5472],{"type":403,"value":5473}," intrudeOnPrototype",{"type":397,"tag":433,"props":5475,"children":5476},{"style":673},[5477],{"type":403,"value":687},{"type":397,"tag":433,"props":5479,"children":5480},{"style":1619},[5481],{"type":403,"value":5482},"Fn",{"type":397,"tag":433,"props":5484,"children":5485},{"style":673},[5486],{"type":403,"value":703},{"type":397,"tag":433,"props":5488,"children":5489},{"style":1619},[5490],{"type":403,"value":5491}," handler",{"type":397,"tag":433,"props":5493,"children":5494},{"style":673},[5495],{"type":403,"value":1627},{"type":397,"tag":433,"props":5497,"children":5498},{"style":673},[5499],{"type":403,"value":1333},{"type":397,"tag":433,"props":5501,"children":5502},{"class":435,"line":726},[5503,5507,5512,5516,5520,5524,5529,5533,5537,5541,5545],{"type":397,"tag":433,"props":5504,"children":5505},{"style":990},[5506],{"type":403,"value":3772},{"type":397,"tag":433,"props":5508,"children":5509},{"style":1426},[5510],{"type":403,"value":5511}," originPrototype",{"type":397,"tag":433,"props":5513,"children":5514},{"style":463},[5515],{"type":403,"value":1356},{"type":397,"tag":433,"props":5517,"children":5518},{"style":667},[5519],{"type":403,"value":4107},{"type":397,"tag":433,"props":5521,"children":5522},{"style":673},[5523],{"type":403,"value":676},{"type":397,"tag":433,"props":5525,"children":5526},{"style":679},[5527],{"type":403,"value":5528},"getPrototypeOf",{"type":397,"tag":433,"props":5530,"children":5531},{"style":1390},[5532],{"type":403,"value":687},{"type":397,"tag":433,"props":5534,"children":5535},{"style":2815},[5536],{"type":403,"value":5482},{"type":397,"tag":433,"props":5538,"children":5539},{"style":673},[5540],{"type":403,"value":676},{"type":397,"tag":433,"props":5542,"children":5543},{"style":1426},[5544],{"type":403,"value":2826},{"type":397,"tag":433,"props":5546,"children":5547},{"style":1390},[5548],{"type":403,"value":1410},{"type":397,"tag":433,"props":5550,"children":5551},{"class":435,"line":1372},[5552,5556,5561,5565,5569,5573,5577,5581,5586],{"type":397,"tag":433,"props":5553,"children":5554},{"style":990},[5555],{"type":403,"value":3772},{"type":397,"tag":433,"props":5557,"children":5558},{"style":1426},[5559],{"type":403,"value":5560}," target",{"type":397,"tag":433,"props":5562,"children":5563},{"style":463},[5564],{"type":403,"value":1356},{"type":397,"tag":433,"props":5566,"children":5567},{"style":667},[5568],{"type":403,"value":4107},{"type":397,"tag":433,"props":5570,"children":5571},{"style":673},[5572],{"type":403,"value":676},{"type":397,"tag":433,"props":5574,"children":5575},{"style":679},[5576],{"type":403,"value":4116},{"type":397,"tag":433,"props":5578,"children":5579},{"style":1390},[5580],{"type":403,"value":687},{"type":397,"tag":433,"props":5582,"children":5583},{"style":667},[5584],{"type":403,"value":5585},"originPrototype",{"type":397,"tag":433,"props":5587,"children":5588},{"style":1390},[5589],{"type":403,"value":1410},{"type":397,"tag":433,"props":5591,"children":5592},{"class":435,"line":1413},[5593,5597,5601,5607,5611,5616,5620,5625,5629,5633,5638,5642,5647,5651,5656,5660,5664],{"type":397,"tag":433,"props":5594,"children":5595},{"style":990},[5596],{"type":403,"value":3772},{"type":397,"tag":433,"props":5598,"children":5599},{"style":673},[5600],{"type":403,"value":1704},{"type":397,"tag":433,"props":5602,"children":5604},{"style":5603},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5605],{"type":403,"value":5606}," proxy",{"type":397,"tag":433,"props":5608,"children":5609},{"style":673},[5610],{"type":403,"value":1852},{"type":397,"tag":433,"props":5612,"children":5613},{"style":1426},[5614],{"type":403,"value":5615}," newPrototype",{"type":397,"tag":433,"props":5617,"children":5618},{"style":673},[5619],{"type":403,"value":703},{"type":397,"tag":433,"props":5621,"children":5622},{"style":1426},[5623],{"type":403,"value":5624}," revoke",{"type":397,"tag":433,"props":5626,"children":5627},{"style":673},[5628],{"type":403,"value":1727},{"type":397,"tag":433,"props":5630,"children":5631},{"style":463},[5632],{"type":403,"value":1356},{"type":397,"tag":433,"props":5634,"children":5635},{"style":667},[5636],{"type":403,"value":5637}," Proxy",{"type":397,"tag":433,"props":5639,"children":5640},{"style":673},[5641],{"type":403,"value":676},{"type":397,"tag":433,"props":5643,"children":5644},{"style":679},[5645],{"type":403,"value":5646},"revocable",{"type":397,"tag":433,"props":5648,"children":5649},{"style":1390},[5650],{"type":403,"value":687},{"type":397,"tag":433,"props":5652,"children":5653},{"style":667},[5654],{"type":403,"value":5655},"target",{"type":397,"tag":433,"props":5657,"children":5658},{"style":673},[5659],{"type":403,"value":703},{"type":397,"tag":433,"props":5661,"children":5662},{"style":667},[5663],{"type":403,"value":5491},{"type":397,"tag":433,"props":5665,"children":5666},{"style":1390},[5667],{"type":403,"value":1410},{"type":397,"tag":433,"props":5669,"children":5670},{"class":435,"line":1422},[5671,5676,5680,5684,5688,5692,5696,5700,5704,5708],{"type":397,"tag":433,"props":5672,"children":5673},{"style":667},[5674],{"type":403,"value":5675},"  Object",{"type":397,"tag":433,"props":5677,"children":5678},{"style":673},[5679],{"type":403,"value":676},{"type":397,"tag":433,"props":5681,"children":5682},{"style":679},[5683],{"type":403,"value":3636},{"type":397,"tag":433,"props":5685,"children":5686},{"style":1390},[5687],{"type":403,"value":687},{"type":397,"tag":433,"props":5689,"children":5690},{"style":2815},[5691],{"type":403,"value":5482},{"type":397,"tag":433,"props":5693,"children":5694},{"style":673},[5695],{"type":403,"value":676},{"type":397,"tag":433,"props":5697,"children":5698},{"style":1426},[5699],{"type":403,"value":2826},{"type":397,"tag":433,"props":5701,"children":5702},{"style":673},[5703],{"type":403,"value":703},{"type":397,"tag":433,"props":5705,"children":5706},{"style":667},[5707],{"type":403,"value":5615},{"type":397,"tag":433,"props":5709,"children":5710},{"style":1390},[5711],{"type":403,"value":1410},{"type":397,"tag":433,"props":5713,"children":5714},{"class":435,"line":1457},[5715,5719,5723,5728,5732,5736,5740,5744,5748,5752,5756,5760,5764,5768,5772],{"type":397,"tag":433,"props":5716,"children":5717},{"style":1696},[5718],{"type":403,"value":4937},{"type":397,"tag":433,"props":5720,"children":5721},{"style":673},[5722],{"type":403,"value":1328},{"type":397,"tag":433,"props":5724,"children":5725},{"style":990},[5726],{"type":403,"value":5727}," =>",{"type":397,"tag":433,"props":5729,"children":5730},{"style":679},[5731],{"type":403,"value":5624},{"type":397,"tag":433,"props":5733,"children":5734},{"style":1390},[5735],{"type":403,"value":687},{"type":397,"tag":433,"props":5737,"children":5738},{"style":667},[5739],{"type":403,"value":670},{"type":397,"tag":433,"props":5741,"children":5742},{"style":673},[5743],{"type":403,"value":676},{"type":397,"tag":433,"props":5745,"children":5746},{"style":679},[5747],{"type":403,"value":3636},{"type":397,"tag":433,"props":5749,"children":5750},{"style":1390},[5751],{"type":403,"value":687},{"type":397,"tag":433,"props":5753,"children":5754},{"style":2815},[5755],{"type":403,"value":5482},{"type":397,"tag":433,"props":5757,"children":5758},{"style":673},[5759],{"type":403,"value":676},{"type":397,"tag":433,"props":5761,"children":5762},{"style":1426},[5763],{"type":403,"value":2826},{"type":397,"tag":433,"props":5765,"children":5766},{"style":673},[5767],{"type":403,"value":703},{"type":397,"tag":433,"props":5769,"children":5770},{"style":667},[5771],{"type":403,"value":5511},{"type":397,"tag":433,"props":5773,"children":5774},{"style":1390},[5775],{"type":403,"value":5776},"))\n",{"type":397,"tag":433,"props":5778,"children":5779},{"class":435,"line":1494},[5780],{"type":397,"tag":433,"props":5781,"children":5782},{"style":673},[5783],{"type":403,"value":1419},{"type":397,"tag":433,"props":5785,"children":5786},{"class":435,"line":1502},[5787,5792,5797,5801,5805,5810,5814],{"type":397,"tag":433,"props":5788,"children":5789},{"style":990},[5790],{"type":403,"value":5791},"const",{"type":397,"tag":433,"props":5793,"children":5794},{"style":1426},[5795],{"type":403,"value":5796}," recovery",{"type":397,"tag":433,"props":5798,"children":5799},{"style":463},[5800],{"type":403,"value":1356},{"type":397,"tag":433,"props":5802,"children":5803},{"style":679},[5804],{"type":403,"value":5473},{"type":397,"tag":433,"props":5806,"children":5807},{"style":667},[5808],{"type":403,"value":5809},"(String",{"type":397,"tag":433,"props":5811,"children":5812},{"style":673},[5813],{"type":403,"value":703},{"type":397,"tag":433,"props":5815,"children":5816},{"style":673},[5817],{"type":403,"value":1333},{"type":397,"tag":433,"props":5819,"children":5820},{"class":435,"line":1529},[5821,5825,5829,5833,5837,5841,5845,5850,5854],{"type":397,"tag":433,"props":5822,"children":5823},{"style":679},[5824],{"type":403,"value":2713},{"type":397,"tag":433,"props":5826,"children":5827},{"style":673},[5828],{"type":403,"value":1852},{"type":397,"tag":433,"props":5830,"children":5831},{"style":990},[5832],{"type":403,"value":1446},{"type":397,"tag":433,"props":5834,"children":5835},{"style":673},[5836],{"type":403,"value":1925},{"type":397,"tag":433,"props":5838,"children":5839},{"style":1619},[5840],{"type":403,"value":5655},{"type":397,"tag":433,"props":5842,"children":5843},{"style":673},[5844],{"type":403,"value":703},{"type":397,"tag":433,"props":5846,"children":5847},{"style":1619},[5848],{"type":403,"value":5849}," prop",{"type":397,"tag":433,"props":5851,"children":5852},{"style":673},[5853],{"type":403,"value":1627},{"type":397,"tag":433,"props":5855,"children":5856},{"style":673},[5857],{"type":403,"value":1333},{"type":397,"tag":433,"props":5859,"children":5860},{"class":435,"line":2105},[5861,5865,5869,5873,5877,5881,5885,5889,5893],{"type":397,"tag":433,"props":5862,"children":5863},{"style":1696},[5864],{"type":403,"value":1986},{"type":397,"tag":433,"props":5866,"children":5867},{"style":1390},[5868],{"type":403,"value":1925},{"type":397,"tag":433,"props":5870,"children":5871},{"style":667},[5872],{"type":403,"value":3035},{"type":397,"tag":433,"props":5874,"children":5875},{"style":463},[5876],{"type":403,"value":1999},{"type":397,"tag":433,"props":5878,"children":5879},{"style":446},[5880],{"type":403,"value":449},{"type":397,"tag":433,"props":5882,"children":5883},{"style":452},[5884],{"type":403,"value":1718},{"type":397,"tag":433,"props":5886,"children":5887},{"style":446},[5888],{"type":403,"value":460},{"type":397,"tag":433,"props":5890,"children":5891},{"style":1390},[5892],{"type":403,"value":717},{"type":397,"tag":433,"props":5894,"children":5895},{"style":673},[5896],{"type":403,"value":1742},{"type":397,"tag":433,"props":5898,"children":5899},{"class":435,"line":2165},[5900,5905,5909,5913],{"type":397,"tag":433,"props":5901,"children":5902},{"style":1696},[5903],{"type":403,"value":5904},"      return",{"type":397,"tag":433,"props":5906,"children":5907},{"style":446},[5908],{"type":403,"value":449},{"type":397,"tag":433,"props":5910,"children":5911},{"style":452},[5912],{"type":403,"value":1718},{"type":397,"tag":433,"props":5914,"children":5915},{"style":446},[5916],{"type":403,"value":1369},{"type":397,"tag":433,"props":5918,"children":5919},{"class":435,"line":2226},[5920,5925,5930],{"type":397,"tag":433,"props":5921,"children":5922},{"style":673},[5923],{"type":403,"value":5924},"    }",{"type":397,"tag":433,"props":5926,"children":5927},{"style":1696},[5928],{"type":403,"value":5929}," else",{"type":397,"tag":433,"props":5931,"children":5932},{"style":673},[5933],{"type":403,"value":1333},{"type":397,"tag":433,"props":5935,"children":5936},{"class":435,"line":2267},[5937,5941,5946,5950,5955,5959,5963,5968],{"type":397,"tag":433,"props":5938,"children":5939},{"style":1696},[5940],{"type":403,"value":5904},{"type":397,"tag":433,"props":5942,"children":5943},{"style":667},[5944],{"type":403,"value":5945}," Reflect",{"type":397,"tag":433,"props":5947,"children":5948},{"style":673},[5949],{"type":403,"value":676},{"type":397,"tag":433,"props":5951,"children":5952},{"style":679},[5953],{"type":403,"value":5954},"get",{"type":397,"tag":433,"props":5956,"children":5957},{"style":1390},[5958],{"type":403,"value":687},{"type":397,"tag":433,"props":5960,"children":5961},{"style":463},[5962],{"type":403,"value":1280},{"type":397,"tag":433,"props":5964,"children":5965},{"style":4030},[5966],{"type":403,"value":5967},"arguments",{"type":397,"tag":433,"props":5969,"children":5970},{"style":1390},[5971],{"type":403,"value":1410},{"type":397,"tag":433,"props":5973,"children":5974},{"class":435,"line":2308},[5975],{"type":397,"tag":433,"props":5976,"children":5977},{"style":673},[5978],{"type":403,"value":2314},{"type":397,"tag":433,"props":5980,"children":5981},{"class":435,"line":2317},[5982],{"type":397,"tag":433,"props":5983,"children":5984},{"style":673},[5985],{"type":403,"value":2072},{"type":397,"tag":433,"props":5987,"children":5988},{"class":435,"line":2325},[5989,5993],{"type":397,"tag":433,"props":5990,"children":5991},{"style":673},[5992],{"type":403,"value":1666},{"type":397,"tag":433,"props":5994,"children":5995},{"style":667},[5996],{"type":403,"value":1410},{"type":397,"tag":433,"props":5998,"children":6000},{"class":435,"line":5999},17,[6001,6005,6009,6013,6017,6022,6026,6031],{"type":397,"tag":433,"props":6002,"children":6003},{"style":667},[6004],{"type":403,"value":5016},{"type":397,"tag":433,"props":6006,"children":6007},{"style":673},[6008],{"type":403,"value":676},{"type":397,"tag":433,"props":6010,"children":6011},{"style":679},[6012],{"type":403,"value":1387},{"type":397,"tag":433,"props":6014,"children":6015},{"style":667},[6016],{"type":403,"value":687},{"type":397,"tag":433,"props":6018,"children":6019},{"style":446},[6020],{"type":403,"value":6021},"''",{"type":397,"tag":433,"props":6023,"children":6024},{"style":673},[6025],{"type":403,"value":676},{"type":397,"tag":433,"props":6027,"children":6028},{"style":667},[6029],{"type":403,"value":6030},"test) ",{"type":397,"tag":433,"props":6032,"children":6033},{"style":720},[6034],{"type":403,"value":6035},"// test\n",{"type":397,"tag":405,"props":6037,"children":6039},{"id":6038},"元编程系统",[6040],{"type":403,"value":6038},{"type":397,"tag":411,"props":6042,"children":6043},{},[6044],{"type":403,"value":6045},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":397,"tag":398,"props":6047,"children":6049},{"id":6048},"结构化",[6050],{"type":403,"value":6048},{"type":397,"tag":405,"props":6052,"children":6054},{"id":6053},"概述",[6055],{"type":403,"value":6053},{"type":397,"tag":411,"props":6057,"children":6058},{},[6059],{"type":403,"value":6060},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":397,"tag":411,"props":6062,"children":6063},{},[6064],{"type":403,"value":6065},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":397,"tag":411,"props":6067,"children":6068},{},[6069],{"type":403,"value":6070},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":397,"tag":411,"props":6072,"children":6073},{},[6074],{"type":403,"value":6075},"面向对象解决了结构化带来诸多问题的三点：",{"type":397,"tag":511,"props":6077,"children":6078},{},[6079,6084,6089],{"type":397,"tag":515,"props":6080,"children":6081},{},[6082],{"type":403,"value":6083},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":397,"tag":515,"props":6085,"children":6086},{},[6087],{"type":403,"value":6088},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":397,"tag":515,"props":6090,"children":6091},{},[6092],{"type":403,"value":6093},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":397,"tag":411,"props":6095,"children":6096},{},[6097],{"type":403,"value":6098},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":397,"tag":411,"props":6100,"children":6101},{},[6102],{"type":403,"value":6103},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":397,"tag":405,"props":6105,"children":6107},{"id":6106},"基本的组织元素",[6108],{"type":403,"value":6106},{"type":397,"tag":411,"props":6110,"children":6111},{},[6112],{"type":403,"value":6113},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":403,"value":2908},{"type":397,"tag":1007,"props":6116,"children":6117},{},[6118,6144],{"type":397,"tag":1011,"props":6119,"children":6120},{},[6121],{"type":397,"tag":1015,"props":6122,"children":6123},{},[6124,6129,6134,6139],{"type":397,"tag":1019,"props":6125,"children":6126},{},[6127],{"type":403,"value":6128},"元素",{"type":397,"tag":1019,"props":6130,"children":6131},{},[6132],{"type":403,"value":6133},"物理形态",{"type":397,"tag":1019,"props":6135,"children":6136},{},[6137],{"type":403,"value":6138},"静态",{"type":397,"tag":1019,"props":6140,"children":6141},{},[6142],{"type":403,"value":6143},"动态",{"type":397,"tag":1030,"props":6145,"children":6146},{},[6147,6168,6191,6213],{"type":397,"tag":1015,"props":6148,"children":6149},{},[6150,6155,6158,6163],{"type":397,"tag":1037,"props":6151,"children":6152},{},[6153],{"type":403,"value":6154},"标识符",{"type":397,"tag":1037,"props":6156,"children":6157},{},[],{"type":397,"tag":1037,"props":6159,"children":6160},{},[6161],{"type":403,"value":6162},"变量声明、函数声明、类声明",{"type":397,"tag":1037,"props":6164,"children":6165},{},[6166],{"type":403,"value":6167},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":397,"tag":1015,"props":6169,"children":6170},{},[6171,6176,6181,6186],{"type":397,"tag":1037,"props":6172,"children":6173},{},[6174],{"type":403,"value":6175},"表达式",{"type":397,"tag":1037,"props":6177,"children":6178},{},[6179],{"type":403,"value":6180},"模板字符串",{"type":397,"tag":1037,"props":6182,"children":6183},{},[6184],{"type":403,"value":6185},"值、箭头函数体",{"type":397,"tag":1037,"props":6187,"children":6188},{},[6189],{"type":403,"value":6190},"通过 eval 执行表达式语句",{"type":397,"tag":1015,"props":6192,"children":6193},{},[6194,6198,6203,6208],{"type":397,"tag":1037,"props":6195,"children":6196},{},[6197],{"type":403,"value":1558},{"type":397,"tag":1037,"props":6199,"children":6200},{},[6201],{"type":403,"value":6202},".js 文件",{"type":397,"tag":1037,"props":6204,"children":6205},{},[6206],{"type":403,"value":6207},"块和块级作用域",{"type":397,"tag":1037,"props":6209,"children":6210},{},[6211],{"type":403,"value":6212},"eval()",{"type":397,"tag":1015,"props":6214,"children":6215},{},[6216,6220,6225,6230],{"type":397,"tag":1037,"props":6217,"children":6218},{},[6219],{"type":403,"value":2343},{"type":397,"tag":1037,"props":6221,"children":6222},{},[6223],{"type":403,"value":6224},".mjs 文件",{"type":397,"tag":1037,"props":6226,"children":6227},{},[6228],{"type":403,"value":6229},"import、export、require()",{"type":397,"tag":1037,"props":6231,"children":6232},{},[6233],{"type":403,"value":6234},"import().then()",{"type":397,"tag":411,"props":6236,"children":6237},{},[6238],{"type":403,"value":6239},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":397,"tag":411,"props":6241,"children":6242},{},[6243],{"type":403,"value":6244},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":397,"tag":411,"props":6246,"children":6247},{},[6248],{"type":403,"value":6249},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":397,"tag":411,"props":6251,"children":6252},{},[6253,6255,6260],{"type":403,"value":6254},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":397,"tag":433,"props":6256,"children":6257},{},[6258],{"type":403,"value":6259},"1,2,3",{"type":403,"value":6261}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":397,"tag":411,"props":6263,"children":6264},{},[6265],{"type":403,"value":6266},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":397,"tag":411,"props":6268,"children":6269},{},[6270],{"type":403,"value":6271},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":397,"tag":411,"props":6273,"children":6274},{},[6275],{"type":403,"value":6276},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":397,"tag":411,"props":6278,"children":6279},{},[6280],{"type":403,"value":6281},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":397,"tag":405,"props":6283,"children":6285},{"id":6284},"声明",[6286],{"type":403,"value":6284},{"type":397,"tag":411,"props":6288,"children":6289},{},[6290,6292,6303],{"type":403,"value":6291},"除了 const 和 namespace",{"type":397,"tag":490,"props":6293,"children":6294},{},[6295],{"type":397,"tag":494,"props":6296,"children":6300},{"href":6297,"ariaDescribedBy":6298,"dataFootnoteRef":391,"id":6299},"#user-content-fn-namespace",[498],"user-content-fnref-namespace",[6301],{"type":403,"value":6302},"4",{"type":403,"value":6304}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":397,"tag":422,"props":6306,"children":6308},{"className":655,"code":6307,"language":657,"meta":391,"style":391},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6309],{"type":397,"tag":429,"props":6310,"children":6311},{"__ignoreMap":391},[6312,6340,6356,6388,6410],{"type":397,"tag":433,"props":6313,"children":6314},{"class":435,"line":436},[6315,6320,6324,6328,6332,6336],{"type":397,"tag":433,"props":6316,"children":6317},{"style":463},[6318],{"type":403,"value":6319},"!",{"type":397,"tag":433,"props":6321,"children":6322},{"style":667},[6323],{"type":403,"value":687},{"type":397,"tag":433,"props":6325,"children":6326},{"style":990},[6327],{"type":403,"value":1318},{"type":397,"tag":433,"props":6329,"children":6330},{"style":679},[6331],{"type":403,"value":2018},{"type":397,"tag":433,"props":6333,"children":6334},{"style":673},[6335],{"type":403,"value":1041},{"type":397,"tag":433,"props":6337,"children":6338},{"style":673},[6339],{"type":403,"value":1333},{"type":397,"tag":433,"props":6341,"children":6342},{"class":435,"line":726},[6343,6347,6351],{"type":397,"tag":433,"props":6344,"children":6345},{"style":667},[6346],{"type":403,"value":2766},{"type":397,"tag":433,"props":6348,"children":6349},{"style":463},[6350],{"type":403,"value":1356},{"type":397,"tag":433,"props":6352,"children":6353},{"style":695},[6354],{"type":403,"value":6355}," 100\n",{"type":397,"tag":433,"props":6357,"children":6358},{"class":435,"line":1372},[6359,6363,6367,6371,6375,6379,6383],{"type":397,"tag":433,"props":6360,"children":6361},{"style":667},[6362],{"type":403,"value":1378},{"type":397,"tag":433,"props":6364,"children":6365},{"style":673},[6366],{"type":403,"value":676},{"type":397,"tag":433,"props":6368,"children":6369},{"style":679},[6370],{"type":403,"value":1387},{"type":397,"tag":433,"props":6372,"children":6373},{"style":1390},[6374],{"type":403,"value":687},{"type":397,"tag":433,"props":6376,"children":6377},{"style":667},[6378],{"type":403,"value":1718},{"type":397,"tag":433,"props":6380,"children":6381},{"style":1390},[6382],{"type":403,"value":717},{"type":397,"tag":433,"props":6384,"children":6385},{"style":720},[6386],{"type":403,"value":6387},"// [Function ...]\n",{"type":397,"tag":433,"props":6389,"children":6390},{"class":435,"line":1413},[6391,6396,6400,6405],{"type":397,"tag":433,"props":6392,"children":6393},{"style":4030},[6394],{"type":403,"value":6395},"  arguments",{"type":397,"tag":433,"props":6397,"children":6398},{"style":463},[6399],{"type":403,"value":1356},{"type":397,"tag":433,"props":6401,"children":6402},{"style":1390},[6403],{"type":403,"value":6404}," [] ",{"type":397,"tag":433,"props":6406,"children":6407},{"style":720},[6408],{"type":403,"value":6409},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":397,"tag":433,"props":6411,"children":6412},{"class":435,"line":1422},[6413,6417],{"type":397,"tag":433,"props":6414,"children":6415},{"style":673},[6416],{"type":403,"value":1666},{"type":397,"tag":433,"props":6418,"children":6419},{"style":667},[6420],{"type":403,"value":6421},"())\n",{"type":397,"tag":411,"props":6423,"children":6424},{},[6425],{"type":403,"value":6426},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":397,"tag":422,"props":6428,"children":6430},{"className":655,"code":6429,"language":657,"meta":391,"style":391},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6431],{"type":397,"tag":429,"props":6432,"children":6433},{"__ignoreMap":391},[6434,6442,6461,6487,6515,6553],{"type":397,"tag":433,"props":6435,"children":6436},{"class":435,"line":436},[6437],{"type":397,"tag":433,"props":6438,"children":6439},{"style":720},[6440],{"type":403,"value":6441},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":397,"tag":433,"props":6443,"children":6444},{"class":435,"line":726},[6445,6449,6453,6457],{"type":397,"tag":433,"props":6446,"children":6447},{"style":990},[6448],{"type":403,"value":1318},{"type":397,"tag":433,"props":6450,"children":6451},{"style":679},[6452],{"type":403,"value":2018},{"type":397,"tag":433,"props":6454,"children":6455},{"style":673},[6456],{"type":403,"value":1041},{"type":397,"tag":433,"props":6458,"children":6459},{"style":673},[6460],{"type":403,"value":1333},{"type":397,"tag":433,"props":6462,"children":6463},{"class":435,"line":1372},[6464,6469,6473,6478,6482],{"type":397,"tag":433,"props":6465,"children":6466},{"style":673},[6467],{"type":403,"value":6468},"  {",{"type":397,"tag":433,"props":6470,"children":6471},{"style":990},[6472],{"type":403,"value":1318},{"type":397,"tag":433,"props":6474,"children":6475},{"style":679},[6476],{"type":403,"value":6477}," x",{"type":397,"tag":433,"props":6479,"children":6480},{"style":673},[6481],{"type":403,"value":1328},{"type":397,"tag":433,"props":6483,"children":6484},{"style":673},[6485],{"type":403,"value":6486}," {}};\n",{"type":397,"tag":433,"props":6488,"children":6489},{"class":435,"line":1413},[6490,6494,6498,6502,6507,6511],{"type":397,"tag":433,"props":6491,"children":6492},{"style":1845},[6493],{"type":403,"value":2766},{"type":397,"tag":433,"props":6495,"children":6496},{"style":673},[6497],{"type":403,"value":1852},{"type":397,"tag":433,"props":6499,"children":6500},{"style":990},[6501],{"type":403,"value":1446},{"type":397,"tag":433,"props":6503,"children":6504},{"style":679},[6505],{"type":403,"value":6506}," y",{"type":397,"tag":433,"props":6508,"children":6509},{"style":673},[6510],{"type":403,"value":1328},{"type":397,"tag":433,"props":6512,"children":6513},{"style":673},[6514],{"type":403,"value":3126},{"type":397,"tag":433,"props":6516,"children":6517},{"class":435,"line":1422},[6518,6523,6527,6532,6536,6540,6545,6549],{"type":397,"tag":433,"props":6519,"children":6520},{"style":1696},[6521],{"type":403,"value":6522},"  if",{"type":397,"tag":433,"props":6524,"children":6525},{"style":1390},[6526],{"type":403,"value":1925},{"type":397,"tag":433,"props":6528,"children":6529},{"style":829},[6530],{"type":403,"value":6531},"true",{"type":397,"tag":433,"props":6533,"children":6534},{"style":1390},[6535],{"type":403,"value":717},{"type":397,"tag":433,"props":6537,"children":6538},{"style":990},[6539],{"type":403,"value":1318},{"type":397,"tag":433,"props":6541,"children":6542},{"style":679},[6543],{"type":403,"value":6544}," z",{"type":397,"tag":433,"props":6546,"children":6547},{"style":673},[6548],{"type":403,"value":1328},{"type":397,"tag":433,"props":6550,"children":6551},{"style":673},[6552],{"type":403,"value":3126},{"type":397,"tag":433,"props":6554,"children":6555},{"class":435,"line":1457},[6556],{"type":397,"tag":433,"props":6557,"children":6558},{"style":673},[6559],{"type":403,"value":1419},{"type":397,"tag":405,"props":6561,"children":6563},{"id":6562},"语句与代码分块",[6564],{"type":403,"value":6562},{"type":397,"tag":411,"props":6566,"children":6567},{},[6568],{"type":403,"value":6569},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":397,"tag":411,"props":6571,"children":6572},{},[6573],{"type":403,"value":6574},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":397,"tag":411,"props":6576,"children":6577},{},[6578,6580,6591],{"type":403,"value":6579},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":397,"tag":490,"props":6581,"children":6582},{},[6583],{"type":397,"tag":494,"props":6584,"children":6588},{"href":6585,"ariaDescribedBy":6586,"dataFootnoteRef":391,"id":6587},"#user-content-fn-iterationenv",[498],"user-content-fnref-iterationenv",[6589],{"type":403,"value":6590},"5",{"type":403,"value":6592},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":397,"tag":411,"props":6594,"children":6595},{},[6596],{"type":403,"value":6597},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":397,"tag":411,"props":6599,"children":6600},{},[6601],{"type":403,"value":6602},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":397,"tag":422,"props":6604,"children":6606},{"className":655,"code":6605,"language":657,"meta":391,"style":391},"eval(`if (true) ; else ;`) // undefined\n",[6607],{"type":397,"tag":429,"props":6608,"children":6609},{"__ignoreMap":391},[6610],{"type":397,"tag":433,"props":6611,"children":6612},{"class":435,"line":436},[6613,6618,6622,6627,6632,6636,6640],{"type":397,"tag":433,"props":6614,"children":6615},{"style":679},[6616],{"type":403,"value":6617},"eval",{"type":397,"tag":433,"props":6619,"children":6620},{"style":667},[6621],{"type":403,"value":687},{"type":397,"tag":433,"props":6623,"children":6624},{"style":446},[6625],{"type":403,"value":6626},"`",{"type":397,"tag":433,"props":6628,"children":6629},{"style":452},[6630],{"type":403,"value":6631},"if (true) ; else ;",{"type":397,"tag":433,"props":6633,"children":6634},{"style":446},[6635],{"type":403,"value":6626},{"type":397,"tag":433,"props":6637,"children":6638},{"style":667},[6639],{"type":403,"value":717},{"type":397,"tag":433,"props":6641,"children":6642},{"style":720},[6643],{"type":403,"value":956},{"type":397,"tag":405,"props":6645,"children":6647},{"id":6646},"组织形式分块的方法",[6648],{"type":403,"value":6646},{"type":397,"tag":411,"props":6650,"children":6651},{},[6652],{"type":403,"value":6653},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":397,"tag":411,"props":6655,"children":6656},{},[6657],{"type":403,"value":6658},"数据声明语句中存在块级作用域，如：",{"type":397,"tag":422,"props":6660,"children":6662},{"className":655,"code":6661,"language":657,"meta":391,"style":391},"const x = 1, y = x\nconsole.log(y) // 1\n",[6663],{"type":397,"tag":429,"props":6664,"children":6665},{"__ignoreMap":391},[6666,6701],{"type":397,"tag":433,"props":6667,"children":6668},{"class":435,"line":436},[6669,6673,6677,6681,6685,6689,6693,6697],{"type":397,"tag":433,"props":6670,"children":6671},{"style":990},[6672],{"type":403,"value":5791},{"type":397,"tag":433,"props":6674,"children":6675},{"style":1426},[6676],{"type":403,"value":6477},{"type":397,"tag":433,"props":6678,"children":6679},{"style":463},[6680],{"type":403,"value":1356},{"type":397,"tag":433,"props":6682,"children":6683},{"style":695},[6684],{"type":403,"value":1802},{"type":397,"tag":433,"props":6686,"children":6687},{"style":673},[6688],{"type":403,"value":703},{"type":397,"tag":433,"props":6690,"children":6691},{"style":1426},[6692],{"type":403,"value":6506},{"type":397,"tag":433,"props":6694,"children":6695},{"style":463},[6696],{"type":403,"value":1356},{"type":397,"tag":433,"props":6698,"children":6699},{"style":667},[6700],{"type":403,"value":998},{"type":397,"tag":433,"props":6702,"children":6703},{"class":435,"line":726},[6704,6708,6712,6716,6721],{"type":397,"tag":433,"props":6705,"children":6706},{"style":667},[6707],{"type":403,"value":5016},{"type":397,"tag":433,"props":6709,"children":6710},{"style":673},[6711],{"type":403,"value":676},{"type":397,"tag":433,"props":6713,"children":6714},{"style":679},[6715],{"type":403,"value":1387},{"type":397,"tag":433,"props":6717,"children":6718},{"style":667},[6719],{"type":403,"value":6720},"(y) ",{"type":397,"tag":433,"props":6722,"children":6723},{"style":720},[6724],{"type":403,"value":6725},"// 1\n",{"type":397,"tag":411,"props":6727,"children":6728},{},[6729],{"type":403,"value":6730},"表达式级别的作用域只存在于 eval 调用中。",{"type":397,"tag":411,"props":6732,"children":6733},{},[6734],{"type":403,"value":6735},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":397,"tag":422,"props":6737,"children":6739},{"className":655,"code":6738,"language":657,"meta":391,"style":391},"if (1) let x = 1\n",[6740],{"type":397,"tag":429,"props":6741,"children":6742},{"__ignoreMap":391},[6743],{"type":397,"tag":433,"props":6744,"children":6745},{"class":435,"line":436},[6746,6751,6755,6759,6763,6767,6771,6775],{"type":397,"tag":433,"props":6747,"children":6748},{"style":1696},[6749],{"type":403,"value":6750},"if",{"type":397,"tag":433,"props":6752,"children":6753},{"style":667},[6754],{"type":403,"value":1925},{"type":397,"tag":433,"props":6756,"children":6757},{"style":695},[6758],{"type":403,"value":502},{"type":397,"tag":433,"props":6760,"children":6761},{"style":667},[6762],{"type":403,"value":717},{"type":397,"tag":433,"props":6764,"children":6765},{"style":990},[6766],{"type":403,"value":993},{"type":397,"tag":433,"props":6768,"children":6769},{"style":667},[6770],{"type":403,"value":951},{"type":397,"tag":433,"props":6772,"children":6773},{"style":463},[6774],{"type":403,"value":1867},{"type":397,"tag":433,"props":6776,"children":6777},{"style":695},[6778],{"type":403,"value":6779}," 1\n",{"type":397,"tag":411,"props":6781,"children":6782},{},[6783],{"type":403,"value":6784},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":397,"tag":411,"props":6786,"children":6787},{},[6788],{"type":403,"value":6789},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":397,"tag":411,"props":6791,"children":6792},{},[6793],{"type":403,"value":6794},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":397,"tag":511,"props":6796,"children":6797},{},[6798,6803,6808],{"type":397,"tag":515,"props":6799,"children":6800},{},[6801],{"type":403,"value":6802},"词法作用域互不相交。",{"type":397,"tag":515,"props":6804,"children":6805},{},[6806],{"type":403,"value":6807},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":397,"tag":515,"props":6809,"children":6810},{},[6811],{"type":403,"value":6812},"高级别流程变更语句可以跨越低级别的作用域。",{"type":397,"tag":411,"props":6814,"children":6815},{},[6816],{"type":403,"value":6817},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":397,"tag":405,"props":6819,"children":6821},{"id":6820},"层次结构程序设计",[6822],{"type":403,"value":6820},{"type":397,"tag":411,"props":6824,"children":6825},{},[6826],{"type":403,"value":6827},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":397,"tag":422,"props":6829,"children":6831},{"className":655,"code":6830,"language":657,"meta":391,"style":391},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6832],{"type":397,"tag":429,"props":6833,"children":6834},{"__ignoreMap":391},[6835,6874],{"type":397,"tag":433,"props":6836,"children":6837},{"class":435,"line":436},[6838,6842,6847,6851,6856,6860,6865,6869],{"type":397,"tag":433,"props":6839,"children":6840},{"style":990},[6841],{"type":403,"value":5791},{"type":397,"tag":433,"props":6843,"children":6844},{"style":1426},[6845],{"type":403,"value":6846}," method",{"type":397,"tag":433,"props":6848,"children":6849},{"style":463},[6850],{"type":403,"value":1356},{"type":397,"tag":433,"props":6852,"children":6853},{"style":667},[6854],{"type":403,"value":6855}," obj[Object",{"type":397,"tag":433,"props":6857,"children":6858},{"style":673},[6859],{"type":403,"value":676},{"type":397,"tag":433,"props":6861,"children":6862},{"style":667},[6863],{"type":403,"value":6864},"getPropertySymbols[",{"type":397,"tag":433,"props":6866,"children":6867},{"style":695},[6868],{"type":403,"value":698},{"type":397,"tag":433,"props":6870,"children":6871},{"style":667},[6872],{"type":403,"value":6873},"]]\n",{"type":397,"tag":433,"props":6875,"children":6876},{"class":435,"line":726},[6877,6881,6885,6890],{"type":397,"tag":433,"props":6878,"children":6879},{"style":667},[6880],{"type":403,"value":3748},{"type":397,"tag":433,"props":6882,"children":6883},{"style":673},[6884],{"type":403,"value":676},{"type":397,"tag":433,"props":6886,"children":6887},{"style":679},[6888],{"type":403,"value":6889},"call",{"type":397,"tag":433,"props":6891,"children":6892},{"style":667},[6893],{"type":403,"value":6894},"(obj)\n",{"type":397,"tag":411,"props":6896,"children":6897},{},[6898],{"type":403,"value":6899},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":397,"tag":405,"props":6901,"children":6903},{"id":6902},"变量作用域",[6904],{"type":403,"value":6902},{"type":397,"tag":411,"props":6906,"children":6907},{},[6908],{"type":403,"value":6909},"变量作用域有三个特殊之处：",{"type":397,"tag":511,"props":6911,"children":6912},{},[6913,6918,6923],{"type":397,"tag":515,"props":6914,"children":6915},{},[6916],{"type":403,"value":6917},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":397,"tag":515,"props":6919,"children":6920},{},[6921],{"type":403,"value":6922},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":397,"tag":515,"props":6924,"children":6925},{},[6926],{"type":403,"value":6927},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":397,"tag":411,"props":6929,"children":6930},{},[6931],{"type":403,"value":6932},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":397,"tag":411,"props":6934,"children":6935},{},[6936],{"type":403,"value":6937},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":397,"tag":405,"props":6939,"children":6941},{"id":6940},"私有属性和私有字段的纷争",[6942],{"type":403,"value":6940},{"type":397,"tag":411,"props":6944,"children":6945},{},[6946],{"type":403,"value":6947},"(_　_)。゜zｚＺ",{"type":397,"tag":398,"props":6949,"children":6951},{"id":6950},"函数式语言特性",[6952],{"type":403,"value":6950},{"type":397,"tag":405,"props":6954,"children":6956},{"id":6955},"概述-1",[6957],{"type":403,"value":6053},{"type":397,"tag":411,"props":6959,"children":6960},{},[6961],{"type":403,"value":6962},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":397,"tag":411,"props":6964,"children":6965},{},[6966],{"type":403,"value":6967},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":397,"tag":405,"props":6969,"children":6971},{"id":6970},"js中的函数",[6972],{"type":403,"value":6973},"JS中的函数",{"type":397,"tag":411,"props":6975,"children":6976},{},[6977],{"type":403,"value":6978},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":397,"tag":511,"props":6980,"children":6981},{},[6982,6987,6992],{"type":397,"tag":515,"props":6983,"children":6984},{},[6985],{"type":403,"value":6986},"无法显式使用“use strict”切换到严格模式。",{"type":397,"tag":515,"props":6988,"children":6989},{},[6990],{"type":403,"value":6991},"不接受重名参数。",{"type":397,"tag":515,"props":6993,"children":6994},{},[6995],{"type":403,"value":6996},"形参和 arguments 之间将解除绑定关系。",{"type":397,"tag":411,"props":6998,"children":6999},{},[7000],{"type":403,"value":7001},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":397,"tag":422,"props":7003,"children":7005},{"className":655,"code":7004,"language":657,"meta":391,"style":391},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[7006],{"type":397,"tag":429,"props":7007,"children":7008},{"__ignoreMap":391},[7009,7053,7106,7113],{"type":397,"tag":433,"props":7010,"children":7011},{"class":435,"line":436},[7012,7016,7020,7024,7028,7032,7037,7041,7045,7049],{"type":397,"tag":433,"props":7013,"children":7014},{"style":990},[7015],{"type":403,"value":1318},{"type":397,"tag":433,"props":7017,"children":7018},{"style":679},[7019],{"type":403,"value":2018},{"type":397,"tag":433,"props":7021,"children":7022},{"style":673},[7023],{"type":403,"value":687},{"type":397,"tag":433,"props":7025,"children":7026},{"style":1619},[7027],{"type":403,"value":494},{"type":397,"tag":433,"props":7029,"children":7030},{"style":673},[7031],{"type":403,"value":703},{"type":397,"tag":433,"props":7033,"children":7034},{"style":1619},[7035],{"type":403,"value":7036}," b",{"type":397,"tag":433,"props":7038,"children":7039},{"style":463},[7040],{"type":403,"value":1356},{"type":397,"tag":433,"props":7042,"children":7043},{"style":695},[7044],{"type":403,"value":1802},{"type":397,"tag":433,"props":7046,"children":7047},{"style":673},[7048],{"type":403,"value":1627},{"type":397,"tag":433,"props":7050,"children":7051},{"style":673},[7052],{"type":403,"value":1333},{"type":397,"tag":433,"props":7054,"children":7055},{"class":435,"line":726},[7056,7060,7064,7068,7072,7076,7080,7085,7089,7094,7098,7102],{"type":397,"tag":433,"props":7057,"children":7058},{"style":667},[7059],{"type":403,"value":1378},{"type":397,"tag":433,"props":7061,"children":7062},{"style":673},[7063],{"type":403,"value":676},{"type":397,"tag":433,"props":7065,"children":7066},{"style":679},[7067],{"type":403,"value":1387},{"type":397,"tag":433,"props":7069,"children":7070},{"style":1390},[7071],{"type":403,"value":687},{"type":397,"tag":433,"props":7073,"children":7074},{"style":667},[7075],{"type":403,"value":1718},{"type":397,"tag":433,"props":7077,"children":7078},{"style":673},[7079],{"type":403,"value":676},{"type":397,"tag":433,"props":7081,"children":7082},{"style":1426},[7083],{"type":403,"value":7084},"length",{"type":397,"tag":433,"props":7086,"children":7087},{"style":673},[7088],{"type":403,"value":703},{"type":397,"tag":433,"props":7090,"children":7091},{"style":4030},[7092],{"type":403,"value":7093}," arguments",{"type":397,"tag":433,"props":7095,"children":7096},{"style":673},[7097],{"type":403,"value":676},{"type":397,"tag":433,"props":7099,"children":7100},{"style":1426},[7101],{"type":403,"value":7084},{"type":397,"tag":433,"props":7103,"children":7104},{"style":1390},[7105],{"type":403,"value":1410},{"type":397,"tag":433,"props":7107,"children":7108},{"class":435,"line":1372},[7109],{"type":397,"tag":433,"props":7110,"children":7111},{"style":673},[7112],{"type":403,"value":1419},{"type":397,"tag":433,"props":7114,"children":7115},{"class":435,"line":1413},[7116,7120,7124,7128,7132,7137,7141],{"type":397,"tag":433,"props":7117,"children":7118},{"style":679},[7119],{"type":403,"value":1718},{"type":397,"tag":433,"props":7121,"children":7122},{"style":667},[7123],{"type":403,"value":687},{"type":397,"tag":433,"props":7125,"children":7126},{"style":695},[7127],{"type":403,"value":502},{"type":397,"tag":433,"props":7129,"children":7130},{"style":673},[7131],{"type":403,"value":703},{"type":397,"tag":433,"props":7133,"children":7134},{"style":695},[7135],{"type":403,"value":7136}," 2",{"type":397,"tag":433,"props":7138,"children":7139},{"style":667},[7140],{"type":403,"value":717},{"type":397,"tag":433,"props":7142,"children":7143},{"style":720},[7144],{"type":403,"value":7145},"// 1，2\n",{"type":397,"tag":411,"props":7147,"children":7148},{},[7149,7151,7162],{"type":403,"value":7150},"表达式最后返回的是值而不是引用",{"type":397,"tag":490,"props":7152,"children":7153},{},[7154],{"type":397,"tag":494,"props":7155,"children":7159},{"href":7156,"ariaDescribedBy":7157,"dataFootnoteRef":391,"id":7158},"#user-content-fn-reference",[498],"user-content-fnref-reference",[7160],{"type":403,"value":7161},"6",{"type":403,"value":7163},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":397,"tag":422,"props":7165,"children":7167},{"className":655,"code":7166,"language":657,"meta":391,"style":391},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7168],{"type":397,"tag":429,"props":7169,"children":7170},{"__ignoreMap":391},[7171,7196,7215,7236,7252,7289,7296,7303,7340],{"type":397,"tag":433,"props":7172,"children":7173},{"class":435,"line":436},[7174,7179,7183,7188,7192],{"type":397,"tag":433,"props":7175,"children":7176},{"style":667},[7177],{"type":403,"value":7178},"window",{"type":397,"tag":433,"props":7180,"children":7181},{"style":673},[7182],{"type":403,"value":676},{"type":397,"tag":433,"props":7184,"children":7185},{"style":667},[7186],{"type":403,"value":7187},"x ",{"type":397,"tag":433,"props":7189,"children":7190},{"style":463},[7191],{"type":403,"value":1867},{"type":397,"tag":433,"props":7193,"children":7194},{"style":695},[7195],{"type":403,"value":6779},{"type":397,"tag":433,"props":7197,"children":7198},{"class":435,"line":726},[7199,7203,7207,7211],{"type":397,"tag":433,"props":7200,"children":7201},{"style":990},[7202],{"type":403,"value":5791},{"type":397,"tag":433,"props":7204,"children":7205},{"style":1426},[7206],{"type":403,"value":3218},{"type":397,"tag":433,"props":7208,"children":7209},{"style":463},[7210],{"type":403,"value":1356},{"type":397,"tag":433,"props":7212,"children":7213},{"style":673},[7214],{"type":403,"value":1333},{"type":397,"tag":433,"props":7216,"children":7217},{"class":435,"line":1372},[7218,7223,7227,7231],{"type":397,"tag":433,"props":7219,"children":7220},{"style":1390},[7221],{"type":403,"value":7222},"  x",{"type":397,"tag":433,"props":7224,"children":7225},{"style":673},[7226],{"type":403,"value":1852},{"type":397,"tag":433,"props":7228,"children":7229},{"style":695},[7230],{"type":403,"value":7136},{"type":397,"tag":433,"props":7232,"children":7233},{"style":673},[7234],{"type":403,"value":7235},",\n",{"type":397,"tag":433,"props":7237,"children":7238},{"class":435,"line":1413},[7239,7244,7248],{"type":397,"tag":433,"props":7240,"children":7241},{"style":2652},[7242],{"type":403,"value":7243},"  b",{"type":397,"tag":433,"props":7245,"children":7246},{"style":673},[7247],{"type":403,"value":1328},{"type":397,"tag":433,"props":7249,"children":7250},{"style":673},[7251],{"type":403,"value":1333},{"type":397,"tag":433,"props":7253,"children":7254},{"class":435,"line":1422},[7255,7260,7264,7268,7272,7277,7281,7285],{"type":397,"tag":433,"props":7256,"children":7257},{"style":667},[7258],{"type":403,"value":7259},"    console",{"type":397,"tag":433,"props":7261,"children":7262},{"style":673},[7263],{"type":403,"value":676},{"type":397,"tag":433,"props":7265,"children":7266},{"style":679},[7267],{"type":403,"value":1387},{"type":397,"tag":433,"props":7269,"children":7270},{"style":1390},[7271],{"type":403,"value":687},{"type":397,"tag":433,"props":7273,"children":7274},{"style":1339},[7275],{"type":403,"value":7276},"this",{"type":397,"tag":433,"props":7278,"children":7279},{"style":673},[7280],{"type":403,"value":676},{"type":397,"tag":433,"props":7282,"children":7283},{"style":667},[7284],{"type":403,"value":2663},{"type":397,"tag":433,"props":7286,"children":7287},{"style":1390},[7288],{"type":403,"value":1410},{"type":397,"tag":433,"props":7290,"children":7291},{"class":435,"line":1457},[7292],{"type":397,"tag":433,"props":7293,"children":7294},{"style":673},[7295],{"type":403,"value":2072},{"type":397,"tag":433,"props":7297,"children":7298},{"class":435,"line":1494},[7299],{"type":397,"tag":433,"props":7300,"children":7301},{"style":673},[7302],{"type":403,"value":1419},{"type":397,"tag":433,"props":7304,"children":7305},{"class":435,"line":1502},[7306,7310,7314,7318,7323,7327,7331,7335],{"type":397,"tag":433,"props":7307,"children":7308},{"style":667},[7309],{"type":403,"value":5016},{"type":397,"tag":433,"props":7311,"children":7312},{"style":673},[7313],{"type":403,"value":676},{"type":397,"tag":433,"props":7315,"children":7316},{"style":679},[7317],{"type":403,"value":1387},{"type":397,"tag":433,"props":7319,"children":7320},{"style":667},[7321],{"type":403,"value":7322},"(a",{"type":397,"tag":433,"props":7324,"children":7325},{"style":673},[7326],{"type":403,"value":676},{"type":397,"tag":433,"props":7328,"children":7329},{"style":679},[7330],{"type":403,"value":1351},{"type":397,"tag":433,"props":7332,"children":7333},{"style":667},[7334],{"type":403,"value":805},{"type":397,"tag":433,"props":7336,"children":7337},{"style":720},[7338],{"type":403,"value":7339},"// 2\n",{"type":397,"tag":433,"props":7341,"children":7342},{"class":435,"line":1529},[7343,7347,7351,7355,7360,7364,7368,7372,7376,7381],{"type":397,"tag":433,"props":7344,"children":7345},{"style":667},[7346],{"type":403,"value":5016},{"type":397,"tag":433,"props":7348,"children":7349},{"style":673},[7350],{"type":403,"value":676},{"type":397,"tag":433,"props":7352,"children":7353},{"style":679},[7354],{"type":403,"value":1387},{"type":397,"tag":433,"props":7356,"children":7357},{"style":667},[7358],{"type":403,"value":7359},"((",{"type":397,"tag":433,"props":7361,"children":7362},{"style":695},[7363],{"type":403,"value":698},{"type":397,"tag":433,"props":7365,"children":7366},{"style":673},[7367],{"type":403,"value":703},{"type":397,"tag":433,"props":7369,"children":7370},{"style":667},[7371],{"type":403,"value":3218},{"type":397,"tag":433,"props":7373,"children":7374},{"style":673},[7375],{"type":403,"value":676},{"type":397,"tag":433,"props":7377,"children":7378},{"style":667},[7379],{"type":403,"value":7380},"b)()) ",{"type":397,"tag":433,"props":7382,"children":7383},{"style":720},[7384],{"type":403,"value":6725},{"type":397,"tag":411,"props":7386,"children":7387},{},[7388],{"type":403,"value":7389},"具名函数在表达式中时不会声明标识符。",{"type":397,"tag":411,"props":7391,"children":7392},{},[7393],{"type":403,"value":7394},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":397,"tag":422,"props":7396,"children":7398},{"className":655,"code":7397,"language":657,"meta":391,"style":391},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7399],{"type":397,"tag":429,"props":7400,"children":7401},{"__ignoreMap":391},[7402,7421,7449,7464,7471,7499],{"type":397,"tag":433,"props":7403,"children":7404},{"class":435,"line":436},[7405,7409,7413,7417],{"type":397,"tag":433,"props":7406,"children":7407},{"style":990},[7408],{"type":403,"value":5791},{"type":397,"tag":433,"props":7410,"children":7411},{"style":1426},[7412],{"type":403,"value":3218},{"type":397,"tag":433,"props":7414,"children":7415},{"style":463},[7416],{"type":403,"value":1356},{"type":397,"tag":433,"props":7418,"children":7419},{"style":673},[7420],{"type":403,"value":1333},{"type":397,"tag":433,"props":7422,"children":7423},{"class":435,"line":726},[7424,7428,7432,7436,7440,7444],{"type":397,"tag":433,"props":7425,"children":7426},{"style":679},[7427],{"type":403,"value":7243},{"type":397,"tag":433,"props":7429,"children":7430},{"style":673},[7431],{"type":403,"value":1852},{"type":397,"tag":433,"props":7433,"children":7434},{"style":990},[7435],{"type":403,"value":1446},{"type":397,"tag":433,"props":7437,"children":7438},{"style":679},[7439],{"type":403,"value":2018},{"type":397,"tag":433,"props":7441,"children":7442},{"style":673},[7443],{"type":403,"value":1041},{"type":397,"tag":433,"props":7445,"children":7446},{"style":673},[7447],{"type":403,"value":7448}," {},\n",{"type":397,"tag":433,"props":7450,"children":7451},{"class":435,"line":1372},[7452,7456,7460],{"type":397,"tag":433,"props":7453,"children":7454},{"style":2652},[7455],{"type":403,"value":2766},{"type":397,"tag":433,"props":7457,"children":7458},{"style":673},[7459],{"type":403,"value":1041},{"type":397,"tag":433,"props":7461,"children":7462},{"style":673},[7463],{"type":403,"value":3126},{"type":397,"tag":433,"props":7465,"children":7466},{"class":435,"line":1413},[7467],{"type":397,"tag":433,"props":7468,"children":7469},{"style":673},[7470],{"type":403,"value":1419},{"type":397,"tag":433,"props":7472,"children":7473},{"class":435,"line":1422},[7474,7478,7482,7486,7490,7494],{"type":397,"tag":433,"props":7475,"children":7476},{"style":463},[7477],{"type":403,"value":1508},{"type":397,"tag":433,"props":7479,"children":7480},{"style":667},[7481],{"type":403,"value":3218},{"type":397,"tag":433,"props":7483,"children":7484},{"style":673},[7485],{"type":403,"value":676},{"type":397,"tag":433,"props":7487,"children":7488},{"style":679},[7489],{"type":403,"value":1351},{"type":397,"tag":433,"props":7491,"children":7492},{"style":667},[7493],{"type":403,"value":821},{"type":397,"tag":433,"props":7495,"children":7496},{"style":720},[7497],{"type":403,"value":7498},"// {}\n",{"type":397,"tag":433,"props":7500,"children":7501},{"class":435,"line":1457},[7502,7506,7510,7514,7518,7522],{"type":397,"tag":433,"props":7503,"children":7504},{"style":463},[7505],{"type":403,"value":1508},{"type":397,"tag":433,"props":7507,"children":7508},{"style":667},[7509],{"type":403,"value":3218},{"type":397,"tag":433,"props":7511,"children":7512},{"style":673},[7513],{"type":403,"value":676},{"type":397,"tag":433,"props":7515,"children":7516},{"style":679},[7517],{"type":403,"value":1718},{"type":397,"tag":433,"props":7519,"children":7520},{"style":667},[7521],{"type":403,"value":821},{"type":397,"tag":433,"props":7523,"children":7524},{"style":720},[7525],{"type":403,"value":3235},{"type":397,"tag":411,"props":7527,"children":7528},{},[7529],{"type":403,"value":7530},"方法的特性总结以下三点：",{"type":397,"tag":511,"props":7532,"children":7533},{},[7534,7539,7544],{"type":397,"tag":515,"props":7535,"children":7536},{},[7537],{"type":403,"value":7538},"不能作为构造器。",{"type":397,"tag":515,"props":7540,"children":7541},{},[7542],{"type":403,"value":7543},"除了生成器方法，没有内部原型。",{"type":397,"tag":515,"props":7545,"children":7546},{},[7547],{"type":403,"value":7548},"方法不能具名。",{"type":397,"tag":411,"props":7550,"children":7551},{},[7552],{"type":403,"value":7553},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":397,"tag":422,"props":7555,"children":7557},{"className":655,"code":7556,"language":657,"meta":391,"style":391},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7558],{"type":397,"tag":429,"props":7559,"children":7560},{"__ignoreMap":391},[7561],{"type":397,"tag":433,"props":7562,"children":7563},{"class":435,"line":436},[7564,7568,7572,7576,7581,7585,7589,7593,7597],{"type":397,"tag":433,"props":7565,"children":7566},{"style":667},[7567],{"type":403,"value":670},{"type":397,"tag":433,"props":7569,"children":7570},{"style":673},[7571],{"type":403,"value":676},{"type":397,"tag":433,"props":7573,"children":7574},{"style":679},[7575],{"type":403,"value":3636},{"type":397,"tag":433,"props":7577,"children":7578},{"style":667},[7579],{"type":403,"value":7580},"(boundFn",{"type":397,"tag":433,"props":7582,"children":7583},{"style":673},[7584],{"type":403,"value":703},{"type":397,"tag":433,"props":7586,"children":7587},{"style":667},[7588],{"type":403,"value":4107},{"type":397,"tag":433,"props":7590,"children":7591},{"style":673},[7592],{"type":403,"value":676},{"type":397,"tag":433,"props":7594,"children":7595},{"style":679},[7596],{"type":403,"value":5528},{"type":397,"tag":433,"props":7598,"children":7599},{"style":667},[7600],{"type":403,"value":7601},"(targetFn))\n",{"type":397,"tag":411,"props":7603,"children":7604},{},[7605],{"type":403,"value":7606},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":397,"tag":422,"props":7608,"children":7610},{"className":655,"code":7609,"language":657,"meta":391,"style":391},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7611],{"type":397,"tag":429,"props":7612,"children":7613},{"__ignoreMap":391},[7614,7633,7676,7683],{"type":397,"tag":433,"props":7615,"children":7616},{"class":435,"line":436},[7617,7621,7625,7629],{"type":397,"tag":433,"props":7618,"children":7619},{"style":990},[7620],{"type":403,"value":1318},{"type":397,"tag":433,"props":7622,"children":7623},{"style":679},[7624],{"type":403,"value":3218},{"type":397,"tag":433,"props":7626,"children":7627},{"style":673},[7628],{"type":403,"value":1328},{"type":397,"tag":433,"props":7630,"children":7631},{"style":673},[7632],{"type":403,"value":1333},{"type":397,"tag":433,"props":7634,"children":7635},{"class":435,"line":726},[7636,7640,7644,7648,7652,7656,7660,7664,7668,7672],{"type":397,"tag":433,"props":7637,"children":7638},{"style":667},[7639],{"type":403,"value":1378},{"type":397,"tag":433,"props":7641,"children":7642},{"style":673},[7643],{"type":403,"value":676},{"type":397,"tag":433,"props":7645,"children":7646},{"style":679},[7647],{"type":403,"value":1387},{"type":397,"tag":433,"props":7649,"children":7650},{"style":1390},[7651],{"type":403,"value":687},{"type":397,"tag":433,"props":7653,"children":7654},{"style":463},[7655],{"type":403,"value":1508},{"type":397,"tag":433,"props":7657,"children":7658},{"style":673},[7659],{"type":403,"value":676},{"type":397,"tag":433,"props":7661,"children":7662},{"style":1426},[7663],{"type":403,"value":5655},{"type":397,"tag":433,"props":7665,"children":7666},{"style":463},[7667],{"type":403,"value":1999},{"type":397,"tag":433,"props":7669,"children":7670},{"style":667},[7671],{"type":403,"value":3218},{"type":397,"tag":433,"props":7673,"children":7674},{"style":1390},[7675],{"type":403,"value":1410},{"type":397,"tag":433,"props":7677,"children":7678},{"class":435,"line":1372},[7679],{"type":397,"tag":433,"props":7680,"children":7681},{"style":673},[7682],{"type":403,"value":1419},{"type":397,"tag":433,"props":7684,"children":7685},{"class":435,"line":1413},[7686,7690,7694,7698,7702,7706,7711,7715,7720,7725],{"type":397,"tag":433,"props":7687,"children":7688},{"style":667},[7689],{"type":403,"value":5016},{"type":397,"tag":433,"props":7691,"children":7692},{"style":673},[7693],{"type":403,"value":676},{"type":397,"tag":433,"props":7695,"children":7696},{"style":679},[7697],{"type":403,"value":1387},{"type":397,"tag":433,"props":7699,"children":7700},{"style":667},[7701],{"type":403,"value":687},{"type":397,"tag":433,"props":7703,"children":7704},{"style":463},[7705],{"type":403,"value":1508},{"type":397,"tag":433,"props":7707,"children":7708},{"style":667},[7709],{"type":403,"value":7710}," (a",{"type":397,"tag":433,"props":7712,"children":7713},{"style":673},[7714],{"type":403,"value":676},{"type":397,"tag":433,"props":7716,"children":7717},{"style":679},[7718],{"type":403,"value":7719},"bind",{"type":397,"tag":433,"props":7721,"children":7722},{"style":667},[7723],{"type":403,"value":7724},"())) ",{"type":397,"tag":433,"props":7726,"children":7727},{"style":720},[7728],{"type":403,"value":767},{"type":397,"tag":411,"props":7730,"children":7731},{},[7732],{"type":403,"value":7733},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":397,"tag":411,"props":7735,"children":7736},{},[7737],{"type":403,"value":7738},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":397,"tag":422,"props":7740,"children":7742},{"className":655,"code":7741,"language":657,"meta":391,"style":391},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7743],{"type":397,"tag":429,"props":7744,"children":7745},{"__ignoreMap":391},[7746,7765,7786,7811,7841,7873,7901,7927,7955,7971,8023,8031,8038,8061,8068,8075],{"type":397,"tag":433,"props":7747,"children":7748},{"class":435,"line":436},[7749,7753,7757,7761],{"type":397,"tag":433,"props":7750,"children":7751},{"style":990},[7752],{"type":403,"value":5791},{"type":397,"tag":433,"props":7754,"children":7755},{"style":1426},[7756],{"type":403,"value":2633},{"type":397,"tag":433,"props":7758,"children":7759},{"style":463},[7760],{"type":403,"value":1356},{"type":397,"tag":433,"props":7762,"children":7763},{"style":673},[7764],{"type":403,"value":1333},{"type":397,"tag":433,"props":7766,"children":7767},{"class":435,"line":726},[7768,7773,7777,7782],{"type":397,"tag":433,"props":7769,"children":7770},{"style":1390},[7771],{"type":403,"value":7772},"  step",{"type":397,"tag":433,"props":7774,"children":7775},{"style":673},[7776],{"type":403,"value":1852},{"type":397,"tag":433,"props":7778,"children":7779},{"style":695},[7780],{"type":403,"value":7781}," 0",{"type":397,"tag":433,"props":7783,"children":7784},{"style":673},[7785],{"type":403,"value":7235},{"type":397,"tag":433,"props":7787,"children":7788},{"class":435,"line":1372},[7789,7794,7798,7803,7807],{"type":397,"tag":433,"props":7790,"children":7791},{"style":2652},[7792],{"type":403,"value":7793},"  run",{"type":397,"tag":433,"props":7795,"children":7796},{"style":673},[7797],{"type":403,"value":1925},{"type":397,"tag":433,"props":7799,"children":7800},{"style":1619},[7801],{"type":403,"value":7802},"init",{"type":397,"tag":433,"props":7804,"children":7805},{"style":673},[7806],{"type":403,"value":1627},{"type":397,"tag":433,"props":7808,"children":7809},{"style":673},[7810],{"type":403,"value":1333},{"type":397,"tag":433,"props":7812,"children":7813},{"class":435,"line":1413},[7814,7819,7825,7829,7833,7837],{"type":397,"tag":433,"props":7815,"children":7816},{"style":990},[7817],{"type":403,"value":7818},"    const",{"type":397,"tag":433,"props":7820,"children":7822},{"style":7821},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7823],{"type":403,"value":7824}," exec",{"type":397,"tag":433,"props":7826,"children":7827},{"style":463},[7828],{"type":403,"value":1356},{"type":397,"tag":433,"props":7830,"children":7831},{"style":1619},[7832],{"type":403,"value":6477},{"type":397,"tag":433,"props":7834,"children":7835},{"style":990},[7836],{"type":403,"value":5727},{"type":397,"tag":433,"props":7838,"children":7839},{"style":673},[7840],{"type":403,"value":1333},{"type":397,"tag":433,"props":7842,"children":7843},{"class":435,"line":1422},[7844,7848,7852,7856,7861,7865,7869],{"type":397,"tag":433,"props":7845,"children":7846},{"style":1696},[7847],{"type":403,"value":2232},{"type":397,"tag":433,"props":7849,"children":7850},{"style":1390},[7851],{"type":403,"value":1925},{"type":397,"tag":433,"props":7853,"children":7854},{"style":667},[7855],{"type":403,"value":2663},{"type":397,"tag":433,"props":7857,"children":7858},{"style":463},[7859],{"type":403,"value":7860}," >",{"type":397,"tag":433,"props":7862,"children":7863},{"style":695},[7864],{"type":403,"value":7781},{"type":397,"tag":433,"props":7866,"children":7867},{"style":1390},[7868],{"type":403,"value":717},{"type":397,"tag":433,"props":7870,"children":7871},{"style":673},[7872],{"type":403,"value":1742},{"type":397,"tag":433,"props":7874,"children":7875},{"class":435,"line":1457},[7876,7881,7885,7889,7893,7897],{"type":397,"tag":433,"props":7877,"children":7878},{"style":667},[7879],{"type":403,"value":7880},"        console",{"type":397,"tag":433,"props":7882,"children":7883},{"style":673},[7884],{"type":403,"value":676},{"type":397,"tag":433,"props":7886,"children":7887},{"style":679},[7888],{"type":403,"value":1387},{"type":397,"tag":433,"props":7890,"children":7891},{"style":1390},[7892],{"type":403,"value":687},{"type":397,"tag":433,"props":7894,"children":7895},{"style":667},[7896],{"type":403,"value":2663},{"type":397,"tag":433,"props":7898,"children":7899},{"style":1390},[7900],{"type":403,"value":1410},{"type":397,"tag":433,"props":7902,"children":7903},{"class":435,"line":1494},[7904,7909,7913,7918,7923],{"type":397,"tag":433,"props":7905,"children":7906},{"style":1339},[7907],{"type":403,"value":7908},"        this",{"type":397,"tag":433,"props":7910,"children":7911},{"style":673},[7912],{"type":403,"value":676},{"type":397,"tag":433,"props":7914,"children":7915},{"style":667},[7916],{"type":403,"value":7917},"step",{"type":397,"tag":433,"props":7919,"children":7920},{"style":463},[7921],{"type":403,"value":7922}," +=",{"type":397,"tag":433,"props":7924,"children":7925},{"style":695},[7926],{"type":403,"value":6779},{"type":397,"tag":433,"props":7928,"children":7929},{"class":435,"line":1502},[7930,7935,7939,7943,7947,7951],{"type":397,"tag":433,"props":7931,"children":7932},{"style":679},[7933],{"type":403,"value":7934},"        exec",{"type":397,"tag":433,"props":7936,"children":7937},{"style":1390},[7938],{"type":403,"value":687},{"type":397,"tag":433,"props":7940,"children":7941},{"style":667},[7942],{"type":403,"value":2663},{"type":397,"tag":433,"props":7944,"children":7945},{"style":463},[7946],{"type":403,"value":708},{"type":397,"tag":433,"props":7948,"children":7949},{"style":695},[7950],{"type":403,"value":1802},{"type":397,"tag":433,"props":7952,"children":7953},{"style":1390},[7954],{"type":403,"value":1410},{"type":397,"tag":433,"props":7956,"children":7957},{"class":435,"line":1529},[7958,7963,7967],{"type":397,"tag":433,"props":7959,"children":7960},{"style":673},[7961],{"type":403,"value":7962},"      }",{"type":397,"tag":433,"props":7964,"children":7965},{"style":1696},[7966],{"type":403,"value":5929},{"type":397,"tag":433,"props":7968,"children":7969},{"style":673},[7970],{"type":403,"value":1333},{"type":397,"tag":433,"props":7972,"children":7973},{"class":435,"line":2105},[7974,7978,7982,7986,7990,7994,7999,8003,8007,8011,8015,8019],{"type":397,"tag":433,"props":7975,"children":7976},{"style":667},[7977],{"type":403,"value":7880},{"type":397,"tag":433,"props":7979,"children":7980},{"style":673},[7981],{"type":403,"value":676},{"type":397,"tag":433,"props":7983,"children":7984},{"style":679},[7985],{"type":403,"value":1387},{"type":397,"tag":433,"props":7987,"children":7988},{"style":1390},[7989],{"type":403,"value":687},{"type":397,"tag":433,"props":7991,"children":7992},{"style":446},[7993],{"type":403,"value":460},{"type":397,"tag":433,"props":7995,"children":7996},{"style":452},[7997],{"type":403,"value":7998},"steps: ",{"type":397,"tag":433,"props":8000,"children":8001},{"style":446},[8002],{"type":403,"value":460},{"type":397,"tag":433,"props":8004,"children":8005},{"style":673},[8006],{"type":403,"value":703},{"type":397,"tag":433,"props":8008,"children":8009},{"style":1339},[8010],{"type":403,"value":3786},{"type":397,"tag":433,"props":8012,"children":8013},{"style":673},[8014],{"type":403,"value":676},{"type":397,"tag":433,"props":8016,"children":8017},{"style":667},[8018],{"type":403,"value":7917},{"type":397,"tag":433,"props":8020,"children":8021},{"style":1390},[8022],{"type":403,"value":1410},{"type":397,"tag":433,"props":8024,"children":8025},{"class":435,"line":2165},[8026],{"type":397,"tag":433,"props":8027,"children":8028},{"style":673},[8029],{"type":403,"value":8030},"      }\n",{"type":397,"tag":433,"props":8032,"children":8033},{"class":435,"line":2226},[8034],{"type":397,"tag":433,"props":8035,"children":8036},{"style":673},[8037],{"type":403,"value":2314},{"type":397,"tag":433,"props":8039,"children":8040},{"class":435,"line":2267},[8041,8045,8049,8053,8057],{"type":397,"tag":433,"props":8042,"children":8043},{"style":1696},[8044],{"type":403,"value":2730},{"type":397,"tag":433,"props":8046,"children":8047},{"style":679},[8048],{"type":403,"value":7824},{"type":397,"tag":433,"props":8050,"children":8051},{"style":1390},[8052],{"type":403,"value":687},{"type":397,"tag":433,"props":8054,"children":8055},{"style":667},[8056],{"type":403,"value":7802},{"type":397,"tag":433,"props":8058,"children":8059},{"style":1390},[8060],{"type":403,"value":1410},{"type":397,"tag":433,"props":8062,"children":8063},{"class":435,"line":2308},[8064],{"type":397,"tag":433,"props":8065,"children":8066},{"style":673},[8067],{"type":403,"value":2072},{"type":397,"tag":433,"props":8069,"children":8070},{"class":435,"line":2317},[8071],{"type":397,"tag":433,"props":8072,"children":8073},{"style":673},[8074],{"type":403,"value":1419},{"type":397,"tag":433,"props":8076,"children":8077},{"class":435,"line":2325},[8078,8083,8087,8092,8096,8101,8105],{"type":397,"tag":433,"props":8079,"children":8080},{"style":667},[8081],{"type":403,"value":8082},"obj",{"type":397,"tag":433,"props":8084,"children":8085},{"style":673},[8086],{"type":403,"value":676},{"type":397,"tag":433,"props":8088,"children":8089},{"style":679},[8090],{"type":403,"value":8091},"run",{"type":397,"tag":433,"props":8093,"children":8094},{"style":667},[8095],{"type":403,"value":687},{"type":397,"tag":433,"props":8097,"children":8098},{"style":695},[8099],{"type":403,"value":8100},"10",{"type":397,"tag":433,"props":8102,"children":8103},{"style":667},[8104],{"type":403,"value":717},{"type":397,"tag":433,"props":8106,"children":8107},{"style":720},[8108],{"type":403,"value":8109},"// steps: 10\n",{"type":397,"tag":405,"props":8111,"children":8113},{"id":8112},"函数的行为",[8114],{"type":403,"value":8112},{"type":397,"tag":411,"props":8116,"children":8117},{},[8118],{"type":403,"value":8119},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":397,"tag":411,"props":8121,"children":8122},{},[8123],{"type":403,"value":8124},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":397,"tag":411,"props":8126,"children":8127},{},[8128],{"type":403,"value":8129},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":397,"tag":411,"props":8131,"children":8132},{},[8133],{"type":403,"value":8134},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":397,"tag":422,"props":8136,"children":8138},{"className":655,"code":8137,"language":657,"meta":391,"style":391},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8139],{"type":397,"tag":429,"props":8140,"children":8141},{"__ignoreMap":391},[8142,8167,8179,8191,8203,8214,8231,8267,8274,8281,8305,8317,8364,8397,8442,8457,8493,8514,8522,8530,8539,8548],{"type":397,"tag":433,"props":8143,"children":8144},{"class":435,"line":436},[8145,8149,8154,8159,8163],{"type":397,"tag":433,"props":8146,"children":8147},{"style":990},[8148],{"type":403,"value":1318},{"type":397,"tag":433,"props":8150,"children":8151},{"style":463},[8152],{"type":403,"value":8153},"*",{"type":397,"tag":433,"props":8155,"children":8156},{"style":679},[8157],{"type":403,"value":8158}," GetThisDone",{"type":397,"tag":433,"props":8160,"children":8161},{"style":673},[8162],{"type":403,"value":1041},{"type":397,"tag":433,"props":8164,"children":8165},{"style":673},[8166],{"type":403,"value":1333},{"type":397,"tag":433,"props":8168,"children":8169},{"class":435,"line":726},[8170,8175],{"type":397,"tag":433,"props":8171,"children":8172},{"style":1696},[8173],{"type":403,"value":8174},"  try",{"type":397,"tag":433,"props":8176,"children":8177},{"style":673},[8178],{"type":403,"value":1333},{"type":397,"tag":433,"props":8180,"children":8181},{"class":435,"line":1372},[8182,8187],{"type":397,"tag":433,"props":8183,"children":8184},{"style":1696},[8185],{"type":403,"value":8186},"    yield",{"type":397,"tag":433,"props":8188,"children":8189},{"style":695},[8190],{"type":403,"value":6779},{"type":397,"tag":433,"props":8192,"children":8193},{"class":435,"line":1413},[8194,8198],{"type":397,"tag":433,"props":8195,"children":8196},{"style":1696},[8197],{"type":403,"value":8186},{"type":397,"tag":433,"props":8199,"children":8200},{"style":695},[8201],{"type":403,"value":8202}," 10\n",{"type":397,"tag":433,"props":8204,"children":8205},{"class":435,"line":1422},[8206,8210],{"type":397,"tag":433,"props":8207,"children":8208},{"style":1696},[8209],{"type":403,"value":8186},{"type":397,"tag":433,"props":8211,"children":8212},{"style":695},[8213],{"type":403,"value":6779},{"type":397,"tag":433,"props":8215,"children":8216},{"class":435,"line":1457},[8217,8222,8227],{"type":397,"tag":433,"props":8218,"children":8219},{"style":673},[8220],{"type":403,"value":8221},"  }",{"type":397,"tag":433,"props":8223,"children":8224},{"style":1696},[8225],{"type":403,"value":8226}," finally",{"type":397,"tag":433,"props":8228,"children":8229},{"style":673},[8230],{"type":403,"value":1333},{"type":397,"tag":433,"props":8232,"children":8233},{"class":435,"line":1494},[8234,8238,8242,8246,8250,8254,8259,8263],{"type":397,"tag":433,"props":8235,"children":8236},{"style":667},[8237],{"type":403,"value":7259},{"type":397,"tag":433,"props":8239,"children":8240},{"style":673},[8241],{"type":403,"value":676},{"type":397,"tag":433,"props":8243,"children":8244},{"style":679},[8245],{"type":403,"value":1387},{"type":397,"tag":433,"props":8247,"children":8248},{"style":1390},[8249],{"type":403,"value":687},{"type":397,"tag":433,"props":8251,"children":8252},{"style":446},[8253],{"type":403,"value":460},{"type":397,"tag":433,"props":8255,"children":8256},{"style":452},[8257],{"type":403,"value":8258},"done",{"type":397,"tag":433,"props":8260,"children":8261},{"style":446},[8262],{"type":403,"value":460},{"type":397,"tag":433,"props":8264,"children":8265},{"style":1390},[8266],{"type":403,"value":1410},{"type":397,"tag":433,"props":8268,"children":8269},{"class":435,"line":1502},[8270],{"type":397,"tag":433,"props":8271,"children":8272},{"style":673},[8273],{"type":403,"value":2072},{"type":397,"tag":433,"props":8275,"children":8276},{"class":435,"line":1529},[8277],{"type":397,"tag":433,"props":8278,"children":8279},{"style":673},[8280],{"type":403,"value":1419},{"type":397,"tag":433,"props":8282,"children":8283},{"class":435,"line":2105},[8284,8288,8293,8297,8301],{"type":397,"tag":433,"props":8285,"children":8286},{"style":990},[8287],{"type":403,"value":5791},{"type":397,"tag":433,"props":8289,"children":8290},{"style":1426},[8291],{"type":403,"value":8292}," get",{"type":397,"tag":433,"props":8294,"children":8295},{"style":463},[8296],{"type":403,"value":1356},{"type":397,"tag":433,"props":8298,"children":8299},{"style":679},[8300],{"type":403,"value":8158},{"type":397,"tag":433,"props":8302,"children":8303},{"style":667},[8304],{"type":403,"value":3335},{"type":397,"tag":433,"props":8306,"children":8307},{"class":435,"line":2165},[8308,8312],{"type":397,"tag":433,"props":8309,"children":8310},{"style":990},[8311],{"type":403,"value":993},{"type":397,"tag":433,"props":8313,"children":8314},{"style":667},[8315],{"type":403,"value":8316}," val\n",{"type":397,"tag":433,"props":8318,"children":8319},{"class":435,"line":2226},[8320,8325,8330,8334,8338,8342,8347,8351,8355,8360],{"type":397,"tag":433,"props":8321,"children":8322},{"style":1696},[8323],{"type":403,"value":8324},"while",{"type":397,"tag":433,"props":8326,"children":8327},{"style":667},[8328],{"type":403,"value":8329}," (val ",{"type":397,"tag":433,"props":8331,"children":8332},{"style":463},[8333],{"type":403,"value":1867},{"type":397,"tag":433,"props":8335,"children":8336},{"style":667},[8337],{"type":403,"value":8292},{"type":397,"tag":433,"props":8339,"children":8340},{"style":673},[8341],{"type":403,"value":676},{"type":397,"tag":433,"props":8343,"children":8344},{"style":679},[8345],{"type":403,"value":8346},"next",{"type":397,"tag":433,"props":8348,"children":8349},{"style":667},[8350],{"type":403,"value":1041},{"type":397,"tag":433,"props":8352,"children":8353},{"style":673},[8354],{"type":403,"value":676},{"type":397,"tag":433,"props":8356,"children":8357},{"style":667},[8358],{"type":403,"value":8359},"value) ",{"type":397,"tag":433,"props":8361,"children":8362},{"style":673},[8363],{"type":403,"value":1742},{"type":397,"tag":433,"props":8365,"children":8366},{"class":435,"line":2267},[8367,8371,8375,8380,8384,8389,8393],{"type":397,"tag":433,"props":8368,"children":8369},{"style":1696},[8370],{"type":403,"value":6522},{"type":397,"tag":433,"props":8372,"children":8373},{"style":1390},[8374],{"type":403,"value":1925},{"type":397,"tag":433,"props":8376,"children":8377},{"style":667},[8378],{"type":403,"value":8379},"val",{"type":397,"tag":433,"props":8381,"children":8382},{"style":463},[8383],{"type":403,"value":1953},{"type":397,"tag":433,"props":8385,"children":8386},{"style":695},[8387],{"type":403,"value":8388}," 10",{"type":397,"tag":433,"props":8390,"children":8391},{"style":1390},[8392],{"type":403,"value":717},{"type":397,"tag":433,"props":8394,"children":8395},{"style":673},[8396],{"type":403,"value":1742},{"type":397,"tag":433,"props":8398,"children":8399},{"class":435,"line":2308},[8400,8404,8408,8412,8416,8420,8425,8429,8433,8438],{"type":397,"tag":433,"props":8401,"children":8402},{"style":667},[8403],{"type":403,"value":7259},{"type":397,"tag":433,"props":8405,"children":8406},{"style":673},[8407],{"type":403,"value":676},{"type":397,"tag":433,"props":8409,"children":8410},{"style":679},[8411],{"type":403,"value":1387},{"type":397,"tag":433,"props":8413,"children":8414},{"style":1390},[8415],{"type":403,"value":687},{"type":397,"tag":433,"props":8417,"children":8418},{"style":446},[8419],{"type":403,"value":460},{"type":397,"tag":433,"props":8421,"children":8422},{"style":452},[8423],{"type":403,"value":8424},"right val:",{"type":397,"tag":433,"props":8426,"children":8427},{"style":446},[8428],{"type":403,"value":460},{"type":397,"tag":433,"props":8430,"children":8431},{"style":673},[8432],{"type":403,"value":703},{"type":397,"tag":433,"props":8434,"children":8435},{"style":667},[8436],{"type":403,"value":8437}," val",{"type":397,"tag":433,"props":8439,"children":8440},{"style":1390},[8441],{"type":403,"value":1410},{"type":397,"tag":433,"props":8443,"children":8444},{"class":435,"line":2317},[8445,8449,8453],{"type":397,"tag":433,"props":8446,"children":8447},{"style":673},[8448],{"type":403,"value":8221},{"type":397,"tag":433,"props":8450,"children":8451},{"style":1696},[8452],{"type":403,"value":5929},{"type":397,"tag":433,"props":8454,"children":8455},{"style":673},[8456],{"type":403,"value":1333},{"type":397,"tag":433,"props":8458,"children":8459},{"class":435,"line":2325},[8460,8464,8468,8472,8476,8480,8485,8489],{"type":397,"tag":433,"props":8461,"children":8462},{"style":667},[8463],{"type":403,"value":7259},{"type":397,"tag":433,"props":8465,"children":8466},{"style":673},[8467],{"type":403,"value":676},{"type":397,"tag":433,"props":8469,"children":8470},{"style":679},[8471],{"type":403,"value":1387},{"type":397,"tag":433,"props":8473,"children":8474},{"style":1390},[8475],{"type":403,"value":687},{"type":397,"tag":433,"props":8477,"children":8478},{"style":446},[8479],{"type":403,"value":460},{"type":397,"tag":433,"props":8481,"children":8482},{"style":452},[8483],{"type":403,"value":8484},"wrong val",{"type":397,"tag":433,"props":8486,"children":8487},{"style":446},[8488],{"type":403,"value":460},{"type":397,"tag":433,"props":8490,"children":8491},{"style":1390},[8492],{"type":403,"value":1410},{"type":397,"tag":433,"props":8494,"children":8495},{"class":435,"line":5999},[8496,8501,8505,8510],{"type":397,"tag":433,"props":8497,"children":8498},{"style":667},[8499],{"type":403,"value":8500},"    get",{"type":397,"tag":433,"props":8502,"children":8503},{"style":673},[8504],{"type":403,"value":676},{"type":397,"tag":433,"props":8506,"children":8507},{"style":679},[8508],{"type":403,"value":8509},"return",{"type":397,"tag":433,"props":8511,"children":8512},{"style":1390},[8513],{"type":403,"value":3335},{"type":397,"tag":433,"props":8515,"children":8517},{"class":435,"line":8516},18,[8518],{"type":397,"tag":433,"props":8519,"children":8520},{"style":673},[8521],{"type":403,"value":2072},{"type":397,"tag":433,"props":8523,"children":8525},{"class":435,"line":8524},19,[8526],{"type":397,"tag":433,"props":8527,"children":8528},{"style":673},[8529],{"type":403,"value":1419},{"type":397,"tag":433,"props":8531,"children":8533},{"class":435,"line":8532},20,[8534],{"type":397,"tag":433,"props":8535,"children":8536},{"style":720},[8537],{"type":403,"value":8538},"// right val: 1\n",{"type":397,"tag":433,"props":8540,"children":8542},{"class":435,"line":8541},21,[8543],{"type":397,"tag":433,"props":8544,"children":8545},{"style":720},[8546],{"type":403,"value":8547},"// wrong val\n",{"type":397,"tag":433,"props":8549,"children":8551},{"class":435,"line":8550},22,[8552],{"type":397,"tag":433,"props":8553,"children":8554},{"style":720},[8555],{"type":403,"value":8556},"// done\n",{"type":397,"tag":405,"props":8558,"children":8560},{"id":8559},"闭包",[8561],{"type":403,"value":8559},{"type":397,"tag":411,"props":8563,"children":8564},{},[8565],{"type":403,"value":8566},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":397,"tag":411,"props":8568,"children":8569},{},[8570],{"type":403,"value":8571},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":397,"tag":511,"props":8573,"children":8574},{},[8575,8580,8585],{"type":397,"tag":515,"props":8576,"children":8577},{},[8578],{"type":403,"value":8579},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":397,"tag":515,"props":8581,"children":8582},{},[8583],{"type":403,"value":8584},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":397,"tag":515,"props":8586,"children":8587},{},[8588],{"type":403,"value":8589},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":397,"tag":411,"props":8591,"children":8592},{},[8593],{"type":403,"value":8594},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":397,"tag":422,"props":8596,"children":8598},{"className":655,"code":8597,"language":657,"meta":391,"style":391},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8599],{"type":397,"tag":429,"props":8600,"children":8601},{"__ignoreMap":391},[8602,8621,8636,8643,8654],{"type":397,"tag":433,"props":8603,"children":8604},{"class":435,"line":436},[8605,8609,8613,8617],{"type":397,"tag":433,"props":8606,"children":8607},{"style":990},[8608],{"type":403,"value":1318},{"type":397,"tag":433,"props":8610,"children":8611},{"style":679},[8612],{"type":403,"value":2018},{"type":397,"tag":433,"props":8614,"children":8615},{"style":673},[8616],{"type":403,"value":1328},{"type":397,"tag":433,"props":8618,"children":8619},{"style":673},[8620],{"type":403,"value":1333},{"type":397,"tag":433,"props":8622,"children":8623},{"class":435,"line":726},[8624,8628,8632],{"type":397,"tag":433,"props":8625,"children":8626},{"style":667},[8627],{"type":403,"value":2766},{"type":397,"tag":433,"props":8629,"children":8630},{"style":463},[8631],{"type":403,"value":1356},{"type":397,"tag":433,"props":8633,"children":8634},{"style":695},[8635],{"type":403,"value":6779},{"type":397,"tag":433,"props":8637,"children":8638},{"class":435,"line":1372},[8639],{"type":397,"tag":433,"props":8640,"children":8641},{"style":673},[8642],{"type":403,"value":1419},{"type":397,"tag":433,"props":8644,"children":8645},{"class":435,"line":1413},[8646,8650],{"type":397,"tag":433,"props":8647,"children":8648},{"style":679},[8649],{"type":403,"value":1718},{"type":397,"tag":433,"props":8651,"children":8652},{"style":667},[8653],{"type":403,"value":3335},{"type":397,"tag":433,"props":8655,"children":8656},{"class":435,"line":1422},[8657,8661,8665,8669,8673,8677,8682],{"type":397,"tag":433,"props":8658,"children":8659},{"style":667},[8660],{"type":403,"value":5016},{"type":397,"tag":433,"props":8662,"children":8663},{"style":673},[8664],{"type":403,"value":676},{"type":397,"tag":433,"props":8666,"children":8667},{"style":679},[8668],{"type":403,"value":1387},{"type":397,"tag":433,"props":8670,"children":8671},{"style":667},[8672],{"type":403,"value":687},{"type":397,"tag":433,"props":8674,"children":8675},{"style":463},[8676],{"type":403,"value":946},{"type":397,"tag":433,"props":8678,"children":8679},{"style":667},[8680],{"type":403,"value":8681}," test) ",{"type":397,"tag":433,"props":8683,"children":8684},{"style":720},[8685],{"type":403,"value":8686},"// number\n",{"type":397,"tag":411,"props":8688,"children":8689},{},[8690],{"type":403,"value":8691},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":397,"tag":411,"props":8693,"children":8694},{},[8695],{"type":403,"value":8696},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":397,"tag":422,"props":8698,"children":8700},{"className":655,"code":8699,"language":657,"meta":391,"style":391},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8701],{"type":397,"tag":429,"props":8702,"children":8703},{"__ignoreMap":391},[8704,8740,8760,8777,8797,8820,8836,8843],{"type":397,"tag":433,"props":8705,"children":8706},{"class":435,"line":436},[8707,8711,8715,8719,8723,8728,8732,8736],{"type":397,"tag":433,"props":8708,"children":8709},{"style":990},[8710],{"type":403,"value":993},{"type":397,"tag":433,"props":8712,"children":8713},{"style":667},[8714],{"type":403,"value":3138},{"type":397,"tag":433,"props":8716,"children":8717},{"style":463},[8718],{"type":403,"value":1867},{"type":397,"tag":433,"props":8720,"children":8721},{"style":673},[8722],{"type":403,"value":1704},{"type":397,"tag":433,"props":8724,"children":8725},{"style":1390},[8726],{"type":403,"value":8727}," value",{"type":397,"tag":433,"props":8729,"children":8730},{"style":673},[8731],{"type":403,"value":1852},{"type":397,"tag":433,"props":8733,"children":8734},{"style":695},[8735],{"type":403,"value":502},{"type":397,"tag":433,"props":8737,"children":8738},{"style":673},[8739],{"type":403,"value":3165},{"type":397,"tag":433,"props":8741,"children":8742},{"class":435,"line":726},[8743,8747,8752,8756],{"type":397,"tag":433,"props":8744,"children":8745},{"style":990},[8746],{"type":403,"value":993},{"type":397,"tag":433,"props":8748,"children":8749},{"style":667},[8750],{"type":403,"value":8751}," b ",{"type":397,"tag":433,"props":8753,"children":8754},{"style":463},[8755],{"type":403,"value":1867},{"type":397,"tag":433,"props":8757,"children":8758},{"style":695},[8759],{"type":403,"value":6779},{"type":397,"tag":433,"props":8761,"children":8762},{"class":435,"line":1372},[8763,8768,8773],{"type":397,"tag":433,"props":8764,"children":8765},{"style":1696},[8766],{"type":403,"value":8767},"with",{"type":397,"tag":433,"props":8769,"children":8770},{"style":667},[8771],{"type":403,"value":8772}," (a) ",{"type":397,"tag":433,"props":8774,"children":8775},{"style":673},[8776],{"type":403,"value":1742},{"type":397,"tag":433,"props":8778,"children":8779},{"class":435,"line":1413},[8780,8785,8789,8793],{"type":397,"tag":433,"props":8781,"children":8782},{"style":990},[8783],{"type":403,"value":8784}," var",{"type":397,"tag":433,"props":8786,"children":8787},{"style":667},[8788],{"type":403,"value":8727},{"type":397,"tag":433,"props":8790,"children":8791},{"style":463},[8792],{"type":403,"value":1356},{"type":397,"tag":433,"props":8794,"children":8795},{"style":695},[8796],{"type":403,"value":6355},{"type":397,"tag":433,"props":8798,"children":8799},{"class":435,"line":1422},[8800,8804,8808,8812,8816],{"type":397,"tag":433,"props":8801,"children":8802},{"style":667},[8803],{"type":403,"value":3218},{"type":397,"tag":433,"props":8805,"children":8806},{"style":673},[8807],{"type":403,"value":676},{"type":397,"tag":433,"props":8809,"children":8810},{"style":667},[8811],{"type":403,"value":1351},{"type":397,"tag":433,"props":8813,"children":8814},{"style":463},[8815],{"type":403,"value":1356},{"type":397,"tag":433,"props":8817,"children":8818},{"style":695},[8819],{"type":403,"value":6779},{"type":397,"tag":433,"props":8821,"children":8822},{"class":435,"line":1457},[8823,8827,8831],{"type":397,"tag":433,"props":8824,"children":8825},{"style":667},[8826],{"type":403,"value":7036},{"type":397,"tag":433,"props":8828,"children":8829},{"style":463},[8830],{"type":403,"value":1356},{"type":397,"tag":433,"props":8832,"children":8833},{"style":695},[8834],{"type":403,"value":8835}," 2\n",{"type":397,"tag":433,"props":8837,"children":8838},{"class":435,"line":1494},[8839],{"type":397,"tag":433,"props":8840,"children":8841},{"style":673},[8842],{"type":403,"value":1419},{"type":397,"tag":433,"props":8844,"children":8845},{"class":435,"line":1502},[8846,8850,8854,8858,8862,8866,8870,8874,8879],{"type":397,"tag":433,"props":8847,"children":8848},{"style":667},[8849],{"type":403,"value":5016},{"type":397,"tag":433,"props":8851,"children":8852},{"style":673},[8853],{"type":403,"value":676},{"type":397,"tag":433,"props":8855,"children":8856},{"style":679},[8857],{"type":403,"value":1387},{"type":397,"tag":433,"props":8859,"children":8860},{"style":667},[8861],{"type":403,"value":7322},{"type":397,"tag":433,"props":8863,"children":8864},{"style":673},[8865],{"type":403,"value":703},{"type":397,"tag":433,"props":8867,"children":8868},{"style":667},[8869],{"type":403,"value":7036},{"type":397,"tag":433,"props":8871,"children":8872},{"style":673},[8873],{"type":403,"value":703},{"type":397,"tag":433,"props":8875,"children":8876},{"style":667},[8877],{"type":403,"value":8878}," value) ",{"type":397,"tag":433,"props":8880,"children":8881},{"style":720},[8882],{"type":403,"value":8883},"// { value:100, b:2 }, 1, undefined\n",{"type":397,"tag":411,"props":8885,"children":8886},{},[8887],{"type":403,"value":8888},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":397,"tag":411,"props":8890,"children":8891},{},[8892],{"type":403,"value":8893},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":397,"tag":411,"props":8895,"children":8896},{},[8897],{"type":403,"value":8898},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":397,"tag":411,"props":8900,"children":8901},{},[8902],{"type":403,"value":8903},"闭包内标识符系统的优先级规则：",{"type":397,"tag":511,"props":8905,"children":8906},{},[8907,8912,8917],{"type":397,"tag":515,"props":8908,"children":8909},{},[8910],{"type":403,"value":8911},"内部函数声明 > 函数参数名列表",{"type":397,"tag":515,"props":8913,"children":8914},{},[8915],{"type":403,"value":8916},"参数中的 arguments 名字 > 函数的 arguments",{"type":397,"tag":515,"props":8918,"children":8919},{},[8920],{"type":403,"value":8921},"var 声明的名字如果已存在，则不再创建新变量",{"type":397,"tag":411,"props":8923,"children":8924},{},[8925],{"type":403,"value":8926},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":397,"tag":398,"props":8928,"children":8930},{"id":8929},"动态语言特性",[8931],{"type":403,"value":8929},{"type":397,"tag":405,"props":8933,"children":8935},{"id":8934},"概述-2",[8936],{"type":403,"value":6053},{"type":397,"tag":411,"props":8938,"children":8939},{},[8940],{"type":403,"value":8941},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":397,"tag":411,"props":8943,"children":8944},{},[8945],{"type":403,"value":8946},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":397,"tag":405,"props":8948,"children":8950},{"id":8949},"对象与值类型之间的转换",[8951],{"type":403,"value":8949},{"type":397,"tag":411,"props":8953,"children":8954},{},[8955],{"type":403,"value":8956},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":397,"tag":422,"props":8958,"children":8960},{"className":655,"code":8959,"language":657,"meta":391,"style":391},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8961],{"type":397,"tag":429,"props":8962,"children":8963},{"__ignoreMap":391},[8964,9012,9035,9043,9087,9094],{"type":397,"tag":433,"props":8965,"children":8966},{"class":435,"line":436},[8967,8971,8976,8980,8984,8988,8992,8996,9000,9004,9008],{"type":397,"tag":433,"props":8968,"children":8969},{"style":990},[8970],{"type":403,"value":2628},{"type":397,"tag":433,"props":8972,"children":8973},{"style":7821},[8974],{"type":403,"value":8975}," toString",{"type":397,"tag":433,"props":8977,"children":8978},{"style":463},[8979],{"type":403,"value":1356},{"type":397,"tag":433,"props":8981,"children":8982},{"style":673},[8983],{"type":403,"value":1328},{"type":397,"tag":433,"props":8985,"children":8986},{"style":990},[8987],{"type":403,"value":5727},{"type":397,"tag":433,"props":8989,"children":8990},{"style":667},[8991],{"type":403,"value":2035},{"type":397,"tag":433,"props":8993,"children":8994},{"style":673},[8995],{"type":403,"value":676},{"type":397,"tag":433,"props":8997,"children":8998},{"style":679},[8999],{"type":403,"value":1387},{"type":397,"tag":433,"props":9001,"children":9002},{"style":667},[9003],{"type":403,"value":687},{"type":397,"tag":433,"props":9005,"children":9006},{"style":695},[9007],{"type":403,"value":502},{"type":397,"tag":433,"props":9009,"children":9010},{"style":667},[9011],{"type":403,"value":1410},{"type":397,"tag":433,"props":9013,"children":9014},{"class":435,"line":726},[9015,9019,9023,9027,9031],{"type":397,"tag":433,"props":9016,"children":9017},{"style":1696},[9018],{"type":403,"value":8767},{"type":397,"tag":433,"props":9020,"children":9021},{"style":667},[9022],{"type":403,"value":1925},{"type":397,"tag":433,"props":9024,"children":9025},{"style":695},[9026],{"type":403,"value":502},{"type":397,"tag":433,"props":9028,"children":9029},{"style":667},[9030],{"type":403,"value":717},{"type":397,"tag":433,"props":9032,"children":9033},{"style":673},[9034],{"type":403,"value":1742},{"type":397,"tag":433,"props":9036,"children":9037},{"class":435,"line":1372},[9038],{"type":397,"tag":433,"props":9039,"children":9040},{"style":720},[9041],{"type":403,"value":9042},"  // equal to (1).toString = ...\n",{"type":397,"tag":433,"props":9044,"children":9045},{"class":435,"line":1413},[9046,9051,9055,9059,9063,9067,9071,9075,9079,9083],{"type":397,"tag":433,"props":9047,"children":9048},{"style":679},[9049],{"type":403,"value":9050},"  toString",{"type":397,"tag":433,"props":9052,"children":9053},{"style":463},[9054],{"type":403,"value":1356},{"type":397,"tag":433,"props":9056,"children":9057},{"style":673},[9058],{"type":403,"value":1328},{"type":397,"tag":433,"props":9060,"children":9061},{"style":990},[9062],{"type":403,"value":5727},{"type":397,"tag":433,"props":9064,"children":9065},{"style":667},[9066],{"type":403,"value":2035},{"type":397,"tag":433,"props":9068,"children":9069},{"style":673},[9070],{"type":403,"value":676},{"type":397,"tag":433,"props":9072,"children":9073},{"style":679},[9074],{"type":403,"value":1387},{"type":397,"tag":433,"props":9076,"children":9077},{"style":1390},[9078],{"type":403,"value":687},{"type":397,"tag":433,"props":9080,"children":9081},{"style":695},[9082],{"type":403,"value":530},{"type":397,"tag":433,"props":9084,"children":9085},{"style":1390},[9086],{"type":403,"value":1410},{"type":397,"tag":433,"props":9088,"children":9089},{"class":435,"line":1422},[9090],{"type":397,"tag":433,"props":9091,"children":9092},{"style":673},[9093],{"type":403,"value":1419},{"type":397,"tag":433,"props":9095,"children":9096},{"class":435,"line":1457},[9097,9101,9105,9109,9113,9118,9122],{"type":397,"tag":433,"props":9098,"children":9099},{"style":667},[9100],{"type":403,"value":5016},{"type":397,"tag":433,"props":9102,"children":9103},{"style":673},[9104],{"type":403,"value":676},{"type":397,"tag":433,"props":9106,"children":9107},{"style":679},[9108],{"type":403,"value":1387},{"type":397,"tag":433,"props":9110,"children":9111},{"style":667},[9112],{"type":403,"value":687},{"type":397,"tag":433,"props":9114,"children":9115},{"style":679},[9116],{"type":403,"value":9117},"toString",{"type":397,"tag":433,"props":9119,"children":9120},{"style":667},[9121],{"type":403,"value":805},{"type":397,"tag":433,"props":9123,"children":9124},{"style":720},[9125],{"type":403,"value":6725},{"type":397,"tag":411,"props":9127,"children":9128},{},[9129],{"type":403,"value":9130},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":397,"tag":411,"props":9132,"children":9133},{},[9134],{"type":403,"value":9135},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":397,"tag":422,"props":9137,"children":9139},{"className":655,"code":9138,"language":657,"meta":391,"style":391},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9140],{"type":397,"tag":429,"props":9141,"children":9142},{"__ignoreMap":391},[9143,9185,9228],{"type":397,"tag":433,"props":9144,"children":9145},{"class":435,"line":436},[9146,9151,9155,9159,9163,9168,9172,9176,9180],{"type":397,"tag":433,"props":9147,"children":9148},{"style":2815},[9149],{"type":403,"value":9150},"String",{"type":397,"tag":433,"props":9152,"children":9153},{"style":673},[9154],{"type":403,"value":676},{"type":397,"tag":433,"props":9156,"children":9157},{"style":1426},[9158],{"type":403,"value":2826},{"type":397,"tag":433,"props":9160,"children":9161},{"style":673},[9162],{"type":403,"value":676},{"type":397,"tag":433,"props":9164,"children":9165},{"style":679},[9166],{"type":403,"value":9167},"valueOf",{"type":397,"tag":433,"props":9169,"children":9170},{"style":463},[9171],{"type":403,"value":1356},{"type":397,"tag":433,"props":9173,"children":9174},{"style":673},[9175],{"type":403,"value":1328},{"type":397,"tag":433,"props":9177,"children":9178},{"style":990},[9179],{"type":403,"value":5727},{"type":397,"tag":433,"props":9181,"children":9182},{"style":695},[9183],{"type":403,"value":9184}," 0\n",{"type":397,"tag":433,"props":9186,"children":9187},{"class":435,"line":726},[9188,9192,9196,9200,9204,9208,9212,9216,9220,9224],{"type":397,"tag":433,"props":9189,"children":9190},{"style":667},[9191],{"type":403,"value":5016},{"type":397,"tag":433,"props":9193,"children":9194},{"style":673},[9195],{"type":403,"value":676},{"type":397,"tag":433,"props":9197,"children":9198},{"style":679},[9199],{"type":403,"value":1387},{"type":397,"tag":433,"props":9201,"children":9202},{"style":667},[9203],{"type":403,"value":687},{"type":397,"tag":433,"props":9205,"children":9206},{"style":463},[9207],{"type":403,"value":692},{"type":397,"tag":433,"props":9209,"children":9210},{"style":446},[9211],{"type":403,"value":460},{"type":397,"tag":433,"props":9213,"children":9214},{"style":452},[9215],{"type":403,"value":502},{"type":397,"tag":433,"props":9217,"children":9218},{"style":446},[9219],{"type":403,"value":460},{"type":397,"tag":433,"props":9221,"children":9222},{"style":667},[9223],{"type":403,"value":717},{"type":397,"tag":433,"props":9225,"children":9226},{"style":720},[9227],{"type":403,"value":6725},{"type":397,"tag":433,"props":9229,"children":9230},{"class":435,"line":1372},[9231,9235,9239,9243,9247,9252,9256,9260,9264,9268,9272,9277],{"type":397,"tag":433,"props":9232,"children":9233},{"style":667},[9234],{"type":403,"value":5016},{"type":397,"tag":433,"props":9236,"children":9237},{"style":673},[9238],{"type":403,"value":676},{"type":397,"tag":433,"props":9240,"children":9241},{"style":679},[9242],{"type":403,"value":1387},{"type":397,"tag":433,"props":9244,"children":9245},{"style":667},[9246],{"type":403,"value":687},{"type":397,"tag":433,"props":9248,"children":9249},{"style":463},[9250],{"type":403,"value":9251},"+new",{"type":397,"tag":433,"props":9253,"children":9254},{"style":679},[9255],{"type":403,"value":4107},{"type":397,"tag":433,"props":9257,"children":9258},{"style":667},[9259],{"type":403,"value":687},{"type":397,"tag":433,"props":9261,"children":9262},{"style":446},[9263],{"type":403,"value":460},{"type":397,"tag":433,"props":9265,"children":9266},{"style":452},[9267],{"type":403,"value":502},{"type":397,"tag":433,"props":9269,"children":9270},{"style":446},[9271],{"type":403,"value":460},{"type":397,"tag":433,"props":9273,"children":9274},{"style":667},[9275],{"type":403,"value":9276},")) ",{"type":397,"tag":433,"props":9278,"children":9279},{"style":720},[9280],{"type":403,"value":9281},"// 0\n",{"type":397,"tag":411,"props":9283,"children":9284},{},[9285],{"type":403,"value":9286},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":397,"tag":422,"props":9288,"children":9290},{"className":655,"code":9289,"language":657,"meta":391,"style":391},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9291],{"type":397,"tag":429,"props":9292,"children":9293},{"__ignoreMap":391},[9294,9331,9363,9395],{"type":397,"tag":433,"props":9295,"children":9296},{"class":435,"line":436},[9297,9301,9306,9310,9314,9318,9322,9327],{"type":397,"tag":433,"props":9298,"children":9299},{"style":990},[9300],{"type":403,"value":5791},{"type":397,"tag":433,"props":9302,"children":9303},{"style":1426},[9304],{"type":403,"value":9305}," f",{"type":397,"tag":433,"props":9307,"children":9308},{"style":463},[9309],{"type":403,"value":1356},{"type":397,"tag":433,"props":9311,"children":9312},{"style":463},[9313],{"type":403,"value":2835},{"type":397,"tag":433,"props":9315,"children":9316},{"style":679},[9317],{"type":403,"value":4107},{"type":397,"tag":433,"props":9319,"children":9320},{"style":667},[9321],{"type":403,"value":687},{"type":397,"tag":433,"props":9323,"children":9324},{"style":829},[9325],{"type":403,"value":9326},"false",{"type":397,"tag":433,"props":9328,"children":9329},{"style":667},[9330],{"type":403,"value":1410},{"type":397,"tag":433,"props":9332,"children":9333},{"class":435,"line":726},[9334,9338,9342,9346,9350,9354,9359],{"type":397,"tag":433,"props":9335,"children":9336},{"style":667},[9337],{"type":403,"value":5016},{"type":397,"tag":433,"props":9339,"children":9340},{"style":673},[9341],{"type":403,"value":676},{"type":397,"tag":433,"props":9343,"children":9344},{"style":679},[9345],{"type":403,"value":1387},{"type":397,"tag":433,"props":9347,"children":9348},{"style":667},[9349],{"type":403,"value":687},{"type":397,"tag":433,"props":9351,"children":9352},{"style":463},[9353],{"type":403,"value":692},{"type":397,"tag":433,"props":9355,"children":9356},{"style":667},[9357],{"type":403,"value":9358},"f) ",{"type":397,"tag":433,"props":9360,"children":9361},{"style":720},[9362],{"type":403,"value":9281},{"type":397,"tag":433,"props":9364,"children":9365},{"class":435,"line":1372},[9366,9370,9374,9378,9382,9387,9391],{"type":397,"tag":433,"props":9367,"children":9368},{"style":667},[9369],{"type":403,"value":5016},{"type":397,"tag":433,"props":9371,"children":9372},{"style":673},[9373],{"type":403,"value":676},{"type":397,"tag":433,"props":9375,"children":9376},{"style":679},[9377],{"type":403,"value":1387},{"type":397,"tag":433,"props":9379,"children":9380},{"style":667},[9381],{"type":403,"value":687},{"type":397,"tag":433,"props":9383,"children":9384},{"style":463},[9385],{"type":403,"value":9386},"!!",{"type":397,"tag":433,"props":9388,"children":9389},{"style":667},[9390],{"type":403,"value":9358},{"type":397,"tag":433,"props":9392,"children":9393},{"style":720},[9394],{"type":403,"value":767},{"type":397,"tag":433,"props":9396,"children":9397},{"class":435,"line":1413},[9398,9402,9406,9410,9414,9418,9423],{"type":397,"tag":433,"props":9399,"children":9400},{"style":667},[9401],{"type":403,"value":5016},{"type":397,"tag":433,"props":9403,"children":9404},{"style":673},[9405],{"type":403,"value":676},{"type":397,"tag":433,"props":9407,"children":9408},{"style":679},[9409],{"type":403,"value":1387},{"type":397,"tag":433,"props":9411,"children":9412},{"style":667},[9413],{"type":403,"value":687},{"type":397,"tag":433,"props":9415,"children":9416},{"style":679},[9417],{"type":403,"value":792},{"type":397,"tag":433,"props":9419,"children":9420},{"style":667},[9421],{"type":403,"value":9422},"(f)) ",{"type":397,"tag":433,"props":9424,"children":9425},{"style":720},[9426],{"type":403,"value":767},{"type":397,"tag":411,"props":9428,"children":9429},{},[9430],{"type":403,"value":9431},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":397,"tag":405,"props":9433,"children":9435},{"id":9434},"值类型的转换",[9436],{"type":403,"value":9434},{"type":397,"tag":411,"props":9438,"children":9439},{},[9440],{"type":403,"value":9441},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":397,"tag":411,"props":9443,"children":9444},{},[9445],{"type":403,"value":9446},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":397,"tag":411,"props":9448,"children":9449},{},[9450],{"type":403,"value":9451},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":397,"tag":422,"props":9453,"children":9455},{"className":655,"code":9454,"language":657,"meta":391,"style":391},"parseInt(1e35) // 1\n",[9456],{"type":397,"tag":429,"props":9457,"children":9458},{"__ignoreMap":391},[9459],{"type":397,"tag":433,"props":9460,"children":9461},{"class":435,"line":436},[9462,9467,9471,9476,9480],{"type":397,"tag":433,"props":9463,"children":9464},{"style":679},[9465],{"type":403,"value":9466},"parseInt",{"type":397,"tag":433,"props":9468,"children":9469},{"style":667},[9470],{"type":403,"value":687},{"type":397,"tag":433,"props":9472,"children":9473},{"style":695},[9474],{"type":403,"value":9475},"1e35",{"type":397,"tag":433,"props":9477,"children":9478},{"style":667},[9479],{"type":403,"value":717},{"type":397,"tag":433,"props":9481,"children":9482},{"style":720},[9483],{"type":403,"value":6725},{"type":397,"tag":411,"props":9485,"children":9486},{},[9487],{"type":403,"value":9488},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":397,"tag":422,"props":9490,"children":9492},{"className":655,"code":9491,"language":657,"meta":391,"style":391},"String() // ''\nString(undefined) // undefined\n",[9493],{"type":397,"tag":429,"props":9494,"children":9495},{"__ignoreMap":391},[9496,9512],{"type":397,"tag":433,"props":9497,"children":9498},{"class":435,"line":436},[9499,9503,9507],{"type":397,"tag":433,"props":9500,"children":9501},{"style":679},[9502],{"type":403,"value":9150},{"type":397,"tag":433,"props":9504,"children":9505},{"style":667},[9506],{"type":403,"value":821},{"type":397,"tag":433,"props":9508,"children":9509},{"style":720},[9510],{"type":403,"value":9511},"// ''\n",{"type":397,"tag":433,"props":9513,"children":9514},{"class":435,"line":726},[9515,9519,9523,9527,9531],{"type":397,"tag":433,"props":9516,"children":9517},{"style":679},[9518],{"type":403,"value":9150},{"type":397,"tag":433,"props":9520,"children":9521},{"style":667},[9522],{"type":403,"value":687},{"type":397,"tag":433,"props":9524,"children":9525},{"style":746},[9526],{"type":403,"value":4549},{"type":397,"tag":433,"props":9528,"children":9529},{"style":667},[9530],{"type":403,"value":717},{"type":397,"tag":433,"props":9532,"children":9533},{"style":720},[9534],{"type":403,"value":956},{"type":397,"tag":405,"props":9536,"children":9538},{"id":9537},"对象与数组的动态特性",[9539],{"type":403,"value":9537},{"type":397,"tag":411,"props":9541,"children":9542},{},[9543],{"type":403,"value":9544},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":397,"tag":422,"props":9546,"children":9548},{"className":655,"code":9547,"language":657,"meta":391,"style":391},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9549],{"type":397,"tag":429,"props":9550,"children":9551},{"__ignoreMap":391},[9552,9588,9613,9636,9660],{"type":397,"tag":433,"props":9553,"children":9554},{"class":435,"line":436},[9555,9559,9563,9567,9571,9576,9580,9584],{"type":397,"tag":433,"props":9556,"children":9557},{"style":990},[9558],{"type":403,"value":5791},{"type":397,"tag":433,"props":9560,"children":9561},{"style":1426},[9562],{"type":403,"value":3218},{"type":397,"tag":433,"props":9564,"children":9565},{"style":463},[9566],{"type":403,"value":1356},{"type":397,"tag":433,"props":9568,"children":9569},{"style":463},[9570],{"type":403,"value":2835},{"type":397,"tag":433,"props":9572,"children":9573},{"style":679},[9574],{"type":403,"value":9575}," Array",{"type":397,"tag":433,"props":9577,"children":9578},{"style":667},[9579],{"type":403,"value":687},{"type":397,"tag":433,"props":9581,"children":9582},{"style":695},[9583],{"type":403,"value":8100},{"type":397,"tag":433,"props":9585,"children":9586},{"style":667},[9587],{"type":403,"value":1410},{"type":397,"tag":433,"props":9589,"children":9590},{"class":435,"line":726},[9591,9596,9600,9605,9609],{"type":397,"tag":433,"props":9592,"children":9593},{"style":667},[9594],{"type":403,"value":9595},"a[",{"type":397,"tag":433,"props":9597,"children":9598},{"style":695},[9599],{"type":403,"value":502},{"type":397,"tag":433,"props":9601,"children":9602},{"style":667},[9603],{"type":403,"value":9604},"] ",{"type":397,"tag":433,"props":9606,"children":9607},{"style":463},[9608],{"type":403,"value":1867},{"type":397,"tag":433,"props":9610,"children":9611},{"style":695},[9612],{"type":403,"value":6779},{"type":397,"tag":433,"props":9614,"children":9615},{"class":435,"line":1372},[9616,9620,9624,9628,9632],{"type":397,"tag":433,"props":9617,"children":9618},{"style":667},[9619],{"type":403,"value":9595},{"type":397,"tag":433,"props":9621,"children":9622},{"style":695},[9623],{"type":403,"value":6302},{"type":397,"tag":433,"props":9625,"children":9626},{"style":667},[9627],{"type":403,"value":9604},{"type":397,"tag":433,"props":9629,"children":9630},{"style":463},[9631],{"type":403,"value":1867},{"type":397,"tag":433,"props":9633,"children":9634},{"style":695},[9635],{"type":403,"value":6779},{"type":397,"tag":433,"props":9637,"children":9638},{"class":435,"line":1413},[9639,9643,9648,9652,9656],{"type":397,"tag":433,"props":9640,"children":9641},{"style":667},[9642],{"type":403,"value":9595},{"type":397,"tag":433,"props":9644,"children":9645},{"style":695},[9646],{"type":403,"value":9647},"7",{"type":397,"tag":433,"props":9649,"children":9650},{"style":667},[9651],{"type":403,"value":9604},{"type":397,"tag":433,"props":9653,"children":9654},{"style":463},[9655],{"type":403,"value":1867},{"type":397,"tag":433,"props":9657,"children":9658},{"style":695},[9659],{"type":403,"value":6779},{"type":397,"tag":433,"props":9661,"children":9662},{"class":435,"line":1422},[9663,9667,9671,9676,9680,9684,9688,9693,9697,9702,9706,9711,9716,9720],{"type":397,"tag":433,"props":9664,"children":9665},{"style":667},[9666],{"type":403,"value":494},{"type":397,"tag":433,"props":9668,"children":9669},{"style":673},[9670],{"type":403,"value":676},{"type":397,"tag":433,"props":9672,"children":9673},{"style":679},[9674],{"type":403,"value":9675},"sort",{"type":397,"tag":433,"props":9677,"children":9678},{"style":667},[9679],{"type":403,"value":687},{"type":397,"tag":433,"props":9681,"children":9682},{"style":673},[9683],{"type":403,"value":1041},{"type":397,"tag":433,"props":9685,"children":9686},{"style":990},[9687],{"type":403,"value":5727},{"type":397,"tag":433,"props":9689,"children":9690},{"style":667},[9691],{"type":403,"value":9692}," Math",{"type":397,"tag":433,"props":9694,"children":9695},{"style":673},[9696],{"type":403,"value":676},{"type":397,"tag":433,"props":9698,"children":9699},{"style":679},[9700],{"type":403,"value":9701},"random",{"type":397,"tag":433,"props":9703,"children":9704},{"style":667},[9705],{"type":403,"value":821},{"type":397,"tag":433,"props":9707,"children":9708},{"style":463},[9709],{"type":403,"value":9710},"-",{"type":397,"tag":433,"props":9712,"children":9713},{"style":695},[9714],{"type":403,"value":9715}," 0.5",{"type":397,"tag":433,"props":9717,"children":9718},{"style":667},[9719],{"type":403,"value":717},{"type":397,"tag":433,"props":9721,"children":9722},{"style":720},[9723],{"type":403,"value":9724},"// [1, 1, 1, empty x 7]\n",{"type":397,"tag":411,"props":9726,"children":9727},{},[9728],{"type":403,"value":9729},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":397,"tag":411,"props":9731,"children":9732},{},[9733],{"type":403,"value":9734},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":397,"tag":405,"props":9736,"children":9738},{"id":9737},"重写",[9739],{"type":403,"value":9737},{"type":397,"tag":411,"props":9741,"children":9742},{},[9743],{"type":403,"value":9744},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":397,"tag":411,"props":9746,"children":9747},{},[9748],{"type":403,"value":9749},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":397,"tag":411,"props":9751,"children":9752},{},[9753],{"type":403,"value":9754},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":397,"tag":422,"props":9756,"children":9758},{"className":655,"code":9757,"language":657,"meta":391,"style":391},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9759],{"type":397,"tag":429,"props":9760,"children":9761},{"__ignoreMap":391},[9762,9803,9818,9839,9856,9863,9874,9897,9929,9964,10004,10044,10052,10108,10123,10171,10178,10185,10196,10219],{"type":397,"tag":433,"props":9763,"children":9764},{"class":435,"line":436},[9765,9769,9773,9777,9781,9785,9790,9794,9799],{"type":397,"tag":433,"props":9766,"children":9767},{"style":990},[9768],{"type":403,"value":5791},{"type":397,"tag":433,"props":9770,"children":9771},{"style":1426},[9772],{"type":403,"value":3218},{"type":397,"tag":433,"props":9774,"children":9775},{"style":463},[9776],{"type":403,"value":1356},{"type":397,"tag":433,"props":9778,"children":9779},{"style":667},[9780],{"type":403,"value":4107},{"type":397,"tag":433,"props":9782,"children":9783},{"style":673},[9784],{"type":403,"value":676},{"type":397,"tag":433,"props":9786,"children":9787},{"style":679},[9788],{"type":403,"value":9789},"defineProperties",{"type":397,"tag":433,"props":9791,"children":9792},{"style":667},[9793],{"type":403,"value":687},{"type":397,"tag":433,"props":9795,"children":9796},{"style":673},[9797],{"type":403,"value":9798},"{},",{"type":397,"tag":433,"props":9800,"children":9801},{"style":673},[9802],{"type":403,"value":1333},{"type":397,"tag":433,"props":9804,"children":9805},{"class":435,"line":726},[9806,9810,9814],{"type":397,"tag":433,"props":9807,"children":9808},{"style":1390},[9809],{"type":403,"value":2766},{"type":397,"tag":433,"props":9811,"children":9812},{"style":673},[9813],{"type":403,"value":1852},{"type":397,"tag":433,"props":9815,"children":9816},{"style":673},[9817],{"type":403,"value":1333},{"type":397,"tag":433,"props":9819,"children":9820},{"class":435,"line":1372},[9821,9826,9830,9835],{"type":397,"tag":433,"props":9822,"children":9823},{"style":1390},[9824],{"type":403,"value":9825},"    value",{"type":397,"tag":433,"props":9827,"children":9828},{"style":673},[9829],{"type":403,"value":1852},{"type":397,"tag":433,"props":9831,"children":9832},{"style":695},[9833],{"type":403,"value":9834}," 100",{"type":397,"tag":433,"props":9836,"children":9837},{"style":673},[9838],{"type":403,"value":7235},{"type":397,"tag":433,"props":9840,"children":9841},{"class":435,"line":1413},[9842,9847,9851],{"type":397,"tag":433,"props":9843,"children":9844},{"style":1390},[9845],{"type":403,"value":9846},"    configurable",{"type":397,"tag":433,"props":9848,"children":9849},{"style":673},[9850],{"type":403,"value":1852},{"type":397,"tag":433,"props":9852,"children":9853},{"style":829},[9854],{"type":403,"value":9855}," true\n",{"type":397,"tag":433,"props":9857,"children":9858},{"class":435,"line":1422},[9859],{"type":397,"tag":433,"props":9860,"children":9861},{"style":673},[9862],{"type":403,"value":2072},{"type":397,"tag":433,"props":9864,"children":9865},{"class":435,"line":1457},[9866,9870],{"type":397,"tag":433,"props":9867,"children":9868},{"style":673},[9869],{"type":403,"value":1666},{"type":397,"tag":433,"props":9871,"children":9872},{"style":667},[9873],{"type":403,"value":1410},{"type":397,"tag":433,"props":9875,"children":9876},{"class":435,"line":1494},[9877,9881,9885,9889,9893],{"type":397,"tag":433,"props":9878,"children":9879},{"style":667},[9880],{"type":403,"value":494},{"type":397,"tag":433,"props":9882,"children":9883},{"style":673},[9884],{"type":403,"value":676},{"type":397,"tag":433,"props":9886,"children":9887},{"style":667},[9888],{"type":403,"value":4146},{"type":397,"tag":433,"props":9890,"children":9891},{"style":463},[9892],{"type":403,"value":1867},{"type":397,"tag":433,"props":9894,"children":9895},{"style":695},[9896],{"type":403,"value":6779},{"type":397,"tag":433,"props":9898,"children":9899},{"class":435,"line":1502},[9900,9904,9908,9912,9916,9920,9924],{"type":397,"tag":433,"props":9901,"children":9902},{"style":667},[9903],{"type":403,"value":5016},{"type":397,"tag":433,"props":9905,"children":9906},{"style":673},[9907],{"type":403,"value":676},{"type":397,"tag":433,"props":9909,"children":9910},{"style":679},[9911],{"type":403,"value":1387},{"type":397,"tag":433,"props":9913,"children":9914},{"style":667},[9915],{"type":403,"value":7322},{"type":397,"tag":433,"props":9917,"children":9918},{"style":673},[9919],{"type":403,"value":676},{"type":397,"tag":433,"props":9921,"children":9922},{"style":667},[9923],{"type":403,"value":6030},{"type":397,"tag":433,"props":9925,"children":9926},{"style":720},[9927],{"type":403,"value":9928},"// 100\n",{"type":397,"tag":433,"props":9930,"children":9931},{"class":435,"line":1529},[9932,9936,9940,9944,9948,9952,9956,9960],{"type":397,"tag":433,"props":9933,"children":9934},{"style":990},[9935],{"type":403,"value":5791},{"type":397,"tag":433,"props":9937,"children":9938},{"style":1426},[9939],{"type":403,"value":7036},{"type":397,"tag":433,"props":9941,"children":9942},{"style":463},[9943],{"type":403,"value":1356},{"type":397,"tag":433,"props":9945,"children":9946},{"style":463},[9947],{"type":403,"value":2835},{"type":397,"tag":433,"props":9949,"children":9950},{"style":679},[9951],{"type":403,"value":5637},{"type":397,"tag":433,"props":9953,"children":9954},{"style":667},[9955],{"type":403,"value":7322},{"type":397,"tag":433,"props":9957,"children":9958},{"style":673},[9959],{"type":403,"value":703},{"type":397,"tag":433,"props":9961,"children":9962},{"style":673},[9963],{"type":403,"value":1333},{"type":397,"tag":433,"props":9965,"children":9966},{"class":435,"line":2105},[9967,9971,9975,9979,9983,9988,9992,9996,10000],{"type":397,"tag":433,"props":9968,"children":9969},{"style":2652},[9970],{"type":403,"value":2649},{"type":397,"tag":433,"props":9972,"children":9973},{"style":673},[9974],{"type":403,"value":1925},{"type":397,"tag":433,"props":9976,"children":9977},{"style":1619},[9978],{"type":403,"value":5655},{"type":397,"tag":433,"props":9980,"children":9981},{"style":673},[9982],{"type":403,"value":703},{"type":397,"tag":433,"props":9984,"children":9985},{"style":1619},[9986],{"type":403,"value":9987}," key",{"type":397,"tag":433,"props":9989,"children":9990},{"style":673},[9991],{"type":403,"value":703},{"type":397,"tag":433,"props":9993,"children":9994},{"style":1619},[9995],{"type":403,"value":8727},{"type":397,"tag":433,"props":9997,"children":9998},{"style":673},[9999],{"type":403,"value":1627},{"type":397,"tag":433,"props":10001,"children":10002},{"style":673},[10003],{"type":403,"value":1333},{"type":397,"tag":433,"props":10005,"children":10006},{"class":435,"line":2165},[10007,10011,10015,10020,10024,10028,10032,10036,10040],{"type":397,"tag":433,"props":10008,"children":10009},{"style":1696},[10010],{"type":403,"value":1986},{"type":397,"tag":433,"props":10012,"children":10013},{"style":1390},[10014],{"type":403,"value":1925},{"type":397,"tag":433,"props":10016,"children":10017},{"style":667},[10018],{"type":403,"value":10019},"key",{"type":397,"tag":433,"props":10021,"children":10022},{"style":463},[10023],{"type":403,"value":1999},{"type":397,"tag":433,"props":10025,"children":10026},{"style":446},[10027],{"type":403,"value":449},{"type":397,"tag":433,"props":10029,"children":10030},{"style":452},[10031],{"type":403,"value":1718},{"type":397,"tag":433,"props":10033,"children":10034},{"style":446},[10035],{"type":403,"value":460},{"type":397,"tag":433,"props":10037,"children":10038},{"style":1390},[10039],{"type":403,"value":717},{"type":397,"tag":433,"props":10041,"children":10042},{"style":673},[10043],{"type":403,"value":1742},{"type":397,"tag":433,"props":10045,"children":10046},{"class":435,"line":2226},[10047],{"type":397,"tag":433,"props":10048,"children":10049},{"style":720},[10050],{"type":403,"value":10051},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":397,"tag":433,"props":10053,"children":10054},{"class":435,"line":2267},[10055,10059,10063,10067,10072,10076,10080,10084,10088,10092,10096,10100,10104],{"type":397,"tag":433,"props":10056,"children":10057},{"style":1696},[10058],{"type":403,"value":5904},{"type":397,"tag":433,"props":10060,"children":10061},{"style":667},[10062],{"type":403,"value":5945},{"type":397,"tag":433,"props":10064,"children":10065},{"style":673},[10066],{"type":403,"value":676},{"type":397,"tag":433,"props":10068,"children":10069},{"style":679},[10070],{"type":403,"value":10071},"defineProperty",{"type":397,"tag":433,"props":10073,"children":10074},{"style":1390},[10075],{"type":403,"value":687},{"type":397,"tag":433,"props":10077,"children":10078},{"style":667},[10079],{"type":403,"value":5655},{"type":397,"tag":433,"props":10081,"children":10082},{"style":673},[10083],{"type":403,"value":703},{"type":397,"tag":433,"props":10085,"children":10086},{"style":667},[10087],{"type":403,"value":9987},{"type":397,"tag":433,"props":10089,"children":10090},{"style":673},[10091],{"type":403,"value":703},{"type":397,"tag":433,"props":10093,"children":10094},{"style":673},[10095],{"type":403,"value":1704},{"type":397,"tag":433,"props":10097,"children":10098},{"style":667},[10099],{"type":403,"value":8727},{"type":397,"tag":433,"props":10101,"children":10102},{"style":673},[10103],{"type":403,"value":1727},{"type":397,"tag":433,"props":10105,"children":10106},{"style":1390},[10107],{"type":403,"value":1410},{"type":397,"tag":433,"props":10109,"children":10110},{"class":435,"line":2308},[10111,10115,10119],{"type":397,"tag":433,"props":10112,"children":10113},{"style":673},[10114],{"type":403,"value":5924},{"type":397,"tag":433,"props":10116,"children":10117},{"style":1696},[10118],{"type":403,"value":5929},{"type":397,"tag":433,"props":10120,"children":10121},{"style":673},[10122],{"type":403,"value":1333},{"type":397,"tag":433,"props":10124,"children":10125},{"class":435,"line":2317},[10126,10130,10134,10138,10143,10147,10151,10155,10159,10163,10167],{"type":397,"tag":433,"props":10127,"children":10128},{"style":1696},[10129],{"type":403,"value":5904},{"type":397,"tag":433,"props":10131,"children":10132},{"style":667},[10133],{"type":403,"value":5945},{"type":397,"tag":433,"props":10135,"children":10136},{"style":673},[10137],{"type":403,"value":676},{"type":397,"tag":433,"props":10139,"children":10140},{"style":679},[10141],{"type":403,"value":10142},"set",{"type":397,"tag":433,"props":10144,"children":10145},{"style":1390},[10146],{"type":403,"value":687},{"type":397,"tag":433,"props":10148,"children":10149},{"style":667},[10150],{"type":403,"value":5655},{"type":397,"tag":433,"props":10152,"children":10153},{"style":673},[10154],{"type":403,"value":703},{"type":397,"tag":433,"props":10156,"children":10157},{"style":667},[10158],{"type":403,"value":9987},{"type":397,"tag":433,"props":10160,"children":10161},{"style":673},[10162],{"type":403,"value":703},{"type":397,"tag":433,"props":10164,"children":10165},{"style":667},[10166],{"type":403,"value":8727},{"type":397,"tag":433,"props":10168,"children":10169},{"style":1390},[10170],{"type":403,"value":1410},{"type":397,"tag":433,"props":10172,"children":10173},{"class":435,"line":2325},[10174],{"type":397,"tag":433,"props":10175,"children":10176},{"style":673},[10177],{"type":403,"value":2314},{"type":397,"tag":433,"props":10179,"children":10180},{"class":435,"line":5999},[10181],{"type":397,"tag":433,"props":10182,"children":10183},{"style":673},[10184],{"type":403,"value":2072},{"type":397,"tag":433,"props":10186,"children":10187},{"class":435,"line":8516},[10188,10192],{"type":397,"tag":433,"props":10189,"children":10190},{"style":673},[10191],{"type":403,"value":1666},{"type":397,"tag":433,"props":10193,"children":10194},{"style":667},[10195],{"type":403,"value":1410},{"type":397,"tag":433,"props":10197,"children":10198},{"class":435,"line":8524},[10199,10203,10207,10211,10215],{"type":397,"tag":433,"props":10200,"children":10201},{"style":667},[10202],{"type":403,"value":1351},{"type":397,"tag":433,"props":10204,"children":10205},{"style":673},[10206],{"type":403,"value":676},{"type":397,"tag":433,"props":10208,"children":10209},{"style":667},[10210],{"type":403,"value":4146},{"type":397,"tag":433,"props":10212,"children":10213},{"style":463},[10214],{"type":403,"value":1867},{"type":397,"tag":433,"props":10216,"children":10217},{"style":695},[10218],{"type":403,"value":6779},{"type":397,"tag":433,"props":10220,"children":10221},{"class":435,"line":8532},[10222,10226,10230,10234,10239,10243,10247],{"type":397,"tag":433,"props":10223,"children":10224},{"style":667},[10225],{"type":403,"value":5016},{"type":397,"tag":433,"props":10227,"children":10228},{"style":673},[10229],{"type":403,"value":676},{"type":397,"tag":433,"props":10231,"children":10232},{"style":679},[10233],{"type":403,"value":1387},{"type":397,"tag":433,"props":10235,"children":10236},{"style":667},[10237],{"type":403,"value":10238},"(b",{"type":397,"tag":433,"props":10240,"children":10241},{"style":673},[10242],{"type":403,"value":676},{"type":397,"tag":433,"props":10244,"children":10245},{"style":667},[10246],{"type":403,"value":6030},{"type":397,"tag":433,"props":10248,"children":10249},{"style":720},[10250],{"type":403,"value":6725},{"type":397,"tag":411,"props":10252,"children":10253},{},[10254],{"type":403,"value":10255},"自增自减运算符会隐式的转换操作数的类型。",{"type":397,"tag":411,"props":10257,"children":10258},{},[10259],{"type":403,"value":10260},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":397,"tag":422,"props":10262,"children":10264},{"className":655,"code":10263,"language":657,"meta":391,"style":391},"class a extends a {}\n",[10265],{"type":397,"tag":429,"props":10266,"children":10267},{"__ignoreMap":391},[10268],{"type":397,"tag":433,"props":10269,"children":10270},{"class":435,"line":436},[10271,10275,10279,10283,10287],{"type":397,"tag":433,"props":10272,"children":10273},{"style":990},[10274],{"type":403,"value":3539},{"type":397,"tag":433,"props":10276,"children":10277},{"style":3542},[10278],{"type":403,"value":3218},{"type":397,"tag":433,"props":10280,"children":10281},{"style":3562},[10282],{"type":403,"value":3565},{"type":397,"tag":433,"props":10284,"children":10285},{"style":3568},[10286],{"type":403,"value":3218},{"type":397,"tag":433,"props":10288,"children":10289},{"style":673},[10290],{"type":403,"value":3126},{"type":397,"tag":411,"props":10292,"children":10293},{},[10294],{"type":403,"value":10295},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":397,"tag":411,"props":10297,"children":10298},{},[10299],{"type":403,"value":10300},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":397,"tag":411,"props":10302,"children":10303},{},[10304],{"type":403,"value":10305},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":397,"tag":422,"props":10307,"children":10309},{"className":655,"code":10308,"language":657,"meta":391,"style":391},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10310],{"type":397,"tag":429,"props":10311,"children":10312},{"__ignoreMap":391},[10313,10366,10379,10386],{"type":397,"tag":433,"props":10314,"children":10315},{"class":435,"line":436},[10316,10320,10325,10329,10333,10338,10342,10346,10350,10354,10358,10362],{"type":397,"tag":433,"props":10317,"children":10318},{"style":1696},[10319],{"type":403,"value":8767},{"type":397,"tag":433,"props":10321,"children":10322},{"style":667},[10323],{"type":403,"value":10324}," (a ",{"type":397,"tag":433,"props":10326,"children":10327},{"style":463},[10328],{"type":403,"value":1867},{"type":397,"tag":433,"props":10330,"children":10331},{"style":673},[10332],{"type":403,"value":1704},{"type":397,"tag":433,"props":10334,"children":10335},{"style":1390},[10336],{"type":403,"value":10337}," undefined",{"type":397,"tag":433,"props":10339,"children":10340},{"style":673},[10341],{"type":403,"value":1852},{"type":397,"tag":433,"props":10343,"children":10344},{"style":446},[10345],{"type":403,"value":449},{"type":397,"tag":433,"props":10347,"children":10348},{"style":452},[10349],{"type":403,"value":1718},{"type":397,"tag":433,"props":10351,"children":10352},{"style":446},[10353],{"type":403,"value":460},{"type":397,"tag":433,"props":10355,"children":10356},{"style":673},[10357],{"type":403,"value":1727},{"type":397,"tag":433,"props":10359,"children":10360},{"style":667},[10361],{"type":403,"value":717},{"type":397,"tag":433,"props":10363,"children":10364},{"style":673},[10365],{"type":403,"value":1742},{"type":397,"tag":433,"props":10367,"children":10368},{"class":435,"line":726},[10369,10374],{"type":397,"tag":433,"props":10370,"children":10371},{"style":463},[10372],{"type":403,"value":10373},"  delete",{"type":397,"tag":433,"props":10375,"children":10376},{"style":746},[10377],{"type":403,"value":10378}," undefined\n",{"type":397,"tag":433,"props":10380,"children":10381},{"class":435,"line":1372},[10382],{"type":397,"tag":433,"props":10383,"children":10384},{"style":673},[10385],{"type":403,"value":1419},{"type":397,"tag":433,"props":10387,"children":10388},{"class":435,"line":1413},[10389,10393,10397,10401,10406],{"type":397,"tag":433,"props":10390,"children":10391},{"style":667},[10392],{"type":403,"value":5016},{"type":397,"tag":433,"props":10394,"children":10395},{"style":673},[10396],{"type":403,"value":676},{"type":397,"tag":433,"props":10398,"children":10399},{"style":679},[10400],{"type":403,"value":1387},{"type":397,"tag":433,"props":10402,"children":10403},{"style":667},[10404],{"type":403,"value":10405},"(a) ",{"type":397,"tag":433,"props":10407,"children":10408},{"style":720},[10409],{"type":403,"value":7498},{"type":397,"tag":405,"props":10411,"children":10413},{"id":10412},"动态绑定",[10414],{"type":403,"value":10412},{"type":397,"tag":411,"props":10416,"children":10417},{},[10418],{"type":403,"value":10419},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":397,"tag":422,"props":10421,"children":10423},{"className":655,"code":10422,"language":657,"meta":391,"style":391},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10424],{"type":397,"tag":429,"props":10425,"children":10426},{"__ignoreMap":391},[10427,10447,10467,10495,10503,10532,10540,10569,10577,10623,10631,10672,10679],{"type":397,"tag":433,"props":10428,"children":10429},{"class":435,"line":436},[10430,10434,10439,10443],{"type":397,"tag":433,"props":10431,"children":10432},{"style":990},[10433],{"type":403,"value":1318},{"type":397,"tag":433,"props":10435,"children":10436},{"style":679},[10437],{"type":403,"value":10438}," indirect",{"type":397,"tag":433,"props":10440,"children":10441},{"style":673},[10442],{"type":403,"value":1041},{"type":397,"tag":433,"props":10444,"children":10445},{"style":673},[10446],{"type":403,"value":1333},{"type":397,"tag":433,"props":10448,"children":10449},{"class":435,"line":726},[10450,10454,10458,10462],{"type":397,"tag":433,"props":10451,"children":10452},{"style":990},[10453],{"type":403,"value":3772},{"type":397,"tag":433,"props":10455,"children":10456},{"style":1426},[10457],{"type":403,"value":7824},{"type":397,"tag":433,"props":10459,"children":10460},{"style":463},[10461],{"type":403,"value":1356},{"type":397,"tag":433,"props":10463,"children":10464},{"style":667},[10465],{"type":403,"value":10466}," eval\n",{"type":397,"tag":433,"props":10468,"children":10469},{"class":435,"line":1372},[10470,10474,10479,10483,10487,10491],{"type":397,"tag":433,"props":10471,"children":10472},{"style":990},[10473],{"type":403,"value":3772},{"type":397,"tag":433,"props":10475,"children":10476},{"style":7821},[10477],{"type":403,"value":10478}," getEval",{"type":397,"tag":433,"props":10480,"children":10481},{"style":463},[10482],{"type":403,"value":1356},{"type":397,"tag":433,"props":10484,"children":10485},{"style":673},[10486],{"type":403,"value":1328},{"type":397,"tag":433,"props":10488,"children":10489},{"style":990},[10490],{"type":403,"value":5727},{"type":397,"tag":433,"props":10492,"children":10493},{"style":667},[10494],{"type":403,"value":10466},{"type":397,"tag":433,"props":10496,"children":10497},{"class":435,"line":1413},[10498],{"type":397,"tag":433,"props":10499,"children":10500},{"style":720},[10501],{"type":403,"value":10502},"  // 单值表达式\n",{"type":397,"tag":433,"props":10504,"children":10505},{"class":435,"line":1422},[10506,10511,10515,10519,10524,10528],{"type":397,"tag":433,"props":10507,"children":10508},{"style":679},[10509],{"type":403,"value":10510},"  exec",{"type":397,"tag":433,"props":10512,"children":10513},{"style":1390},[10514],{"type":403,"value":687},{"type":397,"tag":433,"props":10516,"children":10517},{"style":446},[10518],{"type":403,"value":460},{"type":397,"tag":433,"props":10520,"children":10521},{"style":452},[10522],{"type":403,"value":10523},"console.log(this === globalThis)",{"type":397,"tag":433,"props":10525,"children":10526},{"style":446},[10527],{"type":403,"value":460},{"type":397,"tag":433,"props":10529,"children":10530},{"style":1390},[10531],{"type":403,"value":1410},{"type":397,"tag":433,"props":10533,"children":10534},{"class":435,"line":1457},[10535],{"type":397,"tag":433,"props":10536,"children":10537},{"style":720},[10538],{"type":403,"value":10539},"  // 函数返回\n",{"type":397,"tag":433,"props":10541,"children":10542},{"class":435,"line":1494},[10543,10548,10553,10557,10561,10565],{"type":397,"tag":433,"props":10544,"children":10545},{"style":679},[10546],{"type":403,"value":10547},"  getEval",{"type":397,"tag":433,"props":10549,"children":10550},{"style":1390},[10551],{"type":403,"value":10552},"()(",{"type":397,"tag":433,"props":10554,"children":10555},{"style":446},[10556],{"type":403,"value":460},{"type":397,"tag":433,"props":10558,"children":10559},{"style":452},[10560],{"type":403,"value":10523},{"type":397,"tag":433,"props":10562,"children":10563},{"style":446},[10564],{"type":403,"value":460},{"type":397,"tag":433,"props":10566,"children":10567},{"style":1390},[10568],{"type":403,"value":1410},{"type":397,"tag":433,"props":10570,"children":10571},{"class":435,"line":1502},[10572],{"type":397,"tag":433,"props":10573,"children":10574},{"style":720},[10575],{"type":403,"value":10576},"  // 携带逗号运算符的分组运算符\n",{"type":397,"tag":433,"props":10578,"children":10579},{"class":435,"line":1529},[10580,10585,10589,10593,10597,10602,10607,10611,10615,10619],{"type":397,"tag":433,"props":10581,"children":10582},{"style":673},[10583],{"type":403,"value":10584},"  ;",{"type":397,"tag":433,"props":10586,"children":10587},{"style":1390},[10588],{"type":403,"value":687},{"type":397,"tag":433,"props":10590,"children":10591},{"style":695},[10592],{"type":403,"value":698},{"type":397,"tag":433,"props":10594,"children":10595},{"style":673},[10596],{"type":403,"value":703},{"type":397,"tag":433,"props":10598,"children":10599},{"style":667},[10600],{"type":403,"value":10601}," eval",{"type":397,"tag":433,"props":10603,"children":10604},{"style":1390},[10605],{"type":403,"value":10606},")(",{"type":397,"tag":433,"props":10608,"children":10609},{"style":446},[10610],{"type":403,"value":460},{"type":397,"tag":433,"props":10612,"children":10613},{"style":452},[10614],{"type":403,"value":10523},{"type":397,"tag":433,"props":10616,"children":10617},{"style":446},[10618],{"type":403,"value":460},{"type":397,"tag":433,"props":10620,"children":10621},{"style":1390},[10622],{"type":403,"value":1410},{"type":397,"tag":433,"props":10624,"children":10625},{"class":435,"line":2105},[10626],{"type":397,"tag":433,"props":10627,"children":10628},{"style":720},[10629],{"type":403,"value":10630},"  // eval.call 等方法\n",{"type":397,"tag":433,"props":10632,"children":10633},{"class":435,"line":2165},[10634,10639,10643,10647,10652,10656,10660,10664,10668],{"type":397,"tag":433,"props":10635,"children":10636},{"style":667},[10637],{"type":403,"value":10638},"  eval",{"type":397,"tag":433,"props":10640,"children":10641},{"style":673},[10642],{"type":403,"value":676},{"type":397,"tag":433,"props":10644,"children":10645},{"style":679},[10646],{"type":403,"value":6889},{"type":397,"tag":433,"props":10648,"children":10649},{"style":1390},[10650],{"type":403,"value":10651},"(()",{"type":397,"tag":433,"props":10653,"children":10654},{"style":673},[10655],{"type":403,"value":703},{"type":397,"tag":433,"props":10657,"children":10658},{"style":446},[10659],{"type":403,"value":449},{"type":397,"tag":433,"props":10661,"children":10662},{"style":452},[10663],{"type":403,"value":10523},{"type":397,"tag":433,"props":10665,"children":10666},{"style":446},[10667],{"type":403,"value":460},{"type":397,"tag":433,"props":10669,"children":10670},{"style":1390},[10671],{"type":403,"value":1410},{"type":397,"tag":433,"props":10673,"children":10674},{"class":435,"line":2226},[10675],{"type":397,"tag":433,"props":10676,"children":10677},{"style":673},[10678],{"type":403,"value":1419},{"type":397,"tag":433,"props":10680,"children":10681},{"class":435,"line":2267},[10682,10687,10691,10695,10699,10704],{"type":397,"tag":433,"props":10683,"children":10684},{"style":667},[10685],{"type":403,"value":10686},"indirect",{"type":397,"tag":433,"props":10688,"children":10689},{"style":673},[10690],{"type":403,"value":676},{"type":397,"tag":433,"props":10692,"children":10693},{"style":679},[10694],{"type":403,"value":7719},{"type":397,"tag":433,"props":10696,"children":10697},{"style":667},[10698],{"type":403,"value":687},{"type":397,"tag":433,"props":10700,"children":10701},{"style":673},[10702],{"type":403,"value":10703},"{}",{"type":397,"tag":433,"props":10705,"children":10706},{"style":667},[10707],{"type":403,"value":10708},")()\n",{"type":397,"tag":411,"props":10710,"children":10711},{},[10712],{"type":403,"value":10713},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":397,"tag":411,"props":10715,"children":10716},{},[10717],{"type":403,"value":10718},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":397,"tag":422,"props":10720,"children":10722},{"className":655,"code":10721,"language":657,"meta":391,"style":391},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10723],{"type":397,"tag":429,"props":10724,"children":10725},{"__ignoreMap":391},[10726,10741,10777,10799,10855],{"type":397,"tag":433,"props":10727,"children":10728},{"class":435,"line":436},[10729,10733,10737],{"type":397,"tag":433,"props":10730,"children":10731},{"style":667},[10732],{"type":403,"value":7187},{"type":397,"tag":433,"props":10734,"children":10735},{"style":463},[10736],{"type":403,"value":1867},{"type":397,"tag":433,"props":10738,"children":10739},{"style":695},[10740],{"type":403,"value":6355},{"type":397,"tag":433,"props":10742,"children":10743},{"class":435,"line":726},[10744,10748,10752,10756,10760,10764,10768,10773],{"type":397,"tag":433,"props":10745,"children":10746},{"style":990},[10747],{"type":403,"value":5791},{"type":397,"tag":433,"props":10749,"children":10750},{"style":1426},[10751],{"type":403,"value":2633},{"type":397,"tag":433,"props":10753,"children":10754},{"style":463},[10755],{"type":403,"value":1356},{"type":397,"tag":433,"props":10757,"children":10758},{"style":673},[10759],{"type":403,"value":1704},{"type":397,"tag":433,"props":10761,"children":10762},{"style":1390},[10763],{"type":403,"value":6477},{"type":397,"tag":433,"props":10765,"children":10766},{"style":673},[10767],{"type":403,"value":1852},{"type":397,"tag":433,"props":10769,"children":10770},{"style":695},[10771],{"type":403,"value":10772}," 200",{"type":397,"tag":433,"props":10774,"children":10775},{"style":673},[10776],{"type":403,"value":3165},{"type":397,"tag":433,"props":10778,"children":10779},{"class":435,"line":1372},[10780,10784,10789,10794],{"type":397,"tag":433,"props":10781,"children":10782},{"style":1696},[10783],{"type":403,"value":8767},{"type":397,"tag":433,"props":10785,"children":10786},{"style":667},[10787],{"type":403,"value":10788}," (obj) ",{"type":397,"tag":433,"props":10790,"children":10791},{"style":673},[10792],{"type":403,"value":10793},"{",{"type":397,"tag":433,"props":10795,"children":10796},{"style":1390},[10797],{"type":403,"value":10798}," \n",{"type":397,"tag":433,"props":10800,"children":10801},{"class":435,"line":1413},[10802,10806,10810,10814,10818,10822,10826,10830,10834,10838,10842,10846,10850],{"type":397,"tag":433,"props":10803,"children":10804},{"style":679},[10805],{"type":403,"value":10638},{"type":397,"tag":433,"props":10807,"children":10808},{"style":1390},[10809],{"type":403,"value":687},{"type":397,"tag":433,"props":10811,"children":10812},{"style":667},[10813],{"type":403,"value":5016},{"type":397,"tag":433,"props":10815,"children":10816},{"style":673},[10817],{"type":403,"value":676},{"type":397,"tag":433,"props":10819,"children":10820},{"style":679},[10821],{"type":403,"value":1387},{"type":397,"tag":433,"props":10823,"children":10824},{"style":1390},[10825],{"type":403,"value":687},{"type":397,"tag":433,"props":10827,"children":10828},{"style":667},[10829],{"type":403,"value":2663},{"type":397,"tag":433,"props":10831,"children":10832},{"style":673},[10833],{"type":403,"value":703},{"type":397,"tag":433,"props":10835,"children":10836},{"style":1339},[10837],{"type":403,"value":3786},{"type":397,"tag":433,"props":10839,"children":10840},{"style":673},[10841],{"type":403,"value":676},{"type":397,"tag":433,"props":10843,"children":10844},{"style":667},[10845],{"type":403,"value":2663},{"type":397,"tag":433,"props":10847,"children":10848},{"style":1390},[10849],{"type":403,"value":9276},{"type":397,"tag":433,"props":10851,"children":10852},{"style":720},[10853],{"type":403,"value":10854},"// 200 100\n",{"type":397,"tag":433,"props":10856,"children":10857},{"class":435,"line":1422},[10858],{"type":397,"tag":433,"props":10859,"children":10860},{"style":673},[10861],{"type":403,"value":1419},{"type":397,"tag":411,"props":10863,"children":10864},{},[10865],{"type":403,"value":10866},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":397,"tag":405,"props":10868,"children":10870},{"id":10869},"动态方法调用",[10871],{"type":403,"value":10869},{"type":397,"tag":411,"props":10873,"children":10874},{},[10875],{"type":403,"value":10876},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":397,"tag":411,"props":10878,"children":10879},{},[10880],{"type":403,"value":10881},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":397,"tag":411,"props":10883,"children":10884},{},[10885],{"type":403,"value":10886},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":397,"tag":411,"props":10888,"children":10889},{},[10890],{"type":403,"value":10891},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":397,"tag":422,"props":10893,"children":10895},{"className":655,"code":10894,"language":657,"meta":391,"style":391},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10896],{"type":397,"tag":429,"props":10897,"children":10898},{"__ignoreMap":391},[10899,10919,10955,11004],{"type":397,"tag":433,"props":10900,"children":10901},{"class":435,"line":436},[10902,10906,10911,10915],{"type":397,"tag":433,"props":10903,"children":10904},{"style":990},[10905],{"type":403,"value":1318},{"type":397,"tag":433,"props":10907,"children":10908},{"style":679},[10909],{"type":403,"value":10910}," Test",{"type":397,"tag":433,"props":10912,"children":10913},{"style":673},[10914],{"type":403,"value":1041},{"type":397,"tag":433,"props":10916,"children":10917},{"style":673},[10918],{"type":403,"value":3126},{"type":397,"tag":433,"props":10920,"children":10921},{"class":435,"line":726},[10922,10927,10931,10935,10939,10943,10947,10951],{"type":397,"tag":433,"props":10923,"children":10924},{"style":667},[10925],{"type":403,"value":10926},"TestAnother ",{"type":397,"tag":433,"props":10928,"children":10929},{"style":463},[10930],{"type":403,"value":1867},{"type":397,"tag":433,"props":10932,"children":10933},{"style":667},[10934],{"type":403,"value":10910},{"type":397,"tag":433,"props":10936,"children":10937},{"style":673},[10938],{"type":403,"value":676},{"type":397,"tag":433,"props":10940,"children":10941},{"style":679},[10942],{"type":403,"value":7719},{"type":397,"tag":433,"props":10944,"children":10945},{"style":667},[10946],{"type":403,"value":687},{"type":397,"tag":433,"props":10948,"children":10949},{"style":673},[10950],{"type":403,"value":10703},{"type":397,"tag":433,"props":10952,"children":10953},{"style":667},[10954],{"type":403,"value":1410},{"type":397,"tag":433,"props":10956,"children":10957},{"class":435,"line":1372},[10958,10962,10966,10970,10974,10978,10982,10986,10991,10996,11000],{"type":397,"tag":433,"props":10959,"children":10960},{"style":667},[10961],{"type":403,"value":5016},{"type":397,"tag":433,"props":10963,"children":10964},{"style":673},[10965],{"type":403,"value":676},{"type":397,"tag":433,"props":10967,"children":10968},{"style":679},[10969],{"type":403,"value":1387},{"type":397,"tag":433,"props":10971,"children":10972},{"style":667},[10973],{"type":403,"value":687},{"type":397,"tag":433,"props":10975,"children":10976},{"style":463},[10977],{"type":403,"value":1508},{"type":397,"tag":433,"props":10979,"children":10980},{"style":679},[10981],{"type":403,"value":10910},{"type":397,"tag":433,"props":10983,"children":10984},{"style":667},[10985],{"type":403,"value":821},{"type":397,"tag":433,"props":10987,"children":10988},{"style":463},[10989],{"type":403,"value":10990},"instanceof",{"type":397,"tag":433,"props":10992,"children":10993},{"style":3542},[10994],{"type":403,"value":10995}," TestAnother",{"type":397,"tag":433,"props":10997,"children":10998},{"style":667},[10999],{"type":403,"value":717},{"type":397,"tag":433,"props":11001,"children":11002},{"style":720},[11003],{"type":403,"value":767},{"type":397,"tag":433,"props":11005,"children":11006},{"class":435,"line":1413},[11007,11011,11015,11019,11023,11028,11032,11036,11040],{"type":397,"tag":433,"props":11008,"children":11009},{"style":667},[11010],{"type":403,"value":5016},{"type":397,"tag":433,"props":11012,"children":11013},{"style":673},[11014],{"type":403,"value":676},{"type":397,"tag":433,"props":11016,"children":11017},{"style":679},[11018],{"type":403,"value":1387},{"type":397,"tag":433,"props":11020,"children":11021},{"style":667},[11022],{"type":403,"value":687},{"type":397,"tag":433,"props":11024,"children":11025},{"style":2815},[11026],{"type":403,"value":11027},"test2",{"type":397,"tag":433,"props":11029,"children":11030},{"style":673},[11031],{"type":403,"value":676},{"type":397,"tag":433,"props":11033,"children":11034},{"style":1426},[11035],{"type":403,"value":2826},{"type":397,"tag":433,"props":11037,"children":11038},{"style":667},[11039],{"type":403,"value":717},{"type":397,"tag":433,"props":11041,"children":11042},{"style":720},[11043],{"type":403,"value":956},{"type":397,"tag":411,"props":11045,"children":11046},{},[11047],{"type":403,"value":11048},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":397,"tag":405,"props":11050,"children":11052},{"id":11051},"通用执行环境的实现",[11053],{"type":403,"value":11051},{"type":397,"tag":411,"props":11055,"children":11056},{},[11057],{"type":403,"value":11058},"跳过。",{"type":397,"tag":398,"props":11060,"children":11062},{"id":11061},"勘误",[11063],{"type":403,"value":11064},"勘误？",{"type":397,"tag":511,"props":11066,"children":11067},{},[11068,11073,11078,11083,11088,11093,11098,11103,11108,11113,11118,11123,11128],{"type":397,"tag":515,"props":11069,"children":11070},{},[11071],{"type":403,"value":11072},"P71，属性读取器",{"type":397,"tag":515,"props":11074,"children":11075},{},[11076],{"type":403,"value":11077},"P77，逻辑与、按位非",{"type":397,"tag":515,"props":11079,"children":11080},{},[11081],{"type":403,"value":11082},"P107，catch 子句隐式声明",{"type":397,"tag":515,"props":11084,"children":11085},{},[11086],{"type":403,"value":11087},"P134，第二段代码，computedName 括号",{"type":397,"tag":515,"props":11089,"children":11090},{},[11091],{"type":403,"value":11092},"P148，ES8",{"type":397,"tag":515,"props":11094,"children":11095},{},[11096],{"type":403,"value":11097},"P179，MyObject() 有没有必要用括号",{"type":397,"tag":515,"props":11099,"children":11100},{},[11101],{"type":403,"value":11102},"P206，语言仅提供了...能力而已",{"type":397,"tag":515,"props":11104,"children":11105},{},[11106],{"type":403,"value":11107},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":397,"tag":515,"props":11109,"children":11110},{},[11111],{"type":403,"value":11112},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":397,"tag":515,"props":11114,"children":11115},{},[11116],{"type":403,"value":11117},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":397,"tag":515,"props":11119,"children":11120},{},[11121],{"type":403,"value":11122},"P536，表格最后一行 String",{"type":397,"tag":515,"props":11124,"children":11125},{},[11126],{"type":403,"value":11127},"P535，存取描述符",{"type":397,"tag":515,"props":11129,"children":11130},{},[11131],{"type":403,"value":11132},"P564，运算符",{"type":397,"tag":11134,"props":11135,"children":11138},"section",{"className":11136,"dataFootnotes":391},[11137],"footnotes",[11139,11146],{"type":397,"tag":398,"props":11140,"children":11143},{"className":11141,"id":498},[11142],"sr-only",[11144],{"type":403,"value":11145},"Footnotes",{"type":397,"tag":11147,"props":11148,"children":11149},"ol",{},[11150,11165,11178,11191,11204,11217],{"type":397,"tag":515,"props":11151,"children":11153},{"id":11152},"user-content-fn-first-class",[11154,11156],{"type":403,"value":11155},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":397,"tag":494,"props":11157,"children":11162},{"href":11158,"ariaLabel":11159,"className":11160,"dataFootnoteBackref":391},"#user-content-fnref-first-class","Back to reference 1",[11161],"data-footnote-backref",[11163],{"type":403,"value":11164},"↩",{"type":397,"tag":515,"props":11166,"children":11168},{"id":11167},"user-content-fn-oo",[11169,11171],{"type":403,"value":11170},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":397,"tag":494,"props":11172,"children":11176},{"href":11173,"ariaLabel":11174,"className":11175,"dataFootnoteBackref":391},"#user-content-fnref-oo","Back to reference 2",[11161],[11177],{"type":403,"value":11164},{"type":397,"tag":515,"props":11179,"children":11181},{"id":11180},"user-content-fn-string",[11182,11184],{"type":403,"value":11183},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":397,"tag":494,"props":11185,"children":11189},{"href":11186,"ariaLabel":11187,"className":11188,"dataFootnoteBackref":391},"#user-content-fnref-string","Back to reference 3",[11161],[11190],{"type":403,"value":11164},{"type":397,"tag":515,"props":11192,"children":11194},{"id":11193},"user-content-fn-namespace",[11195,11197],{"type":403,"value":11196},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":397,"tag":494,"props":11198,"children":11202},{"href":11199,"ariaLabel":11200,"className":11201,"dataFootnoteBackref":391},"#user-content-fnref-namespace","Back to reference 4",[11161],[11203],{"type":403,"value":11164},{"type":397,"tag":515,"props":11205,"children":11207},{"id":11206},"user-content-fn-iterationenv",[11208,11210],{"type":403,"value":11209},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":397,"tag":494,"props":11211,"children":11215},{"href":11212,"ariaLabel":11213,"className":11214,"dataFootnoteBackref":391},"#user-content-fnref-iterationenv","Back to reference 5",[11161],[11216],{"type":403,"value":11164},{"type":397,"tag":515,"props":11218,"children":11220},{"id":11219},"user-content-fn-reference",[11221,11223],{"type":403,"value":11222},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":397,"tag":494,"props":11224,"children":11228},{"href":11225,"ariaLabel":11226,"className":11227,"dataFootnoteBackref":391},"#user-content-fnref-reference","Back to reference 6",[11161],[11229],{"type":403,"value":11164},{"type":397,"tag":11231,"props":11232,"children":11233},"style",{},[11234],{"type":403,"value":11235},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":391,"searchDepth":726,"depth":726,"links":11237},[11238,11247,11256,11266,11272,11282,11283],{"id":400,"depth":726,"text":400,"children":11239},[11240,11241,11242,11243,11244,11245,11246],{"id":407,"depth":1372,"text":407},{"id":481,"depth":1372,"text":481},{"id":607,"depth":1372,"text":607},{"id":1558,"depth":1372,"text":1558},{"id":2343,"depth":1372,"text":2343},{"id":2470,"depth":1372,"text":2470},{"id":2561,"depth":1372,"text":2561},{"id":2586,"depth":726,"text":2586,"children":11248},[11249,11250,11251,11252,11253,11254,11255],{"id":2591,"depth":1372,"text":407},{"id":3064,"depth":1372,"text":3064},{"id":3509,"depth":1372,"text":3509},{"id":4270,"depth":1372,"text":4270},{"id":5048,"depth":1372,"text":5048},{"id":5221,"depth":1372,"text":5221},{"id":6038,"depth":1372,"text":6038},{"id":6048,"depth":726,"text":6048,"children":11257},[11258,11259,11260,11261,11262,11263,11264,11265],{"id":6053,"depth":1372,"text":6053},{"id":6106,"depth":1372,"text":6106},{"id":6284,"depth":1372,"text":6284},{"id":6562,"depth":1372,"text":6562},{"id":6646,"depth":1372,"text":6646},{"id":6820,"depth":1372,"text":6820},{"id":6902,"depth":1372,"text":6902},{"id":6940,"depth":1372,"text":6940},{"id":6950,"depth":726,"text":6950,"children":11267},[11268,11269,11270,11271],{"id":6955,"depth":1372,"text":6053},{"id":6970,"depth":1372,"text":6973},{"id":8112,"depth":1372,"text":8112},{"id":8559,"depth":1372,"text":8559},{"id":8929,"depth":726,"text":8929,"children":11273},[11274,11275,11276,11277,11278,11279,11280,11281],{"id":8934,"depth":1372,"text":6053},{"id":8949,"depth":1372,"text":8949},{"id":9434,"depth":1372,"text":9434},{"id":9537,"depth":1372,"text":9537},{"id":9737,"depth":1372,"text":9737},{"id":10412,"depth":1372,"text":10412},{"id":10869,"depth":1372,"text":10869},{"id":11051,"depth":1372,"text":11051},{"id":11061,"depth":726,"text":11064},{"id":498,"depth":726,"text":11145},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","md",[11290,11294],{"_path":11291,"title":11292,"description":11293},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11295,"title":11296,"description":391},"/_books/9787301135907","日常生活中的自我呈现",1710257743860]