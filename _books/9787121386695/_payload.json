[{"data":1,"prerenderedAt":11060},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":158,"/_books/9787121386695-surround":11052},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ tailwind4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":163,"body":165,"_type":11046,"_id":11047,"_source":11048,"_file":11049,"_stem":11050,"_extension":11051},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":166,"children":167,"toc":10998},"root",[168,176,182,188,193,251,256,277,282,321,326,339,344,349,354,359,377,382,387,392,405,410,415,420,425,540,545,550,611,616,657,662,695,700,705,730,735,772,777,1070,1075,1327,1332,1337,1342,1360,1365,1450,1455,1586,1591,1596,2102,2107,2112,2117,2122,2224,2229,2234,2239,2244,2249,2254,2259,2312,2317,2330,2335,2340,2345,2350,2355,2360,2365,2370,2375,2380,2385,2561,2566,2658,2663,2668,2673,2678,2795,2813,2818,2831,2836,2841,2846,2859,2864,2869,3005,3020,3025,3105,3110,3157,3271,3276,3281,3286,3471,3476,3481,3486,3649,3654,3682,3687,3700,3705,3957,3962,3967,3972,4032,4037,4042,4047,4052,4057,4155,4160,4165,4183,4188,4201,4206,4211,4224,4229,4234,4332,4337,4342,4347,4539,4544,4813,4818,4823,4841,4846,4961,4966,4984,4989,4994,4999,5004,5195,5200,5213,5218,5799,5804,5809,5814,5819,5824,5829,5834,5839,5857,5862,5867,5872,5877,5997,6002,6007,6012,6024,6029,6034,6039,6044,6049,6067,6184,6189,6322,6327,6332,6337,6355,6360,6365,6406,6411,6416,6421,6488,6493,6498,6542,6547,6552,6557,6575,6580,6585,6590,6657,6662,6667,6672,6690,6695,6700,6705,6710,6715,6720,6725,6730,6736,6741,6759,6764,6908,6926,7147,7152,7157,7288,7293,7311,7316,7364,7369,7491,7496,7501,7872,7877,7882,7887,7892,7897,8319,8324,8329,8334,8352,8357,8449,8454,8459,8646,8651,8656,8661,8666,8684,8689,8694,8699,8704,8709,8714,8719,8888,8893,8898,9044,9049,9189,9194,9199,9204,9209,9214,9246,9251,9297,9302,9307,9487,9492,9497,9502,9507,9512,9517,10013,10018,10023,10053,10058,10063,10068,10172,10177,10182,10471,10476,10481,10624,10629,10634,10639,10644,10649,10654,10806,10811,10816,10821,10827,10895,10992],{"type":169,"tag":170,"props":171,"children":173},"element","h2",{"id":172},"语法",[174],{"type":175,"value":172},"text",{"type":169,"tag":177,"props":178,"children":180},"h3",{"id":179},"语法综述",[181],{"type":175,"value":179},{"type":169,"tag":183,"props":184,"children":185},"p",{},[186],{"type":175,"value":187},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":169,"tag":183,"props":189,"children":190},{},[191],{"type":175,"value":192},"可以使用 --check 指令检测语法错误：",{"type":169,"tag":194,"props":195,"children":199},"pre",{"className":196,"code":197,"language":198,"meta":163,"style":163},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[200],{"type":169,"tag":201,"props":202,"children":203},"code",{"__ignoreMap":163},[204],{"type":169,"tag":205,"props":206,"children":209},"span",{"class":207,"line":208},"line",1,[210,216,222,228,233,239,245],{"type":169,"tag":205,"props":211,"children":213},{"style":212},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[214],{"type":175,"value":215},"echo",{"type":169,"tag":205,"props":217,"children":219},{"style":218},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[220],{"type":175,"value":221}," '",{"type":169,"tag":205,"props":223,"children":225},{"style":224},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[226],{"type":175,"value":227},"\"hello world\"",{"type":169,"tag":205,"props":229,"children":230},{"style":218},[231],{"type":175,"value":232},"'",{"type":169,"tag":205,"props":234,"children":236},{"style":235},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[237],{"type":175,"value":238}," |",{"type":169,"tag":205,"props":240,"children":242},{"style":241},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[243],{"type":175,"value":244}," node",{"type":169,"tag":205,"props":246,"children":248},{"style":247},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[249],{"type":175,"value":250}," -c\n",{"type":169,"tag":177,"props":252,"children":254},{"id":253},"声明语法",[255],{"type":175,"value":253},{"type":169,"tag":183,"props":257,"children":258},{},[259,261,275],{"type":175,"value":260},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":169,"tag":262,"props":263,"children":264},"sup",{},[265],{"type":169,"tag":266,"props":267,"children":272},"a",{"href":268,"ariaDescribedBy":269,"dataFootnoteRef":163,"id":271},"#user-content-fn-first-class",[270],"footnote-label","user-content-fnref-first-class",[273],{"type":175,"value":274},"1",{"type":175,"value":276},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":169,"tag":183,"props":278,"children":279},{},[280],{"type":175,"value":281},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":169,"tag":283,"props":284,"children":285},"ul",{},[286,305],{"type":169,"tag":287,"props":288,"children":289},"li",{},[290,292,303],{"type":175,"value":291},"基本数据类型：undefined、string、number、object",{"type":169,"tag":262,"props":293,"children":294},{},[295],{"type":169,"tag":266,"props":296,"children":300},{"href":297,"ariaDescribedBy":298,"dataFootnoteRef":163,"id":299},"#user-content-fn-oo",[270],"user-content-fnref-oo",[301],{"type":175,"value":302},"2",{"type":175,"value":304},"、function、boolean、symbol、bigint",{"type":169,"tag":287,"props":306,"children":307},{},[308,310],{"type":175,"value":309},"值类型和引用类型",{"type":169,"tag":262,"props":311,"children":312},{},[313],{"type":169,"tag":266,"props":314,"children":318},{"href":315,"ariaDescribedBy":316,"dataFootnoteRef":163,"id":317},"#user-content-fn-string",[270],"user-content-fnref-string",[319],{"type":175,"value":320},"3",{"type":169,"tag":183,"props":322,"children":323},{},[324],{"type":175,"value":325},"如果算上规范，可以再增加两种类型系统：",{"type":169,"tag":283,"props":327,"children":328},{},[329,334],{"type":169,"tag":287,"props":330,"children":331},{},[332],{"type":175,"value":333},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":169,"tag":287,"props":335,"children":336},{},[337],{"type":175,"value":338},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":169,"tag":183,"props":340,"children":341},{},[342],{"type":175,"value":343},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":169,"tag":183,"props":345,"children":346},{},[347],{"type":175,"value":348},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":169,"tag":183,"props":350,"children":351},{},[352],{"type":175,"value":353},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":169,"tag":183,"props":355,"children":356},{},[357],{"type":175,"value":358},"相关字符串字面量的一些冷知识：",{"type":169,"tag":283,"props":360,"children":361},{},[362,367,372],{"type":169,"tag":287,"props":363,"children":364},{},[365],{"type":175,"value":366},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":169,"tag":287,"props":368,"children":369},{},[370],{"type":175,"value":371},"空字符串也能作为对象的键。",{"type":169,"tag":287,"props":373,"children":374},{},[375],{"type":175,"value":376},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":169,"tag":177,"props":378,"children":380},{"id":379},"表达式运算",[381],{"type":175,"value":379},{"type":169,"tag":183,"props":383,"children":384},{},[385],{"type":175,"value":386},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":169,"tag":183,"props":388,"children":389},{},[390],{"type":175,"value":391},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":169,"tag":283,"props":393,"children":394},{},[395,400],{"type":169,"tag":287,"props":396,"children":397},{},[398],{"type":175,"value":399},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":169,"tag":287,"props":401,"children":402},{},[403],{"type":175,"value":404},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":169,"tag":183,"props":406,"children":407},{},[408],{"type":175,"value":409},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":169,"tag":183,"props":411,"children":412},{},[413],{"type":175,"value":414},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":169,"tag":183,"props":416,"children":417},{},[418],{"type":175,"value":419},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":169,"tag":183,"props":421,"children":422},{},[423],{"type":175,"value":424},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":169,"tag":194,"props":426,"children":430},{"className":427,"code":428,"language":429,"meta":163,"style":163},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[431],{"type":169,"tag":201,"props":432,"children":433},{"__ignoreMap":163},[434,496],{"type":169,"tag":205,"props":435,"children":436},{"class":207,"line":208},[437,443,449,455,460,465,471,476,481,485,490],{"type":169,"tag":205,"props":438,"children":440},{"style":439},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[441],{"type":175,"value":442},"Object",{"type":169,"tag":205,"props":444,"children":446},{"style":445},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[447],{"type":175,"value":448},".",{"type":169,"tag":205,"props":450,"children":452},{"style":451},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[453],{"type":175,"value":454},"is",{"type":169,"tag":205,"props":456,"children":457},{"style":439},[458],{"type":175,"value":459},"(",{"type":169,"tag":205,"props":461,"children":462},{"style":235},[463],{"type":175,"value":464},"+",{"type":169,"tag":205,"props":466,"children":468},{"style":467},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[469],{"type":175,"value":470},"0",{"type":169,"tag":205,"props":472,"children":473},{"style":445},[474],{"type":175,"value":475},",",{"type":169,"tag":205,"props":477,"children":478},{"style":235},[479],{"type":175,"value":480}," -",{"type":169,"tag":205,"props":482,"children":483},{"style":467},[484],{"type":175,"value":470},{"type":169,"tag":205,"props":486,"children":487},{"style":439},[488],{"type":175,"value":489},") ",{"type":169,"tag":205,"props":491,"children":493},{"style":492},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[494],{"type":175,"value":495},"// false\n",{"type":169,"tag":205,"props":497,"children":499},{"class":207,"line":498},2,[500,504,508,512,516,522,526,531,535],{"type":169,"tag":205,"props":501,"children":502},{"style":439},[503],{"type":175,"value":442},{"type":169,"tag":205,"props":505,"children":506},{"style":445},[507],{"type":175,"value":448},{"type":169,"tag":205,"props":509,"children":510},{"style":451},[511],{"type":175,"value":454},{"type":169,"tag":205,"props":513,"children":514},{"style":439},[515],{"type":175,"value":459},{"type":169,"tag":205,"props":517,"children":519},{"style":518},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[520],{"type":175,"value":521},"NaN",{"type":169,"tag":205,"props":523,"children":524},{"style":445},[525],{"type":175,"value":475},{"type":169,"tag":205,"props":527,"children":528},{"style":518},[529],{"type":175,"value":530}," NaN",{"type":169,"tag":205,"props":532,"children":533},{"style":439},[534],{"type":175,"value":489},{"type":169,"tag":205,"props":536,"children":537},{"style":492},[538],{"type":175,"value":539},"// true\n",{"type":169,"tag":183,"props":541,"children":542},{},[543],{"type":175,"value":544},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":169,"tag":183,"props":546,"children":547},{},[548],{"type":175,"value":549},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":169,"tag":194,"props":551,"children":553},{"className":427,"code":552,"language":429,"meta":163,"style":163},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[554],{"type":169,"tag":201,"props":555,"children":556},{"__ignoreMap":163},[557,583],{"type":169,"tag":205,"props":558,"children":559},{"class":207,"line":208},[560,565,569,574,579],{"type":169,"tag":205,"props":561,"children":562},{"style":451},[563],{"type":175,"value":564},"Boolean",{"type":169,"tag":205,"props":566,"children":567},{"style":439},[568],{"type":175,"value":459},{"type":169,"tag":205,"props":570,"children":571},{"style":451},[572],{"type":175,"value":573},"Symbol",{"type":169,"tag":205,"props":575,"children":576},{"style":439},[577],{"type":175,"value":578},"()) ",{"type":169,"tag":205,"props":580,"children":581},{"style":492},[582],{"type":175,"value":539},{"type":169,"tag":205,"props":584,"children":585},{"class":207,"line":498},[586,590,595,600,606],{"type":169,"tag":205,"props":587,"children":588},{"style":451},[589],{"type":175,"value":573},{"type":169,"tag":205,"props":591,"children":592},{"style":439},[593],{"type":175,"value":594},"() ",{"type":169,"tag":205,"props":596,"children":597},{"style":235},[598],{"type":175,"value":599},"==",{"type":169,"tag":205,"props":601,"children":603},{"style":602},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[604],{"type":175,"value":605}," true",{"type":169,"tag":205,"props":607,"children":608},{"style":492},[609],{"type":175,"value":610}," // false\n",{"type":169,"tag":183,"props":612,"children":613},{},[614],{"type":175,"value":615},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":169,"tag":194,"props":617,"children":619},{"className":196,"code":618,"language":198,"meta":163,"style":163},"echo \"1 = 1\" | node -c\n",[620],{"type":169,"tag":201,"props":621,"children":622},{"__ignoreMap":163},[623],{"type":169,"tag":205,"props":624,"children":625},{"class":207,"line":208},[626,630,635,640,645,649,653],{"type":169,"tag":205,"props":627,"children":628},{"style":212},[629],{"type":175,"value":215},{"type":169,"tag":205,"props":631,"children":632},{"style":218},[633],{"type":175,"value":634}," \"",{"type":169,"tag":205,"props":636,"children":637},{"style":224},[638],{"type":175,"value":639},"1 = 1",{"type":169,"tag":205,"props":641,"children":642},{"style":218},[643],{"type":175,"value":644},"\"",{"type":169,"tag":205,"props":646,"children":647},{"style":235},[648],{"type":175,"value":238},{"type":169,"tag":205,"props":650,"children":651},{"style":241},[652],{"type":175,"value":244},{"type":169,"tag":205,"props":654,"children":655},{"style":247},[656],{"type":175,"value":250},{"type":169,"tag":183,"props":658,"children":659},{},[660],{"type":175,"value":661},"函数调用也有“隐式调用”这一概念：",{"type":169,"tag":283,"props":663,"children":664},{},[665,670,675,680,685,690],{"type":169,"tag":287,"props":666,"children":667},{},[668],{"type":175,"value":669},"使用 new 运算符",{"type":169,"tag":287,"props":671,"children":672},{},[673],{"type":175,"value":674},"模板处理函数 + 模板字符串调用",{"type":169,"tag":287,"props":676,"children":677},{},[678],{"type":175,"value":679},"函数作为属性存取器且发生了属性存取操作时",{"type":169,"tag":287,"props":681,"children":682},{},[683],{"type":175,"value":684},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":169,"tag":287,"props":686,"children":687},{},[688],{"type":175,"value":689},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":169,"tag":287,"props":691,"children":692},{},[693],{"type":175,"value":694},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":169,"tag":183,"props":696,"children":697},{},[698],{"type":175,"value":699},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":169,"tag":183,"props":701,"children":702},{},[703],{"type":175,"value":704},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":169,"tag":194,"props":706,"children":708},{"className":427,"code":707,"language":429,"meta":163,"style":163},"typeof x // undefined\n",[709],{"type":169,"tag":201,"props":710,"children":711},{"__ignoreMap":163},[712],{"type":169,"tag":205,"props":713,"children":714},{"class":207,"line":208},[715,720,725],{"type":169,"tag":205,"props":716,"children":717},{"style":235},[718],{"type":175,"value":719},"typeof",{"type":169,"tag":205,"props":721,"children":722},{"style":439},[723],{"type":175,"value":724}," x ",{"type":169,"tag":205,"props":726,"children":727},{"style":492},[728],{"type":175,"value":729},"// undefined\n",{"type":169,"tag":183,"props":731,"children":732},{},[733],{"type":175,"value":734},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":169,"tag":194,"props":736,"children":738},{"className":427,"code":737,"language":429,"meta":163,"style":163},"typeof x // ReferenceError\nlet x\n",[739],{"type":169,"tag":201,"props":740,"children":741},{"__ignoreMap":163},[742,758],{"type":169,"tag":205,"props":743,"children":744},{"class":207,"line":208},[745,749,753],{"type":169,"tag":205,"props":746,"children":747},{"style":235},[748],{"type":175,"value":719},{"type":169,"tag":205,"props":750,"children":751},{"style":439},[752],{"type":175,"value":724},{"type":169,"tag":205,"props":754,"children":755},{"style":492},[756],{"type":175,"value":757},"// ReferenceError\n",{"type":169,"tag":205,"props":759,"children":760},{"class":207,"line":498},[761,767],{"type":169,"tag":205,"props":762,"children":764},{"style":763},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[765],{"type":175,"value":766},"let",{"type":169,"tag":205,"props":768,"children":769},{"style":439},[770],{"type":175,"value":771}," x\n",{"type":169,"tag":183,"props":773,"children":774},{},[775],{"type":175,"value":776},"完整的运算符优先级列表如下：",{"type":169,"tag":778,"props":779,"children":780},"table",{},[781,800],{"type":169,"tag":782,"props":783,"children":784},"thead",{},[785],{"type":169,"tag":786,"props":787,"children":788},"tr",{},[789,795],{"type":169,"tag":790,"props":791,"children":792},"th",{},[793],{"type":175,"value":794},"运算符",{"type":169,"tag":790,"props":796,"children":797},{},[798],{"type":175,"value":799},"描述",{"type":169,"tag":801,"props":802,"children":803},"tbody",{},[804,818,836,849,862,875,888,901,914,927,940,953,966,979,992,1005,1018,1031,1044,1057],{"type":169,"tag":786,"props":805,"children":806},{},[807,813],{"type":169,"tag":808,"props":809,"children":810},"td",{},[811],{"type":175,"value":812},"()",{"type":169,"tag":808,"props":814,"children":815},{},[816],{"type":175,"value":817},"成组运算",{"type":169,"tag":786,"props":819,"children":820},{},[821,831],{"type":169,"tag":808,"props":822,"children":823},{},[824,826,829],{"type":175,"value":825},".、",{"type":169,"tag":205,"props":827,"children":828},{},[],{"type":175,"value":830},"、new ()",{"type":169,"tag":808,"props":832,"children":833},{},[834],{"type":175,"value":835},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":169,"tag":786,"props":837,"children":838},{},[839,844],{"type":169,"tag":808,"props":840,"children":841},{},[842],{"type":175,"value":843},"()、new",{"type":169,"tag":808,"props":845,"children":846},{},[847],{"type":175,"value":848},"函数调用、new 运算符",{"type":169,"tag":786,"props":850,"children":851},{},[852,857],{"type":169,"tag":808,"props":853,"children":854},{},[855],{"type":175,"value":856},"++、--",{"type":169,"tag":808,"props":858,"children":859},{},[860],{"type":175,"value":861},"后置递增、后置递减",{"type":169,"tag":786,"props":863,"children":864},{},[865,870],{"type":169,"tag":808,"props":866,"children":867},{},[868],{"type":175,"value":869},"+、-、++、--、~、!、delete、typeof、void",{"type":169,"tag":808,"props":871,"children":872},{},[873],{"type":175,"value":874},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":169,"tag":786,"props":876,"children":877},{},[878,883],{"type":169,"tag":808,"props":879,"children":880},{},[881],{"type":175,"value":882},"*、/、%",{"type":169,"tag":808,"props":884,"children":885},{},[886],{"type":175,"value":887},"乘法、除法、取模",{"type":169,"tag":786,"props":889,"children":890},{},[891,896],{"type":169,"tag":808,"props":892,"children":893},{},[894],{"type":175,"value":895},"+、-、+",{"type":169,"tag":808,"props":897,"children":898},{},[899],{"type":175,"value":900},"加法、减法、字符串连接",{"type":169,"tag":786,"props":902,"children":903},{},[904,909],{"type":169,"tag":808,"props":905,"children":906},{},[907],{"type":175,"value":908},"\u003C\u003C、>>、>>>",{"type":169,"tag":808,"props":910,"children":911},{},[912],{"type":175,"value":913},"移位运算符",{"type":169,"tag":786,"props":915,"children":916},{},[917,922],{"type":169,"tag":808,"props":918,"children":919},{},[920],{"type":175,"value":921},"\u003C、\u003C=、>=、>、in、instanceof",{"type":169,"tag":808,"props":923,"children":924},{},[925],{"type":175,"value":926},"关系运算符、in、instanceof",{"type":169,"tag":786,"props":928,"children":929},{},[930,935],{"type":169,"tag":808,"props":931,"children":932},{},[933],{"type":175,"value":934},"==、!=、===、!==",{"type":169,"tag":808,"props":936,"children":937},{},[938],{"type":175,"value":939},"等值检测",{"type":169,"tag":786,"props":941,"children":942},{},[943,948],{"type":169,"tag":808,"props":944,"children":945},{},[946],{"type":175,"value":947},"&",{"type":169,"tag":808,"props":949,"children":950},{},[951],{"type":175,"value":952},"按位与",{"type":169,"tag":786,"props":954,"children":955},{},[956,961],{"type":169,"tag":808,"props":957,"children":958},{},[959],{"type":175,"value":960},"^",{"type":169,"tag":808,"props":962,"children":963},{},[964],{"type":175,"value":965},"按位异或",{"type":169,"tag":786,"props":967,"children":968},{},[969,974],{"type":169,"tag":808,"props":970,"children":971},{},[972],{"type":175,"value":973},"|",{"type":169,"tag":808,"props":975,"children":976},{},[977],{"type":175,"value":978},"按位或",{"type":169,"tag":786,"props":980,"children":981},{},[982,987],{"type":169,"tag":808,"props":983,"children":984},{},[985],{"type":175,"value":986},"&&",{"type":169,"tag":808,"props":988,"children":989},{},[990],{"type":175,"value":991},"逻辑与",{"type":169,"tag":786,"props":993,"children":994},{},[995,1000],{"type":169,"tag":808,"props":996,"children":997},{},[998],{"type":175,"value":999},"||",{"type":169,"tag":808,"props":1001,"children":1002},{},[1003],{"type":175,"value":1004},"逻辑或",{"type":169,"tag":786,"props":1006,"children":1007},{},[1008,1013],{"type":169,"tag":808,"props":1009,"children":1010},{},[1011],{"type":175,"value":1012},"?:",{"type":169,"tag":808,"props":1014,"children":1015},{},[1016],{"type":175,"value":1017},"三木运算",{"type":169,"tag":786,"props":1019,"children":1020},{},[1021,1026],{"type":169,"tag":808,"props":1022,"children":1023},{},[1024],{"type":175,"value":1025},"=、oP=",{"type":169,"tag":808,"props":1027,"children":1028},{},[1029],{"type":175,"value":1030},"赋值、运算赋值",{"type":169,"tag":786,"props":1032,"children":1033},{},[1034,1039],{"type":169,"tag":808,"props":1035,"children":1036},{},[1037],{"type":175,"value":1038},"yield、yield*",{"type":169,"tag":808,"props":1040,"children":1041},{},[1042],{"type":175,"value":1043},"yield 表达式",{"type":169,"tag":786,"props":1045,"children":1046},{},[1047,1052],{"type":169,"tag":808,"props":1048,"children":1049},{},[1050],{"type":175,"value":1051},"...",{"type":169,"tag":808,"props":1053,"children":1054},{},[1055],{"type":175,"value":1056},"展开运算符",{"type":169,"tag":786,"props":1058,"children":1059},{},[1060,1065],{"type":169,"tag":808,"props":1061,"children":1062},{},[1063],{"type":175,"value":1064},"，",{"type":169,"tag":808,"props":1066,"children":1067},{},[1068],{"type":175,"value":1069},"逗号运算符、多重求值",{"type":169,"tag":183,"props":1071,"children":1072},{},[1073],{"type":175,"value":1074},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":169,"tag":194,"props":1076,"children":1078},{"className":427,"code":1077,"language":429,"meta":163,"style":163},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1079],{"type":169,"tag":201,"props":1080,"children":1081},{"__ignoreMap":163},[1082,1105,1141,1182,1191,1226,1263,1271,1298],{"type":169,"tag":205,"props":1083,"children":1084},{"class":207,"line":208},[1085,1090,1095,1100],{"type":169,"tag":205,"props":1086,"children":1087},{"style":763},[1088],{"type":175,"value":1089},"function",{"type":169,"tag":205,"props":1091,"children":1092},{"style":451},[1093],{"type":175,"value":1094}," A",{"type":169,"tag":205,"props":1096,"children":1097},{"style":445},[1098],{"type":175,"value":1099}," ()",{"type":169,"tag":205,"props":1101,"children":1102},{"style":445},[1103],{"type":175,"value":1104}," {\n",{"type":169,"tag":205,"props":1106,"children":1107},{"class":207,"line":498},[1108,1114,1118,1123,1128,1132,1136],{"type":169,"tag":205,"props":1109,"children":1111},{"style":1110},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1112],{"type":175,"value":1113},"  this",{"type":169,"tag":205,"props":1115,"children":1116},{"style":445},[1117],{"type":175,"value":448},{"type":169,"tag":205,"props":1119,"children":1120},{"style":439},[1121],{"type":175,"value":1122},"b",{"type":169,"tag":205,"props":1124,"children":1125},{"style":235},[1126],{"type":175,"value":1127}," =",{"type":169,"tag":205,"props":1129,"children":1130},{"style":218},[1131],{"type":175,"value":221},{"type":169,"tag":205,"props":1133,"children":1134},{"style":224},[1135],{"type":175,"value":1122},{"type":169,"tag":205,"props":1137,"children":1138},{"style":218},[1139],{"type":175,"value":1140},"'\n",{"type":169,"tag":205,"props":1142,"children":1144},{"class":207,"line":1143},3,[1145,1150,1154,1159,1164,1168,1173,1177],{"type":169,"tag":205,"props":1146,"children":1147},{"style":439},[1148],{"type":175,"value":1149},"  console",{"type":169,"tag":205,"props":1151,"children":1152},{"style":445},[1153],{"type":175,"value":448},{"type":169,"tag":205,"props":1155,"children":1156},{"style":451},[1157],{"type":175,"value":1158},"log",{"type":169,"tag":205,"props":1160,"children":1162},{"style":1161},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1163],{"type":175,"value":459},{"type":169,"tag":205,"props":1165,"children":1166},{"style":218},[1167],{"type":175,"value":232},{"type":169,"tag":205,"props":1169,"children":1170},{"style":224},[1171],{"type":175,"value":1172},"A().b",{"type":169,"tag":205,"props":1174,"children":1175},{"style":218},[1176],{"type":175,"value":232},{"type":169,"tag":205,"props":1178,"children":1179},{"style":1161},[1180],{"type":175,"value":1181},")\n",{"type":169,"tag":205,"props":1183,"children":1185},{"class":207,"line":1184},4,[1186],{"type":169,"tag":205,"props":1187,"children":1188},{"style":445},[1189],{"type":175,"value":1190},"}\n",{"type":169,"tag":205,"props":1192,"children":1194},{"class":207,"line":1193},5,[1195,1201,1205,1209,1213,1218,1222],{"type":169,"tag":205,"props":1196,"children":1198},{"style":1197},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1199],{"type":175,"value":1200},"A",{"type":169,"tag":205,"props":1202,"children":1203},{"style":445},[1204],{"type":175,"value":448},{"type":169,"tag":205,"props":1206,"children":1207},{"style":451},[1208],{"type":175,"value":1122},{"type":169,"tag":205,"props":1210,"children":1211},{"style":235},[1212],{"type":175,"value":1127},{"type":169,"tag":205,"props":1214,"children":1215},{"style":763},[1216],{"type":175,"value":1217}," function",{"type":169,"tag":205,"props":1219,"children":1220},{"style":445},[1221],{"type":175,"value":1099},{"type":169,"tag":205,"props":1223,"children":1224},{"style":445},[1225],{"type":175,"value":1104},{"type":169,"tag":205,"props":1227,"children":1229},{"class":207,"line":1228},6,[1230,1234,1238,1242,1246,1250,1255,1259],{"type":169,"tag":205,"props":1231,"children":1232},{"style":439},[1233],{"type":175,"value":1149},{"type":169,"tag":205,"props":1235,"children":1236},{"style":445},[1237],{"type":175,"value":448},{"type":169,"tag":205,"props":1239,"children":1240},{"style":451},[1241],{"type":175,"value":1158},{"type":169,"tag":205,"props":1243,"children":1244},{"style":1161},[1245],{"type":175,"value":459},{"type":169,"tag":205,"props":1247,"children":1248},{"style":218},[1249],{"type":175,"value":232},{"type":169,"tag":205,"props":1251,"children":1252},{"style":224},[1253],{"type":175,"value":1254},"A.b",{"type":169,"tag":205,"props":1256,"children":1257},{"style":218},[1258],{"type":175,"value":232},{"type":169,"tag":205,"props":1260,"children":1261},{"style":1161},[1262],{"type":175,"value":1181},{"type":169,"tag":205,"props":1264,"children":1266},{"class":207,"line":1265},7,[1267],{"type":169,"tag":205,"props":1268,"children":1269},{"style":445},[1270],{"type":175,"value":1190},{"type":169,"tag":205,"props":1272,"children":1274},{"class":207,"line":1273},8,[1275,1280,1284,1288,1293],{"type":169,"tag":205,"props":1276,"children":1277},{"style":235},[1278],{"type":175,"value":1279},"new",{"type":169,"tag":205,"props":1281,"children":1282},{"style":1197},[1283],{"type":175,"value":1094},{"type":169,"tag":205,"props":1285,"children":1286},{"style":445},[1287],{"type":175,"value":448},{"type":169,"tag":205,"props":1289,"children":1290},{"style":439},[1291],{"type":175,"value":1292},"b ",{"type":169,"tag":205,"props":1294,"children":1295},{"style":492},[1296],{"type":175,"value":1297},"// A.b\n",{"type":169,"tag":205,"props":1299,"children":1301},{"class":207,"line":1300},9,[1302,1306,1310,1314,1318,1322],{"type":169,"tag":205,"props":1303,"children":1304},{"style":235},[1305],{"type":175,"value":1279},{"type":169,"tag":205,"props":1307,"children":1308},{"style":451},[1309],{"type":175,"value":1094},{"type":169,"tag":205,"props":1311,"children":1312},{"style":439},[1313],{"type":175,"value":812},{"type":169,"tag":205,"props":1315,"children":1316},{"style":445},[1317],{"type":175,"value":448},{"type":169,"tag":205,"props":1319,"children":1320},{"style":439},[1321],{"type":175,"value":1292},{"type":169,"tag":205,"props":1323,"children":1324},{"style":492},[1325],{"type":175,"value":1326},"// A().b\n",{"type":169,"tag":177,"props":1328,"children":1330},{"id":1329},"语句",[1331],{"type":175,"value":1329},{"type":169,"tag":183,"props":1333,"children":1334},{},[1335],{"type":175,"value":1336},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":169,"tag":183,"props":1338,"children":1339},{},[1340],{"type":175,"value":1341},"需要注意的点：",{"type":169,"tag":283,"props":1343,"children":1344},{},[1345,1350,1355],{"type":169,"tag":287,"props":1346,"children":1347},{},[1348],{"type":175,"value":1349},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":169,"tag":287,"props":1351,"children":1352},{},[1353],{"type":175,"value":1354},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":169,"tag":287,"props":1356,"children":1357},{},[1358],{"type":175,"value":1359},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":169,"tag":183,"props":1361,"children":1362},{},[1363],{"type":175,"value":1364},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":169,"tag":194,"props":1366,"children":1368},{"className":427,"code":1367,"language":429,"meta":163,"style":163},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1369],{"type":169,"tag":201,"props":1370,"children":1371},{"__ignoreMap":163},[1372,1403,1430],{"type":169,"tag":205,"props":1373,"children":1374},{"class":207,"line":208},[1375,1379,1384,1388,1394,1399],{"type":169,"tag":205,"props":1376,"children":1377},{"style":763},[1378],{"type":175,"value":1089},{"type":169,"tag":205,"props":1380,"children":1381},{"style":451},[1382],{"type":175,"value":1383}," log",{"type":169,"tag":205,"props":1385,"children":1386},{"style":445},[1387],{"type":175,"value":459},{"type":169,"tag":205,"props":1389,"children":1391},{"style":1390},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1392],{"type":175,"value":1393},"arg",{"type":169,"tag":205,"props":1395,"children":1396},{"style":445},[1397],{"type":175,"value":1398},")",{"type":169,"tag":205,"props":1400,"children":1401},{"style":445},[1402],{"type":175,"value":1104},{"type":169,"tag":205,"props":1404,"children":1405},{"class":207,"line":498},[1406,1410,1414,1418,1422,1426],{"type":169,"tag":205,"props":1407,"children":1408},{"style":439},[1409],{"type":175,"value":1149},{"type":169,"tag":205,"props":1411,"children":1412},{"style":445},[1413],{"type":175,"value":448},{"type":169,"tag":205,"props":1415,"children":1416},{"style":451},[1417],{"type":175,"value":1158},{"type":169,"tag":205,"props":1419,"children":1420},{"style":1161},[1421],{"type":175,"value":459},{"type":169,"tag":205,"props":1423,"children":1424},{"style":439},[1425],{"type":175,"value":1393},{"type":169,"tag":205,"props":1427,"children":1428},{"style":1161},[1429],{"type":175,"value":1181},{"type":169,"tag":205,"props":1431,"children":1432},{"class":207,"line":1143},[1433,1438,1442,1446],{"type":169,"tag":205,"props":1434,"children":1435},{"style":445},[1436],{"type":175,"value":1437},"}",{"type":169,"tag":205,"props":1439,"children":1440},{"style":439},[1441],{"type":175,"value":459},{"type":169,"tag":205,"props":1443,"children":1444},{"style":467},[1445],{"type":175,"value":302},{"type":169,"tag":205,"props":1447,"children":1448},{"style":439},[1449],{"type":175,"value":1181},{"type":169,"tag":183,"props":1451,"children":1452},{},[1453],{"type":175,"value":1454},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":169,"tag":194,"props":1456,"children":1458},{"className":427,"code":1457,"language":429,"meta":163,"style":163},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1459],{"type":169,"tag":201,"props":1460,"children":1461},{"__ignoreMap":163},[1462,1514,1552,1579],{"type":169,"tag":205,"props":1463,"children":1464},{"class":207,"line":208},[1465,1471,1476,1481,1485,1490,1494,1499,1504,1509],{"type":169,"tag":205,"props":1466,"children":1468},{"style":1467},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1469],{"type":175,"value":1470},"try",{"type":169,"tag":205,"props":1472,"children":1473},{"style":445},[1474],{"type":175,"value":1475}," {",{"type":169,"tag":205,"props":1477,"children":1478},{"style":1467},[1479],{"type":175,"value":1480}," throw",{"type":169,"tag":205,"props":1482,"children":1483},{"style":218},[1484],{"type":175,"value":221},{"type":169,"tag":205,"props":1486,"children":1487},{"style":224},[1488],{"type":175,"value":1489},"test",{"type":169,"tag":205,"props":1491,"children":1492},{"style":218},[1493],{"type":175,"value":232},{"type":169,"tag":205,"props":1495,"children":1496},{"style":445},[1497],{"type":175,"value":1498}," }",{"type":169,"tag":205,"props":1500,"children":1501},{"style":1467},[1502],{"type":175,"value":1503}," catch",{"type":169,"tag":205,"props":1505,"children":1506},{"style":439},[1507],{"type":175,"value":1508}," (e) ",{"type":169,"tag":205,"props":1510,"children":1511},{"style":445},[1512],{"type":175,"value":1513},"{\n",{"type":169,"tag":205,"props":1515,"children":1516},{"class":207,"line":498},[1517,1521,1525,1529,1533,1538,1542,1547],{"type":169,"tag":205,"props":1518,"children":1519},{"style":439},[1520],{"type":175,"value":1149},{"type":169,"tag":205,"props":1522,"children":1523},{"style":445},[1524],{"type":175,"value":448},{"type":169,"tag":205,"props":1526,"children":1527},{"style":451},[1528],{"type":175,"value":1158},{"type":169,"tag":205,"props":1530,"children":1531},{"style":1161},[1532],{"type":175,"value":459},{"type":169,"tag":205,"props":1534,"children":1535},{"style":439},[1536],{"type":175,"value":1537},"e",{"type":169,"tag":205,"props":1539,"children":1540},{"style":1161},[1541],{"type":175,"value":1398},{"type":169,"tag":205,"props":1543,"children":1544},{"style":445},[1545],{"type":175,"value":1546},";",{"type":169,"tag":205,"props":1548,"children":1549},{"style":492},[1550],{"type":175,"value":1551}," // test\n",{"type":169,"tag":205,"props":1553,"children":1554},{"class":207,"line":1143},[1555,1560,1565,1569,1574],{"type":169,"tag":205,"props":1556,"children":1557},{"style":763},[1558],{"type":175,"value":1559},"  var",{"type":169,"tag":205,"props":1561,"children":1562},{"style":439},[1563],{"type":175,"value":1564}," e",{"type":169,"tag":205,"props":1566,"children":1567},{"style":235},[1568],{"type":175,"value":1127},{"type":169,"tag":205,"props":1570,"children":1571},{"style":467},[1572],{"type":175,"value":1573}," 1",{"type":169,"tag":205,"props":1575,"children":1576},{"style":445},[1577],{"type":175,"value":1578},";\n",{"type":169,"tag":205,"props":1580,"children":1581},{"class":207,"line":1184},[1582],{"type":169,"tag":205,"props":1583,"children":1584},{"style":445},[1585],{"type":175,"value":1190},{"type":169,"tag":183,"props":1587,"children":1588},{},[1589],{"type":175,"value":1590},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":169,"tag":183,"props":1592,"children":1593},{},[1594],{"type":175,"value":1595},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":169,"tag":194,"props":1597,"children":1599},{"className":427,"code":1598,"language":429,"meta":163,"style":163},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1600],{"type":169,"tag":201,"props":1601,"children":1602},{"__ignoreMap":163},[1603,1611,1684,1750,1794,1836,1844,1851,1859,1874,1934,1995,2036,2077,2086,2094],{"type":169,"tag":205,"props":1604,"children":1605},{"class":207,"line":208},[1606],{"type":169,"tag":205,"props":1607,"children":1608},{"style":492},[1609],{"type":175,"value":1610},"// it works !\n",{"type":169,"tag":205,"props":1612,"children":1613},{"class":207,"line":498},[1614,1619,1624,1629,1634,1639,1643,1647,1652,1657,1662,1666,1671,1676,1680],{"type":169,"tag":205,"props":1615,"children":1617},{"style":1616},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1618],{"type":175,"value":1489},{"type":169,"tag":205,"props":1620,"children":1621},{"style":445},[1622],{"type":175,"value":1623},":",{"type":169,"tag":205,"props":1625,"children":1626},{"style":1467},[1627],{"type":175,"value":1628}," for",{"type":169,"tag":205,"props":1630,"children":1631},{"style":439},[1632],{"type":175,"value":1633}," (i ",{"type":169,"tag":205,"props":1635,"children":1636},{"style":235},[1637],{"type":175,"value":1638},"=",{"type":169,"tag":205,"props":1640,"children":1641},{"style":467},[1642],{"type":175,"value":1573},{"type":169,"tag":205,"props":1644,"children":1645},{"style":445},[1646],{"type":175,"value":1546},{"type":169,"tag":205,"props":1648,"children":1649},{"style":439},[1650],{"type":175,"value":1651}," i ",{"type":169,"tag":205,"props":1653,"children":1654},{"style":235},[1655],{"type":175,"value":1656},"\u003C",{"type":169,"tag":205,"props":1658,"children":1659},{"style":467},[1660],{"type":175,"value":1661}," 3",{"type":169,"tag":205,"props":1663,"children":1664},{"style":445},[1665],{"type":175,"value":1546},{"type":169,"tag":205,"props":1667,"children":1668},{"style":439},[1669],{"type":175,"value":1670}," i",{"type":169,"tag":205,"props":1672,"children":1673},{"style":235},[1674],{"type":175,"value":1675},"++",{"type":169,"tag":205,"props":1677,"children":1678},{"style":439},[1679],{"type":175,"value":489},{"type":169,"tag":205,"props":1681,"children":1682},{"style":445},[1683],{"type":175,"value":1513},{"type":169,"tag":205,"props":1685,"children":1686},{"class":207,"line":1143},[1687,1692,1697,1702,1706,1711,1715,1720,1725,1730,1734,1738,1742,1746],{"type":169,"tag":205,"props":1688,"children":1689},{"style":1467},[1690],{"type":175,"value":1691},"  for",{"type":169,"tag":205,"props":1693,"children":1694},{"style":1161},[1695],{"type":175,"value":1696}," (",{"type":169,"tag":205,"props":1698,"children":1699},{"style":439},[1700],{"type":175,"value":1701},"j",{"type":169,"tag":205,"props":1703,"children":1704},{"style":235},[1705],{"type":175,"value":1127},{"type":169,"tag":205,"props":1707,"children":1708},{"style":467},[1709],{"type":175,"value":1710}," 5",{"type":169,"tag":205,"props":1712,"children":1713},{"style":445},[1714],{"type":175,"value":1546},{"type":169,"tag":205,"props":1716,"children":1717},{"style":439},[1718],{"type":175,"value":1719}," j",{"type":169,"tag":205,"props":1721,"children":1722},{"style":235},[1723],{"type":175,"value":1724}," \u003C",{"type":169,"tag":205,"props":1726,"children":1727},{"style":467},[1728],{"type":175,"value":1729}," 8",{"type":169,"tag":205,"props":1731,"children":1732},{"style":445},[1733],{"type":175,"value":1546},{"type":169,"tag":205,"props":1735,"children":1736},{"style":439},[1737],{"type":175,"value":1719},{"type":169,"tag":205,"props":1739,"children":1740},{"style":235},[1741],{"type":175,"value":1675},{"type":169,"tag":205,"props":1743,"children":1744},{"style":1161},[1745],{"type":175,"value":489},{"type":169,"tag":205,"props":1747,"children":1748},{"style":445},[1749],{"type":175,"value":1513},{"type":169,"tag":205,"props":1751,"children":1752},{"class":207,"line":1184},[1753,1758,1762,1766,1771,1776,1780,1785,1790],{"type":169,"tag":205,"props":1754,"children":1755},{"style":1467},[1756],{"type":175,"value":1757},"    if",{"type":169,"tag":205,"props":1759,"children":1760},{"style":1161},[1761],{"type":175,"value":1696},{"type":169,"tag":205,"props":1763,"children":1764},{"style":439},[1765],{"type":175,"value":1701},{"type":169,"tag":205,"props":1767,"children":1768},{"style":235},[1769],{"type":175,"value":1770}," ===",{"type":169,"tag":205,"props":1772,"children":1773},{"style":467},[1774],{"type":175,"value":1775}," 6",{"type":169,"tag":205,"props":1777,"children":1778},{"style":1161},[1779],{"type":175,"value":489},{"type":169,"tag":205,"props":1781,"children":1782},{"style":1467},[1783],{"type":175,"value":1784},"continue",{"type":169,"tag":205,"props":1786,"children":1787},{"style":1616},[1788],{"type":175,"value":1789}," test",{"type":169,"tag":205,"props":1791,"children":1792},{"style":445},[1793],{"type":175,"value":1578},{"type":169,"tag":205,"props":1795,"children":1796},{"class":207,"line":1193},[1797,1802,1807,1811,1815,1819,1824,1828,1832],{"type":169,"tag":205,"props":1798,"children":1799},{"style":1467},[1800],{"type":175,"value":1801},"    else",{"type":169,"tag":205,"props":1803,"children":1804},{"style":439},[1805],{"type":175,"value":1806}," console",{"type":169,"tag":205,"props":1808,"children":1809},{"style":445},[1810],{"type":175,"value":448},{"type":169,"tag":205,"props":1812,"children":1813},{"style":451},[1814],{"type":175,"value":1158},{"type":169,"tag":205,"props":1816,"children":1817},{"style":1161},[1818],{"type":175,"value":459},{"type":169,"tag":205,"props":1820,"children":1821},{"style":439},[1822],{"type":175,"value":1823},"i",{"type":169,"tag":205,"props":1825,"children":1826},{"style":445},[1827],{"type":175,"value":475},{"type":169,"tag":205,"props":1829,"children":1830},{"style":439},[1831],{"type":175,"value":1719},{"type":169,"tag":205,"props":1833,"children":1834},{"style":1161},[1835],{"type":175,"value":1181},{"type":169,"tag":205,"props":1837,"children":1838},{"class":207,"line":1228},[1839],{"type":169,"tag":205,"props":1840,"children":1841},{"style":445},[1842],{"type":175,"value":1843},"  }\n",{"type":169,"tag":205,"props":1845,"children":1846},{"class":207,"line":1265},[1847],{"type":169,"tag":205,"props":1848,"children":1849},{"style":445},[1850],{"type":175,"value":1190},{"type":169,"tag":205,"props":1852,"children":1853},{"class":207,"line":1273},[1854],{"type":169,"tag":205,"props":1855,"children":1856},{"style":492},[1857],{"type":175,"value":1858},"// SyntaxError !\n",{"type":169,"tag":205,"props":1860,"children":1861},{"class":207,"line":1300},[1862,1866,1870],{"type":169,"tag":205,"props":1863,"children":1864},{"style":1616},[1865],{"type":175,"value":1489},{"type":169,"tag":205,"props":1867,"children":1868},{"style":445},[1869],{"type":175,"value":1623},{"type":169,"tag":205,"props":1871,"children":1872},{"style":445},[1873],{"type":175,"value":1104},{"type":169,"tag":205,"props":1875,"children":1877},{"class":207,"line":1876},10,[1878,1882,1886,1890,1894,1898,1902,1906,1910,1914,1918,1922,1926,1930],{"type":169,"tag":205,"props":1879,"children":1880},{"style":1467},[1881],{"type":175,"value":1691},{"type":169,"tag":205,"props":1883,"children":1884},{"style":1161},[1885],{"type":175,"value":1696},{"type":169,"tag":205,"props":1887,"children":1888},{"style":439},[1889],{"type":175,"value":1823},{"type":169,"tag":205,"props":1891,"children":1892},{"style":235},[1893],{"type":175,"value":1127},{"type":169,"tag":205,"props":1895,"children":1896},{"style":467},[1897],{"type":175,"value":1573},{"type":169,"tag":205,"props":1899,"children":1900},{"style":445},[1901],{"type":175,"value":1546},{"type":169,"tag":205,"props":1903,"children":1904},{"style":439},[1905],{"type":175,"value":1670},{"type":169,"tag":205,"props":1907,"children":1908},{"style":235},[1909],{"type":175,"value":1724},{"type":169,"tag":205,"props":1911,"children":1912},{"style":467},[1913],{"type":175,"value":1661},{"type":169,"tag":205,"props":1915,"children":1916},{"style":445},[1917],{"type":175,"value":1546},{"type":169,"tag":205,"props":1919,"children":1920},{"style":439},[1921],{"type":175,"value":1670},{"type":169,"tag":205,"props":1923,"children":1924},{"style":235},[1925],{"type":175,"value":1675},{"type":169,"tag":205,"props":1927,"children":1928},{"style":1161},[1929],{"type":175,"value":489},{"type":169,"tag":205,"props":1931,"children":1932},{"style":445},[1933],{"type":175,"value":1513},{"type":169,"tag":205,"props":1935,"children":1937},{"class":207,"line":1936},11,[1938,1943,1947,1951,1955,1959,1963,1967,1971,1975,1979,1983,1987,1991],{"type":169,"tag":205,"props":1939,"children":1940},{"style":1467},[1941],{"type":175,"value":1942},"    for",{"type":169,"tag":205,"props":1944,"children":1945},{"style":1161},[1946],{"type":175,"value":1696},{"type":169,"tag":205,"props":1948,"children":1949},{"style":439},[1950],{"type":175,"value":1701},{"type":169,"tag":205,"props":1952,"children":1953},{"style":235},[1954],{"type":175,"value":1127},{"type":169,"tag":205,"props":1956,"children":1957},{"style":467},[1958],{"type":175,"value":1710},{"type":169,"tag":205,"props":1960,"children":1961},{"style":445},[1962],{"type":175,"value":1546},{"type":169,"tag":205,"props":1964,"children":1965},{"style":439},[1966],{"type":175,"value":1719},{"type":169,"tag":205,"props":1968,"children":1969},{"style":235},[1970],{"type":175,"value":1724},{"type":169,"tag":205,"props":1972,"children":1973},{"style":467},[1974],{"type":175,"value":1729},{"type":169,"tag":205,"props":1976,"children":1977},{"style":445},[1978],{"type":175,"value":1546},{"type":169,"tag":205,"props":1980,"children":1981},{"style":439},[1982],{"type":175,"value":1719},{"type":169,"tag":205,"props":1984,"children":1985},{"style":235},[1986],{"type":175,"value":1675},{"type":169,"tag":205,"props":1988,"children":1989},{"style":1161},[1990],{"type":175,"value":489},{"type":169,"tag":205,"props":1992,"children":1993},{"style":445},[1994],{"type":175,"value":1513},{"type":169,"tag":205,"props":1996,"children":1998},{"class":207,"line":1997},12,[1999,2004,2008,2012,2016,2020,2024,2028,2032],{"type":169,"tag":205,"props":2000,"children":2001},{"style":1467},[2002],{"type":175,"value":2003},"      if",{"type":169,"tag":205,"props":2005,"children":2006},{"style":1161},[2007],{"type":175,"value":1696},{"type":169,"tag":205,"props":2009,"children":2010},{"style":439},[2011],{"type":175,"value":1701},{"type":169,"tag":205,"props":2013,"children":2014},{"style":235},[2015],{"type":175,"value":1770},{"type":169,"tag":205,"props":2017,"children":2018},{"style":467},[2019],{"type":175,"value":1775},{"type":169,"tag":205,"props":2021,"children":2022},{"style":1161},[2023],{"type":175,"value":489},{"type":169,"tag":205,"props":2025,"children":2026},{"style":1467},[2027],{"type":175,"value":1784},{"type":169,"tag":205,"props":2029,"children":2030},{"style":1616},[2031],{"type":175,"value":1789},{"type":169,"tag":205,"props":2033,"children":2034},{"style":445},[2035],{"type":175,"value":1578},{"type":169,"tag":205,"props":2037,"children":2039},{"class":207,"line":2038},13,[2040,2045,2049,2053,2057,2061,2065,2069,2073],{"type":169,"tag":205,"props":2041,"children":2042},{"style":1467},[2043],{"type":175,"value":2044},"      else",{"type":169,"tag":205,"props":2046,"children":2047},{"style":439},[2048],{"type":175,"value":1806},{"type":169,"tag":205,"props":2050,"children":2051},{"style":445},[2052],{"type":175,"value":448},{"type":169,"tag":205,"props":2054,"children":2055},{"style":451},[2056],{"type":175,"value":1158},{"type":169,"tag":205,"props":2058,"children":2059},{"style":1161},[2060],{"type":175,"value":459},{"type":169,"tag":205,"props":2062,"children":2063},{"style":439},[2064],{"type":175,"value":1823},{"type":169,"tag":205,"props":2066,"children":2067},{"style":445},[2068],{"type":175,"value":475},{"type":169,"tag":205,"props":2070,"children":2071},{"style":439},[2072],{"type":175,"value":1719},{"type":169,"tag":205,"props":2074,"children":2075},{"style":1161},[2076],{"type":175,"value":1181},{"type":169,"tag":205,"props":2078,"children":2080},{"class":207,"line":2079},14,[2081],{"type":169,"tag":205,"props":2082,"children":2083},{"style":445},[2084],{"type":175,"value":2085},"    }\n",{"type":169,"tag":205,"props":2087,"children":2089},{"class":207,"line":2088},15,[2090],{"type":169,"tag":205,"props":2091,"children":2092},{"style":445},[2093],{"type":175,"value":1843},{"type":169,"tag":205,"props":2095,"children":2097},{"class":207,"line":2096},16,[2098],{"type":169,"tag":205,"props":2099,"children":2100},{"style":445},[2101],{"type":175,"value":1190},{"type":169,"tag":183,"props":2103,"children":2104},{},[2105],{"type":175,"value":2106},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":169,"tag":183,"props":2108,"children":2109},{},[2110],{"type":175,"value":2111},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":169,"tag":177,"props":2113,"children":2115},{"id":2114},"模块",[2116],{"type":175,"value":2114},{"type":169,"tag":183,"props":2118,"children":2119},{},[2120],{"type":175,"value":2121},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":169,"tag":194,"props":2123,"children":2125},{"className":427,"code":2124,"language":429,"meta":163,"style":163},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2126],{"type":169,"tag":201,"props":2127,"children":2128},{"__ignoreMap":163},[2129,2177],{"type":169,"tag":205,"props":2130,"children":2131},{"class":207,"line":208},[2132,2137,2142,2146,2150,2155,2159,2164,2168,2173],{"type":169,"tag":205,"props":2133,"children":2134},{"style":1467},[2135],{"type":175,"value":2136},"import",{"type":169,"tag":205,"props":2138,"children":2139},{"style":439},[2140],{"type":175,"value":2141}," defaultExport",{"type":169,"tag":205,"props":2143,"children":2144},{"style":445},[2145],{"type":175,"value":475},{"type":169,"tag":205,"props":2147,"children":2148},{"style":445},[2149],{"type":175,"value":1475},{"type":169,"tag":205,"props":2151,"children":2152},{"style":439},[2153],{"type":175,"value":2154}," toolA",{"type":169,"tag":205,"props":2156,"children":2157},{"style":445},[2158],{"type":175,"value":1498},{"type":169,"tag":205,"props":2160,"children":2161},{"style":1467},[2162],{"type":175,"value":2163}," from",{"type":169,"tag":205,"props":2165,"children":2166},{"style":218},[2167],{"type":175,"value":221},{"type":169,"tag":205,"props":2169,"children":2170},{"style":224},[2171],{"type":175,"value":2172},"test.mjs",{"type":169,"tag":205,"props":2174,"children":2175},{"style":218},[2176],{"type":175,"value":1140},{"type":169,"tag":205,"props":2178,"children":2179},{"class":207,"line":498},[2180,2184,2188,2192,2197,2202,2207,2212,2216,2220],{"type":169,"tag":205,"props":2181,"children":2182},{"style":1467},[2183],{"type":175,"value":2136},{"type":169,"tag":205,"props":2185,"children":2186},{"style":439},[2187],{"type":175,"value":2141},{"type":169,"tag":205,"props":2189,"children":2190},{"style":445},[2191],{"type":175,"value":475},{"type":169,"tag":205,"props":2193,"children":2194},{"style":518},[2195],{"type":175,"value":2196}," *",{"type":169,"tag":205,"props":2198,"children":2199},{"style":1467},[2200],{"type":175,"value":2201}," as",{"type":169,"tag":205,"props":2203,"children":2204},{"style":439},[2205],{"type":175,"value":2206}," namespace ",{"type":169,"tag":205,"props":2208,"children":2209},{"style":1467},[2210],{"type":175,"value":2211},"from",{"type":169,"tag":205,"props":2213,"children":2214},{"style":218},[2215],{"type":175,"value":221},{"type":169,"tag":205,"props":2217,"children":2218},{"style":224},[2219],{"type":175,"value":2172},{"type":169,"tag":205,"props":2221,"children":2222},{"style":218},[2223],{"type":175,"value":1140},{"type":169,"tag":183,"props":2225,"children":2226},{},[2227],{"type":175,"value":2228},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":169,"tag":183,"props":2230,"children":2231},{},[2232],{"type":175,"value":2233},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":169,"tag":183,"props":2235,"children":2236},{},[2237],{"type":175,"value":2238},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":169,"tag":177,"props":2240,"children":2242},{"id":2241},"严格模式",[2243],{"type":175,"value":2241},{"type":169,"tag":183,"props":2245,"children":2246},{},[2247],{"type":175,"value":2248},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":169,"tag":183,"props":2250,"children":2251},{},[2252],{"type":175,"value":2253},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":169,"tag":183,"props":2255,"children":2256},{},[2257],{"type":175,"value":2258},"总的来说，严格模式一共有七条限制：",{"type":169,"tag":283,"props":2260,"children":2261},{},[2262,2267,2272,2277,2282,2287,2292,2297,2302,2307],{"type":169,"tag":287,"props":2263,"children":2264},{},[2265],{"type":175,"value":2266},"对象字面量中不能有相同的属性声明",{"type":169,"tag":287,"props":2268,"children":2269},{},[2270],{"type":175,"value":2271},"函数实参列表中不能有同名参数",{"type":169,"tag":287,"props":2273,"children":2274},{},[2275],{"type":175,"value":2276},"不能声明、重写或删除 eval、arguments 标识符",{"type":169,"tag":287,"props":2278,"children":2279},{},[2280],{"type":175,"value":2281},"不允许使用八进制数字字面量",{"type":169,"tag":287,"props":2283,"children":2284},{},[2285],{"type":175,"value":2286},"不能删除显式声明的标识符、名字或具名函数",{"type":169,"tag":287,"props":2288,"children":2289},{},[2290],{"type":175,"value":2291},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":169,"tag":287,"props":2293,"children":2294},{},[2295],{"type":175,"value":2296},"禁用 with 语句",{"type":169,"tag":287,"props":2298,"children":2299},{},[2300],{"type":175,"value":2301},"禁用隐式声明",{"type":169,"tag":287,"props":2303,"children":2304},{},[2305],{"type":175,"value":2306},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":169,"tag":287,"props":2308,"children":2309},{},[2310],{"type":175,"value":2311},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":169,"tag":183,"props":2313,"children":2314},{},[2315],{"type":175,"value":2316},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":169,"tag":283,"props":2318,"children":2319},{},[2320,2325],{"type":169,"tag":287,"props":2321,"children":2322},{},[2323],{"type":175,"value":2324},"间接调用 eval 函数",{"type":169,"tag":287,"props":2326,"children":2327},{},[2328],{"type":175,"value":2329},"使用 new Function 构造的新函数",{"type":169,"tag":177,"props":2331,"children":2333},{"id":2332},"运算符的二义性",[2334],{"type":175,"value":2332},{"type":169,"tag":183,"props":2336,"children":2337},{},[2338],{"type":175,"value":2339},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":169,"tag":183,"props":2341,"children":2342},{},[2343],{"type":175,"value":2344},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":169,"tag":183,"props":2346,"children":2347},{},[2348],{"type":175,"value":2349},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":169,"tag":183,"props":2351,"children":2352},{},[2353],{"type":175,"value":2354},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":169,"tag":170,"props":2356,"children":2358},{"id":2357},"面向对象语言特性",[2359],{"type":175,"value":2357},{"type":169,"tag":177,"props":2361,"children":2363},{"id":2362},"语法综述-1",[2364],{"type":175,"value":179},{"type":169,"tag":183,"props":2366,"children":2367},{},[2368],{"type":175,"value":2369},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":169,"tag":183,"props":2371,"children":2372},{},[2373],{"type":175,"value":2374},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":169,"tag":183,"props":2376,"children":2377},{},[2378],{"type":175,"value":2379},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":169,"tag":183,"props":2381,"children":2382},{},[2383],{"type":175,"value":2384},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":169,"tag":194,"props":2386,"children":2388},{"className":427,"code":2387,"language":429,"meta":163,"style":163},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2389],{"type":169,"tag":201,"props":2390,"children":2391},{"__ignoreMap":163},[2392,2413,2440,2469,2477,2494,2507,2514,2522,2530,2554],{"type":169,"tag":205,"props":2393,"children":2394},{"class":207,"line":208},[2395,2400,2405,2409],{"type":169,"tag":205,"props":2396,"children":2397},{"style":763},[2398],{"type":175,"value":2399},"var",{"type":169,"tag":205,"props":2401,"children":2402},{"style":439},[2403],{"type":175,"value":2404}," obj",{"type":169,"tag":205,"props":2406,"children":2407},{"style":235},[2408],{"type":175,"value":1638},{"type":169,"tag":205,"props":2410,"children":2411},{"style":445},[2412],{"type":175,"value":1513},{"type":169,"tag":205,"props":2414,"children":2415},{"class":207,"line":498},[2416,2421,2426,2430,2435],{"type":169,"tag":205,"props":2417,"children":2418},{"style":763},[2419],{"type":175,"value":2420},"  set",{"type":169,"tag":205,"props":2422,"children":2424},{"style":2423},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2425],{"type":175,"value":1789},{"type":169,"tag":205,"props":2427,"children":2428},{"style":445},[2429],{"type":175,"value":459},{"type":169,"tag":205,"props":2431,"children":2432},{"style":1390},[2433],{"type":175,"value":2434},"x",{"type":169,"tag":205,"props":2436,"children":2437},{"style":445},[2438],{"type":175,"value":2439},"){\n",{"type":169,"tag":205,"props":2441,"children":2442},{"class":207,"line":1143},[2443,2448,2452,2456,2461,2465],{"type":169,"tag":205,"props":2444,"children":2445},{"style":439},[2446],{"type":175,"value":2447},"    c",{"type":169,"tag":205,"props":2449,"children":2450},{"style":235},[2451],{"type":175,"value":1638},{"type":169,"tag":205,"props":2453,"children":2454},{"style":218},[2455],{"type":175,"value":232},{"type":169,"tag":205,"props":2457,"children":2458},{"style":224},[2459],{"type":175,"value":2460},"other",{"type":169,"tag":205,"props":2462,"children":2463},{"style":218},[2464],{"type":175,"value":232},{"type":169,"tag":205,"props":2466,"children":2467},{"style":445},[2468],{"type":175,"value":1578},{"type":169,"tag":205,"props":2470,"children":2471},{"class":207,"line":1184},[2472],{"type":169,"tag":205,"props":2473,"children":2474},{"style":445},[2475],{"type":175,"value":2476},"  },\n",{"type":169,"tag":205,"props":2478,"children":2479},{"class":207,"line":1193},[2480,2485,2489],{"type":169,"tag":205,"props":2481,"children":2482},{"style":763},[2483],{"type":175,"value":2484},"  get",{"type":169,"tag":205,"props":2486,"children":2487},{"style":2423},[2488],{"type":175,"value":1789},{"type":169,"tag":205,"props":2490,"children":2491},{"style":445},[2492],{"type":175,"value":2493},"(){\n",{"type":169,"tag":205,"props":2495,"children":2496},{"class":207,"line":1228},[2497,2502],{"type":169,"tag":205,"props":2498,"children":2499},{"style":1467},[2500],{"type":175,"value":2501},"    return",{"type":169,"tag":205,"props":2503,"children":2504},{"style":439},[2505],{"type":175,"value":2506}," c\n",{"type":169,"tag":205,"props":2508,"children":2509},{"class":207,"line":1265},[2510],{"type":169,"tag":205,"props":2511,"children":2512},{"style":445},[2513],{"type":175,"value":2476},{"type":169,"tag":205,"props":2515,"children":2516},{"class":207,"line":1273},[2517],{"type":169,"tag":205,"props":2518,"children":2519},{"style":492},[2520],{"type":175,"value":2521},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":169,"tag":205,"props":2523,"children":2524},{"class":207,"line":1300},[2525],{"type":169,"tag":205,"props":2526,"children":2527},{"style":492},[2528],{"type":175,"value":2529},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":169,"tag":205,"props":2531,"children":2532},{"class":207,"line":1876},[2533,2538,2542,2546,2550],{"type":169,"tag":205,"props":2534,"children":2535},{"style":1161},[2536],{"type":175,"value":2537},"  test",{"type":169,"tag":205,"props":2539,"children":2540},{"style":445},[2541],{"type":175,"value":1623},{"type":169,"tag":205,"props":2543,"children":2544},{"style":218},[2545],{"type":175,"value":221},{"type":169,"tag":205,"props":2547,"children":2548},{"style":224},[2549],{"type":175,"value":1489},{"type":169,"tag":205,"props":2551,"children":2552},{"style":218},[2553],{"type":175,"value":1140},{"type":169,"tag":205,"props":2555,"children":2556},{"class":207,"line":1936},[2557],{"type":169,"tag":205,"props":2558,"children":2559},{"style":445},[2560],{"type":175,"value":1190},{"type":169,"tag":183,"props":2562,"children":2563},{},[2564],{"type":175,"value":2565},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":169,"tag":194,"props":2567,"children":2569},{"className":427,"code":2568,"language":429,"meta":163,"style":163},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2570],{"type":169,"tag":201,"props":2571,"children":2572},{"__ignoreMap":163},[2573,2581,2625],{"type":169,"tag":205,"props":2574,"children":2575},{"class":207,"line":208},[2576],{"type":169,"tag":205,"props":2577,"children":2578},{"style":492},[2579],{"type":175,"value":2580},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":169,"tag":205,"props":2582,"children":2583},{"class":207,"line":498},[2584,2589,2593,2598,2602,2607,2612,2616,2621],{"type":169,"tag":205,"props":2585,"children":2587},{"style":2586},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2588],{"type":175,"value":1200},{"type":169,"tag":205,"props":2590,"children":2591},{"style":445},[2592],{"type":175,"value":448},{"type":169,"tag":205,"props":2594,"children":2595},{"style":1197},[2596],{"type":175,"value":2597},"prototype",{"type":169,"tag":205,"props":2599,"children":2600},{"style":235},[2601],{"type":175,"value":1127},{"type":169,"tag":205,"props":2603,"children":2604},{"style":235},[2605],{"type":175,"value":2606}," new",{"type":169,"tag":205,"props":2608,"children":2609},{"style":451},[2610],{"type":175,"value":2611}," B",{"type":169,"tag":205,"props":2613,"children":2614},{"style":439},[2615],{"type":175,"value":459},{"type":169,"tag":205,"props":2617,"children":2618},{"style":492},[2619],{"type":175,"value":2620},"/* 传入参数 */",{"type":169,"tag":205,"props":2622,"children":2623},{"style":439},[2624],{"type":175,"value":1181},{"type":169,"tag":205,"props":2626,"children":2627},{"class":207,"line":1143},[2628,2632,2636,2640,2644,2649,2653],{"type":169,"tag":205,"props":2629,"children":2630},{"style":2586},[2631],{"type":175,"value":1200},{"type":169,"tag":205,"props":2633,"children":2634},{"style":445},[2635],{"type":175,"value":448},{"type":169,"tag":205,"props":2637,"children":2638},{"style":1197},[2639],{"type":175,"value":2597},{"type":169,"tag":205,"props":2641,"children":2642},{"style":445},[2643],{"type":175,"value":448},{"type":169,"tag":205,"props":2645,"children":2646},{"style":1197},[2647],{"type":175,"value":2648},"constructor",{"type":169,"tag":205,"props":2650,"children":2651},{"style":235},[2652],{"type":175,"value":1127},{"type":169,"tag":205,"props":2654,"children":2655},{"style":1197},[2656],{"type":175,"value":2657}," A\n",{"type":169,"tag":183,"props":2659,"children":2660},{},[2661],{"type":175,"value":2662},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":169,"tag":183,"props":2664,"children":2665},{},[2666],{"type":175,"value":2667},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":169,"tag":183,"props":2669,"children":2670},{},[2671],{"type":175,"value":2672},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":169,"tag":183,"props":2674,"children":2675},{},[2676],{"type":175,"value":2677},"总结一下遍历对象成员的方法：",{"type":169,"tag":778,"props":2679,"children":2680},{},[2681,2705],{"type":169,"tag":782,"props":2682,"children":2683},{},[2684],{"type":169,"tag":786,"props":2685,"children":2686},{},[2687,2692,2697,2701],{"type":169,"tag":790,"props":2688,"children":2689},{},[2690],{"type":175,"value":2691},"键名",{"type":169,"tag":790,"props":2693,"children":2694},{},[2695],{"type":175,"value":2696},"显隐式",{"type":169,"tag":790,"props":2698,"children":2699},{},[2700],{"type":175,"value":172},{"type":169,"tag":790,"props":2702,"children":2703},{},[2704],{"type":175,"value":799},{"type":169,"tag":801,"props":2706,"children":2707},{},[2708,2731,2751,2773],{"type":169,"tag":786,"props":2709,"children":2710},{},[2711,2716,2721,2726],{"type":169,"tag":808,"props":2712,"children":2713},{},[2714],{"type":175,"value":2715},"一般键名",{"type":169,"tag":808,"props":2717,"children":2718},{},[2719],{"type":175,"value":2720},"显式",{"type":169,"tag":808,"props":2722,"children":2723},{},[2724],{"type":175,"value":2725},"for...in",{"type":169,"tag":808,"props":2727,"children":2728},{},[2729],{"type":175,"value":2730},"可列举的成员名（包含原型链）",{"type":169,"tag":786,"props":2732,"children":2733},{},[2734,2738,2742,2747],{"type":169,"tag":808,"props":2735,"children":2736},{},[2737],{"type":175,"value":2715},{"type":169,"tag":808,"props":2739,"children":2740},{},[2741],{"type":175,"value":2720},{"type":169,"tag":808,"props":2743,"children":2744},{},[2745],{"type":175,"value":2746},"Object.prototype.map、Object.prototype.entries、...",{"type":169,"tag":808,"props":2748,"children":2749},{},[2750],{"type":175,"value":1051},{"type":169,"tag":786,"props":2752,"children":2753},{},[2754,2758,2763,2768],{"type":169,"tag":808,"props":2755,"children":2756},{},[2757],{"type":175,"value":2715},{"type":169,"tag":808,"props":2759,"children":2760},{},[2761],{"type":175,"value":2762},"显式 & 隐式",{"type":169,"tag":808,"props":2764,"children":2765},{},[2766],{"type":175,"value":2767},"Object.getOwnPropertyNames()",{"type":169,"tag":808,"props":2769,"children":2770},{},[2771],{"type":175,"value":2772},"所有非符号的自由属性名",{"type":169,"tag":786,"props":2774,"children":2775},{},[2776,2781,2785,2790],{"type":169,"tag":808,"props":2777,"children":2778},{},[2779],{"type":175,"value":2780},"符号键名键名",{"type":169,"tag":808,"props":2782,"children":2783},{},[2784],{"type":175,"value":2762},{"type":169,"tag":808,"props":2786,"children":2787},{},[2788],{"type":175,"value":2789},"Object.getOwnPropertySymbols()",{"type":169,"tag":808,"props":2791,"children":2792},{},[2793],{"type":175,"value":2794},"所有符号键名的自有属性名",{"type":169,"tag":183,"props":2796,"children":2797},{},[2798,2800,2805,2807,2811],{"type":175,"value":2799},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":169,"tag":205,"props":2801,"children":2802},{},[2803],{"type":175,"value":2804},"prop",{"type":175,"value":2806}," 更好的替代方案是 typeof(obj",{"type":169,"tag":205,"props":2808,"children":2809},{},[2810],{"type":175,"value":2804},{"type":175,"value":2812},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":169,"tag":183,"props":2814,"children":2815},{},[2816],{"type":175,"value":2817},"delete 运算符有些特殊的地方：",{"type":169,"tag":283,"props":2819,"children":2820},{},[2821,2826],{"type":169,"tag":287,"props":2822,"children":2823},{},[2824],{"type":175,"value":2825},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":169,"tag":287,"props":2827,"children":2828},{},[2829],{"type":175,"value":2830},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":169,"tag":177,"props":2832,"children":2834},{"id":2833},"原型继承",[2835],{"type":175,"value":2833},{"type":169,"tag":183,"props":2837,"children":2838},{},[2839],{"type":175,"value":2840},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":169,"tag":183,"props":2842,"children":2843},{},[2844],{"type":175,"value":2845},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":169,"tag":283,"props":2847,"children":2848},{},[2849,2854],{"type":169,"tag":287,"props":2850,"children":2851},{},[2852],{"type":175,"value":2853},"读对象的属性时优先读取对象的自有属性表",{"type":169,"tag":287,"props":2855,"children":2856},{},[2857],{"type":175,"value":2858},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":169,"tag":183,"props":2860,"children":2861},{},[2862],{"type":175,"value":2863},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":169,"tag":183,"props":2865,"children":2866},{},[2867],{"type":175,"value":2868},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":169,"tag":194,"props":2870,"children":2872},{"className":427,"code":2871,"language":429,"meta":163,"style":163},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[2873],{"type":169,"tag":201,"props":2874,"children":2875},{"__ignoreMap":163},[2876,2896,2935,2976],{"type":169,"tag":205,"props":2877,"children":2878},{"class":207,"line":208},[2879,2883,2887,2891],{"type":169,"tag":205,"props":2880,"children":2881},{"style":763},[2882],{"type":175,"value":1089},{"type":169,"tag":205,"props":2884,"children":2885},{"style":451},[2886],{"type":175,"value":1789},{"type":169,"tag":205,"props":2888,"children":2889},{"style":445},[2890],{"type":175,"value":1099},{"type":169,"tag":205,"props":2892,"children":2893},{"style":445},[2894],{"type":175,"value":2895}," {}\n",{"type":169,"tag":205,"props":2897,"children":2898},{"class":207,"line":498},[2899,2903,2908,2912,2916,2921,2925,2930],{"type":169,"tag":205,"props":2900,"children":2901},{"style":763},[2902],{"type":175,"value":2399},{"type":169,"tag":205,"props":2904,"children":2905},{"style":439},[2906],{"type":175,"value":2907}," a ",{"type":169,"tag":205,"props":2909,"children":2910},{"style":235},[2911],{"type":175,"value":1638},{"type":169,"tag":205,"props":2913,"children":2914},{"style":445},[2915],{"type":175,"value":1475},{"type":169,"tag":205,"props":2917,"children":2918},{"style":2423},[2919],{"type":175,"value":2920}," testb",{"type":169,"tag":205,"props":2922,"children":2923},{"style":445},[2924],{"type":175,"value":1099},{"type":169,"tag":205,"props":2926,"children":2927},{"style":445},[2928],{"type":175,"value":2929}," {}",{"type":169,"tag":205,"props":2931,"children":2932},{"style":445},[2933],{"type":175,"value":2934}," }\n",{"type":169,"tag":205,"props":2936,"children":2937},{"class":207,"line":1143},[2938,2942,2946,2951,2955,2959,2963,2967,2971],{"type":169,"tag":205,"props":2939,"children":2940},{"style":439},[2941],{"type":175,"value":266},{"type":169,"tag":205,"props":2943,"children":2944},{"style":445},[2945],{"type":175,"value":448},{"type":169,"tag":205,"props":2947,"children":2948},{"style":439},[2949],{"type":175,"value":2950},"testb",{"type":169,"tag":205,"props":2952,"children":2953},{"style":445},[2954],{"type":175,"value":448},{"type":169,"tag":205,"props":2956,"children":2957},{"style":1197},[2958],{"type":175,"value":2597},{"type":169,"tag":205,"props":2960,"children":2961},{"style":235},[2962],{"type":175,"value":1127},{"type":169,"tag":205,"props":2964,"children":2965},{"style":2586},[2966],{"type":175,"value":1789},{"type":169,"tag":205,"props":2968,"children":2969},{"style":445},[2970],{"type":175,"value":448},{"type":169,"tag":205,"props":2972,"children":2973},{"style":1197},[2974],{"type":175,"value":2975},"prototype\n",{"type":169,"tag":205,"props":2977,"children":2978},{"class":207,"line":1184},[2979,2983,2988,2992,2996,3000],{"type":169,"tag":205,"props":2980,"children":2981},{"style":235},[2982],{"type":175,"value":1279},{"type":169,"tag":205,"props":2984,"children":2985},{"style":439},[2986],{"type":175,"value":2987}," a",{"type":169,"tag":205,"props":2989,"children":2990},{"style":445},[2991],{"type":175,"value":448},{"type":169,"tag":205,"props":2993,"children":2994},{"style":451},[2995],{"type":175,"value":2950},{"type":169,"tag":205,"props":2997,"children":2998},{"style":439},[2999],{"type":175,"value":594},{"type":169,"tag":205,"props":3001,"children":3002},{"style":492},[3003],{"type":175,"value":3004},"// TypeError\n",{"type":169,"tag":183,"props":3006,"children":3007},{},[3008,3010,3018],{"type":175,"value":3009},"在",{"type":169,"tag":266,"props":3011,"children":3015},{"href":3012,"rel":3013},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3014],"nofollow",[3016],{"type":175,"value":3017},"规范",{"type":175,"value":3019},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":169,"tag":183,"props":3021,"children":3022},{},[3023],{"type":175,"value":3024},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":169,"tag":194,"props":3026,"children":3028},{"className":427,"code":3027,"language":429,"meta":163,"style":163},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3029],{"type":169,"tag":201,"props":3030,"children":3031},{"__ignoreMap":163},[3032,3052,3072],{"type":169,"tag":205,"props":3033,"children":3034},{"class":207,"line":208},[3035,3039,3044,3048],{"type":169,"tag":205,"props":3036,"children":3037},{"style":763},[3038],{"type":175,"value":1089},{"type":169,"tag":205,"props":3040,"children":3041},{"style":451},[3042],{"type":175,"value":3043}," Parent",{"type":169,"tag":205,"props":3045,"children":3046},{"style":445},[3047],{"type":175,"value":1099},{"type":169,"tag":205,"props":3049,"children":3050},{"style":445},[3051],{"type":175,"value":2895},{"type":169,"tag":205,"props":3053,"children":3054},{"class":207,"line":498},[3055,3059,3064,3068],{"type":169,"tag":205,"props":3056,"children":3057},{"style":763},[3058],{"type":175,"value":1089},{"type":169,"tag":205,"props":3060,"children":3061},{"style":451},[3062],{"type":175,"value":3063}," Child",{"type":169,"tag":205,"props":3065,"children":3066},{"style":445},[3067],{"type":175,"value":1099},{"type":169,"tag":205,"props":3069,"children":3070},{"style":445},[3071],{"type":175,"value":2895},{"type":169,"tag":205,"props":3073,"children":3074},{"class":207,"line":1143},[3075,3080,3084,3088,3092,3096,3100],{"type":169,"tag":205,"props":3076,"children":3077},{"style":2586},[3078],{"type":175,"value":3079},"Child",{"type":169,"tag":205,"props":3081,"children":3082},{"style":445},[3083],{"type":175,"value":448},{"type":169,"tag":205,"props":3085,"children":3086},{"style":1197},[3087],{"type":175,"value":2597},{"type":169,"tag":205,"props":3089,"children":3090},{"style":235},[3091],{"type":175,"value":1127},{"type":169,"tag":205,"props":3093,"children":3094},{"style":235},[3095],{"type":175,"value":2606},{"type":169,"tag":205,"props":3097,"children":3098},{"style":451},[3099],{"type":175,"value":3043},{"type":169,"tag":205,"props":3101,"children":3102},{"style":439},[3103],{"type":175,"value":3104},"()\n",{"type":169,"tag":183,"props":3106,"children":3107},{},[3108],{"type":175,"value":3109},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":169,"tag":194,"props":3111,"children":3113},{"className":427,"code":3112,"language":429,"meta":163,"style":163},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3114],{"type":169,"tag":201,"props":3115,"children":3116},{"__ignoreMap":163},[3117,3125],{"type":169,"tag":205,"props":3118,"children":3119},{"class":207,"line":208},[3120],{"type":169,"tag":205,"props":3121,"children":3122},{"style":492},[3123],{"type":175,"value":3124},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":169,"tag":205,"props":3126,"children":3127},{"class":207,"line":498},[3128,3132,3136,3140,3144,3148,3152],{"type":169,"tag":205,"props":3129,"children":3130},{"style":2586},[3131],{"type":175,"value":3079},{"type":169,"tag":205,"props":3133,"children":3134},{"style":445},[3135],{"type":175,"value":448},{"type":169,"tag":205,"props":3137,"children":3138},{"style":1197},[3139],{"type":175,"value":2597},{"type":169,"tag":205,"props":3141,"children":3142},{"style":445},[3143],{"type":175,"value":448},{"type":169,"tag":205,"props":3145,"children":3146},{"style":1197},[3147],{"type":175,"value":2648},{"type":169,"tag":205,"props":3149,"children":3150},{"style":235},[3151],{"type":175,"value":1127},{"type":169,"tag":205,"props":3153,"children":3154},{"style":439},[3155],{"type":175,"value":3156}," Child\n",{"type":169,"tag":194,"props":3158,"children":3160},{"className":427,"code":3159,"language":429,"meta":163,"style":163},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3161],{"type":169,"tag":201,"props":3162,"children":3163},{"__ignoreMap":163},[3164,3172,3191,3210,3233,3240],{"type":169,"tag":205,"props":3165,"children":3166},{"class":207,"line":208},[3167],{"type":169,"tag":205,"props":3168,"children":3169},{"style":492},[3170],{"type":175,"value":3171},"// 这种方法叫做圣杯模式\n",{"type":169,"tag":205,"props":3173,"children":3174},{"class":207,"line":498},[3175,3179,3183,3187],{"type":169,"tag":205,"props":3176,"children":3177},{"style":763},[3178],{"type":175,"value":1089},{"type":169,"tag":205,"props":3180,"children":3181},{"style":451},[3182],{"type":175,"value":3043},{"type":169,"tag":205,"props":3184,"children":3185},{"style":445},[3186],{"type":175,"value":1099},{"type":169,"tag":205,"props":3188,"children":3189},{"style":445},[3190],{"type":175,"value":2895},{"type":169,"tag":205,"props":3192,"children":3193},{"class":207,"line":1143},[3194,3198,3202,3206],{"type":169,"tag":205,"props":3195,"children":3196},{"style":763},[3197],{"type":175,"value":1089},{"type":169,"tag":205,"props":3199,"children":3200},{"style":451},[3201],{"type":175,"value":3063},{"type":169,"tag":205,"props":3203,"children":3204},{"style":445},[3205],{"type":175,"value":1099},{"type":169,"tag":205,"props":3207,"children":3208},{"style":445},[3209],{"type":175,"value":1104},{"type":169,"tag":205,"props":3211,"children":3212},{"class":207,"line":1184},[3213,3217,3221,3225,3229],{"type":169,"tag":205,"props":3214,"children":3215},{"style":1110},[3216],{"type":175,"value":1113},{"type":169,"tag":205,"props":3218,"children":3219},{"style":445},[3220],{"type":175,"value":448},{"type":169,"tag":205,"props":3222,"children":3223},{"style":1197},[3224],{"type":175,"value":2648},{"type":169,"tag":205,"props":3226,"children":3227},{"style":235},[3228],{"type":175,"value":1127},{"type":169,"tag":205,"props":3230,"children":3231},{"style":439},[3232],{"type":175,"value":3156},{"type":169,"tag":205,"props":3234,"children":3235},{"class":207,"line":1193},[3236],{"type":169,"tag":205,"props":3237,"children":3238},{"style":445},[3239],{"type":175,"value":1190},{"type":169,"tag":205,"props":3241,"children":3242},{"class":207,"line":1228},[3243,3247,3251,3255,3259,3263,3267],{"type":169,"tag":205,"props":3244,"children":3245},{"style":2586},[3246],{"type":175,"value":3079},{"type":169,"tag":205,"props":3248,"children":3249},{"style":445},[3250],{"type":175,"value":448},{"type":169,"tag":205,"props":3252,"children":3253},{"style":1197},[3254],{"type":175,"value":2597},{"type":169,"tag":205,"props":3256,"children":3257},{"style":235},[3258],{"type":175,"value":1127},{"type":169,"tag":205,"props":3260,"children":3261},{"style":235},[3262],{"type":175,"value":2606},{"type":169,"tag":205,"props":3264,"children":3265},{"style":451},[3266],{"type":175,"value":3043},{"type":169,"tag":205,"props":3268,"children":3269},{"style":439},[3270],{"type":175,"value":3104},{"type":169,"tag":183,"props":3272,"children":3273},{},[3274],{"type":175,"value":3275},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":169,"tag":177,"props":3277,"children":3279},{"id":3278},"类继承",[3280],{"type":175,"value":3278},{"type":169,"tag":183,"props":3282,"children":3283},{},[3284],{"type":175,"value":3285},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":169,"tag":194,"props":3287,"children":3289},{"className":427,"code":3288,"language":429,"meta":163,"style":163},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3290],{"type":169,"tag":201,"props":3291,"children":3292},{"__ignoreMap":163},[3293,3301,3318,3344,3352,3371,3390,3420],{"type":169,"tag":205,"props":3294,"children":3295},{"class":207,"line":208},[3296],{"type":169,"tag":205,"props":3297,"children":3298},{"style":492},[3299],{"type":175,"value":3300},"/* 类声明 */\n",{"type":169,"tag":205,"props":3302,"children":3303},{"class":207,"line":498},[3304,3309,3314],{"type":169,"tag":205,"props":3305,"children":3306},{"style":763},[3307],{"type":175,"value":3308},"class",{"type":169,"tag":205,"props":3310,"children":3312},{"style":3311},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3313],{"type":175,"value":3043},{"type":169,"tag":205,"props":3315,"children":3316},{"style":445},[3317],{"type":175,"value":2895},{"type":169,"tag":205,"props":3319,"children":3320},{"class":207,"line":1143},[3321,3325,3329,3335,3340],{"type":169,"tag":205,"props":3322,"children":3323},{"style":763},[3324],{"type":175,"value":3308},{"type":169,"tag":205,"props":3326,"children":3327},{"style":3311},[3328],{"type":175,"value":3063},{"type":169,"tag":205,"props":3330,"children":3332},{"style":3331},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3333],{"type":175,"value":3334}," extends",{"type":169,"tag":205,"props":3336,"children":3338},{"style":3337},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3339],{"type":175,"value":3043},{"type":169,"tag":205,"props":3341,"children":3342},{"style":445},[3343],{"type":175,"value":2895},{"type":169,"tag":205,"props":3345,"children":3346},{"class":207,"line":1184},[3347],{"type":169,"tag":205,"props":3348,"children":3349},{"style":492},[3350],{"type":175,"value":3351},"/* 仿制代码 */\n",{"type":169,"tag":205,"props":3353,"children":3354},{"class":207,"line":1193},[3355,3359,3363,3367],{"type":169,"tag":205,"props":3356,"children":3357},{"style":763},[3358],{"type":175,"value":1089},{"type":169,"tag":205,"props":3360,"children":3361},{"style":451},[3362],{"type":175,"value":3043},{"type":169,"tag":205,"props":3364,"children":3365},{"style":445},[3366],{"type":175,"value":812},{"type":169,"tag":205,"props":3368,"children":3369},{"style":445},[3370],{"type":175,"value":2895},{"type":169,"tag":205,"props":3372,"children":3373},{"class":207,"line":1228},[3374,3378,3382,3386],{"type":169,"tag":205,"props":3375,"children":3376},{"style":763},[3377],{"type":175,"value":1089},{"type":169,"tag":205,"props":3379,"children":3380},{"style":451},[3381],{"type":175,"value":3063},{"type":169,"tag":205,"props":3383,"children":3384},{"style":445},[3385],{"type":175,"value":812},{"type":169,"tag":205,"props":3387,"children":3388},{"style":445},[3389],{"type":175,"value":2895},{"type":169,"tag":205,"props":3391,"children":3392},{"class":207,"line":1265},[3393,3397,3401,3406,3411,3415],{"type":169,"tag":205,"props":3394,"children":3395},{"style":439},[3396],{"type":175,"value":442},{"type":169,"tag":205,"props":3398,"children":3399},{"style":445},[3400],{"type":175,"value":448},{"type":169,"tag":205,"props":3402,"children":3403},{"style":451},[3404],{"type":175,"value":3405},"setPrototypeOf",{"type":169,"tag":205,"props":3407,"children":3408},{"style":439},[3409],{"type":175,"value":3410},"(Child",{"type":169,"tag":205,"props":3412,"children":3413},{"style":445},[3414],{"type":175,"value":475},{"type":169,"tag":205,"props":3416,"children":3417},{"style":439},[3418],{"type":175,"value":3419}," Parent)\n",{"type":169,"tag":205,"props":3421,"children":3422},{"class":207,"line":1273},[3423,3427,3431,3435,3439,3443,3447,3451,3455,3459,3463,3467],{"type":169,"tag":205,"props":3424,"children":3425},{"style":439},[3426],{"type":175,"value":442},{"type":169,"tag":205,"props":3428,"children":3429},{"style":445},[3430],{"type":175,"value":448},{"type":169,"tag":205,"props":3432,"children":3433},{"style":451},[3434],{"type":175,"value":3405},{"type":169,"tag":205,"props":3436,"children":3437},{"style":439},[3438],{"type":175,"value":459},{"type":169,"tag":205,"props":3440,"children":3441},{"style":2586},[3442],{"type":175,"value":3079},{"type":169,"tag":205,"props":3444,"children":3445},{"style":445},[3446],{"type":175,"value":448},{"type":169,"tag":205,"props":3448,"children":3449},{"style":1197},[3450],{"type":175,"value":2597},{"type":169,"tag":205,"props":3452,"children":3453},{"style":445},[3454],{"type":175,"value":475},{"type":169,"tag":205,"props":3456,"children":3457},{"style":2586},[3458],{"type":175,"value":3043},{"type":169,"tag":205,"props":3460,"children":3461},{"style":445},[3462],{"type":175,"value":448},{"type":169,"tag":205,"props":3464,"children":3465},{"style":1197},[3466],{"type":175,"value":2597},{"type":169,"tag":205,"props":3468,"children":3469},{"style":439},[3470],{"type":175,"value":1181},{"type":169,"tag":183,"props":3472,"children":3473},{},[3474],{"type":175,"value":3475},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":169,"tag":183,"props":3477,"children":3478},{},[3479],{"type":175,"value":3480},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":169,"tag":183,"props":3482,"children":3483},{},[3484],{"type":175,"value":3485},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":169,"tag":194,"props":3487,"children":3489},{"className":427,"code":3488,"language":429,"meta":163,"style":163},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3490],{"type":169,"tag":201,"props":3491,"children":3492},{"__ignoreMap":163},[3493,3534,3565,3601,3630,3642],{"type":169,"tag":205,"props":3494,"children":3495},{"class":207,"line":208},[3496,3501,3505,3509,3513,3518,3522,3526,3530],{"type":169,"tag":205,"props":3497,"children":3498},{"style":2586},[3499],{"type":175,"value":3500},"object",{"type":169,"tag":205,"props":3502,"children":3503},{"style":445},[3504],{"type":175,"value":448},{"type":169,"tag":205,"props":3506,"children":3507},{"style":1197},[3508],{"type":175,"value":2597},{"type":169,"tag":205,"props":3510,"children":3511},{"style":445},[3512],{"type":175,"value":448},{"type":169,"tag":205,"props":3514,"children":3515},{"style":451},[3516],{"type":175,"value":3517},"method",{"type":169,"tag":205,"props":3519,"children":3520},{"style":235},[3521],{"type":175,"value":1127},{"type":169,"tag":205,"props":3523,"children":3524},{"style":763},[3525],{"type":175,"value":1217},{"type":169,"tag":205,"props":3527,"children":3528},{"style":445},[3529],{"type":175,"value":1099},{"type":169,"tag":205,"props":3531,"children":3532},{"style":445},[3533],{"type":175,"value":1104},{"type":169,"tag":205,"props":3535,"children":3536},{"class":207,"line":498},[3537,3542,3547,3551,3556,3560],{"type":169,"tag":205,"props":3538,"children":3539},{"style":763},[3540],{"type":175,"value":3541},"  const",{"type":169,"tag":205,"props":3543,"children":3544},{"style":1197},[3545],{"type":175,"value":3546}," thisClass",{"type":169,"tag":205,"props":3548,"children":3549},{"style":235},[3550],{"type":175,"value":1127},{"type":169,"tag":205,"props":3552,"children":3553},{"style":1110},[3554],{"type":175,"value":3555}," this",{"type":169,"tag":205,"props":3557,"children":3558},{"style":445},[3559],{"type":175,"value":448},{"type":169,"tag":205,"props":3561,"children":3562},{"style":1197},[3563],{"type":175,"value":3564},"constructor\n",{"type":169,"tag":205,"props":3566,"children":3567},{"class":207,"line":1143},[3568,3572,3577,3581,3585,3589,3593,3597],{"type":169,"tag":205,"props":3569,"children":3570},{"style":763},[3571],{"type":175,"value":3541},{"type":169,"tag":205,"props":3573,"children":3574},{"style":1197},[3575],{"type":175,"value":3576}," parentClass",{"type":169,"tag":205,"props":3578,"children":3579},{"style":235},[3580],{"type":175,"value":1127},{"type":169,"tag":205,"props":3582,"children":3583},{"style":2586},[3584],{"type":175,"value":3546},{"type":169,"tag":205,"props":3586,"children":3587},{"style":445},[3588],{"type":175,"value":448},{"type":169,"tag":205,"props":3590,"children":3591},{"style":1197},[3592],{"type":175,"value":2597},{"type":169,"tag":205,"props":3594,"children":3595},{"style":445},[3596],{"type":175,"value":448},{"type":169,"tag":205,"props":3598,"children":3599},{"style":1197},[3600],{"type":175,"value":3564},{"type":169,"tag":205,"props":3602,"children":3603},{"class":207,"line":1184},[3604,3608,3613,3617,3621,3625],{"type":169,"tag":205,"props":3605,"children":3606},{"style":763},[3607],{"type":175,"value":3541},{"type":169,"tag":205,"props":3609,"children":3610},{"style":1197},[3611],{"type":175,"value":3612}," parentMethod",{"type":169,"tag":205,"props":3614,"children":3615},{"style":235},[3616],{"type":175,"value":1127},{"type":169,"tag":205,"props":3618,"children":3619},{"style":439},[3620],{"type":175,"value":3576},{"type":169,"tag":205,"props":3622,"children":3623},{"style":445},[3624],{"type":175,"value":448},{"type":169,"tag":205,"props":3626,"children":3627},{"style":439},[3628],{"type":175,"value":3629},"method\n",{"type":169,"tag":205,"props":3631,"children":3632},{"class":207,"line":1193},[3633,3638],{"type":169,"tag":205,"props":3634,"children":3635},{"style":451},[3636],{"type":175,"value":3637},"  parentMethod",{"type":169,"tag":205,"props":3639,"children":3640},{"style":1161},[3641],{"type":175,"value":3104},{"type":169,"tag":205,"props":3643,"children":3644},{"class":207,"line":1228},[3645],{"type":169,"tag":205,"props":3646,"children":3647},{"style":445},[3648],{"type":175,"value":1190},{"type":169,"tag":183,"props":3650,"children":3651},{},[3652],{"type":175,"value":3653},"super 的指向由几个规则所限制：",{"type":169,"tag":283,"props":3655,"children":3656},{},[3657,3662,3667,3672,3677],{"type":169,"tag":287,"props":3658,"children":3659},{},[3660],{"type":175,"value":3661},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":169,"tag":287,"props":3663,"children":3664},{},[3665],{"type":175,"value":3666},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":169,"tag":287,"props":3668,"children":3669},{},[3670],{"type":175,"value":3671},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":169,"tag":287,"props":3673,"children":3674},{},[3675],{"type":175,"value":3676},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":169,"tag":287,"props":3678,"children":3679},{},[3680],{"type":175,"value":3681},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":169,"tag":183,"props":3683,"children":3684},{},[3685],{"type":175,"value":3686},"总结可以得出规律：",{"type":169,"tag":283,"props":3688,"children":3689},{},[3690,3695],{"type":169,"tag":287,"props":3691,"children":3692},{},[3693],{"type":175,"value":3694},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":169,"tag":287,"props":3696,"children":3697},{},[3698],{"type":175,"value":3699},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":169,"tag":183,"props":3701,"children":3702},{},[3703],{"type":175,"value":3704},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":169,"tag":194,"props":3706,"children":3708},{"className":427,"code":3707,"language":429,"meta":163,"style":163},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3709],{"type":169,"tag":201,"props":3710,"children":3711},{"__ignoreMap":163},[3712,3753,3823,3852,3860,3899,3933],{"type":169,"tag":205,"props":3713,"children":3714},{"class":207,"line":208},[3715,3720,3724,3728,3733,3737,3741,3745,3749],{"type":169,"tag":205,"props":3716,"children":3717},{"style":439},[3718],{"type":175,"value":3719},"proto ",{"type":169,"tag":205,"props":3721,"children":3722},{"style":235},[3723],{"type":175,"value":1638},{"type":169,"tag":205,"props":3725,"children":3726},{"style":445},[3727],{"type":175,"value":1475},{"type":169,"tag":205,"props":3729,"children":3730},{"style":1161},[3731],{"type":175,"value":3732},"data",{"type":169,"tag":205,"props":3734,"children":3735},{"style":445},[3736],{"type":175,"value":1623},{"type":169,"tag":205,"props":3738,"children":3739},{"style":218},[3740],{"type":175,"value":221},{"type":169,"tag":205,"props":3742,"children":3743},{"style":224},[3744],{"type":175,"value":1489},{"type":169,"tag":205,"props":3746,"children":3747},{"style":218},[3748],{"type":175,"value":232},{"type":169,"tag":205,"props":3750,"children":3751},{"style":445},[3752],{"type":175,"value":1190},{"type":169,"tag":205,"props":3754,"children":3755},{"class":207,"line":498},[3756,3761,3765,3769,3773,3777,3781,3785,3789,3793,3797,3803,3807,3811,3815,3819],{"type":169,"tag":205,"props":3757,"children":3758},{"style":439},[3759],{"type":175,"value":3760},"obj ",{"type":169,"tag":205,"props":3762,"children":3763},{"style":235},[3764],{"type":175,"value":1638},{"type":169,"tag":205,"props":3766,"children":3767},{"style":445},[3768],{"type":175,"value":1475},{"type":169,"tag":205,"props":3770,"children":3771},{"style":2423},[3772],{"type":175,"value":1789},{"type":169,"tag":205,"props":3774,"children":3775},{"style":445},[3776],{"type":175,"value":812},{"type":169,"tag":205,"props":3778,"children":3779},{"style":445},[3780],{"type":175,"value":1475},{"type":169,"tag":205,"props":3782,"children":3783},{"style":439},[3784],{"type":175,"value":1806},{"type":169,"tag":205,"props":3786,"children":3787},{"style":445},[3788],{"type":175,"value":448},{"type":169,"tag":205,"props":3790,"children":3791},{"style":451},[3792],{"type":175,"value":1158},{"type":169,"tag":205,"props":3794,"children":3795},{"style":1161},[3796],{"type":175,"value":459},{"type":169,"tag":205,"props":3798,"children":3800},{"style":3799},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[3801],{"type":175,"value":3802},"super",{"type":169,"tag":205,"props":3804,"children":3805},{"style":445},[3806],{"type":175,"value":448},{"type":169,"tag":205,"props":3808,"children":3809},{"style":439},[3810],{"type":175,"value":3732},{"type":169,"tag":205,"props":3812,"children":3813},{"style":1161},[3814],{"type":175,"value":489},{"type":169,"tag":205,"props":3816,"children":3817},{"style":445},[3818],{"type":175,"value":1437},{"type":169,"tag":205,"props":3820,"children":3821},{"style":445},[3822],{"type":175,"value":2934},{"type":169,"tag":205,"props":3824,"children":3825},{"class":207,"line":1143},[3826,3830,3834,3838,3843,3847],{"type":169,"tag":205,"props":3827,"children":3828},{"style":439},[3829],{"type":175,"value":442},{"type":169,"tag":205,"props":3831,"children":3832},{"style":445},[3833],{"type":175,"value":448},{"type":169,"tag":205,"props":3835,"children":3836},{"style":451},[3837],{"type":175,"value":3405},{"type":169,"tag":205,"props":3839,"children":3840},{"style":439},[3841],{"type":175,"value":3842},"(obj",{"type":169,"tag":205,"props":3844,"children":3845},{"style":445},[3846],{"type":175,"value":475},{"type":169,"tag":205,"props":3848,"children":3849},{"style":439},[3850],{"type":175,"value":3851}," proto)\n",{"type":169,"tag":205,"props":3853,"children":3854},{"class":207,"line":1184},[3855],{"type":169,"tag":205,"props":3856,"children":3857},{"emptyLinePlaceholder":162},[3858],{"type":175,"value":3859},"\n",{"type":169,"tag":205,"props":3861,"children":3862},{"class":207,"line":1193},[3863,3868,3872,3877,3881,3886,3890,3895],{"type":169,"tag":205,"props":3864,"children":3865},{"style":439},[3866],{"type":175,"value":3867},"obj2 ",{"type":169,"tag":205,"props":3869,"children":3870},{"style":235},[3871],{"type":175,"value":1638},{"type":169,"tag":205,"props":3873,"children":3874},{"style":439},[3875],{"type":175,"value":3876}," Object",{"type":169,"tag":205,"props":3878,"children":3879},{"style":445},[3880],{"type":175,"value":448},{"type":169,"tag":205,"props":3882,"children":3883},{"style":451},[3884],{"type":175,"value":3885},"create",{"type":169,"tag":205,"props":3887,"children":3888},{"style":439},[3889],{"type":175,"value":459},{"type":169,"tag":205,"props":3891,"children":3892},{"style":518},[3893],{"type":175,"value":3894},"null",{"type":169,"tag":205,"props":3896,"children":3897},{"style":439},[3898],{"type":175,"value":1181},{"type":169,"tag":205,"props":3900,"children":3901},{"class":207,"line":1228},[3902,3907,3911,3916,3920,3924,3928],{"type":169,"tag":205,"props":3903,"children":3904},{"style":439},[3905],{"type":175,"value":3906},"obj2",{"type":169,"tag":205,"props":3908,"children":3909},{"style":445},[3910],{"type":175,"value":448},{"type":169,"tag":205,"props":3912,"children":3913},{"style":439},[3914],{"type":175,"value":3915},"test ",{"type":169,"tag":205,"props":3917,"children":3918},{"style":235},[3919],{"type":175,"value":1638},{"type":169,"tag":205,"props":3921,"children":3922},{"style":439},[3923],{"type":175,"value":2404},{"type":169,"tag":205,"props":3925,"children":3926},{"style":445},[3927],{"type":175,"value":448},{"type":169,"tag":205,"props":3929,"children":3930},{"style":439},[3931],{"type":175,"value":3932},"test\n",{"type":169,"tag":205,"props":3934,"children":3935},{"class":207,"line":1265},[3936,3940,3944,3948,3952],{"type":169,"tag":205,"props":3937,"children":3938},{"style":439},[3939],{"type":175,"value":3906},{"type":169,"tag":205,"props":3941,"children":3942},{"style":445},[3943],{"type":175,"value":448},{"type":169,"tag":205,"props":3945,"children":3946},{"style":451},[3947],{"type":175,"value":1489},{"type":169,"tag":205,"props":3949,"children":3950},{"style":439},[3951],{"type":175,"value":594},{"type":169,"tag":205,"props":3953,"children":3954},{"style":492},[3955],{"type":175,"value":3956},"// 'test'\n",{"type":169,"tag":183,"props":3958,"children":3959},{},[3960],{"type":175,"value":3961},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":169,"tag":183,"props":3963,"children":3964},{},[3965],{"type":175,"value":3966},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":169,"tag":183,"props":3968,"children":3969},{},[3970],{"type":175,"value":3971},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":169,"tag":194,"props":3973,"children":3975},{"className":427,"code":3974,"language":429,"meta":163,"style":163},"class StaticClass extends null {\n  static pow () {}\n}\n",[3976],{"type":169,"tag":201,"props":3977,"children":3978},{"__ignoreMap":163},[3979,4004,4025],{"type":169,"tag":205,"props":3980,"children":3981},{"class":207,"line":208},[3982,3986,3991,3995,4000],{"type":169,"tag":205,"props":3983,"children":3984},{"style":763},[3985],{"type":175,"value":3308},{"type":169,"tag":205,"props":3987,"children":3988},{"style":3311},[3989],{"type":175,"value":3990}," StaticClass",{"type":169,"tag":205,"props":3992,"children":3993},{"style":3331},[3994],{"type":175,"value":3334},{"type":169,"tag":205,"props":3996,"children":3997},{"style":518},[3998],{"type":175,"value":3999}," null",{"type":169,"tag":205,"props":4001,"children":4002},{"style":445},[4003],{"type":175,"value":1104},{"type":169,"tag":205,"props":4005,"children":4006},{"class":207,"line":498},[4007,4012,4017,4021],{"type":169,"tag":205,"props":4008,"children":4009},{"style":3331},[4010],{"type":175,"value":4011},"  static",{"type":169,"tag":205,"props":4013,"children":4014},{"style":2423},[4015],{"type":175,"value":4016}," pow",{"type":169,"tag":205,"props":4018,"children":4019},{"style":445},[4020],{"type":175,"value":1099},{"type":169,"tag":205,"props":4022,"children":4023},{"style":445},[4024],{"type":175,"value":2895},{"type":169,"tag":205,"props":4026,"children":4027},{"class":207,"line":1143},[4028],{"type":169,"tag":205,"props":4029,"children":4030},{"style":445},[4031],{"type":175,"value":1190},{"type":169,"tag":183,"props":4033,"children":4034},{},[4035],{"type":175,"value":4036},"P196，这个 new.target.prototype 没看懂。",{"type":169,"tag":177,"props":4038,"children":4040},{"id":4039},"对象系统",[4041],{"type":175,"value":4039},{"type":169,"tag":183,"props":4043,"children":4044},{},[4045],{"type":175,"value":4046},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":169,"tag":183,"props":4048,"children":4049},{},[4050],{"type":175,"value":4051},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":169,"tag":183,"props":4053,"children":4054},{},[4055],{"type":175,"value":4056},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":169,"tag":194,"props":4058,"children":4060},{"className":427,"code":4059,"language":429,"meta":163,"style":163},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4061],{"type":169,"tag":201,"props":4062,"children":4063},{"__ignoreMap":163},[4064,4079,4102,4123],{"type":169,"tag":205,"props":4065,"children":4066},{"class":207,"line":208},[4067,4071,4075],{"type":169,"tag":205,"props":4068,"children":4069},{"style":763},[4070],{"type":175,"value":3308},{"type":169,"tag":205,"props":4072,"children":4073},{"style":3311},[4074],{"type":175,"value":1094},{"type":169,"tag":205,"props":4076,"children":4077},{"style":445},[4078],{"type":175,"value":2895},{"type":169,"tag":205,"props":4080,"children":4081},{"class":207,"line":498},[4082,4086,4090,4094,4098],{"type":169,"tag":205,"props":4083,"children":4084},{"style":763},[4085],{"type":175,"value":3308},{"type":169,"tag":205,"props":4087,"children":4088},{"style":3311},[4089],{"type":175,"value":2611},{"type":169,"tag":205,"props":4091,"children":4092},{"style":3331},[4093],{"type":175,"value":3334},{"type":169,"tag":205,"props":4095,"children":4096},{"style":3337},[4097],{"type":175,"value":1094},{"type":169,"tag":205,"props":4099,"children":4100},{"style":445},[4101],{"type":175,"value":2895},{"type":169,"tag":205,"props":4103,"children":4104},{"class":207,"line":1143},[4105,4110,4115,4119],{"type":169,"tag":205,"props":4106,"children":4107},{"style":1197},[4108],{"type":175,"value":4109},"B",{"type":169,"tag":205,"props":4111,"children":4112},{"style":235},[4113],{"type":175,"value":4114}," instanceof",{"type":169,"tag":205,"props":4116,"children":4117},{"style":3311},[4118],{"type":175,"value":1094},{"type":169,"tag":205,"props":4120,"children":4121},{"style":492},[4122],{"type":175,"value":610},{"type":169,"tag":205,"props":4124,"children":4125},{"class":207,"line":1184},[4126,4130,4134,4139,4143,4147,4151],{"type":169,"tag":205,"props":4127,"children":4128},{"style":1197},[4129],{"type":175,"value":1200},{"type":169,"tag":205,"props":4131,"children":4132},{"style":445},[4133],{"type":175,"value":448},{"type":169,"tag":205,"props":4135,"children":4136},{"style":451},[4137],{"type":175,"value":4138},"isPrototypeOf",{"type":169,"tag":205,"props":4140,"children":4141},{"style":439},[4142],{"type":175,"value":459},{"type":169,"tag":205,"props":4144,"children":4145},{"style":1197},[4146],{"type":175,"value":4109},{"type":169,"tag":205,"props":4148,"children":4149},{"style":439},[4150],{"type":175,"value":489},{"type":169,"tag":205,"props":4152,"children":4153},{"style":492},[4154],{"type":175,"value":539},{"type":169,"tag":183,"props":4156,"children":4157},{},[4158],{"type":175,"value":4159},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":169,"tag":183,"props":4161,"children":4162},{},[4163],{"type":175,"value":4164},"this 实在函数执行时动态传入的，规则有三：",{"type":169,"tag":283,"props":4166,"children":4167},{},[4168,4173,4178],{"type":169,"tag":287,"props":4169,"children":4170},{},[4171],{"type":175,"value":4172},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":169,"tag":287,"props":4174,"children":4175},{},[4176],{"type":175,"value":4177},"根据存取运算符将左操作符作为 this 传入",{"type":169,"tag":287,"props":4179,"children":4180},{},[4181],{"type":175,"value":4182},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":169,"tag":183,"props":4184,"children":4185},{},[4186],{"type":175,"value":4187},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":169,"tag":283,"props":4189,"children":4190},{},[4191,4196],{"type":169,"tag":287,"props":4192,"children":4193},{},[4194],{"type":175,"value":4195},"如果运行在严格模式中，不改变 this 的值，否则",{"type":169,"tag":287,"props":4197,"children":4198},{},[4199],{"type":175,"value":4200},"使用全局对象作为 this 值",{"type":169,"tag":183,"props":4202,"children":4203},{},[4204],{"type":175,"value":4205},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":169,"tag":183,"props":4207,"children":4208},{},[4209],{"type":175,"value":4210},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":169,"tag":283,"props":4212,"children":4213},{},[4214,4219],{"type":169,"tag":287,"props":4215,"children":4216},{},[4217],{"type":175,"value":4218},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":169,"tag":287,"props":4220,"children":4221},{},[4222],{"type":175,"value":4223},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":169,"tag":183,"props":4225,"children":4226},{},[4227],{"type":175,"value":4228},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":169,"tag":183,"props":4230,"children":4231},{},[4232],{"type":175,"value":4233},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":169,"tag":194,"props":4235,"children":4237},{"className":427,"code":4236,"language":429,"meta":163,"style":163},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4238],{"type":169,"tag":201,"props":4239,"children":4240},{"__ignoreMap":163},[4241,4249,4270,4277,4285],{"type":169,"tag":205,"props":4242,"children":4243},{"class":207,"line":208},[4244],{"type":169,"tag":205,"props":4245,"children":4246},{"style":492},[4247],{"type":175,"value":4248},"// 获得所有原生对象、宿主对象等\n",{"type":169,"tag":205,"props":4250,"children":4251},{"class":207,"line":498},[4252,4256,4260,4265],{"type":169,"tag":205,"props":4253,"children":4254},{"style":439},[4255],{"type":175,"value":442},{"type":169,"tag":205,"props":4257,"children":4258},{"style":445},[4259],{"type":175,"value":448},{"type":169,"tag":205,"props":4261,"children":4262},{"style":451},[4263],{"type":175,"value":4264},"getOwnPropertyNames",{"type":169,"tag":205,"props":4266,"children":4267},{"style":439},[4268],{"type":175,"value":4269},"(global)\n",{"type":169,"tag":205,"props":4271,"children":4272},{"class":207,"line":1143},[4273],{"type":169,"tag":205,"props":4274,"children":4275},{"emptyLinePlaceholder":162},[4276],{"type":175,"value":3859},{"type":169,"tag":205,"props":4278,"children":4279},{"class":207,"line":1184},[4280],{"type":169,"tag":205,"props":4281,"children":4282},{"style":492},[4283],{"type":175,"value":4284},"// 验证 undefined 是否存在 global 对象中\n",{"type":169,"tag":205,"props":4286,"children":4287},{"class":207,"line":1193},[4288,4292,4296,4301,4306,4310,4314,4319,4323,4327],{"type":169,"tag":205,"props":4289,"children":4290},{"style":439},[4291],{"type":175,"value":442},{"type":169,"tag":205,"props":4293,"children":4294},{"style":445},[4295],{"type":175,"value":448},{"type":169,"tag":205,"props":4297,"children":4298},{"style":451},[4299],{"type":175,"value":4300},"getOwnPropertyDescriptor",{"type":169,"tag":205,"props":4302,"children":4303},{"style":439},[4304],{"type":175,"value":4305},"(global",{"type":169,"tag":205,"props":4307,"children":4308},{"style":445},[4309],{"type":175,"value":475},{"type":169,"tag":205,"props":4311,"children":4312},{"style":218},[4313],{"type":175,"value":221},{"type":169,"tag":205,"props":4315,"children":4316},{"style":224},[4317],{"type":175,"value":4318},"undefined",{"type":169,"tag":205,"props":4320,"children":4321},{"style":218},[4322],{"type":175,"value":232},{"type":169,"tag":205,"props":4324,"children":4325},{"style":439},[4326],{"type":175,"value":489},{"type":169,"tag":205,"props":4328,"children":4329},{"style":492},[4330],{"type":175,"value":4331},"// {value: undefined /* ... */ }\n",{"type":169,"tag":183,"props":4333,"children":4334},{},[4335],{"type":175,"value":4336},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":169,"tag":183,"props":4338,"children":4339},{},[4340],{"type":175,"value":4341},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":169,"tag":183,"props":4343,"children":4344},{},[4345],{"type":175,"value":4346},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":169,"tag":778,"props":4348,"children":4349},{},[4350,4371],{"type":169,"tag":782,"props":4351,"children":4352},{},[4353],{"type":169,"tag":786,"props":4354,"children":4355},{},[4356,4361,4366],{"type":169,"tag":790,"props":4357,"children":4358},{},[4359],{"type":175,"value":4360},"对象",{"type":169,"tag":790,"props":4362,"children":4363},{},[4364],{"type":175,"value":4365},"特殊效果",{"type":169,"tag":790,"props":4367,"children":4368},{},[4369],{"type":175,"value":4370},"注",{"type":169,"tag":801,"props":4372,"children":4373},{},[4374,4392,4409,4425,4441,4457,4475,4491,4507,4523],{"type":169,"tag":786,"props":4375,"children":4376},{},[4377,4382,4387],{"type":169,"tag":808,"props":4378,"children":4379},{},[4380],{"type":175,"value":4381},"Number、String、Boolean、Symbol",{"type":169,"tag":808,"props":4383,"children":4384},{},[4385],{"type":175,"value":4386},"包装类",{"type":169,"tag":808,"props":4388,"children":4389},{},[4390],{"type":175,"value":4391},"({}).toString()",{"type":169,"tag":786,"props":4393,"children":4394},{},[4395,4399,4404],{"type":169,"tag":808,"props":4396,"children":4397},{},[4398],{"type":175,"value":442},{"type":169,"tag":808,"props":4400,"children":4401},{},[4402],{"type":175,"value":4403},"调用包装类",{"type":169,"tag":808,"props":4405,"children":4406},{},[4407],{"type":175,"value":4408},"new Object(5) + new Object(3)",{"type":169,"tag":786,"props":4410,"children":4411},{},[4412,4417,4422],{"type":169,"tag":808,"props":4413,"children":4414},{},[4415],{"type":175,"value":4416},"Array",{"type":169,"tag":808,"props":4418,"children":4419},{},[4420],{"type":175,"value":4421},"自动维护 length 属性",{"type":169,"tag":808,"props":4423,"children":4424},{},[],{"type":169,"tag":786,"props":4426,"children":4427},{},[4428,4433,4438],{"type":169,"tag":808,"props":4429,"children":4430},{},[4431],{"type":175,"value":4432},"Date",{"type":169,"tag":808,"props":4434,"children":4435},{},[4436],{"type":175,"value":4437},"日期对象相关的运算",{"type":169,"tag":808,"props":4439,"children":4440},{},[],{"type":169,"tag":786,"props":4442,"children":4443},{},[4444,4449,4454],{"type":169,"tag":808,"props":4445,"children":4446},{},[4447],{"type":175,"value":4448},"Function",{"type":169,"tag":808,"props":4450,"children":4451},{},[4452],{"type":175,"value":4453},"创建可执行的函数",{"type":169,"tag":808,"props":4455,"children":4456},{},[],{"type":169,"tag":786,"props":4458,"children":4459},{},[4460,4465,4470],{"type":169,"tag":808,"props":4461,"children":4462},{},[4463],{"type":175,"value":4464},"RegExp",{"type":169,"tag":808,"props":4466,"children":4467},{},[4468],{"type":175,"value":4469},"可执行",{"type":169,"tag":808,"props":4471,"children":4472},{},[4473],{"type":175,"value":4474},"仅在某些宿主中",{"type":169,"tag":786,"props":4476,"children":4477},{},[4478,4483,4488],{"type":169,"tag":808,"props":4479,"children":4480},{},[4481],{"type":175,"value":4482},"Proxy",{"type":169,"tag":808,"props":4484,"children":4485},{},[4486],{"type":175,"value":4487},"代理目标对象、回收代理",{"type":169,"tag":808,"props":4489,"children":4490},{},[],{"type":169,"tag":786,"props":4492,"children":4493},{},[4494,4499,4504],{"type":169,"tag":808,"props":4495,"children":4496},{},[4497],{"type":175,"value":4498},"TypedArray、DataView",{"type":169,"tag":808,"props":4500,"children":4501},{},[4502],{"type":175,"value":4503},"创建及绑定 buffer",{"type":169,"tag":808,"props":4505,"children":4506},{},[],{"type":169,"tag":786,"props":4508,"children":4509},{},[4510,4515,4520],{"type":169,"tag":808,"props":4511,"children":4512},{},[4513],{"type":175,"value":4514},"ArrayBuffer、SharedArray、Buffer",{"type":169,"tag":808,"props":4516,"children":4517},{},[4518],{"type":175,"value":4519},"初始化 buffer 并维护 byteLength 属性",{"type":169,"tag":808,"props":4521,"children":4522},{},[],{"type":169,"tag":786,"props":4524,"children":4525},{},[4526,4531,4536],{"type":169,"tag":808,"props":4527,"children":4528},{},[4529],{"type":175,"value":4530},"WeakMap、WeakSet",{"type":169,"tag":808,"props":4532,"children":4533},{},[4534],{"type":175,"value":4535},"不修改引用并自动回收对象",{"type":169,"tag":808,"props":4537,"children":4538},{},[],{"type":169,"tag":183,"props":4540,"children":4541},{},[4542],{"type":175,"value":4543},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":169,"tag":194,"props":4545,"children":4547},{"className":427,"code":4546,"language":429,"meta":163,"style":163},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4548],{"type":169,"tag":201,"props":4549,"children":4550},{"__ignoreMap":163},[4551,4584,4621,4697,4710,4717,4769,4776],{"type":169,"tag":205,"props":4552,"children":4553},{"class":207,"line":208},[4554,4558,4563,4567,4571,4576,4580],{"type":169,"tag":205,"props":4555,"children":4556},{"style":763},[4557],{"type":175,"value":1089},{"type":169,"tag":205,"props":4559,"children":4560},{"style":451},[4561],{"type":175,"value":4562}," MyDate",{"type":169,"tag":205,"props":4564,"children":4565},{"style":445},[4566],{"type":175,"value":459},{"type":169,"tag":205,"props":4568,"children":4569},{"style":235},[4570],{"type":175,"value":1051},{"type":169,"tag":205,"props":4572,"children":4573},{"style":1390},[4574],{"type":175,"value":4575},"args",{"type":169,"tag":205,"props":4577,"children":4578},{"style":445},[4579],{"type":175,"value":1398},{"type":169,"tag":205,"props":4581,"children":4582},{"style":445},[4583],{"type":175,"value":1104},{"type":169,"tag":205,"props":4585,"children":4586},{"class":207,"line":498},[4587,4591,4596,4600,4605,4609,4613,4617],{"type":169,"tag":205,"props":4588,"children":4589},{"style":763},[4590],{"type":175,"value":3541},{"type":169,"tag":205,"props":4592,"children":4593},{"style":1197},[4594],{"type":175,"value":4595}," Base",{"type":169,"tag":205,"props":4597,"children":4598},{"style":235},[4599],{"type":175,"value":1127},{"type":169,"tag":205,"props":4601,"children":4602},{"style":2586},[4603],{"type":175,"value":4604}," Date",{"type":169,"tag":205,"props":4606,"children":4607},{"style":445},[4608],{"type":175,"value":448},{"type":169,"tag":205,"props":4610,"children":4611},{"style":1197},[4612],{"type":175,"value":2597},{"type":169,"tag":205,"props":4614,"children":4615},{"style":445},[4616],{"type":175,"value":448},{"type":169,"tag":205,"props":4618,"children":4619},{"style":1197},[4620],{"type":175,"value":3564},{"type":169,"tag":205,"props":4622,"children":4623},{"class":207,"line":1143},[4624,4628,4633,4637,4641,4645,4649,4653,4657,4661,4665,4669,4673,4677,4681,4685,4689,4693],{"type":169,"tag":205,"props":4625,"children":4626},{"style":763},[4627],{"type":175,"value":3541},{"type":169,"tag":205,"props":4629,"children":4630},{"style":1197},[4631],{"type":175,"value":4632}," instance",{"type":169,"tag":205,"props":4634,"children":4635},{"style":235},[4636],{"type":175,"value":1127},{"type":169,"tag":205,"props":4638,"children":4639},{"style":439},[4640],{"type":175,"value":3876},{"type":169,"tag":205,"props":4642,"children":4643},{"style":445},[4644],{"type":175,"value":448},{"type":169,"tag":205,"props":4646,"children":4647},{"style":451},[4648],{"type":175,"value":3405},{"type":169,"tag":205,"props":4650,"children":4651},{"style":1161},[4652],{"type":175,"value":459},{"type":169,"tag":205,"props":4654,"children":4655},{"style":235},[4656],{"type":175,"value":1279},{"type":169,"tag":205,"props":4658,"children":4659},{"style":451},[4660],{"type":175,"value":4595},{"type":169,"tag":205,"props":4662,"children":4663},{"style":1161},[4664],{"type":175,"value":459},{"type":169,"tag":205,"props":4666,"children":4667},{"style":235},[4668],{"type":175,"value":1051},{"type":169,"tag":205,"props":4670,"children":4671},{"style":439},[4672],{"type":175,"value":4575},{"type":169,"tag":205,"props":4674,"children":4675},{"style":1161},[4676],{"type":175,"value":1398},{"type":169,"tag":205,"props":4678,"children":4679},{"style":445},[4680],{"type":175,"value":475},{"type":169,"tag":205,"props":4682,"children":4683},{"style":2586},[4684],{"type":175,"value":4562},{"type":169,"tag":205,"props":4686,"children":4687},{"style":445},[4688],{"type":175,"value":448},{"type":169,"tag":205,"props":4690,"children":4691},{"style":1197},[4692],{"type":175,"value":2597},{"type":169,"tag":205,"props":4694,"children":4695},{"style":1161},[4696],{"type":175,"value":1181},{"type":169,"tag":205,"props":4698,"children":4699},{"class":207,"line":1184},[4700,4705],{"type":169,"tag":205,"props":4701,"children":4702},{"style":1467},[4703],{"type":175,"value":4704},"  return",{"type":169,"tag":205,"props":4706,"children":4707},{"style":439},[4708],{"type":175,"value":4709}," instance\n",{"type":169,"tag":205,"props":4711,"children":4712},{"class":207,"line":1193},[4713],{"type":169,"tag":205,"props":4714,"children":4715},{"style":445},[4716],{"type":175,"value":1190},{"type":169,"tag":205,"props":4718,"children":4719},{"class":207,"line":1228},[4720,4724,4728,4732,4736,4741,4745,4749,4753,4757,4761,4765],{"type":169,"tag":205,"props":4721,"children":4722},{"style":439},[4723],{"type":175,"value":442},{"type":169,"tag":205,"props":4725,"children":4726},{"style":445},[4727],{"type":175,"value":448},{"type":169,"tag":205,"props":4729,"children":4730},{"style":451},[4731],{"type":175,"value":3405},{"type":169,"tag":205,"props":4733,"children":4734},{"style":439},[4735],{"type":175,"value":459},{"type":169,"tag":205,"props":4737,"children":4738},{"style":2586},[4739],{"type":175,"value":4740},"MyDate",{"type":169,"tag":205,"props":4742,"children":4743},{"style":445},[4744],{"type":175,"value":448},{"type":169,"tag":205,"props":4746,"children":4747},{"style":1197},[4748],{"type":175,"value":2597},{"type":169,"tag":205,"props":4750,"children":4751},{"style":445},[4752],{"type":175,"value":475},{"type":169,"tag":205,"props":4754,"children":4755},{"style":2586},[4756],{"type":175,"value":4604},{"type":169,"tag":205,"props":4758,"children":4759},{"style":445},[4760],{"type":175,"value":448},{"type":169,"tag":205,"props":4762,"children":4763},{"style":1197},[4764],{"type":175,"value":2597},{"type":169,"tag":205,"props":4766,"children":4767},{"style":439},[4768],{"type":175,"value":1181},{"type":169,"tag":205,"props":4770,"children":4771},{"class":207,"line":1265},[4772],{"type":169,"tag":205,"props":4773,"children":4774},{"emptyLinePlaceholder":162},[4775],{"type":175,"value":3859},{"type":169,"tag":205,"props":4777,"children":4778},{"class":207,"line":1273},[4779,4784,4788,4792,4796,4800,4804,4808],{"type":169,"tag":205,"props":4780,"children":4781},{"style":439},[4782],{"type":175,"value":4783},"console",{"type":169,"tag":205,"props":4785,"children":4786},{"style":445},[4787],{"type":175,"value":448},{"type":169,"tag":205,"props":4789,"children":4790},{"style":451},[4791],{"type":175,"value":1158},{"type":169,"tag":205,"props":4793,"children":4794},{"style":439},[4795],{"type":175,"value":459},{"type":169,"tag":205,"props":4797,"children":4798},{"style":235},[4799],{"type":175,"value":1279},{"type":169,"tag":205,"props":4801,"children":4802},{"style":451},[4803],{"type":175,"value":4562},{"type":169,"tag":205,"props":4805,"children":4806},{"style":439},[4807],{"type":175,"value":578},{"type":169,"tag":205,"props":4809,"children":4810},{"style":492},[4811],{"type":175,"value":4812},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":169,"tag":177,"props":4814,"children":4816},{"id":4815},"可定制的对象属性",[4817],{"type":175,"value":4815},{"type":169,"tag":183,"props":4819,"children":4820},{},[4821],{"type":175,"value":4822},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":169,"tag":283,"props":4824,"children":4825},{},[4826,4831,4836],{"type":169,"tag":287,"props":4827,"children":4828},{},[4829],{"type":175,"value":4830},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":169,"tag":287,"props":4832,"children":4833},{},[4834],{"type":175,"value":4835},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":169,"tag":287,"props":4837,"children":4838},{},[4839],{"type":175,"value":4840},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":169,"tag":183,"props":4842,"children":4843},{},[4844],{"type":175,"value":4845},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":169,"tag":778,"props":4847,"children":4848},{},[4849,4875],{"type":169,"tag":782,"props":4850,"children":4851},{},[4852],{"type":169,"tag":786,"props":4853,"children":4854},{},[4855,4860,4865,4870],{"type":169,"tag":790,"props":4856,"children":4857},{},[4858],{"type":175,"value":4859},"Object.xxx 方法",{"type":169,"tag":790,"props":4861,"children":4862},{},[4863],{"type":175,"value":4864},"方法说明",{"type":169,"tag":790,"props":4866,"children":4867},{},[4868],{"type":175,"value":4869},"对自有属性表的操作",{"type":169,"tag":790,"props":4871,"children":4872},{},[4873],{"type":175,"value":4874},"检查方法",{"type":169,"tag":801,"props":4876,"children":4877},{},[4878,4907,4935],{"type":169,"tag":786,"props":4879,"children":4880},{},[4881,4886,4891,4902],{"type":169,"tag":808,"props":4882,"children":4883},{},[4884],{"type":175,"value":4885},"preventExtensions(obj)",{"type":169,"tag":808,"props":4887,"children":4888},{},[4889],{"type":175,"value":4890},"使实例不能添加新属性，也不可重置原型",{"type":169,"tag":808,"props":4892,"children":4893},{},[4894,4900],{"type":169,"tag":4895,"props":4896,"children":4897},"del",{},[4898],{"type":175,"value":4899},"add",{"type":175,"value":4901},"、delete、update",{"type":169,"tag":808,"props":4903,"children":4904},{},[4905],{"type":175,"value":4906},"isExtensible(obj)",{"type":169,"tag":786,"props":4908,"children":4909},{},[4910,4915,4920,4930],{"type":169,"tag":808,"props":4911,"children":4912},{},[4913],{"type":175,"value":4914},"seal(obj)",{"type":169,"tag":808,"props":4916,"children":4917},{},[4918],{"type":175,"value":4919},"使实例不能新增新属性，也不能删除既有属性",{"type":169,"tag":808,"props":4921,"children":4922},{},[4923,4928],{"type":169,"tag":4895,"props":4924,"children":4925},{},[4926],{"type":175,"value":4927},"add、delete",{"type":175,"value":4929},"、update",{"type":169,"tag":808,"props":4931,"children":4932},{},[4933],{"type":175,"value":4934},"isSealed(obj)",{"type":169,"tag":786,"props":4936,"children":4937},{},[4938,4943,4948,4956],{"type":169,"tag":808,"props":4939,"children":4940},{},[4941],{"type":175,"value":4942},"freeze(obj)",{"type":169,"tag":808,"props":4944,"children":4945},{},[4946],{"type":175,"value":4947},"使实例所有属性只读，且不能再添加、删除属性",{"type":169,"tag":808,"props":4949,"children":4950},{},[4951],{"type":169,"tag":4895,"props":4952,"children":4953},{},[4954],{"type":175,"value":4955},"add、delete、update",{"type":169,"tag":808,"props":4957,"children":4958},{},[4959],{"type":175,"value":4960},"isFrozen(obj)",{"type":169,"tag":183,"props":4962,"children":4963},{},[4964],{"type":175,"value":4965},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":169,"tag":283,"props":4967,"children":4968},{},[4969,4974,4979],{"type":169,"tag":287,"props":4970,"children":4971},{},[4972],{"type":175,"value":4973},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":169,"tag":287,"props":4975,"children":4976},{},[4977],{"type":175,"value":4978},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":169,"tag":287,"props":4980,"children":4981},{},[4982],{"type":175,"value":4983},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":169,"tag":177,"props":4985,"children":4987},{"id":4986},"运行期侵入",[4988],{"type":175,"value":4986},{"type":169,"tag":183,"props":4990,"children":4991},{},[4992],{"type":175,"value":4993},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":169,"tag":183,"props":4995,"children":4996},{},[4997],{"type":175,"value":4998},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":169,"tag":183,"props":5000,"children":5001},{},[5002],{"type":175,"value":5003},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":169,"tag":778,"props":5005,"children":5006},{},[5007,5023],{"type":169,"tag":782,"props":5008,"children":5009},{},[5010],{"type":169,"tag":786,"props":5011,"children":5012},{},[5013,5018],{"type":169,"tag":790,"props":5014,"children":5015},{},[5016],{"type":175,"value":5017},"内部方法",{"type":169,"tag":790,"props":5019,"children":5020},{},[5021],{"type":175,"value":5022},"handler.xxx",{"type":169,"tag":801,"props":5024,"children":5025},{},[5026,5039,5052,5065,5078,5091,5104,5117,5130,5143,5156,5169,5182],{"type":169,"tag":786,"props":5027,"children":5028},{},[5029,5034],{"type":169,"tag":808,"props":5030,"children":5031},{},[5032],{"type":175,"value":5033},"[[GetPrototypeOf]]",{"type":169,"tag":808,"props":5035,"children":5036},{},[5037],{"type":175,"value":5038},"getPrototypeOf()",{"type":169,"tag":786,"props":5040,"children":5041},{},[5042,5047],{"type":169,"tag":808,"props":5043,"children":5044},{},[5045],{"type":175,"value":5046},"[[SetPrototypeOf]]",{"type":169,"tag":808,"props":5048,"children":5049},{},[5050],{"type":175,"value":5051},"setPrototypeOf()",{"type":169,"tag":786,"props":5053,"children":5054},{},[5055,5060],{"type":169,"tag":808,"props":5056,"children":5057},{},[5058],{"type":175,"value":5059},"[[IsExtensible]]",{"type":169,"tag":808,"props":5061,"children":5062},{},[5063],{"type":175,"value":5064},"isExtensible()",{"type":169,"tag":786,"props":5066,"children":5067},{},[5068,5073],{"type":169,"tag":808,"props":5069,"children":5070},{},[5071],{"type":175,"value":5072},"[[PreventExtensions]]",{"type":169,"tag":808,"props":5074,"children":5075},{},[5076],{"type":175,"value":5077},"preventExtensions()",{"type":169,"tag":786,"props":5079,"children":5080},{},[5081,5086],{"type":169,"tag":808,"props":5082,"children":5083},{},[5084],{"type":175,"value":5085},"[[GetOwnProperty]]",{"type":169,"tag":808,"props":5087,"children":5088},{},[5089],{"type":175,"value":5090},"getOwnPropertyDescriptor()",{"type":169,"tag":786,"props":5092,"children":5093},{},[5094,5099],{"type":169,"tag":808,"props":5095,"children":5096},{},[5097],{"type":175,"value":5098},"[[HasProperty]]",{"type":169,"tag":808,"props":5100,"children":5101},{},[5102],{"type":175,"value":5103},"has()",{"type":169,"tag":786,"props":5105,"children":5106},{},[5107,5112],{"type":169,"tag":808,"props":5108,"children":5109},{},[5110],{"type":175,"value":5111},"[[DefineOwnProperty]]",{"type":169,"tag":808,"props":5113,"children":5114},{},[5115],{"type":175,"value":5116},"defineProperty()",{"type":169,"tag":786,"props":5118,"children":5119},{},[5120,5125],{"type":169,"tag":808,"props":5121,"children":5122},{},[5123],{"type":175,"value":5124},"[[Get]]",{"type":169,"tag":808,"props":5126,"children":5127},{},[5128],{"type":175,"value":5129},"get()",{"type":169,"tag":786,"props":5131,"children":5132},{},[5133,5138],{"type":169,"tag":808,"props":5134,"children":5135},{},[5136],{"type":175,"value":5137},"[[Set]]",{"type":169,"tag":808,"props":5139,"children":5140},{},[5141],{"type":175,"value":5142},"set()",{"type":169,"tag":786,"props":5144,"children":5145},{},[5146,5151],{"type":169,"tag":808,"props":5147,"children":5148},{},[5149],{"type":175,"value":5150},"[[Delete]]",{"type":169,"tag":808,"props":5152,"children":5153},{},[5154],{"type":175,"value":5155},"deleteProperty()",{"type":169,"tag":786,"props":5157,"children":5158},{},[5159,5164],{"type":169,"tag":808,"props":5160,"children":5161},{},[5162],{"type":175,"value":5163},"[[OwnPropertyKeys]]",{"type":169,"tag":808,"props":5165,"children":5166},{},[5167],{"type":175,"value":5168},"ownKeys()",{"type":169,"tag":786,"props":5170,"children":5171},{},[5172,5177],{"type":169,"tag":808,"props":5173,"children":5174},{},[5175],{"type":175,"value":5176},"[[Call]]",{"type":169,"tag":808,"props":5178,"children":5179},{},[5180],{"type":175,"value":5181},"apply()",{"type":169,"tag":786,"props":5183,"children":5184},{},[5185,5190],{"type":169,"tag":808,"props":5186,"children":5187},{},[5188],{"type":175,"value":5189},"[[Construct]]",{"type":169,"tag":808,"props":5191,"children":5192},{},[5193],{"type":175,"value":5194},"construct()",{"type":169,"tag":183,"props":5196,"children":5197},{},[5198],{"type":175,"value":5199},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":169,"tag":283,"props":5201,"children":5202},{},[5203,5208],{"type":169,"tag":287,"props":5204,"children":5205},{},[5206],{"type":175,"value":5207},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":169,"tag":287,"props":5209,"children":5210},{},[5211],{"type":175,"value":5212},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":169,"tag":183,"props":5214,"children":5215},{},[5216],{"type":175,"value":5217},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":169,"tag":194,"props":5219,"children":5221},{"className":427,"code":5220,"language":429,"meta":163,"style":163},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5222],{"type":169,"tag":201,"props":5223,"children":5224},{"__ignoreMap":163},[5225,5263,5312,5353,5431,5475,5540,5547,5581,5621,5660,5680,5697,5735,5742,5749,5760],{"type":169,"tag":205,"props":5226,"children":5227},{"class":207,"line":208},[5228,5232,5237,5241,5246,5250,5255,5259],{"type":169,"tag":205,"props":5229,"children":5230},{"style":763},[5231],{"type":175,"value":1089},{"type":169,"tag":205,"props":5233,"children":5234},{"style":451},[5235],{"type":175,"value":5236}," intrudeOnPrototype",{"type":169,"tag":205,"props":5238,"children":5239},{"style":445},[5240],{"type":175,"value":459},{"type":169,"tag":205,"props":5242,"children":5243},{"style":1390},[5244],{"type":175,"value":5245},"Fn",{"type":169,"tag":205,"props":5247,"children":5248},{"style":445},[5249],{"type":175,"value":475},{"type":169,"tag":205,"props":5251,"children":5252},{"style":1390},[5253],{"type":175,"value":5254}," handler",{"type":169,"tag":205,"props":5256,"children":5257},{"style":445},[5258],{"type":175,"value":1398},{"type":169,"tag":205,"props":5260,"children":5261},{"style":445},[5262],{"type":175,"value":1104},{"type":169,"tag":205,"props":5264,"children":5265},{"class":207,"line":498},[5266,5270,5275,5279,5283,5287,5292,5296,5300,5304,5308],{"type":169,"tag":205,"props":5267,"children":5268},{"style":763},[5269],{"type":175,"value":3541},{"type":169,"tag":205,"props":5271,"children":5272},{"style":1197},[5273],{"type":175,"value":5274}," originPrototype",{"type":169,"tag":205,"props":5276,"children":5277},{"style":235},[5278],{"type":175,"value":1127},{"type":169,"tag":205,"props":5280,"children":5281},{"style":439},[5282],{"type":175,"value":3876},{"type":169,"tag":205,"props":5284,"children":5285},{"style":445},[5286],{"type":175,"value":448},{"type":169,"tag":205,"props":5288,"children":5289},{"style":451},[5290],{"type":175,"value":5291},"getPrototypeOf",{"type":169,"tag":205,"props":5293,"children":5294},{"style":1161},[5295],{"type":175,"value":459},{"type":169,"tag":205,"props":5297,"children":5298},{"style":2586},[5299],{"type":175,"value":5245},{"type":169,"tag":205,"props":5301,"children":5302},{"style":445},[5303],{"type":175,"value":448},{"type":169,"tag":205,"props":5305,"children":5306},{"style":1197},[5307],{"type":175,"value":2597},{"type":169,"tag":205,"props":5309,"children":5310},{"style":1161},[5311],{"type":175,"value":1181},{"type":169,"tag":205,"props":5313,"children":5314},{"class":207,"line":1143},[5315,5319,5324,5328,5332,5336,5340,5344,5349],{"type":169,"tag":205,"props":5316,"children":5317},{"style":763},[5318],{"type":175,"value":3541},{"type":169,"tag":205,"props":5320,"children":5321},{"style":1197},[5322],{"type":175,"value":5323}," target",{"type":169,"tag":205,"props":5325,"children":5326},{"style":235},[5327],{"type":175,"value":1127},{"type":169,"tag":205,"props":5329,"children":5330},{"style":439},[5331],{"type":175,"value":3876},{"type":169,"tag":205,"props":5333,"children":5334},{"style":445},[5335],{"type":175,"value":448},{"type":169,"tag":205,"props":5337,"children":5338},{"style":451},[5339],{"type":175,"value":3885},{"type":169,"tag":205,"props":5341,"children":5342},{"style":1161},[5343],{"type":175,"value":459},{"type":169,"tag":205,"props":5345,"children":5346},{"style":439},[5347],{"type":175,"value":5348},"originPrototype",{"type":169,"tag":205,"props":5350,"children":5351},{"style":1161},[5352],{"type":175,"value":1181},{"type":169,"tag":205,"props":5354,"children":5355},{"class":207,"line":1184},[5356,5360,5364,5370,5374,5379,5383,5388,5392,5396,5401,5405,5410,5414,5419,5423,5427],{"type":169,"tag":205,"props":5357,"children":5358},{"style":763},[5359],{"type":175,"value":3541},{"type":169,"tag":205,"props":5361,"children":5362},{"style":445},[5363],{"type":175,"value":1475},{"type":169,"tag":205,"props":5365,"children":5367},{"style":5366},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5368],{"type":175,"value":5369}," proxy",{"type":169,"tag":205,"props":5371,"children":5372},{"style":445},[5373],{"type":175,"value":1623},{"type":169,"tag":205,"props":5375,"children":5376},{"style":1197},[5377],{"type":175,"value":5378}," newPrototype",{"type":169,"tag":205,"props":5380,"children":5381},{"style":445},[5382],{"type":175,"value":475},{"type":169,"tag":205,"props":5384,"children":5385},{"style":1197},[5386],{"type":175,"value":5387}," revoke",{"type":169,"tag":205,"props":5389,"children":5390},{"style":445},[5391],{"type":175,"value":1498},{"type":169,"tag":205,"props":5393,"children":5394},{"style":235},[5395],{"type":175,"value":1127},{"type":169,"tag":205,"props":5397,"children":5398},{"style":439},[5399],{"type":175,"value":5400}," Proxy",{"type":169,"tag":205,"props":5402,"children":5403},{"style":445},[5404],{"type":175,"value":448},{"type":169,"tag":205,"props":5406,"children":5407},{"style":451},[5408],{"type":175,"value":5409},"revocable",{"type":169,"tag":205,"props":5411,"children":5412},{"style":1161},[5413],{"type":175,"value":459},{"type":169,"tag":205,"props":5415,"children":5416},{"style":439},[5417],{"type":175,"value":5418},"target",{"type":169,"tag":205,"props":5420,"children":5421},{"style":445},[5422],{"type":175,"value":475},{"type":169,"tag":205,"props":5424,"children":5425},{"style":439},[5426],{"type":175,"value":5254},{"type":169,"tag":205,"props":5428,"children":5429},{"style":1161},[5430],{"type":175,"value":1181},{"type":169,"tag":205,"props":5432,"children":5433},{"class":207,"line":1193},[5434,5439,5443,5447,5451,5455,5459,5463,5467,5471],{"type":169,"tag":205,"props":5435,"children":5436},{"style":439},[5437],{"type":175,"value":5438},"  Object",{"type":169,"tag":205,"props":5440,"children":5441},{"style":445},[5442],{"type":175,"value":448},{"type":169,"tag":205,"props":5444,"children":5445},{"style":451},[5446],{"type":175,"value":3405},{"type":169,"tag":205,"props":5448,"children":5449},{"style":1161},[5450],{"type":175,"value":459},{"type":169,"tag":205,"props":5452,"children":5453},{"style":2586},[5454],{"type":175,"value":5245},{"type":169,"tag":205,"props":5456,"children":5457},{"style":445},[5458],{"type":175,"value":448},{"type":169,"tag":205,"props":5460,"children":5461},{"style":1197},[5462],{"type":175,"value":2597},{"type":169,"tag":205,"props":5464,"children":5465},{"style":445},[5466],{"type":175,"value":475},{"type":169,"tag":205,"props":5468,"children":5469},{"style":439},[5470],{"type":175,"value":5378},{"type":169,"tag":205,"props":5472,"children":5473},{"style":1161},[5474],{"type":175,"value":1181},{"type":169,"tag":205,"props":5476,"children":5477},{"class":207,"line":1228},[5478,5482,5486,5491,5495,5499,5503,5507,5511,5515,5519,5523,5527,5531,5535],{"type":169,"tag":205,"props":5479,"children":5480},{"style":1467},[5481],{"type":175,"value":4704},{"type":169,"tag":205,"props":5483,"children":5484},{"style":445},[5485],{"type":175,"value":1099},{"type":169,"tag":205,"props":5487,"children":5488},{"style":763},[5489],{"type":175,"value":5490}," =>",{"type":169,"tag":205,"props":5492,"children":5493},{"style":451},[5494],{"type":175,"value":5387},{"type":169,"tag":205,"props":5496,"children":5497},{"style":1161},[5498],{"type":175,"value":459},{"type":169,"tag":205,"props":5500,"children":5501},{"style":439},[5502],{"type":175,"value":442},{"type":169,"tag":205,"props":5504,"children":5505},{"style":445},[5506],{"type":175,"value":448},{"type":169,"tag":205,"props":5508,"children":5509},{"style":451},[5510],{"type":175,"value":3405},{"type":169,"tag":205,"props":5512,"children":5513},{"style":1161},[5514],{"type":175,"value":459},{"type":169,"tag":205,"props":5516,"children":5517},{"style":2586},[5518],{"type":175,"value":5245},{"type":169,"tag":205,"props":5520,"children":5521},{"style":445},[5522],{"type":175,"value":448},{"type":169,"tag":205,"props":5524,"children":5525},{"style":1197},[5526],{"type":175,"value":2597},{"type":169,"tag":205,"props":5528,"children":5529},{"style":445},[5530],{"type":175,"value":475},{"type":169,"tag":205,"props":5532,"children":5533},{"style":439},[5534],{"type":175,"value":5274},{"type":169,"tag":205,"props":5536,"children":5537},{"style":1161},[5538],{"type":175,"value":5539},"))\n",{"type":169,"tag":205,"props":5541,"children":5542},{"class":207,"line":1265},[5543],{"type":169,"tag":205,"props":5544,"children":5545},{"style":445},[5546],{"type":175,"value":1190},{"type":169,"tag":205,"props":5548,"children":5549},{"class":207,"line":1273},[5550,5555,5560,5564,5568,5573,5577],{"type":169,"tag":205,"props":5551,"children":5552},{"style":763},[5553],{"type":175,"value":5554},"const",{"type":169,"tag":205,"props":5556,"children":5557},{"style":1197},[5558],{"type":175,"value":5559}," recovery",{"type":169,"tag":205,"props":5561,"children":5562},{"style":235},[5563],{"type":175,"value":1127},{"type":169,"tag":205,"props":5565,"children":5566},{"style":451},[5567],{"type":175,"value":5236},{"type":169,"tag":205,"props":5569,"children":5570},{"style":439},[5571],{"type":175,"value":5572},"(String",{"type":169,"tag":205,"props":5574,"children":5575},{"style":445},[5576],{"type":175,"value":475},{"type":169,"tag":205,"props":5578,"children":5579},{"style":445},[5580],{"type":175,"value":1104},{"type":169,"tag":205,"props":5582,"children":5583},{"class":207,"line":1300},[5584,5588,5592,5596,5600,5604,5608,5613,5617],{"type":169,"tag":205,"props":5585,"children":5586},{"style":451},[5587],{"type":175,"value":2484},{"type":169,"tag":205,"props":5589,"children":5590},{"style":445},[5591],{"type":175,"value":1623},{"type":169,"tag":205,"props":5593,"children":5594},{"style":763},[5595],{"type":175,"value":1217},{"type":169,"tag":205,"props":5597,"children":5598},{"style":445},[5599],{"type":175,"value":1696},{"type":169,"tag":205,"props":5601,"children":5602},{"style":1390},[5603],{"type":175,"value":5418},{"type":169,"tag":205,"props":5605,"children":5606},{"style":445},[5607],{"type":175,"value":475},{"type":169,"tag":205,"props":5609,"children":5610},{"style":1390},[5611],{"type":175,"value":5612}," prop",{"type":169,"tag":205,"props":5614,"children":5615},{"style":445},[5616],{"type":175,"value":1398},{"type":169,"tag":205,"props":5618,"children":5619},{"style":445},[5620],{"type":175,"value":1104},{"type":169,"tag":205,"props":5622,"children":5623},{"class":207,"line":1876},[5624,5628,5632,5636,5640,5644,5648,5652,5656],{"type":169,"tag":205,"props":5625,"children":5626},{"style":1467},[5627],{"type":175,"value":1757},{"type":169,"tag":205,"props":5629,"children":5630},{"style":1161},[5631],{"type":175,"value":1696},{"type":169,"tag":205,"props":5633,"children":5634},{"style":439},[5635],{"type":175,"value":2804},{"type":169,"tag":205,"props":5637,"children":5638},{"style":235},[5639],{"type":175,"value":1770},{"type":169,"tag":205,"props":5641,"children":5642},{"style":218},[5643],{"type":175,"value":221},{"type":169,"tag":205,"props":5645,"children":5646},{"style":224},[5647],{"type":175,"value":1489},{"type":169,"tag":205,"props":5649,"children":5650},{"style":218},[5651],{"type":175,"value":232},{"type":169,"tag":205,"props":5653,"children":5654},{"style":1161},[5655],{"type":175,"value":489},{"type":169,"tag":205,"props":5657,"children":5658},{"style":445},[5659],{"type":175,"value":1513},{"type":169,"tag":205,"props":5661,"children":5662},{"class":207,"line":1936},[5663,5668,5672,5676],{"type":169,"tag":205,"props":5664,"children":5665},{"style":1467},[5666],{"type":175,"value":5667},"      return",{"type":169,"tag":205,"props":5669,"children":5670},{"style":218},[5671],{"type":175,"value":221},{"type":169,"tag":205,"props":5673,"children":5674},{"style":224},[5675],{"type":175,"value":1489},{"type":169,"tag":205,"props":5677,"children":5678},{"style":218},[5679],{"type":175,"value":1140},{"type":169,"tag":205,"props":5681,"children":5682},{"class":207,"line":1997},[5683,5688,5693],{"type":169,"tag":205,"props":5684,"children":5685},{"style":445},[5686],{"type":175,"value":5687},"    }",{"type":169,"tag":205,"props":5689,"children":5690},{"style":1467},[5691],{"type":175,"value":5692}," else",{"type":169,"tag":205,"props":5694,"children":5695},{"style":445},[5696],{"type":175,"value":1104},{"type":169,"tag":205,"props":5698,"children":5699},{"class":207,"line":2038},[5700,5704,5709,5713,5718,5722,5726,5731],{"type":169,"tag":205,"props":5701,"children":5702},{"style":1467},[5703],{"type":175,"value":5667},{"type":169,"tag":205,"props":5705,"children":5706},{"style":439},[5707],{"type":175,"value":5708}," Reflect",{"type":169,"tag":205,"props":5710,"children":5711},{"style":445},[5712],{"type":175,"value":448},{"type":169,"tag":205,"props":5714,"children":5715},{"style":451},[5716],{"type":175,"value":5717},"get",{"type":169,"tag":205,"props":5719,"children":5720},{"style":1161},[5721],{"type":175,"value":459},{"type":169,"tag":205,"props":5723,"children":5724},{"style":235},[5725],{"type":175,"value":1051},{"type":169,"tag":205,"props":5727,"children":5728},{"style":3799},[5729],{"type":175,"value":5730},"arguments",{"type":169,"tag":205,"props":5732,"children":5733},{"style":1161},[5734],{"type":175,"value":1181},{"type":169,"tag":205,"props":5736,"children":5737},{"class":207,"line":2079},[5738],{"type":169,"tag":205,"props":5739,"children":5740},{"style":445},[5741],{"type":175,"value":2085},{"type":169,"tag":205,"props":5743,"children":5744},{"class":207,"line":2088},[5745],{"type":169,"tag":205,"props":5746,"children":5747},{"style":445},[5748],{"type":175,"value":1843},{"type":169,"tag":205,"props":5750,"children":5751},{"class":207,"line":2096},[5752,5756],{"type":169,"tag":205,"props":5753,"children":5754},{"style":445},[5755],{"type":175,"value":1437},{"type":169,"tag":205,"props":5757,"children":5758},{"style":439},[5759],{"type":175,"value":1181},{"type":169,"tag":205,"props":5761,"children":5763},{"class":207,"line":5762},17,[5764,5768,5772,5776,5780,5785,5789,5794],{"type":169,"tag":205,"props":5765,"children":5766},{"style":439},[5767],{"type":175,"value":4783},{"type":169,"tag":205,"props":5769,"children":5770},{"style":445},[5771],{"type":175,"value":448},{"type":169,"tag":205,"props":5773,"children":5774},{"style":451},[5775],{"type":175,"value":1158},{"type":169,"tag":205,"props":5777,"children":5778},{"style":439},[5779],{"type":175,"value":459},{"type":169,"tag":205,"props":5781,"children":5782},{"style":218},[5783],{"type":175,"value":5784},"''",{"type":169,"tag":205,"props":5786,"children":5787},{"style":445},[5788],{"type":175,"value":448},{"type":169,"tag":205,"props":5790,"children":5791},{"style":439},[5792],{"type":175,"value":5793},"test) ",{"type":169,"tag":205,"props":5795,"children":5796},{"style":492},[5797],{"type":175,"value":5798},"// test\n",{"type":169,"tag":177,"props":5800,"children":5802},{"id":5801},"元编程系统",[5803],{"type":175,"value":5801},{"type":169,"tag":183,"props":5805,"children":5806},{},[5807],{"type":175,"value":5808},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":169,"tag":170,"props":5810,"children":5812},{"id":5811},"结构化",[5813],{"type":175,"value":5811},{"type":169,"tag":177,"props":5815,"children":5817},{"id":5816},"概述",[5818],{"type":175,"value":5816},{"type":169,"tag":183,"props":5820,"children":5821},{},[5822],{"type":175,"value":5823},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":169,"tag":183,"props":5825,"children":5826},{},[5827],{"type":175,"value":5828},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":169,"tag":183,"props":5830,"children":5831},{},[5832],{"type":175,"value":5833},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":169,"tag":183,"props":5835,"children":5836},{},[5837],{"type":175,"value":5838},"面向对象解决了结构化带来诸多问题的三点：",{"type":169,"tag":283,"props":5840,"children":5841},{},[5842,5847,5852],{"type":169,"tag":287,"props":5843,"children":5844},{},[5845],{"type":175,"value":5846},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":169,"tag":287,"props":5848,"children":5849},{},[5850],{"type":175,"value":5851},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":169,"tag":287,"props":5853,"children":5854},{},[5855],{"type":175,"value":5856},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":169,"tag":183,"props":5858,"children":5859},{},[5860],{"type":175,"value":5861},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":169,"tag":183,"props":5863,"children":5864},{},[5865],{"type":175,"value":5866},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":169,"tag":177,"props":5868,"children":5870},{"id":5869},"基本的组织元素",[5871],{"type":175,"value":5869},{"type":169,"tag":183,"props":5873,"children":5874},{},[5875],{"type":175,"value":5876},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":169,"tag":778,"props":5878,"children":5879},{},[5880,5906],{"type":169,"tag":782,"props":5881,"children":5882},{},[5883],{"type":169,"tag":786,"props":5884,"children":5885},{},[5886,5891,5896,5901],{"type":169,"tag":790,"props":5887,"children":5888},{},[5889],{"type":175,"value":5890},"元素",{"type":169,"tag":790,"props":5892,"children":5893},{},[5894],{"type":175,"value":5895},"物理形态",{"type":169,"tag":790,"props":5897,"children":5898},{},[5899],{"type":175,"value":5900},"静态",{"type":169,"tag":790,"props":5902,"children":5903},{},[5904],{"type":175,"value":5905},"动态",{"type":169,"tag":801,"props":5907,"children":5908},{},[5909,5930,5953,5975],{"type":169,"tag":786,"props":5910,"children":5911},{},[5912,5917,5920,5925],{"type":169,"tag":808,"props":5913,"children":5914},{},[5915],{"type":175,"value":5916},"标识符",{"type":169,"tag":808,"props":5918,"children":5919},{},[],{"type":169,"tag":808,"props":5921,"children":5922},{},[5923],{"type":175,"value":5924},"变量声明、函数声明、类声明",{"type":169,"tag":808,"props":5926,"children":5927},{},[5928],{"type":175,"value":5929},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":169,"tag":786,"props":5931,"children":5932},{},[5933,5938,5943,5948],{"type":169,"tag":808,"props":5934,"children":5935},{},[5936],{"type":175,"value":5937},"表达式",{"type":169,"tag":808,"props":5939,"children":5940},{},[5941],{"type":175,"value":5942},"模板字符串",{"type":169,"tag":808,"props":5944,"children":5945},{},[5946],{"type":175,"value":5947},"值、箭头函数体",{"type":169,"tag":808,"props":5949,"children":5950},{},[5951],{"type":175,"value":5952},"通过 eval 执行表达式语句",{"type":169,"tag":786,"props":5954,"children":5955},{},[5956,5960,5965,5970],{"type":169,"tag":808,"props":5957,"children":5958},{},[5959],{"type":175,"value":1329},{"type":169,"tag":808,"props":5961,"children":5962},{},[5963],{"type":175,"value":5964},".js 文件",{"type":169,"tag":808,"props":5966,"children":5967},{},[5968],{"type":175,"value":5969},"块和块级作用域",{"type":169,"tag":808,"props":5971,"children":5972},{},[5973],{"type":175,"value":5974},"eval()",{"type":169,"tag":786,"props":5976,"children":5977},{},[5978,5982,5987,5992],{"type":169,"tag":808,"props":5979,"children":5980},{},[5981],{"type":175,"value":2114},{"type":169,"tag":808,"props":5983,"children":5984},{},[5985],{"type":175,"value":5986},".mjs 文件",{"type":169,"tag":808,"props":5988,"children":5989},{},[5990],{"type":175,"value":5991},"import、export、require()",{"type":169,"tag":808,"props":5993,"children":5994},{},[5995],{"type":175,"value":5996},"import().then()",{"type":169,"tag":183,"props":5998,"children":5999},{},[6000],{"type":175,"value":6001},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":169,"tag":183,"props":6003,"children":6004},{},[6005],{"type":175,"value":6006},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":169,"tag":183,"props":6008,"children":6009},{},[6010],{"type":175,"value":6011},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":169,"tag":183,"props":6013,"children":6014},{},[6015,6017,6022],{"type":175,"value":6016},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":169,"tag":205,"props":6018,"children":6019},{},[6020],{"type":175,"value":6021},"1,2,3",{"type":175,"value":6023}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":169,"tag":183,"props":6025,"children":6026},{},[6027],{"type":175,"value":6028},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":169,"tag":183,"props":6030,"children":6031},{},[6032],{"type":175,"value":6033},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":169,"tag":183,"props":6035,"children":6036},{},[6037],{"type":175,"value":6038},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":169,"tag":183,"props":6040,"children":6041},{},[6042],{"type":175,"value":6043},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":169,"tag":177,"props":6045,"children":6047},{"id":6046},"声明",[6048],{"type":175,"value":6046},{"type":169,"tag":183,"props":6050,"children":6051},{},[6052,6054,6065],{"type":175,"value":6053},"除了 const 和 namespace",{"type":169,"tag":262,"props":6055,"children":6056},{},[6057],{"type":169,"tag":266,"props":6058,"children":6062},{"href":6059,"ariaDescribedBy":6060,"dataFootnoteRef":163,"id":6061},"#user-content-fn-namespace",[270],"user-content-fnref-namespace",[6063],{"type":175,"value":6064},"4",{"type":175,"value":6066}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":169,"tag":194,"props":6068,"children":6070},{"className":427,"code":6069,"language":429,"meta":163,"style":163},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6071],{"type":169,"tag":201,"props":6072,"children":6073},{"__ignoreMap":163},[6074,6102,6118,6150,6172],{"type":169,"tag":205,"props":6075,"children":6076},{"class":207,"line":208},[6077,6082,6086,6090,6094,6098],{"type":169,"tag":205,"props":6078,"children":6079},{"style":235},[6080],{"type":175,"value":6081},"!",{"type":169,"tag":205,"props":6083,"children":6084},{"style":439},[6085],{"type":175,"value":459},{"type":169,"tag":205,"props":6087,"children":6088},{"style":763},[6089],{"type":175,"value":1089},{"type":169,"tag":205,"props":6091,"children":6092},{"style":451},[6093],{"type":175,"value":1789},{"type":169,"tag":205,"props":6095,"children":6096},{"style":445},[6097],{"type":175,"value":812},{"type":169,"tag":205,"props":6099,"children":6100},{"style":445},[6101],{"type":175,"value":1104},{"type":169,"tag":205,"props":6103,"children":6104},{"class":207,"line":498},[6105,6109,6113],{"type":169,"tag":205,"props":6106,"children":6107},{"style":439},[6108],{"type":175,"value":2537},{"type":169,"tag":205,"props":6110,"children":6111},{"style":235},[6112],{"type":175,"value":1127},{"type":169,"tag":205,"props":6114,"children":6115},{"style":467},[6116],{"type":175,"value":6117}," 100\n",{"type":169,"tag":205,"props":6119,"children":6120},{"class":207,"line":1143},[6121,6125,6129,6133,6137,6141,6145],{"type":169,"tag":205,"props":6122,"children":6123},{"style":439},[6124],{"type":175,"value":1149},{"type":169,"tag":205,"props":6126,"children":6127},{"style":445},[6128],{"type":175,"value":448},{"type":169,"tag":205,"props":6130,"children":6131},{"style":451},[6132],{"type":175,"value":1158},{"type":169,"tag":205,"props":6134,"children":6135},{"style":1161},[6136],{"type":175,"value":459},{"type":169,"tag":205,"props":6138,"children":6139},{"style":439},[6140],{"type":175,"value":1489},{"type":169,"tag":205,"props":6142,"children":6143},{"style":1161},[6144],{"type":175,"value":489},{"type":169,"tag":205,"props":6146,"children":6147},{"style":492},[6148],{"type":175,"value":6149},"// [Function ...]\n",{"type":169,"tag":205,"props":6151,"children":6152},{"class":207,"line":1184},[6153,6158,6162,6167],{"type":169,"tag":205,"props":6154,"children":6155},{"style":3799},[6156],{"type":175,"value":6157},"  arguments",{"type":169,"tag":205,"props":6159,"children":6160},{"style":235},[6161],{"type":175,"value":1127},{"type":169,"tag":205,"props":6163,"children":6164},{"style":1161},[6165],{"type":175,"value":6166}," [] ",{"type":169,"tag":205,"props":6168,"children":6169},{"style":492},[6170],{"type":175,"value":6171},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":169,"tag":205,"props":6173,"children":6174},{"class":207,"line":1193},[6175,6179],{"type":169,"tag":205,"props":6176,"children":6177},{"style":445},[6178],{"type":175,"value":1437},{"type":169,"tag":205,"props":6180,"children":6181},{"style":439},[6182],{"type":175,"value":6183},"())\n",{"type":169,"tag":183,"props":6185,"children":6186},{},[6187],{"type":175,"value":6188},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":169,"tag":194,"props":6190,"children":6192},{"className":427,"code":6191,"language":429,"meta":163,"style":163},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6193],{"type":169,"tag":201,"props":6194,"children":6195},{"__ignoreMap":163},[6196,6204,6223,6249,6277,6315],{"type":169,"tag":205,"props":6197,"children":6198},{"class":207,"line":208},[6199],{"type":169,"tag":205,"props":6200,"children":6201},{"style":492},[6202],{"type":175,"value":6203},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":169,"tag":205,"props":6205,"children":6206},{"class":207,"line":498},[6207,6211,6215,6219],{"type":169,"tag":205,"props":6208,"children":6209},{"style":763},[6210],{"type":175,"value":1089},{"type":169,"tag":205,"props":6212,"children":6213},{"style":451},[6214],{"type":175,"value":1789},{"type":169,"tag":205,"props":6216,"children":6217},{"style":445},[6218],{"type":175,"value":812},{"type":169,"tag":205,"props":6220,"children":6221},{"style":445},[6222],{"type":175,"value":1104},{"type":169,"tag":205,"props":6224,"children":6225},{"class":207,"line":1143},[6226,6231,6235,6240,6244],{"type":169,"tag":205,"props":6227,"children":6228},{"style":445},[6229],{"type":175,"value":6230},"  {",{"type":169,"tag":205,"props":6232,"children":6233},{"style":763},[6234],{"type":175,"value":1089},{"type":169,"tag":205,"props":6236,"children":6237},{"style":451},[6238],{"type":175,"value":6239}," x",{"type":169,"tag":205,"props":6241,"children":6242},{"style":445},[6243],{"type":175,"value":1099},{"type":169,"tag":205,"props":6245,"children":6246},{"style":445},[6247],{"type":175,"value":6248}," {}};\n",{"type":169,"tag":205,"props":6250,"children":6251},{"class":207,"line":1184},[6252,6256,6260,6264,6269,6273],{"type":169,"tag":205,"props":6253,"children":6254},{"style":1616},[6255],{"type":175,"value":2537},{"type":169,"tag":205,"props":6257,"children":6258},{"style":445},[6259],{"type":175,"value":1623},{"type":169,"tag":205,"props":6261,"children":6262},{"style":763},[6263],{"type":175,"value":1217},{"type":169,"tag":205,"props":6265,"children":6266},{"style":451},[6267],{"type":175,"value":6268}," y",{"type":169,"tag":205,"props":6270,"children":6271},{"style":445},[6272],{"type":175,"value":1099},{"type":169,"tag":205,"props":6274,"children":6275},{"style":445},[6276],{"type":175,"value":2895},{"type":169,"tag":205,"props":6278,"children":6279},{"class":207,"line":1193},[6280,6285,6289,6294,6298,6302,6307,6311],{"type":169,"tag":205,"props":6281,"children":6282},{"style":1467},[6283],{"type":175,"value":6284},"  if",{"type":169,"tag":205,"props":6286,"children":6287},{"style":1161},[6288],{"type":175,"value":1696},{"type":169,"tag":205,"props":6290,"children":6291},{"style":602},[6292],{"type":175,"value":6293},"true",{"type":169,"tag":205,"props":6295,"children":6296},{"style":1161},[6297],{"type":175,"value":489},{"type":169,"tag":205,"props":6299,"children":6300},{"style":763},[6301],{"type":175,"value":1089},{"type":169,"tag":205,"props":6303,"children":6304},{"style":451},[6305],{"type":175,"value":6306}," z",{"type":169,"tag":205,"props":6308,"children":6309},{"style":445},[6310],{"type":175,"value":1099},{"type":169,"tag":205,"props":6312,"children":6313},{"style":445},[6314],{"type":175,"value":2895},{"type":169,"tag":205,"props":6316,"children":6317},{"class":207,"line":1228},[6318],{"type":169,"tag":205,"props":6319,"children":6320},{"style":445},[6321],{"type":175,"value":1190},{"type":169,"tag":177,"props":6323,"children":6325},{"id":6324},"语句与代码分块",[6326],{"type":175,"value":6324},{"type":169,"tag":183,"props":6328,"children":6329},{},[6330],{"type":175,"value":6331},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":169,"tag":183,"props":6333,"children":6334},{},[6335],{"type":175,"value":6336},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":169,"tag":183,"props":6338,"children":6339},{},[6340,6342,6353],{"type":175,"value":6341},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":169,"tag":262,"props":6343,"children":6344},{},[6345],{"type":169,"tag":266,"props":6346,"children":6350},{"href":6347,"ariaDescribedBy":6348,"dataFootnoteRef":163,"id":6349},"#user-content-fn-iterationenv",[270],"user-content-fnref-iterationenv",[6351],{"type":175,"value":6352},"5",{"type":175,"value":6354},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":169,"tag":183,"props":6356,"children":6357},{},[6358],{"type":175,"value":6359},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":169,"tag":183,"props":6361,"children":6362},{},[6363],{"type":175,"value":6364},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":169,"tag":194,"props":6366,"children":6368},{"className":427,"code":6367,"language":429,"meta":163,"style":163},"eval(`if (true) ; else ;`) // undefined\n",[6369],{"type":169,"tag":201,"props":6370,"children":6371},{"__ignoreMap":163},[6372],{"type":169,"tag":205,"props":6373,"children":6374},{"class":207,"line":208},[6375,6380,6384,6389,6394,6398,6402],{"type":169,"tag":205,"props":6376,"children":6377},{"style":451},[6378],{"type":175,"value":6379},"eval",{"type":169,"tag":205,"props":6381,"children":6382},{"style":439},[6383],{"type":175,"value":459},{"type":169,"tag":205,"props":6385,"children":6386},{"style":218},[6387],{"type":175,"value":6388},"`",{"type":169,"tag":205,"props":6390,"children":6391},{"style":224},[6392],{"type":175,"value":6393},"if (true) ; else ;",{"type":169,"tag":205,"props":6395,"children":6396},{"style":218},[6397],{"type":175,"value":6388},{"type":169,"tag":205,"props":6399,"children":6400},{"style":439},[6401],{"type":175,"value":489},{"type":169,"tag":205,"props":6403,"children":6404},{"style":492},[6405],{"type":175,"value":729},{"type":169,"tag":177,"props":6407,"children":6409},{"id":6408},"组织形式分块的方法",[6410],{"type":175,"value":6408},{"type":169,"tag":183,"props":6412,"children":6413},{},[6414],{"type":175,"value":6415},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":169,"tag":183,"props":6417,"children":6418},{},[6419],{"type":175,"value":6420},"数据声明语句中存在块级作用域，如：",{"type":169,"tag":194,"props":6422,"children":6424},{"className":427,"code":6423,"language":429,"meta":163,"style":163},"const x = 1, y = x\nconsole.log(y) // 1\n",[6425],{"type":169,"tag":201,"props":6426,"children":6427},{"__ignoreMap":163},[6428,6463],{"type":169,"tag":205,"props":6429,"children":6430},{"class":207,"line":208},[6431,6435,6439,6443,6447,6451,6455,6459],{"type":169,"tag":205,"props":6432,"children":6433},{"style":763},[6434],{"type":175,"value":5554},{"type":169,"tag":205,"props":6436,"children":6437},{"style":1197},[6438],{"type":175,"value":6239},{"type":169,"tag":205,"props":6440,"children":6441},{"style":235},[6442],{"type":175,"value":1127},{"type":169,"tag":205,"props":6444,"children":6445},{"style":467},[6446],{"type":175,"value":1573},{"type":169,"tag":205,"props":6448,"children":6449},{"style":445},[6450],{"type":175,"value":475},{"type":169,"tag":205,"props":6452,"children":6453},{"style":1197},[6454],{"type":175,"value":6268},{"type":169,"tag":205,"props":6456,"children":6457},{"style":235},[6458],{"type":175,"value":1127},{"type":169,"tag":205,"props":6460,"children":6461},{"style":439},[6462],{"type":175,"value":771},{"type":169,"tag":205,"props":6464,"children":6465},{"class":207,"line":498},[6466,6470,6474,6478,6483],{"type":169,"tag":205,"props":6467,"children":6468},{"style":439},[6469],{"type":175,"value":4783},{"type":169,"tag":205,"props":6471,"children":6472},{"style":445},[6473],{"type":175,"value":448},{"type":169,"tag":205,"props":6475,"children":6476},{"style":451},[6477],{"type":175,"value":1158},{"type":169,"tag":205,"props":6479,"children":6480},{"style":439},[6481],{"type":175,"value":6482},"(y) ",{"type":169,"tag":205,"props":6484,"children":6485},{"style":492},[6486],{"type":175,"value":6487},"// 1\n",{"type":169,"tag":183,"props":6489,"children":6490},{},[6491],{"type":175,"value":6492},"表达式级别的作用域只存在于 eval 调用中。",{"type":169,"tag":183,"props":6494,"children":6495},{},[6496],{"type":175,"value":6497},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":169,"tag":194,"props":6499,"children":6501},{"className":427,"code":6500,"language":429,"meta":163,"style":163},"if (1) let x = 1\n",[6502],{"type":169,"tag":201,"props":6503,"children":6504},{"__ignoreMap":163},[6505],{"type":169,"tag":205,"props":6506,"children":6507},{"class":207,"line":208},[6508,6513,6517,6521,6525,6529,6533,6537],{"type":169,"tag":205,"props":6509,"children":6510},{"style":1467},[6511],{"type":175,"value":6512},"if",{"type":169,"tag":205,"props":6514,"children":6515},{"style":439},[6516],{"type":175,"value":1696},{"type":169,"tag":205,"props":6518,"children":6519},{"style":467},[6520],{"type":175,"value":274},{"type":169,"tag":205,"props":6522,"children":6523},{"style":439},[6524],{"type":175,"value":489},{"type":169,"tag":205,"props":6526,"children":6527},{"style":763},[6528],{"type":175,"value":766},{"type":169,"tag":205,"props":6530,"children":6531},{"style":439},[6532],{"type":175,"value":724},{"type":169,"tag":205,"props":6534,"children":6535},{"style":235},[6536],{"type":175,"value":1638},{"type":169,"tag":205,"props":6538,"children":6539},{"style":467},[6540],{"type":175,"value":6541}," 1\n",{"type":169,"tag":183,"props":6543,"children":6544},{},[6545],{"type":175,"value":6546},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":169,"tag":183,"props":6548,"children":6549},{},[6550],{"type":175,"value":6551},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":169,"tag":183,"props":6553,"children":6554},{},[6555],{"type":175,"value":6556},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":169,"tag":283,"props":6558,"children":6559},{},[6560,6565,6570],{"type":169,"tag":287,"props":6561,"children":6562},{},[6563],{"type":175,"value":6564},"词法作用域互不相交。",{"type":169,"tag":287,"props":6566,"children":6567},{},[6568],{"type":175,"value":6569},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":169,"tag":287,"props":6571,"children":6572},{},[6573],{"type":175,"value":6574},"高级别流程变更语句可以跨越低级别的作用域。",{"type":169,"tag":183,"props":6576,"children":6577},{},[6578],{"type":175,"value":6579},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":169,"tag":177,"props":6581,"children":6583},{"id":6582},"层次结构程序设计",[6584],{"type":175,"value":6582},{"type":169,"tag":183,"props":6586,"children":6587},{},[6588],{"type":175,"value":6589},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":169,"tag":194,"props":6591,"children":6593},{"className":427,"code":6592,"language":429,"meta":163,"style":163},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6594],{"type":169,"tag":201,"props":6595,"children":6596},{"__ignoreMap":163},[6597,6636],{"type":169,"tag":205,"props":6598,"children":6599},{"class":207,"line":208},[6600,6604,6609,6613,6618,6622,6627,6631],{"type":169,"tag":205,"props":6601,"children":6602},{"style":763},[6603],{"type":175,"value":5554},{"type":169,"tag":205,"props":6605,"children":6606},{"style":1197},[6607],{"type":175,"value":6608}," method",{"type":169,"tag":205,"props":6610,"children":6611},{"style":235},[6612],{"type":175,"value":1127},{"type":169,"tag":205,"props":6614,"children":6615},{"style":439},[6616],{"type":175,"value":6617}," obj[Object",{"type":169,"tag":205,"props":6619,"children":6620},{"style":445},[6621],{"type":175,"value":448},{"type":169,"tag":205,"props":6623,"children":6624},{"style":439},[6625],{"type":175,"value":6626},"getPropertySymbols[",{"type":169,"tag":205,"props":6628,"children":6629},{"style":467},[6630],{"type":175,"value":470},{"type":169,"tag":205,"props":6632,"children":6633},{"style":439},[6634],{"type":175,"value":6635},"]]\n",{"type":169,"tag":205,"props":6637,"children":6638},{"class":207,"line":498},[6639,6643,6647,6652],{"type":169,"tag":205,"props":6640,"children":6641},{"style":439},[6642],{"type":175,"value":3517},{"type":169,"tag":205,"props":6644,"children":6645},{"style":445},[6646],{"type":175,"value":448},{"type":169,"tag":205,"props":6648,"children":6649},{"style":451},[6650],{"type":175,"value":6651},"call",{"type":169,"tag":205,"props":6653,"children":6654},{"style":439},[6655],{"type":175,"value":6656},"(obj)\n",{"type":169,"tag":183,"props":6658,"children":6659},{},[6660],{"type":175,"value":6661},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":169,"tag":177,"props":6663,"children":6665},{"id":6664},"变量作用域",[6666],{"type":175,"value":6664},{"type":169,"tag":183,"props":6668,"children":6669},{},[6670],{"type":175,"value":6671},"变量作用域有三个特殊之处：",{"type":169,"tag":283,"props":6673,"children":6674},{},[6675,6680,6685],{"type":169,"tag":287,"props":6676,"children":6677},{},[6678],{"type":175,"value":6679},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":169,"tag":287,"props":6681,"children":6682},{},[6683],{"type":175,"value":6684},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":169,"tag":287,"props":6686,"children":6687},{},[6688],{"type":175,"value":6689},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":169,"tag":183,"props":6691,"children":6692},{},[6693],{"type":175,"value":6694},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":169,"tag":183,"props":6696,"children":6697},{},[6698],{"type":175,"value":6699},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":169,"tag":177,"props":6701,"children":6703},{"id":6702},"私有属性和私有字段的纷争",[6704],{"type":175,"value":6702},{"type":169,"tag":183,"props":6706,"children":6707},{},[6708],{"type":175,"value":6709},"(_　_)。゜zｚＺ",{"type":169,"tag":170,"props":6711,"children":6713},{"id":6712},"函数式语言特性",[6714],{"type":175,"value":6712},{"type":169,"tag":177,"props":6716,"children":6718},{"id":6717},"概述-1",[6719],{"type":175,"value":5816},{"type":169,"tag":183,"props":6721,"children":6722},{},[6723],{"type":175,"value":6724},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":169,"tag":183,"props":6726,"children":6727},{},[6728],{"type":175,"value":6729},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":169,"tag":177,"props":6731,"children":6733},{"id":6732},"js中的函数",[6734],{"type":175,"value":6735},"JS中的函数",{"type":169,"tag":183,"props":6737,"children":6738},{},[6739],{"type":175,"value":6740},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":169,"tag":283,"props":6742,"children":6743},{},[6744,6749,6754],{"type":169,"tag":287,"props":6745,"children":6746},{},[6747],{"type":175,"value":6748},"无法显式使用“use strict”切换到严格模式。",{"type":169,"tag":287,"props":6750,"children":6751},{},[6752],{"type":175,"value":6753},"不接受重名参数。",{"type":169,"tag":287,"props":6755,"children":6756},{},[6757],{"type":175,"value":6758},"形参和 arguments 之间将解除绑定关系。",{"type":169,"tag":183,"props":6760,"children":6761},{},[6762],{"type":175,"value":6763},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":169,"tag":194,"props":6765,"children":6767},{"className":427,"code":6766,"language":429,"meta":163,"style":163},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[6768],{"type":169,"tag":201,"props":6769,"children":6770},{"__ignoreMap":163},[6771,6815,6868,6875],{"type":169,"tag":205,"props":6772,"children":6773},{"class":207,"line":208},[6774,6778,6782,6786,6790,6794,6799,6803,6807,6811],{"type":169,"tag":205,"props":6775,"children":6776},{"style":763},[6777],{"type":175,"value":1089},{"type":169,"tag":205,"props":6779,"children":6780},{"style":451},[6781],{"type":175,"value":1789},{"type":169,"tag":205,"props":6783,"children":6784},{"style":445},[6785],{"type":175,"value":459},{"type":169,"tag":205,"props":6787,"children":6788},{"style":1390},[6789],{"type":175,"value":266},{"type":169,"tag":205,"props":6791,"children":6792},{"style":445},[6793],{"type":175,"value":475},{"type":169,"tag":205,"props":6795,"children":6796},{"style":1390},[6797],{"type":175,"value":6798}," b",{"type":169,"tag":205,"props":6800,"children":6801},{"style":235},[6802],{"type":175,"value":1127},{"type":169,"tag":205,"props":6804,"children":6805},{"style":467},[6806],{"type":175,"value":1573},{"type":169,"tag":205,"props":6808,"children":6809},{"style":445},[6810],{"type":175,"value":1398},{"type":169,"tag":205,"props":6812,"children":6813},{"style":445},[6814],{"type":175,"value":1104},{"type":169,"tag":205,"props":6816,"children":6817},{"class":207,"line":498},[6818,6822,6826,6830,6834,6838,6842,6847,6851,6856,6860,6864],{"type":169,"tag":205,"props":6819,"children":6820},{"style":439},[6821],{"type":175,"value":1149},{"type":169,"tag":205,"props":6823,"children":6824},{"style":445},[6825],{"type":175,"value":448},{"type":169,"tag":205,"props":6827,"children":6828},{"style":451},[6829],{"type":175,"value":1158},{"type":169,"tag":205,"props":6831,"children":6832},{"style":1161},[6833],{"type":175,"value":459},{"type":169,"tag":205,"props":6835,"children":6836},{"style":439},[6837],{"type":175,"value":1489},{"type":169,"tag":205,"props":6839,"children":6840},{"style":445},[6841],{"type":175,"value":448},{"type":169,"tag":205,"props":6843,"children":6844},{"style":1197},[6845],{"type":175,"value":6846},"length",{"type":169,"tag":205,"props":6848,"children":6849},{"style":445},[6850],{"type":175,"value":475},{"type":169,"tag":205,"props":6852,"children":6853},{"style":3799},[6854],{"type":175,"value":6855}," arguments",{"type":169,"tag":205,"props":6857,"children":6858},{"style":445},[6859],{"type":175,"value":448},{"type":169,"tag":205,"props":6861,"children":6862},{"style":1197},[6863],{"type":175,"value":6846},{"type":169,"tag":205,"props":6865,"children":6866},{"style":1161},[6867],{"type":175,"value":1181},{"type":169,"tag":205,"props":6869,"children":6870},{"class":207,"line":1143},[6871],{"type":169,"tag":205,"props":6872,"children":6873},{"style":445},[6874],{"type":175,"value":1190},{"type":169,"tag":205,"props":6876,"children":6877},{"class":207,"line":1184},[6878,6882,6886,6890,6894,6899,6903],{"type":169,"tag":205,"props":6879,"children":6880},{"style":451},[6881],{"type":175,"value":1489},{"type":169,"tag":205,"props":6883,"children":6884},{"style":439},[6885],{"type":175,"value":459},{"type":169,"tag":205,"props":6887,"children":6888},{"style":467},[6889],{"type":175,"value":274},{"type":169,"tag":205,"props":6891,"children":6892},{"style":445},[6893],{"type":175,"value":475},{"type":169,"tag":205,"props":6895,"children":6896},{"style":467},[6897],{"type":175,"value":6898}," 2",{"type":169,"tag":205,"props":6900,"children":6901},{"style":439},[6902],{"type":175,"value":489},{"type":169,"tag":205,"props":6904,"children":6905},{"style":492},[6906],{"type":175,"value":6907},"// 1，2\n",{"type":169,"tag":183,"props":6909,"children":6910},{},[6911,6913,6924],{"type":175,"value":6912},"表达式最后返回的是值而不是引用",{"type":169,"tag":262,"props":6914,"children":6915},{},[6916],{"type":169,"tag":266,"props":6917,"children":6921},{"href":6918,"ariaDescribedBy":6919,"dataFootnoteRef":163,"id":6920},"#user-content-fn-reference",[270],"user-content-fnref-reference",[6922],{"type":175,"value":6923},"6",{"type":175,"value":6925},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":169,"tag":194,"props":6927,"children":6929},{"className":427,"code":6928,"language":429,"meta":163,"style":163},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[6930],{"type":169,"tag":201,"props":6931,"children":6932},{"__ignoreMap":163},[6933,6958,6977,6998,7014,7051,7058,7065,7102],{"type":169,"tag":205,"props":6934,"children":6935},{"class":207,"line":208},[6936,6941,6945,6950,6954],{"type":169,"tag":205,"props":6937,"children":6938},{"style":439},[6939],{"type":175,"value":6940},"window",{"type":169,"tag":205,"props":6942,"children":6943},{"style":445},[6944],{"type":175,"value":448},{"type":169,"tag":205,"props":6946,"children":6947},{"style":439},[6948],{"type":175,"value":6949},"x ",{"type":169,"tag":205,"props":6951,"children":6952},{"style":235},[6953],{"type":175,"value":1638},{"type":169,"tag":205,"props":6955,"children":6956},{"style":467},[6957],{"type":175,"value":6541},{"type":169,"tag":205,"props":6959,"children":6960},{"class":207,"line":498},[6961,6965,6969,6973],{"type":169,"tag":205,"props":6962,"children":6963},{"style":763},[6964],{"type":175,"value":5554},{"type":169,"tag":205,"props":6966,"children":6967},{"style":1197},[6968],{"type":175,"value":2987},{"type":169,"tag":205,"props":6970,"children":6971},{"style":235},[6972],{"type":175,"value":1127},{"type":169,"tag":205,"props":6974,"children":6975},{"style":445},[6976],{"type":175,"value":1104},{"type":169,"tag":205,"props":6978,"children":6979},{"class":207,"line":1143},[6980,6985,6989,6993],{"type":169,"tag":205,"props":6981,"children":6982},{"style":1161},[6983],{"type":175,"value":6984},"  x",{"type":169,"tag":205,"props":6986,"children":6987},{"style":445},[6988],{"type":175,"value":1623},{"type":169,"tag":205,"props":6990,"children":6991},{"style":467},[6992],{"type":175,"value":6898},{"type":169,"tag":205,"props":6994,"children":6995},{"style":445},[6996],{"type":175,"value":6997},",\n",{"type":169,"tag":205,"props":6999,"children":7000},{"class":207,"line":1184},[7001,7006,7010],{"type":169,"tag":205,"props":7002,"children":7003},{"style":2423},[7004],{"type":175,"value":7005},"  b",{"type":169,"tag":205,"props":7007,"children":7008},{"style":445},[7009],{"type":175,"value":1099},{"type":169,"tag":205,"props":7011,"children":7012},{"style":445},[7013],{"type":175,"value":1104},{"type":169,"tag":205,"props":7015,"children":7016},{"class":207,"line":1193},[7017,7022,7026,7030,7034,7039,7043,7047],{"type":169,"tag":205,"props":7018,"children":7019},{"style":439},[7020],{"type":175,"value":7021},"    console",{"type":169,"tag":205,"props":7023,"children":7024},{"style":445},[7025],{"type":175,"value":448},{"type":169,"tag":205,"props":7027,"children":7028},{"style":451},[7029],{"type":175,"value":1158},{"type":169,"tag":205,"props":7031,"children":7032},{"style":1161},[7033],{"type":175,"value":459},{"type":169,"tag":205,"props":7035,"children":7036},{"style":1110},[7037],{"type":175,"value":7038},"this",{"type":169,"tag":205,"props":7040,"children":7041},{"style":445},[7042],{"type":175,"value":448},{"type":169,"tag":205,"props":7044,"children":7045},{"style":439},[7046],{"type":175,"value":2434},{"type":169,"tag":205,"props":7048,"children":7049},{"style":1161},[7050],{"type":175,"value":1181},{"type":169,"tag":205,"props":7052,"children":7053},{"class":207,"line":1228},[7054],{"type":169,"tag":205,"props":7055,"children":7056},{"style":445},[7057],{"type":175,"value":1843},{"type":169,"tag":205,"props":7059,"children":7060},{"class":207,"line":1265},[7061],{"type":169,"tag":205,"props":7062,"children":7063},{"style":445},[7064],{"type":175,"value":1190},{"type":169,"tag":205,"props":7066,"children":7067},{"class":207,"line":1273},[7068,7072,7076,7080,7085,7089,7093,7097],{"type":169,"tag":205,"props":7069,"children":7070},{"style":439},[7071],{"type":175,"value":4783},{"type":169,"tag":205,"props":7073,"children":7074},{"style":445},[7075],{"type":175,"value":448},{"type":169,"tag":205,"props":7077,"children":7078},{"style":451},[7079],{"type":175,"value":1158},{"type":169,"tag":205,"props":7081,"children":7082},{"style":439},[7083],{"type":175,"value":7084},"(a",{"type":169,"tag":205,"props":7086,"children":7087},{"style":445},[7088],{"type":175,"value":448},{"type":169,"tag":205,"props":7090,"children":7091},{"style":451},[7092],{"type":175,"value":1122},{"type":169,"tag":205,"props":7094,"children":7095},{"style":439},[7096],{"type":175,"value":578},{"type":169,"tag":205,"props":7098,"children":7099},{"style":492},[7100],{"type":175,"value":7101},"// 2\n",{"type":169,"tag":205,"props":7103,"children":7104},{"class":207,"line":1300},[7105,7109,7113,7117,7122,7126,7130,7134,7138,7143],{"type":169,"tag":205,"props":7106,"children":7107},{"style":439},[7108],{"type":175,"value":4783},{"type":169,"tag":205,"props":7110,"children":7111},{"style":445},[7112],{"type":175,"value":448},{"type":169,"tag":205,"props":7114,"children":7115},{"style":451},[7116],{"type":175,"value":1158},{"type":169,"tag":205,"props":7118,"children":7119},{"style":439},[7120],{"type":175,"value":7121},"((",{"type":169,"tag":205,"props":7123,"children":7124},{"style":467},[7125],{"type":175,"value":470},{"type":169,"tag":205,"props":7127,"children":7128},{"style":445},[7129],{"type":175,"value":475},{"type":169,"tag":205,"props":7131,"children":7132},{"style":439},[7133],{"type":175,"value":2987},{"type":169,"tag":205,"props":7135,"children":7136},{"style":445},[7137],{"type":175,"value":448},{"type":169,"tag":205,"props":7139,"children":7140},{"style":439},[7141],{"type":175,"value":7142},"b)()) ",{"type":169,"tag":205,"props":7144,"children":7145},{"style":492},[7146],{"type":175,"value":6487},{"type":169,"tag":183,"props":7148,"children":7149},{},[7150],{"type":175,"value":7151},"具名函数在表达式中时不会声明标识符。",{"type":169,"tag":183,"props":7153,"children":7154},{},[7155],{"type":175,"value":7156},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":169,"tag":194,"props":7158,"children":7160},{"className":427,"code":7159,"language":429,"meta":163,"style":163},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7161],{"type":169,"tag":201,"props":7162,"children":7163},{"__ignoreMap":163},[7164,7183,7211,7226,7233,7261],{"type":169,"tag":205,"props":7165,"children":7166},{"class":207,"line":208},[7167,7171,7175,7179],{"type":169,"tag":205,"props":7168,"children":7169},{"style":763},[7170],{"type":175,"value":5554},{"type":169,"tag":205,"props":7172,"children":7173},{"style":1197},[7174],{"type":175,"value":2987},{"type":169,"tag":205,"props":7176,"children":7177},{"style":235},[7178],{"type":175,"value":1127},{"type":169,"tag":205,"props":7180,"children":7181},{"style":445},[7182],{"type":175,"value":1104},{"type":169,"tag":205,"props":7184,"children":7185},{"class":207,"line":498},[7186,7190,7194,7198,7202,7206],{"type":169,"tag":205,"props":7187,"children":7188},{"style":451},[7189],{"type":175,"value":7005},{"type":169,"tag":205,"props":7191,"children":7192},{"style":445},[7193],{"type":175,"value":1623},{"type":169,"tag":205,"props":7195,"children":7196},{"style":763},[7197],{"type":175,"value":1217},{"type":169,"tag":205,"props":7199,"children":7200},{"style":451},[7201],{"type":175,"value":1789},{"type":169,"tag":205,"props":7203,"children":7204},{"style":445},[7205],{"type":175,"value":812},{"type":169,"tag":205,"props":7207,"children":7208},{"style":445},[7209],{"type":175,"value":7210}," {},\n",{"type":169,"tag":205,"props":7212,"children":7213},{"class":207,"line":1143},[7214,7218,7222],{"type":169,"tag":205,"props":7215,"children":7216},{"style":2423},[7217],{"type":175,"value":2537},{"type":169,"tag":205,"props":7219,"children":7220},{"style":445},[7221],{"type":175,"value":812},{"type":169,"tag":205,"props":7223,"children":7224},{"style":445},[7225],{"type":175,"value":2895},{"type":169,"tag":205,"props":7227,"children":7228},{"class":207,"line":1184},[7229],{"type":169,"tag":205,"props":7230,"children":7231},{"style":445},[7232],{"type":175,"value":1190},{"type":169,"tag":205,"props":7234,"children":7235},{"class":207,"line":1193},[7236,7240,7244,7248,7252,7256],{"type":169,"tag":205,"props":7237,"children":7238},{"style":235},[7239],{"type":175,"value":1279},{"type":169,"tag":205,"props":7241,"children":7242},{"style":439},[7243],{"type":175,"value":2987},{"type":169,"tag":205,"props":7245,"children":7246},{"style":445},[7247],{"type":175,"value":448},{"type":169,"tag":205,"props":7249,"children":7250},{"style":451},[7251],{"type":175,"value":1122},{"type":169,"tag":205,"props":7253,"children":7254},{"style":439},[7255],{"type":175,"value":594},{"type":169,"tag":205,"props":7257,"children":7258},{"style":492},[7259],{"type":175,"value":7260},"// {}\n",{"type":169,"tag":205,"props":7262,"children":7263},{"class":207,"line":1228},[7264,7268,7272,7276,7280,7284],{"type":169,"tag":205,"props":7265,"children":7266},{"style":235},[7267],{"type":175,"value":1279},{"type":169,"tag":205,"props":7269,"children":7270},{"style":439},[7271],{"type":175,"value":2987},{"type":169,"tag":205,"props":7273,"children":7274},{"style":445},[7275],{"type":175,"value":448},{"type":169,"tag":205,"props":7277,"children":7278},{"style":451},[7279],{"type":175,"value":1489},{"type":169,"tag":205,"props":7281,"children":7282},{"style":439},[7283],{"type":175,"value":594},{"type":169,"tag":205,"props":7285,"children":7286},{"style":492},[7287],{"type":175,"value":3004},{"type":169,"tag":183,"props":7289,"children":7290},{},[7291],{"type":175,"value":7292},"方法的特性总结以下三点：",{"type":169,"tag":283,"props":7294,"children":7295},{},[7296,7301,7306],{"type":169,"tag":287,"props":7297,"children":7298},{},[7299],{"type":175,"value":7300},"不能作为构造器。",{"type":169,"tag":287,"props":7302,"children":7303},{},[7304],{"type":175,"value":7305},"除了生成器方法，没有内部原型。",{"type":169,"tag":287,"props":7307,"children":7308},{},[7309],{"type":175,"value":7310},"方法不能具名。",{"type":169,"tag":183,"props":7312,"children":7313},{},[7314],{"type":175,"value":7315},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":169,"tag":194,"props":7317,"children":7319},{"className":427,"code":7318,"language":429,"meta":163,"style":163},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7320],{"type":169,"tag":201,"props":7321,"children":7322},{"__ignoreMap":163},[7323],{"type":169,"tag":205,"props":7324,"children":7325},{"class":207,"line":208},[7326,7330,7334,7338,7343,7347,7351,7355,7359],{"type":169,"tag":205,"props":7327,"children":7328},{"style":439},[7329],{"type":175,"value":442},{"type":169,"tag":205,"props":7331,"children":7332},{"style":445},[7333],{"type":175,"value":448},{"type":169,"tag":205,"props":7335,"children":7336},{"style":451},[7337],{"type":175,"value":3405},{"type":169,"tag":205,"props":7339,"children":7340},{"style":439},[7341],{"type":175,"value":7342},"(boundFn",{"type":169,"tag":205,"props":7344,"children":7345},{"style":445},[7346],{"type":175,"value":475},{"type":169,"tag":205,"props":7348,"children":7349},{"style":439},[7350],{"type":175,"value":3876},{"type":169,"tag":205,"props":7352,"children":7353},{"style":445},[7354],{"type":175,"value":448},{"type":169,"tag":205,"props":7356,"children":7357},{"style":451},[7358],{"type":175,"value":5291},{"type":169,"tag":205,"props":7360,"children":7361},{"style":439},[7362],{"type":175,"value":7363},"(targetFn))\n",{"type":169,"tag":183,"props":7365,"children":7366},{},[7367],{"type":175,"value":7368},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":169,"tag":194,"props":7370,"children":7372},{"className":427,"code":7371,"language":429,"meta":163,"style":163},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7373],{"type":169,"tag":201,"props":7374,"children":7375},{"__ignoreMap":163},[7376,7395,7438,7445],{"type":169,"tag":205,"props":7377,"children":7378},{"class":207,"line":208},[7379,7383,7387,7391],{"type":169,"tag":205,"props":7380,"children":7381},{"style":763},[7382],{"type":175,"value":1089},{"type":169,"tag":205,"props":7384,"children":7385},{"style":451},[7386],{"type":175,"value":2987},{"type":169,"tag":205,"props":7388,"children":7389},{"style":445},[7390],{"type":175,"value":1099},{"type":169,"tag":205,"props":7392,"children":7393},{"style":445},[7394],{"type":175,"value":1104},{"type":169,"tag":205,"props":7396,"children":7397},{"class":207,"line":498},[7398,7402,7406,7410,7414,7418,7422,7426,7430,7434],{"type":169,"tag":205,"props":7399,"children":7400},{"style":439},[7401],{"type":175,"value":1149},{"type":169,"tag":205,"props":7403,"children":7404},{"style":445},[7405],{"type":175,"value":448},{"type":169,"tag":205,"props":7407,"children":7408},{"style":451},[7409],{"type":175,"value":1158},{"type":169,"tag":205,"props":7411,"children":7412},{"style":1161},[7413],{"type":175,"value":459},{"type":169,"tag":205,"props":7415,"children":7416},{"style":235},[7417],{"type":175,"value":1279},{"type":169,"tag":205,"props":7419,"children":7420},{"style":445},[7421],{"type":175,"value":448},{"type":169,"tag":205,"props":7423,"children":7424},{"style":1197},[7425],{"type":175,"value":5418},{"type":169,"tag":205,"props":7427,"children":7428},{"style":235},[7429],{"type":175,"value":1770},{"type":169,"tag":205,"props":7431,"children":7432},{"style":439},[7433],{"type":175,"value":2987},{"type":169,"tag":205,"props":7435,"children":7436},{"style":1161},[7437],{"type":175,"value":1181},{"type":169,"tag":205,"props":7439,"children":7440},{"class":207,"line":1143},[7441],{"type":169,"tag":205,"props":7442,"children":7443},{"style":445},[7444],{"type":175,"value":1190},{"type":169,"tag":205,"props":7446,"children":7447},{"class":207,"line":1184},[7448,7452,7456,7460,7464,7468,7473,7477,7482,7487],{"type":169,"tag":205,"props":7449,"children":7450},{"style":439},[7451],{"type":175,"value":4783},{"type":169,"tag":205,"props":7453,"children":7454},{"style":445},[7455],{"type":175,"value":448},{"type":169,"tag":205,"props":7457,"children":7458},{"style":451},[7459],{"type":175,"value":1158},{"type":169,"tag":205,"props":7461,"children":7462},{"style":439},[7463],{"type":175,"value":459},{"type":169,"tag":205,"props":7465,"children":7466},{"style":235},[7467],{"type":175,"value":1279},{"type":169,"tag":205,"props":7469,"children":7470},{"style":439},[7471],{"type":175,"value":7472}," (a",{"type":169,"tag":205,"props":7474,"children":7475},{"style":445},[7476],{"type":175,"value":448},{"type":169,"tag":205,"props":7478,"children":7479},{"style":451},[7480],{"type":175,"value":7481},"bind",{"type":169,"tag":205,"props":7483,"children":7484},{"style":439},[7485],{"type":175,"value":7486},"())) ",{"type":169,"tag":205,"props":7488,"children":7489},{"style":492},[7490],{"type":175,"value":539},{"type":169,"tag":183,"props":7492,"children":7493},{},[7494],{"type":175,"value":7495},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":169,"tag":183,"props":7497,"children":7498},{},[7499],{"type":175,"value":7500},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":169,"tag":194,"props":7502,"children":7504},{"className":427,"code":7503,"language":429,"meta":163,"style":163},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7505],{"type":169,"tag":201,"props":7506,"children":7507},{"__ignoreMap":163},[7508,7527,7548,7573,7603,7635,7663,7689,7717,7733,7785,7793,7800,7823,7830,7837],{"type":169,"tag":205,"props":7509,"children":7510},{"class":207,"line":208},[7511,7515,7519,7523],{"type":169,"tag":205,"props":7512,"children":7513},{"style":763},[7514],{"type":175,"value":5554},{"type":169,"tag":205,"props":7516,"children":7517},{"style":1197},[7518],{"type":175,"value":2404},{"type":169,"tag":205,"props":7520,"children":7521},{"style":235},[7522],{"type":175,"value":1127},{"type":169,"tag":205,"props":7524,"children":7525},{"style":445},[7526],{"type":175,"value":1104},{"type":169,"tag":205,"props":7528,"children":7529},{"class":207,"line":498},[7530,7535,7539,7544],{"type":169,"tag":205,"props":7531,"children":7532},{"style":1161},[7533],{"type":175,"value":7534},"  step",{"type":169,"tag":205,"props":7536,"children":7537},{"style":445},[7538],{"type":175,"value":1623},{"type":169,"tag":205,"props":7540,"children":7541},{"style":467},[7542],{"type":175,"value":7543}," 0",{"type":169,"tag":205,"props":7545,"children":7546},{"style":445},[7547],{"type":175,"value":6997},{"type":169,"tag":205,"props":7549,"children":7550},{"class":207,"line":1143},[7551,7556,7560,7565,7569],{"type":169,"tag":205,"props":7552,"children":7553},{"style":2423},[7554],{"type":175,"value":7555},"  run",{"type":169,"tag":205,"props":7557,"children":7558},{"style":445},[7559],{"type":175,"value":1696},{"type":169,"tag":205,"props":7561,"children":7562},{"style":1390},[7563],{"type":175,"value":7564},"init",{"type":169,"tag":205,"props":7566,"children":7567},{"style":445},[7568],{"type":175,"value":1398},{"type":169,"tag":205,"props":7570,"children":7571},{"style":445},[7572],{"type":175,"value":1104},{"type":169,"tag":205,"props":7574,"children":7575},{"class":207,"line":1184},[7576,7581,7587,7591,7595,7599],{"type":169,"tag":205,"props":7577,"children":7578},{"style":763},[7579],{"type":175,"value":7580},"    const",{"type":169,"tag":205,"props":7582,"children":7584},{"style":7583},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7585],{"type":175,"value":7586}," exec",{"type":169,"tag":205,"props":7588,"children":7589},{"style":235},[7590],{"type":175,"value":1127},{"type":169,"tag":205,"props":7592,"children":7593},{"style":1390},[7594],{"type":175,"value":6239},{"type":169,"tag":205,"props":7596,"children":7597},{"style":763},[7598],{"type":175,"value":5490},{"type":169,"tag":205,"props":7600,"children":7601},{"style":445},[7602],{"type":175,"value":1104},{"type":169,"tag":205,"props":7604,"children":7605},{"class":207,"line":1193},[7606,7610,7614,7618,7623,7627,7631],{"type":169,"tag":205,"props":7607,"children":7608},{"style":1467},[7609],{"type":175,"value":2003},{"type":169,"tag":205,"props":7611,"children":7612},{"style":1161},[7613],{"type":175,"value":1696},{"type":169,"tag":205,"props":7615,"children":7616},{"style":439},[7617],{"type":175,"value":2434},{"type":169,"tag":205,"props":7619,"children":7620},{"style":235},[7621],{"type":175,"value":7622}," >",{"type":169,"tag":205,"props":7624,"children":7625},{"style":467},[7626],{"type":175,"value":7543},{"type":169,"tag":205,"props":7628,"children":7629},{"style":1161},[7630],{"type":175,"value":489},{"type":169,"tag":205,"props":7632,"children":7633},{"style":445},[7634],{"type":175,"value":1513},{"type":169,"tag":205,"props":7636,"children":7637},{"class":207,"line":1228},[7638,7643,7647,7651,7655,7659],{"type":169,"tag":205,"props":7639,"children":7640},{"style":439},[7641],{"type":175,"value":7642},"        console",{"type":169,"tag":205,"props":7644,"children":7645},{"style":445},[7646],{"type":175,"value":448},{"type":169,"tag":205,"props":7648,"children":7649},{"style":451},[7650],{"type":175,"value":1158},{"type":169,"tag":205,"props":7652,"children":7653},{"style":1161},[7654],{"type":175,"value":459},{"type":169,"tag":205,"props":7656,"children":7657},{"style":439},[7658],{"type":175,"value":2434},{"type":169,"tag":205,"props":7660,"children":7661},{"style":1161},[7662],{"type":175,"value":1181},{"type":169,"tag":205,"props":7664,"children":7665},{"class":207,"line":1265},[7666,7671,7675,7680,7685],{"type":169,"tag":205,"props":7667,"children":7668},{"style":1110},[7669],{"type":175,"value":7670},"        this",{"type":169,"tag":205,"props":7672,"children":7673},{"style":445},[7674],{"type":175,"value":448},{"type":169,"tag":205,"props":7676,"children":7677},{"style":439},[7678],{"type":175,"value":7679},"step",{"type":169,"tag":205,"props":7681,"children":7682},{"style":235},[7683],{"type":175,"value":7684}," +=",{"type":169,"tag":205,"props":7686,"children":7687},{"style":467},[7688],{"type":175,"value":6541},{"type":169,"tag":205,"props":7690,"children":7691},{"class":207,"line":1273},[7692,7697,7701,7705,7709,7713],{"type":169,"tag":205,"props":7693,"children":7694},{"style":451},[7695],{"type":175,"value":7696},"        exec",{"type":169,"tag":205,"props":7698,"children":7699},{"style":1161},[7700],{"type":175,"value":459},{"type":169,"tag":205,"props":7702,"children":7703},{"style":439},[7704],{"type":175,"value":2434},{"type":169,"tag":205,"props":7706,"children":7707},{"style":235},[7708],{"type":175,"value":480},{"type":169,"tag":205,"props":7710,"children":7711},{"style":467},[7712],{"type":175,"value":1573},{"type":169,"tag":205,"props":7714,"children":7715},{"style":1161},[7716],{"type":175,"value":1181},{"type":169,"tag":205,"props":7718,"children":7719},{"class":207,"line":1300},[7720,7725,7729],{"type":169,"tag":205,"props":7721,"children":7722},{"style":445},[7723],{"type":175,"value":7724},"      }",{"type":169,"tag":205,"props":7726,"children":7727},{"style":1467},[7728],{"type":175,"value":5692},{"type":169,"tag":205,"props":7730,"children":7731},{"style":445},[7732],{"type":175,"value":1104},{"type":169,"tag":205,"props":7734,"children":7735},{"class":207,"line":1876},[7736,7740,7744,7748,7752,7756,7761,7765,7769,7773,7777,7781],{"type":169,"tag":205,"props":7737,"children":7738},{"style":439},[7739],{"type":175,"value":7642},{"type":169,"tag":205,"props":7741,"children":7742},{"style":445},[7743],{"type":175,"value":448},{"type":169,"tag":205,"props":7745,"children":7746},{"style":451},[7747],{"type":175,"value":1158},{"type":169,"tag":205,"props":7749,"children":7750},{"style":1161},[7751],{"type":175,"value":459},{"type":169,"tag":205,"props":7753,"children":7754},{"style":218},[7755],{"type":175,"value":232},{"type":169,"tag":205,"props":7757,"children":7758},{"style":224},[7759],{"type":175,"value":7760},"steps: ",{"type":169,"tag":205,"props":7762,"children":7763},{"style":218},[7764],{"type":175,"value":232},{"type":169,"tag":205,"props":7766,"children":7767},{"style":445},[7768],{"type":175,"value":475},{"type":169,"tag":205,"props":7770,"children":7771},{"style":1110},[7772],{"type":175,"value":3555},{"type":169,"tag":205,"props":7774,"children":7775},{"style":445},[7776],{"type":175,"value":448},{"type":169,"tag":205,"props":7778,"children":7779},{"style":439},[7780],{"type":175,"value":7679},{"type":169,"tag":205,"props":7782,"children":7783},{"style":1161},[7784],{"type":175,"value":1181},{"type":169,"tag":205,"props":7786,"children":7787},{"class":207,"line":1936},[7788],{"type":169,"tag":205,"props":7789,"children":7790},{"style":445},[7791],{"type":175,"value":7792},"      }\n",{"type":169,"tag":205,"props":7794,"children":7795},{"class":207,"line":1997},[7796],{"type":169,"tag":205,"props":7797,"children":7798},{"style":445},[7799],{"type":175,"value":2085},{"type":169,"tag":205,"props":7801,"children":7802},{"class":207,"line":2038},[7803,7807,7811,7815,7819],{"type":169,"tag":205,"props":7804,"children":7805},{"style":1467},[7806],{"type":175,"value":2501},{"type":169,"tag":205,"props":7808,"children":7809},{"style":451},[7810],{"type":175,"value":7586},{"type":169,"tag":205,"props":7812,"children":7813},{"style":1161},[7814],{"type":175,"value":459},{"type":169,"tag":205,"props":7816,"children":7817},{"style":439},[7818],{"type":175,"value":7564},{"type":169,"tag":205,"props":7820,"children":7821},{"style":1161},[7822],{"type":175,"value":1181},{"type":169,"tag":205,"props":7824,"children":7825},{"class":207,"line":2079},[7826],{"type":169,"tag":205,"props":7827,"children":7828},{"style":445},[7829],{"type":175,"value":1843},{"type":169,"tag":205,"props":7831,"children":7832},{"class":207,"line":2088},[7833],{"type":169,"tag":205,"props":7834,"children":7835},{"style":445},[7836],{"type":175,"value":1190},{"type":169,"tag":205,"props":7838,"children":7839},{"class":207,"line":2096},[7840,7845,7849,7854,7858,7863,7867],{"type":169,"tag":205,"props":7841,"children":7842},{"style":439},[7843],{"type":175,"value":7844},"obj",{"type":169,"tag":205,"props":7846,"children":7847},{"style":445},[7848],{"type":175,"value":448},{"type":169,"tag":205,"props":7850,"children":7851},{"style":451},[7852],{"type":175,"value":7853},"run",{"type":169,"tag":205,"props":7855,"children":7856},{"style":439},[7857],{"type":175,"value":459},{"type":169,"tag":205,"props":7859,"children":7860},{"style":467},[7861],{"type":175,"value":7862},"10",{"type":169,"tag":205,"props":7864,"children":7865},{"style":439},[7866],{"type":175,"value":489},{"type":169,"tag":205,"props":7868,"children":7869},{"style":492},[7870],{"type":175,"value":7871},"// steps: 10\n",{"type":169,"tag":177,"props":7873,"children":7875},{"id":7874},"函数的行为",[7876],{"type":175,"value":7874},{"type":169,"tag":183,"props":7878,"children":7879},{},[7880],{"type":175,"value":7881},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":169,"tag":183,"props":7883,"children":7884},{},[7885],{"type":175,"value":7886},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":169,"tag":183,"props":7888,"children":7889},{},[7890],{"type":175,"value":7891},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":169,"tag":183,"props":7893,"children":7894},{},[7895],{"type":175,"value":7896},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":169,"tag":194,"props":7898,"children":7900},{"className":427,"code":7899,"language":429,"meta":163,"style":163},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[7901],{"type":169,"tag":201,"props":7902,"children":7903},{"__ignoreMap":163},[7904,7929,7941,7953,7965,7976,7993,8029,8036,8043,8067,8079,8126,8159,8204,8219,8255,8276,8284,8292,8301,8310],{"type":169,"tag":205,"props":7905,"children":7906},{"class":207,"line":208},[7907,7911,7916,7921,7925],{"type":169,"tag":205,"props":7908,"children":7909},{"style":763},[7910],{"type":175,"value":1089},{"type":169,"tag":205,"props":7912,"children":7913},{"style":235},[7914],{"type":175,"value":7915},"*",{"type":169,"tag":205,"props":7917,"children":7918},{"style":451},[7919],{"type":175,"value":7920}," GetThisDone",{"type":169,"tag":205,"props":7922,"children":7923},{"style":445},[7924],{"type":175,"value":812},{"type":169,"tag":205,"props":7926,"children":7927},{"style":445},[7928],{"type":175,"value":1104},{"type":169,"tag":205,"props":7930,"children":7931},{"class":207,"line":498},[7932,7937],{"type":169,"tag":205,"props":7933,"children":7934},{"style":1467},[7935],{"type":175,"value":7936},"  try",{"type":169,"tag":205,"props":7938,"children":7939},{"style":445},[7940],{"type":175,"value":1104},{"type":169,"tag":205,"props":7942,"children":7943},{"class":207,"line":1143},[7944,7949],{"type":169,"tag":205,"props":7945,"children":7946},{"style":1467},[7947],{"type":175,"value":7948},"    yield",{"type":169,"tag":205,"props":7950,"children":7951},{"style":467},[7952],{"type":175,"value":6541},{"type":169,"tag":205,"props":7954,"children":7955},{"class":207,"line":1184},[7956,7960],{"type":169,"tag":205,"props":7957,"children":7958},{"style":1467},[7959],{"type":175,"value":7948},{"type":169,"tag":205,"props":7961,"children":7962},{"style":467},[7963],{"type":175,"value":7964}," 10\n",{"type":169,"tag":205,"props":7966,"children":7967},{"class":207,"line":1193},[7968,7972],{"type":169,"tag":205,"props":7969,"children":7970},{"style":1467},[7971],{"type":175,"value":7948},{"type":169,"tag":205,"props":7973,"children":7974},{"style":467},[7975],{"type":175,"value":6541},{"type":169,"tag":205,"props":7977,"children":7978},{"class":207,"line":1228},[7979,7984,7989],{"type":169,"tag":205,"props":7980,"children":7981},{"style":445},[7982],{"type":175,"value":7983},"  }",{"type":169,"tag":205,"props":7985,"children":7986},{"style":1467},[7987],{"type":175,"value":7988}," finally",{"type":169,"tag":205,"props":7990,"children":7991},{"style":445},[7992],{"type":175,"value":1104},{"type":169,"tag":205,"props":7994,"children":7995},{"class":207,"line":1265},[7996,8000,8004,8008,8012,8016,8021,8025],{"type":169,"tag":205,"props":7997,"children":7998},{"style":439},[7999],{"type":175,"value":7021},{"type":169,"tag":205,"props":8001,"children":8002},{"style":445},[8003],{"type":175,"value":448},{"type":169,"tag":205,"props":8005,"children":8006},{"style":451},[8007],{"type":175,"value":1158},{"type":169,"tag":205,"props":8009,"children":8010},{"style":1161},[8011],{"type":175,"value":459},{"type":169,"tag":205,"props":8013,"children":8014},{"style":218},[8015],{"type":175,"value":232},{"type":169,"tag":205,"props":8017,"children":8018},{"style":224},[8019],{"type":175,"value":8020},"done",{"type":169,"tag":205,"props":8022,"children":8023},{"style":218},[8024],{"type":175,"value":232},{"type":169,"tag":205,"props":8026,"children":8027},{"style":1161},[8028],{"type":175,"value":1181},{"type":169,"tag":205,"props":8030,"children":8031},{"class":207,"line":1273},[8032],{"type":169,"tag":205,"props":8033,"children":8034},{"style":445},[8035],{"type":175,"value":1843},{"type":169,"tag":205,"props":8037,"children":8038},{"class":207,"line":1300},[8039],{"type":169,"tag":205,"props":8040,"children":8041},{"style":445},[8042],{"type":175,"value":1190},{"type":169,"tag":205,"props":8044,"children":8045},{"class":207,"line":1876},[8046,8050,8055,8059,8063],{"type":169,"tag":205,"props":8047,"children":8048},{"style":763},[8049],{"type":175,"value":5554},{"type":169,"tag":205,"props":8051,"children":8052},{"style":1197},[8053],{"type":175,"value":8054}," get",{"type":169,"tag":205,"props":8056,"children":8057},{"style":235},[8058],{"type":175,"value":1127},{"type":169,"tag":205,"props":8060,"children":8061},{"style":451},[8062],{"type":175,"value":7920},{"type":169,"tag":205,"props":8064,"children":8065},{"style":439},[8066],{"type":175,"value":3104},{"type":169,"tag":205,"props":8068,"children":8069},{"class":207,"line":1936},[8070,8074],{"type":169,"tag":205,"props":8071,"children":8072},{"style":763},[8073],{"type":175,"value":766},{"type":169,"tag":205,"props":8075,"children":8076},{"style":439},[8077],{"type":175,"value":8078}," val\n",{"type":169,"tag":205,"props":8080,"children":8081},{"class":207,"line":1997},[8082,8087,8092,8096,8100,8104,8109,8113,8117,8122],{"type":169,"tag":205,"props":8083,"children":8084},{"style":1467},[8085],{"type":175,"value":8086},"while",{"type":169,"tag":205,"props":8088,"children":8089},{"style":439},[8090],{"type":175,"value":8091}," (val ",{"type":169,"tag":205,"props":8093,"children":8094},{"style":235},[8095],{"type":175,"value":1638},{"type":169,"tag":205,"props":8097,"children":8098},{"style":439},[8099],{"type":175,"value":8054},{"type":169,"tag":205,"props":8101,"children":8102},{"style":445},[8103],{"type":175,"value":448},{"type":169,"tag":205,"props":8105,"children":8106},{"style":451},[8107],{"type":175,"value":8108},"next",{"type":169,"tag":205,"props":8110,"children":8111},{"style":439},[8112],{"type":175,"value":812},{"type":169,"tag":205,"props":8114,"children":8115},{"style":445},[8116],{"type":175,"value":448},{"type":169,"tag":205,"props":8118,"children":8119},{"style":439},[8120],{"type":175,"value":8121},"value) ",{"type":169,"tag":205,"props":8123,"children":8124},{"style":445},[8125],{"type":175,"value":1513},{"type":169,"tag":205,"props":8127,"children":8128},{"class":207,"line":2038},[8129,8133,8137,8142,8146,8151,8155],{"type":169,"tag":205,"props":8130,"children":8131},{"style":1467},[8132],{"type":175,"value":6284},{"type":169,"tag":205,"props":8134,"children":8135},{"style":1161},[8136],{"type":175,"value":1696},{"type":169,"tag":205,"props":8138,"children":8139},{"style":439},[8140],{"type":175,"value":8141},"val",{"type":169,"tag":205,"props":8143,"children":8144},{"style":235},[8145],{"type":175,"value":1724},{"type":169,"tag":205,"props":8147,"children":8148},{"style":467},[8149],{"type":175,"value":8150}," 10",{"type":169,"tag":205,"props":8152,"children":8153},{"style":1161},[8154],{"type":175,"value":489},{"type":169,"tag":205,"props":8156,"children":8157},{"style":445},[8158],{"type":175,"value":1513},{"type":169,"tag":205,"props":8160,"children":8161},{"class":207,"line":2079},[8162,8166,8170,8174,8178,8182,8187,8191,8195,8200],{"type":169,"tag":205,"props":8163,"children":8164},{"style":439},[8165],{"type":175,"value":7021},{"type":169,"tag":205,"props":8167,"children":8168},{"style":445},[8169],{"type":175,"value":448},{"type":169,"tag":205,"props":8171,"children":8172},{"style":451},[8173],{"type":175,"value":1158},{"type":169,"tag":205,"props":8175,"children":8176},{"style":1161},[8177],{"type":175,"value":459},{"type":169,"tag":205,"props":8179,"children":8180},{"style":218},[8181],{"type":175,"value":232},{"type":169,"tag":205,"props":8183,"children":8184},{"style":224},[8185],{"type":175,"value":8186},"right val:",{"type":169,"tag":205,"props":8188,"children":8189},{"style":218},[8190],{"type":175,"value":232},{"type":169,"tag":205,"props":8192,"children":8193},{"style":445},[8194],{"type":175,"value":475},{"type":169,"tag":205,"props":8196,"children":8197},{"style":439},[8198],{"type":175,"value":8199}," val",{"type":169,"tag":205,"props":8201,"children":8202},{"style":1161},[8203],{"type":175,"value":1181},{"type":169,"tag":205,"props":8205,"children":8206},{"class":207,"line":2088},[8207,8211,8215],{"type":169,"tag":205,"props":8208,"children":8209},{"style":445},[8210],{"type":175,"value":7983},{"type":169,"tag":205,"props":8212,"children":8213},{"style":1467},[8214],{"type":175,"value":5692},{"type":169,"tag":205,"props":8216,"children":8217},{"style":445},[8218],{"type":175,"value":1104},{"type":169,"tag":205,"props":8220,"children":8221},{"class":207,"line":2096},[8222,8226,8230,8234,8238,8242,8247,8251],{"type":169,"tag":205,"props":8223,"children":8224},{"style":439},[8225],{"type":175,"value":7021},{"type":169,"tag":205,"props":8227,"children":8228},{"style":445},[8229],{"type":175,"value":448},{"type":169,"tag":205,"props":8231,"children":8232},{"style":451},[8233],{"type":175,"value":1158},{"type":169,"tag":205,"props":8235,"children":8236},{"style":1161},[8237],{"type":175,"value":459},{"type":169,"tag":205,"props":8239,"children":8240},{"style":218},[8241],{"type":175,"value":232},{"type":169,"tag":205,"props":8243,"children":8244},{"style":224},[8245],{"type":175,"value":8246},"wrong val",{"type":169,"tag":205,"props":8248,"children":8249},{"style":218},[8250],{"type":175,"value":232},{"type":169,"tag":205,"props":8252,"children":8253},{"style":1161},[8254],{"type":175,"value":1181},{"type":169,"tag":205,"props":8256,"children":8257},{"class":207,"line":5762},[8258,8263,8267,8272],{"type":169,"tag":205,"props":8259,"children":8260},{"style":439},[8261],{"type":175,"value":8262},"    get",{"type":169,"tag":205,"props":8264,"children":8265},{"style":445},[8266],{"type":175,"value":448},{"type":169,"tag":205,"props":8268,"children":8269},{"style":451},[8270],{"type":175,"value":8271},"return",{"type":169,"tag":205,"props":8273,"children":8274},{"style":1161},[8275],{"type":175,"value":3104},{"type":169,"tag":205,"props":8277,"children":8279},{"class":207,"line":8278},18,[8280],{"type":169,"tag":205,"props":8281,"children":8282},{"style":445},[8283],{"type":175,"value":1843},{"type":169,"tag":205,"props":8285,"children":8287},{"class":207,"line":8286},19,[8288],{"type":169,"tag":205,"props":8289,"children":8290},{"style":445},[8291],{"type":175,"value":1190},{"type":169,"tag":205,"props":8293,"children":8295},{"class":207,"line":8294},20,[8296],{"type":169,"tag":205,"props":8297,"children":8298},{"style":492},[8299],{"type":175,"value":8300},"// right val: 1\n",{"type":169,"tag":205,"props":8302,"children":8304},{"class":207,"line":8303},21,[8305],{"type":169,"tag":205,"props":8306,"children":8307},{"style":492},[8308],{"type":175,"value":8309},"// wrong val\n",{"type":169,"tag":205,"props":8311,"children":8313},{"class":207,"line":8312},22,[8314],{"type":169,"tag":205,"props":8315,"children":8316},{"style":492},[8317],{"type":175,"value":8318},"// done\n",{"type":169,"tag":177,"props":8320,"children":8322},{"id":8321},"闭包",[8323],{"type":175,"value":8321},{"type":169,"tag":183,"props":8325,"children":8326},{},[8327],{"type":175,"value":8328},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":169,"tag":183,"props":8330,"children":8331},{},[8332],{"type":175,"value":8333},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":169,"tag":283,"props":8335,"children":8336},{},[8337,8342,8347],{"type":169,"tag":287,"props":8338,"children":8339},{},[8340],{"type":175,"value":8341},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":169,"tag":287,"props":8343,"children":8344},{},[8345],{"type":175,"value":8346},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":169,"tag":287,"props":8348,"children":8349},{},[8350],{"type":175,"value":8351},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":169,"tag":183,"props":8353,"children":8354},{},[8355],{"type":175,"value":8356},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":169,"tag":194,"props":8358,"children":8360},{"className":427,"code":8359,"language":429,"meta":163,"style":163},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8361],{"type":169,"tag":201,"props":8362,"children":8363},{"__ignoreMap":163},[8364,8383,8398,8405,8416],{"type":169,"tag":205,"props":8365,"children":8366},{"class":207,"line":208},[8367,8371,8375,8379],{"type":169,"tag":205,"props":8368,"children":8369},{"style":763},[8370],{"type":175,"value":1089},{"type":169,"tag":205,"props":8372,"children":8373},{"style":451},[8374],{"type":175,"value":1789},{"type":169,"tag":205,"props":8376,"children":8377},{"style":445},[8378],{"type":175,"value":1099},{"type":169,"tag":205,"props":8380,"children":8381},{"style":445},[8382],{"type":175,"value":1104},{"type":169,"tag":205,"props":8384,"children":8385},{"class":207,"line":498},[8386,8390,8394],{"type":169,"tag":205,"props":8387,"children":8388},{"style":439},[8389],{"type":175,"value":2537},{"type":169,"tag":205,"props":8391,"children":8392},{"style":235},[8393],{"type":175,"value":1127},{"type":169,"tag":205,"props":8395,"children":8396},{"style":467},[8397],{"type":175,"value":6541},{"type":169,"tag":205,"props":8399,"children":8400},{"class":207,"line":1143},[8401],{"type":169,"tag":205,"props":8402,"children":8403},{"style":445},[8404],{"type":175,"value":1190},{"type":169,"tag":205,"props":8406,"children":8407},{"class":207,"line":1184},[8408,8412],{"type":169,"tag":205,"props":8409,"children":8410},{"style":451},[8411],{"type":175,"value":1489},{"type":169,"tag":205,"props":8413,"children":8414},{"style":439},[8415],{"type":175,"value":3104},{"type":169,"tag":205,"props":8417,"children":8418},{"class":207,"line":1193},[8419,8423,8427,8431,8435,8439,8444],{"type":169,"tag":205,"props":8420,"children":8421},{"style":439},[8422],{"type":175,"value":4783},{"type":169,"tag":205,"props":8424,"children":8425},{"style":445},[8426],{"type":175,"value":448},{"type":169,"tag":205,"props":8428,"children":8429},{"style":451},[8430],{"type":175,"value":1158},{"type":169,"tag":205,"props":8432,"children":8433},{"style":439},[8434],{"type":175,"value":459},{"type":169,"tag":205,"props":8436,"children":8437},{"style":235},[8438],{"type":175,"value":719},{"type":169,"tag":205,"props":8440,"children":8441},{"style":439},[8442],{"type":175,"value":8443}," test) ",{"type":169,"tag":205,"props":8445,"children":8446},{"style":492},[8447],{"type":175,"value":8448},"// number\n",{"type":169,"tag":183,"props":8450,"children":8451},{},[8452],{"type":175,"value":8453},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":169,"tag":183,"props":8455,"children":8456},{},[8457],{"type":175,"value":8458},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":169,"tag":194,"props":8460,"children":8462},{"className":427,"code":8461,"language":429,"meta":163,"style":163},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8463],{"type":169,"tag":201,"props":8464,"children":8465},{"__ignoreMap":163},[8466,8502,8522,8539,8559,8582,8598,8605],{"type":169,"tag":205,"props":8467,"children":8468},{"class":207,"line":208},[8469,8473,8477,8481,8485,8490,8494,8498],{"type":169,"tag":205,"props":8470,"children":8471},{"style":763},[8472],{"type":175,"value":766},{"type":169,"tag":205,"props":8474,"children":8475},{"style":439},[8476],{"type":175,"value":2907},{"type":169,"tag":205,"props":8478,"children":8479},{"style":235},[8480],{"type":175,"value":1638},{"type":169,"tag":205,"props":8482,"children":8483},{"style":445},[8484],{"type":175,"value":1475},{"type":169,"tag":205,"props":8486,"children":8487},{"style":1161},[8488],{"type":175,"value":8489}," value",{"type":169,"tag":205,"props":8491,"children":8492},{"style":445},[8493],{"type":175,"value":1623},{"type":169,"tag":205,"props":8495,"children":8496},{"style":467},[8497],{"type":175,"value":274},{"type":169,"tag":205,"props":8499,"children":8500},{"style":445},[8501],{"type":175,"value":2934},{"type":169,"tag":205,"props":8503,"children":8504},{"class":207,"line":498},[8505,8509,8514,8518],{"type":169,"tag":205,"props":8506,"children":8507},{"style":763},[8508],{"type":175,"value":766},{"type":169,"tag":205,"props":8510,"children":8511},{"style":439},[8512],{"type":175,"value":8513}," b ",{"type":169,"tag":205,"props":8515,"children":8516},{"style":235},[8517],{"type":175,"value":1638},{"type":169,"tag":205,"props":8519,"children":8520},{"style":467},[8521],{"type":175,"value":6541},{"type":169,"tag":205,"props":8523,"children":8524},{"class":207,"line":1143},[8525,8530,8535],{"type":169,"tag":205,"props":8526,"children":8527},{"style":1467},[8528],{"type":175,"value":8529},"with",{"type":169,"tag":205,"props":8531,"children":8532},{"style":439},[8533],{"type":175,"value":8534}," (a) ",{"type":169,"tag":205,"props":8536,"children":8537},{"style":445},[8538],{"type":175,"value":1513},{"type":169,"tag":205,"props":8540,"children":8541},{"class":207,"line":1184},[8542,8547,8551,8555],{"type":169,"tag":205,"props":8543,"children":8544},{"style":763},[8545],{"type":175,"value":8546}," var",{"type":169,"tag":205,"props":8548,"children":8549},{"style":439},[8550],{"type":175,"value":8489},{"type":169,"tag":205,"props":8552,"children":8553},{"style":235},[8554],{"type":175,"value":1127},{"type":169,"tag":205,"props":8556,"children":8557},{"style":467},[8558],{"type":175,"value":6117},{"type":169,"tag":205,"props":8560,"children":8561},{"class":207,"line":1193},[8562,8566,8570,8574,8578],{"type":169,"tag":205,"props":8563,"children":8564},{"style":439},[8565],{"type":175,"value":2987},{"type":169,"tag":205,"props":8567,"children":8568},{"style":445},[8569],{"type":175,"value":448},{"type":169,"tag":205,"props":8571,"children":8572},{"style":439},[8573],{"type":175,"value":1122},{"type":169,"tag":205,"props":8575,"children":8576},{"style":235},[8577],{"type":175,"value":1127},{"type":169,"tag":205,"props":8579,"children":8580},{"style":467},[8581],{"type":175,"value":6541},{"type":169,"tag":205,"props":8583,"children":8584},{"class":207,"line":1228},[8585,8589,8593],{"type":169,"tag":205,"props":8586,"children":8587},{"style":439},[8588],{"type":175,"value":6798},{"type":169,"tag":205,"props":8590,"children":8591},{"style":235},[8592],{"type":175,"value":1127},{"type":169,"tag":205,"props":8594,"children":8595},{"style":467},[8596],{"type":175,"value":8597}," 2\n",{"type":169,"tag":205,"props":8599,"children":8600},{"class":207,"line":1265},[8601],{"type":169,"tag":205,"props":8602,"children":8603},{"style":445},[8604],{"type":175,"value":1190},{"type":169,"tag":205,"props":8606,"children":8607},{"class":207,"line":1273},[8608,8612,8616,8620,8624,8628,8632,8636,8641],{"type":169,"tag":205,"props":8609,"children":8610},{"style":439},[8611],{"type":175,"value":4783},{"type":169,"tag":205,"props":8613,"children":8614},{"style":445},[8615],{"type":175,"value":448},{"type":169,"tag":205,"props":8617,"children":8618},{"style":451},[8619],{"type":175,"value":1158},{"type":169,"tag":205,"props":8621,"children":8622},{"style":439},[8623],{"type":175,"value":7084},{"type":169,"tag":205,"props":8625,"children":8626},{"style":445},[8627],{"type":175,"value":475},{"type":169,"tag":205,"props":8629,"children":8630},{"style":439},[8631],{"type":175,"value":6798},{"type":169,"tag":205,"props":8633,"children":8634},{"style":445},[8635],{"type":175,"value":475},{"type":169,"tag":205,"props":8637,"children":8638},{"style":439},[8639],{"type":175,"value":8640}," value) ",{"type":169,"tag":205,"props":8642,"children":8643},{"style":492},[8644],{"type":175,"value":8645},"// { value:100, b:2 }, 1, undefined\n",{"type":169,"tag":183,"props":8647,"children":8648},{},[8649],{"type":175,"value":8650},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":169,"tag":183,"props":8652,"children":8653},{},[8654],{"type":175,"value":8655},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":169,"tag":183,"props":8657,"children":8658},{},[8659],{"type":175,"value":8660},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":169,"tag":183,"props":8662,"children":8663},{},[8664],{"type":175,"value":8665},"闭包内标识符系统的优先级规则：",{"type":169,"tag":283,"props":8667,"children":8668},{},[8669,8674,8679],{"type":169,"tag":287,"props":8670,"children":8671},{},[8672],{"type":175,"value":8673},"内部函数声明 > 函数参数名列表",{"type":169,"tag":287,"props":8675,"children":8676},{},[8677],{"type":175,"value":8678},"参数中的 arguments 名字 > 函数的 arguments",{"type":169,"tag":287,"props":8680,"children":8681},{},[8682],{"type":175,"value":8683},"var 声明的名字如果已存在，则不再创建新变量",{"type":169,"tag":183,"props":8685,"children":8686},{},[8687],{"type":175,"value":8688},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":169,"tag":170,"props":8690,"children":8692},{"id":8691},"动态语言特性",[8693],{"type":175,"value":8691},{"type":169,"tag":177,"props":8695,"children":8697},{"id":8696},"概述-2",[8698],{"type":175,"value":5816},{"type":169,"tag":183,"props":8700,"children":8701},{},[8702],{"type":175,"value":8703},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":169,"tag":183,"props":8705,"children":8706},{},[8707],{"type":175,"value":8708},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":169,"tag":177,"props":8710,"children":8712},{"id":8711},"对象与值类型之间的转换",[8713],{"type":175,"value":8711},{"type":169,"tag":183,"props":8715,"children":8716},{},[8717],{"type":175,"value":8718},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":169,"tag":194,"props":8720,"children":8722},{"className":427,"code":8721,"language":429,"meta":163,"style":163},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8723],{"type":169,"tag":201,"props":8724,"children":8725},{"__ignoreMap":163},[8726,8774,8797,8805,8849,8856],{"type":169,"tag":205,"props":8727,"children":8728},{"class":207,"line":208},[8729,8733,8738,8742,8746,8750,8754,8758,8762,8766,8770],{"type":169,"tag":205,"props":8730,"children":8731},{"style":763},[8732],{"type":175,"value":2399},{"type":169,"tag":205,"props":8734,"children":8735},{"style":7583},[8736],{"type":175,"value":8737}," toString",{"type":169,"tag":205,"props":8739,"children":8740},{"style":235},[8741],{"type":175,"value":1127},{"type":169,"tag":205,"props":8743,"children":8744},{"style":445},[8745],{"type":175,"value":1099},{"type":169,"tag":205,"props":8747,"children":8748},{"style":763},[8749],{"type":175,"value":5490},{"type":169,"tag":205,"props":8751,"children":8752},{"style":439},[8753],{"type":175,"value":1806},{"type":169,"tag":205,"props":8755,"children":8756},{"style":445},[8757],{"type":175,"value":448},{"type":169,"tag":205,"props":8759,"children":8760},{"style":451},[8761],{"type":175,"value":1158},{"type":169,"tag":205,"props":8763,"children":8764},{"style":439},[8765],{"type":175,"value":459},{"type":169,"tag":205,"props":8767,"children":8768},{"style":467},[8769],{"type":175,"value":274},{"type":169,"tag":205,"props":8771,"children":8772},{"style":439},[8773],{"type":175,"value":1181},{"type":169,"tag":205,"props":8775,"children":8776},{"class":207,"line":498},[8777,8781,8785,8789,8793],{"type":169,"tag":205,"props":8778,"children":8779},{"style":1467},[8780],{"type":175,"value":8529},{"type":169,"tag":205,"props":8782,"children":8783},{"style":439},[8784],{"type":175,"value":1696},{"type":169,"tag":205,"props":8786,"children":8787},{"style":467},[8788],{"type":175,"value":274},{"type":169,"tag":205,"props":8790,"children":8791},{"style":439},[8792],{"type":175,"value":489},{"type":169,"tag":205,"props":8794,"children":8795},{"style":445},[8796],{"type":175,"value":1513},{"type":169,"tag":205,"props":8798,"children":8799},{"class":207,"line":1143},[8800],{"type":169,"tag":205,"props":8801,"children":8802},{"style":492},[8803],{"type":175,"value":8804},"  // equal to (1).toString = ...\n",{"type":169,"tag":205,"props":8806,"children":8807},{"class":207,"line":1184},[8808,8813,8817,8821,8825,8829,8833,8837,8841,8845],{"type":169,"tag":205,"props":8809,"children":8810},{"style":451},[8811],{"type":175,"value":8812},"  toString",{"type":169,"tag":205,"props":8814,"children":8815},{"style":235},[8816],{"type":175,"value":1127},{"type":169,"tag":205,"props":8818,"children":8819},{"style":445},[8820],{"type":175,"value":1099},{"type":169,"tag":205,"props":8822,"children":8823},{"style":763},[8824],{"type":175,"value":5490},{"type":169,"tag":205,"props":8826,"children":8827},{"style":439},[8828],{"type":175,"value":1806},{"type":169,"tag":205,"props":8830,"children":8831},{"style":445},[8832],{"type":175,"value":448},{"type":169,"tag":205,"props":8834,"children":8835},{"style":451},[8836],{"type":175,"value":1158},{"type":169,"tag":205,"props":8838,"children":8839},{"style":1161},[8840],{"type":175,"value":459},{"type":169,"tag":205,"props":8842,"children":8843},{"style":467},[8844],{"type":175,"value":302},{"type":169,"tag":205,"props":8846,"children":8847},{"style":1161},[8848],{"type":175,"value":1181},{"type":169,"tag":205,"props":8850,"children":8851},{"class":207,"line":1193},[8852],{"type":169,"tag":205,"props":8853,"children":8854},{"style":445},[8855],{"type":175,"value":1190},{"type":169,"tag":205,"props":8857,"children":8858},{"class":207,"line":1228},[8859,8863,8867,8871,8875,8880,8884],{"type":169,"tag":205,"props":8860,"children":8861},{"style":439},[8862],{"type":175,"value":4783},{"type":169,"tag":205,"props":8864,"children":8865},{"style":445},[8866],{"type":175,"value":448},{"type":169,"tag":205,"props":8868,"children":8869},{"style":451},[8870],{"type":175,"value":1158},{"type":169,"tag":205,"props":8872,"children":8873},{"style":439},[8874],{"type":175,"value":459},{"type":169,"tag":205,"props":8876,"children":8877},{"style":451},[8878],{"type":175,"value":8879},"toString",{"type":169,"tag":205,"props":8881,"children":8882},{"style":439},[8883],{"type":175,"value":578},{"type":169,"tag":205,"props":8885,"children":8886},{"style":492},[8887],{"type":175,"value":6487},{"type":169,"tag":183,"props":8889,"children":8890},{},[8891],{"type":175,"value":8892},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":169,"tag":183,"props":8894,"children":8895},{},[8896],{"type":175,"value":8897},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":169,"tag":194,"props":8899,"children":8901},{"className":427,"code":8900,"language":429,"meta":163,"style":163},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[8902],{"type":169,"tag":201,"props":8903,"children":8904},{"__ignoreMap":163},[8905,8947,8990],{"type":169,"tag":205,"props":8906,"children":8907},{"class":207,"line":208},[8908,8913,8917,8921,8925,8930,8934,8938,8942],{"type":169,"tag":205,"props":8909,"children":8910},{"style":2586},[8911],{"type":175,"value":8912},"String",{"type":169,"tag":205,"props":8914,"children":8915},{"style":445},[8916],{"type":175,"value":448},{"type":169,"tag":205,"props":8918,"children":8919},{"style":1197},[8920],{"type":175,"value":2597},{"type":169,"tag":205,"props":8922,"children":8923},{"style":445},[8924],{"type":175,"value":448},{"type":169,"tag":205,"props":8926,"children":8927},{"style":451},[8928],{"type":175,"value":8929},"valueOf",{"type":169,"tag":205,"props":8931,"children":8932},{"style":235},[8933],{"type":175,"value":1127},{"type":169,"tag":205,"props":8935,"children":8936},{"style":445},[8937],{"type":175,"value":1099},{"type":169,"tag":205,"props":8939,"children":8940},{"style":763},[8941],{"type":175,"value":5490},{"type":169,"tag":205,"props":8943,"children":8944},{"style":467},[8945],{"type":175,"value":8946}," 0\n",{"type":169,"tag":205,"props":8948,"children":8949},{"class":207,"line":498},[8950,8954,8958,8962,8966,8970,8974,8978,8982,8986],{"type":169,"tag":205,"props":8951,"children":8952},{"style":439},[8953],{"type":175,"value":4783},{"type":169,"tag":205,"props":8955,"children":8956},{"style":445},[8957],{"type":175,"value":448},{"type":169,"tag":205,"props":8959,"children":8960},{"style":451},[8961],{"type":175,"value":1158},{"type":169,"tag":205,"props":8963,"children":8964},{"style":439},[8965],{"type":175,"value":459},{"type":169,"tag":205,"props":8967,"children":8968},{"style":235},[8969],{"type":175,"value":464},{"type":169,"tag":205,"props":8971,"children":8972},{"style":218},[8973],{"type":175,"value":232},{"type":169,"tag":205,"props":8975,"children":8976},{"style":224},[8977],{"type":175,"value":274},{"type":169,"tag":205,"props":8979,"children":8980},{"style":218},[8981],{"type":175,"value":232},{"type":169,"tag":205,"props":8983,"children":8984},{"style":439},[8985],{"type":175,"value":489},{"type":169,"tag":205,"props":8987,"children":8988},{"style":492},[8989],{"type":175,"value":6487},{"type":169,"tag":205,"props":8991,"children":8992},{"class":207,"line":1143},[8993,8997,9001,9005,9009,9014,9018,9022,9026,9030,9034,9039],{"type":169,"tag":205,"props":8994,"children":8995},{"style":439},[8996],{"type":175,"value":4783},{"type":169,"tag":205,"props":8998,"children":8999},{"style":445},[9000],{"type":175,"value":448},{"type":169,"tag":205,"props":9002,"children":9003},{"style":451},[9004],{"type":175,"value":1158},{"type":169,"tag":205,"props":9006,"children":9007},{"style":439},[9008],{"type":175,"value":459},{"type":169,"tag":205,"props":9010,"children":9011},{"style":235},[9012],{"type":175,"value":9013},"+new",{"type":169,"tag":205,"props":9015,"children":9016},{"style":451},[9017],{"type":175,"value":3876},{"type":169,"tag":205,"props":9019,"children":9020},{"style":439},[9021],{"type":175,"value":459},{"type":169,"tag":205,"props":9023,"children":9024},{"style":218},[9025],{"type":175,"value":232},{"type":169,"tag":205,"props":9027,"children":9028},{"style":224},[9029],{"type":175,"value":274},{"type":169,"tag":205,"props":9031,"children":9032},{"style":218},[9033],{"type":175,"value":232},{"type":169,"tag":205,"props":9035,"children":9036},{"style":439},[9037],{"type":175,"value":9038},")) ",{"type":169,"tag":205,"props":9040,"children":9041},{"style":492},[9042],{"type":175,"value":9043},"// 0\n",{"type":169,"tag":183,"props":9045,"children":9046},{},[9047],{"type":175,"value":9048},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":169,"tag":194,"props":9050,"children":9052},{"className":427,"code":9051,"language":429,"meta":163,"style":163},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9053],{"type":169,"tag":201,"props":9054,"children":9055},{"__ignoreMap":163},[9056,9093,9125,9157],{"type":169,"tag":205,"props":9057,"children":9058},{"class":207,"line":208},[9059,9063,9068,9072,9076,9080,9084,9089],{"type":169,"tag":205,"props":9060,"children":9061},{"style":763},[9062],{"type":175,"value":5554},{"type":169,"tag":205,"props":9064,"children":9065},{"style":1197},[9066],{"type":175,"value":9067}," f",{"type":169,"tag":205,"props":9069,"children":9070},{"style":235},[9071],{"type":175,"value":1127},{"type":169,"tag":205,"props":9073,"children":9074},{"style":235},[9075],{"type":175,"value":2606},{"type":169,"tag":205,"props":9077,"children":9078},{"style":451},[9079],{"type":175,"value":3876},{"type":169,"tag":205,"props":9081,"children":9082},{"style":439},[9083],{"type":175,"value":459},{"type":169,"tag":205,"props":9085,"children":9086},{"style":602},[9087],{"type":175,"value":9088},"false",{"type":169,"tag":205,"props":9090,"children":9091},{"style":439},[9092],{"type":175,"value":1181},{"type":169,"tag":205,"props":9094,"children":9095},{"class":207,"line":498},[9096,9100,9104,9108,9112,9116,9121],{"type":169,"tag":205,"props":9097,"children":9098},{"style":439},[9099],{"type":175,"value":4783},{"type":169,"tag":205,"props":9101,"children":9102},{"style":445},[9103],{"type":175,"value":448},{"type":169,"tag":205,"props":9105,"children":9106},{"style":451},[9107],{"type":175,"value":1158},{"type":169,"tag":205,"props":9109,"children":9110},{"style":439},[9111],{"type":175,"value":459},{"type":169,"tag":205,"props":9113,"children":9114},{"style":235},[9115],{"type":175,"value":464},{"type":169,"tag":205,"props":9117,"children":9118},{"style":439},[9119],{"type":175,"value":9120},"f) ",{"type":169,"tag":205,"props":9122,"children":9123},{"style":492},[9124],{"type":175,"value":9043},{"type":169,"tag":205,"props":9126,"children":9127},{"class":207,"line":1143},[9128,9132,9136,9140,9144,9149,9153],{"type":169,"tag":205,"props":9129,"children":9130},{"style":439},[9131],{"type":175,"value":4783},{"type":169,"tag":205,"props":9133,"children":9134},{"style":445},[9135],{"type":175,"value":448},{"type":169,"tag":205,"props":9137,"children":9138},{"style":451},[9139],{"type":175,"value":1158},{"type":169,"tag":205,"props":9141,"children":9142},{"style":439},[9143],{"type":175,"value":459},{"type":169,"tag":205,"props":9145,"children":9146},{"style":235},[9147],{"type":175,"value":9148},"!!",{"type":169,"tag":205,"props":9150,"children":9151},{"style":439},[9152],{"type":175,"value":9120},{"type":169,"tag":205,"props":9154,"children":9155},{"style":492},[9156],{"type":175,"value":539},{"type":169,"tag":205,"props":9158,"children":9159},{"class":207,"line":1184},[9160,9164,9168,9172,9176,9180,9185],{"type":169,"tag":205,"props":9161,"children":9162},{"style":439},[9163],{"type":175,"value":4783},{"type":169,"tag":205,"props":9165,"children":9166},{"style":445},[9167],{"type":175,"value":448},{"type":169,"tag":205,"props":9169,"children":9170},{"style":451},[9171],{"type":175,"value":1158},{"type":169,"tag":205,"props":9173,"children":9174},{"style":439},[9175],{"type":175,"value":459},{"type":169,"tag":205,"props":9177,"children":9178},{"style":451},[9179],{"type":175,"value":564},{"type":169,"tag":205,"props":9181,"children":9182},{"style":439},[9183],{"type":175,"value":9184},"(f)) ",{"type":169,"tag":205,"props":9186,"children":9187},{"style":492},[9188],{"type":175,"value":539},{"type":169,"tag":183,"props":9190,"children":9191},{},[9192],{"type":175,"value":9193},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":169,"tag":177,"props":9195,"children":9197},{"id":9196},"值类型的转换",[9198],{"type":175,"value":9196},{"type":169,"tag":183,"props":9200,"children":9201},{},[9202],{"type":175,"value":9203},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":169,"tag":183,"props":9205,"children":9206},{},[9207],{"type":175,"value":9208},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":169,"tag":183,"props":9210,"children":9211},{},[9212],{"type":175,"value":9213},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":169,"tag":194,"props":9215,"children":9217},{"className":427,"code":9216,"language":429,"meta":163,"style":163},"parseInt(1e35) // 1\n",[9218],{"type":169,"tag":201,"props":9219,"children":9220},{"__ignoreMap":163},[9221],{"type":169,"tag":205,"props":9222,"children":9223},{"class":207,"line":208},[9224,9229,9233,9238,9242],{"type":169,"tag":205,"props":9225,"children":9226},{"style":451},[9227],{"type":175,"value":9228},"parseInt",{"type":169,"tag":205,"props":9230,"children":9231},{"style":439},[9232],{"type":175,"value":459},{"type":169,"tag":205,"props":9234,"children":9235},{"style":467},[9236],{"type":175,"value":9237},"1e35",{"type":169,"tag":205,"props":9239,"children":9240},{"style":439},[9241],{"type":175,"value":489},{"type":169,"tag":205,"props":9243,"children":9244},{"style":492},[9245],{"type":175,"value":6487},{"type":169,"tag":183,"props":9247,"children":9248},{},[9249],{"type":175,"value":9250},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":169,"tag":194,"props":9252,"children":9254},{"className":427,"code":9253,"language":429,"meta":163,"style":163},"String() // ''\nString(undefined) // undefined\n",[9255],{"type":169,"tag":201,"props":9256,"children":9257},{"__ignoreMap":163},[9258,9274],{"type":169,"tag":205,"props":9259,"children":9260},{"class":207,"line":208},[9261,9265,9269],{"type":169,"tag":205,"props":9262,"children":9263},{"style":451},[9264],{"type":175,"value":8912},{"type":169,"tag":205,"props":9266,"children":9267},{"style":439},[9268],{"type":175,"value":594},{"type":169,"tag":205,"props":9270,"children":9271},{"style":492},[9272],{"type":175,"value":9273},"// ''\n",{"type":169,"tag":205,"props":9275,"children":9276},{"class":207,"line":498},[9277,9281,9285,9289,9293],{"type":169,"tag":205,"props":9278,"children":9279},{"style":451},[9280],{"type":175,"value":8912},{"type":169,"tag":205,"props":9282,"children":9283},{"style":439},[9284],{"type":175,"value":459},{"type":169,"tag":205,"props":9286,"children":9287},{"style":518},[9288],{"type":175,"value":4318},{"type":169,"tag":205,"props":9290,"children":9291},{"style":439},[9292],{"type":175,"value":489},{"type":169,"tag":205,"props":9294,"children":9295},{"style":492},[9296],{"type":175,"value":729},{"type":169,"tag":177,"props":9298,"children":9300},{"id":9299},"对象与数组的动态特性",[9301],{"type":175,"value":9299},{"type":169,"tag":183,"props":9303,"children":9304},{},[9305],{"type":175,"value":9306},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":169,"tag":194,"props":9308,"children":9310},{"className":427,"code":9309,"language":429,"meta":163,"style":163},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9311],{"type":169,"tag":201,"props":9312,"children":9313},{"__ignoreMap":163},[9314,9350,9375,9398,9422],{"type":169,"tag":205,"props":9315,"children":9316},{"class":207,"line":208},[9317,9321,9325,9329,9333,9338,9342,9346],{"type":169,"tag":205,"props":9318,"children":9319},{"style":763},[9320],{"type":175,"value":5554},{"type":169,"tag":205,"props":9322,"children":9323},{"style":1197},[9324],{"type":175,"value":2987},{"type":169,"tag":205,"props":9326,"children":9327},{"style":235},[9328],{"type":175,"value":1127},{"type":169,"tag":205,"props":9330,"children":9331},{"style":235},[9332],{"type":175,"value":2606},{"type":169,"tag":205,"props":9334,"children":9335},{"style":451},[9336],{"type":175,"value":9337}," Array",{"type":169,"tag":205,"props":9339,"children":9340},{"style":439},[9341],{"type":175,"value":459},{"type":169,"tag":205,"props":9343,"children":9344},{"style":467},[9345],{"type":175,"value":7862},{"type":169,"tag":205,"props":9347,"children":9348},{"style":439},[9349],{"type":175,"value":1181},{"type":169,"tag":205,"props":9351,"children":9352},{"class":207,"line":498},[9353,9358,9362,9367,9371],{"type":169,"tag":205,"props":9354,"children":9355},{"style":439},[9356],{"type":175,"value":9357},"a[",{"type":169,"tag":205,"props":9359,"children":9360},{"style":467},[9361],{"type":175,"value":274},{"type":169,"tag":205,"props":9363,"children":9364},{"style":439},[9365],{"type":175,"value":9366},"] ",{"type":169,"tag":205,"props":9368,"children":9369},{"style":235},[9370],{"type":175,"value":1638},{"type":169,"tag":205,"props":9372,"children":9373},{"style":467},[9374],{"type":175,"value":6541},{"type":169,"tag":205,"props":9376,"children":9377},{"class":207,"line":1143},[9378,9382,9386,9390,9394],{"type":169,"tag":205,"props":9379,"children":9380},{"style":439},[9381],{"type":175,"value":9357},{"type":169,"tag":205,"props":9383,"children":9384},{"style":467},[9385],{"type":175,"value":6064},{"type":169,"tag":205,"props":9387,"children":9388},{"style":439},[9389],{"type":175,"value":9366},{"type":169,"tag":205,"props":9391,"children":9392},{"style":235},[9393],{"type":175,"value":1638},{"type":169,"tag":205,"props":9395,"children":9396},{"style":467},[9397],{"type":175,"value":6541},{"type":169,"tag":205,"props":9399,"children":9400},{"class":207,"line":1184},[9401,9405,9410,9414,9418],{"type":169,"tag":205,"props":9402,"children":9403},{"style":439},[9404],{"type":175,"value":9357},{"type":169,"tag":205,"props":9406,"children":9407},{"style":467},[9408],{"type":175,"value":9409},"7",{"type":169,"tag":205,"props":9411,"children":9412},{"style":439},[9413],{"type":175,"value":9366},{"type":169,"tag":205,"props":9415,"children":9416},{"style":235},[9417],{"type":175,"value":1638},{"type":169,"tag":205,"props":9419,"children":9420},{"style":467},[9421],{"type":175,"value":6541},{"type":169,"tag":205,"props":9423,"children":9424},{"class":207,"line":1193},[9425,9429,9433,9438,9442,9446,9450,9455,9459,9464,9468,9473,9478,9482],{"type":169,"tag":205,"props":9426,"children":9427},{"style":439},[9428],{"type":175,"value":266},{"type":169,"tag":205,"props":9430,"children":9431},{"style":445},[9432],{"type":175,"value":448},{"type":169,"tag":205,"props":9434,"children":9435},{"style":451},[9436],{"type":175,"value":9437},"sort",{"type":169,"tag":205,"props":9439,"children":9440},{"style":439},[9441],{"type":175,"value":459},{"type":169,"tag":205,"props":9443,"children":9444},{"style":445},[9445],{"type":175,"value":812},{"type":169,"tag":205,"props":9447,"children":9448},{"style":763},[9449],{"type":175,"value":5490},{"type":169,"tag":205,"props":9451,"children":9452},{"style":439},[9453],{"type":175,"value":9454}," Math",{"type":169,"tag":205,"props":9456,"children":9457},{"style":445},[9458],{"type":175,"value":448},{"type":169,"tag":205,"props":9460,"children":9461},{"style":451},[9462],{"type":175,"value":9463},"random",{"type":169,"tag":205,"props":9465,"children":9466},{"style":439},[9467],{"type":175,"value":594},{"type":169,"tag":205,"props":9469,"children":9470},{"style":235},[9471],{"type":175,"value":9472},"-",{"type":169,"tag":205,"props":9474,"children":9475},{"style":467},[9476],{"type":175,"value":9477}," 0.5",{"type":169,"tag":205,"props":9479,"children":9480},{"style":439},[9481],{"type":175,"value":489},{"type":169,"tag":205,"props":9483,"children":9484},{"style":492},[9485],{"type":175,"value":9486},"// [1, 1, 1, empty x 7]\n",{"type":169,"tag":183,"props":9488,"children":9489},{},[9490],{"type":175,"value":9491},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":169,"tag":183,"props":9493,"children":9494},{},[9495],{"type":175,"value":9496},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":169,"tag":177,"props":9498,"children":9500},{"id":9499},"重写",[9501],{"type":175,"value":9499},{"type":169,"tag":183,"props":9503,"children":9504},{},[9505],{"type":175,"value":9506},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":169,"tag":183,"props":9508,"children":9509},{},[9510],{"type":175,"value":9511},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":169,"tag":183,"props":9513,"children":9514},{},[9515],{"type":175,"value":9516},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":169,"tag":194,"props":9518,"children":9520},{"className":427,"code":9519,"language":429,"meta":163,"style":163},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9521],{"type":169,"tag":201,"props":9522,"children":9523},{"__ignoreMap":163},[9524,9565,9580,9601,9618,9625,9636,9659,9691,9726,9766,9806,9814,9870,9885,9933,9940,9947,9958,9981],{"type":169,"tag":205,"props":9525,"children":9526},{"class":207,"line":208},[9527,9531,9535,9539,9543,9547,9552,9556,9561],{"type":169,"tag":205,"props":9528,"children":9529},{"style":763},[9530],{"type":175,"value":5554},{"type":169,"tag":205,"props":9532,"children":9533},{"style":1197},[9534],{"type":175,"value":2987},{"type":169,"tag":205,"props":9536,"children":9537},{"style":235},[9538],{"type":175,"value":1127},{"type":169,"tag":205,"props":9540,"children":9541},{"style":439},[9542],{"type":175,"value":3876},{"type":169,"tag":205,"props":9544,"children":9545},{"style":445},[9546],{"type":175,"value":448},{"type":169,"tag":205,"props":9548,"children":9549},{"style":451},[9550],{"type":175,"value":9551},"defineProperties",{"type":169,"tag":205,"props":9553,"children":9554},{"style":439},[9555],{"type":175,"value":459},{"type":169,"tag":205,"props":9557,"children":9558},{"style":445},[9559],{"type":175,"value":9560},"{},",{"type":169,"tag":205,"props":9562,"children":9563},{"style":445},[9564],{"type":175,"value":1104},{"type":169,"tag":205,"props":9566,"children":9567},{"class":207,"line":498},[9568,9572,9576],{"type":169,"tag":205,"props":9569,"children":9570},{"style":1161},[9571],{"type":175,"value":2537},{"type":169,"tag":205,"props":9573,"children":9574},{"style":445},[9575],{"type":175,"value":1623},{"type":169,"tag":205,"props":9577,"children":9578},{"style":445},[9579],{"type":175,"value":1104},{"type":169,"tag":205,"props":9581,"children":9582},{"class":207,"line":1143},[9583,9588,9592,9597],{"type":169,"tag":205,"props":9584,"children":9585},{"style":1161},[9586],{"type":175,"value":9587},"    value",{"type":169,"tag":205,"props":9589,"children":9590},{"style":445},[9591],{"type":175,"value":1623},{"type":169,"tag":205,"props":9593,"children":9594},{"style":467},[9595],{"type":175,"value":9596}," 100",{"type":169,"tag":205,"props":9598,"children":9599},{"style":445},[9600],{"type":175,"value":6997},{"type":169,"tag":205,"props":9602,"children":9603},{"class":207,"line":1184},[9604,9609,9613],{"type":169,"tag":205,"props":9605,"children":9606},{"style":1161},[9607],{"type":175,"value":9608},"    configurable",{"type":169,"tag":205,"props":9610,"children":9611},{"style":445},[9612],{"type":175,"value":1623},{"type":169,"tag":205,"props":9614,"children":9615},{"style":602},[9616],{"type":175,"value":9617}," true\n",{"type":169,"tag":205,"props":9619,"children":9620},{"class":207,"line":1193},[9621],{"type":169,"tag":205,"props":9622,"children":9623},{"style":445},[9624],{"type":175,"value":1843},{"type":169,"tag":205,"props":9626,"children":9627},{"class":207,"line":1228},[9628,9632],{"type":169,"tag":205,"props":9629,"children":9630},{"style":445},[9631],{"type":175,"value":1437},{"type":169,"tag":205,"props":9633,"children":9634},{"style":439},[9635],{"type":175,"value":1181},{"type":169,"tag":205,"props":9637,"children":9638},{"class":207,"line":1265},[9639,9643,9647,9651,9655],{"type":169,"tag":205,"props":9640,"children":9641},{"style":439},[9642],{"type":175,"value":266},{"type":169,"tag":205,"props":9644,"children":9645},{"style":445},[9646],{"type":175,"value":448},{"type":169,"tag":205,"props":9648,"children":9649},{"style":439},[9650],{"type":175,"value":3915},{"type":169,"tag":205,"props":9652,"children":9653},{"style":235},[9654],{"type":175,"value":1638},{"type":169,"tag":205,"props":9656,"children":9657},{"style":467},[9658],{"type":175,"value":6541},{"type":169,"tag":205,"props":9660,"children":9661},{"class":207,"line":1273},[9662,9666,9670,9674,9678,9682,9686],{"type":169,"tag":205,"props":9663,"children":9664},{"style":439},[9665],{"type":175,"value":4783},{"type":169,"tag":205,"props":9667,"children":9668},{"style":445},[9669],{"type":175,"value":448},{"type":169,"tag":205,"props":9671,"children":9672},{"style":451},[9673],{"type":175,"value":1158},{"type":169,"tag":205,"props":9675,"children":9676},{"style":439},[9677],{"type":175,"value":7084},{"type":169,"tag":205,"props":9679,"children":9680},{"style":445},[9681],{"type":175,"value":448},{"type":169,"tag":205,"props":9683,"children":9684},{"style":439},[9685],{"type":175,"value":5793},{"type":169,"tag":205,"props":9687,"children":9688},{"style":492},[9689],{"type":175,"value":9690},"// 100\n",{"type":169,"tag":205,"props":9692,"children":9693},{"class":207,"line":1300},[9694,9698,9702,9706,9710,9714,9718,9722],{"type":169,"tag":205,"props":9695,"children":9696},{"style":763},[9697],{"type":175,"value":5554},{"type":169,"tag":205,"props":9699,"children":9700},{"style":1197},[9701],{"type":175,"value":6798},{"type":169,"tag":205,"props":9703,"children":9704},{"style":235},[9705],{"type":175,"value":1127},{"type":169,"tag":205,"props":9707,"children":9708},{"style":235},[9709],{"type":175,"value":2606},{"type":169,"tag":205,"props":9711,"children":9712},{"style":451},[9713],{"type":175,"value":5400},{"type":169,"tag":205,"props":9715,"children":9716},{"style":439},[9717],{"type":175,"value":7084},{"type":169,"tag":205,"props":9719,"children":9720},{"style":445},[9721],{"type":175,"value":475},{"type":169,"tag":205,"props":9723,"children":9724},{"style":445},[9725],{"type":175,"value":1104},{"type":169,"tag":205,"props":9727,"children":9728},{"class":207,"line":1876},[9729,9733,9737,9741,9745,9750,9754,9758,9762],{"type":169,"tag":205,"props":9730,"children":9731},{"style":2423},[9732],{"type":175,"value":2420},{"type":169,"tag":205,"props":9734,"children":9735},{"style":445},[9736],{"type":175,"value":1696},{"type":169,"tag":205,"props":9738,"children":9739},{"style":1390},[9740],{"type":175,"value":5418},{"type":169,"tag":205,"props":9742,"children":9743},{"style":445},[9744],{"type":175,"value":475},{"type":169,"tag":205,"props":9746,"children":9747},{"style":1390},[9748],{"type":175,"value":9749}," key",{"type":169,"tag":205,"props":9751,"children":9752},{"style":445},[9753],{"type":175,"value":475},{"type":169,"tag":205,"props":9755,"children":9756},{"style":1390},[9757],{"type":175,"value":8489},{"type":169,"tag":205,"props":9759,"children":9760},{"style":445},[9761],{"type":175,"value":1398},{"type":169,"tag":205,"props":9763,"children":9764},{"style":445},[9765],{"type":175,"value":1104},{"type":169,"tag":205,"props":9767,"children":9768},{"class":207,"line":1936},[9769,9773,9777,9782,9786,9790,9794,9798,9802],{"type":169,"tag":205,"props":9770,"children":9771},{"style":1467},[9772],{"type":175,"value":1757},{"type":169,"tag":205,"props":9774,"children":9775},{"style":1161},[9776],{"type":175,"value":1696},{"type":169,"tag":205,"props":9778,"children":9779},{"style":439},[9780],{"type":175,"value":9781},"key",{"type":169,"tag":205,"props":9783,"children":9784},{"style":235},[9785],{"type":175,"value":1770},{"type":169,"tag":205,"props":9787,"children":9788},{"style":218},[9789],{"type":175,"value":221},{"type":169,"tag":205,"props":9791,"children":9792},{"style":224},[9793],{"type":175,"value":1489},{"type":169,"tag":205,"props":9795,"children":9796},{"style":218},[9797],{"type":175,"value":232},{"type":169,"tag":205,"props":9799,"children":9800},{"style":1161},[9801],{"type":175,"value":489},{"type":169,"tag":205,"props":9803,"children":9804},{"style":445},[9805],{"type":175,"value":1513},{"type":169,"tag":205,"props":9807,"children":9808},{"class":207,"line":1997},[9809],{"type":169,"tag":205,"props":9810,"children":9811},{"style":492},[9812],{"type":175,"value":9813},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":169,"tag":205,"props":9815,"children":9816},{"class":207,"line":2038},[9817,9821,9825,9829,9834,9838,9842,9846,9850,9854,9858,9862,9866],{"type":169,"tag":205,"props":9818,"children":9819},{"style":1467},[9820],{"type":175,"value":5667},{"type":169,"tag":205,"props":9822,"children":9823},{"style":439},[9824],{"type":175,"value":5708},{"type":169,"tag":205,"props":9826,"children":9827},{"style":445},[9828],{"type":175,"value":448},{"type":169,"tag":205,"props":9830,"children":9831},{"style":451},[9832],{"type":175,"value":9833},"defineProperty",{"type":169,"tag":205,"props":9835,"children":9836},{"style":1161},[9837],{"type":175,"value":459},{"type":169,"tag":205,"props":9839,"children":9840},{"style":439},[9841],{"type":175,"value":5418},{"type":169,"tag":205,"props":9843,"children":9844},{"style":445},[9845],{"type":175,"value":475},{"type":169,"tag":205,"props":9847,"children":9848},{"style":439},[9849],{"type":175,"value":9749},{"type":169,"tag":205,"props":9851,"children":9852},{"style":445},[9853],{"type":175,"value":475},{"type":169,"tag":205,"props":9855,"children":9856},{"style":445},[9857],{"type":175,"value":1475},{"type":169,"tag":205,"props":9859,"children":9860},{"style":439},[9861],{"type":175,"value":8489},{"type":169,"tag":205,"props":9863,"children":9864},{"style":445},[9865],{"type":175,"value":1498},{"type":169,"tag":205,"props":9867,"children":9868},{"style":1161},[9869],{"type":175,"value":1181},{"type":169,"tag":205,"props":9871,"children":9872},{"class":207,"line":2079},[9873,9877,9881],{"type":169,"tag":205,"props":9874,"children":9875},{"style":445},[9876],{"type":175,"value":5687},{"type":169,"tag":205,"props":9878,"children":9879},{"style":1467},[9880],{"type":175,"value":5692},{"type":169,"tag":205,"props":9882,"children":9883},{"style":445},[9884],{"type":175,"value":1104},{"type":169,"tag":205,"props":9886,"children":9887},{"class":207,"line":2088},[9888,9892,9896,9900,9905,9909,9913,9917,9921,9925,9929],{"type":169,"tag":205,"props":9889,"children":9890},{"style":1467},[9891],{"type":175,"value":5667},{"type":169,"tag":205,"props":9893,"children":9894},{"style":439},[9895],{"type":175,"value":5708},{"type":169,"tag":205,"props":9897,"children":9898},{"style":445},[9899],{"type":175,"value":448},{"type":169,"tag":205,"props":9901,"children":9902},{"style":451},[9903],{"type":175,"value":9904},"set",{"type":169,"tag":205,"props":9906,"children":9907},{"style":1161},[9908],{"type":175,"value":459},{"type":169,"tag":205,"props":9910,"children":9911},{"style":439},[9912],{"type":175,"value":5418},{"type":169,"tag":205,"props":9914,"children":9915},{"style":445},[9916],{"type":175,"value":475},{"type":169,"tag":205,"props":9918,"children":9919},{"style":439},[9920],{"type":175,"value":9749},{"type":169,"tag":205,"props":9922,"children":9923},{"style":445},[9924],{"type":175,"value":475},{"type":169,"tag":205,"props":9926,"children":9927},{"style":439},[9928],{"type":175,"value":8489},{"type":169,"tag":205,"props":9930,"children":9931},{"style":1161},[9932],{"type":175,"value":1181},{"type":169,"tag":205,"props":9934,"children":9935},{"class":207,"line":2096},[9936],{"type":169,"tag":205,"props":9937,"children":9938},{"style":445},[9939],{"type":175,"value":2085},{"type":169,"tag":205,"props":9941,"children":9942},{"class":207,"line":5762},[9943],{"type":169,"tag":205,"props":9944,"children":9945},{"style":445},[9946],{"type":175,"value":1843},{"type":169,"tag":205,"props":9948,"children":9949},{"class":207,"line":8278},[9950,9954],{"type":169,"tag":205,"props":9951,"children":9952},{"style":445},[9953],{"type":175,"value":1437},{"type":169,"tag":205,"props":9955,"children":9956},{"style":439},[9957],{"type":175,"value":1181},{"type":169,"tag":205,"props":9959,"children":9960},{"class":207,"line":8286},[9961,9965,9969,9973,9977],{"type":169,"tag":205,"props":9962,"children":9963},{"style":439},[9964],{"type":175,"value":1122},{"type":169,"tag":205,"props":9966,"children":9967},{"style":445},[9968],{"type":175,"value":448},{"type":169,"tag":205,"props":9970,"children":9971},{"style":439},[9972],{"type":175,"value":3915},{"type":169,"tag":205,"props":9974,"children":9975},{"style":235},[9976],{"type":175,"value":1638},{"type":169,"tag":205,"props":9978,"children":9979},{"style":467},[9980],{"type":175,"value":6541},{"type":169,"tag":205,"props":9982,"children":9983},{"class":207,"line":8294},[9984,9988,9992,9996,10001,10005,10009],{"type":169,"tag":205,"props":9985,"children":9986},{"style":439},[9987],{"type":175,"value":4783},{"type":169,"tag":205,"props":9989,"children":9990},{"style":445},[9991],{"type":175,"value":448},{"type":169,"tag":205,"props":9993,"children":9994},{"style":451},[9995],{"type":175,"value":1158},{"type":169,"tag":205,"props":9997,"children":9998},{"style":439},[9999],{"type":175,"value":10000},"(b",{"type":169,"tag":205,"props":10002,"children":10003},{"style":445},[10004],{"type":175,"value":448},{"type":169,"tag":205,"props":10006,"children":10007},{"style":439},[10008],{"type":175,"value":5793},{"type":169,"tag":205,"props":10010,"children":10011},{"style":492},[10012],{"type":175,"value":6487},{"type":169,"tag":183,"props":10014,"children":10015},{},[10016],{"type":175,"value":10017},"自增自减运算符会隐式的转换操作数的类型。",{"type":169,"tag":183,"props":10019,"children":10020},{},[10021],{"type":175,"value":10022},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":169,"tag":194,"props":10024,"children":10026},{"className":427,"code":10025,"language":429,"meta":163,"style":163},"class a extends a {}\n",[10027],{"type":169,"tag":201,"props":10028,"children":10029},{"__ignoreMap":163},[10030],{"type":169,"tag":205,"props":10031,"children":10032},{"class":207,"line":208},[10033,10037,10041,10045,10049],{"type":169,"tag":205,"props":10034,"children":10035},{"style":763},[10036],{"type":175,"value":3308},{"type":169,"tag":205,"props":10038,"children":10039},{"style":3311},[10040],{"type":175,"value":2987},{"type":169,"tag":205,"props":10042,"children":10043},{"style":3331},[10044],{"type":175,"value":3334},{"type":169,"tag":205,"props":10046,"children":10047},{"style":3337},[10048],{"type":175,"value":2987},{"type":169,"tag":205,"props":10050,"children":10051},{"style":445},[10052],{"type":175,"value":2895},{"type":169,"tag":183,"props":10054,"children":10055},{},[10056],{"type":175,"value":10057},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":169,"tag":183,"props":10059,"children":10060},{},[10061],{"type":175,"value":10062},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":169,"tag":183,"props":10064,"children":10065},{},[10066],{"type":175,"value":10067},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":169,"tag":194,"props":10069,"children":10071},{"className":427,"code":10070,"language":429,"meta":163,"style":163},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10072],{"type":169,"tag":201,"props":10073,"children":10074},{"__ignoreMap":163},[10075,10128,10141,10148],{"type":169,"tag":205,"props":10076,"children":10077},{"class":207,"line":208},[10078,10082,10087,10091,10095,10100,10104,10108,10112,10116,10120,10124],{"type":169,"tag":205,"props":10079,"children":10080},{"style":1467},[10081],{"type":175,"value":8529},{"type":169,"tag":205,"props":10083,"children":10084},{"style":439},[10085],{"type":175,"value":10086}," (a ",{"type":169,"tag":205,"props":10088,"children":10089},{"style":235},[10090],{"type":175,"value":1638},{"type":169,"tag":205,"props":10092,"children":10093},{"style":445},[10094],{"type":175,"value":1475},{"type":169,"tag":205,"props":10096,"children":10097},{"style":1161},[10098],{"type":175,"value":10099}," undefined",{"type":169,"tag":205,"props":10101,"children":10102},{"style":445},[10103],{"type":175,"value":1623},{"type":169,"tag":205,"props":10105,"children":10106},{"style":218},[10107],{"type":175,"value":221},{"type":169,"tag":205,"props":10109,"children":10110},{"style":224},[10111],{"type":175,"value":1489},{"type":169,"tag":205,"props":10113,"children":10114},{"style":218},[10115],{"type":175,"value":232},{"type":169,"tag":205,"props":10117,"children":10118},{"style":445},[10119],{"type":175,"value":1498},{"type":169,"tag":205,"props":10121,"children":10122},{"style":439},[10123],{"type":175,"value":489},{"type":169,"tag":205,"props":10125,"children":10126},{"style":445},[10127],{"type":175,"value":1513},{"type":169,"tag":205,"props":10129,"children":10130},{"class":207,"line":498},[10131,10136],{"type":169,"tag":205,"props":10132,"children":10133},{"style":235},[10134],{"type":175,"value":10135},"  delete",{"type":169,"tag":205,"props":10137,"children":10138},{"style":518},[10139],{"type":175,"value":10140}," undefined\n",{"type":169,"tag":205,"props":10142,"children":10143},{"class":207,"line":1143},[10144],{"type":169,"tag":205,"props":10145,"children":10146},{"style":445},[10147],{"type":175,"value":1190},{"type":169,"tag":205,"props":10149,"children":10150},{"class":207,"line":1184},[10151,10155,10159,10163,10168],{"type":169,"tag":205,"props":10152,"children":10153},{"style":439},[10154],{"type":175,"value":4783},{"type":169,"tag":205,"props":10156,"children":10157},{"style":445},[10158],{"type":175,"value":448},{"type":169,"tag":205,"props":10160,"children":10161},{"style":451},[10162],{"type":175,"value":1158},{"type":169,"tag":205,"props":10164,"children":10165},{"style":439},[10166],{"type":175,"value":10167},"(a) ",{"type":169,"tag":205,"props":10169,"children":10170},{"style":492},[10171],{"type":175,"value":7260},{"type":169,"tag":177,"props":10173,"children":10175},{"id":10174},"动态绑定",[10176],{"type":175,"value":10174},{"type":169,"tag":183,"props":10178,"children":10179},{},[10180],{"type":175,"value":10181},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":169,"tag":194,"props":10183,"children":10185},{"className":427,"code":10184,"language":429,"meta":163,"style":163},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10186],{"type":169,"tag":201,"props":10187,"children":10188},{"__ignoreMap":163},[10189,10209,10229,10257,10265,10294,10302,10331,10339,10385,10393,10434,10441],{"type":169,"tag":205,"props":10190,"children":10191},{"class":207,"line":208},[10192,10196,10201,10205],{"type":169,"tag":205,"props":10193,"children":10194},{"style":763},[10195],{"type":175,"value":1089},{"type":169,"tag":205,"props":10197,"children":10198},{"style":451},[10199],{"type":175,"value":10200}," indirect",{"type":169,"tag":205,"props":10202,"children":10203},{"style":445},[10204],{"type":175,"value":812},{"type":169,"tag":205,"props":10206,"children":10207},{"style":445},[10208],{"type":175,"value":1104},{"type":169,"tag":205,"props":10210,"children":10211},{"class":207,"line":498},[10212,10216,10220,10224],{"type":169,"tag":205,"props":10213,"children":10214},{"style":763},[10215],{"type":175,"value":3541},{"type":169,"tag":205,"props":10217,"children":10218},{"style":1197},[10219],{"type":175,"value":7586},{"type":169,"tag":205,"props":10221,"children":10222},{"style":235},[10223],{"type":175,"value":1127},{"type":169,"tag":205,"props":10225,"children":10226},{"style":439},[10227],{"type":175,"value":10228}," eval\n",{"type":169,"tag":205,"props":10230,"children":10231},{"class":207,"line":1143},[10232,10236,10241,10245,10249,10253],{"type":169,"tag":205,"props":10233,"children":10234},{"style":763},[10235],{"type":175,"value":3541},{"type":169,"tag":205,"props":10237,"children":10238},{"style":7583},[10239],{"type":175,"value":10240}," getEval",{"type":169,"tag":205,"props":10242,"children":10243},{"style":235},[10244],{"type":175,"value":1127},{"type":169,"tag":205,"props":10246,"children":10247},{"style":445},[10248],{"type":175,"value":1099},{"type":169,"tag":205,"props":10250,"children":10251},{"style":763},[10252],{"type":175,"value":5490},{"type":169,"tag":205,"props":10254,"children":10255},{"style":439},[10256],{"type":175,"value":10228},{"type":169,"tag":205,"props":10258,"children":10259},{"class":207,"line":1184},[10260],{"type":169,"tag":205,"props":10261,"children":10262},{"style":492},[10263],{"type":175,"value":10264},"  // 单值表达式\n",{"type":169,"tag":205,"props":10266,"children":10267},{"class":207,"line":1193},[10268,10273,10277,10281,10286,10290],{"type":169,"tag":205,"props":10269,"children":10270},{"style":451},[10271],{"type":175,"value":10272},"  exec",{"type":169,"tag":205,"props":10274,"children":10275},{"style":1161},[10276],{"type":175,"value":459},{"type":169,"tag":205,"props":10278,"children":10279},{"style":218},[10280],{"type":175,"value":232},{"type":169,"tag":205,"props":10282,"children":10283},{"style":224},[10284],{"type":175,"value":10285},"console.log(this === globalThis)",{"type":169,"tag":205,"props":10287,"children":10288},{"style":218},[10289],{"type":175,"value":232},{"type":169,"tag":205,"props":10291,"children":10292},{"style":1161},[10293],{"type":175,"value":1181},{"type":169,"tag":205,"props":10295,"children":10296},{"class":207,"line":1228},[10297],{"type":169,"tag":205,"props":10298,"children":10299},{"style":492},[10300],{"type":175,"value":10301},"  // 函数返回\n",{"type":169,"tag":205,"props":10303,"children":10304},{"class":207,"line":1265},[10305,10310,10315,10319,10323,10327],{"type":169,"tag":205,"props":10306,"children":10307},{"style":451},[10308],{"type":175,"value":10309},"  getEval",{"type":169,"tag":205,"props":10311,"children":10312},{"style":1161},[10313],{"type":175,"value":10314},"()(",{"type":169,"tag":205,"props":10316,"children":10317},{"style":218},[10318],{"type":175,"value":232},{"type":169,"tag":205,"props":10320,"children":10321},{"style":224},[10322],{"type":175,"value":10285},{"type":169,"tag":205,"props":10324,"children":10325},{"style":218},[10326],{"type":175,"value":232},{"type":169,"tag":205,"props":10328,"children":10329},{"style":1161},[10330],{"type":175,"value":1181},{"type":169,"tag":205,"props":10332,"children":10333},{"class":207,"line":1273},[10334],{"type":169,"tag":205,"props":10335,"children":10336},{"style":492},[10337],{"type":175,"value":10338},"  // 携带逗号运算符的分组运算符\n",{"type":169,"tag":205,"props":10340,"children":10341},{"class":207,"line":1300},[10342,10347,10351,10355,10359,10364,10369,10373,10377,10381],{"type":169,"tag":205,"props":10343,"children":10344},{"style":445},[10345],{"type":175,"value":10346},"  ;",{"type":169,"tag":205,"props":10348,"children":10349},{"style":1161},[10350],{"type":175,"value":459},{"type":169,"tag":205,"props":10352,"children":10353},{"style":467},[10354],{"type":175,"value":470},{"type":169,"tag":205,"props":10356,"children":10357},{"style":445},[10358],{"type":175,"value":475},{"type":169,"tag":205,"props":10360,"children":10361},{"style":439},[10362],{"type":175,"value":10363}," eval",{"type":169,"tag":205,"props":10365,"children":10366},{"style":1161},[10367],{"type":175,"value":10368},")(",{"type":169,"tag":205,"props":10370,"children":10371},{"style":218},[10372],{"type":175,"value":232},{"type":169,"tag":205,"props":10374,"children":10375},{"style":224},[10376],{"type":175,"value":10285},{"type":169,"tag":205,"props":10378,"children":10379},{"style":218},[10380],{"type":175,"value":232},{"type":169,"tag":205,"props":10382,"children":10383},{"style":1161},[10384],{"type":175,"value":1181},{"type":169,"tag":205,"props":10386,"children":10387},{"class":207,"line":1876},[10388],{"type":169,"tag":205,"props":10389,"children":10390},{"style":492},[10391],{"type":175,"value":10392},"  // eval.call 等方法\n",{"type":169,"tag":205,"props":10394,"children":10395},{"class":207,"line":1936},[10396,10401,10405,10409,10414,10418,10422,10426,10430],{"type":169,"tag":205,"props":10397,"children":10398},{"style":439},[10399],{"type":175,"value":10400},"  eval",{"type":169,"tag":205,"props":10402,"children":10403},{"style":445},[10404],{"type":175,"value":448},{"type":169,"tag":205,"props":10406,"children":10407},{"style":451},[10408],{"type":175,"value":6651},{"type":169,"tag":205,"props":10410,"children":10411},{"style":1161},[10412],{"type":175,"value":10413},"(()",{"type":169,"tag":205,"props":10415,"children":10416},{"style":445},[10417],{"type":175,"value":475},{"type":169,"tag":205,"props":10419,"children":10420},{"style":218},[10421],{"type":175,"value":221},{"type":169,"tag":205,"props":10423,"children":10424},{"style":224},[10425],{"type":175,"value":10285},{"type":169,"tag":205,"props":10427,"children":10428},{"style":218},[10429],{"type":175,"value":232},{"type":169,"tag":205,"props":10431,"children":10432},{"style":1161},[10433],{"type":175,"value":1181},{"type":169,"tag":205,"props":10435,"children":10436},{"class":207,"line":1997},[10437],{"type":169,"tag":205,"props":10438,"children":10439},{"style":445},[10440],{"type":175,"value":1190},{"type":169,"tag":205,"props":10442,"children":10443},{"class":207,"line":2038},[10444,10449,10453,10457,10461,10466],{"type":169,"tag":205,"props":10445,"children":10446},{"style":439},[10447],{"type":175,"value":10448},"indirect",{"type":169,"tag":205,"props":10450,"children":10451},{"style":445},[10452],{"type":175,"value":448},{"type":169,"tag":205,"props":10454,"children":10455},{"style":451},[10456],{"type":175,"value":7481},{"type":169,"tag":205,"props":10458,"children":10459},{"style":439},[10460],{"type":175,"value":459},{"type":169,"tag":205,"props":10462,"children":10463},{"style":445},[10464],{"type":175,"value":10465},"{}",{"type":169,"tag":205,"props":10467,"children":10468},{"style":439},[10469],{"type":175,"value":10470},")()\n",{"type":169,"tag":183,"props":10472,"children":10473},{},[10474],{"type":175,"value":10475},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":169,"tag":183,"props":10477,"children":10478},{},[10479],{"type":175,"value":10480},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":169,"tag":194,"props":10482,"children":10484},{"className":427,"code":10483,"language":429,"meta":163,"style":163},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10485],{"type":169,"tag":201,"props":10486,"children":10487},{"__ignoreMap":163},[10488,10503,10539,10561,10617],{"type":169,"tag":205,"props":10489,"children":10490},{"class":207,"line":208},[10491,10495,10499],{"type":169,"tag":205,"props":10492,"children":10493},{"style":439},[10494],{"type":175,"value":6949},{"type":169,"tag":205,"props":10496,"children":10497},{"style":235},[10498],{"type":175,"value":1638},{"type":169,"tag":205,"props":10500,"children":10501},{"style":467},[10502],{"type":175,"value":6117},{"type":169,"tag":205,"props":10504,"children":10505},{"class":207,"line":498},[10506,10510,10514,10518,10522,10526,10530,10535],{"type":169,"tag":205,"props":10507,"children":10508},{"style":763},[10509],{"type":175,"value":5554},{"type":169,"tag":205,"props":10511,"children":10512},{"style":1197},[10513],{"type":175,"value":2404},{"type":169,"tag":205,"props":10515,"children":10516},{"style":235},[10517],{"type":175,"value":1127},{"type":169,"tag":205,"props":10519,"children":10520},{"style":445},[10521],{"type":175,"value":1475},{"type":169,"tag":205,"props":10523,"children":10524},{"style":1161},[10525],{"type":175,"value":6239},{"type":169,"tag":205,"props":10527,"children":10528},{"style":445},[10529],{"type":175,"value":1623},{"type":169,"tag":205,"props":10531,"children":10532},{"style":467},[10533],{"type":175,"value":10534}," 200",{"type":169,"tag":205,"props":10536,"children":10537},{"style":445},[10538],{"type":175,"value":2934},{"type":169,"tag":205,"props":10540,"children":10541},{"class":207,"line":1143},[10542,10546,10551,10556],{"type":169,"tag":205,"props":10543,"children":10544},{"style":1467},[10545],{"type":175,"value":8529},{"type":169,"tag":205,"props":10547,"children":10548},{"style":439},[10549],{"type":175,"value":10550}," (obj) ",{"type":169,"tag":205,"props":10552,"children":10553},{"style":445},[10554],{"type":175,"value":10555},"{",{"type":169,"tag":205,"props":10557,"children":10558},{"style":1161},[10559],{"type":175,"value":10560}," \n",{"type":169,"tag":205,"props":10562,"children":10563},{"class":207,"line":1184},[10564,10568,10572,10576,10580,10584,10588,10592,10596,10600,10604,10608,10612],{"type":169,"tag":205,"props":10565,"children":10566},{"style":451},[10567],{"type":175,"value":10400},{"type":169,"tag":205,"props":10569,"children":10570},{"style":1161},[10571],{"type":175,"value":459},{"type":169,"tag":205,"props":10573,"children":10574},{"style":439},[10575],{"type":175,"value":4783},{"type":169,"tag":205,"props":10577,"children":10578},{"style":445},[10579],{"type":175,"value":448},{"type":169,"tag":205,"props":10581,"children":10582},{"style":451},[10583],{"type":175,"value":1158},{"type":169,"tag":205,"props":10585,"children":10586},{"style":1161},[10587],{"type":175,"value":459},{"type":169,"tag":205,"props":10589,"children":10590},{"style":439},[10591],{"type":175,"value":2434},{"type":169,"tag":205,"props":10593,"children":10594},{"style":445},[10595],{"type":175,"value":475},{"type":169,"tag":205,"props":10597,"children":10598},{"style":1110},[10599],{"type":175,"value":3555},{"type":169,"tag":205,"props":10601,"children":10602},{"style":445},[10603],{"type":175,"value":448},{"type":169,"tag":205,"props":10605,"children":10606},{"style":439},[10607],{"type":175,"value":2434},{"type":169,"tag":205,"props":10609,"children":10610},{"style":1161},[10611],{"type":175,"value":9038},{"type":169,"tag":205,"props":10613,"children":10614},{"style":492},[10615],{"type":175,"value":10616},"// 200 100\n",{"type":169,"tag":205,"props":10618,"children":10619},{"class":207,"line":1193},[10620],{"type":169,"tag":205,"props":10621,"children":10622},{"style":445},[10623],{"type":175,"value":1190},{"type":169,"tag":183,"props":10625,"children":10626},{},[10627],{"type":175,"value":10628},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":169,"tag":177,"props":10630,"children":10632},{"id":10631},"动态方法调用",[10633],{"type":175,"value":10631},{"type":169,"tag":183,"props":10635,"children":10636},{},[10637],{"type":175,"value":10638},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":169,"tag":183,"props":10640,"children":10641},{},[10642],{"type":175,"value":10643},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":169,"tag":183,"props":10645,"children":10646},{},[10647],{"type":175,"value":10648},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":169,"tag":183,"props":10650,"children":10651},{},[10652],{"type":175,"value":10653},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":169,"tag":194,"props":10655,"children":10657},{"className":427,"code":10656,"language":429,"meta":163,"style":163},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10658],{"type":169,"tag":201,"props":10659,"children":10660},{"__ignoreMap":163},[10661,10681,10717,10766],{"type":169,"tag":205,"props":10662,"children":10663},{"class":207,"line":208},[10664,10668,10673,10677],{"type":169,"tag":205,"props":10665,"children":10666},{"style":763},[10667],{"type":175,"value":1089},{"type":169,"tag":205,"props":10669,"children":10670},{"style":451},[10671],{"type":175,"value":10672}," Test",{"type":169,"tag":205,"props":10674,"children":10675},{"style":445},[10676],{"type":175,"value":812},{"type":169,"tag":205,"props":10678,"children":10679},{"style":445},[10680],{"type":175,"value":2895},{"type":169,"tag":205,"props":10682,"children":10683},{"class":207,"line":498},[10684,10689,10693,10697,10701,10705,10709,10713],{"type":169,"tag":205,"props":10685,"children":10686},{"style":439},[10687],{"type":175,"value":10688},"TestAnother ",{"type":169,"tag":205,"props":10690,"children":10691},{"style":235},[10692],{"type":175,"value":1638},{"type":169,"tag":205,"props":10694,"children":10695},{"style":439},[10696],{"type":175,"value":10672},{"type":169,"tag":205,"props":10698,"children":10699},{"style":445},[10700],{"type":175,"value":448},{"type":169,"tag":205,"props":10702,"children":10703},{"style":451},[10704],{"type":175,"value":7481},{"type":169,"tag":205,"props":10706,"children":10707},{"style":439},[10708],{"type":175,"value":459},{"type":169,"tag":205,"props":10710,"children":10711},{"style":445},[10712],{"type":175,"value":10465},{"type":169,"tag":205,"props":10714,"children":10715},{"style":439},[10716],{"type":175,"value":1181},{"type":169,"tag":205,"props":10718,"children":10719},{"class":207,"line":1143},[10720,10724,10728,10732,10736,10740,10744,10748,10753,10758,10762],{"type":169,"tag":205,"props":10721,"children":10722},{"style":439},[10723],{"type":175,"value":4783},{"type":169,"tag":205,"props":10725,"children":10726},{"style":445},[10727],{"type":175,"value":448},{"type":169,"tag":205,"props":10729,"children":10730},{"style":451},[10731],{"type":175,"value":1158},{"type":169,"tag":205,"props":10733,"children":10734},{"style":439},[10735],{"type":175,"value":459},{"type":169,"tag":205,"props":10737,"children":10738},{"style":235},[10739],{"type":175,"value":1279},{"type":169,"tag":205,"props":10741,"children":10742},{"style":451},[10743],{"type":175,"value":10672},{"type":169,"tag":205,"props":10745,"children":10746},{"style":439},[10747],{"type":175,"value":594},{"type":169,"tag":205,"props":10749,"children":10750},{"style":235},[10751],{"type":175,"value":10752},"instanceof",{"type":169,"tag":205,"props":10754,"children":10755},{"style":3311},[10756],{"type":175,"value":10757}," TestAnother",{"type":169,"tag":205,"props":10759,"children":10760},{"style":439},[10761],{"type":175,"value":489},{"type":169,"tag":205,"props":10763,"children":10764},{"style":492},[10765],{"type":175,"value":539},{"type":169,"tag":205,"props":10767,"children":10768},{"class":207,"line":1184},[10769,10773,10777,10781,10785,10790,10794,10798,10802],{"type":169,"tag":205,"props":10770,"children":10771},{"style":439},[10772],{"type":175,"value":4783},{"type":169,"tag":205,"props":10774,"children":10775},{"style":445},[10776],{"type":175,"value":448},{"type":169,"tag":205,"props":10778,"children":10779},{"style":451},[10780],{"type":175,"value":1158},{"type":169,"tag":205,"props":10782,"children":10783},{"style":439},[10784],{"type":175,"value":459},{"type":169,"tag":205,"props":10786,"children":10787},{"style":2586},[10788],{"type":175,"value":10789},"test2",{"type":169,"tag":205,"props":10791,"children":10792},{"style":445},[10793],{"type":175,"value":448},{"type":169,"tag":205,"props":10795,"children":10796},{"style":1197},[10797],{"type":175,"value":2597},{"type":169,"tag":205,"props":10799,"children":10800},{"style":439},[10801],{"type":175,"value":489},{"type":169,"tag":205,"props":10803,"children":10804},{"style":492},[10805],{"type":175,"value":729},{"type":169,"tag":183,"props":10807,"children":10808},{},[10809],{"type":175,"value":10810},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":169,"tag":177,"props":10812,"children":10814},{"id":10813},"通用执行环境的实现",[10815],{"type":175,"value":10813},{"type":169,"tag":183,"props":10817,"children":10818},{},[10819],{"type":175,"value":10820},"跳过。",{"type":169,"tag":170,"props":10822,"children":10824},{"id":10823},"勘误",[10825],{"type":175,"value":10826},"勘误？",{"type":169,"tag":283,"props":10828,"children":10829},{},[10830,10835,10840,10845,10850,10855,10860,10865,10870,10875,10880,10885,10890],{"type":169,"tag":287,"props":10831,"children":10832},{},[10833],{"type":175,"value":10834},"P71，属性读取器",{"type":169,"tag":287,"props":10836,"children":10837},{},[10838],{"type":175,"value":10839},"P77，逻辑与、按位非",{"type":169,"tag":287,"props":10841,"children":10842},{},[10843],{"type":175,"value":10844},"P107，catch 子句隐式声明",{"type":169,"tag":287,"props":10846,"children":10847},{},[10848],{"type":175,"value":10849},"P134，第二段代码，computedName 括号",{"type":169,"tag":287,"props":10851,"children":10852},{},[10853],{"type":175,"value":10854},"P148，ES8",{"type":169,"tag":287,"props":10856,"children":10857},{},[10858],{"type":175,"value":10859},"P179，MyObject() 有没有必要用括号",{"type":169,"tag":287,"props":10861,"children":10862},{},[10863],{"type":175,"value":10864},"P206，语言仅提供了...能力而已",{"type":169,"tag":287,"props":10866,"children":10867},{},[10868],{"type":175,"value":10869},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":169,"tag":287,"props":10871,"children":10872},{},[10873],{"type":175,"value":10874},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":169,"tag":287,"props":10876,"children":10877},{},[10878],{"type":175,"value":10879},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":169,"tag":287,"props":10881,"children":10882},{},[10883],{"type":175,"value":10884},"P536，表格最后一行 String",{"type":169,"tag":287,"props":10886,"children":10887},{},[10888],{"type":175,"value":10889},"P535，存取描述符",{"type":169,"tag":287,"props":10891,"children":10892},{},[10893],{"type":175,"value":10894},"P564，运算符",{"type":169,"tag":10896,"props":10897,"children":10900},"section",{"className":10898,"dataFootnotes":163},[10899],"footnotes",[10901,10908],{"type":169,"tag":170,"props":10902,"children":10905},{"className":10903,"id":270},[10904],"sr-only",[10906],{"type":175,"value":10907},"Footnotes",{"type":169,"tag":10909,"props":10910,"children":10911},"ol",{},[10912,10927,10940,10953,10966,10979],{"type":169,"tag":287,"props":10913,"children":10915},{"id":10914},"user-content-fn-first-class",[10916,10918],{"type":175,"value":10917},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":169,"tag":266,"props":10919,"children":10924},{"href":10920,"ariaLabel":10921,"className":10922,"dataFootnoteBackref":163},"#user-content-fnref-first-class","Back to reference 1",[10923],"data-footnote-backref",[10925],{"type":175,"value":10926},"↩",{"type":169,"tag":287,"props":10928,"children":10930},{"id":10929},"user-content-fn-oo",[10931,10933],{"type":175,"value":10932},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":169,"tag":266,"props":10934,"children":10938},{"href":10935,"ariaLabel":10936,"className":10937,"dataFootnoteBackref":163},"#user-content-fnref-oo","Back to reference 2",[10923],[10939],{"type":175,"value":10926},{"type":169,"tag":287,"props":10941,"children":10943},{"id":10942},"user-content-fn-string",[10944,10946],{"type":175,"value":10945},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":169,"tag":266,"props":10947,"children":10951},{"href":10948,"ariaLabel":10949,"className":10950,"dataFootnoteBackref":163},"#user-content-fnref-string","Back to reference 3",[10923],[10952],{"type":175,"value":10926},{"type":169,"tag":287,"props":10954,"children":10956},{"id":10955},"user-content-fn-namespace",[10957,10959],{"type":175,"value":10958},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":169,"tag":266,"props":10960,"children":10964},{"href":10961,"ariaLabel":10962,"className":10963,"dataFootnoteBackref":163},"#user-content-fnref-namespace","Back to reference 4",[10923],[10965],{"type":175,"value":10926},{"type":169,"tag":287,"props":10967,"children":10969},{"id":10968},"user-content-fn-iterationenv",[10970,10972],{"type":175,"value":10971},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":169,"tag":266,"props":10973,"children":10977},{"href":10974,"ariaLabel":10975,"className":10976,"dataFootnoteBackref":163},"#user-content-fnref-iterationenv","Back to reference 5",[10923],[10978],{"type":175,"value":10926},{"type":169,"tag":287,"props":10980,"children":10982},{"id":10981},"user-content-fn-reference",[10983,10985],{"type":175,"value":10984},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":169,"tag":266,"props":10986,"children":10990},{"href":10987,"ariaLabel":10988,"className":10989,"dataFootnoteBackref":163},"#user-content-fnref-reference","Back to reference 6",[10923],[10991],{"type":175,"value":10926},{"type":169,"tag":10993,"props":10994,"children":10995},"style",{},[10996],{"type":175,"value":10997},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":498,"depth":498,"links":10999},[11000,11009,11018,11028,11034,11044,11045],{"id":172,"depth":498,"text":172,"children":11001},[11002,11003,11004,11005,11006,11007,11008],{"id":179,"depth":1143,"text":179},{"id":253,"depth":1143,"text":253},{"id":379,"depth":1143,"text":379},{"id":1329,"depth":1143,"text":1329},{"id":2114,"depth":1143,"text":2114},{"id":2241,"depth":1143,"text":2241},{"id":2332,"depth":1143,"text":2332},{"id":2357,"depth":498,"text":2357,"children":11010},[11011,11012,11013,11014,11015,11016,11017],{"id":2362,"depth":1143,"text":179},{"id":2833,"depth":1143,"text":2833},{"id":3278,"depth":1143,"text":3278},{"id":4039,"depth":1143,"text":4039},{"id":4815,"depth":1143,"text":4815},{"id":4986,"depth":1143,"text":4986},{"id":5801,"depth":1143,"text":5801},{"id":5811,"depth":498,"text":5811,"children":11019},[11020,11021,11022,11023,11024,11025,11026,11027],{"id":5816,"depth":1143,"text":5816},{"id":5869,"depth":1143,"text":5869},{"id":6046,"depth":1143,"text":6046},{"id":6324,"depth":1143,"text":6324},{"id":6408,"depth":1143,"text":6408},{"id":6582,"depth":1143,"text":6582},{"id":6664,"depth":1143,"text":6664},{"id":6702,"depth":1143,"text":6702},{"id":6712,"depth":498,"text":6712,"children":11029},[11030,11031,11032,11033],{"id":6717,"depth":1143,"text":5816},{"id":6732,"depth":1143,"text":6735},{"id":7874,"depth":1143,"text":7874},{"id":8321,"depth":1143,"text":8321},{"id":8691,"depth":498,"text":8691,"children":11035},[11036,11037,11038,11039,11040,11041,11042,11043],{"id":8696,"depth":1143,"text":5816},{"id":8711,"depth":1143,"text":8711},{"id":9196,"depth":1143,"text":9196},{"id":9299,"depth":1143,"text":9299},{"id":9499,"depth":1143,"text":9499},{"id":10174,"depth":1143,"text":10174},{"id":10631,"depth":1143,"text":10631},{"id":10813,"depth":1143,"text":10813},{"id":10823,"depth":498,"text":10826},{"id":270,"depth":498,"text":10907},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11053,11057],{"_path":11054,"title":11055,"description":11056},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11058,"title":11059,"description":163},"/_books/9787301135907","日常生活中的自我呈现",1742808208985]