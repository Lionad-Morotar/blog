[{"data":1,"prerenderedAt":11057},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":155,"/_books/9787121386695-surround":11049},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":160,"body":162,"_type":11043,"_id":11044,"_source":11045,"_file":11046,"_stem":11047,"_extension":11048},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":163,"children":164,"toc":10995},"root",[165,173,179,185,190,248,253,274,279,318,323,336,341,346,351,356,374,379,384,389,402,407,412,417,422,537,542,547,608,613,654,659,692,697,702,727,732,769,774,1067,1072,1324,1329,1334,1339,1357,1362,1447,1452,1583,1588,1593,2099,2104,2109,2114,2119,2221,2226,2231,2236,2241,2246,2251,2256,2309,2314,2327,2332,2337,2342,2347,2352,2357,2362,2367,2372,2377,2382,2558,2563,2655,2660,2665,2670,2675,2792,2810,2815,2828,2833,2838,2843,2856,2861,2866,3002,3017,3022,3102,3107,3154,3268,3273,3278,3283,3468,3473,3478,3483,3646,3651,3679,3684,3697,3702,3954,3959,3964,3969,4029,4034,4039,4044,4049,4054,4152,4157,4162,4180,4185,4198,4203,4208,4221,4226,4231,4329,4334,4339,4344,4536,4541,4810,4815,4820,4838,4843,4958,4963,4981,4986,4991,4996,5001,5192,5197,5210,5215,5796,5801,5806,5811,5816,5821,5826,5831,5836,5854,5859,5864,5869,5874,5994,5999,6004,6009,6021,6026,6031,6036,6041,6046,6064,6181,6186,6319,6324,6329,6334,6352,6357,6362,6403,6408,6413,6418,6485,6490,6495,6539,6544,6549,6554,6572,6577,6582,6587,6654,6659,6664,6669,6687,6692,6697,6702,6707,6712,6717,6722,6727,6733,6738,6756,6761,6905,6923,7144,7149,7154,7285,7290,7308,7313,7361,7366,7488,7493,7498,7869,7874,7879,7884,7889,7894,8316,8321,8326,8331,8349,8354,8446,8451,8456,8643,8648,8653,8658,8663,8681,8686,8691,8696,8701,8706,8711,8716,8885,8890,8895,9041,9046,9186,9191,9196,9201,9206,9211,9243,9248,9294,9299,9304,9484,9489,9494,9499,9504,9509,9514,10010,10015,10020,10050,10055,10060,10065,10169,10174,10179,10468,10473,10478,10621,10626,10631,10636,10641,10646,10651,10803,10808,10813,10818,10824,10892,10989],{"type":166,"tag":167,"props":168,"children":170},"element","h2",{"id":169},"语法",[171],{"type":172,"value":169},"text",{"type":166,"tag":174,"props":175,"children":177},"h3",{"id":176},"语法综述",[178],{"type":172,"value":176},{"type":166,"tag":180,"props":181,"children":182},"p",{},[183],{"type":172,"value":184},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":166,"tag":180,"props":186,"children":187},{},[188],{"type":172,"value":189},"可以使用 --check 指令检测语法错误：",{"type":166,"tag":191,"props":192,"children":196},"pre",{"className":193,"code":194,"language":195,"meta":160,"style":160},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[197],{"type":166,"tag":198,"props":199,"children":200},"code",{"__ignoreMap":160},[201],{"type":166,"tag":202,"props":203,"children":206},"span",{"class":204,"line":205},"line",1,[207,213,219,225,230,236,242],{"type":166,"tag":202,"props":208,"children":210},{"style":209},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[211],{"type":172,"value":212},"echo",{"type":166,"tag":202,"props":214,"children":216},{"style":215},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[217],{"type":172,"value":218}," '",{"type":166,"tag":202,"props":220,"children":222},{"style":221},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[223],{"type":172,"value":224},"\"hello world\"",{"type":166,"tag":202,"props":226,"children":227},{"style":215},[228],{"type":172,"value":229},"'",{"type":166,"tag":202,"props":231,"children":233},{"style":232},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[234],{"type":172,"value":235}," |",{"type":166,"tag":202,"props":237,"children":239},{"style":238},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[240],{"type":172,"value":241}," node",{"type":166,"tag":202,"props":243,"children":245},{"style":244},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[246],{"type":172,"value":247}," -c\n",{"type":166,"tag":174,"props":249,"children":251},{"id":250},"声明语法",[252],{"type":172,"value":250},{"type":166,"tag":180,"props":254,"children":255},{},[256,258,272],{"type":172,"value":257},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":166,"tag":259,"props":260,"children":261},"sup",{},[262],{"type":166,"tag":263,"props":264,"children":269},"a",{"href":265,"ariaDescribedBy":266,"dataFootnoteRef":160,"id":268},"#user-content-fn-first-class",[267],"footnote-label","user-content-fnref-first-class",[270],{"type":172,"value":271},"1",{"type":172,"value":273},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":166,"tag":180,"props":275,"children":276},{},[277],{"type":172,"value":278},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":166,"tag":280,"props":281,"children":282},"ul",{},[283,302],{"type":166,"tag":284,"props":285,"children":286},"li",{},[287,289,300],{"type":172,"value":288},"基本数据类型：undefined、string、number、object",{"type":166,"tag":259,"props":290,"children":291},{},[292],{"type":166,"tag":263,"props":293,"children":297},{"href":294,"ariaDescribedBy":295,"dataFootnoteRef":160,"id":296},"#user-content-fn-oo",[267],"user-content-fnref-oo",[298],{"type":172,"value":299},"2",{"type":172,"value":301},"、function、boolean、symbol、bigint",{"type":166,"tag":284,"props":303,"children":304},{},[305,307],{"type":172,"value":306},"值类型和引用类型",{"type":166,"tag":259,"props":308,"children":309},{},[310],{"type":166,"tag":263,"props":311,"children":315},{"href":312,"ariaDescribedBy":313,"dataFootnoteRef":160,"id":314},"#user-content-fn-string",[267],"user-content-fnref-string",[316],{"type":172,"value":317},"3",{"type":166,"tag":180,"props":319,"children":320},{},[321],{"type":172,"value":322},"如果算上规范，可以再增加两种类型系统：",{"type":166,"tag":280,"props":324,"children":325},{},[326,331],{"type":166,"tag":284,"props":327,"children":328},{},[329],{"type":172,"value":330},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":166,"tag":284,"props":332,"children":333},{},[334],{"type":172,"value":335},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":166,"tag":180,"props":337,"children":338},{},[339],{"type":172,"value":340},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":166,"tag":180,"props":342,"children":343},{},[344],{"type":172,"value":345},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":166,"tag":180,"props":347,"children":348},{},[349],{"type":172,"value":350},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":166,"tag":180,"props":352,"children":353},{},[354],{"type":172,"value":355},"相关字符串字面量的一些冷知识：",{"type":166,"tag":280,"props":357,"children":358},{},[359,364,369],{"type":166,"tag":284,"props":360,"children":361},{},[362],{"type":172,"value":363},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":166,"tag":284,"props":365,"children":366},{},[367],{"type":172,"value":368},"空字符串也能作为对象的键。",{"type":166,"tag":284,"props":370,"children":371},{},[372],{"type":172,"value":373},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":166,"tag":174,"props":375,"children":377},{"id":376},"表达式运算",[378],{"type":172,"value":376},{"type":166,"tag":180,"props":380,"children":381},{},[382],{"type":172,"value":383},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":166,"tag":180,"props":385,"children":386},{},[387],{"type":172,"value":388},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":166,"tag":280,"props":390,"children":391},{},[392,397],{"type":166,"tag":284,"props":393,"children":394},{},[395],{"type":172,"value":396},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":166,"tag":284,"props":398,"children":399},{},[400],{"type":172,"value":401},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":166,"tag":180,"props":403,"children":404},{},[405],{"type":172,"value":406},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":166,"tag":180,"props":408,"children":409},{},[410],{"type":172,"value":411},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":166,"tag":180,"props":413,"children":414},{},[415],{"type":172,"value":416},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":166,"tag":180,"props":418,"children":419},{},[420],{"type":172,"value":421},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":166,"tag":191,"props":423,"children":427},{"className":424,"code":425,"language":426,"meta":160,"style":160},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[428],{"type":166,"tag":198,"props":429,"children":430},{"__ignoreMap":160},[431,493],{"type":166,"tag":202,"props":432,"children":433},{"class":204,"line":205},[434,440,446,452,457,462,468,473,478,482,487],{"type":166,"tag":202,"props":435,"children":437},{"style":436},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[438],{"type":172,"value":439},"Object",{"type":166,"tag":202,"props":441,"children":443},{"style":442},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[444],{"type":172,"value":445},".",{"type":166,"tag":202,"props":447,"children":449},{"style":448},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[450],{"type":172,"value":451},"is",{"type":166,"tag":202,"props":453,"children":454},{"style":436},[455],{"type":172,"value":456},"(",{"type":166,"tag":202,"props":458,"children":459},{"style":232},[460],{"type":172,"value":461},"+",{"type":166,"tag":202,"props":463,"children":465},{"style":464},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[466],{"type":172,"value":467},"0",{"type":166,"tag":202,"props":469,"children":470},{"style":442},[471],{"type":172,"value":472},",",{"type":166,"tag":202,"props":474,"children":475},{"style":232},[476],{"type":172,"value":477}," -",{"type":166,"tag":202,"props":479,"children":480},{"style":464},[481],{"type":172,"value":467},{"type":166,"tag":202,"props":483,"children":484},{"style":436},[485],{"type":172,"value":486},") ",{"type":166,"tag":202,"props":488,"children":490},{"style":489},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[491],{"type":172,"value":492},"// false\n",{"type":166,"tag":202,"props":494,"children":496},{"class":204,"line":495},2,[497,501,505,509,513,519,523,528,532],{"type":166,"tag":202,"props":498,"children":499},{"style":436},[500],{"type":172,"value":439},{"type":166,"tag":202,"props":502,"children":503},{"style":442},[504],{"type":172,"value":445},{"type":166,"tag":202,"props":506,"children":507},{"style":448},[508],{"type":172,"value":451},{"type":166,"tag":202,"props":510,"children":511},{"style":436},[512],{"type":172,"value":456},{"type":166,"tag":202,"props":514,"children":516},{"style":515},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[517],{"type":172,"value":518},"NaN",{"type":166,"tag":202,"props":520,"children":521},{"style":442},[522],{"type":172,"value":472},{"type":166,"tag":202,"props":524,"children":525},{"style":515},[526],{"type":172,"value":527}," NaN",{"type":166,"tag":202,"props":529,"children":530},{"style":436},[531],{"type":172,"value":486},{"type":166,"tag":202,"props":533,"children":534},{"style":489},[535],{"type":172,"value":536},"// true\n",{"type":166,"tag":180,"props":538,"children":539},{},[540],{"type":172,"value":541},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":166,"tag":180,"props":543,"children":544},{},[545],{"type":172,"value":546},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":166,"tag":191,"props":548,"children":550},{"className":424,"code":549,"language":426,"meta":160,"style":160},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[551],{"type":166,"tag":198,"props":552,"children":553},{"__ignoreMap":160},[554,580],{"type":166,"tag":202,"props":555,"children":556},{"class":204,"line":205},[557,562,566,571,576],{"type":166,"tag":202,"props":558,"children":559},{"style":448},[560],{"type":172,"value":561},"Boolean",{"type":166,"tag":202,"props":563,"children":564},{"style":436},[565],{"type":172,"value":456},{"type":166,"tag":202,"props":567,"children":568},{"style":448},[569],{"type":172,"value":570},"Symbol",{"type":166,"tag":202,"props":572,"children":573},{"style":436},[574],{"type":172,"value":575},"()) ",{"type":166,"tag":202,"props":577,"children":578},{"style":489},[579],{"type":172,"value":536},{"type":166,"tag":202,"props":581,"children":582},{"class":204,"line":495},[583,587,592,597,603],{"type":166,"tag":202,"props":584,"children":585},{"style":448},[586],{"type":172,"value":570},{"type":166,"tag":202,"props":588,"children":589},{"style":436},[590],{"type":172,"value":591},"() ",{"type":166,"tag":202,"props":593,"children":594},{"style":232},[595],{"type":172,"value":596},"==",{"type":166,"tag":202,"props":598,"children":600},{"style":599},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[601],{"type":172,"value":602}," true",{"type":166,"tag":202,"props":604,"children":605},{"style":489},[606],{"type":172,"value":607}," // false\n",{"type":166,"tag":180,"props":609,"children":610},{},[611],{"type":172,"value":612},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":166,"tag":191,"props":614,"children":616},{"className":193,"code":615,"language":195,"meta":160,"style":160},"echo \"1 = 1\" | node -c\n",[617],{"type":166,"tag":198,"props":618,"children":619},{"__ignoreMap":160},[620],{"type":166,"tag":202,"props":621,"children":622},{"class":204,"line":205},[623,627,632,637,642,646,650],{"type":166,"tag":202,"props":624,"children":625},{"style":209},[626],{"type":172,"value":212},{"type":166,"tag":202,"props":628,"children":629},{"style":215},[630],{"type":172,"value":631}," \"",{"type":166,"tag":202,"props":633,"children":634},{"style":221},[635],{"type":172,"value":636},"1 = 1",{"type":166,"tag":202,"props":638,"children":639},{"style":215},[640],{"type":172,"value":641},"\"",{"type":166,"tag":202,"props":643,"children":644},{"style":232},[645],{"type":172,"value":235},{"type":166,"tag":202,"props":647,"children":648},{"style":238},[649],{"type":172,"value":241},{"type":166,"tag":202,"props":651,"children":652},{"style":244},[653],{"type":172,"value":247},{"type":166,"tag":180,"props":655,"children":656},{},[657],{"type":172,"value":658},"函数调用也有“隐式调用”这一概念：",{"type":166,"tag":280,"props":660,"children":661},{},[662,667,672,677,682,687],{"type":166,"tag":284,"props":663,"children":664},{},[665],{"type":172,"value":666},"使用 new 运算符",{"type":166,"tag":284,"props":668,"children":669},{},[670],{"type":172,"value":671},"模板处理函数 + 模板字符串调用",{"type":166,"tag":284,"props":673,"children":674},{},[675],{"type":172,"value":676},"函数作为属性存取器且发生了属性存取操作时",{"type":166,"tag":284,"props":678,"children":679},{},[680],{"type":172,"value":681},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":166,"tag":284,"props":683,"children":684},{},[685],{"type":172,"value":686},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":166,"tag":284,"props":688,"children":689},{},[690],{"type":172,"value":691},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":166,"tag":180,"props":693,"children":694},{},[695],{"type":172,"value":696},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":166,"tag":180,"props":698,"children":699},{},[700],{"type":172,"value":701},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":166,"tag":191,"props":703,"children":705},{"className":424,"code":704,"language":426,"meta":160,"style":160},"typeof x // undefined\n",[706],{"type":166,"tag":198,"props":707,"children":708},{"__ignoreMap":160},[709],{"type":166,"tag":202,"props":710,"children":711},{"class":204,"line":205},[712,717,722],{"type":166,"tag":202,"props":713,"children":714},{"style":232},[715],{"type":172,"value":716},"typeof",{"type":166,"tag":202,"props":718,"children":719},{"style":436},[720],{"type":172,"value":721}," x ",{"type":166,"tag":202,"props":723,"children":724},{"style":489},[725],{"type":172,"value":726},"// undefined\n",{"type":166,"tag":180,"props":728,"children":729},{},[730],{"type":172,"value":731},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":166,"tag":191,"props":733,"children":735},{"className":424,"code":734,"language":426,"meta":160,"style":160},"typeof x // ReferenceError\nlet x\n",[736],{"type":166,"tag":198,"props":737,"children":738},{"__ignoreMap":160},[739,755],{"type":166,"tag":202,"props":740,"children":741},{"class":204,"line":205},[742,746,750],{"type":166,"tag":202,"props":743,"children":744},{"style":232},[745],{"type":172,"value":716},{"type":166,"tag":202,"props":747,"children":748},{"style":436},[749],{"type":172,"value":721},{"type":166,"tag":202,"props":751,"children":752},{"style":489},[753],{"type":172,"value":754},"// ReferenceError\n",{"type":166,"tag":202,"props":756,"children":757},{"class":204,"line":495},[758,764],{"type":166,"tag":202,"props":759,"children":761},{"style":760},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[762],{"type":172,"value":763},"let",{"type":166,"tag":202,"props":765,"children":766},{"style":436},[767],{"type":172,"value":768}," x\n",{"type":166,"tag":180,"props":770,"children":771},{},[772],{"type":172,"value":773},"完整的运算符优先级列表如下：",{"type":166,"tag":775,"props":776,"children":777},"table",{},[778,797],{"type":166,"tag":779,"props":780,"children":781},"thead",{},[782],{"type":166,"tag":783,"props":784,"children":785},"tr",{},[786,792],{"type":166,"tag":787,"props":788,"children":789},"th",{},[790],{"type":172,"value":791},"运算符",{"type":166,"tag":787,"props":793,"children":794},{},[795],{"type":172,"value":796},"描述",{"type":166,"tag":798,"props":799,"children":800},"tbody",{},[801,815,833,846,859,872,885,898,911,924,937,950,963,976,989,1002,1015,1028,1041,1054],{"type":166,"tag":783,"props":802,"children":803},{},[804,810],{"type":166,"tag":805,"props":806,"children":807},"td",{},[808],{"type":172,"value":809},"()",{"type":166,"tag":805,"props":811,"children":812},{},[813],{"type":172,"value":814},"成组运算",{"type":166,"tag":783,"props":816,"children":817},{},[818,828],{"type":166,"tag":805,"props":819,"children":820},{},[821,823,826],{"type":172,"value":822},".、",{"type":166,"tag":202,"props":824,"children":825},{},[],{"type":172,"value":827},"、new ()",{"type":166,"tag":805,"props":829,"children":830},{},[831],{"type":172,"value":832},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":166,"tag":783,"props":834,"children":835},{},[836,841],{"type":166,"tag":805,"props":837,"children":838},{},[839],{"type":172,"value":840},"()、new",{"type":166,"tag":805,"props":842,"children":843},{},[844],{"type":172,"value":845},"函数调用、new 运算符",{"type":166,"tag":783,"props":847,"children":848},{},[849,854],{"type":166,"tag":805,"props":850,"children":851},{},[852],{"type":172,"value":853},"++、--",{"type":166,"tag":805,"props":855,"children":856},{},[857],{"type":172,"value":858},"后置递增、后置递减",{"type":166,"tag":783,"props":860,"children":861},{},[862,867],{"type":166,"tag":805,"props":863,"children":864},{},[865],{"type":172,"value":866},"+、-、++、--、~、!、delete、typeof、void",{"type":166,"tag":805,"props":868,"children":869},{},[870],{"type":172,"value":871},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":166,"tag":783,"props":873,"children":874},{},[875,880],{"type":166,"tag":805,"props":876,"children":877},{},[878],{"type":172,"value":879},"*、/、%",{"type":166,"tag":805,"props":881,"children":882},{},[883],{"type":172,"value":884},"乘法、除法、取模",{"type":166,"tag":783,"props":886,"children":887},{},[888,893],{"type":166,"tag":805,"props":889,"children":890},{},[891],{"type":172,"value":892},"+、-、+",{"type":166,"tag":805,"props":894,"children":895},{},[896],{"type":172,"value":897},"加法、减法、字符串连接",{"type":166,"tag":783,"props":899,"children":900},{},[901,906],{"type":166,"tag":805,"props":902,"children":903},{},[904],{"type":172,"value":905},"\u003C\u003C、>>、>>>",{"type":166,"tag":805,"props":907,"children":908},{},[909],{"type":172,"value":910},"移位运算符",{"type":166,"tag":783,"props":912,"children":913},{},[914,919],{"type":166,"tag":805,"props":915,"children":916},{},[917],{"type":172,"value":918},"\u003C、\u003C=、>=、>、in、instanceof",{"type":166,"tag":805,"props":920,"children":921},{},[922],{"type":172,"value":923},"关系运算符、in、instanceof",{"type":166,"tag":783,"props":925,"children":926},{},[927,932],{"type":166,"tag":805,"props":928,"children":929},{},[930],{"type":172,"value":931},"==、!=、===、!==",{"type":166,"tag":805,"props":933,"children":934},{},[935],{"type":172,"value":936},"等值检测",{"type":166,"tag":783,"props":938,"children":939},{},[940,945],{"type":166,"tag":805,"props":941,"children":942},{},[943],{"type":172,"value":944},"&",{"type":166,"tag":805,"props":946,"children":947},{},[948],{"type":172,"value":949},"按位与",{"type":166,"tag":783,"props":951,"children":952},{},[953,958],{"type":166,"tag":805,"props":954,"children":955},{},[956],{"type":172,"value":957},"^",{"type":166,"tag":805,"props":959,"children":960},{},[961],{"type":172,"value":962},"按位异或",{"type":166,"tag":783,"props":964,"children":965},{},[966,971],{"type":166,"tag":805,"props":967,"children":968},{},[969],{"type":172,"value":970},"|",{"type":166,"tag":805,"props":972,"children":973},{},[974],{"type":172,"value":975},"按位或",{"type":166,"tag":783,"props":977,"children":978},{},[979,984],{"type":166,"tag":805,"props":980,"children":981},{},[982],{"type":172,"value":983},"&&",{"type":166,"tag":805,"props":985,"children":986},{},[987],{"type":172,"value":988},"逻辑与",{"type":166,"tag":783,"props":990,"children":991},{},[992,997],{"type":166,"tag":805,"props":993,"children":994},{},[995],{"type":172,"value":996},"||",{"type":166,"tag":805,"props":998,"children":999},{},[1000],{"type":172,"value":1001},"逻辑或",{"type":166,"tag":783,"props":1003,"children":1004},{},[1005,1010],{"type":166,"tag":805,"props":1006,"children":1007},{},[1008],{"type":172,"value":1009},"?:",{"type":166,"tag":805,"props":1011,"children":1012},{},[1013],{"type":172,"value":1014},"三木运算",{"type":166,"tag":783,"props":1016,"children":1017},{},[1018,1023],{"type":166,"tag":805,"props":1019,"children":1020},{},[1021],{"type":172,"value":1022},"=、oP=",{"type":166,"tag":805,"props":1024,"children":1025},{},[1026],{"type":172,"value":1027},"赋值、运算赋值",{"type":166,"tag":783,"props":1029,"children":1030},{},[1031,1036],{"type":166,"tag":805,"props":1032,"children":1033},{},[1034],{"type":172,"value":1035},"yield、yield*",{"type":166,"tag":805,"props":1037,"children":1038},{},[1039],{"type":172,"value":1040},"yield 表达式",{"type":166,"tag":783,"props":1042,"children":1043},{},[1044,1049],{"type":166,"tag":805,"props":1045,"children":1046},{},[1047],{"type":172,"value":1048},"...",{"type":166,"tag":805,"props":1050,"children":1051},{},[1052],{"type":172,"value":1053},"展开运算符",{"type":166,"tag":783,"props":1055,"children":1056},{},[1057,1062],{"type":166,"tag":805,"props":1058,"children":1059},{},[1060],{"type":172,"value":1061},"，",{"type":166,"tag":805,"props":1063,"children":1064},{},[1065],{"type":172,"value":1066},"逗号运算符、多重求值",{"type":166,"tag":180,"props":1068,"children":1069},{},[1070],{"type":172,"value":1071},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":166,"tag":191,"props":1073,"children":1075},{"className":424,"code":1074,"language":426,"meta":160,"style":160},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1076],{"type":166,"tag":198,"props":1077,"children":1078},{"__ignoreMap":160},[1079,1102,1138,1179,1188,1223,1260,1268,1295],{"type":166,"tag":202,"props":1080,"children":1081},{"class":204,"line":205},[1082,1087,1092,1097],{"type":166,"tag":202,"props":1083,"children":1084},{"style":760},[1085],{"type":172,"value":1086},"function",{"type":166,"tag":202,"props":1088,"children":1089},{"style":448},[1090],{"type":172,"value":1091}," A",{"type":166,"tag":202,"props":1093,"children":1094},{"style":442},[1095],{"type":172,"value":1096}," ()",{"type":166,"tag":202,"props":1098,"children":1099},{"style":442},[1100],{"type":172,"value":1101}," {\n",{"type":166,"tag":202,"props":1103,"children":1104},{"class":204,"line":495},[1105,1111,1115,1120,1125,1129,1133],{"type":166,"tag":202,"props":1106,"children":1108},{"style":1107},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1109],{"type":172,"value":1110},"  this",{"type":166,"tag":202,"props":1112,"children":1113},{"style":442},[1114],{"type":172,"value":445},{"type":166,"tag":202,"props":1116,"children":1117},{"style":436},[1118],{"type":172,"value":1119},"b",{"type":166,"tag":202,"props":1121,"children":1122},{"style":232},[1123],{"type":172,"value":1124}," =",{"type":166,"tag":202,"props":1126,"children":1127},{"style":215},[1128],{"type":172,"value":218},{"type":166,"tag":202,"props":1130,"children":1131},{"style":221},[1132],{"type":172,"value":1119},{"type":166,"tag":202,"props":1134,"children":1135},{"style":215},[1136],{"type":172,"value":1137},"'\n",{"type":166,"tag":202,"props":1139,"children":1141},{"class":204,"line":1140},3,[1142,1147,1151,1156,1161,1165,1170,1174],{"type":166,"tag":202,"props":1143,"children":1144},{"style":436},[1145],{"type":172,"value":1146},"  console",{"type":166,"tag":202,"props":1148,"children":1149},{"style":442},[1150],{"type":172,"value":445},{"type":166,"tag":202,"props":1152,"children":1153},{"style":448},[1154],{"type":172,"value":1155},"log",{"type":166,"tag":202,"props":1157,"children":1159},{"style":1158},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1160],{"type":172,"value":456},{"type":166,"tag":202,"props":1162,"children":1163},{"style":215},[1164],{"type":172,"value":229},{"type":166,"tag":202,"props":1166,"children":1167},{"style":221},[1168],{"type":172,"value":1169},"A().b",{"type":166,"tag":202,"props":1171,"children":1172},{"style":215},[1173],{"type":172,"value":229},{"type":166,"tag":202,"props":1175,"children":1176},{"style":1158},[1177],{"type":172,"value":1178},")\n",{"type":166,"tag":202,"props":1180,"children":1182},{"class":204,"line":1181},4,[1183],{"type":166,"tag":202,"props":1184,"children":1185},{"style":442},[1186],{"type":172,"value":1187},"}\n",{"type":166,"tag":202,"props":1189,"children":1191},{"class":204,"line":1190},5,[1192,1198,1202,1206,1210,1215,1219],{"type":166,"tag":202,"props":1193,"children":1195},{"style":1194},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1196],{"type":172,"value":1197},"A",{"type":166,"tag":202,"props":1199,"children":1200},{"style":442},[1201],{"type":172,"value":445},{"type":166,"tag":202,"props":1203,"children":1204},{"style":448},[1205],{"type":172,"value":1119},{"type":166,"tag":202,"props":1207,"children":1208},{"style":232},[1209],{"type":172,"value":1124},{"type":166,"tag":202,"props":1211,"children":1212},{"style":760},[1213],{"type":172,"value":1214}," function",{"type":166,"tag":202,"props":1216,"children":1217},{"style":442},[1218],{"type":172,"value":1096},{"type":166,"tag":202,"props":1220,"children":1221},{"style":442},[1222],{"type":172,"value":1101},{"type":166,"tag":202,"props":1224,"children":1226},{"class":204,"line":1225},6,[1227,1231,1235,1239,1243,1247,1252,1256],{"type":166,"tag":202,"props":1228,"children":1229},{"style":436},[1230],{"type":172,"value":1146},{"type":166,"tag":202,"props":1232,"children":1233},{"style":442},[1234],{"type":172,"value":445},{"type":166,"tag":202,"props":1236,"children":1237},{"style":448},[1238],{"type":172,"value":1155},{"type":166,"tag":202,"props":1240,"children":1241},{"style":1158},[1242],{"type":172,"value":456},{"type":166,"tag":202,"props":1244,"children":1245},{"style":215},[1246],{"type":172,"value":229},{"type":166,"tag":202,"props":1248,"children":1249},{"style":221},[1250],{"type":172,"value":1251},"A.b",{"type":166,"tag":202,"props":1253,"children":1254},{"style":215},[1255],{"type":172,"value":229},{"type":166,"tag":202,"props":1257,"children":1258},{"style":1158},[1259],{"type":172,"value":1178},{"type":166,"tag":202,"props":1261,"children":1263},{"class":204,"line":1262},7,[1264],{"type":166,"tag":202,"props":1265,"children":1266},{"style":442},[1267],{"type":172,"value":1187},{"type":166,"tag":202,"props":1269,"children":1271},{"class":204,"line":1270},8,[1272,1277,1281,1285,1290],{"type":166,"tag":202,"props":1273,"children":1274},{"style":232},[1275],{"type":172,"value":1276},"new",{"type":166,"tag":202,"props":1278,"children":1279},{"style":1194},[1280],{"type":172,"value":1091},{"type":166,"tag":202,"props":1282,"children":1283},{"style":442},[1284],{"type":172,"value":445},{"type":166,"tag":202,"props":1286,"children":1287},{"style":436},[1288],{"type":172,"value":1289},"b ",{"type":166,"tag":202,"props":1291,"children":1292},{"style":489},[1293],{"type":172,"value":1294},"// A.b\n",{"type":166,"tag":202,"props":1296,"children":1298},{"class":204,"line":1297},9,[1299,1303,1307,1311,1315,1319],{"type":166,"tag":202,"props":1300,"children":1301},{"style":232},[1302],{"type":172,"value":1276},{"type":166,"tag":202,"props":1304,"children":1305},{"style":448},[1306],{"type":172,"value":1091},{"type":166,"tag":202,"props":1308,"children":1309},{"style":436},[1310],{"type":172,"value":809},{"type":166,"tag":202,"props":1312,"children":1313},{"style":442},[1314],{"type":172,"value":445},{"type":166,"tag":202,"props":1316,"children":1317},{"style":436},[1318],{"type":172,"value":1289},{"type":166,"tag":202,"props":1320,"children":1321},{"style":489},[1322],{"type":172,"value":1323},"// A().b\n",{"type":166,"tag":174,"props":1325,"children":1327},{"id":1326},"语句",[1328],{"type":172,"value":1326},{"type":166,"tag":180,"props":1330,"children":1331},{},[1332],{"type":172,"value":1333},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":166,"tag":180,"props":1335,"children":1336},{},[1337],{"type":172,"value":1338},"需要注意的点：",{"type":166,"tag":280,"props":1340,"children":1341},{},[1342,1347,1352],{"type":166,"tag":284,"props":1343,"children":1344},{},[1345],{"type":172,"value":1346},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":166,"tag":284,"props":1348,"children":1349},{},[1350],{"type":172,"value":1351},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":166,"tag":284,"props":1353,"children":1354},{},[1355],{"type":172,"value":1356},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":166,"tag":180,"props":1358,"children":1359},{},[1360],{"type":172,"value":1361},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":166,"tag":191,"props":1363,"children":1365},{"className":424,"code":1364,"language":426,"meta":160,"style":160},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1366],{"type":166,"tag":198,"props":1367,"children":1368},{"__ignoreMap":160},[1369,1400,1427],{"type":166,"tag":202,"props":1370,"children":1371},{"class":204,"line":205},[1372,1376,1381,1385,1391,1396],{"type":166,"tag":202,"props":1373,"children":1374},{"style":760},[1375],{"type":172,"value":1086},{"type":166,"tag":202,"props":1377,"children":1378},{"style":448},[1379],{"type":172,"value":1380}," log",{"type":166,"tag":202,"props":1382,"children":1383},{"style":442},[1384],{"type":172,"value":456},{"type":166,"tag":202,"props":1386,"children":1388},{"style":1387},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1389],{"type":172,"value":1390},"arg",{"type":166,"tag":202,"props":1392,"children":1393},{"style":442},[1394],{"type":172,"value":1395},")",{"type":166,"tag":202,"props":1397,"children":1398},{"style":442},[1399],{"type":172,"value":1101},{"type":166,"tag":202,"props":1401,"children":1402},{"class":204,"line":495},[1403,1407,1411,1415,1419,1423],{"type":166,"tag":202,"props":1404,"children":1405},{"style":436},[1406],{"type":172,"value":1146},{"type":166,"tag":202,"props":1408,"children":1409},{"style":442},[1410],{"type":172,"value":445},{"type":166,"tag":202,"props":1412,"children":1413},{"style":448},[1414],{"type":172,"value":1155},{"type":166,"tag":202,"props":1416,"children":1417},{"style":1158},[1418],{"type":172,"value":456},{"type":166,"tag":202,"props":1420,"children":1421},{"style":436},[1422],{"type":172,"value":1390},{"type":166,"tag":202,"props":1424,"children":1425},{"style":1158},[1426],{"type":172,"value":1178},{"type":166,"tag":202,"props":1428,"children":1429},{"class":204,"line":1140},[1430,1435,1439,1443],{"type":166,"tag":202,"props":1431,"children":1432},{"style":442},[1433],{"type":172,"value":1434},"}",{"type":166,"tag":202,"props":1436,"children":1437},{"style":436},[1438],{"type":172,"value":456},{"type":166,"tag":202,"props":1440,"children":1441},{"style":464},[1442],{"type":172,"value":299},{"type":166,"tag":202,"props":1444,"children":1445},{"style":436},[1446],{"type":172,"value":1178},{"type":166,"tag":180,"props":1448,"children":1449},{},[1450],{"type":172,"value":1451},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":166,"tag":191,"props":1453,"children":1455},{"className":424,"code":1454,"language":426,"meta":160,"style":160},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1456],{"type":166,"tag":198,"props":1457,"children":1458},{"__ignoreMap":160},[1459,1511,1549,1576],{"type":166,"tag":202,"props":1460,"children":1461},{"class":204,"line":205},[1462,1468,1473,1478,1482,1487,1491,1496,1501,1506],{"type":166,"tag":202,"props":1463,"children":1465},{"style":1464},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1466],{"type":172,"value":1467},"try",{"type":166,"tag":202,"props":1469,"children":1470},{"style":442},[1471],{"type":172,"value":1472}," {",{"type":166,"tag":202,"props":1474,"children":1475},{"style":1464},[1476],{"type":172,"value":1477}," throw",{"type":166,"tag":202,"props":1479,"children":1480},{"style":215},[1481],{"type":172,"value":218},{"type":166,"tag":202,"props":1483,"children":1484},{"style":221},[1485],{"type":172,"value":1486},"test",{"type":166,"tag":202,"props":1488,"children":1489},{"style":215},[1490],{"type":172,"value":229},{"type":166,"tag":202,"props":1492,"children":1493},{"style":442},[1494],{"type":172,"value":1495}," }",{"type":166,"tag":202,"props":1497,"children":1498},{"style":1464},[1499],{"type":172,"value":1500}," catch",{"type":166,"tag":202,"props":1502,"children":1503},{"style":436},[1504],{"type":172,"value":1505}," (e) ",{"type":166,"tag":202,"props":1507,"children":1508},{"style":442},[1509],{"type":172,"value":1510},"{\n",{"type":166,"tag":202,"props":1512,"children":1513},{"class":204,"line":495},[1514,1518,1522,1526,1530,1535,1539,1544],{"type":166,"tag":202,"props":1515,"children":1516},{"style":436},[1517],{"type":172,"value":1146},{"type":166,"tag":202,"props":1519,"children":1520},{"style":442},[1521],{"type":172,"value":445},{"type":166,"tag":202,"props":1523,"children":1524},{"style":448},[1525],{"type":172,"value":1155},{"type":166,"tag":202,"props":1527,"children":1528},{"style":1158},[1529],{"type":172,"value":456},{"type":166,"tag":202,"props":1531,"children":1532},{"style":436},[1533],{"type":172,"value":1534},"e",{"type":166,"tag":202,"props":1536,"children":1537},{"style":1158},[1538],{"type":172,"value":1395},{"type":166,"tag":202,"props":1540,"children":1541},{"style":442},[1542],{"type":172,"value":1543},";",{"type":166,"tag":202,"props":1545,"children":1546},{"style":489},[1547],{"type":172,"value":1548}," // test\n",{"type":166,"tag":202,"props":1550,"children":1551},{"class":204,"line":1140},[1552,1557,1562,1566,1571],{"type":166,"tag":202,"props":1553,"children":1554},{"style":760},[1555],{"type":172,"value":1556},"  var",{"type":166,"tag":202,"props":1558,"children":1559},{"style":436},[1560],{"type":172,"value":1561}," e",{"type":166,"tag":202,"props":1563,"children":1564},{"style":232},[1565],{"type":172,"value":1124},{"type":166,"tag":202,"props":1567,"children":1568},{"style":464},[1569],{"type":172,"value":1570}," 1",{"type":166,"tag":202,"props":1572,"children":1573},{"style":442},[1574],{"type":172,"value":1575},";\n",{"type":166,"tag":202,"props":1577,"children":1578},{"class":204,"line":1181},[1579],{"type":166,"tag":202,"props":1580,"children":1581},{"style":442},[1582],{"type":172,"value":1187},{"type":166,"tag":180,"props":1584,"children":1585},{},[1586],{"type":172,"value":1587},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":166,"tag":180,"props":1589,"children":1590},{},[1591],{"type":172,"value":1592},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":166,"tag":191,"props":1594,"children":1596},{"className":424,"code":1595,"language":426,"meta":160,"style":160},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1597],{"type":166,"tag":198,"props":1598,"children":1599},{"__ignoreMap":160},[1600,1608,1681,1747,1791,1833,1841,1848,1856,1871,1931,1992,2033,2074,2083,2091],{"type":166,"tag":202,"props":1601,"children":1602},{"class":204,"line":205},[1603],{"type":166,"tag":202,"props":1604,"children":1605},{"style":489},[1606],{"type":172,"value":1607},"// it works !\n",{"type":166,"tag":202,"props":1609,"children":1610},{"class":204,"line":495},[1611,1616,1621,1626,1631,1636,1640,1644,1649,1654,1659,1663,1668,1673,1677],{"type":166,"tag":202,"props":1612,"children":1614},{"style":1613},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1615],{"type":172,"value":1486},{"type":166,"tag":202,"props":1617,"children":1618},{"style":442},[1619],{"type":172,"value":1620},":",{"type":166,"tag":202,"props":1622,"children":1623},{"style":1464},[1624],{"type":172,"value":1625}," for",{"type":166,"tag":202,"props":1627,"children":1628},{"style":436},[1629],{"type":172,"value":1630}," (i ",{"type":166,"tag":202,"props":1632,"children":1633},{"style":232},[1634],{"type":172,"value":1635},"=",{"type":166,"tag":202,"props":1637,"children":1638},{"style":464},[1639],{"type":172,"value":1570},{"type":166,"tag":202,"props":1641,"children":1642},{"style":442},[1643],{"type":172,"value":1543},{"type":166,"tag":202,"props":1645,"children":1646},{"style":436},[1647],{"type":172,"value":1648}," i ",{"type":166,"tag":202,"props":1650,"children":1651},{"style":232},[1652],{"type":172,"value":1653},"\u003C",{"type":166,"tag":202,"props":1655,"children":1656},{"style":464},[1657],{"type":172,"value":1658}," 3",{"type":166,"tag":202,"props":1660,"children":1661},{"style":442},[1662],{"type":172,"value":1543},{"type":166,"tag":202,"props":1664,"children":1665},{"style":436},[1666],{"type":172,"value":1667}," i",{"type":166,"tag":202,"props":1669,"children":1670},{"style":232},[1671],{"type":172,"value":1672},"++",{"type":166,"tag":202,"props":1674,"children":1675},{"style":436},[1676],{"type":172,"value":486},{"type":166,"tag":202,"props":1678,"children":1679},{"style":442},[1680],{"type":172,"value":1510},{"type":166,"tag":202,"props":1682,"children":1683},{"class":204,"line":1140},[1684,1689,1694,1699,1703,1708,1712,1717,1722,1727,1731,1735,1739,1743],{"type":166,"tag":202,"props":1685,"children":1686},{"style":1464},[1687],{"type":172,"value":1688},"  for",{"type":166,"tag":202,"props":1690,"children":1691},{"style":1158},[1692],{"type":172,"value":1693}," (",{"type":166,"tag":202,"props":1695,"children":1696},{"style":436},[1697],{"type":172,"value":1698},"j",{"type":166,"tag":202,"props":1700,"children":1701},{"style":232},[1702],{"type":172,"value":1124},{"type":166,"tag":202,"props":1704,"children":1705},{"style":464},[1706],{"type":172,"value":1707}," 5",{"type":166,"tag":202,"props":1709,"children":1710},{"style":442},[1711],{"type":172,"value":1543},{"type":166,"tag":202,"props":1713,"children":1714},{"style":436},[1715],{"type":172,"value":1716}," j",{"type":166,"tag":202,"props":1718,"children":1719},{"style":232},[1720],{"type":172,"value":1721}," \u003C",{"type":166,"tag":202,"props":1723,"children":1724},{"style":464},[1725],{"type":172,"value":1726}," 8",{"type":166,"tag":202,"props":1728,"children":1729},{"style":442},[1730],{"type":172,"value":1543},{"type":166,"tag":202,"props":1732,"children":1733},{"style":436},[1734],{"type":172,"value":1716},{"type":166,"tag":202,"props":1736,"children":1737},{"style":232},[1738],{"type":172,"value":1672},{"type":166,"tag":202,"props":1740,"children":1741},{"style":1158},[1742],{"type":172,"value":486},{"type":166,"tag":202,"props":1744,"children":1745},{"style":442},[1746],{"type":172,"value":1510},{"type":166,"tag":202,"props":1748,"children":1749},{"class":204,"line":1181},[1750,1755,1759,1763,1768,1773,1777,1782,1787],{"type":166,"tag":202,"props":1751,"children":1752},{"style":1464},[1753],{"type":172,"value":1754},"    if",{"type":166,"tag":202,"props":1756,"children":1757},{"style":1158},[1758],{"type":172,"value":1693},{"type":166,"tag":202,"props":1760,"children":1761},{"style":436},[1762],{"type":172,"value":1698},{"type":166,"tag":202,"props":1764,"children":1765},{"style":232},[1766],{"type":172,"value":1767}," ===",{"type":166,"tag":202,"props":1769,"children":1770},{"style":464},[1771],{"type":172,"value":1772}," 6",{"type":166,"tag":202,"props":1774,"children":1775},{"style":1158},[1776],{"type":172,"value":486},{"type":166,"tag":202,"props":1778,"children":1779},{"style":1464},[1780],{"type":172,"value":1781},"continue",{"type":166,"tag":202,"props":1783,"children":1784},{"style":1613},[1785],{"type":172,"value":1786}," test",{"type":166,"tag":202,"props":1788,"children":1789},{"style":442},[1790],{"type":172,"value":1575},{"type":166,"tag":202,"props":1792,"children":1793},{"class":204,"line":1190},[1794,1799,1804,1808,1812,1816,1821,1825,1829],{"type":166,"tag":202,"props":1795,"children":1796},{"style":1464},[1797],{"type":172,"value":1798},"    else",{"type":166,"tag":202,"props":1800,"children":1801},{"style":436},[1802],{"type":172,"value":1803}," console",{"type":166,"tag":202,"props":1805,"children":1806},{"style":442},[1807],{"type":172,"value":445},{"type":166,"tag":202,"props":1809,"children":1810},{"style":448},[1811],{"type":172,"value":1155},{"type":166,"tag":202,"props":1813,"children":1814},{"style":1158},[1815],{"type":172,"value":456},{"type":166,"tag":202,"props":1817,"children":1818},{"style":436},[1819],{"type":172,"value":1820},"i",{"type":166,"tag":202,"props":1822,"children":1823},{"style":442},[1824],{"type":172,"value":472},{"type":166,"tag":202,"props":1826,"children":1827},{"style":436},[1828],{"type":172,"value":1716},{"type":166,"tag":202,"props":1830,"children":1831},{"style":1158},[1832],{"type":172,"value":1178},{"type":166,"tag":202,"props":1834,"children":1835},{"class":204,"line":1225},[1836],{"type":166,"tag":202,"props":1837,"children":1838},{"style":442},[1839],{"type":172,"value":1840},"  }\n",{"type":166,"tag":202,"props":1842,"children":1843},{"class":204,"line":1262},[1844],{"type":166,"tag":202,"props":1845,"children":1846},{"style":442},[1847],{"type":172,"value":1187},{"type":166,"tag":202,"props":1849,"children":1850},{"class":204,"line":1270},[1851],{"type":166,"tag":202,"props":1852,"children":1853},{"style":489},[1854],{"type":172,"value":1855},"// SyntaxError !\n",{"type":166,"tag":202,"props":1857,"children":1858},{"class":204,"line":1297},[1859,1863,1867],{"type":166,"tag":202,"props":1860,"children":1861},{"style":1613},[1862],{"type":172,"value":1486},{"type":166,"tag":202,"props":1864,"children":1865},{"style":442},[1866],{"type":172,"value":1620},{"type":166,"tag":202,"props":1868,"children":1869},{"style":442},[1870],{"type":172,"value":1101},{"type":166,"tag":202,"props":1872,"children":1874},{"class":204,"line":1873},10,[1875,1879,1883,1887,1891,1895,1899,1903,1907,1911,1915,1919,1923,1927],{"type":166,"tag":202,"props":1876,"children":1877},{"style":1464},[1878],{"type":172,"value":1688},{"type":166,"tag":202,"props":1880,"children":1881},{"style":1158},[1882],{"type":172,"value":1693},{"type":166,"tag":202,"props":1884,"children":1885},{"style":436},[1886],{"type":172,"value":1820},{"type":166,"tag":202,"props":1888,"children":1889},{"style":232},[1890],{"type":172,"value":1124},{"type":166,"tag":202,"props":1892,"children":1893},{"style":464},[1894],{"type":172,"value":1570},{"type":166,"tag":202,"props":1896,"children":1897},{"style":442},[1898],{"type":172,"value":1543},{"type":166,"tag":202,"props":1900,"children":1901},{"style":436},[1902],{"type":172,"value":1667},{"type":166,"tag":202,"props":1904,"children":1905},{"style":232},[1906],{"type":172,"value":1721},{"type":166,"tag":202,"props":1908,"children":1909},{"style":464},[1910],{"type":172,"value":1658},{"type":166,"tag":202,"props":1912,"children":1913},{"style":442},[1914],{"type":172,"value":1543},{"type":166,"tag":202,"props":1916,"children":1917},{"style":436},[1918],{"type":172,"value":1667},{"type":166,"tag":202,"props":1920,"children":1921},{"style":232},[1922],{"type":172,"value":1672},{"type":166,"tag":202,"props":1924,"children":1925},{"style":1158},[1926],{"type":172,"value":486},{"type":166,"tag":202,"props":1928,"children":1929},{"style":442},[1930],{"type":172,"value":1510},{"type":166,"tag":202,"props":1932,"children":1934},{"class":204,"line":1933},11,[1935,1940,1944,1948,1952,1956,1960,1964,1968,1972,1976,1980,1984,1988],{"type":166,"tag":202,"props":1936,"children":1937},{"style":1464},[1938],{"type":172,"value":1939},"    for",{"type":166,"tag":202,"props":1941,"children":1942},{"style":1158},[1943],{"type":172,"value":1693},{"type":166,"tag":202,"props":1945,"children":1946},{"style":436},[1947],{"type":172,"value":1698},{"type":166,"tag":202,"props":1949,"children":1950},{"style":232},[1951],{"type":172,"value":1124},{"type":166,"tag":202,"props":1953,"children":1954},{"style":464},[1955],{"type":172,"value":1707},{"type":166,"tag":202,"props":1957,"children":1958},{"style":442},[1959],{"type":172,"value":1543},{"type":166,"tag":202,"props":1961,"children":1962},{"style":436},[1963],{"type":172,"value":1716},{"type":166,"tag":202,"props":1965,"children":1966},{"style":232},[1967],{"type":172,"value":1721},{"type":166,"tag":202,"props":1969,"children":1970},{"style":464},[1971],{"type":172,"value":1726},{"type":166,"tag":202,"props":1973,"children":1974},{"style":442},[1975],{"type":172,"value":1543},{"type":166,"tag":202,"props":1977,"children":1978},{"style":436},[1979],{"type":172,"value":1716},{"type":166,"tag":202,"props":1981,"children":1982},{"style":232},[1983],{"type":172,"value":1672},{"type":166,"tag":202,"props":1985,"children":1986},{"style":1158},[1987],{"type":172,"value":486},{"type":166,"tag":202,"props":1989,"children":1990},{"style":442},[1991],{"type":172,"value":1510},{"type":166,"tag":202,"props":1993,"children":1995},{"class":204,"line":1994},12,[1996,2001,2005,2009,2013,2017,2021,2025,2029],{"type":166,"tag":202,"props":1997,"children":1998},{"style":1464},[1999],{"type":172,"value":2000},"      if",{"type":166,"tag":202,"props":2002,"children":2003},{"style":1158},[2004],{"type":172,"value":1693},{"type":166,"tag":202,"props":2006,"children":2007},{"style":436},[2008],{"type":172,"value":1698},{"type":166,"tag":202,"props":2010,"children":2011},{"style":232},[2012],{"type":172,"value":1767},{"type":166,"tag":202,"props":2014,"children":2015},{"style":464},[2016],{"type":172,"value":1772},{"type":166,"tag":202,"props":2018,"children":2019},{"style":1158},[2020],{"type":172,"value":486},{"type":166,"tag":202,"props":2022,"children":2023},{"style":1464},[2024],{"type":172,"value":1781},{"type":166,"tag":202,"props":2026,"children":2027},{"style":1613},[2028],{"type":172,"value":1786},{"type":166,"tag":202,"props":2030,"children":2031},{"style":442},[2032],{"type":172,"value":1575},{"type":166,"tag":202,"props":2034,"children":2036},{"class":204,"line":2035},13,[2037,2042,2046,2050,2054,2058,2062,2066,2070],{"type":166,"tag":202,"props":2038,"children":2039},{"style":1464},[2040],{"type":172,"value":2041},"      else",{"type":166,"tag":202,"props":2043,"children":2044},{"style":436},[2045],{"type":172,"value":1803},{"type":166,"tag":202,"props":2047,"children":2048},{"style":442},[2049],{"type":172,"value":445},{"type":166,"tag":202,"props":2051,"children":2052},{"style":448},[2053],{"type":172,"value":1155},{"type":166,"tag":202,"props":2055,"children":2056},{"style":1158},[2057],{"type":172,"value":456},{"type":166,"tag":202,"props":2059,"children":2060},{"style":436},[2061],{"type":172,"value":1820},{"type":166,"tag":202,"props":2063,"children":2064},{"style":442},[2065],{"type":172,"value":472},{"type":166,"tag":202,"props":2067,"children":2068},{"style":436},[2069],{"type":172,"value":1716},{"type":166,"tag":202,"props":2071,"children":2072},{"style":1158},[2073],{"type":172,"value":1178},{"type":166,"tag":202,"props":2075,"children":2077},{"class":204,"line":2076},14,[2078],{"type":166,"tag":202,"props":2079,"children":2080},{"style":442},[2081],{"type":172,"value":2082},"    }\n",{"type":166,"tag":202,"props":2084,"children":2086},{"class":204,"line":2085},15,[2087],{"type":166,"tag":202,"props":2088,"children":2089},{"style":442},[2090],{"type":172,"value":1840},{"type":166,"tag":202,"props":2092,"children":2094},{"class":204,"line":2093},16,[2095],{"type":166,"tag":202,"props":2096,"children":2097},{"style":442},[2098],{"type":172,"value":1187},{"type":166,"tag":180,"props":2100,"children":2101},{},[2102],{"type":172,"value":2103},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":166,"tag":180,"props":2105,"children":2106},{},[2107],{"type":172,"value":2108},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":166,"tag":174,"props":2110,"children":2112},{"id":2111},"模块",[2113],{"type":172,"value":2111},{"type":166,"tag":180,"props":2115,"children":2116},{},[2117],{"type":172,"value":2118},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":166,"tag":191,"props":2120,"children":2122},{"className":424,"code":2121,"language":426,"meta":160,"style":160},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2123],{"type":166,"tag":198,"props":2124,"children":2125},{"__ignoreMap":160},[2126,2174],{"type":166,"tag":202,"props":2127,"children":2128},{"class":204,"line":205},[2129,2134,2139,2143,2147,2152,2156,2161,2165,2170],{"type":166,"tag":202,"props":2130,"children":2131},{"style":1464},[2132],{"type":172,"value":2133},"import",{"type":166,"tag":202,"props":2135,"children":2136},{"style":436},[2137],{"type":172,"value":2138}," defaultExport",{"type":166,"tag":202,"props":2140,"children":2141},{"style":442},[2142],{"type":172,"value":472},{"type":166,"tag":202,"props":2144,"children":2145},{"style":442},[2146],{"type":172,"value":1472},{"type":166,"tag":202,"props":2148,"children":2149},{"style":436},[2150],{"type":172,"value":2151}," toolA",{"type":166,"tag":202,"props":2153,"children":2154},{"style":442},[2155],{"type":172,"value":1495},{"type":166,"tag":202,"props":2157,"children":2158},{"style":1464},[2159],{"type":172,"value":2160}," from",{"type":166,"tag":202,"props":2162,"children":2163},{"style":215},[2164],{"type":172,"value":218},{"type":166,"tag":202,"props":2166,"children":2167},{"style":221},[2168],{"type":172,"value":2169},"test.mjs",{"type":166,"tag":202,"props":2171,"children":2172},{"style":215},[2173],{"type":172,"value":1137},{"type":166,"tag":202,"props":2175,"children":2176},{"class":204,"line":495},[2177,2181,2185,2189,2194,2199,2204,2209,2213,2217],{"type":166,"tag":202,"props":2178,"children":2179},{"style":1464},[2180],{"type":172,"value":2133},{"type":166,"tag":202,"props":2182,"children":2183},{"style":436},[2184],{"type":172,"value":2138},{"type":166,"tag":202,"props":2186,"children":2187},{"style":442},[2188],{"type":172,"value":472},{"type":166,"tag":202,"props":2190,"children":2191},{"style":515},[2192],{"type":172,"value":2193}," *",{"type":166,"tag":202,"props":2195,"children":2196},{"style":1464},[2197],{"type":172,"value":2198}," as",{"type":166,"tag":202,"props":2200,"children":2201},{"style":436},[2202],{"type":172,"value":2203}," namespace ",{"type":166,"tag":202,"props":2205,"children":2206},{"style":1464},[2207],{"type":172,"value":2208},"from",{"type":166,"tag":202,"props":2210,"children":2211},{"style":215},[2212],{"type":172,"value":218},{"type":166,"tag":202,"props":2214,"children":2215},{"style":221},[2216],{"type":172,"value":2169},{"type":166,"tag":202,"props":2218,"children":2219},{"style":215},[2220],{"type":172,"value":1137},{"type":166,"tag":180,"props":2222,"children":2223},{},[2224],{"type":172,"value":2225},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":166,"tag":180,"props":2227,"children":2228},{},[2229],{"type":172,"value":2230},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":166,"tag":180,"props":2232,"children":2233},{},[2234],{"type":172,"value":2235},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":166,"tag":174,"props":2237,"children":2239},{"id":2238},"严格模式",[2240],{"type":172,"value":2238},{"type":166,"tag":180,"props":2242,"children":2243},{},[2244],{"type":172,"value":2245},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":166,"tag":180,"props":2247,"children":2248},{},[2249],{"type":172,"value":2250},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":166,"tag":180,"props":2252,"children":2253},{},[2254],{"type":172,"value":2255},"总的来说，严格模式一共有七条限制：",{"type":166,"tag":280,"props":2257,"children":2258},{},[2259,2264,2269,2274,2279,2284,2289,2294,2299,2304],{"type":166,"tag":284,"props":2260,"children":2261},{},[2262],{"type":172,"value":2263},"对象字面量中不能有相同的属性声明",{"type":166,"tag":284,"props":2265,"children":2266},{},[2267],{"type":172,"value":2268},"函数实参列表中不能有同名参数",{"type":166,"tag":284,"props":2270,"children":2271},{},[2272],{"type":172,"value":2273},"不能声明、重写或删除 eval、arguments 标识符",{"type":166,"tag":284,"props":2275,"children":2276},{},[2277],{"type":172,"value":2278},"不允许使用八进制数字字面量",{"type":166,"tag":284,"props":2280,"children":2281},{},[2282],{"type":172,"value":2283},"不能删除显式声明的标识符、名字或具名函数",{"type":166,"tag":284,"props":2285,"children":2286},{},[2287],{"type":172,"value":2288},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":166,"tag":284,"props":2290,"children":2291},{},[2292],{"type":172,"value":2293},"禁用 with 语句",{"type":166,"tag":284,"props":2295,"children":2296},{},[2297],{"type":172,"value":2298},"禁用隐式声明",{"type":166,"tag":284,"props":2300,"children":2301},{},[2302],{"type":172,"value":2303},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":166,"tag":284,"props":2305,"children":2306},{},[2307],{"type":172,"value":2308},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":166,"tag":180,"props":2310,"children":2311},{},[2312],{"type":172,"value":2313},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":166,"tag":280,"props":2315,"children":2316},{},[2317,2322],{"type":166,"tag":284,"props":2318,"children":2319},{},[2320],{"type":172,"value":2321},"间接调用 eval 函数",{"type":166,"tag":284,"props":2323,"children":2324},{},[2325],{"type":172,"value":2326},"使用 new Function 构造的新函数",{"type":166,"tag":174,"props":2328,"children":2330},{"id":2329},"运算符的二义性",[2331],{"type":172,"value":2329},{"type":166,"tag":180,"props":2333,"children":2334},{},[2335],{"type":172,"value":2336},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":166,"tag":180,"props":2338,"children":2339},{},[2340],{"type":172,"value":2341},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":166,"tag":180,"props":2343,"children":2344},{},[2345],{"type":172,"value":2346},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":166,"tag":180,"props":2348,"children":2349},{},[2350],{"type":172,"value":2351},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":166,"tag":167,"props":2353,"children":2355},{"id":2354},"面向对象语言特性",[2356],{"type":172,"value":2354},{"type":166,"tag":174,"props":2358,"children":2360},{"id":2359},"语法综述-1",[2361],{"type":172,"value":176},{"type":166,"tag":180,"props":2363,"children":2364},{},[2365],{"type":172,"value":2366},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":166,"tag":180,"props":2368,"children":2369},{},[2370],{"type":172,"value":2371},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":166,"tag":180,"props":2373,"children":2374},{},[2375],{"type":172,"value":2376},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":166,"tag":180,"props":2378,"children":2379},{},[2380],{"type":172,"value":2381},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":166,"tag":191,"props":2383,"children":2385},{"className":424,"code":2384,"language":426,"meta":160,"style":160},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2386],{"type":166,"tag":198,"props":2387,"children":2388},{"__ignoreMap":160},[2389,2410,2437,2466,2474,2491,2504,2511,2519,2527,2551],{"type":166,"tag":202,"props":2390,"children":2391},{"class":204,"line":205},[2392,2397,2402,2406],{"type":166,"tag":202,"props":2393,"children":2394},{"style":760},[2395],{"type":172,"value":2396},"var",{"type":166,"tag":202,"props":2398,"children":2399},{"style":436},[2400],{"type":172,"value":2401}," obj",{"type":166,"tag":202,"props":2403,"children":2404},{"style":232},[2405],{"type":172,"value":1635},{"type":166,"tag":202,"props":2407,"children":2408},{"style":442},[2409],{"type":172,"value":1510},{"type":166,"tag":202,"props":2411,"children":2412},{"class":204,"line":495},[2413,2418,2423,2427,2432],{"type":166,"tag":202,"props":2414,"children":2415},{"style":760},[2416],{"type":172,"value":2417},"  set",{"type":166,"tag":202,"props":2419,"children":2421},{"style":2420},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2422],{"type":172,"value":1786},{"type":166,"tag":202,"props":2424,"children":2425},{"style":442},[2426],{"type":172,"value":456},{"type":166,"tag":202,"props":2428,"children":2429},{"style":1387},[2430],{"type":172,"value":2431},"x",{"type":166,"tag":202,"props":2433,"children":2434},{"style":442},[2435],{"type":172,"value":2436},"){\n",{"type":166,"tag":202,"props":2438,"children":2439},{"class":204,"line":1140},[2440,2445,2449,2453,2458,2462],{"type":166,"tag":202,"props":2441,"children":2442},{"style":436},[2443],{"type":172,"value":2444},"    c",{"type":166,"tag":202,"props":2446,"children":2447},{"style":232},[2448],{"type":172,"value":1635},{"type":166,"tag":202,"props":2450,"children":2451},{"style":215},[2452],{"type":172,"value":229},{"type":166,"tag":202,"props":2454,"children":2455},{"style":221},[2456],{"type":172,"value":2457},"other",{"type":166,"tag":202,"props":2459,"children":2460},{"style":215},[2461],{"type":172,"value":229},{"type":166,"tag":202,"props":2463,"children":2464},{"style":442},[2465],{"type":172,"value":1575},{"type":166,"tag":202,"props":2467,"children":2468},{"class":204,"line":1181},[2469],{"type":166,"tag":202,"props":2470,"children":2471},{"style":442},[2472],{"type":172,"value":2473},"  },\n",{"type":166,"tag":202,"props":2475,"children":2476},{"class":204,"line":1190},[2477,2482,2486],{"type":166,"tag":202,"props":2478,"children":2479},{"style":760},[2480],{"type":172,"value":2481},"  get",{"type":166,"tag":202,"props":2483,"children":2484},{"style":2420},[2485],{"type":172,"value":1786},{"type":166,"tag":202,"props":2487,"children":2488},{"style":442},[2489],{"type":172,"value":2490},"(){\n",{"type":166,"tag":202,"props":2492,"children":2493},{"class":204,"line":1225},[2494,2499],{"type":166,"tag":202,"props":2495,"children":2496},{"style":1464},[2497],{"type":172,"value":2498},"    return",{"type":166,"tag":202,"props":2500,"children":2501},{"style":436},[2502],{"type":172,"value":2503}," c\n",{"type":166,"tag":202,"props":2505,"children":2506},{"class":204,"line":1262},[2507],{"type":166,"tag":202,"props":2508,"children":2509},{"style":442},[2510],{"type":172,"value":2473},{"type":166,"tag":202,"props":2512,"children":2513},{"class":204,"line":1270},[2514],{"type":166,"tag":202,"props":2515,"children":2516},{"style":489},[2517],{"type":172,"value":2518},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":166,"tag":202,"props":2520,"children":2521},{"class":204,"line":1297},[2522],{"type":166,"tag":202,"props":2523,"children":2524},{"style":489},[2525],{"type":172,"value":2526},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":166,"tag":202,"props":2528,"children":2529},{"class":204,"line":1873},[2530,2535,2539,2543,2547],{"type":166,"tag":202,"props":2531,"children":2532},{"style":1158},[2533],{"type":172,"value":2534},"  test",{"type":166,"tag":202,"props":2536,"children":2537},{"style":442},[2538],{"type":172,"value":1620},{"type":166,"tag":202,"props":2540,"children":2541},{"style":215},[2542],{"type":172,"value":218},{"type":166,"tag":202,"props":2544,"children":2545},{"style":221},[2546],{"type":172,"value":1486},{"type":166,"tag":202,"props":2548,"children":2549},{"style":215},[2550],{"type":172,"value":1137},{"type":166,"tag":202,"props":2552,"children":2553},{"class":204,"line":1933},[2554],{"type":166,"tag":202,"props":2555,"children":2556},{"style":442},[2557],{"type":172,"value":1187},{"type":166,"tag":180,"props":2559,"children":2560},{},[2561],{"type":172,"value":2562},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":166,"tag":191,"props":2564,"children":2566},{"className":424,"code":2565,"language":426,"meta":160,"style":160},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2567],{"type":166,"tag":198,"props":2568,"children":2569},{"__ignoreMap":160},[2570,2578,2622],{"type":166,"tag":202,"props":2571,"children":2572},{"class":204,"line":205},[2573],{"type":166,"tag":202,"props":2574,"children":2575},{"style":489},[2576],{"type":172,"value":2577},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":166,"tag":202,"props":2579,"children":2580},{"class":204,"line":495},[2581,2586,2590,2595,2599,2604,2609,2613,2618],{"type":166,"tag":202,"props":2582,"children":2584},{"style":2583},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2585],{"type":172,"value":1197},{"type":166,"tag":202,"props":2587,"children":2588},{"style":442},[2589],{"type":172,"value":445},{"type":166,"tag":202,"props":2591,"children":2592},{"style":1194},[2593],{"type":172,"value":2594},"prototype",{"type":166,"tag":202,"props":2596,"children":2597},{"style":232},[2598],{"type":172,"value":1124},{"type":166,"tag":202,"props":2600,"children":2601},{"style":232},[2602],{"type":172,"value":2603}," new",{"type":166,"tag":202,"props":2605,"children":2606},{"style":448},[2607],{"type":172,"value":2608}," B",{"type":166,"tag":202,"props":2610,"children":2611},{"style":436},[2612],{"type":172,"value":456},{"type":166,"tag":202,"props":2614,"children":2615},{"style":489},[2616],{"type":172,"value":2617},"/* 传入参数 */",{"type":166,"tag":202,"props":2619,"children":2620},{"style":436},[2621],{"type":172,"value":1178},{"type":166,"tag":202,"props":2623,"children":2624},{"class":204,"line":1140},[2625,2629,2633,2637,2641,2646,2650],{"type":166,"tag":202,"props":2626,"children":2627},{"style":2583},[2628],{"type":172,"value":1197},{"type":166,"tag":202,"props":2630,"children":2631},{"style":442},[2632],{"type":172,"value":445},{"type":166,"tag":202,"props":2634,"children":2635},{"style":1194},[2636],{"type":172,"value":2594},{"type":166,"tag":202,"props":2638,"children":2639},{"style":442},[2640],{"type":172,"value":445},{"type":166,"tag":202,"props":2642,"children":2643},{"style":1194},[2644],{"type":172,"value":2645},"constructor",{"type":166,"tag":202,"props":2647,"children":2648},{"style":232},[2649],{"type":172,"value":1124},{"type":166,"tag":202,"props":2651,"children":2652},{"style":1194},[2653],{"type":172,"value":2654}," A\n",{"type":166,"tag":180,"props":2656,"children":2657},{},[2658],{"type":172,"value":2659},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":166,"tag":180,"props":2661,"children":2662},{},[2663],{"type":172,"value":2664},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":166,"tag":180,"props":2666,"children":2667},{},[2668],{"type":172,"value":2669},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":166,"tag":180,"props":2671,"children":2672},{},[2673],{"type":172,"value":2674},"总结一下遍历对象成员的方法：",{"type":166,"tag":775,"props":2676,"children":2677},{},[2678,2702],{"type":166,"tag":779,"props":2679,"children":2680},{},[2681],{"type":166,"tag":783,"props":2682,"children":2683},{},[2684,2689,2694,2698],{"type":166,"tag":787,"props":2685,"children":2686},{},[2687],{"type":172,"value":2688},"键名",{"type":166,"tag":787,"props":2690,"children":2691},{},[2692],{"type":172,"value":2693},"显隐式",{"type":166,"tag":787,"props":2695,"children":2696},{},[2697],{"type":172,"value":169},{"type":166,"tag":787,"props":2699,"children":2700},{},[2701],{"type":172,"value":796},{"type":166,"tag":798,"props":2703,"children":2704},{},[2705,2728,2748,2770],{"type":166,"tag":783,"props":2706,"children":2707},{},[2708,2713,2718,2723],{"type":166,"tag":805,"props":2709,"children":2710},{},[2711],{"type":172,"value":2712},"一般键名",{"type":166,"tag":805,"props":2714,"children":2715},{},[2716],{"type":172,"value":2717},"显式",{"type":166,"tag":805,"props":2719,"children":2720},{},[2721],{"type":172,"value":2722},"for...in",{"type":166,"tag":805,"props":2724,"children":2725},{},[2726],{"type":172,"value":2727},"可列举的成员名（包含原型链）",{"type":166,"tag":783,"props":2729,"children":2730},{},[2731,2735,2739,2744],{"type":166,"tag":805,"props":2732,"children":2733},{},[2734],{"type":172,"value":2712},{"type":166,"tag":805,"props":2736,"children":2737},{},[2738],{"type":172,"value":2717},{"type":166,"tag":805,"props":2740,"children":2741},{},[2742],{"type":172,"value":2743},"Object.prototype.map、Object.prototype.entries、...",{"type":166,"tag":805,"props":2745,"children":2746},{},[2747],{"type":172,"value":1048},{"type":166,"tag":783,"props":2749,"children":2750},{},[2751,2755,2760,2765],{"type":166,"tag":805,"props":2752,"children":2753},{},[2754],{"type":172,"value":2712},{"type":166,"tag":805,"props":2756,"children":2757},{},[2758],{"type":172,"value":2759},"显式 & 隐式",{"type":166,"tag":805,"props":2761,"children":2762},{},[2763],{"type":172,"value":2764},"Object.getOwnPropertyNames()",{"type":166,"tag":805,"props":2766,"children":2767},{},[2768],{"type":172,"value":2769},"所有非符号的自由属性名",{"type":166,"tag":783,"props":2771,"children":2772},{},[2773,2778,2782,2787],{"type":166,"tag":805,"props":2774,"children":2775},{},[2776],{"type":172,"value":2777},"符号键名键名",{"type":166,"tag":805,"props":2779,"children":2780},{},[2781],{"type":172,"value":2759},{"type":166,"tag":805,"props":2783,"children":2784},{},[2785],{"type":172,"value":2786},"Object.getOwnPropertySymbols()",{"type":166,"tag":805,"props":2788,"children":2789},{},[2790],{"type":172,"value":2791},"所有符号键名的自有属性名",{"type":166,"tag":180,"props":2793,"children":2794},{},[2795,2797,2802,2804,2808],{"type":172,"value":2796},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":166,"tag":202,"props":2798,"children":2799},{},[2800],{"type":172,"value":2801},"prop",{"type":172,"value":2803}," 更好的替代方案是 typeof(obj",{"type":166,"tag":202,"props":2805,"children":2806},{},[2807],{"type":172,"value":2801},{"type":172,"value":2809},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":166,"tag":180,"props":2811,"children":2812},{},[2813],{"type":172,"value":2814},"delete 运算符有些特殊的地方：",{"type":166,"tag":280,"props":2816,"children":2817},{},[2818,2823],{"type":166,"tag":284,"props":2819,"children":2820},{},[2821],{"type":172,"value":2822},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":166,"tag":284,"props":2824,"children":2825},{},[2826],{"type":172,"value":2827},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":166,"tag":174,"props":2829,"children":2831},{"id":2830},"原型继承",[2832],{"type":172,"value":2830},{"type":166,"tag":180,"props":2834,"children":2835},{},[2836],{"type":172,"value":2837},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":166,"tag":180,"props":2839,"children":2840},{},[2841],{"type":172,"value":2842},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":166,"tag":280,"props":2844,"children":2845},{},[2846,2851],{"type":166,"tag":284,"props":2847,"children":2848},{},[2849],{"type":172,"value":2850},"读对象的属性时优先读取对象的自有属性表",{"type":166,"tag":284,"props":2852,"children":2853},{},[2854],{"type":172,"value":2855},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":166,"tag":180,"props":2857,"children":2858},{},[2859],{"type":172,"value":2860},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":166,"tag":180,"props":2862,"children":2863},{},[2864],{"type":172,"value":2865},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":166,"tag":191,"props":2867,"children":2869},{"className":424,"code":2868,"language":426,"meta":160,"style":160},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[2870],{"type":166,"tag":198,"props":2871,"children":2872},{"__ignoreMap":160},[2873,2893,2932,2973],{"type":166,"tag":202,"props":2874,"children":2875},{"class":204,"line":205},[2876,2880,2884,2888],{"type":166,"tag":202,"props":2877,"children":2878},{"style":760},[2879],{"type":172,"value":1086},{"type":166,"tag":202,"props":2881,"children":2882},{"style":448},[2883],{"type":172,"value":1786},{"type":166,"tag":202,"props":2885,"children":2886},{"style":442},[2887],{"type":172,"value":1096},{"type":166,"tag":202,"props":2889,"children":2890},{"style":442},[2891],{"type":172,"value":2892}," {}\n",{"type":166,"tag":202,"props":2894,"children":2895},{"class":204,"line":495},[2896,2900,2905,2909,2913,2918,2922,2927],{"type":166,"tag":202,"props":2897,"children":2898},{"style":760},[2899],{"type":172,"value":2396},{"type":166,"tag":202,"props":2901,"children":2902},{"style":436},[2903],{"type":172,"value":2904}," a ",{"type":166,"tag":202,"props":2906,"children":2907},{"style":232},[2908],{"type":172,"value":1635},{"type":166,"tag":202,"props":2910,"children":2911},{"style":442},[2912],{"type":172,"value":1472},{"type":166,"tag":202,"props":2914,"children":2915},{"style":2420},[2916],{"type":172,"value":2917}," testb",{"type":166,"tag":202,"props":2919,"children":2920},{"style":442},[2921],{"type":172,"value":1096},{"type":166,"tag":202,"props":2923,"children":2924},{"style":442},[2925],{"type":172,"value":2926}," {}",{"type":166,"tag":202,"props":2928,"children":2929},{"style":442},[2930],{"type":172,"value":2931}," }\n",{"type":166,"tag":202,"props":2933,"children":2934},{"class":204,"line":1140},[2935,2939,2943,2948,2952,2956,2960,2964,2968],{"type":166,"tag":202,"props":2936,"children":2937},{"style":436},[2938],{"type":172,"value":263},{"type":166,"tag":202,"props":2940,"children":2941},{"style":442},[2942],{"type":172,"value":445},{"type":166,"tag":202,"props":2944,"children":2945},{"style":436},[2946],{"type":172,"value":2947},"testb",{"type":166,"tag":202,"props":2949,"children":2950},{"style":442},[2951],{"type":172,"value":445},{"type":166,"tag":202,"props":2953,"children":2954},{"style":1194},[2955],{"type":172,"value":2594},{"type":166,"tag":202,"props":2957,"children":2958},{"style":232},[2959],{"type":172,"value":1124},{"type":166,"tag":202,"props":2961,"children":2962},{"style":2583},[2963],{"type":172,"value":1786},{"type":166,"tag":202,"props":2965,"children":2966},{"style":442},[2967],{"type":172,"value":445},{"type":166,"tag":202,"props":2969,"children":2970},{"style":1194},[2971],{"type":172,"value":2972},"prototype\n",{"type":166,"tag":202,"props":2974,"children":2975},{"class":204,"line":1181},[2976,2980,2985,2989,2993,2997],{"type":166,"tag":202,"props":2977,"children":2978},{"style":232},[2979],{"type":172,"value":1276},{"type":166,"tag":202,"props":2981,"children":2982},{"style":436},[2983],{"type":172,"value":2984}," a",{"type":166,"tag":202,"props":2986,"children":2987},{"style":442},[2988],{"type":172,"value":445},{"type":166,"tag":202,"props":2990,"children":2991},{"style":448},[2992],{"type":172,"value":2947},{"type":166,"tag":202,"props":2994,"children":2995},{"style":436},[2996],{"type":172,"value":591},{"type":166,"tag":202,"props":2998,"children":2999},{"style":489},[3000],{"type":172,"value":3001},"// TypeError\n",{"type":166,"tag":180,"props":3003,"children":3004},{},[3005,3007,3015],{"type":172,"value":3006},"在",{"type":166,"tag":263,"props":3008,"children":3012},{"href":3009,"rel":3010},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3011],"nofollow",[3013],{"type":172,"value":3014},"规范",{"type":172,"value":3016},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":166,"tag":180,"props":3018,"children":3019},{},[3020],{"type":172,"value":3021},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":166,"tag":191,"props":3023,"children":3025},{"className":424,"code":3024,"language":426,"meta":160,"style":160},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3026],{"type":166,"tag":198,"props":3027,"children":3028},{"__ignoreMap":160},[3029,3049,3069],{"type":166,"tag":202,"props":3030,"children":3031},{"class":204,"line":205},[3032,3036,3041,3045],{"type":166,"tag":202,"props":3033,"children":3034},{"style":760},[3035],{"type":172,"value":1086},{"type":166,"tag":202,"props":3037,"children":3038},{"style":448},[3039],{"type":172,"value":3040}," Parent",{"type":166,"tag":202,"props":3042,"children":3043},{"style":442},[3044],{"type":172,"value":1096},{"type":166,"tag":202,"props":3046,"children":3047},{"style":442},[3048],{"type":172,"value":2892},{"type":166,"tag":202,"props":3050,"children":3051},{"class":204,"line":495},[3052,3056,3061,3065],{"type":166,"tag":202,"props":3053,"children":3054},{"style":760},[3055],{"type":172,"value":1086},{"type":166,"tag":202,"props":3057,"children":3058},{"style":448},[3059],{"type":172,"value":3060}," Child",{"type":166,"tag":202,"props":3062,"children":3063},{"style":442},[3064],{"type":172,"value":1096},{"type":166,"tag":202,"props":3066,"children":3067},{"style":442},[3068],{"type":172,"value":2892},{"type":166,"tag":202,"props":3070,"children":3071},{"class":204,"line":1140},[3072,3077,3081,3085,3089,3093,3097],{"type":166,"tag":202,"props":3073,"children":3074},{"style":2583},[3075],{"type":172,"value":3076},"Child",{"type":166,"tag":202,"props":3078,"children":3079},{"style":442},[3080],{"type":172,"value":445},{"type":166,"tag":202,"props":3082,"children":3083},{"style":1194},[3084],{"type":172,"value":2594},{"type":166,"tag":202,"props":3086,"children":3087},{"style":232},[3088],{"type":172,"value":1124},{"type":166,"tag":202,"props":3090,"children":3091},{"style":232},[3092],{"type":172,"value":2603},{"type":166,"tag":202,"props":3094,"children":3095},{"style":448},[3096],{"type":172,"value":3040},{"type":166,"tag":202,"props":3098,"children":3099},{"style":436},[3100],{"type":172,"value":3101},"()\n",{"type":166,"tag":180,"props":3103,"children":3104},{},[3105],{"type":172,"value":3106},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":166,"tag":191,"props":3108,"children":3110},{"className":424,"code":3109,"language":426,"meta":160,"style":160},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3111],{"type":166,"tag":198,"props":3112,"children":3113},{"__ignoreMap":160},[3114,3122],{"type":166,"tag":202,"props":3115,"children":3116},{"class":204,"line":205},[3117],{"type":166,"tag":202,"props":3118,"children":3119},{"style":489},[3120],{"type":172,"value":3121},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":166,"tag":202,"props":3123,"children":3124},{"class":204,"line":495},[3125,3129,3133,3137,3141,3145,3149],{"type":166,"tag":202,"props":3126,"children":3127},{"style":2583},[3128],{"type":172,"value":3076},{"type":166,"tag":202,"props":3130,"children":3131},{"style":442},[3132],{"type":172,"value":445},{"type":166,"tag":202,"props":3134,"children":3135},{"style":1194},[3136],{"type":172,"value":2594},{"type":166,"tag":202,"props":3138,"children":3139},{"style":442},[3140],{"type":172,"value":445},{"type":166,"tag":202,"props":3142,"children":3143},{"style":1194},[3144],{"type":172,"value":2645},{"type":166,"tag":202,"props":3146,"children":3147},{"style":232},[3148],{"type":172,"value":1124},{"type":166,"tag":202,"props":3150,"children":3151},{"style":436},[3152],{"type":172,"value":3153}," Child\n",{"type":166,"tag":191,"props":3155,"children":3157},{"className":424,"code":3156,"language":426,"meta":160,"style":160},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3158],{"type":166,"tag":198,"props":3159,"children":3160},{"__ignoreMap":160},[3161,3169,3188,3207,3230,3237],{"type":166,"tag":202,"props":3162,"children":3163},{"class":204,"line":205},[3164],{"type":166,"tag":202,"props":3165,"children":3166},{"style":489},[3167],{"type":172,"value":3168},"// 这种方法叫做圣杯模式\n",{"type":166,"tag":202,"props":3170,"children":3171},{"class":204,"line":495},[3172,3176,3180,3184],{"type":166,"tag":202,"props":3173,"children":3174},{"style":760},[3175],{"type":172,"value":1086},{"type":166,"tag":202,"props":3177,"children":3178},{"style":448},[3179],{"type":172,"value":3040},{"type":166,"tag":202,"props":3181,"children":3182},{"style":442},[3183],{"type":172,"value":1096},{"type":166,"tag":202,"props":3185,"children":3186},{"style":442},[3187],{"type":172,"value":2892},{"type":166,"tag":202,"props":3189,"children":3190},{"class":204,"line":1140},[3191,3195,3199,3203],{"type":166,"tag":202,"props":3192,"children":3193},{"style":760},[3194],{"type":172,"value":1086},{"type":166,"tag":202,"props":3196,"children":3197},{"style":448},[3198],{"type":172,"value":3060},{"type":166,"tag":202,"props":3200,"children":3201},{"style":442},[3202],{"type":172,"value":1096},{"type":166,"tag":202,"props":3204,"children":3205},{"style":442},[3206],{"type":172,"value":1101},{"type":166,"tag":202,"props":3208,"children":3209},{"class":204,"line":1181},[3210,3214,3218,3222,3226],{"type":166,"tag":202,"props":3211,"children":3212},{"style":1107},[3213],{"type":172,"value":1110},{"type":166,"tag":202,"props":3215,"children":3216},{"style":442},[3217],{"type":172,"value":445},{"type":166,"tag":202,"props":3219,"children":3220},{"style":1194},[3221],{"type":172,"value":2645},{"type":166,"tag":202,"props":3223,"children":3224},{"style":232},[3225],{"type":172,"value":1124},{"type":166,"tag":202,"props":3227,"children":3228},{"style":436},[3229],{"type":172,"value":3153},{"type":166,"tag":202,"props":3231,"children":3232},{"class":204,"line":1190},[3233],{"type":166,"tag":202,"props":3234,"children":3235},{"style":442},[3236],{"type":172,"value":1187},{"type":166,"tag":202,"props":3238,"children":3239},{"class":204,"line":1225},[3240,3244,3248,3252,3256,3260,3264],{"type":166,"tag":202,"props":3241,"children":3242},{"style":2583},[3243],{"type":172,"value":3076},{"type":166,"tag":202,"props":3245,"children":3246},{"style":442},[3247],{"type":172,"value":445},{"type":166,"tag":202,"props":3249,"children":3250},{"style":1194},[3251],{"type":172,"value":2594},{"type":166,"tag":202,"props":3253,"children":3254},{"style":232},[3255],{"type":172,"value":1124},{"type":166,"tag":202,"props":3257,"children":3258},{"style":232},[3259],{"type":172,"value":2603},{"type":166,"tag":202,"props":3261,"children":3262},{"style":448},[3263],{"type":172,"value":3040},{"type":166,"tag":202,"props":3265,"children":3266},{"style":436},[3267],{"type":172,"value":3101},{"type":166,"tag":180,"props":3269,"children":3270},{},[3271],{"type":172,"value":3272},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":166,"tag":174,"props":3274,"children":3276},{"id":3275},"类继承",[3277],{"type":172,"value":3275},{"type":166,"tag":180,"props":3279,"children":3280},{},[3281],{"type":172,"value":3282},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":166,"tag":191,"props":3284,"children":3286},{"className":424,"code":3285,"language":426,"meta":160,"style":160},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3287],{"type":166,"tag":198,"props":3288,"children":3289},{"__ignoreMap":160},[3290,3298,3315,3341,3349,3368,3387,3417],{"type":166,"tag":202,"props":3291,"children":3292},{"class":204,"line":205},[3293],{"type":166,"tag":202,"props":3294,"children":3295},{"style":489},[3296],{"type":172,"value":3297},"/* 类声明 */\n",{"type":166,"tag":202,"props":3299,"children":3300},{"class":204,"line":495},[3301,3306,3311],{"type":166,"tag":202,"props":3302,"children":3303},{"style":760},[3304],{"type":172,"value":3305},"class",{"type":166,"tag":202,"props":3307,"children":3309},{"style":3308},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3310],{"type":172,"value":3040},{"type":166,"tag":202,"props":3312,"children":3313},{"style":442},[3314],{"type":172,"value":2892},{"type":166,"tag":202,"props":3316,"children":3317},{"class":204,"line":1140},[3318,3322,3326,3332,3337],{"type":166,"tag":202,"props":3319,"children":3320},{"style":760},[3321],{"type":172,"value":3305},{"type":166,"tag":202,"props":3323,"children":3324},{"style":3308},[3325],{"type":172,"value":3060},{"type":166,"tag":202,"props":3327,"children":3329},{"style":3328},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3330],{"type":172,"value":3331}," extends",{"type":166,"tag":202,"props":3333,"children":3335},{"style":3334},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3336],{"type":172,"value":3040},{"type":166,"tag":202,"props":3338,"children":3339},{"style":442},[3340],{"type":172,"value":2892},{"type":166,"tag":202,"props":3342,"children":3343},{"class":204,"line":1181},[3344],{"type":166,"tag":202,"props":3345,"children":3346},{"style":489},[3347],{"type":172,"value":3348},"/* 仿制代码 */\n",{"type":166,"tag":202,"props":3350,"children":3351},{"class":204,"line":1190},[3352,3356,3360,3364],{"type":166,"tag":202,"props":3353,"children":3354},{"style":760},[3355],{"type":172,"value":1086},{"type":166,"tag":202,"props":3357,"children":3358},{"style":448},[3359],{"type":172,"value":3040},{"type":166,"tag":202,"props":3361,"children":3362},{"style":442},[3363],{"type":172,"value":809},{"type":166,"tag":202,"props":3365,"children":3366},{"style":442},[3367],{"type":172,"value":2892},{"type":166,"tag":202,"props":3369,"children":3370},{"class":204,"line":1225},[3371,3375,3379,3383],{"type":166,"tag":202,"props":3372,"children":3373},{"style":760},[3374],{"type":172,"value":1086},{"type":166,"tag":202,"props":3376,"children":3377},{"style":448},[3378],{"type":172,"value":3060},{"type":166,"tag":202,"props":3380,"children":3381},{"style":442},[3382],{"type":172,"value":809},{"type":166,"tag":202,"props":3384,"children":3385},{"style":442},[3386],{"type":172,"value":2892},{"type":166,"tag":202,"props":3388,"children":3389},{"class":204,"line":1262},[3390,3394,3398,3403,3408,3412],{"type":166,"tag":202,"props":3391,"children":3392},{"style":436},[3393],{"type":172,"value":439},{"type":166,"tag":202,"props":3395,"children":3396},{"style":442},[3397],{"type":172,"value":445},{"type":166,"tag":202,"props":3399,"children":3400},{"style":448},[3401],{"type":172,"value":3402},"setPrototypeOf",{"type":166,"tag":202,"props":3404,"children":3405},{"style":436},[3406],{"type":172,"value":3407},"(Child",{"type":166,"tag":202,"props":3409,"children":3410},{"style":442},[3411],{"type":172,"value":472},{"type":166,"tag":202,"props":3413,"children":3414},{"style":436},[3415],{"type":172,"value":3416}," Parent)\n",{"type":166,"tag":202,"props":3418,"children":3419},{"class":204,"line":1270},[3420,3424,3428,3432,3436,3440,3444,3448,3452,3456,3460,3464],{"type":166,"tag":202,"props":3421,"children":3422},{"style":436},[3423],{"type":172,"value":439},{"type":166,"tag":202,"props":3425,"children":3426},{"style":442},[3427],{"type":172,"value":445},{"type":166,"tag":202,"props":3429,"children":3430},{"style":448},[3431],{"type":172,"value":3402},{"type":166,"tag":202,"props":3433,"children":3434},{"style":436},[3435],{"type":172,"value":456},{"type":166,"tag":202,"props":3437,"children":3438},{"style":2583},[3439],{"type":172,"value":3076},{"type":166,"tag":202,"props":3441,"children":3442},{"style":442},[3443],{"type":172,"value":445},{"type":166,"tag":202,"props":3445,"children":3446},{"style":1194},[3447],{"type":172,"value":2594},{"type":166,"tag":202,"props":3449,"children":3450},{"style":442},[3451],{"type":172,"value":472},{"type":166,"tag":202,"props":3453,"children":3454},{"style":2583},[3455],{"type":172,"value":3040},{"type":166,"tag":202,"props":3457,"children":3458},{"style":442},[3459],{"type":172,"value":445},{"type":166,"tag":202,"props":3461,"children":3462},{"style":1194},[3463],{"type":172,"value":2594},{"type":166,"tag":202,"props":3465,"children":3466},{"style":436},[3467],{"type":172,"value":1178},{"type":166,"tag":180,"props":3469,"children":3470},{},[3471],{"type":172,"value":3472},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":166,"tag":180,"props":3474,"children":3475},{},[3476],{"type":172,"value":3477},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":166,"tag":180,"props":3479,"children":3480},{},[3481],{"type":172,"value":3482},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":166,"tag":191,"props":3484,"children":3486},{"className":424,"code":3485,"language":426,"meta":160,"style":160},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3487],{"type":166,"tag":198,"props":3488,"children":3489},{"__ignoreMap":160},[3490,3531,3562,3598,3627,3639],{"type":166,"tag":202,"props":3491,"children":3492},{"class":204,"line":205},[3493,3498,3502,3506,3510,3515,3519,3523,3527],{"type":166,"tag":202,"props":3494,"children":3495},{"style":2583},[3496],{"type":172,"value":3497},"object",{"type":166,"tag":202,"props":3499,"children":3500},{"style":442},[3501],{"type":172,"value":445},{"type":166,"tag":202,"props":3503,"children":3504},{"style":1194},[3505],{"type":172,"value":2594},{"type":166,"tag":202,"props":3507,"children":3508},{"style":442},[3509],{"type":172,"value":445},{"type":166,"tag":202,"props":3511,"children":3512},{"style":448},[3513],{"type":172,"value":3514},"method",{"type":166,"tag":202,"props":3516,"children":3517},{"style":232},[3518],{"type":172,"value":1124},{"type":166,"tag":202,"props":3520,"children":3521},{"style":760},[3522],{"type":172,"value":1214},{"type":166,"tag":202,"props":3524,"children":3525},{"style":442},[3526],{"type":172,"value":1096},{"type":166,"tag":202,"props":3528,"children":3529},{"style":442},[3530],{"type":172,"value":1101},{"type":166,"tag":202,"props":3532,"children":3533},{"class":204,"line":495},[3534,3539,3544,3548,3553,3557],{"type":166,"tag":202,"props":3535,"children":3536},{"style":760},[3537],{"type":172,"value":3538},"  const",{"type":166,"tag":202,"props":3540,"children":3541},{"style":1194},[3542],{"type":172,"value":3543}," thisClass",{"type":166,"tag":202,"props":3545,"children":3546},{"style":232},[3547],{"type":172,"value":1124},{"type":166,"tag":202,"props":3549,"children":3550},{"style":1107},[3551],{"type":172,"value":3552}," this",{"type":166,"tag":202,"props":3554,"children":3555},{"style":442},[3556],{"type":172,"value":445},{"type":166,"tag":202,"props":3558,"children":3559},{"style":1194},[3560],{"type":172,"value":3561},"constructor\n",{"type":166,"tag":202,"props":3563,"children":3564},{"class":204,"line":1140},[3565,3569,3574,3578,3582,3586,3590,3594],{"type":166,"tag":202,"props":3566,"children":3567},{"style":760},[3568],{"type":172,"value":3538},{"type":166,"tag":202,"props":3570,"children":3571},{"style":1194},[3572],{"type":172,"value":3573}," parentClass",{"type":166,"tag":202,"props":3575,"children":3576},{"style":232},[3577],{"type":172,"value":1124},{"type":166,"tag":202,"props":3579,"children":3580},{"style":2583},[3581],{"type":172,"value":3543},{"type":166,"tag":202,"props":3583,"children":3584},{"style":442},[3585],{"type":172,"value":445},{"type":166,"tag":202,"props":3587,"children":3588},{"style":1194},[3589],{"type":172,"value":2594},{"type":166,"tag":202,"props":3591,"children":3592},{"style":442},[3593],{"type":172,"value":445},{"type":166,"tag":202,"props":3595,"children":3596},{"style":1194},[3597],{"type":172,"value":3561},{"type":166,"tag":202,"props":3599,"children":3600},{"class":204,"line":1181},[3601,3605,3610,3614,3618,3622],{"type":166,"tag":202,"props":3602,"children":3603},{"style":760},[3604],{"type":172,"value":3538},{"type":166,"tag":202,"props":3606,"children":3607},{"style":1194},[3608],{"type":172,"value":3609}," parentMethod",{"type":166,"tag":202,"props":3611,"children":3612},{"style":232},[3613],{"type":172,"value":1124},{"type":166,"tag":202,"props":3615,"children":3616},{"style":436},[3617],{"type":172,"value":3573},{"type":166,"tag":202,"props":3619,"children":3620},{"style":442},[3621],{"type":172,"value":445},{"type":166,"tag":202,"props":3623,"children":3624},{"style":436},[3625],{"type":172,"value":3626},"method\n",{"type":166,"tag":202,"props":3628,"children":3629},{"class":204,"line":1190},[3630,3635],{"type":166,"tag":202,"props":3631,"children":3632},{"style":448},[3633],{"type":172,"value":3634},"  parentMethod",{"type":166,"tag":202,"props":3636,"children":3637},{"style":1158},[3638],{"type":172,"value":3101},{"type":166,"tag":202,"props":3640,"children":3641},{"class":204,"line":1225},[3642],{"type":166,"tag":202,"props":3643,"children":3644},{"style":442},[3645],{"type":172,"value":1187},{"type":166,"tag":180,"props":3647,"children":3648},{},[3649],{"type":172,"value":3650},"super 的指向由几个规则所限制：",{"type":166,"tag":280,"props":3652,"children":3653},{},[3654,3659,3664,3669,3674],{"type":166,"tag":284,"props":3655,"children":3656},{},[3657],{"type":172,"value":3658},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":166,"tag":284,"props":3660,"children":3661},{},[3662],{"type":172,"value":3663},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":166,"tag":284,"props":3665,"children":3666},{},[3667],{"type":172,"value":3668},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":166,"tag":284,"props":3670,"children":3671},{},[3672],{"type":172,"value":3673},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":166,"tag":284,"props":3675,"children":3676},{},[3677],{"type":172,"value":3678},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":166,"tag":180,"props":3680,"children":3681},{},[3682],{"type":172,"value":3683},"总结可以得出规律：",{"type":166,"tag":280,"props":3685,"children":3686},{},[3687,3692],{"type":166,"tag":284,"props":3688,"children":3689},{},[3690],{"type":172,"value":3691},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":166,"tag":284,"props":3693,"children":3694},{},[3695],{"type":172,"value":3696},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":166,"tag":180,"props":3698,"children":3699},{},[3700],{"type":172,"value":3701},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":166,"tag":191,"props":3703,"children":3705},{"className":424,"code":3704,"language":426,"meta":160,"style":160},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3706],{"type":166,"tag":198,"props":3707,"children":3708},{"__ignoreMap":160},[3709,3750,3820,3849,3857,3896,3930],{"type":166,"tag":202,"props":3710,"children":3711},{"class":204,"line":205},[3712,3717,3721,3725,3730,3734,3738,3742,3746],{"type":166,"tag":202,"props":3713,"children":3714},{"style":436},[3715],{"type":172,"value":3716},"proto ",{"type":166,"tag":202,"props":3718,"children":3719},{"style":232},[3720],{"type":172,"value":1635},{"type":166,"tag":202,"props":3722,"children":3723},{"style":442},[3724],{"type":172,"value":1472},{"type":166,"tag":202,"props":3726,"children":3727},{"style":1158},[3728],{"type":172,"value":3729},"data",{"type":166,"tag":202,"props":3731,"children":3732},{"style":442},[3733],{"type":172,"value":1620},{"type":166,"tag":202,"props":3735,"children":3736},{"style":215},[3737],{"type":172,"value":218},{"type":166,"tag":202,"props":3739,"children":3740},{"style":221},[3741],{"type":172,"value":1486},{"type":166,"tag":202,"props":3743,"children":3744},{"style":215},[3745],{"type":172,"value":229},{"type":166,"tag":202,"props":3747,"children":3748},{"style":442},[3749],{"type":172,"value":1187},{"type":166,"tag":202,"props":3751,"children":3752},{"class":204,"line":495},[3753,3758,3762,3766,3770,3774,3778,3782,3786,3790,3794,3800,3804,3808,3812,3816],{"type":166,"tag":202,"props":3754,"children":3755},{"style":436},[3756],{"type":172,"value":3757},"obj ",{"type":166,"tag":202,"props":3759,"children":3760},{"style":232},[3761],{"type":172,"value":1635},{"type":166,"tag":202,"props":3763,"children":3764},{"style":442},[3765],{"type":172,"value":1472},{"type":166,"tag":202,"props":3767,"children":3768},{"style":2420},[3769],{"type":172,"value":1786},{"type":166,"tag":202,"props":3771,"children":3772},{"style":442},[3773],{"type":172,"value":809},{"type":166,"tag":202,"props":3775,"children":3776},{"style":442},[3777],{"type":172,"value":1472},{"type":166,"tag":202,"props":3779,"children":3780},{"style":436},[3781],{"type":172,"value":1803},{"type":166,"tag":202,"props":3783,"children":3784},{"style":442},[3785],{"type":172,"value":445},{"type":166,"tag":202,"props":3787,"children":3788},{"style":448},[3789],{"type":172,"value":1155},{"type":166,"tag":202,"props":3791,"children":3792},{"style":1158},[3793],{"type":172,"value":456},{"type":166,"tag":202,"props":3795,"children":3797},{"style":3796},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[3798],{"type":172,"value":3799},"super",{"type":166,"tag":202,"props":3801,"children":3802},{"style":442},[3803],{"type":172,"value":445},{"type":166,"tag":202,"props":3805,"children":3806},{"style":436},[3807],{"type":172,"value":3729},{"type":166,"tag":202,"props":3809,"children":3810},{"style":1158},[3811],{"type":172,"value":486},{"type":166,"tag":202,"props":3813,"children":3814},{"style":442},[3815],{"type":172,"value":1434},{"type":166,"tag":202,"props":3817,"children":3818},{"style":442},[3819],{"type":172,"value":2931},{"type":166,"tag":202,"props":3821,"children":3822},{"class":204,"line":1140},[3823,3827,3831,3835,3840,3844],{"type":166,"tag":202,"props":3824,"children":3825},{"style":436},[3826],{"type":172,"value":439},{"type":166,"tag":202,"props":3828,"children":3829},{"style":442},[3830],{"type":172,"value":445},{"type":166,"tag":202,"props":3832,"children":3833},{"style":448},[3834],{"type":172,"value":3402},{"type":166,"tag":202,"props":3836,"children":3837},{"style":436},[3838],{"type":172,"value":3839},"(obj",{"type":166,"tag":202,"props":3841,"children":3842},{"style":442},[3843],{"type":172,"value":472},{"type":166,"tag":202,"props":3845,"children":3846},{"style":436},[3847],{"type":172,"value":3848}," proto)\n",{"type":166,"tag":202,"props":3850,"children":3851},{"class":204,"line":1181},[3852],{"type":166,"tag":202,"props":3853,"children":3854},{"emptyLinePlaceholder":159},[3855],{"type":172,"value":3856},"\n",{"type":166,"tag":202,"props":3858,"children":3859},{"class":204,"line":1190},[3860,3865,3869,3874,3878,3883,3887,3892],{"type":166,"tag":202,"props":3861,"children":3862},{"style":436},[3863],{"type":172,"value":3864},"obj2 ",{"type":166,"tag":202,"props":3866,"children":3867},{"style":232},[3868],{"type":172,"value":1635},{"type":166,"tag":202,"props":3870,"children":3871},{"style":436},[3872],{"type":172,"value":3873}," Object",{"type":166,"tag":202,"props":3875,"children":3876},{"style":442},[3877],{"type":172,"value":445},{"type":166,"tag":202,"props":3879,"children":3880},{"style":448},[3881],{"type":172,"value":3882},"create",{"type":166,"tag":202,"props":3884,"children":3885},{"style":436},[3886],{"type":172,"value":456},{"type":166,"tag":202,"props":3888,"children":3889},{"style":515},[3890],{"type":172,"value":3891},"null",{"type":166,"tag":202,"props":3893,"children":3894},{"style":436},[3895],{"type":172,"value":1178},{"type":166,"tag":202,"props":3897,"children":3898},{"class":204,"line":1225},[3899,3904,3908,3913,3917,3921,3925],{"type":166,"tag":202,"props":3900,"children":3901},{"style":436},[3902],{"type":172,"value":3903},"obj2",{"type":166,"tag":202,"props":3905,"children":3906},{"style":442},[3907],{"type":172,"value":445},{"type":166,"tag":202,"props":3909,"children":3910},{"style":436},[3911],{"type":172,"value":3912},"test ",{"type":166,"tag":202,"props":3914,"children":3915},{"style":232},[3916],{"type":172,"value":1635},{"type":166,"tag":202,"props":3918,"children":3919},{"style":436},[3920],{"type":172,"value":2401},{"type":166,"tag":202,"props":3922,"children":3923},{"style":442},[3924],{"type":172,"value":445},{"type":166,"tag":202,"props":3926,"children":3927},{"style":436},[3928],{"type":172,"value":3929},"test\n",{"type":166,"tag":202,"props":3931,"children":3932},{"class":204,"line":1262},[3933,3937,3941,3945,3949],{"type":166,"tag":202,"props":3934,"children":3935},{"style":436},[3936],{"type":172,"value":3903},{"type":166,"tag":202,"props":3938,"children":3939},{"style":442},[3940],{"type":172,"value":445},{"type":166,"tag":202,"props":3942,"children":3943},{"style":448},[3944],{"type":172,"value":1486},{"type":166,"tag":202,"props":3946,"children":3947},{"style":436},[3948],{"type":172,"value":591},{"type":166,"tag":202,"props":3950,"children":3951},{"style":489},[3952],{"type":172,"value":3953},"// 'test'\n",{"type":166,"tag":180,"props":3955,"children":3956},{},[3957],{"type":172,"value":3958},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":166,"tag":180,"props":3960,"children":3961},{},[3962],{"type":172,"value":3963},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":166,"tag":180,"props":3965,"children":3966},{},[3967],{"type":172,"value":3968},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":166,"tag":191,"props":3970,"children":3972},{"className":424,"code":3971,"language":426,"meta":160,"style":160},"class StaticClass extends null {\n  static pow () {}\n}\n",[3973],{"type":166,"tag":198,"props":3974,"children":3975},{"__ignoreMap":160},[3976,4001,4022],{"type":166,"tag":202,"props":3977,"children":3978},{"class":204,"line":205},[3979,3983,3988,3992,3997],{"type":166,"tag":202,"props":3980,"children":3981},{"style":760},[3982],{"type":172,"value":3305},{"type":166,"tag":202,"props":3984,"children":3985},{"style":3308},[3986],{"type":172,"value":3987}," StaticClass",{"type":166,"tag":202,"props":3989,"children":3990},{"style":3328},[3991],{"type":172,"value":3331},{"type":166,"tag":202,"props":3993,"children":3994},{"style":515},[3995],{"type":172,"value":3996}," null",{"type":166,"tag":202,"props":3998,"children":3999},{"style":442},[4000],{"type":172,"value":1101},{"type":166,"tag":202,"props":4002,"children":4003},{"class":204,"line":495},[4004,4009,4014,4018],{"type":166,"tag":202,"props":4005,"children":4006},{"style":3328},[4007],{"type":172,"value":4008},"  static",{"type":166,"tag":202,"props":4010,"children":4011},{"style":2420},[4012],{"type":172,"value":4013}," pow",{"type":166,"tag":202,"props":4015,"children":4016},{"style":442},[4017],{"type":172,"value":1096},{"type":166,"tag":202,"props":4019,"children":4020},{"style":442},[4021],{"type":172,"value":2892},{"type":166,"tag":202,"props":4023,"children":4024},{"class":204,"line":1140},[4025],{"type":166,"tag":202,"props":4026,"children":4027},{"style":442},[4028],{"type":172,"value":1187},{"type":166,"tag":180,"props":4030,"children":4031},{},[4032],{"type":172,"value":4033},"P196，这个 new.target.prototype 没看懂。",{"type":166,"tag":174,"props":4035,"children":4037},{"id":4036},"对象系统",[4038],{"type":172,"value":4036},{"type":166,"tag":180,"props":4040,"children":4041},{},[4042],{"type":172,"value":4043},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":166,"tag":180,"props":4045,"children":4046},{},[4047],{"type":172,"value":4048},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":166,"tag":180,"props":4050,"children":4051},{},[4052],{"type":172,"value":4053},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":166,"tag":191,"props":4055,"children":4057},{"className":424,"code":4056,"language":426,"meta":160,"style":160},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4058],{"type":166,"tag":198,"props":4059,"children":4060},{"__ignoreMap":160},[4061,4076,4099,4120],{"type":166,"tag":202,"props":4062,"children":4063},{"class":204,"line":205},[4064,4068,4072],{"type":166,"tag":202,"props":4065,"children":4066},{"style":760},[4067],{"type":172,"value":3305},{"type":166,"tag":202,"props":4069,"children":4070},{"style":3308},[4071],{"type":172,"value":1091},{"type":166,"tag":202,"props":4073,"children":4074},{"style":442},[4075],{"type":172,"value":2892},{"type":166,"tag":202,"props":4077,"children":4078},{"class":204,"line":495},[4079,4083,4087,4091,4095],{"type":166,"tag":202,"props":4080,"children":4081},{"style":760},[4082],{"type":172,"value":3305},{"type":166,"tag":202,"props":4084,"children":4085},{"style":3308},[4086],{"type":172,"value":2608},{"type":166,"tag":202,"props":4088,"children":4089},{"style":3328},[4090],{"type":172,"value":3331},{"type":166,"tag":202,"props":4092,"children":4093},{"style":3334},[4094],{"type":172,"value":1091},{"type":166,"tag":202,"props":4096,"children":4097},{"style":442},[4098],{"type":172,"value":2892},{"type":166,"tag":202,"props":4100,"children":4101},{"class":204,"line":1140},[4102,4107,4112,4116],{"type":166,"tag":202,"props":4103,"children":4104},{"style":1194},[4105],{"type":172,"value":4106},"B",{"type":166,"tag":202,"props":4108,"children":4109},{"style":232},[4110],{"type":172,"value":4111}," instanceof",{"type":166,"tag":202,"props":4113,"children":4114},{"style":3308},[4115],{"type":172,"value":1091},{"type":166,"tag":202,"props":4117,"children":4118},{"style":489},[4119],{"type":172,"value":607},{"type":166,"tag":202,"props":4121,"children":4122},{"class":204,"line":1181},[4123,4127,4131,4136,4140,4144,4148],{"type":166,"tag":202,"props":4124,"children":4125},{"style":1194},[4126],{"type":172,"value":1197},{"type":166,"tag":202,"props":4128,"children":4129},{"style":442},[4130],{"type":172,"value":445},{"type":166,"tag":202,"props":4132,"children":4133},{"style":448},[4134],{"type":172,"value":4135},"isPrototypeOf",{"type":166,"tag":202,"props":4137,"children":4138},{"style":436},[4139],{"type":172,"value":456},{"type":166,"tag":202,"props":4141,"children":4142},{"style":1194},[4143],{"type":172,"value":4106},{"type":166,"tag":202,"props":4145,"children":4146},{"style":436},[4147],{"type":172,"value":486},{"type":166,"tag":202,"props":4149,"children":4150},{"style":489},[4151],{"type":172,"value":536},{"type":166,"tag":180,"props":4153,"children":4154},{},[4155],{"type":172,"value":4156},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":166,"tag":180,"props":4158,"children":4159},{},[4160],{"type":172,"value":4161},"this 实在函数执行时动态传入的，规则有三：",{"type":166,"tag":280,"props":4163,"children":4164},{},[4165,4170,4175],{"type":166,"tag":284,"props":4166,"children":4167},{},[4168],{"type":172,"value":4169},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":166,"tag":284,"props":4171,"children":4172},{},[4173],{"type":172,"value":4174},"根据存取运算符将左操作符作为 this 传入",{"type":166,"tag":284,"props":4176,"children":4177},{},[4178],{"type":172,"value":4179},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":166,"tag":180,"props":4181,"children":4182},{},[4183],{"type":172,"value":4184},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":166,"tag":280,"props":4186,"children":4187},{},[4188,4193],{"type":166,"tag":284,"props":4189,"children":4190},{},[4191],{"type":172,"value":4192},"如果运行在严格模式中，不改变 this 的值，否则",{"type":166,"tag":284,"props":4194,"children":4195},{},[4196],{"type":172,"value":4197},"使用全局对象作为 this 值",{"type":166,"tag":180,"props":4199,"children":4200},{},[4201],{"type":172,"value":4202},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":166,"tag":180,"props":4204,"children":4205},{},[4206],{"type":172,"value":4207},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":166,"tag":280,"props":4209,"children":4210},{},[4211,4216],{"type":166,"tag":284,"props":4212,"children":4213},{},[4214],{"type":172,"value":4215},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":166,"tag":284,"props":4217,"children":4218},{},[4219],{"type":172,"value":4220},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":166,"tag":180,"props":4222,"children":4223},{},[4224],{"type":172,"value":4225},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":166,"tag":180,"props":4227,"children":4228},{},[4229],{"type":172,"value":4230},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":166,"tag":191,"props":4232,"children":4234},{"className":424,"code":4233,"language":426,"meta":160,"style":160},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4235],{"type":166,"tag":198,"props":4236,"children":4237},{"__ignoreMap":160},[4238,4246,4267,4274,4282],{"type":166,"tag":202,"props":4239,"children":4240},{"class":204,"line":205},[4241],{"type":166,"tag":202,"props":4242,"children":4243},{"style":489},[4244],{"type":172,"value":4245},"// 获得所有原生对象、宿主对象等\n",{"type":166,"tag":202,"props":4247,"children":4248},{"class":204,"line":495},[4249,4253,4257,4262],{"type":166,"tag":202,"props":4250,"children":4251},{"style":436},[4252],{"type":172,"value":439},{"type":166,"tag":202,"props":4254,"children":4255},{"style":442},[4256],{"type":172,"value":445},{"type":166,"tag":202,"props":4258,"children":4259},{"style":448},[4260],{"type":172,"value":4261},"getOwnPropertyNames",{"type":166,"tag":202,"props":4263,"children":4264},{"style":436},[4265],{"type":172,"value":4266},"(global)\n",{"type":166,"tag":202,"props":4268,"children":4269},{"class":204,"line":1140},[4270],{"type":166,"tag":202,"props":4271,"children":4272},{"emptyLinePlaceholder":159},[4273],{"type":172,"value":3856},{"type":166,"tag":202,"props":4275,"children":4276},{"class":204,"line":1181},[4277],{"type":166,"tag":202,"props":4278,"children":4279},{"style":489},[4280],{"type":172,"value":4281},"// 验证 undefined 是否存在 global 对象中\n",{"type":166,"tag":202,"props":4283,"children":4284},{"class":204,"line":1190},[4285,4289,4293,4298,4303,4307,4311,4316,4320,4324],{"type":166,"tag":202,"props":4286,"children":4287},{"style":436},[4288],{"type":172,"value":439},{"type":166,"tag":202,"props":4290,"children":4291},{"style":442},[4292],{"type":172,"value":445},{"type":166,"tag":202,"props":4294,"children":4295},{"style":448},[4296],{"type":172,"value":4297},"getOwnPropertyDescriptor",{"type":166,"tag":202,"props":4299,"children":4300},{"style":436},[4301],{"type":172,"value":4302},"(global",{"type":166,"tag":202,"props":4304,"children":4305},{"style":442},[4306],{"type":172,"value":472},{"type":166,"tag":202,"props":4308,"children":4309},{"style":215},[4310],{"type":172,"value":218},{"type":166,"tag":202,"props":4312,"children":4313},{"style":221},[4314],{"type":172,"value":4315},"undefined",{"type":166,"tag":202,"props":4317,"children":4318},{"style":215},[4319],{"type":172,"value":229},{"type":166,"tag":202,"props":4321,"children":4322},{"style":436},[4323],{"type":172,"value":486},{"type":166,"tag":202,"props":4325,"children":4326},{"style":489},[4327],{"type":172,"value":4328},"// {value: undefined /* ... */ }\n",{"type":166,"tag":180,"props":4330,"children":4331},{},[4332],{"type":172,"value":4333},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":166,"tag":180,"props":4335,"children":4336},{},[4337],{"type":172,"value":4338},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":166,"tag":180,"props":4340,"children":4341},{},[4342],{"type":172,"value":4343},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":166,"tag":775,"props":4345,"children":4346},{},[4347,4368],{"type":166,"tag":779,"props":4348,"children":4349},{},[4350],{"type":166,"tag":783,"props":4351,"children":4352},{},[4353,4358,4363],{"type":166,"tag":787,"props":4354,"children":4355},{},[4356],{"type":172,"value":4357},"对象",{"type":166,"tag":787,"props":4359,"children":4360},{},[4361],{"type":172,"value":4362},"特殊效果",{"type":166,"tag":787,"props":4364,"children":4365},{},[4366],{"type":172,"value":4367},"注",{"type":166,"tag":798,"props":4369,"children":4370},{},[4371,4389,4406,4422,4438,4454,4472,4488,4504,4520],{"type":166,"tag":783,"props":4372,"children":4373},{},[4374,4379,4384],{"type":166,"tag":805,"props":4375,"children":4376},{},[4377],{"type":172,"value":4378},"Number、String、Boolean、Symbol",{"type":166,"tag":805,"props":4380,"children":4381},{},[4382],{"type":172,"value":4383},"包装类",{"type":166,"tag":805,"props":4385,"children":4386},{},[4387],{"type":172,"value":4388},"({}).toString()",{"type":166,"tag":783,"props":4390,"children":4391},{},[4392,4396,4401],{"type":166,"tag":805,"props":4393,"children":4394},{},[4395],{"type":172,"value":439},{"type":166,"tag":805,"props":4397,"children":4398},{},[4399],{"type":172,"value":4400},"调用包装类",{"type":166,"tag":805,"props":4402,"children":4403},{},[4404],{"type":172,"value":4405},"new Object(5) + new Object(3)",{"type":166,"tag":783,"props":4407,"children":4408},{},[4409,4414,4419],{"type":166,"tag":805,"props":4410,"children":4411},{},[4412],{"type":172,"value":4413},"Array",{"type":166,"tag":805,"props":4415,"children":4416},{},[4417],{"type":172,"value":4418},"自动维护 length 属性",{"type":166,"tag":805,"props":4420,"children":4421},{},[],{"type":166,"tag":783,"props":4423,"children":4424},{},[4425,4430,4435],{"type":166,"tag":805,"props":4426,"children":4427},{},[4428],{"type":172,"value":4429},"Date",{"type":166,"tag":805,"props":4431,"children":4432},{},[4433],{"type":172,"value":4434},"日期对象相关的运算",{"type":166,"tag":805,"props":4436,"children":4437},{},[],{"type":166,"tag":783,"props":4439,"children":4440},{},[4441,4446,4451],{"type":166,"tag":805,"props":4442,"children":4443},{},[4444],{"type":172,"value":4445},"Function",{"type":166,"tag":805,"props":4447,"children":4448},{},[4449],{"type":172,"value":4450},"创建可执行的函数",{"type":166,"tag":805,"props":4452,"children":4453},{},[],{"type":166,"tag":783,"props":4455,"children":4456},{},[4457,4462,4467],{"type":166,"tag":805,"props":4458,"children":4459},{},[4460],{"type":172,"value":4461},"RegExp",{"type":166,"tag":805,"props":4463,"children":4464},{},[4465],{"type":172,"value":4466},"可执行",{"type":166,"tag":805,"props":4468,"children":4469},{},[4470],{"type":172,"value":4471},"仅在某些宿主中",{"type":166,"tag":783,"props":4473,"children":4474},{},[4475,4480,4485],{"type":166,"tag":805,"props":4476,"children":4477},{},[4478],{"type":172,"value":4479},"Proxy",{"type":166,"tag":805,"props":4481,"children":4482},{},[4483],{"type":172,"value":4484},"代理目标对象、回收代理",{"type":166,"tag":805,"props":4486,"children":4487},{},[],{"type":166,"tag":783,"props":4489,"children":4490},{},[4491,4496,4501],{"type":166,"tag":805,"props":4492,"children":4493},{},[4494],{"type":172,"value":4495},"TypedArray、DataView",{"type":166,"tag":805,"props":4497,"children":4498},{},[4499],{"type":172,"value":4500},"创建及绑定 buffer",{"type":166,"tag":805,"props":4502,"children":4503},{},[],{"type":166,"tag":783,"props":4505,"children":4506},{},[4507,4512,4517],{"type":166,"tag":805,"props":4508,"children":4509},{},[4510],{"type":172,"value":4511},"ArrayBuffer、SharedArray、Buffer",{"type":166,"tag":805,"props":4513,"children":4514},{},[4515],{"type":172,"value":4516},"初始化 buffer 并维护 byteLength 属性",{"type":166,"tag":805,"props":4518,"children":4519},{},[],{"type":166,"tag":783,"props":4521,"children":4522},{},[4523,4528,4533],{"type":166,"tag":805,"props":4524,"children":4525},{},[4526],{"type":172,"value":4527},"WeakMap、WeakSet",{"type":166,"tag":805,"props":4529,"children":4530},{},[4531],{"type":172,"value":4532},"不修改引用并自动回收对象",{"type":166,"tag":805,"props":4534,"children":4535},{},[],{"type":166,"tag":180,"props":4537,"children":4538},{},[4539],{"type":172,"value":4540},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":166,"tag":191,"props":4542,"children":4544},{"className":424,"code":4543,"language":426,"meta":160,"style":160},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4545],{"type":166,"tag":198,"props":4546,"children":4547},{"__ignoreMap":160},[4548,4581,4618,4694,4707,4714,4766,4773],{"type":166,"tag":202,"props":4549,"children":4550},{"class":204,"line":205},[4551,4555,4560,4564,4568,4573,4577],{"type":166,"tag":202,"props":4552,"children":4553},{"style":760},[4554],{"type":172,"value":1086},{"type":166,"tag":202,"props":4556,"children":4557},{"style":448},[4558],{"type":172,"value":4559}," MyDate",{"type":166,"tag":202,"props":4561,"children":4562},{"style":442},[4563],{"type":172,"value":456},{"type":166,"tag":202,"props":4565,"children":4566},{"style":232},[4567],{"type":172,"value":1048},{"type":166,"tag":202,"props":4569,"children":4570},{"style":1387},[4571],{"type":172,"value":4572},"args",{"type":166,"tag":202,"props":4574,"children":4575},{"style":442},[4576],{"type":172,"value":1395},{"type":166,"tag":202,"props":4578,"children":4579},{"style":442},[4580],{"type":172,"value":1101},{"type":166,"tag":202,"props":4582,"children":4583},{"class":204,"line":495},[4584,4588,4593,4597,4602,4606,4610,4614],{"type":166,"tag":202,"props":4585,"children":4586},{"style":760},[4587],{"type":172,"value":3538},{"type":166,"tag":202,"props":4589,"children":4590},{"style":1194},[4591],{"type":172,"value":4592}," Base",{"type":166,"tag":202,"props":4594,"children":4595},{"style":232},[4596],{"type":172,"value":1124},{"type":166,"tag":202,"props":4598,"children":4599},{"style":2583},[4600],{"type":172,"value":4601}," Date",{"type":166,"tag":202,"props":4603,"children":4604},{"style":442},[4605],{"type":172,"value":445},{"type":166,"tag":202,"props":4607,"children":4608},{"style":1194},[4609],{"type":172,"value":2594},{"type":166,"tag":202,"props":4611,"children":4612},{"style":442},[4613],{"type":172,"value":445},{"type":166,"tag":202,"props":4615,"children":4616},{"style":1194},[4617],{"type":172,"value":3561},{"type":166,"tag":202,"props":4619,"children":4620},{"class":204,"line":1140},[4621,4625,4630,4634,4638,4642,4646,4650,4654,4658,4662,4666,4670,4674,4678,4682,4686,4690],{"type":166,"tag":202,"props":4622,"children":4623},{"style":760},[4624],{"type":172,"value":3538},{"type":166,"tag":202,"props":4626,"children":4627},{"style":1194},[4628],{"type":172,"value":4629}," instance",{"type":166,"tag":202,"props":4631,"children":4632},{"style":232},[4633],{"type":172,"value":1124},{"type":166,"tag":202,"props":4635,"children":4636},{"style":436},[4637],{"type":172,"value":3873},{"type":166,"tag":202,"props":4639,"children":4640},{"style":442},[4641],{"type":172,"value":445},{"type":166,"tag":202,"props":4643,"children":4644},{"style":448},[4645],{"type":172,"value":3402},{"type":166,"tag":202,"props":4647,"children":4648},{"style":1158},[4649],{"type":172,"value":456},{"type":166,"tag":202,"props":4651,"children":4652},{"style":232},[4653],{"type":172,"value":1276},{"type":166,"tag":202,"props":4655,"children":4656},{"style":448},[4657],{"type":172,"value":4592},{"type":166,"tag":202,"props":4659,"children":4660},{"style":1158},[4661],{"type":172,"value":456},{"type":166,"tag":202,"props":4663,"children":4664},{"style":232},[4665],{"type":172,"value":1048},{"type":166,"tag":202,"props":4667,"children":4668},{"style":436},[4669],{"type":172,"value":4572},{"type":166,"tag":202,"props":4671,"children":4672},{"style":1158},[4673],{"type":172,"value":1395},{"type":166,"tag":202,"props":4675,"children":4676},{"style":442},[4677],{"type":172,"value":472},{"type":166,"tag":202,"props":4679,"children":4680},{"style":2583},[4681],{"type":172,"value":4559},{"type":166,"tag":202,"props":4683,"children":4684},{"style":442},[4685],{"type":172,"value":445},{"type":166,"tag":202,"props":4687,"children":4688},{"style":1194},[4689],{"type":172,"value":2594},{"type":166,"tag":202,"props":4691,"children":4692},{"style":1158},[4693],{"type":172,"value":1178},{"type":166,"tag":202,"props":4695,"children":4696},{"class":204,"line":1181},[4697,4702],{"type":166,"tag":202,"props":4698,"children":4699},{"style":1464},[4700],{"type":172,"value":4701},"  return",{"type":166,"tag":202,"props":4703,"children":4704},{"style":436},[4705],{"type":172,"value":4706}," instance\n",{"type":166,"tag":202,"props":4708,"children":4709},{"class":204,"line":1190},[4710],{"type":166,"tag":202,"props":4711,"children":4712},{"style":442},[4713],{"type":172,"value":1187},{"type":166,"tag":202,"props":4715,"children":4716},{"class":204,"line":1225},[4717,4721,4725,4729,4733,4738,4742,4746,4750,4754,4758,4762],{"type":166,"tag":202,"props":4718,"children":4719},{"style":436},[4720],{"type":172,"value":439},{"type":166,"tag":202,"props":4722,"children":4723},{"style":442},[4724],{"type":172,"value":445},{"type":166,"tag":202,"props":4726,"children":4727},{"style":448},[4728],{"type":172,"value":3402},{"type":166,"tag":202,"props":4730,"children":4731},{"style":436},[4732],{"type":172,"value":456},{"type":166,"tag":202,"props":4734,"children":4735},{"style":2583},[4736],{"type":172,"value":4737},"MyDate",{"type":166,"tag":202,"props":4739,"children":4740},{"style":442},[4741],{"type":172,"value":445},{"type":166,"tag":202,"props":4743,"children":4744},{"style":1194},[4745],{"type":172,"value":2594},{"type":166,"tag":202,"props":4747,"children":4748},{"style":442},[4749],{"type":172,"value":472},{"type":166,"tag":202,"props":4751,"children":4752},{"style":2583},[4753],{"type":172,"value":4601},{"type":166,"tag":202,"props":4755,"children":4756},{"style":442},[4757],{"type":172,"value":445},{"type":166,"tag":202,"props":4759,"children":4760},{"style":1194},[4761],{"type":172,"value":2594},{"type":166,"tag":202,"props":4763,"children":4764},{"style":436},[4765],{"type":172,"value":1178},{"type":166,"tag":202,"props":4767,"children":4768},{"class":204,"line":1262},[4769],{"type":166,"tag":202,"props":4770,"children":4771},{"emptyLinePlaceholder":159},[4772],{"type":172,"value":3856},{"type":166,"tag":202,"props":4774,"children":4775},{"class":204,"line":1270},[4776,4781,4785,4789,4793,4797,4801,4805],{"type":166,"tag":202,"props":4777,"children":4778},{"style":436},[4779],{"type":172,"value":4780},"console",{"type":166,"tag":202,"props":4782,"children":4783},{"style":442},[4784],{"type":172,"value":445},{"type":166,"tag":202,"props":4786,"children":4787},{"style":448},[4788],{"type":172,"value":1155},{"type":166,"tag":202,"props":4790,"children":4791},{"style":436},[4792],{"type":172,"value":456},{"type":166,"tag":202,"props":4794,"children":4795},{"style":232},[4796],{"type":172,"value":1276},{"type":166,"tag":202,"props":4798,"children":4799},{"style":448},[4800],{"type":172,"value":4559},{"type":166,"tag":202,"props":4802,"children":4803},{"style":436},[4804],{"type":172,"value":575},{"type":166,"tag":202,"props":4806,"children":4807},{"style":489},[4808],{"type":172,"value":4809},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":166,"tag":174,"props":4811,"children":4813},{"id":4812},"可定制的对象属性",[4814],{"type":172,"value":4812},{"type":166,"tag":180,"props":4816,"children":4817},{},[4818],{"type":172,"value":4819},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":166,"tag":280,"props":4821,"children":4822},{},[4823,4828,4833],{"type":166,"tag":284,"props":4824,"children":4825},{},[4826],{"type":172,"value":4827},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":166,"tag":284,"props":4829,"children":4830},{},[4831],{"type":172,"value":4832},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":166,"tag":284,"props":4834,"children":4835},{},[4836],{"type":172,"value":4837},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":166,"tag":180,"props":4839,"children":4840},{},[4841],{"type":172,"value":4842},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":166,"tag":775,"props":4844,"children":4845},{},[4846,4872],{"type":166,"tag":779,"props":4847,"children":4848},{},[4849],{"type":166,"tag":783,"props":4850,"children":4851},{},[4852,4857,4862,4867],{"type":166,"tag":787,"props":4853,"children":4854},{},[4855],{"type":172,"value":4856},"Object.xxx 方法",{"type":166,"tag":787,"props":4858,"children":4859},{},[4860],{"type":172,"value":4861},"方法说明",{"type":166,"tag":787,"props":4863,"children":4864},{},[4865],{"type":172,"value":4866},"对自有属性表的操作",{"type":166,"tag":787,"props":4868,"children":4869},{},[4870],{"type":172,"value":4871},"检查方法",{"type":166,"tag":798,"props":4873,"children":4874},{},[4875,4904,4932],{"type":166,"tag":783,"props":4876,"children":4877},{},[4878,4883,4888,4899],{"type":166,"tag":805,"props":4879,"children":4880},{},[4881],{"type":172,"value":4882},"preventExtensions(obj)",{"type":166,"tag":805,"props":4884,"children":4885},{},[4886],{"type":172,"value":4887},"使实例不能添加新属性，也不可重置原型",{"type":166,"tag":805,"props":4889,"children":4890},{},[4891,4897],{"type":166,"tag":4892,"props":4893,"children":4894},"del",{},[4895],{"type":172,"value":4896},"add",{"type":172,"value":4898},"、delete、update",{"type":166,"tag":805,"props":4900,"children":4901},{},[4902],{"type":172,"value":4903},"isExtensible(obj)",{"type":166,"tag":783,"props":4905,"children":4906},{},[4907,4912,4917,4927],{"type":166,"tag":805,"props":4908,"children":4909},{},[4910],{"type":172,"value":4911},"seal(obj)",{"type":166,"tag":805,"props":4913,"children":4914},{},[4915],{"type":172,"value":4916},"使实例不能新增新属性，也不能删除既有属性",{"type":166,"tag":805,"props":4918,"children":4919},{},[4920,4925],{"type":166,"tag":4892,"props":4921,"children":4922},{},[4923],{"type":172,"value":4924},"add、delete",{"type":172,"value":4926},"、update",{"type":166,"tag":805,"props":4928,"children":4929},{},[4930],{"type":172,"value":4931},"isSealed(obj)",{"type":166,"tag":783,"props":4933,"children":4934},{},[4935,4940,4945,4953],{"type":166,"tag":805,"props":4936,"children":4937},{},[4938],{"type":172,"value":4939},"freeze(obj)",{"type":166,"tag":805,"props":4941,"children":4942},{},[4943],{"type":172,"value":4944},"使实例所有属性只读，且不能再添加、删除属性",{"type":166,"tag":805,"props":4946,"children":4947},{},[4948],{"type":166,"tag":4892,"props":4949,"children":4950},{},[4951],{"type":172,"value":4952},"add、delete、update",{"type":166,"tag":805,"props":4954,"children":4955},{},[4956],{"type":172,"value":4957},"isFrozen(obj)",{"type":166,"tag":180,"props":4959,"children":4960},{},[4961],{"type":172,"value":4962},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":166,"tag":280,"props":4964,"children":4965},{},[4966,4971,4976],{"type":166,"tag":284,"props":4967,"children":4968},{},[4969],{"type":172,"value":4970},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":166,"tag":284,"props":4972,"children":4973},{},[4974],{"type":172,"value":4975},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":166,"tag":284,"props":4977,"children":4978},{},[4979],{"type":172,"value":4980},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":166,"tag":174,"props":4982,"children":4984},{"id":4983},"运行期侵入",[4985],{"type":172,"value":4983},{"type":166,"tag":180,"props":4987,"children":4988},{},[4989],{"type":172,"value":4990},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":166,"tag":180,"props":4992,"children":4993},{},[4994],{"type":172,"value":4995},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":166,"tag":180,"props":4997,"children":4998},{},[4999],{"type":172,"value":5000},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":166,"tag":775,"props":5002,"children":5003},{},[5004,5020],{"type":166,"tag":779,"props":5005,"children":5006},{},[5007],{"type":166,"tag":783,"props":5008,"children":5009},{},[5010,5015],{"type":166,"tag":787,"props":5011,"children":5012},{},[5013],{"type":172,"value":5014},"内部方法",{"type":166,"tag":787,"props":5016,"children":5017},{},[5018],{"type":172,"value":5019},"handler.xxx",{"type":166,"tag":798,"props":5021,"children":5022},{},[5023,5036,5049,5062,5075,5088,5101,5114,5127,5140,5153,5166,5179],{"type":166,"tag":783,"props":5024,"children":5025},{},[5026,5031],{"type":166,"tag":805,"props":5027,"children":5028},{},[5029],{"type":172,"value":5030},"[[GetPrototypeOf]]",{"type":166,"tag":805,"props":5032,"children":5033},{},[5034],{"type":172,"value":5035},"getPrototypeOf()",{"type":166,"tag":783,"props":5037,"children":5038},{},[5039,5044],{"type":166,"tag":805,"props":5040,"children":5041},{},[5042],{"type":172,"value":5043},"[[SetPrototypeOf]]",{"type":166,"tag":805,"props":5045,"children":5046},{},[5047],{"type":172,"value":5048},"setPrototypeOf()",{"type":166,"tag":783,"props":5050,"children":5051},{},[5052,5057],{"type":166,"tag":805,"props":5053,"children":5054},{},[5055],{"type":172,"value":5056},"[[IsExtensible]]",{"type":166,"tag":805,"props":5058,"children":5059},{},[5060],{"type":172,"value":5061},"isExtensible()",{"type":166,"tag":783,"props":5063,"children":5064},{},[5065,5070],{"type":166,"tag":805,"props":5066,"children":5067},{},[5068],{"type":172,"value":5069},"[[PreventExtensions]]",{"type":166,"tag":805,"props":5071,"children":5072},{},[5073],{"type":172,"value":5074},"preventExtensions()",{"type":166,"tag":783,"props":5076,"children":5077},{},[5078,5083],{"type":166,"tag":805,"props":5079,"children":5080},{},[5081],{"type":172,"value":5082},"[[GetOwnProperty]]",{"type":166,"tag":805,"props":5084,"children":5085},{},[5086],{"type":172,"value":5087},"getOwnPropertyDescriptor()",{"type":166,"tag":783,"props":5089,"children":5090},{},[5091,5096],{"type":166,"tag":805,"props":5092,"children":5093},{},[5094],{"type":172,"value":5095},"[[HasProperty]]",{"type":166,"tag":805,"props":5097,"children":5098},{},[5099],{"type":172,"value":5100},"has()",{"type":166,"tag":783,"props":5102,"children":5103},{},[5104,5109],{"type":166,"tag":805,"props":5105,"children":5106},{},[5107],{"type":172,"value":5108},"[[DefineOwnProperty]]",{"type":166,"tag":805,"props":5110,"children":5111},{},[5112],{"type":172,"value":5113},"defineProperty()",{"type":166,"tag":783,"props":5115,"children":5116},{},[5117,5122],{"type":166,"tag":805,"props":5118,"children":5119},{},[5120],{"type":172,"value":5121},"[[Get]]",{"type":166,"tag":805,"props":5123,"children":5124},{},[5125],{"type":172,"value":5126},"get()",{"type":166,"tag":783,"props":5128,"children":5129},{},[5130,5135],{"type":166,"tag":805,"props":5131,"children":5132},{},[5133],{"type":172,"value":5134},"[[Set]]",{"type":166,"tag":805,"props":5136,"children":5137},{},[5138],{"type":172,"value":5139},"set()",{"type":166,"tag":783,"props":5141,"children":5142},{},[5143,5148],{"type":166,"tag":805,"props":5144,"children":5145},{},[5146],{"type":172,"value":5147},"[[Delete]]",{"type":166,"tag":805,"props":5149,"children":5150},{},[5151],{"type":172,"value":5152},"deleteProperty()",{"type":166,"tag":783,"props":5154,"children":5155},{},[5156,5161],{"type":166,"tag":805,"props":5157,"children":5158},{},[5159],{"type":172,"value":5160},"[[OwnPropertyKeys]]",{"type":166,"tag":805,"props":5162,"children":5163},{},[5164],{"type":172,"value":5165},"ownKeys()",{"type":166,"tag":783,"props":5167,"children":5168},{},[5169,5174],{"type":166,"tag":805,"props":5170,"children":5171},{},[5172],{"type":172,"value":5173},"[[Call]]",{"type":166,"tag":805,"props":5175,"children":5176},{},[5177],{"type":172,"value":5178},"apply()",{"type":166,"tag":783,"props":5180,"children":5181},{},[5182,5187],{"type":166,"tag":805,"props":5183,"children":5184},{},[5185],{"type":172,"value":5186},"[[Construct]]",{"type":166,"tag":805,"props":5188,"children":5189},{},[5190],{"type":172,"value":5191},"construct()",{"type":166,"tag":180,"props":5193,"children":5194},{},[5195],{"type":172,"value":5196},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":166,"tag":280,"props":5198,"children":5199},{},[5200,5205],{"type":166,"tag":284,"props":5201,"children":5202},{},[5203],{"type":172,"value":5204},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":166,"tag":284,"props":5206,"children":5207},{},[5208],{"type":172,"value":5209},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":166,"tag":180,"props":5211,"children":5212},{},[5213],{"type":172,"value":5214},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":166,"tag":191,"props":5216,"children":5218},{"className":424,"code":5217,"language":426,"meta":160,"style":160},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5219],{"type":166,"tag":198,"props":5220,"children":5221},{"__ignoreMap":160},[5222,5260,5309,5350,5428,5472,5537,5544,5578,5618,5657,5677,5694,5732,5739,5746,5757],{"type":166,"tag":202,"props":5223,"children":5224},{"class":204,"line":205},[5225,5229,5234,5238,5243,5247,5252,5256],{"type":166,"tag":202,"props":5226,"children":5227},{"style":760},[5228],{"type":172,"value":1086},{"type":166,"tag":202,"props":5230,"children":5231},{"style":448},[5232],{"type":172,"value":5233}," intrudeOnPrototype",{"type":166,"tag":202,"props":5235,"children":5236},{"style":442},[5237],{"type":172,"value":456},{"type":166,"tag":202,"props":5239,"children":5240},{"style":1387},[5241],{"type":172,"value":5242},"Fn",{"type":166,"tag":202,"props":5244,"children":5245},{"style":442},[5246],{"type":172,"value":472},{"type":166,"tag":202,"props":5248,"children":5249},{"style":1387},[5250],{"type":172,"value":5251}," handler",{"type":166,"tag":202,"props":5253,"children":5254},{"style":442},[5255],{"type":172,"value":1395},{"type":166,"tag":202,"props":5257,"children":5258},{"style":442},[5259],{"type":172,"value":1101},{"type":166,"tag":202,"props":5261,"children":5262},{"class":204,"line":495},[5263,5267,5272,5276,5280,5284,5289,5293,5297,5301,5305],{"type":166,"tag":202,"props":5264,"children":5265},{"style":760},[5266],{"type":172,"value":3538},{"type":166,"tag":202,"props":5268,"children":5269},{"style":1194},[5270],{"type":172,"value":5271}," originPrototype",{"type":166,"tag":202,"props":5273,"children":5274},{"style":232},[5275],{"type":172,"value":1124},{"type":166,"tag":202,"props":5277,"children":5278},{"style":436},[5279],{"type":172,"value":3873},{"type":166,"tag":202,"props":5281,"children":5282},{"style":442},[5283],{"type":172,"value":445},{"type":166,"tag":202,"props":5285,"children":5286},{"style":448},[5287],{"type":172,"value":5288},"getPrototypeOf",{"type":166,"tag":202,"props":5290,"children":5291},{"style":1158},[5292],{"type":172,"value":456},{"type":166,"tag":202,"props":5294,"children":5295},{"style":2583},[5296],{"type":172,"value":5242},{"type":166,"tag":202,"props":5298,"children":5299},{"style":442},[5300],{"type":172,"value":445},{"type":166,"tag":202,"props":5302,"children":5303},{"style":1194},[5304],{"type":172,"value":2594},{"type":166,"tag":202,"props":5306,"children":5307},{"style":1158},[5308],{"type":172,"value":1178},{"type":166,"tag":202,"props":5310,"children":5311},{"class":204,"line":1140},[5312,5316,5321,5325,5329,5333,5337,5341,5346],{"type":166,"tag":202,"props":5313,"children":5314},{"style":760},[5315],{"type":172,"value":3538},{"type":166,"tag":202,"props":5317,"children":5318},{"style":1194},[5319],{"type":172,"value":5320}," target",{"type":166,"tag":202,"props":5322,"children":5323},{"style":232},[5324],{"type":172,"value":1124},{"type":166,"tag":202,"props":5326,"children":5327},{"style":436},[5328],{"type":172,"value":3873},{"type":166,"tag":202,"props":5330,"children":5331},{"style":442},[5332],{"type":172,"value":445},{"type":166,"tag":202,"props":5334,"children":5335},{"style":448},[5336],{"type":172,"value":3882},{"type":166,"tag":202,"props":5338,"children":5339},{"style":1158},[5340],{"type":172,"value":456},{"type":166,"tag":202,"props":5342,"children":5343},{"style":436},[5344],{"type":172,"value":5345},"originPrototype",{"type":166,"tag":202,"props":5347,"children":5348},{"style":1158},[5349],{"type":172,"value":1178},{"type":166,"tag":202,"props":5351,"children":5352},{"class":204,"line":1181},[5353,5357,5361,5367,5371,5376,5380,5385,5389,5393,5398,5402,5407,5411,5416,5420,5424],{"type":166,"tag":202,"props":5354,"children":5355},{"style":760},[5356],{"type":172,"value":3538},{"type":166,"tag":202,"props":5358,"children":5359},{"style":442},[5360],{"type":172,"value":1472},{"type":166,"tag":202,"props":5362,"children":5364},{"style":5363},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5365],{"type":172,"value":5366}," proxy",{"type":166,"tag":202,"props":5368,"children":5369},{"style":442},[5370],{"type":172,"value":1620},{"type":166,"tag":202,"props":5372,"children":5373},{"style":1194},[5374],{"type":172,"value":5375}," newPrototype",{"type":166,"tag":202,"props":5377,"children":5378},{"style":442},[5379],{"type":172,"value":472},{"type":166,"tag":202,"props":5381,"children":5382},{"style":1194},[5383],{"type":172,"value":5384}," revoke",{"type":166,"tag":202,"props":5386,"children":5387},{"style":442},[5388],{"type":172,"value":1495},{"type":166,"tag":202,"props":5390,"children":5391},{"style":232},[5392],{"type":172,"value":1124},{"type":166,"tag":202,"props":5394,"children":5395},{"style":436},[5396],{"type":172,"value":5397}," Proxy",{"type":166,"tag":202,"props":5399,"children":5400},{"style":442},[5401],{"type":172,"value":445},{"type":166,"tag":202,"props":5403,"children":5404},{"style":448},[5405],{"type":172,"value":5406},"revocable",{"type":166,"tag":202,"props":5408,"children":5409},{"style":1158},[5410],{"type":172,"value":456},{"type":166,"tag":202,"props":5412,"children":5413},{"style":436},[5414],{"type":172,"value":5415},"target",{"type":166,"tag":202,"props":5417,"children":5418},{"style":442},[5419],{"type":172,"value":472},{"type":166,"tag":202,"props":5421,"children":5422},{"style":436},[5423],{"type":172,"value":5251},{"type":166,"tag":202,"props":5425,"children":5426},{"style":1158},[5427],{"type":172,"value":1178},{"type":166,"tag":202,"props":5429,"children":5430},{"class":204,"line":1190},[5431,5436,5440,5444,5448,5452,5456,5460,5464,5468],{"type":166,"tag":202,"props":5432,"children":5433},{"style":436},[5434],{"type":172,"value":5435},"  Object",{"type":166,"tag":202,"props":5437,"children":5438},{"style":442},[5439],{"type":172,"value":445},{"type":166,"tag":202,"props":5441,"children":5442},{"style":448},[5443],{"type":172,"value":3402},{"type":166,"tag":202,"props":5445,"children":5446},{"style":1158},[5447],{"type":172,"value":456},{"type":166,"tag":202,"props":5449,"children":5450},{"style":2583},[5451],{"type":172,"value":5242},{"type":166,"tag":202,"props":5453,"children":5454},{"style":442},[5455],{"type":172,"value":445},{"type":166,"tag":202,"props":5457,"children":5458},{"style":1194},[5459],{"type":172,"value":2594},{"type":166,"tag":202,"props":5461,"children":5462},{"style":442},[5463],{"type":172,"value":472},{"type":166,"tag":202,"props":5465,"children":5466},{"style":436},[5467],{"type":172,"value":5375},{"type":166,"tag":202,"props":5469,"children":5470},{"style":1158},[5471],{"type":172,"value":1178},{"type":166,"tag":202,"props":5473,"children":5474},{"class":204,"line":1225},[5475,5479,5483,5488,5492,5496,5500,5504,5508,5512,5516,5520,5524,5528,5532],{"type":166,"tag":202,"props":5476,"children":5477},{"style":1464},[5478],{"type":172,"value":4701},{"type":166,"tag":202,"props":5480,"children":5481},{"style":442},[5482],{"type":172,"value":1096},{"type":166,"tag":202,"props":5484,"children":5485},{"style":760},[5486],{"type":172,"value":5487}," =>",{"type":166,"tag":202,"props":5489,"children":5490},{"style":448},[5491],{"type":172,"value":5384},{"type":166,"tag":202,"props":5493,"children":5494},{"style":1158},[5495],{"type":172,"value":456},{"type":166,"tag":202,"props":5497,"children":5498},{"style":436},[5499],{"type":172,"value":439},{"type":166,"tag":202,"props":5501,"children":5502},{"style":442},[5503],{"type":172,"value":445},{"type":166,"tag":202,"props":5505,"children":5506},{"style":448},[5507],{"type":172,"value":3402},{"type":166,"tag":202,"props":5509,"children":5510},{"style":1158},[5511],{"type":172,"value":456},{"type":166,"tag":202,"props":5513,"children":5514},{"style":2583},[5515],{"type":172,"value":5242},{"type":166,"tag":202,"props":5517,"children":5518},{"style":442},[5519],{"type":172,"value":445},{"type":166,"tag":202,"props":5521,"children":5522},{"style":1194},[5523],{"type":172,"value":2594},{"type":166,"tag":202,"props":5525,"children":5526},{"style":442},[5527],{"type":172,"value":472},{"type":166,"tag":202,"props":5529,"children":5530},{"style":436},[5531],{"type":172,"value":5271},{"type":166,"tag":202,"props":5533,"children":5534},{"style":1158},[5535],{"type":172,"value":5536},"))\n",{"type":166,"tag":202,"props":5538,"children":5539},{"class":204,"line":1262},[5540],{"type":166,"tag":202,"props":5541,"children":5542},{"style":442},[5543],{"type":172,"value":1187},{"type":166,"tag":202,"props":5545,"children":5546},{"class":204,"line":1270},[5547,5552,5557,5561,5565,5570,5574],{"type":166,"tag":202,"props":5548,"children":5549},{"style":760},[5550],{"type":172,"value":5551},"const",{"type":166,"tag":202,"props":5553,"children":5554},{"style":1194},[5555],{"type":172,"value":5556}," recovery",{"type":166,"tag":202,"props":5558,"children":5559},{"style":232},[5560],{"type":172,"value":1124},{"type":166,"tag":202,"props":5562,"children":5563},{"style":448},[5564],{"type":172,"value":5233},{"type":166,"tag":202,"props":5566,"children":5567},{"style":436},[5568],{"type":172,"value":5569},"(String",{"type":166,"tag":202,"props":5571,"children":5572},{"style":442},[5573],{"type":172,"value":472},{"type":166,"tag":202,"props":5575,"children":5576},{"style":442},[5577],{"type":172,"value":1101},{"type":166,"tag":202,"props":5579,"children":5580},{"class":204,"line":1297},[5581,5585,5589,5593,5597,5601,5605,5610,5614],{"type":166,"tag":202,"props":5582,"children":5583},{"style":448},[5584],{"type":172,"value":2481},{"type":166,"tag":202,"props":5586,"children":5587},{"style":442},[5588],{"type":172,"value":1620},{"type":166,"tag":202,"props":5590,"children":5591},{"style":760},[5592],{"type":172,"value":1214},{"type":166,"tag":202,"props":5594,"children":5595},{"style":442},[5596],{"type":172,"value":1693},{"type":166,"tag":202,"props":5598,"children":5599},{"style":1387},[5600],{"type":172,"value":5415},{"type":166,"tag":202,"props":5602,"children":5603},{"style":442},[5604],{"type":172,"value":472},{"type":166,"tag":202,"props":5606,"children":5607},{"style":1387},[5608],{"type":172,"value":5609}," prop",{"type":166,"tag":202,"props":5611,"children":5612},{"style":442},[5613],{"type":172,"value":1395},{"type":166,"tag":202,"props":5615,"children":5616},{"style":442},[5617],{"type":172,"value":1101},{"type":166,"tag":202,"props":5619,"children":5620},{"class":204,"line":1873},[5621,5625,5629,5633,5637,5641,5645,5649,5653],{"type":166,"tag":202,"props":5622,"children":5623},{"style":1464},[5624],{"type":172,"value":1754},{"type":166,"tag":202,"props":5626,"children":5627},{"style":1158},[5628],{"type":172,"value":1693},{"type":166,"tag":202,"props":5630,"children":5631},{"style":436},[5632],{"type":172,"value":2801},{"type":166,"tag":202,"props":5634,"children":5635},{"style":232},[5636],{"type":172,"value":1767},{"type":166,"tag":202,"props":5638,"children":5639},{"style":215},[5640],{"type":172,"value":218},{"type":166,"tag":202,"props":5642,"children":5643},{"style":221},[5644],{"type":172,"value":1486},{"type":166,"tag":202,"props":5646,"children":5647},{"style":215},[5648],{"type":172,"value":229},{"type":166,"tag":202,"props":5650,"children":5651},{"style":1158},[5652],{"type":172,"value":486},{"type":166,"tag":202,"props":5654,"children":5655},{"style":442},[5656],{"type":172,"value":1510},{"type":166,"tag":202,"props":5658,"children":5659},{"class":204,"line":1933},[5660,5665,5669,5673],{"type":166,"tag":202,"props":5661,"children":5662},{"style":1464},[5663],{"type":172,"value":5664},"      return",{"type":166,"tag":202,"props":5666,"children":5667},{"style":215},[5668],{"type":172,"value":218},{"type":166,"tag":202,"props":5670,"children":5671},{"style":221},[5672],{"type":172,"value":1486},{"type":166,"tag":202,"props":5674,"children":5675},{"style":215},[5676],{"type":172,"value":1137},{"type":166,"tag":202,"props":5678,"children":5679},{"class":204,"line":1994},[5680,5685,5690],{"type":166,"tag":202,"props":5681,"children":5682},{"style":442},[5683],{"type":172,"value":5684},"    }",{"type":166,"tag":202,"props":5686,"children":5687},{"style":1464},[5688],{"type":172,"value":5689}," else",{"type":166,"tag":202,"props":5691,"children":5692},{"style":442},[5693],{"type":172,"value":1101},{"type":166,"tag":202,"props":5695,"children":5696},{"class":204,"line":2035},[5697,5701,5706,5710,5715,5719,5723,5728],{"type":166,"tag":202,"props":5698,"children":5699},{"style":1464},[5700],{"type":172,"value":5664},{"type":166,"tag":202,"props":5702,"children":5703},{"style":436},[5704],{"type":172,"value":5705}," Reflect",{"type":166,"tag":202,"props":5707,"children":5708},{"style":442},[5709],{"type":172,"value":445},{"type":166,"tag":202,"props":5711,"children":5712},{"style":448},[5713],{"type":172,"value":5714},"get",{"type":166,"tag":202,"props":5716,"children":5717},{"style":1158},[5718],{"type":172,"value":456},{"type":166,"tag":202,"props":5720,"children":5721},{"style":232},[5722],{"type":172,"value":1048},{"type":166,"tag":202,"props":5724,"children":5725},{"style":3796},[5726],{"type":172,"value":5727},"arguments",{"type":166,"tag":202,"props":5729,"children":5730},{"style":1158},[5731],{"type":172,"value":1178},{"type":166,"tag":202,"props":5733,"children":5734},{"class":204,"line":2076},[5735],{"type":166,"tag":202,"props":5736,"children":5737},{"style":442},[5738],{"type":172,"value":2082},{"type":166,"tag":202,"props":5740,"children":5741},{"class":204,"line":2085},[5742],{"type":166,"tag":202,"props":5743,"children":5744},{"style":442},[5745],{"type":172,"value":1840},{"type":166,"tag":202,"props":5747,"children":5748},{"class":204,"line":2093},[5749,5753],{"type":166,"tag":202,"props":5750,"children":5751},{"style":442},[5752],{"type":172,"value":1434},{"type":166,"tag":202,"props":5754,"children":5755},{"style":436},[5756],{"type":172,"value":1178},{"type":166,"tag":202,"props":5758,"children":5760},{"class":204,"line":5759},17,[5761,5765,5769,5773,5777,5782,5786,5791],{"type":166,"tag":202,"props":5762,"children":5763},{"style":436},[5764],{"type":172,"value":4780},{"type":166,"tag":202,"props":5766,"children":5767},{"style":442},[5768],{"type":172,"value":445},{"type":166,"tag":202,"props":5770,"children":5771},{"style":448},[5772],{"type":172,"value":1155},{"type":166,"tag":202,"props":5774,"children":5775},{"style":436},[5776],{"type":172,"value":456},{"type":166,"tag":202,"props":5778,"children":5779},{"style":215},[5780],{"type":172,"value":5781},"''",{"type":166,"tag":202,"props":5783,"children":5784},{"style":442},[5785],{"type":172,"value":445},{"type":166,"tag":202,"props":5787,"children":5788},{"style":436},[5789],{"type":172,"value":5790},"test) ",{"type":166,"tag":202,"props":5792,"children":5793},{"style":489},[5794],{"type":172,"value":5795},"// test\n",{"type":166,"tag":174,"props":5797,"children":5799},{"id":5798},"元编程系统",[5800],{"type":172,"value":5798},{"type":166,"tag":180,"props":5802,"children":5803},{},[5804],{"type":172,"value":5805},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":166,"tag":167,"props":5807,"children":5809},{"id":5808},"结构化",[5810],{"type":172,"value":5808},{"type":166,"tag":174,"props":5812,"children":5814},{"id":5813},"概述",[5815],{"type":172,"value":5813},{"type":166,"tag":180,"props":5817,"children":5818},{},[5819],{"type":172,"value":5820},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":166,"tag":180,"props":5822,"children":5823},{},[5824],{"type":172,"value":5825},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":166,"tag":180,"props":5827,"children":5828},{},[5829],{"type":172,"value":5830},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":166,"tag":180,"props":5832,"children":5833},{},[5834],{"type":172,"value":5835},"面向对象解决了结构化带来诸多问题的三点：",{"type":166,"tag":280,"props":5837,"children":5838},{},[5839,5844,5849],{"type":166,"tag":284,"props":5840,"children":5841},{},[5842],{"type":172,"value":5843},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":166,"tag":284,"props":5845,"children":5846},{},[5847],{"type":172,"value":5848},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":166,"tag":284,"props":5850,"children":5851},{},[5852],{"type":172,"value":5853},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":166,"tag":180,"props":5855,"children":5856},{},[5857],{"type":172,"value":5858},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":166,"tag":180,"props":5860,"children":5861},{},[5862],{"type":172,"value":5863},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":166,"tag":174,"props":5865,"children":5867},{"id":5866},"基本的组织元素",[5868],{"type":172,"value":5866},{"type":166,"tag":180,"props":5870,"children":5871},{},[5872],{"type":172,"value":5873},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":166,"tag":775,"props":5875,"children":5876},{},[5877,5903],{"type":166,"tag":779,"props":5878,"children":5879},{},[5880],{"type":166,"tag":783,"props":5881,"children":5882},{},[5883,5888,5893,5898],{"type":166,"tag":787,"props":5884,"children":5885},{},[5886],{"type":172,"value":5887},"元素",{"type":166,"tag":787,"props":5889,"children":5890},{},[5891],{"type":172,"value":5892},"物理形态",{"type":166,"tag":787,"props":5894,"children":5895},{},[5896],{"type":172,"value":5897},"静态",{"type":166,"tag":787,"props":5899,"children":5900},{},[5901],{"type":172,"value":5902},"动态",{"type":166,"tag":798,"props":5904,"children":5905},{},[5906,5927,5950,5972],{"type":166,"tag":783,"props":5907,"children":5908},{},[5909,5914,5917,5922],{"type":166,"tag":805,"props":5910,"children":5911},{},[5912],{"type":172,"value":5913},"标识符",{"type":166,"tag":805,"props":5915,"children":5916},{},[],{"type":166,"tag":805,"props":5918,"children":5919},{},[5920],{"type":172,"value":5921},"变量声明、函数声明、类声明",{"type":166,"tag":805,"props":5923,"children":5924},{},[5925],{"type":172,"value":5926},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":166,"tag":783,"props":5928,"children":5929},{},[5930,5935,5940,5945],{"type":166,"tag":805,"props":5931,"children":5932},{},[5933],{"type":172,"value":5934},"表达式",{"type":166,"tag":805,"props":5936,"children":5937},{},[5938],{"type":172,"value":5939},"模板字符串",{"type":166,"tag":805,"props":5941,"children":5942},{},[5943],{"type":172,"value":5944},"值、箭头函数体",{"type":166,"tag":805,"props":5946,"children":5947},{},[5948],{"type":172,"value":5949},"通过 eval 执行表达式语句",{"type":166,"tag":783,"props":5951,"children":5952},{},[5953,5957,5962,5967],{"type":166,"tag":805,"props":5954,"children":5955},{},[5956],{"type":172,"value":1326},{"type":166,"tag":805,"props":5958,"children":5959},{},[5960],{"type":172,"value":5961},".js 文件",{"type":166,"tag":805,"props":5963,"children":5964},{},[5965],{"type":172,"value":5966},"块和块级作用域",{"type":166,"tag":805,"props":5968,"children":5969},{},[5970],{"type":172,"value":5971},"eval()",{"type":166,"tag":783,"props":5973,"children":5974},{},[5975,5979,5984,5989],{"type":166,"tag":805,"props":5976,"children":5977},{},[5978],{"type":172,"value":2111},{"type":166,"tag":805,"props":5980,"children":5981},{},[5982],{"type":172,"value":5983},".mjs 文件",{"type":166,"tag":805,"props":5985,"children":5986},{},[5987],{"type":172,"value":5988},"import、export、require()",{"type":166,"tag":805,"props":5990,"children":5991},{},[5992],{"type":172,"value":5993},"import().then()",{"type":166,"tag":180,"props":5995,"children":5996},{},[5997],{"type":172,"value":5998},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":166,"tag":180,"props":6000,"children":6001},{},[6002],{"type":172,"value":6003},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":166,"tag":180,"props":6005,"children":6006},{},[6007],{"type":172,"value":6008},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":166,"tag":180,"props":6010,"children":6011},{},[6012,6014,6019],{"type":172,"value":6013},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":166,"tag":202,"props":6015,"children":6016},{},[6017],{"type":172,"value":6018},"1,2,3",{"type":172,"value":6020}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":166,"tag":180,"props":6022,"children":6023},{},[6024],{"type":172,"value":6025},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":166,"tag":180,"props":6027,"children":6028},{},[6029],{"type":172,"value":6030},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":166,"tag":180,"props":6032,"children":6033},{},[6034],{"type":172,"value":6035},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":166,"tag":180,"props":6037,"children":6038},{},[6039],{"type":172,"value":6040},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":166,"tag":174,"props":6042,"children":6044},{"id":6043},"声明",[6045],{"type":172,"value":6043},{"type":166,"tag":180,"props":6047,"children":6048},{},[6049,6051,6062],{"type":172,"value":6050},"除了 const 和 namespace",{"type":166,"tag":259,"props":6052,"children":6053},{},[6054],{"type":166,"tag":263,"props":6055,"children":6059},{"href":6056,"ariaDescribedBy":6057,"dataFootnoteRef":160,"id":6058},"#user-content-fn-namespace",[267],"user-content-fnref-namespace",[6060],{"type":172,"value":6061},"4",{"type":172,"value":6063}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":166,"tag":191,"props":6065,"children":6067},{"className":424,"code":6066,"language":426,"meta":160,"style":160},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6068],{"type":166,"tag":198,"props":6069,"children":6070},{"__ignoreMap":160},[6071,6099,6115,6147,6169],{"type":166,"tag":202,"props":6072,"children":6073},{"class":204,"line":205},[6074,6079,6083,6087,6091,6095],{"type":166,"tag":202,"props":6075,"children":6076},{"style":232},[6077],{"type":172,"value":6078},"!",{"type":166,"tag":202,"props":6080,"children":6081},{"style":436},[6082],{"type":172,"value":456},{"type":166,"tag":202,"props":6084,"children":6085},{"style":760},[6086],{"type":172,"value":1086},{"type":166,"tag":202,"props":6088,"children":6089},{"style":448},[6090],{"type":172,"value":1786},{"type":166,"tag":202,"props":6092,"children":6093},{"style":442},[6094],{"type":172,"value":809},{"type":166,"tag":202,"props":6096,"children":6097},{"style":442},[6098],{"type":172,"value":1101},{"type":166,"tag":202,"props":6100,"children":6101},{"class":204,"line":495},[6102,6106,6110],{"type":166,"tag":202,"props":6103,"children":6104},{"style":436},[6105],{"type":172,"value":2534},{"type":166,"tag":202,"props":6107,"children":6108},{"style":232},[6109],{"type":172,"value":1124},{"type":166,"tag":202,"props":6111,"children":6112},{"style":464},[6113],{"type":172,"value":6114}," 100\n",{"type":166,"tag":202,"props":6116,"children":6117},{"class":204,"line":1140},[6118,6122,6126,6130,6134,6138,6142],{"type":166,"tag":202,"props":6119,"children":6120},{"style":436},[6121],{"type":172,"value":1146},{"type":166,"tag":202,"props":6123,"children":6124},{"style":442},[6125],{"type":172,"value":445},{"type":166,"tag":202,"props":6127,"children":6128},{"style":448},[6129],{"type":172,"value":1155},{"type":166,"tag":202,"props":6131,"children":6132},{"style":1158},[6133],{"type":172,"value":456},{"type":166,"tag":202,"props":6135,"children":6136},{"style":436},[6137],{"type":172,"value":1486},{"type":166,"tag":202,"props":6139,"children":6140},{"style":1158},[6141],{"type":172,"value":486},{"type":166,"tag":202,"props":6143,"children":6144},{"style":489},[6145],{"type":172,"value":6146},"// [Function ...]\n",{"type":166,"tag":202,"props":6148,"children":6149},{"class":204,"line":1181},[6150,6155,6159,6164],{"type":166,"tag":202,"props":6151,"children":6152},{"style":3796},[6153],{"type":172,"value":6154},"  arguments",{"type":166,"tag":202,"props":6156,"children":6157},{"style":232},[6158],{"type":172,"value":1124},{"type":166,"tag":202,"props":6160,"children":6161},{"style":1158},[6162],{"type":172,"value":6163}," [] ",{"type":166,"tag":202,"props":6165,"children":6166},{"style":489},[6167],{"type":172,"value":6168},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":166,"tag":202,"props":6170,"children":6171},{"class":204,"line":1190},[6172,6176],{"type":166,"tag":202,"props":6173,"children":6174},{"style":442},[6175],{"type":172,"value":1434},{"type":166,"tag":202,"props":6177,"children":6178},{"style":436},[6179],{"type":172,"value":6180},"())\n",{"type":166,"tag":180,"props":6182,"children":6183},{},[6184],{"type":172,"value":6185},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":166,"tag":191,"props":6187,"children":6189},{"className":424,"code":6188,"language":426,"meta":160,"style":160},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6190],{"type":166,"tag":198,"props":6191,"children":6192},{"__ignoreMap":160},[6193,6201,6220,6246,6274,6312],{"type":166,"tag":202,"props":6194,"children":6195},{"class":204,"line":205},[6196],{"type":166,"tag":202,"props":6197,"children":6198},{"style":489},[6199],{"type":172,"value":6200},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":166,"tag":202,"props":6202,"children":6203},{"class":204,"line":495},[6204,6208,6212,6216],{"type":166,"tag":202,"props":6205,"children":6206},{"style":760},[6207],{"type":172,"value":1086},{"type":166,"tag":202,"props":6209,"children":6210},{"style":448},[6211],{"type":172,"value":1786},{"type":166,"tag":202,"props":6213,"children":6214},{"style":442},[6215],{"type":172,"value":809},{"type":166,"tag":202,"props":6217,"children":6218},{"style":442},[6219],{"type":172,"value":1101},{"type":166,"tag":202,"props":6221,"children":6222},{"class":204,"line":1140},[6223,6228,6232,6237,6241],{"type":166,"tag":202,"props":6224,"children":6225},{"style":442},[6226],{"type":172,"value":6227},"  {",{"type":166,"tag":202,"props":6229,"children":6230},{"style":760},[6231],{"type":172,"value":1086},{"type":166,"tag":202,"props":6233,"children":6234},{"style":448},[6235],{"type":172,"value":6236}," x",{"type":166,"tag":202,"props":6238,"children":6239},{"style":442},[6240],{"type":172,"value":1096},{"type":166,"tag":202,"props":6242,"children":6243},{"style":442},[6244],{"type":172,"value":6245}," {}};\n",{"type":166,"tag":202,"props":6247,"children":6248},{"class":204,"line":1181},[6249,6253,6257,6261,6266,6270],{"type":166,"tag":202,"props":6250,"children":6251},{"style":1613},[6252],{"type":172,"value":2534},{"type":166,"tag":202,"props":6254,"children":6255},{"style":442},[6256],{"type":172,"value":1620},{"type":166,"tag":202,"props":6258,"children":6259},{"style":760},[6260],{"type":172,"value":1214},{"type":166,"tag":202,"props":6262,"children":6263},{"style":448},[6264],{"type":172,"value":6265}," y",{"type":166,"tag":202,"props":6267,"children":6268},{"style":442},[6269],{"type":172,"value":1096},{"type":166,"tag":202,"props":6271,"children":6272},{"style":442},[6273],{"type":172,"value":2892},{"type":166,"tag":202,"props":6275,"children":6276},{"class":204,"line":1190},[6277,6282,6286,6291,6295,6299,6304,6308],{"type":166,"tag":202,"props":6278,"children":6279},{"style":1464},[6280],{"type":172,"value":6281},"  if",{"type":166,"tag":202,"props":6283,"children":6284},{"style":1158},[6285],{"type":172,"value":1693},{"type":166,"tag":202,"props":6287,"children":6288},{"style":599},[6289],{"type":172,"value":6290},"true",{"type":166,"tag":202,"props":6292,"children":6293},{"style":1158},[6294],{"type":172,"value":486},{"type":166,"tag":202,"props":6296,"children":6297},{"style":760},[6298],{"type":172,"value":1086},{"type":166,"tag":202,"props":6300,"children":6301},{"style":448},[6302],{"type":172,"value":6303}," z",{"type":166,"tag":202,"props":6305,"children":6306},{"style":442},[6307],{"type":172,"value":1096},{"type":166,"tag":202,"props":6309,"children":6310},{"style":442},[6311],{"type":172,"value":2892},{"type":166,"tag":202,"props":6313,"children":6314},{"class":204,"line":1225},[6315],{"type":166,"tag":202,"props":6316,"children":6317},{"style":442},[6318],{"type":172,"value":1187},{"type":166,"tag":174,"props":6320,"children":6322},{"id":6321},"语句与代码分块",[6323],{"type":172,"value":6321},{"type":166,"tag":180,"props":6325,"children":6326},{},[6327],{"type":172,"value":6328},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":166,"tag":180,"props":6330,"children":6331},{},[6332],{"type":172,"value":6333},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":166,"tag":180,"props":6335,"children":6336},{},[6337,6339,6350],{"type":172,"value":6338},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":166,"tag":259,"props":6340,"children":6341},{},[6342],{"type":166,"tag":263,"props":6343,"children":6347},{"href":6344,"ariaDescribedBy":6345,"dataFootnoteRef":160,"id":6346},"#user-content-fn-iterationenv",[267],"user-content-fnref-iterationenv",[6348],{"type":172,"value":6349},"5",{"type":172,"value":6351},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":166,"tag":180,"props":6353,"children":6354},{},[6355],{"type":172,"value":6356},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":166,"tag":180,"props":6358,"children":6359},{},[6360],{"type":172,"value":6361},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":166,"tag":191,"props":6363,"children":6365},{"className":424,"code":6364,"language":426,"meta":160,"style":160},"eval(`if (true) ; else ;`) // undefined\n",[6366],{"type":166,"tag":198,"props":6367,"children":6368},{"__ignoreMap":160},[6369],{"type":166,"tag":202,"props":6370,"children":6371},{"class":204,"line":205},[6372,6377,6381,6386,6391,6395,6399],{"type":166,"tag":202,"props":6373,"children":6374},{"style":448},[6375],{"type":172,"value":6376},"eval",{"type":166,"tag":202,"props":6378,"children":6379},{"style":436},[6380],{"type":172,"value":456},{"type":166,"tag":202,"props":6382,"children":6383},{"style":215},[6384],{"type":172,"value":6385},"`",{"type":166,"tag":202,"props":6387,"children":6388},{"style":221},[6389],{"type":172,"value":6390},"if (true) ; else ;",{"type":166,"tag":202,"props":6392,"children":6393},{"style":215},[6394],{"type":172,"value":6385},{"type":166,"tag":202,"props":6396,"children":6397},{"style":436},[6398],{"type":172,"value":486},{"type":166,"tag":202,"props":6400,"children":6401},{"style":489},[6402],{"type":172,"value":726},{"type":166,"tag":174,"props":6404,"children":6406},{"id":6405},"组织形式分块的方法",[6407],{"type":172,"value":6405},{"type":166,"tag":180,"props":6409,"children":6410},{},[6411],{"type":172,"value":6412},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":166,"tag":180,"props":6414,"children":6415},{},[6416],{"type":172,"value":6417},"数据声明语句中存在块级作用域，如：",{"type":166,"tag":191,"props":6419,"children":6421},{"className":424,"code":6420,"language":426,"meta":160,"style":160},"const x = 1, y = x\nconsole.log(y) // 1\n",[6422],{"type":166,"tag":198,"props":6423,"children":6424},{"__ignoreMap":160},[6425,6460],{"type":166,"tag":202,"props":6426,"children":6427},{"class":204,"line":205},[6428,6432,6436,6440,6444,6448,6452,6456],{"type":166,"tag":202,"props":6429,"children":6430},{"style":760},[6431],{"type":172,"value":5551},{"type":166,"tag":202,"props":6433,"children":6434},{"style":1194},[6435],{"type":172,"value":6236},{"type":166,"tag":202,"props":6437,"children":6438},{"style":232},[6439],{"type":172,"value":1124},{"type":166,"tag":202,"props":6441,"children":6442},{"style":464},[6443],{"type":172,"value":1570},{"type":166,"tag":202,"props":6445,"children":6446},{"style":442},[6447],{"type":172,"value":472},{"type":166,"tag":202,"props":6449,"children":6450},{"style":1194},[6451],{"type":172,"value":6265},{"type":166,"tag":202,"props":6453,"children":6454},{"style":232},[6455],{"type":172,"value":1124},{"type":166,"tag":202,"props":6457,"children":6458},{"style":436},[6459],{"type":172,"value":768},{"type":166,"tag":202,"props":6461,"children":6462},{"class":204,"line":495},[6463,6467,6471,6475,6480],{"type":166,"tag":202,"props":6464,"children":6465},{"style":436},[6466],{"type":172,"value":4780},{"type":166,"tag":202,"props":6468,"children":6469},{"style":442},[6470],{"type":172,"value":445},{"type":166,"tag":202,"props":6472,"children":6473},{"style":448},[6474],{"type":172,"value":1155},{"type":166,"tag":202,"props":6476,"children":6477},{"style":436},[6478],{"type":172,"value":6479},"(y) ",{"type":166,"tag":202,"props":6481,"children":6482},{"style":489},[6483],{"type":172,"value":6484},"// 1\n",{"type":166,"tag":180,"props":6486,"children":6487},{},[6488],{"type":172,"value":6489},"表达式级别的作用域只存在于 eval 调用中。",{"type":166,"tag":180,"props":6491,"children":6492},{},[6493],{"type":172,"value":6494},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":166,"tag":191,"props":6496,"children":6498},{"className":424,"code":6497,"language":426,"meta":160,"style":160},"if (1) let x = 1\n",[6499],{"type":166,"tag":198,"props":6500,"children":6501},{"__ignoreMap":160},[6502],{"type":166,"tag":202,"props":6503,"children":6504},{"class":204,"line":205},[6505,6510,6514,6518,6522,6526,6530,6534],{"type":166,"tag":202,"props":6506,"children":6507},{"style":1464},[6508],{"type":172,"value":6509},"if",{"type":166,"tag":202,"props":6511,"children":6512},{"style":436},[6513],{"type":172,"value":1693},{"type":166,"tag":202,"props":6515,"children":6516},{"style":464},[6517],{"type":172,"value":271},{"type":166,"tag":202,"props":6519,"children":6520},{"style":436},[6521],{"type":172,"value":486},{"type":166,"tag":202,"props":6523,"children":6524},{"style":760},[6525],{"type":172,"value":763},{"type":166,"tag":202,"props":6527,"children":6528},{"style":436},[6529],{"type":172,"value":721},{"type":166,"tag":202,"props":6531,"children":6532},{"style":232},[6533],{"type":172,"value":1635},{"type":166,"tag":202,"props":6535,"children":6536},{"style":464},[6537],{"type":172,"value":6538}," 1\n",{"type":166,"tag":180,"props":6540,"children":6541},{},[6542],{"type":172,"value":6543},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":166,"tag":180,"props":6545,"children":6546},{},[6547],{"type":172,"value":6548},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":166,"tag":180,"props":6550,"children":6551},{},[6552],{"type":172,"value":6553},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":166,"tag":280,"props":6555,"children":6556},{},[6557,6562,6567],{"type":166,"tag":284,"props":6558,"children":6559},{},[6560],{"type":172,"value":6561},"词法作用域互不相交。",{"type":166,"tag":284,"props":6563,"children":6564},{},[6565],{"type":172,"value":6566},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":166,"tag":284,"props":6568,"children":6569},{},[6570],{"type":172,"value":6571},"高级别流程变更语句可以跨越低级别的作用域。",{"type":166,"tag":180,"props":6573,"children":6574},{},[6575],{"type":172,"value":6576},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":166,"tag":174,"props":6578,"children":6580},{"id":6579},"层次结构程序设计",[6581],{"type":172,"value":6579},{"type":166,"tag":180,"props":6583,"children":6584},{},[6585],{"type":172,"value":6586},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":166,"tag":191,"props":6588,"children":6590},{"className":424,"code":6589,"language":426,"meta":160,"style":160},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6591],{"type":166,"tag":198,"props":6592,"children":6593},{"__ignoreMap":160},[6594,6633],{"type":166,"tag":202,"props":6595,"children":6596},{"class":204,"line":205},[6597,6601,6606,6610,6615,6619,6624,6628],{"type":166,"tag":202,"props":6598,"children":6599},{"style":760},[6600],{"type":172,"value":5551},{"type":166,"tag":202,"props":6602,"children":6603},{"style":1194},[6604],{"type":172,"value":6605}," method",{"type":166,"tag":202,"props":6607,"children":6608},{"style":232},[6609],{"type":172,"value":1124},{"type":166,"tag":202,"props":6611,"children":6612},{"style":436},[6613],{"type":172,"value":6614}," obj[Object",{"type":166,"tag":202,"props":6616,"children":6617},{"style":442},[6618],{"type":172,"value":445},{"type":166,"tag":202,"props":6620,"children":6621},{"style":436},[6622],{"type":172,"value":6623},"getPropertySymbols[",{"type":166,"tag":202,"props":6625,"children":6626},{"style":464},[6627],{"type":172,"value":467},{"type":166,"tag":202,"props":6629,"children":6630},{"style":436},[6631],{"type":172,"value":6632},"]]\n",{"type":166,"tag":202,"props":6634,"children":6635},{"class":204,"line":495},[6636,6640,6644,6649],{"type":166,"tag":202,"props":6637,"children":6638},{"style":436},[6639],{"type":172,"value":3514},{"type":166,"tag":202,"props":6641,"children":6642},{"style":442},[6643],{"type":172,"value":445},{"type":166,"tag":202,"props":6645,"children":6646},{"style":448},[6647],{"type":172,"value":6648},"call",{"type":166,"tag":202,"props":6650,"children":6651},{"style":436},[6652],{"type":172,"value":6653},"(obj)\n",{"type":166,"tag":180,"props":6655,"children":6656},{},[6657],{"type":172,"value":6658},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":166,"tag":174,"props":6660,"children":6662},{"id":6661},"变量作用域",[6663],{"type":172,"value":6661},{"type":166,"tag":180,"props":6665,"children":6666},{},[6667],{"type":172,"value":6668},"变量作用域有三个特殊之处：",{"type":166,"tag":280,"props":6670,"children":6671},{},[6672,6677,6682],{"type":166,"tag":284,"props":6673,"children":6674},{},[6675],{"type":172,"value":6676},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":166,"tag":284,"props":6678,"children":6679},{},[6680],{"type":172,"value":6681},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":166,"tag":284,"props":6683,"children":6684},{},[6685],{"type":172,"value":6686},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":166,"tag":180,"props":6688,"children":6689},{},[6690],{"type":172,"value":6691},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":166,"tag":180,"props":6693,"children":6694},{},[6695],{"type":172,"value":6696},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":166,"tag":174,"props":6698,"children":6700},{"id":6699},"私有属性和私有字段的纷争",[6701],{"type":172,"value":6699},{"type":166,"tag":180,"props":6703,"children":6704},{},[6705],{"type":172,"value":6706},"(_　_)。゜zｚＺ",{"type":166,"tag":167,"props":6708,"children":6710},{"id":6709},"函数式语言特性",[6711],{"type":172,"value":6709},{"type":166,"tag":174,"props":6713,"children":6715},{"id":6714},"概述-1",[6716],{"type":172,"value":5813},{"type":166,"tag":180,"props":6718,"children":6719},{},[6720],{"type":172,"value":6721},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":166,"tag":180,"props":6723,"children":6724},{},[6725],{"type":172,"value":6726},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":166,"tag":174,"props":6728,"children":6730},{"id":6729},"js中的函数",[6731],{"type":172,"value":6732},"JS中的函数",{"type":166,"tag":180,"props":6734,"children":6735},{},[6736],{"type":172,"value":6737},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":166,"tag":280,"props":6739,"children":6740},{},[6741,6746,6751],{"type":166,"tag":284,"props":6742,"children":6743},{},[6744],{"type":172,"value":6745},"无法显式使用“use strict”切换到严格模式。",{"type":166,"tag":284,"props":6747,"children":6748},{},[6749],{"type":172,"value":6750},"不接受重名参数。",{"type":166,"tag":284,"props":6752,"children":6753},{},[6754],{"type":172,"value":6755},"形参和 arguments 之间将解除绑定关系。",{"type":166,"tag":180,"props":6757,"children":6758},{},[6759],{"type":172,"value":6760},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":166,"tag":191,"props":6762,"children":6764},{"className":424,"code":6763,"language":426,"meta":160,"style":160},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[6765],{"type":166,"tag":198,"props":6766,"children":6767},{"__ignoreMap":160},[6768,6812,6865,6872],{"type":166,"tag":202,"props":6769,"children":6770},{"class":204,"line":205},[6771,6775,6779,6783,6787,6791,6796,6800,6804,6808],{"type":166,"tag":202,"props":6772,"children":6773},{"style":760},[6774],{"type":172,"value":1086},{"type":166,"tag":202,"props":6776,"children":6777},{"style":448},[6778],{"type":172,"value":1786},{"type":166,"tag":202,"props":6780,"children":6781},{"style":442},[6782],{"type":172,"value":456},{"type":166,"tag":202,"props":6784,"children":6785},{"style":1387},[6786],{"type":172,"value":263},{"type":166,"tag":202,"props":6788,"children":6789},{"style":442},[6790],{"type":172,"value":472},{"type":166,"tag":202,"props":6792,"children":6793},{"style":1387},[6794],{"type":172,"value":6795}," b",{"type":166,"tag":202,"props":6797,"children":6798},{"style":232},[6799],{"type":172,"value":1124},{"type":166,"tag":202,"props":6801,"children":6802},{"style":464},[6803],{"type":172,"value":1570},{"type":166,"tag":202,"props":6805,"children":6806},{"style":442},[6807],{"type":172,"value":1395},{"type":166,"tag":202,"props":6809,"children":6810},{"style":442},[6811],{"type":172,"value":1101},{"type":166,"tag":202,"props":6813,"children":6814},{"class":204,"line":495},[6815,6819,6823,6827,6831,6835,6839,6844,6848,6853,6857,6861],{"type":166,"tag":202,"props":6816,"children":6817},{"style":436},[6818],{"type":172,"value":1146},{"type":166,"tag":202,"props":6820,"children":6821},{"style":442},[6822],{"type":172,"value":445},{"type":166,"tag":202,"props":6824,"children":6825},{"style":448},[6826],{"type":172,"value":1155},{"type":166,"tag":202,"props":6828,"children":6829},{"style":1158},[6830],{"type":172,"value":456},{"type":166,"tag":202,"props":6832,"children":6833},{"style":436},[6834],{"type":172,"value":1486},{"type":166,"tag":202,"props":6836,"children":6837},{"style":442},[6838],{"type":172,"value":445},{"type":166,"tag":202,"props":6840,"children":6841},{"style":1194},[6842],{"type":172,"value":6843},"length",{"type":166,"tag":202,"props":6845,"children":6846},{"style":442},[6847],{"type":172,"value":472},{"type":166,"tag":202,"props":6849,"children":6850},{"style":3796},[6851],{"type":172,"value":6852}," arguments",{"type":166,"tag":202,"props":6854,"children":6855},{"style":442},[6856],{"type":172,"value":445},{"type":166,"tag":202,"props":6858,"children":6859},{"style":1194},[6860],{"type":172,"value":6843},{"type":166,"tag":202,"props":6862,"children":6863},{"style":1158},[6864],{"type":172,"value":1178},{"type":166,"tag":202,"props":6866,"children":6867},{"class":204,"line":1140},[6868],{"type":166,"tag":202,"props":6869,"children":6870},{"style":442},[6871],{"type":172,"value":1187},{"type":166,"tag":202,"props":6873,"children":6874},{"class":204,"line":1181},[6875,6879,6883,6887,6891,6896,6900],{"type":166,"tag":202,"props":6876,"children":6877},{"style":448},[6878],{"type":172,"value":1486},{"type":166,"tag":202,"props":6880,"children":6881},{"style":436},[6882],{"type":172,"value":456},{"type":166,"tag":202,"props":6884,"children":6885},{"style":464},[6886],{"type":172,"value":271},{"type":166,"tag":202,"props":6888,"children":6889},{"style":442},[6890],{"type":172,"value":472},{"type":166,"tag":202,"props":6892,"children":6893},{"style":464},[6894],{"type":172,"value":6895}," 2",{"type":166,"tag":202,"props":6897,"children":6898},{"style":436},[6899],{"type":172,"value":486},{"type":166,"tag":202,"props":6901,"children":6902},{"style":489},[6903],{"type":172,"value":6904},"// 1，2\n",{"type":166,"tag":180,"props":6906,"children":6907},{},[6908,6910,6921],{"type":172,"value":6909},"表达式最后返回的是值而不是引用",{"type":166,"tag":259,"props":6911,"children":6912},{},[6913],{"type":166,"tag":263,"props":6914,"children":6918},{"href":6915,"ariaDescribedBy":6916,"dataFootnoteRef":160,"id":6917},"#user-content-fn-reference",[267],"user-content-fnref-reference",[6919],{"type":172,"value":6920},"6",{"type":172,"value":6922},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":166,"tag":191,"props":6924,"children":6926},{"className":424,"code":6925,"language":426,"meta":160,"style":160},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[6927],{"type":166,"tag":198,"props":6928,"children":6929},{"__ignoreMap":160},[6930,6955,6974,6995,7011,7048,7055,7062,7099],{"type":166,"tag":202,"props":6931,"children":6932},{"class":204,"line":205},[6933,6938,6942,6947,6951],{"type":166,"tag":202,"props":6934,"children":6935},{"style":436},[6936],{"type":172,"value":6937},"window",{"type":166,"tag":202,"props":6939,"children":6940},{"style":442},[6941],{"type":172,"value":445},{"type":166,"tag":202,"props":6943,"children":6944},{"style":436},[6945],{"type":172,"value":6946},"x ",{"type":166,"tag":202,"props":6948,"children":6949},{"style":232},[6950],{"type":172,"value":1635},{"type":166,"tag":202,"props":6952,"children":6953},{"style":464},[6954],{"type":172,"value":6538},{"type":166,"tag":202,"props":6956,"children":6957},{"class":204,"line":495},[6958,6962,6966,6970],{"type":166,"tag":202,"props":6959,"children":6960},{"style":760},[6961],{"type":172,"value":5551},{"type":166,"tag":202,"props":6963,"children":6964},{"style":1194},[6965],{"type":172,"value":2984},{"type":166,"tag":202,"props":6967,"children":6968},{"style":232},[6969],{"type":172,"value":1124},{"type":166,"tag":202,"props":6971,"children":6972},{"style":442},[6973],{"type":172,"value":1101},{"type":166,"tag":202,"props":6975,"children":6976},{"class":204,"line":1140},[6977,6982,6986,6990],{"type":166,"tag":202,"props":6978,"children":6979},{"style":1158},[6980],{"type":172,"value":6981},"  x",{"type":166,"tag":202,"props":6983,"children":6984},{"style":442},[6985],{"type":172,"value":1620},{"type":166,"tag":202,"props":6987,"children":6988},{"style":464},[6989],{"type":172,"value":6895},{"type":166,"tag":202,"props":6991,"children":6992},{"style":442},[6993],{"type":172,"value":6994},",\n",{"type":166,"tag":202,"props":6996,"children":6997},{"class":204,"line":1181},[6998,7003,7007],{"type":166,"tag":202,"props":6999,"children":7000},{"style":2420},[7001],{"type":172,"value":7002},"  b",{"type":166,"tag":202,"props":7004,"children":7005},{"style":442},[7006],{"type":172,"value":1096},{"type":166,"tag":202,"props":7008,"children":7009},{"style":442},[7010],{"type":172,"value":1101},{"type":166,"tag":202,"props":7012,"children":7013},{"class":204,"line":1190},[7014,7019,7023,7027,7031,7036,7040,7044],{"type":166,"tag":202,"props":7015,"children":7016},{"style":436},[7017],{"type":172,"value":7018},"    console",{"type":166,"tag":202,"props":7020,"children":7021},{"style":442},[7022],{"type":172,"value":445},{"type":166,"tag":202,"props":7024,"children":7025},{"style":448},[7026],{"type":172,"value":1155},{"type":166,"tag":202,"props":7028,"children":7029},{"style":1158},[7030],{"type":172,"value":456},{"type":166,"tag":202,"props":7032,"children":7033},{"style":1107},[7034],{"type":172,"value":7035},"this",{"type":166,"tag":202,"props":7037,"children":7038},{"style":442},[7039],{"type":172,"value":445},{"type":166,"tag":202,"props":7041,"children":7042},{"style":436},[7043],{"type":172,"value":2431},{"type":166,"tag":202,"props":7045,"children":7046},{"style":1158},[7047],{"type":172,"value":1178},{"type":166,"tag":202,"props":7049,"children":7050},{"class":204,"line":1225},[7051],{"type":166,"tag":202,"props":7052,"children":7053},{"style":442},[7054],{"type":172,"value":1840},{"type":166,"tag":202,"props":7056,"children":7057},{"class":204,"line":1262},[7058],{"type":166,"tag":202,"props":7059,"children":7060},{"style":442},[7061],{"type":172,"value":1187},{"type":166,"tag":202,"props":7063,"children":7064},{"class":204,"line":1270},[7065,7069,7073,7077,7082,7086,7090,7094],{"type":166,"tag":202,"props":7066,"children":7067},{"style":436},[7068],{"type":172,"value":4780},{"type":166,"tag":202,"props":7070,"children":7071},{"style":442},[7072],{"type":172,"value":445},{"type":166,"tag":202,"props":7074,"children":7075},{"style":448},[7076],{"type":172,"value":1155},{"type":166,"tag":202,"props":7078,"children":7079},{"style":436},[7080],{"type":172,"value":7081},"(a",{"type":166,"tag":202,"props":7083,"children":7084},{"style":442},[7085],{"type":172,"value":445},{"type":166,"tag":202,"props":7087,"children":7088},{"style":448},[7089],{"type":172,"value":1119},{"type":166,"tag":202,"props":7091,"children":7092},{"style":436},[7093],{"type":172,"value":575},{"type":166,"tag":202,"props":7095,"children":7096},{"style":489},[7097],{"type":172,"value":7098},"// 2\n",{"type":166,"tag":202,"props":7100,"children":7101},{"class":204,"line":1297},[7102,7106,7110,7114,7119,7123,7127,7131,7135,7140],{"type":166,"tag":202,"props":7103,"children":7104},{"style":436},[7105],{"type":172,"value":4780},{"type":166,"tag":202,"props":7107,"children":7108},{"style":442},[7109],{"type":172,"value":445},{"type":166,"tag":202,"props":7111,"children":7112},{"style":448},[7113],{"type":172,"value":1155},{"type":166,"tag":202,"props":7115,"children":7116},{"style":436},[7117],{"type":172,"value":7118},"((",{"type":166,"tag":202,"props":7120,"children":7121},{"style":464},[7122],{"type":172,"value":467},{"type":166,"tag":202,"props":7124,"children":7125},{"style":442},[7126],{"type":172,"value":472},{"type":166,"tag":202,"props":7128,"children":7129},{"style":436},[7130],{"type":172,"value":2984},{"type":166,"tag":202,"props":7132,"children":7133},{"style":442},[7134],{"type":172,"value":445},{"type":166,"tag":202,"props":7136,"children":7137},{"style":436},[7138],{"type":172,"value":7139},"b)()) ",{"type":166,"tag":202,"props":7141,"children":7142},{"style":489},[7143],{"type":172,"value":6484},{"type":166,"tag":180,"props":7145,"children":7146},{},[7147],{"type":172,"value":7148},"具名函数在表达式中时不会声明标识符。",{"type":166,"tag":180,"props":7150,"children":7151},{},[7152],{"type":172,"value":7153},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":166,"tag":191,"props":7155,"children":7157},{"className":424,"code":7156,"language":426,"meta":160,"style":160},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7158],{"type":166,"tag":198,"props":7159,"children":7160},{"__ignoreMap":160},[7161,7180,7208,7223,7230,7258],{"type":166,"tag":202,"props":7162,"children":7163},{"class":204,"line":205},[7164,7168,7172,7176],{"type":166,"tag":202,"props":7165,"children":7166},{"style":760},[7167],{"type":172,"value":5551},{"type":166,"tag":202,"props":7169,"children":7170},{"style":1194},[7171],{"type":172,"value":2984},{"type":166,"tag":202,"props":7173,"children":7174},{"style":232},[7175],{"type":172,"value":1124},{"type":166,"tag":202,"props":7177,"children":7178},{"style":442},[7179],{"type":172,"value":1101},{"type":166,"tag":202,"props":7181,"children":7182},{"class":204,"line":495},[7183,7187,7191,7195,7199,7203],{"type":166,"tag":202,"props":7184,"children":7185},{"style":448},[7186],{"type":172,"value":7002},{"type":166,"tag":202,"props":7188,"children":7189},{"style":442},[7190],{"type":172,"value":1620},{"type":166,"tag":202,"props":7192,"children":7193},{"style":760},[7194],{"type":172,"value":1214},{"type":166,"tag":202,"props":7196,"children":7197},{"style":448},[7198],{"type":172,"value":1786},{"type":166,"tag":202,"props":7200,"children":7201},{"style":442},[7202],{"type":172,"value":809},{"type":166,"tag":202,"props":7204,"children":7205},{"style":442},[7206],{"type":172,"value":7207}," {},\n",{"type":166,"tag":202,"props":7209,"children":7210},{"class":204,"line":1140},[7211,7215,7219],{"type":166,"tag":202,"props":7212,"children":7213},{"style":2420},[7214],{"type":172,"value":2534},{"type":166,"tag":202,"props":7216,"children":7217},{"style":442},[7218],{"type":172,"value":809},{"type":166,"tag":202,"props":7220,"children":7221},{"style":442},[7222],{"type":172,"value":2892},{"type":166,"tag":202,"props":7224,"children":7225},{"class":204,"line":1181},[7226],{"type":166,"tag":202,"props":7227,"children":7228},{"style":442},[7229],{"type":172,"value":1187},{"type":166,"tag":202,"props":7231,"children":7232},{"class":204,"line":1190},[7233,7237,7241,7245,7249,7253],{"type":166,"tag":202,"props":7234,"children":7235},{"style":232},[7236],{"type":172,"value":1276},{"type":166,"tag":202,"props":7238,"children":7239},{"style":436},[7240],{"type":172,"value":2984},{"type":166,"tag":202,"props":7242,"children":7243},{"style":442},[7244],{"type":172,"value":445},{"type":166,"tag":202,"props":7246,"children":7247},{"style":448},[7248],{"type":172,"value":1119},{"type":166,"tag":202,"props":7250,"children":7251},{"style":436},[7252],{"type":172,"value":591},{"type":166,"tag":202,"props":7254,"children":7255},{"style":489},[7256],{"type":172,"value":7257},"// {}\n",{"type":166,"tag":202,"props":7259,"children":7260},{"class":204,"line":1225},[7261,7265,7269,7273,7277,7281],{"type":166,"tag":202,"props":7262,"children":7263},{"style":232},[7264],{"type":172,"value":1276},{"type":166,"tag":202,"props":7266,"children":7267},{"style":436},[7268],{"type":172,"value":2984},{"type":166,"tag":202,"props":7270,"children":7271},{"style":442},[7272],{"type":172,"value":445},{"type":166,"tag":202,"props":7274,"children":7275},{"style":448},[7276],{"type":172,"value":1486},{"type":166,"tag":202,"props":7278,"children":7279},{"style":436},[7280],{"type":172,"value":591},{"type":166,"tag":202,"props":7282,"children":7283},{"style":489},[7284],{"type":172,"value":3001},{"type":166,"tag":180,"props":7286,"children":7287},{},[7288],{"type":172,"value":7289},"方法的特性总结以下三点：",{"type":166,"tag":280,"props":7291,"children":7292},{},[7293,7298,7303],{"type":166,"tag":284,"props":7294,"children":7295},{},[7296],{"type":172,"value":7297},"不能作为构造器。",{"type":166,"tag":284,"props":7299,"children":7300},{},[7301],{"type":172,"value":7302},"除了生成器方法，没有内部原型。",{"type":166,"tag":284,"props":7304,"children":7305},{},[7306],{"type":172,"value":7307},"方法不能具名。",{"type":166,"tag":180,"props":7309,"children":7310},{},[7311],{"type":172,"value":7312},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":166,"tag":191,"props":7314,"children":7316},{"className":424,"code":7315,"language":426,"meta":160,"style":160},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7317],{"type":166,"tag":198,"props":7318,"children":7319},{"__ignoreMap":160},[7320],{"type":166,"tag":202,"props":7321,"children":7322},{"class":204,"line":205},[7323,7327,7331,7335,7340,7344,7348,7352,7356],{"type":166,"tag":202,"props":7324,"children":7325},{"style":436},[7326],{"type":172,"value":439},{"type":166,"tag":202,"props":7328,"children":7329},{"style":442},[7330],{"type":172,"value":445},{"type":166,"tag":202,"props":7332,"children":7333},{"style":448},[7334],{"type":172,"value":3402},{"type":166,"tag":202,"props":7336,"children":7337},{"style":436},[7338],{"type":172,"value":7339},"(boundFn",{"type":166,"tag":202,"props":7341,"children":7342},{"style":442},[7343],{"type":172,"value":472},{"type":166,"tag":202,"props":7345,"children":7346},{"style":436},[7347],{"type":172,"value":3873},{"type":166,"tag":202,"props":7349,"children":7350},{"style":442},[7351],{"type":172,"value":445},{"type":166,"tag":202,"props":7353,"children":7354},{"style":448},[7355],{"type":172,"value":5288},{"type":166,"tag":202,"props":7357,"children":7358},{"style":436},[7359],{"type":172,"value":7360},"(targetFn))\n",{"type":166,"tag":180,"props":7362,"children":7363},{},[7364],{"type":172,"value":7365},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":166,"tag":191,"props":7367,"children":7369},{"className":424,"code":7368,"language":426,"meta":160,"style":160},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7370],{"type":166,"tag":198,"props":7371,"children":7372},{"__ignoreMap":160},[7373,7392,7435,7442],{"type":166,"tag":202,"props":7374,"children":7375},{"class":204,"line":205},[7376,7380,7384,7388],{"type":166,"tag":202,"props":7377,"children":7378},{"style":760},[7379],{"type":172,"value":1086},{"type":166,"tag":202,"props":7381,"children":7382},{"style":448},[7383],{"type":172,"value":2984},{"type":166,"tag":202,"props":7385,"children":7386},{"style":442},[7387],{"type":172,"value":1096},{"type":166,"tag":202,"props":7389,"children":7390},{"style":442},[7391],{"type":172,"value":1101},{"type":166,"tag":202,"props":7393,"children":7394},{"class":204,"line":495},[7395,7399,7403,7407,7411,7415,7419,7423,7427,7431],{"type":166,"tag":202,"props":7396,"children":7397},{"style":436},[7398],{"type":172,"value":1146},{"type":166,"tag":202,"props":7400,"children":7401},{"style":442},[7402],{"type":172,"value":445},{"type":166,"tag":202,"props":7404,"children":7405},{"style":448},[7406],{"type":172,"value":1155},{"type":166,"tag":202,"props":7408,"children":7409},{"style":1158},[7410],{"type":172,"value":456},{"type":166,"tag":202,"props":7412,"children":7413},{"style":232},[7414],{"type":172,"value":1276},{"type":166,"tag":202,"props":7416,"children":7417},{"style":442},[7418],{"type":172,"value":445},{"type":166,"tag":202,"props":7420,"children":7421},{"style":1194},[7422],{"type":172,"value":5415},{"type":166,"tag":202,"props":7424,"children":7425},{"style":232},[7426],{"type":172,"value":1767},{"type":166,"tag":202,"props":7428,"children":7429},{"style":436},[7430],{"type":172,"value":2984},{"type":166,"tag":202,"props":7432,"children":7433},{"style":1158},[7434],{"type":172,"value":1178},{"type":166,"tag":202,"props":7436,"children":7437},{"class":204,"line":1140},[7438],{"type":166,"tag":202,"props":7439,"children":7440},{"style":442},[7441],{"type":172,"value":1187},{"type":166,"tag":202,"props":7443,"children":7444},{"class":204,"line":1181},[7445,7449,7453,7457,7461,7465,7470,7474,7479,7484],{"type":166,"tag":202,"props":7446,"children":7447},{"style":436},[7448],{"type":172,"value":4780},{"type":166,"tag":202,"props":7450,"children":7451},{"style":442},[7452],{"type":172,"value":445},{"type":166,"tag":202,"props":7454,"children":7455},{"style":448},[7456],{"type":172,"value":1155},{"type":166,"tag":202,"props":7458,"children":7459},{"style":436},[7460],{"type":172,"value":456},{"type":166,"tag":202,"props":7462,"children":7463},{"style":232},[7464],{"type":172,"value":1276},{"type":166,"tag":202,"props":7466,"children":7467},{"style":436},[7468],{"type":172,"value":7469}," (a",{"type":166,"tag":202,"props":7471,"children":7472},{"style":442},[7473],{"type":172,"value":445},{"type":166,"tag":202,"props":7475,"children":7476},{"style":448},[7477],{"type":172,"value":7478},"bind",{"type":166,"tag":202,"props":7480,"children":7481},{"style":436},[7482],{"type":172,"value":7483},"())) ",{"type":166,"tag":202,"props":7485,"children":7486},{"style":489},[7487],{"type":172,"value":536},{"type":166,"tag":180,"props":7489,"children":7490},{},[7491],{"type":172,"value":7492},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":166,"tag":180,"props":7494,"children":7495},{},[7496],{"type":172,"value":7497},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":166,"tag":191,"props":7499,"children":7501},{"className":424,"code":7500,"language":426,"meta":160,"style":160},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7502],{"type":166,"tag":198,"props":7503,"children":7504},{"__ignoreMap":160},[7505,7524,7545,7570,7600,7632,7660,7686,7714,7730,7782,7790,7797,7820,7827,7834],{"type":166,"tag":202,"props":7506,"children":7507},{"class":204,"line":205},[7508,7512,7516,7520],{"type":166,"tag":202,"props":7509,"children":7510},{"style":760},[7511],{"type":172,"value":5551},{"type":166,"tag":202,"props":7513,"children":7514},{"style":1194},[7515],{"type":172,"value":2401},{"type":166,"tag":202,"props":7517,"children":7518},{"style":232},[7519],{"type":172,"value":1124},{"type":166,"tag":202,"props":7521,"children":7522},{"style":442},[7523],{"type":172,"value":1101},{"type":166,"tag":202,"props":7525,"children":7526},{"class":204,"line":495},[7527,7532,7536,7541],{"type":166,"tag":202,"props":7528,"children":7529},{"style":1158},[7530],{"type":172,"value":7531},"  step",{"type":166,"tag":202,"props":7533,"children":7534},{"style":442},[7535],{"type":172,"value":1620},{"type":166,"tag":202,"props":7537,"children":7538},{"style":464},[7539],{"type":172,"value":7540}," 0",{"type":166,"tag":202,"props":7542,"children":7543},{"style":442},[7544],{"type":172,"value":6994},{"type":166,"tag":202,"props":7546,"children":7547},{"class":204,"line":1140},[7548,7553,7557,7562,7566],{"type":166,"tag":202,"props":7549,"children":7550},{"style":2420},[7551],{"type":172,"value":7552},"  run",{"type":166,"tag":202,"props":7554,"children":7555},{"style":442},[7556],{"type":172,"value":1693},{"type":166,"tag":202,"props":7558,"children":7559},{"style":1387},[7560],{"type":172,"value":7561},"init",{"type":166,"tag":202,"props":7563,"children":7564},{"style":442},[7565],{"type":172,"value":1395},{"type":166,"tag":202,"props":7567,"children":7568},{"style":442},[7569],{"type":172,"value":1101},{"type":166,"tag":202,"props":7571,"children":7572},{"class":204,"line":1181},[7573,7578,7584,7588,7592,7596],{"type":166,"tag":202,"props":7574,"children":7575},{"style":760},[7576],{"type":172,"value":7577},"    const",{"type":166,"tag":202,"props":7579,"children":7581},{"style":7580},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7582],{"type":172,"value":7583}," exec",{"type":166,"tag":202,"props":7585,"children":7586},{"style":232},[7587],{"type":172,"value":1124},{"type":166,"tag":202,"props":7589,"children":7590},{"style":1387},[7591],{"type":172,"value":6236},{"type":166,"tag":202,"props":7593,"children":7594},{"style":760},[7595],{"type":172,"value":5487},{"type":166,"tag":202,"props":7597,"children":7598},{"style":442},[7599],{"type":172,"value":1101},{"type":166,"tag":202,"props":7601,"children":7602},{"class":204,"line":1190},[7603,7607,7611,7615,7620,7624,7628],{"type":166,"tag":202,"props":7604,"children":7605},{"style":1464},[7606],{"type":172,"value":2000},{"type":166,"tag":202,"props":7608,"children":7609},{"style":1158},[7610],{"type":172,"value":1693},{"type":166,"tag":202,"props":7612,"children":7613},{"style":436},[7614],{"type":172,"value":2431},{"type":166,"tag":202,"props":7616,"children":7617},{"style":232},[7618],{"type":172,"value":7619}," >",{"type":166,"tag":202,"props":7621,"children":7622},{"style":464},[7623],{"type":172,"value":7540},{"type":166,"tag":202,"props":7625,"children":7626},{"style":1158},[7627],{"type":172,"value":486},{"type":166,"tag":202,"props":7629,"children":7630},{"style":442},[7631],{"type":172,"value":1510},{"type":166,"tag":202,"props":7633,"children":7634},{"class":204,"line":1225},[7635,7640,7644,7648,7652,7656],{"type":166,"tag":202,"props":7636,"children":7637},{"style":436},[7638],{"type":172,"value":7639},"        console",{"type":166,"tag":202,"props":7641,"children":7642},{"style":442},[7643],{"type":172,"value":445},{"type":166,"tag":202,"props":7645,"children":7646},{"style":448},[7647],{"type":172,"value":1155},{"type":166,"tag":202,"props":7649,"children":7650},{"style":1158},[7651],{"type":172,"value":456},{"type":166,"tag":202,"props":7653,"children":7654},{"style":436},[7655],{"type":172,"value":2431},{"type":166,"tag":202,"props":7657,"children":7658},{"style":1158},[7659],{"type":172,"value":1178},{"type":166,"tag":202,"props":7661,"children":7662},{"class":204,"line":1262},[7663,7668,7672,7677,7682],{"type":166,"tag":202,"props":7664,"children":7665},{"style":1107},[7666],{"type":172,"value":7667},"        this",{"type":166,"tag":202,"props":7669,"children":7670},{"style":442},[7671],{"type":172,"value":445},{"type":166,"tag":202,"props":7673,"children":7674},{"style":436},[7675],{"type":172,"value":7676},"step",{"type":166,"tag":202,"props":7678,"children":7679},{"style":232},[7680],{"type":172,"value":7681}," +=",{"type":166,"tag":202,"props":7683,"children":7684},{"style":464},[7685],{"type":172,"value":6538},{"type":166,"tag":202,"props":7687,"children":7688},{"class":204,"line":1270},[7689,7694,7698,7702,7706,7710],{"type":166,"tag":202,"props":7690,"children":7691},{"style":448},[7692],{"type":172,"value":7693},"        exec",{"type":166,"tag":202,"props":7695,"children":7696},{"style":1158},[7697],{"type":172,"value":456},{"type":166,"tag":202,"props":7699,"children":7700},{"style":436},[7701],{"type":172,"value":2431},{"type":166,"tag":202,"props":7703,"children":7704},{"style":232},[7705],{"type":172,"value":477},{"type":166,"tag":202,"props":7707,"children":7708},{"style":464},[7709],{"type":172,"value":1570},{"type":166,"tag":202,"props":7711,"children":7712},{"style":1158},[7713],{"type":172,"value":1178},{"type":166,"tag":202,"props":7715,"children":7716},{"class":204,"line":1297},[7717,7722,7726],{"type":166,"tag":202,"props":7718,"children":7719},{"style":442},[7720],{"type":172,"value":7721},"      }",{"type":166,"tag":202,"props":7723,"children":7724},{"style":1464},[7725],{"type":172,"value":5689},{"type":166,"tag":202,"props":7727,"children":7728},{"style":442},[7729],{"type":172,"value":1101},{"type":166,"tag":202,"props":7731,"children":7732},{"class":204,"line":1873},[7733,7737,7741,7745,7749,7753,7758,7762,7766,7770,7774,7778],{"type":166,"tag":202,"props":7734,"children":7735},{"style":436},[7736],{"type":172,"value":7639},{"type":166,"tag":202,"props":7738,"children":7739},{"style":442},[7740],{"type":172,"value":445},{"type":166,"tag":202,"props":7742,"children":7743},{"style":448},[7744],{"type":172,"value":1155},{"type":166,"tag":202,"props":7746,"children":7747},{"style":1158},[7748],{"type":172,"value":456},{"type":166,"tag":202,"props":7750,"children":7751},{"style":215},[7752],{"type":172,"value":229},{"type":166,"tag":202,"props":7754,"children":7755},{"style":221},[7756],{"type":172,"value":7757},"steps: ",{"type":166,"tag":202,"props":7759,"children":7760},{"style":215},[7761],{"type":172,"value":229},{"type":166,"tag":202,"props":7763,"children":7764},{"style":442},[7765],{"type":172,"value":472},{"type":166,"tag":202,"props":7767,"children":7768},{"style":1107},[7769],{"type":172,"value":3552},{"type":166,"tag":202,"props":7771,"children":7772},{"style":442},[7773],{"type":172,"value":445},{"type":166,"tag":202,"props":7775,"children":7776},{"style":436},[7777],{"type":172,"value":7676},{"type":166,"tag":202,"props":7779,"children":7780},{"style":1158},[7781],{"type":172,"value":1178},{"type":166,"tag":202,"props":7783,"children":7784},{"class":204,"line":1933},[7785],{"type":166,"tag":202,"props":7786,"children":7787},{"style":442},[7788],{"type":172,"value":7789},"      }\n",{"type":166,"tag":202,"props":7791,"children":7792},{"class":204,"line":1994},[7793],{"type":166,"tag":202,"props":7794,"children":7795},{"style":442},[7796],{"type":172,"value":2082},{"type":166,"tag":202,"props":7798,"children":7799},{"class":204,"line":2035},[7800,7804,7808,7812,7816],{"type":166,"tag":202,"props":7801,"children":7802},{"style":1464},[7803],{"type":172,"value":2498},{"type":166,"tag":202,"props":7805,"children":7806},{"style":448},[7807],{"type":172,"value":7583},{"type":166,"tag":202,"props":7809,"children":7810},{"style":1158},[7811],{"type":172,"value":456},{"type":166,"tag":202,"props":7813,"children":7814},{"style":436},[7815],{"type":172,"value":7561},{"type":166,"tag":202,"props":7817,"children":7818},{"style":1158},[7819],{"type":172,"value":1178},{"type":166,"tag":202,"props":7821,"children":7822},{"class":204,"line":2076},[7823],{"type":166,"tag":202,"props":7824,"children":7825},{"style":442},[7826],{"type":172,"value":1840},{"type":166,"tag":202,"props":7828,"children":7829},{"class":204,"line":2085},[7830],{"type":166,"tag":202,"props":7831,"children":7832},{"style":442},[7833],{"type":172,"value":1187},{"type":166,"tag":202,"props":7835,"children":7836},{"class":204,"line":2093},[7837,7842,7846,7851,7855,7860,7864],{"type":166,"tag":202,"props":7838,"children":7839},{"style":436},[7840],{"type":172,"value":7841},"obj",{"type":166,"tag":202,"props":7843,"children":7844},{"style":442},[7845],{"type":172,"value":445},{"type":166,"tag":202,"props":7847,"children":7848},{"style":448},[7849],{"type":172,"value":7850},"run",{"type":166,"tag":202,"props":7852,"children":7853},{"style":436},[7854],{"type":172,"value":456},{"type":166,"tag":202,"props":7856,"children":7857},{"style":464},[7858],{"type":172,"value":7859},"10",{"type":166,"tag":202,"props":7861,"children":7862},{"style":436},[7863],{"type":172,"value":486},{"type":166,"tag":202,"props":7865,"children":7866},{"style":489},[7867],{"type":172,"value":7868},"// steps: 10\n",{"type":166,"tag":174,"props":7870,"children":7872},{"id":7871},"函数的行为",[7873],{"type":172,"value":7871},{"type":166,"tag":180,"props":7875,"children":7876},{},[7877],{"type":172,"value":7878},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":166,"tag":180,"props":7880,"children":7881},{},[7882],{"type":172,"value":7883},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":166,"tag":180,"props":7885,"children":7886},{},[7887],{"type":172,"value":7888},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":166,"tag":180,"props":7890,"children":7891},{},[7892],{"type":172,"value":7893},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":166,"tag":191,"props":7895,"children":7897},{"className":424,"code":7896,"language":426,"meta":160,"style":160},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[7898],{"type":166,"tag":198,"props":7899,"children":7900},{"__ignoreMap":160},[7901,7926,7938,7950,7962,7973,7990,8026,8033,8040,8064,8076,8123,8156,8201,8216,8252,8273,8281,8289,8298,8307],{"type":166,"tag":202,"props":7902,"children":7903},{"class":204,"line":205},[7904,7908,7913,7918,7922],{"type":166,"tag":202,"props":7905,"children":7906},{"style":760},[7907],{"type":172,"value":1086},{"type":166,"tag":202,"props":7909,"children":7910},{"style":232},[7911],{"type":172,"value":7912},"*",{"type":166,"tag":202,"props":7914,"children":7915},{"style":448},[7916],{"type":172,"value":7917}," GetThisDone",{"type":166,"tag":202,"props":7919,"children":7920},{"style":442},[7921],{"type":172,"value":809},{"type":166,"tag":202,"props":7923,"children":7924},{"style":442},[7925],{"type":172,"value":1101},{"type":166,"tag":202,"props":7927,"children":7928},{"class":204,"line":495},[7929,7934],{"type":166,"tag":202,"props":7930,"children":7931},{"style":1464},[7932],{"type":172,"value":7933},"  try",{"type":166,"tag":202,"props":7935,"children":7936},{"style":442},[7937],{"type":172,"value":1101},{"type":166,"tag":202,"props":7939,"children":7940},{"class":204,"line":1140},[7941,7946],{"type":166,"tag":202,"props":7942,"children":7943},{"style":1464},[7944],{"type":172,"value":7945},"    yield",{"type":166,"tag":202,"props":7947,"children":7948},{"style":464},[7949],{"type":172,"value":6538},{"type":166,"tag":202,"props":7951,"children":7952},{"class":204,"line":1181},[7953,7957],{"type":166,"tag":202,"props":7954,"children":7955},{"style":1464},[7956],{"type":172,"value":7945},{"type":166,"tag":202,"props":7958,"children":7959},{"style":464},[7960],{"type":172,"value":7961}," 10\n",{"type":166,"tag":202,"props":7963,"children":7964},{"class":204,"line":1190},[7965,7969],{"type":166,"tag":202,"props":7966,"children":7967},{"style":1464},[7968],{"type":172,"value":7945},{"type":166,"tag":202,"props":7970,"children":7971},{"style":464},[7972],{"type":172,"value":6538},{"type":166,"tag":202,"props":7974,"children":7975},{"class":204,"line":1225},[7976,7981,7986],{"type":166,"tag":202,"props":7977,"children":7978},{"style":442},[7979],{"type":172,"value":7980},"  }",{"type":166,"tag":202,"props":7982,"children":7983},{"style":1464},[7984],{"type":172,"value":7985}," finally",{"type":166,"tag":202,"props":7987,"children":7988},{"style":442},[7989],{"type":172,"value":1101},{"type":166,"tag":202,"props":7991,"children":7992},{"class":204,"line":1262},[7993,7997,8001,8005,8009,8013,8018,8022],{"type":166,"tag":202,"props":7994,"children":7995},{"style":436},[7996],{"type":172,"value":7018},{"type":166,"tag":202,"props":7998,"children":7999},{"style":442},[8000],{"type":172,"value":445},{"type":166,"tag":202,"props":8002,"children":8003},{"style":448},[8004],{"type":172,"value":1155},{"type":166,"tag":202,"props":8006,"children":8007},{"style":1158},[8008],{"type":172,"value":456},{"type":166,"tag":202,"props":8010,"children":8011},{"style":215},[8012],{"type":172,"value":229},{"type":166,"tag":202,"props":8014,"children":8015},{"style":221},[8016],{"type":172,"value":8017},"done",{"type":166,"tag":202,"props":8019,"children":8020},{"style":215},[8021],{"type":172,"value":229},{"type":166,"tag":202,"props":8023,"children":8024},{"style":1158},[8025],{"type":172,"value":1178},{"type":166,"tag":202,"props":8027,"children":8028},{"class":204,"line":1270},[8029],{"type":166,"tag":202,"props":8030,"children":8031},{"style":442},[8032],{"type":172,"value":1840},{"type":166,"tag":202,"props":8034,"children":8035},{"class":204,"line":1297},[8036],{"type":166,"tag":202,"props":8037,"children":8038},{"style":442},[8039],{"type":172,"value":1187},{"type":166,"tag":202,"props":8041,"children":8042},{"class":204,"line":1873},[8043,8047,8052,8056,8060],{"type":166,"tag":202,"props":8044,"children":8045},{"style":760},[8046],{"type":172,"value":5551},{"type":166,"tag":202,"props":8048,"children":8049},{"style":1194},[8050],{"type":172,"value":8051}," get",{"type":166,"tag":202,"props":8053,"children":8054},{"style":232},[8055],{"type":172,"value":1124},{"type":166,"tag":202,"props":8057,"children":8058},{"style":448},[8059],{"type":172,"value":7917},{"type":166,"tag":202,"props":8061,"children":8062},{"style":436},[8063],{"type":172,"value":3101},{"type":166,"tag":202,"props":8065,"children":8066},{"class":204,"line":1933},[8067,8071],{"type":166,"tag":202,"props":8068,"children":8069},{"style":760},[8070],{"type":172,"value":763},{"type":166,"tag":202,"props":8072,"children":8073},{"style":436},[8074],{"type":172,"value":8075}," val\n",{"type":166,"tag":202,"props":8077,"children":8078},{"class":204,"line":1994},[8079,8084,8089,8093,8097,8101,8106,8110,8114,8119],{"type":166,"tag":202,"props":8080,"children":8081},{"style":1464},[8082],{"type":172,"value":8083},"while",{"type":166,"tag":202,"props":8085,"children":8086},{"style":436},[8087],{"type":172,"value":8088}," (val ",{"type":166,"tag":202,"props":8090,"children":8091},{"style":232},[8092],{"type":172,"value":1635},{"type":166,"tag":202,"props":8094,"children":8095},{"style":436},[8096],{"type":172,"value":8051},{"type":166,"tag":202,"props":8098,"children":8099},{"style":442},[8100],{"type":172,"value":445},{"type":166,"tag":202,"props":8102,"children":8103},{"style":448},[8104],{"type":172,"value":8105},"next",{"type":166,"tag":202,"props":8107,"children":8108},{"style":436},[8109],{"type":172,"value":809},{"type":166,"tag":202,"props":8111,"children":8112},{"style":442},[8113],{"type":172,"value":445},{"type":166,"tag":202,"props":8115,"children":8116},{"style":436},[8117],{"type":172,"value":8118},"value) ",{"type":166,"tag":202,"props":8120,"children":8121},{"style":442},[8122],{"type":172,"value":1510},{"type":166,"tag":202,"props":8124,"children":8125},{"class":204,"line":2035},[8126,8130,8134,8139,8143,8148,8152],{"type":166,"tag":202,"props":8127,"children":8128},{"style":1464},[8129],{"type":172,"value":6281},{"type":166,"tag":202,"props":8131,"children":8132},{"style":1158},[8133],{"type":172,"value":1693},{"type":166,"tag":202,"props":8135,"children":8136},{"style":436},[8137],{"type":172,"value":8138},"val",{"type":166,"tag":202,"props":8140,"children":8141},{"style":232},[8142],{"type":172,"value":1721},{"type":166,"tag":202,"props":8144,"children":8145},{"style":464},[8146],{"type":172,"value":8147}," 10",{"type":166,"tag":202,"props":8149,"children":8150},{"style":1158},[8151],{"type":172,"value":486},{"type":166,"tag":202,"props":8153,"children":8154},{"style":442},[8155],{"type":172,"value":1510},{"type":166,"tag":202,"props":8157,"children":8158},{"class":204,"line":2076},[8159,8163,8167,8171,8175,8179,8184,8188,8192,8197],{"type":166,"tag":202,"props":8160,"children":8161},{"style":436},[8162],{"type":172,"value":7018},{"type":166,"tag":202,"props":8164,"children":8165},{"style":442},[8166],{"type":172,"value":445},{"type":166,"tag":202,"props":8168,"children":8169},{"style":448},[8170],{"type":172,"value":1155},{"type":166,"tag":202,"props":8172,"children":8173},{"style":1158},[8174],{"type":172,"value":456},{"type":166,"tag":202,"props":8176,"children":8177},{"style":215},[8178],{"type":172,"value":229},{"type":166,"tag":202,"props":8180,"children":8181},{"style":221},[8182],{"type":172,"value":8183},"right val:",{"type":166,"tag":202,"props":8185,"children":8186},{"style":215},[8187],{"type":172,"value":229},{"type":166,"tag":202,"props":8189,"children":8190},{"style":442},[8191],{"type":172,"value":472},{"type":166,"tag":202,"props":8193,"children":8194},{"style":436},[8195],{"type":172,"value":8196}," val",{"type":166,"tag":202,"props":8198,"children":8199},{"style":1158},[8200],{"type":172,"value":1178},{"type":166,"tag":202,"props":8202,"children":8203},{"class":204,"line":2085},[8204,8208,8212],{"type":166,"tag":202,"props":8205,"children":8206},{"style":442},[8207],{"type":172,"value":7980},{"type":166,"tag":202,"props":8209,"children":8210},{"style":1464},[8211],{"type":172,"value":5689},{"type":166,"tag":202,"props":8213,"children":8214},{"style":442},[8215],{"type":172,"value":1101},{"type":166,"tag":202,"props":8217,"children":8218},{"class":204,"line":2093},[8219,8223,8227,8231,8235,8239,8244,8248],{"type":166,"tag":202,"props":8220,"children":8221},{"style":436},[8222],{"type":172,"value":7018},{"type":166,"tag":202,"props":8224,"children":8225},{"style":442},[8226],{"type":172,"value":445},{"type":166,"tag":202,"props":8228,"children":8229},{"style":448},[8230],{"type":172,"value":1155},{"type":166,"tag":202,"props":8232,"children":8233},{"style":1158},[8234],{"type":172,"value":456},{"type":166,"tag":202,"props":8236,"children":8237},{"style":215},[8238],{"type":172,"value":229},{"type":166,"tag":202,"props":8240,"children":8241},{"style":221},[8242],{"type":172,"value":8243},"wrong val",{"type":166,"tag":202,"props":8245,"children":8246},{"style":215},[8247],{"type":172,"value":229},{"type":166,"tag":202,"props":8249,"children":8250},{"style":1158},[8251],{"type":172,"value":1178},{"type":166,"tag":202,"props":8253,"children":8254},{"class":204,"line":5759},[8255,8260,8264,8269],{"type":166,"tag":202,"props":8256,"children":8257},{"style":436},[8258],{"type":172,"value":8259},"    get",{"type":166,"tag":202,"props":8261,"children":8262},{"style":442},[8263],{"type":172,"value":445},{"type":166,"tag":202,"props":8265,"children":8266},{"style":448},[8267],{"type":172,"value":8268},"return",{"type":166,"tag":202,"props":8270,"children":8271},{"style":1158},[8272],{"type":172,"value":3101},{"type":166,"tag":202,"props":8274,"children":8276},{"class":204,"line":8275},18,[8277],{"type":166,"tag":202,"props":8278,"children":8279},{"style":442},[8280],{"type":172,"value":1840},{"type":166,"tag":202,"props":8282,"children":8284},{"class":204,"line":8283},19,[8285],{"type":166,"tag":202,"props":8286,"children":8287},{"style":442},[8288],{"type":172,"value":1187},{"type":166,"tag":202,"props":8290,"children":8292},{"class":204,"line":8291},20,[8293],{"type":166,"tag":202,"props":8294,"children":8295},{"style":489},[8296],{"type":172,"value":8297},"// right val: 1\n",{"type":166,"tag":202,"props":8299,"children":8301},{"class":204,"line":8300},21,[8302],{"type":166,"tag":202,"props":8303,"children":8304},{"style":489},[8305],{"type":172,"value":8306},"// wrong val\n",{"type":166,"tag":202,"props":8308,"children":8310},{"class":204,"line":8309},22,[8311],{"type":166,"tag":202,"props":8312,"children":8313},{"style":489},[8314],{"type":172,"value":8315},"// done\n",{"type":166,"tag":174,"props":8317,"children":8319},{"id":8318},"闭包",[8320],{"type":172,"value":8318},{"type":166,"tag":180,"props":8322,"children":8323},{},[8324],{"type":172,"value":8325},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":166,"tag":180,"props":8327,"children":8328},{},[8329],{"type":172,"value":8330},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":166,"tag":280,"props":8332,"children":8333},{},[8334,8339,8344],{"type":166,"tag":284,"props":8335,"children":8336},{},[8337],{"type":172,"value":8338},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":166,"tag":284,"props":8340,"children":8341},{},[8342],{"type":172,"value":8343},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":166,"tag":284,"props":8345,"children":8346},{},[8347],{"type":172,"value":8348},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":166,"tag":180,"props":8350,"children":8351},{},[8352],{"type":172,"value":8353},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":166,"tag":191,"props":8355,"children":8357},{"className":424,"code":8356,"language":426,"meta":160,"style":160},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8358],{"type":166,"tag":198,"props":8359,"children":8360},{"__ignoreMap":160},[8361,8380,8395,8402,8413],{"type":166,"tag":202,"props":8362,"children":8363},{"class":204,"line":205},[8364,8368,8372,8376],{"type":166,"tag":202,"props":8365,"children":8366},{"style":760},[8367],{"type":172,"value":1086},{"type":166,"tag":202,"props":8369,"children":8370},{"style":448},[8371],{"type":172,"value":1786},{"type":166,"tag":202,"props":8373,"children":8374},{"style":442},[8375],{"type":172,"value":1096},{"type":166,"tag":202,"props":8377,"children":8378},{"style":442},[8379],{"type":172,"value":1101},{"type":166,"tag":202,"props":8381,"children":8382},{"class":204,"line":495},[8383,8387,8391],{"type":166,"tag":202,"props":8384,"children":8385},{"style":436},[8386],{"type":172,"value":2534},{"type":166,"tag":202,"props":8388,"children":8389},{"style":232},[8390],{"type":172,"value":1124},{"type":166,"tag":202,"props":8392,"children":8393},{"style":464},[8394],{"type":172,"value":6538},{"type":166,"tag":202,"props":8396,"children":8397},{"class":204,"line":1140},[8398],{"type":166,"tag":202,"props":8399,"children":8400},{"style":442},[8401],{"type":172,"value":1187},{"type":166,"tag":202,"props":8403,"children":8404},{"class":204,"line":1181},[8405,8409],{"type":166,"tag":202,"props":8406,"children":8407},{"style":448},[8408],{"type":172,"value":1486},{"type":166,"tag":202,"props":8410,"children":8411},{"style":436},[8412],{"type":172,"value":3101},{"type":166,"tag":202,"props":8414,"children":8415},{"class":204,"line":1190},[8416,8420,8424,8428,8432,8436,8441],{"type":166,"tag":202,"props":8417,"children":8418},{"style":436},[8419],{"type":172,"value":4780},{"type":166,"tag":202,"props":8421,"children":8422},{"style":442},[8423],{"type":172,"value":445},{"type":166,"tag":202,"props":8425,"children":8426},{"style":448},[8427],{"type":172,"value":1155},{"type":166,"tag":202,"props":8429,"children":8430},{"style":436},[8431],{"type":172,"value":456},{"type":166,"tag":202,"props":8433,"children":8434},{"style":232},[8435],{"type":172,"value":716},{"type":166,"tag":202,"props":8437,"children":8438},{"style":436},[8439],{"type":172,"value":8440}," test) ",{"type":166,"tag":202,"props":8442,"children":8443},{"style":489},[8444],{"type":172,"value":8445},"// number\n",{"type":166,"tag":180,"props":8447,"children":8448},{},[8449],{"type":172,"value":8450},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":166,"tag":180,"props":8452,"children":8453},{},[8454],{"type":172,"value":8455},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":166,"tag":191,"props":8457,"children":8459},{"className":424,"code":8458,"language":426,"meta":160,"style":160},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8460],{"type":166,"tag":198,"props":8461,"children":8462},{"__ignoreMap":160},[8463,8499,8519,8536,8556,8579,8595,8602],{"type":166,"tag":202,"props":8464,"children":8465},{"class":204,"line":205},[8466,8470,8474,8478,8482,8487,8491,8495],{"type":166,"tag":202,"props":8467,"children":8468},{"style":760},[8469],{"type":172,"value":763},{"type":166,"tag":202,"props":8471,"children":8472},{"style":436},[8473],{"type":172,"value":2904},{"type":166,"tag":202,"props":8475,"children":8476},{"style":232},[8477],{"type":172,"value":1635},{"type":166,"tag":202,"props":8479,"children":8480},{"style":442},[8481],{"type":172,"value":1472},{"type":166,"tag":202,"props":8483,"children":8484},{"style":1158},[8485],{"type":172,"value":8486}," value",{"type":166,"tag":202,"props":8488,"children":8489},{"style":442},[8490],{"type":172,"value":1620},{"type":166,"tag":202,"props":8492,"children":8493},{"style":464},[8494],{"type":172,"value":271},{"type":166,"tag":202,"props":8496,"children":8497},{"style":442},[8498],{"type":172,"value":2931},{"type":166,"tag":202,"props":8500,"children":8501},{"class":204,"line":495},[8502,8506,8511,8515],{"type":166,"tag":202,"props":8503,"children":8504},{"style":760},[8505],{"type":172,"value":763},{"type":166,"tag":202,"props":8507,"children":8508},{"style":436},[8509],{"type":172,"value":8510}," b ",{"type":166,"tag":202,"props":8512,"children":8513},{"style":232},[8514],{"type":172,"value":1635},{"type":166,"tag":202,"props":8516,"children":8517},{"style":464},[8518],{"type":172,"value":6538},{"type":166,"tag":202,"props":8520,"children":8521},{"class":204,"line":1140},[8522,8527,8532],{"type":166,"tag":202,"props":8523,"children":8524},{"style":1464},[8525],{"type":172,"value":8526},"with",{"type":166,"tag":202,"props":8528,"children":8529},{"style":436},[8530],{"type":172,"value":8531}," (a) ",{"type":166,"tag":202,"props":8533,"children":8534},{"style":442},[8535],{"type":172,"value":1510},{"type":166,"tag":202,"props":8537,"children":8538},{"class":204,"line":1181},[8539,8544,8548,8552],{"type":166,"tag":202,"props":8540,"children":8541},{"style":760},[8542],{"type":172,"value":8543}," var",{"type":166,"tag":202,"props":8545,"children":8546},{"style":436},[8547],{"type":172,"value":8486},{"type":166,"tag":202,"props":8549,"children":8550},{"style":232},[8551],{"type":172,"value":1124},{"type":166,"tag":202,"props":8553,"children":8554},{"style":464},[8555],{"type":172,"value":6114},{"type":166,"tag":202,"props":8557,"children":8558},{"class":204,"line":1190},[8559,8563,8567,8571,8575],{"type":166,"tag":202,"props":8560,"children":8561},{"style":436},[8562],{"type":172,"value":2984},{"type":166,"tag":202,"props":8564,"children":8565},{"style":442},[8566],{"type":172,"value":445},{"type":166,"tag":202,"props":8568,"children":8569},{"style":436},[8570],{"type":172,"value":1119},{"type":166,"tag":202,"props":8572,"children":8573},{"style":232},[8574],{"type":172,"value":1124},{"type":166,"tag":202,"props":8576,"children":8577},{"style":464},[8578],{"type":172,"value":6538},{"type":166,"tag":202,"props":8580,"children":8581},{"class":204,"line":1225},[8582,8586,8590],{"type":166,"tag":202,"props":8583,"children":8584},{"style":436},[8585],{"type":172,"value":6795},{"type":166,"tag":202,"props":8587,"children":8588},{"style":232},[8589],{"type":172,"value":1124},{"type":166,"tag":202,"props":8591,"children":8592},{"style":464},[8593],{"type":172,"value":8594}," 2\n",{"type":166,"tag":202,"props":8596,"children":8597},{"class":204,"line":1262},[8598],{"type":166,"tag":202,"props":8599,"children":8600},{"style":442},[8601],{"type":172,"value":1187},{"type":166,"tag":202,"props":8603,"children":8604},{"class":204,"line":1270},[8605,8609,8613,8617,8621,8625,8629,8633,8638],{"type":166,"tag":202,"props":8606,"children":8607},{"style":436},[8608],{"type":172,"value":4780},{"type":166,"tag":202,"props":8610,"children":8611},{"style":442},[8612],{"type":172,"value":445},{"type":166,"tag":202,"props":8614,"children":8615},{"style":448},[8616],{"type":172,"value":1155},{"type":166,"tag":202,"props":8618,"children":8619},{"style":436},[8620],{"type":172,"value":7081},{"type":166,"tag":202,"props":8622,"children":8623},{"style":442},[8624],{"type":172,"value":472},{"type":166,"tag":202,"props":8626,"children":8627},{"style":436},[8628],{"type":172,"value":6795},{"type":166,"tag":202,"props":8630,"children":8631},{"style":442},[8632],{"type":172,"value":472},{"type":166,"tag":202,"props":8634,"children":8635},{"style":436},[8636],{"type":172,"value":8637}," value) ",{"type":166,"tag":202,"props":8639,"children":8640},{"style":489},[8641],{"type":172,"value":8642},"// { value:100, b:2 }, 1, undefined\n",{"type":166,"tag":180,"props":8644,"children":8645},{},[8646],{"type":172,"value":8647},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":166,"tag":180,"props":8649,"children":8650},{},[8651],{"type":172,"value":8652},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":166,"tag":180,"props":8654,"children":8655},{},[8656],{"type":172,"value":8657},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":166,"tag":180,"props":8659,"children":8660},{},[8661],{"type":172,"value":8662},"闭包内标识符系统的优先级规则：",{"type":166,"tag":280,"props":8664,"children":8665},{},[8666,8671,8676],{"type":166,"tag":284,"props":8667,"children":8668},{},[8669],{"type":172,"value":8670},"内部函数声明 > 函数参数名列表",{"type":166,"tag":284,"props":8672,"children":8673},{},[8674],{"type":172,"value":8675},"参数中的 arguments 名字 > 函数的 arguments",{"type":166,"tag":284,"props":8677,"children":8678},{},[8679],{"type":172,"value":8680},"var 声明的名字如果已存在，则不再创建新变量",{"type":166,"tag":180,"props":8682,"children":8683},{},[8684],{"type":172,"value":8685},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":166,"tag":167,"props":8687,"children":8689},{"id":8688},"动态语言特性",[8690],{"type":172,"value":8688},{"type":166,"tag":174,"props":8692,"children":8694},{"id":8693},"概述-2",[8695],{"type":172,"value":5813},{"type":166,"tag":180,"props":8697,"children":8698},{},[8699],{"type":172,"value":8700},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":166,"tag":180,"props":8702,"children":8703},{},[8704],{"type":172,"value":8705},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":166,"tag":174,"props":8707,"children":8709},{"id":8708},"对象与值类型之间的转换",[8710],{"type":172,"value":8708},{"type":166,"tag":180,"props":8712,"children":8713},{},[8714],{"type":172,"value":8715},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":166,"tag":191,"props":8717,"children":8719},{"className":424,"code":8718,"language":426,"meta":160,"style":160},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8720],{"type":166,"tag":198,"props":8721,"children":8722},{"__ignoreMap":160},[8723,8771,8794,8802,8846,8853],{"type":166,"tag":202,"props":8724,"children":8725},{"class":204,"line":205},[8726,8730,8735,8739,8743,8747,8751,8755,8759,8763,8767],{"type":166,"tag":202,"props":8727,"children":8728},{"style":760},[8729],{"type":172,"value":2396},{"type":166,"tag":202,"props":8731,"children":8732},{"style":7580},[8733],{"type":172,"value":8734}," toString",{"type":166,"tag":202,"props":8736,"children":8737},{"style":232},[8738],{"type":172,"value":1124},{"type":166,"tag":202,"props":8740,"children":8741},{"style":442},[8742],{"type":172,"value":1096},{"type":166,"tag":202,"props":8744,"children":8745},{"style":760},[8746],{"type":172,"value":5487},{"type":166,"tag":202,"props":8748,"children":8749},{"style":436},[8750],{"type":172,"value":1803},{"type":166,"tag":202,"props":8752,"children":8753},{"style":442},[8754],{"type":172,"value":445},{"type":166,"tag":202,"props":8756,"children":8757},{"style":448},[8758],{"type":172,"value":1155},{"type":166,"tag":202,"props":8760,"children":8761},{"style":436},[8762],{"type":172,"value":456},{"type":166,"tag":202,"props":8764,"children":8765},{"style":464},[8766],{"type":172,"value":271},{"type":166,"tag":202,"props":8768,"children":8769},{"style":436},[8770],{"type":172,"value":1178},{"type":166,"tag":202,"props":8772,"children":8773},{"class":204,"line":495},[8774,8778,8782,8786,8790],{"type":166,"tag":202,"props":8775,"children":8776},{"style":1464},[8777],{"type":172,"value":8526},{"type":166,"tag":202,"props":8779,"children":8780},{"style":436},[8781],{"type":172,"value":1693},{"type":166,"tag":202,"props":8783,"children":8784},{"style":464},[8785],{"type":172,"value":271},{"type":166,"tag":202,"props":8787,"children":8788},{"style":436},[8789],{"type":172,"value":486},{"type":166,"tag":202,"props":8791,"children":8792},{"style":442},[8793],{"type":172,"value":1510},{"type":166,"tag":202,"props":8795,"children":8796},{"class":204,"line":1140},[8797],{"type":166,"tag":202,"props":8798,"children":8799},{"style":489},[8800],{"type":172,"value":8801},"  // equal to (1).toString = ...\n",{"type":166,"tag":202,"props":8803,"children":8804},{"class":204,"line":1181},[8805,8810,8814,8818,8822,8826,8830,8834,8838,8842],{"type":166,"tag":202,"props":8806,"children":8807},{"style":448},[8808],{"type":172,"value":8809},"  toString",{"type":166,"tag":202,"props":8811,"children":8812},{"style":232},[8813],{"type":172,"value":1124},{"type":166,"tag":202,"props":8815,"children":8816},{"style":442},[8817],{"type":172,"value":1096},{"type":166,"tag":202,"props":8819,"children":8820},{"style":760},[8821],{"type":172,"value":5487},{"type":166,"tag":202,"props":8823,"children":8824},{"style":436},[8825],{"type":172,"value":1803},{"type":166,"tag":202,"props":8827,"children":8828},{"style":442},[8829],{"type":172,"value":445},{"type":166,"tag":202,"props":8831,"children":8832},{"style":448},[8833],{"type":172,"value":1155},{"type":166,"tag":202,"props":8835,"children":8836},{"style":1158},[8837],{"type":172,"value":456},{"type":166,"tag":202,"props":8839,"children":8840},{"style":464},[8841],{"type":172,"value":299},{"type":166,"tag":202,"props":8843,"children":8844},{"style":1158},[8845],{"type":172,"value":1178},{"type":166,"tag":202,"props":8847,"children":8848},{"class":204,"line":1190},[8849],{"type":166,"tag":202,"props":8850,"children":8851},{"style":442},[8852],{"type":172,"value":1187},{"type":166,"tag":202,"props":8854,"children":8855},{"class":204,"line":1225},[8856,8860,8864,8868,8872,8877,8881],{"type":166,"tag":202,"props":8857,"children":8858},{"style":436},[8859],{"type":172,"value":4780},{"type":166,"tag":202,"props":8861,"children":8862},{"style":442},[8863],{"type":172,"value":445},{"type":166,"tag":202,"props":8865,"children":8866},{"style":448},[8867],{"type":172,"value":1155},{"type":166,"tag":202,"props":8869,"children":8870},{"style":436},[8871],{"type":172,"value":456},{"type":166,"tag":202,"props":8873,"children":8874},{"style":448},[8875],{"type":172,"value":8876},"toString",{"type":166,"tag":202,"props":8878,"children":8879},{"style":436},[8880],{"type":172,"value":575},{"type":166,"tag":202,"props":8882,"children":8883},{"style":489},[8884],{"type":172,"value":6484},{"type":166,"tag":180,"props":8886,"children":8887},{},[8888],{"type":172,"value":8889},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":166,"tag":180,"props":8891,"children":8892},{},[8893],{"type":172,"value":8894},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":166,"tag":191,"props":8896,"children":8898},{"className":424,"code":8897,"language":426,"meta":160,"style":160},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[8899],{"type":166,"tag":198,"props":8900,"children":8901},{"__ignoreMap":160},[8902,8944,8987],{"type":166,"tag":202,"props":8903,"children":8904},{"class":204,"line":205},[8905,8910,8914,8918,8922,8927,8931,8935,8939],{"type":166,"tag":202,"props":8906,"children":8907},{"style":2583},[8908],{"type":172,"value":8909},"String",{"type":166,"tag":202,"props":8911,"children":8912},{"style":442},[8913],{"type":172,"value":445},{"type":166,"tag":202,"props":8915,"children":8916},{"style":1194},[8917],{"type":172,"value":2594},{"type":166,"tag":202,"props":8919,"children":8920},{"style":442},[8921],{"type":172,"value":445},{"type":166,"tag":202,"props":8923,"children":8924},{"style":448},[8925],{"type":172,"value":8926},"valueOf",{"type":166,"tag":202,"props":8928,"children":8929},{"style":232},[8930],{"type":172,"value":1124},{"type":166,"tag":202,"props":8932,"children":8933},{"style":442},[8934],{"type":172,"value":1096},{"type":166,"tag":202,"props":8936,"children":8937},{"style":760},[8938],{"type":172,"value":5487},{"type":166,"tag":202,"props":8940,"children":8941},{"style":464},[8942],{"type":172,"value":8943}," 0\n",{"type":166,"tag":202,"props":8945,"children":8946},{"class":204,"line":495},[8947,8951,8955,8959,8963,8967,8971,8975,8979,8983],{"type":166,"tag":202,"props":8948,"children":8949},{"style":436},[8950],{"type":172,"value":4780},{"type":166,"tag":202,"props":8952,"children":8953},{"style":442},[8954],{"type":172,"value":445},{"type":166,"tag":202,"props":8956,"children":8957},{"style":448},[8958],{"type":172,"value":1155},{"type":166,"tag":202,"props":8960,"children":8961},{"style":436},[8962],{"type":172,"value":456},{"type":166,"tag":202,"props":8964,"children":8965},{"style":232},[8966],{"type":172,"value":461},{"type":166,"tag":202,"props":8968,"children":8969},{"style":215},[8970],{"type":172,"value":229},{"type":166,"tag":202,"props":8972,"children":8973},{"style":221},[8974],{"type":172,"value":271},{"type":166,"tag":202,"props":8976,"children":8977},{"style":215},[8978],{"type":172,"value":229},{"type":166,"tag":202,"props":8980,"children":8981},{"style":436},[8982],{"type":172,"value":486},{"type":166,"tag":202,"props":8984,"children":8985},{"style":489},[8986],{"type":172,"value":6484},{"type":166,"tag":202,"props":8988,"children":8989},{"class":204,"line":1140},[8990,8994,8998,9002,9006,9011,9015,9019,9023,9027,9031,9036],{"type":166,"tag":202,"props":8991,"children":8992},{"style":436},[8993],{"type":172,"value":4780},{"type":166,"tag":202,"props":8995,"children":8996},{"style":442},[8997],{"type":172,"value":445},{"type":166,"tag":202,"props":8999,"children":9000},{"style":448},[9001],{"type":172,"value":1155},{"type":166,"tag":202,"props":9003,"children":9004},{"style":436},[9005],{"type":172,"value":456},{"type":166,"tag":202,"props":9007,"children":9008},{"style":232},[9009],{"type":172,"value":9010},"+new",{"type":166,"tag":202,"props":9012,"children":9013},{"style":448},[9014],{"type":172,"value":3873},{"type":166,"tag":202,"props":9016,"children":9017},{"style":436},[9018],{"type":172,"value":456},{"type":166,"tag":202,"props":9020,"children":9021},{"style":215},[9022],{"type":172,"value":229},{"type":166,"tag":202,"props":9024,"children":9025},{"style":221},[9026],{"type":172,"value":271},{"type":166,"tag":202,"props":9028,"children":9029},{"style":215},[9030],{"type":172,"value":229},{"type":166,"tag":202,"props":9032,"children":9033},{"style":436},[9034],{"type":172,"value":9035},")) ",{"type":166,"tag":202,"props":9037,"children":9038},{"style":489},[9039],{"type":172,"value":9040},"// 0\n",{"type":166,"tag":180,"props":9042,"children":9043},{},[9044],{"type":172,"value":9045},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":166,"tag":191,"props":9047,"children":9049},{"className":424,"code":9048,"language":426,"meta":160,"style":160},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9050],{"type":166,"tag":198,"props":9051,"children":9052},{"__ignoreMap":160},[9053,9090,9122,9154],{"type":166,"tag":202,"props":9054,"children":9055},{"class":204,"line":205},[9056,9060,9065,9069,9073,9077,9081,9086],{"type":166,"tag":202,"props":9057,"children":9058},{"style":760},[9059],{"type":172,"value":5551},{"type":166,"tag":202,"props":9061,"children":9062},{"style":1194},[9063],{"type":172,"value":9064}," f",{"type":166,"tag":202,"props":9066,"children":9067},{"style":232},[9068],{"type":172,"value":1124},{"type":166,"tag":202,"props":9070,"children":9071},{"style":232},[9072],{"type":172,"value":2603},{"type":166,"tag":202,"props":9074,"children":9075},{"style":448},[9076],{"type":172,"value":3873},{"type":166,"tag":202,"props":9078,"children":9079},{"style":436},[9080],{"type":172,"value":456},{"type":166,"tag":202,"props":9082,"children":9083},{"style":599},[9084],{"type":172,"value":9085},"false",{"type":166,"tag":202,"props":9087,"children":9088},{"style":436},[9089],{"type":172,"value":1178},{"type":166,"tag":202,"props":9091,"children":9092},{"class":204,"line":495},[9093,9097,9101,9105,9109,9113,9118],{"type":166,"tag":202,"props":9094,"children":9095},{"style":436},[9096],{"type":172,"value":4780},{"type":166,"tag":202,"props":9098,"children":9099},{"style":442},[9100],{"type":172,"value":445},{"type":166,"tag":202,"props":9102,"children":9103},{"style":448},[9104],{"type":172,"value":1155},{"type":166,"tag":202,"props":9106,"children":9107},{"style":436},[9108],{"type":172,"value":456},{"type":166,"tag":202,"props":9110,"children":9111},{"style":232},[9112],{"type":172,"value":461},{"type":166,"tag":202,"props":9114,"children":9115},{"style":436},[9116],{"type":172,"value":9117},"f) ",{"type":166,"tag":202,"props":9119,"children":9120},{"style":489},[9121],{"type":172,"value":9040},{"type":166,"tag":202,"props":9123,"children":9124},{"class":204,"line":1140},[9125,9129,9133,9137,9141,9146,9150],{"type":166,"tag":202,"props":9126,"children":9127},{"style":436},[9128],{"type":172,"value":4780},{"type":166,"tag":202,"props":9130,"children":9131},{"style":442},[9132],{"type":172,"value":445},{"type":166,"tag":202,"props":9134,"children":9135},{"style":448},[9136],{"type":172,"value":1155},{"type":166,"tag":202,"props":9138,"children":9139},{"style":436},[9140],{"type":172,"value":456},{"type":166,"tag":202,"props":9142,"children":9143},{"style":232},[9144],{"type":172,"value":9145},"!!",{"type":166,"tag":202,"props":9147,"children":9148},{"style":436},[9149],{"type":172,"value":9117},{"type":166,"tag":202,"props":9151,"children":9152},{"style":489},[9153],{"type":172,"value":536},{"type":166,"tag":202,"props":9155,"children":9156},{"class":204,"line":1181},[9157,9161,9165,9169,9173,9177,9182],{"type":166,"tag":202,"props":9158,"children":9159},{"style":436},[9160],{"type":172,"value":4780},{"type":166,"tag":202,"props":9162,"children":9163},{"style":442},[9164],{"type":172,"value":445},{"type":166,"tag":202,"props":9166,"children":9167},{"style":448},[9168],{"type":172,"value":1155},{"type":166,"tag":202,"props":9170,"children":9171},{"style":436},[9172],{"type":172,"value":456},{"type":166,"tag":202,"props":9174,"children":9175},{"style":448},[9176],{"type":172,"value":561},{"type":166,"tag":202,"props":9178,"children":9179},{"style":436},[9180],{"type":172,"value":9181},"(f)) ",{"type":166,"tag":202,"props":9183,"children":9184},{"style":489},[9185],{"type":172,"value":536},{"type":166,"tag":180,"props":9187,"children":9188},{},[9189],{"type":172,"value":9190},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":166,"tag":174,"props":9192,"children":9194},{"id":9193},"值类型的转换",[9195],{"type":172,"value":9193},{"type":166,"tag":180,"props":9197,"children":9198},{},[9199],{"type":172,"value":9200},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":166,"tag":180,"props":9202,"children":9203},{},[9204],{"type":172,"value":9205},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":166,"tag":180,"props":9207,"children":9208},{},[9209],{"type":172,"value":9210},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":166,"tag":191,"props":9212,"children":9214},{"className":424,"code":9213,"language":426,"meta":160,"style":160},"parseInt(1e35) // 1\n",[9215],{"type":166,"tag":198,"props":9216,"children":9217},{"__ignoreMap":160},[9218],{"type":166,"tag":202,"props":9219,"children":9220},{"class":204,"line":205},[9221,9226,9230,9235,9239],{"type":166,"tag":202,"props":9222,"children":9223},{"style":448},[9224],{"type":172,"value":9225},"parseInt",{"type":166,"tag":202,"props":9227,"children":9228},{"style":436},[9229],{"type":172,"value":456},{"type":166,"tag":202,"props":9231,"children":9232},{"style":464},[9233],{"type":172,"value":9234},"1e35",{"type":166,"tag":202,"props":9236,"children":9237},{"style":436},[9238],{"type":172,"value":486},{"type":166,"tag":202,"props":9240,"children":9241},{"style":489},[9242],{"type":172,"value":6484},{"type":166,"tag":180,"props":9244,"children":9245},{},[9246],{"type":172,"value":9247},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":166,"tag":191,"props":9249,"children":9251},{"className":424,"code":9250,"language":426,"meta":160,"style":160},"String() // ''\nString(undefined) // undefined\n",[9252],{"type":166,"tag":198,"props":9253,"children":9254},{"__ignoreMap":160},[9255,9271],{"type":166,"tag":202,"props":9256,"children":9257},{"class":204,"line":205},[9258,9262,9266],{"type":166,"tag":202,"props":9259,"children":9260},{"style":448},[9261],{"type":172,"value":8909},{"type":166,"tag":202,"props":9263,"children":9264},{"style":436},[9265],{"type":172,"value":591},{"type":166,"tag":202,"props":9267,"children":9268},{"style":489},[9269],{"type":172,"value":9270},"// ''\n",{"type":166,"tag":202,"props":9272,"children":9273},{"class":204,"line":495},[9274,9278,9282,9286,9290],{"type":166,"tag":202,"props":9275,"children":9276},{"style":448},[9277],{"type":172,"value":8909},{"type":166,"tag":202,"props":9279,"children":9280},{"style":436},[9281],{"type":172,"value":456},{"type":166,"tag":202,"props":9283,"children":9284},{"style":515},[9285],{"type":172,"value":4315},{"type":166,"tag":202,"props":9287,"children":9288},{"style":436},[9289],{"type":172,"value":486},{"type":166,"tag":202,"props":9291,"children":9292},{"style":489},[9293],{"type":172,"value":726},{"type":166,"tag":174,"props":9295,"children":9297},{"id":9296},"对象与数组的动态特性",[9298],{"type":172,"value":9296},{"type":166,"tag":180,"props":9300,"children":9301},{},[9302],{"type":172,"value":9303},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":166,"tag":191,"props":9305,"children":9307},{"className":424,"code":9306,"language":426,"meta":160,"style":160},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9308],{"type":166,"tag":198,"props":9309,"children":9310},{"__ignoreMap":160},[9311,9347,9372,9395,9419],{"type":166,"tag":202,"props":9312,"children":9313},{"class":204,"line":205},[9314,9318,9322,9326,9330,9335,9339,9343],{"type":166,"tag":202,"props":9315,"children":9316},{"style":760},[9317],{"type":172,"value":5551},{"type":166,"tag":202,"props":9319,"children":9320},{"style":1194},[9321],{"type":172,"value":2984},{"type":166,"tag":202,"props":9323,"children":9324},{"style":232},[9325],{"type":172,"value":1124},{"type":166,"tag":202,"props":9327,"children":9328},{"style":232},[9329],{"type":172,"value":2603},{"type":166,"tag":202,"props":9331,"children":9332},{"style":448},[9333],{"type":172,"value":9334}," Array",{"type":166,"tag":202,"props":9336,"children":9337},{"style":436},[9338],{"type":172,"value":456},{"type":166,"tag":202,"props":9340,"children":9341},{"style":464},[9342],{"type":172,"value":7859},{"type":166,"tag":202,"props":9344,"children":9345},{"style":436},[9346],{"type":172,"value":1178},{"type":166,"tag":202,"props":9348,"children":9349},{"class":204,"line":495},[9350,9355,9359,9364,9368],{"type":166,"tag":202,"props":9351,"children":9352},{"style":436},[9353],{"type":172,"value":9354},"a[",{"type":166,"tag":202,"props":9356,"children":9357},{"style":464},[9358],{"type":172,"value":271},{"type":166,"tag":202,"props":9360,"children":9361},{"style":436},[9362],{"type":172,"value":9363},"] ",{"type":166,"tag":202,"props":9365,"children":9366},{"style":232},[9367],{"type":172,"value":1635},{"type":166,"tag":202,"props":9369,"children":9370},{"style":464},[9371],{"type":172,"value":6538},{"type":166,"tag":202,"props":9373,"children":9374},{"class":204,"line":1140},[9375,9379,9383,9387,9391],{"type":166,"tag":202,"props":9376,"children":9377},{"style":436},[9378],{"type":172,"value":9354},{"type":166,"tag":202,"props":9380,"children":9381},{"style":464},[9382],{"type":172,"value":6061},{"type":166,"tag":202,"props":9384,"children":9385},{"style":436},[9386],{"type":172,"value":9363},{"type":166,"tag":202,"props":9388,"children":9389},{"style":232},[9390],{"type":172,"value":1635},{"type":166,"tag":202,"props":9392,"children":9393},{"style":464},[9394],{"type":172,"value":6538},{"type":166,"tag":202,"props":9396,"children":9397},{"class":204,"line":1181},[9398,9402,9407,9411,9415],{"type":166,"tag":202,"props":9399,"children":9400},{"style":436},[9401],{"type":172,"value":9354},{"type":166,"tag":202,"props":9403,"children":9404},{"style":464},[9405],{"type":172,"value":9406},"7",{"type":166,"tag":202,"props":9408,"children":9409},{"style":436},[9410],{"type":172,"value":9363},{"type":166,"tag":202,"props":9412,"children":9413},{"style":232},[9414],{"type":172,"value":1635},{"type":166,"tag":202,"props":9416,"children":9417},{"style":464},[9418],{"type":172,"value":6538},{"type":166,"tag":202,"props":9420,"children":9421},{"class":204,"line":1190},[9422,9426,9430,9435,9439,9443,9447,9452,9456,9461,9465,9470,9475,9479],{"type":166,"tag":202,"props":9423,"children":9424},{"style":436},[9425],{"type":172,"value":263},{"type":166,"tag":202,"props":9427,"children":9428},{"style":442},[9429],{"type":172,"value":445},{"type":166,"tag":202,"props":9431,"children":9432},{"style":448},[9433],{"type":172,"value":9434},"sort",{"type":166,"tag":202,"props":9436,"children":9437},{"style":436},[9438],{"type":172,"value":456},{"type":166,"tag":202,"props":9440,"children":9441},{"style":442},[9442],{"type":172,"value":809},{"type":166,"tag":202,"props":9444,"children":9445},{"style":760},[9446],{"type":172,"value":5487},{"type":166,"tag":202,"props":9448,"children":9449},{"style":436},[9450],{"type":172,"value":9451}," Math",{"type":166,"tag":202,"props":9453,"children":9454},{"style":442},[9455],{"type":172,"value":445},{"type":166,"tag":202,"props":9457,"children":9458},{"style":448},[9459],{"type":172,"value":9460},"random",{"type":166,"tag":202,"props":9462,"children":9463},{"style":436},[9464],{"type":172,"value":591},{"type":166,"tag":202,"props":9466,"children":9467},{"style":232},[9468],{"type":172,"value":9469},"-",{"type":166,"tag":202,"props":9471,"children":9472},{"style":464},[9473],{"type":172,"value":9474}," 0.5",{"type":166,"tag":202,"props":9476,"children":9477},{"style":436},[9478],{"type":172,"value":486},{"type":166,"tag":202,"props":9480,"children":9481},{"style":489},[9482],{"type":172,"value":9483},"// [1, 1, 1, empty x 7]\n",{"type":166,"tag":180,"props":9485,"children":9486},{},[9487],{"type":172,"value":9488},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":166,"tag":180,"props":9490,"children":9491},{},[9492],{"type":172,"value":9493},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":166,"tag":174,"props":9495,"children":9497},{"id":9496},"重写",[9498],{"type":172,"value":9496},{"type":166,"tag":180,"props":9500,"children":9501},{},[9502],{"type":172,"value":9503},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":166,"tag":180,"props":9505,"children":9506},{},[9507],{"type":172,"value":9508},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":166,"tag":180,"props":9510,"children":9511},{},[9512],{"type":172,"value":9513},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":166,"tag":191,"props":9515,"children":9517},{"className":424,"code":9516,"language":426,"meta":160,"style":160},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9518],{"type":166,"tag":198,"props":9519,"children":9520},{"__ignoreMap":160},[9521,9562,9577,9598,9615,9622,9633,9656,9688,9723,9763,9803,9811,9867,9882,9930,9937,9944,9955,9978],{"type":166,"tag":202,"props":9522,"children":9523},{"class":204,"line":205},[9524,9528,9532,9536,9540,9544,9549,9553,9558],{"type":166,"tag":202,"props":9525,"children":9526},{"style":760},[9527],{"type":172,"value":5551},{"type":166,"tag":202,"props":9529,"children":9530},{"style":1194},[9531],{"type":172,"value":2984},{"type":166,"tag":202,"props":9533,"children":9534},{"style":232},[9535],{"type":172,"value":1124},{"type":166,"tag":202,"props":9537,"children":9538},{"style":436},[9539],{"type":172,"value":3873},{"type":166,"tag":202,"props":9541,"children":9542},{"style":442},[9543],{"type":172,"value":445},{"type":166,"tag":202,"props":9545,"children":9546},{"style":448},[9547],{"type":172,"value":9548},"defineProperties",{"type":166,"tag":202,"props":9550,"children":9551},{"style":436},[9552],{"type":172,"value":456},{"type":166,"tag":202,"props":9554,"children":9555},{"style":442},[9556],{"type":172,"value":9557},"{},",{"type":166,"tag":202,"props":9559,"children":9560},{"style":442},[9561],{"type":172,"value":1101},{"type":166,"tag":202,"props":9563,"children":9564},{"class":204,"line":495},[9565,9569,9573],{"type":166,"tag":202,"props":9566,"children":9567},{"style":1158},[9568],{"type":172,"value":2534},{"type":166,"tag":202,"props":9570,"children":9571},{"style":442},[9572],{"type":172,"value":1620},{"type":166,"tag":202,"props":9574,"children":9575},{"style":442},[9576],{"type":172,"value":1101},{"type":166,"tag":202,"props":9578,"children":9579},{"class":204,"line":1140},[9580,9585,9589,9594],{"type":166,"tag":202,"props":9581,"children":9582},{"style":1158},[9583],{"type":172,"value":9584},"    value",{"type":166,"tag":202,"props":9586,"children":9587},{"style":442},[9588],{"type":172,"value":1620},{"type":166,"tag":202,"props":9590,"children":9591},{"style":464},[9592],{"type":172,"value":9593}," 100",{"type":166,"tag":202,"props":9595,"children":9596},{"style":442},[9597],{"type":172,"value":6994},{"type":166,"tag":202,"props":9599,"children":9600},{"class":204,"line":1181},[9601,9606,9610],{"type":166,"tag":202,"props":9602,"children":9603},{"style":1158},[9604],{"type":172,"value":9605},"    configurable",{"type":166,"tag":202,"props":9607,"children":9608},{"style":442},[9609],{"type":172,"value":1620},{"type":166,"tag":202,"props":9611,"children":9612},{"style":599},[9613],{"type":172,"value":9614}," true\n",{"type":166,"tag":202,"props":9616,"children":9617},{"class":204,"line":1190},[9618],{"type":166,"tag":202,"props":9619,"children":9620},{"style":442},[9621],{"type":172,"value":1840},{"type":166,"tag":202,"props":9623,"children":9624},{"class":204,"line":1225},[9625,9629],{"type":166,"tag":202,"props":9626,"children":9627},{"style":442},[9628],{"type":172,"value":1434},{"type":166,"tag":202,"props":9630,"children":9631},{"style":436},[9632],{"type":172,"value":1178},{"type":166,"tag":202,"props":9634,"children":9635},{"class":204,"line":1262},[9636,9640,9644,9648,9652],{"type":166,"tag":202,"props":9637,"children":9638},{"style":436},[9639],{"type":172,"value":263},{"type":166,"tag":202,"props":9641,"children":9642},{"style":442},[9643],{"type":172,"value":445},{"type":166,"tag":202,"props":9645,"children":9646},{"style":436},[9647],{"type":172,"value":3912},{"type":166,"tag":202,"props":9649,"children":9650},{"style":232},[9651],{"type":172,"value":1635},{"type":166,"tag":202,"props":9653,"children":9654},{"style":464},[9655],{"type":172,"value":6538},{"type":166,"tag":202,"props":9657,"children":9658},{"class":204,"line":1270},[9659,9663,9667,9671,9675,9679,9683],{"type":166,"tag":202,"props":9660,"children":9661},{"style":436},[9662],{"type":172,"value":4780},{"type":166,"tag":202,"props":9664,"children":9665},{"style":442},[9666],{"type":172,"value":445},{"type":166,"tag":202,"props":9668,"children":9669},{"style":448},[9670],{"type":172,"value":1155},{"type":166,"tag":202,"props":9672,"children":9673},{"style":436},[9674],{"type":172,"value":7081},{"type":166,"tag":202,"props":9676,"children":9677},{"style":442},[9678],{"type":172,"value":445},{"type":166,"tag":202,"props":9680,"children":9681},{"style":436},[9682],{"type":172,"value":5790},{"type":166,"tag":202,"props":9684,"children":9685},{"style":489},[9686],{"type":172,"value":9687},"// 100\n",{"type":166,"tag":202,"props":9689,"children":9690},{"class":204,"line":1297},[9691,9695,9699,9703,9707,9711,9715,9719],{"type":166,"tag":202,"props":9692,"children":9693},{"style":760},[9694],{"type":172,"value":5551},{"type":166,"tag":202,"props":9696,"children":9697},{"style":1194},[9698],{"type":172,"value":6795},{"type":166,"tag":202,"props":9700,"children":9701},{"style":232},[9702],{"type":172,"value":1124},{"type":166,"tag":202,"props":9704,"children":9705},{"style":232},[9706],{"type":172,"value":2603},{"type":166,"tag":202,"props":9708,"children":9709},{"style":448},[9710],{"type":172,"value":5397},{"type":166,"tag":202,"props":9712,"children":9713},{"style":436},[9714],{"type":172,"value":7081},{"type":166,"tag":202,"props":9716,"children":9717},{"style":442},[9718],{"type":172,"value":472},{"type":166,"tag":202,"props":9720,"children":9721},{"style":442},[9722],{"type":172,"value":1101},{"type":166,"tag":202,"props":9724,"children":9725},{"class":204,"line":1873},[9726,9730,9734,9738,9742,9747,9751,9755,9759],{"type":166,"tag":202,"props":9727,"children":9728},{"style":2420},[9729],{"type":172,"value":2417},{"type":166,"tag":202,"props":9731,"children":9732},{"style":442},[9733],{"type":172,"value":1693},{"type":166,"tag":202,"props":9735,"children":9736},{"style":1387},[9737],{"type":172,"value":5415},{"type":166,"tag":202,"props":9739,"children":9740},{"style":442},[9741],{"type":172,"value":472},{"type":166,"tag":202,"props":9743,"children":9744},{"style":1387},[9745],{"type":172,"value":9746}," key",{"type":166,"tag":202,"props":9748,"children":9749},{"style":442},[9750],{"type":172,"value":472},{"type":166,"tag":202,"props":9752,"children":9753},{"style":1387},[9754],{"type":172,"value":8486},{"type":166,"tag":202,"props":9756,"children":9757},{"style":442},[9758],{"type":172,"value":1395},{"type":166,"tag":202,"props":9760,"children":9761},{"style":442},[9762],{"type":172,"value":1101},{"type":166,"tag":202,"props":9764,"children":9765},{"class":204,"line":1933},[9766,9770,9774,9779,9783,9787,9791,9795,9799],{"type":166,"tag":202,"props":9767,"children":9768},{"style":1464},[9769],{"type":172,"value":1754},{"type":166,"tag":202,"props":9771,"children":9772},{"style":1158},[9773],{"type":172,"value":1693},{"type":166,"tag":202,"props":9775,"children":9776},{"style":436},[9777],{"type":172,"value":9778},"key",{"type":166,"tag":202,"props":9780,"children":9781},{"style":232},[9782],{"type":172,"value":1767},{"type":166,"tag":202,"props":9784,"children":9785},{"style":215},[9786],{"type":172,"value":218},{"type":166,"tag":202,"props":9788,"children":9789},{"style":221},[9790],{"type":172,"value":1486},{"type":166,"tag":202,"props":9792,"children":9793},{"style":215},[9794],{"type":172,"value":229},{"type":166,"tag":202,"props":9796,"children":9797},{"style":1158},[9798],{"type":172,"value":486},{"type":166,"tag":202,"props":9800,"children":9801},{"style":442},[9802],{"type":172,"value":1510},{"type":166,"tag":202,"props":9804,"children":9805},{"class":204,"line":1994},[9806],{"type":166,"tag":202,"props":9807,"children":9808},{"style":489},[9809],{"type":172,"value":9810},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":166,"tag":202,"props":9812,"children":9813},{"class":204,"line":2035},[9814,9818,9822,9826,9831,9835,9839,9843,9847,9851,9855,9859,9863],{"type":166,"tag":202,"props":9815,"children":9816},{"style":1464},[9817],{"type":172,"value":5664},{"type":166,"tag":202,"props":9819,"children":9820},{"style":436},[9821],{"type":172,"value":5705},{"type":166,"tag":202,"props":9823,"children":9824},{"style":442},[9825],{"type":172,"value":445},{"type":166,"tag":202,"props":9827,"children":9828},{"style":448},[9829],{"type":172,"value":9830},"defineProperty",{"type":166,"tag":202,"props":9832,"children":9833},{"style":1158},[9834],{"type":172,"value":456},{"type":166,"tag":202,"props":9836,"children":9837},{"style":436},[9838],{"type":172,"value":5415},{"type":166,"tag":202,"props":9840,"children":9841},{"style":442},[9842],{"type":172,"value":472},{"type":166,"tag":202,"props":9844,"children":9845},{"style":436},[9846],{"type":172,"value":9746},{"type":166,"tag":202,"props":9848,"children":9849},{"style":442},[9850],{"type":172,"value":472},{"type":166,"tag":202,"props":9852,"children":9853},{"style":442},[9854],{"type":172,"value":1472},{"type":166,"tag":202,"props":9856,"children":9857},{"style":436},[9858],{"type":172,"value":8486},{"type":166,"tag":202,"props":9860,"children":9861},{"style":442},[9862],{"type":172,"value":1495},{"type":166,"tag":202,"props":9864,"children":9865},{"style":1158},[9866],{"type":172,"value":1178},{"type":166,"tag":202,"props":9868,"children":9869},{"class":204,"line":2076},[9870,9874,9878],{"type":166,"tag":202,"props":9871,"children":9872},{"style":442},[9873],{"type":172,"value":5684},{"type":166,"tag":202,"props":9875,"children":9876},{"style":1464},[9877],{"type":172,"value":5689},{"type":166,"tag":202,"props":9879,"children":9880},{"style":442},[9881],{"type":172,"value":1101},{"type":166,"tag":202,"props":9883,"children":9884},{"class":204,"line":2085},[9885,9889,9893,9897,9902,9906,9910,9914,9918,9922,9926],{"type":166,"tag":202,"props":9886,"children":9887},{"style":1464},[9888],{"type":172,"value":5664},{"type":166,"tag":202,"props":9890,"children":9891},{"style":436},[9892],{"type":172,"value":5705},{"type":166,"tag":202,"props":9894,"children":9895},{"style":442},[9896],{"type":172,"value":445},{"type":166,"tag":202,"props":9898,"children":9899},{"style":448},[9900],{"type":172,"value":9901},"set",{"type":166,"tag":202,"props":9903,"children":9904},{"style":1158},[9905],{"type":172,"value":456},{"type":166,"tag":202,"props":9907,"children":9908},{"style":436},[9909],{"type":172,"value":5415},{"type":166,"tag":202,"props":9911,"children":9912},{"style":442},[9913],{"type":172,"value":472},{"type":166,"tag":202,"props":9915,"children":9916},{"style":436},[9917],{"type":172,"value":9746},{"type":166,"tag":202,"props":9919,"children":9920},{"style":442},[9921],{"type":172,"value":472},{"type":166,"tag":202,"props":9923,"children":9924},{"style":436},[9925],{"type":172,"value":8486},{"type":166,"tag":202,"props":9927,"children":9928},{"style":1158},[9929],{"type":172,"value":1178},{"type":166,"tag":202,"props":9931,"children":9932},{"class":204,"line":2093},[9933],{"type":166,"tag":202,"props":9934,"children":9935},{"style":442},[9936],{"type":172,"value":2082},{"type":166,"tag":202,"props":9938,"children":9939},{"class":204,"line":5759},[9940],{"type":166,"tag":202,"props":9941,"children":9942},{"style":442},[9943],{"type":172,"value":1840},{"type":166,"tag":202,"props":9945,"children":9946},{"class":204,"line":8275},[9947,9951],{"type":166,"tag":202,"props":9948,"children":9949},{"style":442},[9950],{"type":172,"value":1434},{"type":166,"tag":202,"props":9952,"children":9953},{"style":436},[9954],{"type":172,"value":1178},{"type":166,"tag":202,"props":9956,"children":9957},{"class":204,"line":8283},[9958,9962,9966,9970,9974],{"type":166,"tag":202,"props":9959,"children":9960},{"style":436},[9961],{"type":172,"value":1119},{"type":166,"tag":202,"props":9963,"children":9964},{"style":442},[9965],{"type":172,"value":445},{"type":166,"tag":202,"props":9967,"children":9968},{"style":436},[9969],{"type":172,"value":3912},{"type":166,"tag":202,"props":9971,"children":9972},{"style":232},[9973],{"type":172,"value":1635},{"type":166,"tag":202,"props":9975,"children":9976},{"style":464},[9977],{"type":172,"value":6538},{"type":166,"tag":202,"props":9979,"children":9980},{"class":204,"line":8291},[9981,9985,9989,9993,9998,10002,10006],{"type":166,"tag":202,"props":9982,"children":9983},{"style":436},[9984],{"type":172,"value":4780},{"type":166,"tag":202,"props":9986,"children":9987},{"style":442},[9988],{"type":172,"value":445},{"type":166,"tag":202,"props":9990,"children":9991},{"style":448},[9992],{"type":172,"value":1155},{"type":166,"tag":202,"props":9994,"children":9995},{"style":436},[9996],{"type":172,"value":9997},"(b",{"type":166,"tag":202,"props":9999,"children":10000},{"style":442},[10001],{"type":172,"value":445},{"type":166,"tag":202,"props":10003,"children":10004},{"style":436},[10005],{"type":172,"value":5790},{"type":166,"tag":202,"props":10007,"children":10008},{"style":489},[10009],{"type":172,"value":6484},{"type":166,"tag":180,"props":10011,"children":10012},{},[10013],{"type":172,"value":10014},"自增自减运算符会隐式的转换操作数的类型。",{"type":166,"tag":180,"props":10016,"children":10017},{},[10018],{"type":172,"value":10019},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":166,"tag":191,"props":10021,"children":10023},{"className":424,"code":10022,"language":426,"meta":160,"style":160},"class a extends a {}\n",[10024],{"type":166,"tag":198,"props":10025,"children":10026},{"__ignoreMap":160},[10027],{"type":166,"tag":202,"props":10028,"children":10029},{"class":204,"line":205},[10030,10034,10038,10042,10046],{"type":166,"tag":202,"props":10031,"children":10032},{"style":760},[10033],{"type":172,"value":3305},{"type":166,"tag":202,"props":10035,"children":10036},{"style":3308},[10037],{"type":172,"value":2984},{"type":166,"tag":202,"props":10039,"children":10040},{"style":3328},[10041],{"type":172,"value":3331},{"type":166,"tag":202,"props":10043,"children":10044},{"style":3334},[10045],{"type":172,"value":2984},{"type":166,"tag":202,"props":10047,"children":10048},{"style":442},[10049],{"type":172,"value":2892},{"type":166,"tag":180,"props":10051,"children":10052},{},[10053],{"type":172,"value":10054},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":166,"tag":180,"props":10056,"children":10057},{},[10058],{"type":172,"value":10059},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":166,"tag":180,"props":10061,"children":10062},{},[10063],{"type":172,"value":10064},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":166,"tag":191,"props":10066,"children":10068},{"className":424,"code":10067,"language":426,"meta":160,"style":160},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10069],{"type":166,"tag":198,"props":10070,"children":10071},{"__ignoreMap":160},[10072,10125,10138,10145],{"type":166,"tag":202,"props":10073,"children":10074},{"class":204,"line":205},[10075,10079,10084,10088,10092,10097,10101,10105,10109,10113,10117,10121],{"type":166,"tag":202,"props":10076,"children":10077},{"style":1464},[10078],{"type":172,"value":8526},{"type":166,"tag":202,"props":10080,"children":10081},{"style":436},[10082],{"type":172,"value":10083}," (a ",{"type":166,"tag":202,"props":10085,"children":10086},{"style":232},[10087],{"type":172,"value":1635},{"type":166,"tag":202,"props":10089,"children":10090},{"style":442},[10091],{"type":172,"value":1472},{"type":166,"tag":202,"props":10093,"children":10094},{"style":1158},[10095],{"type":172,"value":10096}," undefined",{"type":166,"tag":202,"props":10098,"children":10099},{"style":442},[10100],{"type":172,"value":1620},{"type":166,"tag":202,"props":10102,"children":10103},{"style":215},[10104],{"type":172,"value":218},{"type":166,"tag":202,"props":10106,"children":10107},{"style":221},[10108],{"type":172,"value":1486},{"type":166,"tag":202,"props":10110,"children":10111},{"style":215},[10112],{"type":172,"value":229},{"type":166,"tag":202,"props":10114,"children":10115},{"style":442},[10116],{"type":172,"value":1495},{"type":166,"tag":202,"props":10118,"children":10119},{"style":436},[10120],{"type":172,"value":486},{"type":166,"tag":202,"props":10122,"children":10123},{"style":442},[10124],{"type":172,"value":1510},{"type":166,"tag":202,"props":10126,"children":10127},{"class":204,"line":495},[10128,10133],{"type":166,"tag":202,"props":10129,"children":10130},{"style":232},[10131],{"type":172,"value":10132},"  delete",{"type":166,"tag":202,"props":10134,"children":10135},{"style":515},[10136],{"type":172,"value":10137}," undefined\n",{"type":166,"tag":202,"props":10139,"children":10140},{"class":204,"line":1140},[10141],{"type":166,"tag":202,"props":10142,"children":10143},{"style":442},[10144],{"type":172,"value":1187},{"type":166,"tag":202,"props":10146,"children":10147},{"class":204,"line":1181},[10148,10152,10156,10160,10165],{"type":166,"tag":202,"props":10149,"children":10150},{"style":436},[10151],{"type":172,"value":4780},{"type":166,"tag":202,"props":10153,"children":10154},{"style":442},[10155],{"type":172,"value":445},{"type":166,"tag":202,"props":10157,"children":10158},{"style":448},[10159],{"type":172,"value":1155},{"type":166,"tag":202,"props":10161,"children":10162},{"style":436},[10163],{"type":172,"value":10164},"(a) ",{"type":166,"tag":202,"props":10166,"children":10167},{"style":489},[10168],{"type":172,"value":7257},{"type":166,"tag":174,"props":10170,"children":10172},{"id":10171},"动态绑定",[10173],{"type":172,"value":10171},{"type":166,"tag":180,"props":10175,"children":10176},{},[10177],{"type":172,"value":10178},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":166,"tag":191,"props":10180,"children":10182},{"className":424,"code":10181,"language":426,"meta":160,"style":160},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10183],{"type":166,"tag":198,"props":10184,"children":10185},{"__ignoreMap":160},[10186,10206,10226,10254,10262,10291,10299,10328,10336,10382,10390,10431,10438],{"type":166,"tag":202,"props":10187,"children":10188},{"class":204,"line":205},[10189,10193,10198,10202],{"type":166,"tag":202,"props":10190,"children":10191},{"style":760},[10192],{"type":172,"value":1086},{"type":166,"tag":202,"props":10194,"children":10195},{"style":448},[10196],{"type":172,"value":10197}," indirect",{"type":166,"tag":202,"props":10199,"children":10200},{"style":442},[10201],{"type":172,"value":809},{"type":166,"tag":202,"props":10203,"children":10204},{"style":442},[10205],{"type":172,"value":1101},{"type":166,"tag":202,"props":10207,"children":10208},{"class":204,"line":495},[10209,10213,10217,10221],{"type":166,"tag":202,"props":10210,"children":10211},{"style":760},[10212],{"type":172,"value":3538},{"type":166,"tag":202,"props":10214,"children":10215},{"style":1194},[10216],{"type":172,"value":7583},{"type":166,"tag":202,"props":10218,"children":10219},{"style":232},[10220],{"type":172,"value":1124},{"type":166,"tag":202,"props":10222,"children":10223},{"style":436},[10224],{"type":172,"value":10225}," eval\n",{"type":166,"tag":202,"props":10227,"children":10228},{"class":204,"line":1140},[10229,10233,10238,10242,10246,10250],{"type":166,"tag":202,"props":10230,"children":10231},{"style":760},[10232],{"type":172,"value":3538},{"type":166,"tag":202,"props":10234,"children":10235},{"style":7580},[10236],{"type":172,"value":10237}," getEval",{"type":166,"tag":202,"props":10239,"children":10240},{"style":232},[10241],{"type":172,"value":1124},{"type":166,"tag":202,"props":10243,"children":10244},{"style":442},[10245],{"type":172,"value":1096},{"type":166,"tag":202,"props":10247,"children":10248},{"style":760},[10249],{"type":172,"value":5487},{"type":166,"tag":202,"props":10251,"children":10252},{"style":436},[10253],{"type":172,"value":10225},{"type":166,"tag":202,"props":10255,"children":10256},{"class":204,"line":1181},[10257],{"type":166,"tag":202,"props":10258,"children":10259},{"style":489},[10260],{"type":172,"value":10261},"  // 单值表达式\n",{"type":166,"tag":202,"props":10263,"children":10264},{"class":204,"line":1190},[10265,10270,10274,10278,10283,10287],{"type":166,"tag":202,"props":10266,"children":10267},{"style":448},[10268],{"type":172,"value":10269},"  exec",{"type":166,"tag":202,"props":10271,"children":10272},{"style":1158},[10273],{"type":172,"value":456},{"type":166,"tag":202,"props":10275,"children":10276},{"style":215},[10277],{"type":172,"value":229},{"type":166,"tag":202,"props":10279,"children":10280},{"style":221},[10281],{"type":172,"value":10282},"console.log(this === globalThis)",{"type":166,"tag":202,"props":10284,"children":10285},{"style":215},[10286],{"type":172,"value":229},{"type":166,"tag":202,"props":10288,"children":10289},{"style":1158},[10290],{"type":172,"value":1178},{"type":166,"tag":202,"props":10292,"children":10293},{"class":204,"line":1225},[10294],{"type":166,"tag":202,"props":10295,"children":10296},{"style":489},[10297],{"type":172,"value":10298},"  // 函数返回\n",{"type":166,"tag":202,"props":10300,"children":10301},{"class":204,"line":1262},[10302,10307,10312,10316,10320,10324],{"type":166,"tag":202,"props":10303,"children":10304},{"style":448},[10305],{"type":172,"value":10306},"  getEval",{"type":166,"tag":202,"props":10308,"children":10309},{"style":1158},[10310],{"type":172,"value":10311},"()(",{"type":166,"tag":202,"props":10313,"children":10314},{"style":215},[10315],{"type":172,"value":229},{"type":166,"tag":202,"props":10317,"children":10318},{"style":221},[10319],{"type":172,"value":10282},{"type":166,"tag":202,"props":10321,"children":10322},{"style":215},[10323],{"type":172,"value":229},{"type":166,"tag":202,"props":10325,"children":10326},{"style":1158},[10327],{"type":172,"value":1178},{"type":166,"tag":202,"props":10329,"children":10330},{"class":204,"line":1270},[10331],{"type":166,"tag":202,"props":10332,"children":10333},{"style":489},[10334],{"type":172,"value":10335},"  // 携带逗号运算符的分组运算符\n",{"type":166,"tag":202,"props":10337,"children":10338},{"class":204,"line":1297},[10339,10344,10348,10352,10356,10361,10366,10370,10374,10378],{"type":166,"tag":202,"props":10340,"children":10341},{"style":442},[10342],{"type":172,"value":10343},"  ;",{"type":166,"tag":202,"props":10345,"children":10346},{"style":1158},[10347],{"type":172,"value":456},{"type":166,"tag":202,"props":10349,"children":10350},{"style":464},[10351],{"type":172,"value":467},{"type":166,"tag":202,"props":10353,"children":10354},{"style":442},[10355],{"type":172,"value":472},{"type":166,"tag":202,"props":10357,"children":10358},{"style":436},[10359],{"type":172,"value":10360}," eval",{"type":166,"tag":202,"props":10362,"children":10363},{"style":1158},[10364],{"type":172,"value":10365},")(",{"type":166,"tag":202,"props":10367,"children":10368},{"style":215},[10369],{"type":172,"value":229},{"type":166,"tag":202,"props":10371,"children":10372},{"style":221},[10373],{"type":172,"value":10282},{"type":166,"tag":202,"props":10375,"children":10376},{"style":215},[10377],{"type":172,"value":229},{"type":166,"tag":202,"props":10379,"children":10380},{"style":1158},[10381],{"type":172,"value":1178},{"type":166,"tag":202,"props":10383,"children":10384},{"class":204,"line":1873},[10385],{"type":166,"tag":202,"props":10386,"children":10387},{"style":489},[10388],{"type":172,"value":10389},"  // eval.call 等方法\n",{"type":166,"tag":202,"props":10391,"children":10392},{"class":204,"line":1933},[10393,10398,10402,10406,10411,10415,10419,10423,10427],{"type":166,"tag":202,"props":10394,"children":10395},{"style":436},[10396],{"type":172,"value":10397},"  eval",{"type":166,"tag":202,"props":10399,"children":10400},{"style":442},[10401],{"type":172,"value":445},{"type":166,"tag":202,"props":10403,"children":10404},{"style":448},[10405],{"type":172,"value":6648},{"type":166,"tag":202,"props":10407,"children":10408},{"style":1158},[10409],{"type":172,"value":10410},"(()",{"type":166,"tag":202,"props":10412,"children":10413},{"style":442},[10414],{"type":172,"value":472},{"type":166,"tag":202,"props":10416,"children":10417},{"style":215},[10418],{"type":172,"value":218},{"type":166,"tag":202,"props":10420,"children":10421},{"style":221},[10422],{"type":172,"value":10282},{"type":166,"tag":202,"props":10424,"children":10425},{"style":215},[10426],{"type":172,"value":229},{"type":166,"tag":202,"props":10428,"children":10429},{"style":1158},[10430],{"type":172,"value":1178},{"type":166,"tag":202,"props":10432,"children":10433},{"class":204,"line":1994},[10434],{"type":166,"tag":202,"props":10435,"children":10436},{"style":442},[10437],{"type":172,"value":1187},{"type":166,"tag":202,"props":10439,"children":10440},{"class":204,"line":2035},[10441,10446,10450,10454,10458,10463],{"type":166,"tag":202,"props":10442,"children":10443},{"style":436},[10444],{"type":172,"value":10445},"indirect",{"type":166,"tag":202,"props":10447,"children":10448},{"style":442},[10449],{"type":172,"value":445},{"type":166,"tag":202,"props":10451,"children":10452},{"style":448},[10453],{"type":172,"value":7478},{"type":166,"tag":202,"props":10455,"children":10456},{"style":436},[10457],{"type":172,"value":456},{"type":166,"tag":202,"props":10459,"children":10460},{"style":442},[10461],{"type":172,"value":10462},"{}",{"type":166,"tag":202,"props":10464,"children":10465},{"style":436},[10466],{"type":172,"value":10467},")()\n",{"type":166,"tag":180,"props":10469,"children":10470},{},[10471],{"type":172,"value":10472},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":166,"tag":180,"props":10474,"children":10475},{},[10476],{"type":172,"value":10477},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":166,"tag":191,"props":10479,"children":10481},{"className":424,"code":10480,"language":426,"meta":160,"style":160},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10482],{"type":166,"tag":198,"props":10483,"children":10484},{"__ignoreMap":160},[10485,10500,10536,10558,10614],{"type":166,"tag":202,"props":10486,"children":10487},{"class":204,"line":205},[10488,10492,10496],{"type":166,"tag":202,"props":10489,"children":10490},{"style":436},[10491],{"type":172,"value":6946},{"type":166,"tag":202,"props":10493,"children":10494},{"style":232},[10495],{"type":172,"value":1635},{"type":166,"tag":202,"props":10497,"children":10498},{"style":464},[10499],{"type":172,"value":6114},{"type":166,"tag":202,"props":10501,"children":10502},{"class":204,"line":495},[10503,10507,10511,10515,10519,10523,10527,10532],{"type":166,"tag":202,"props":10504,"children":10505},{"style":760},[10506],{"type":172,"value":5551},{"type":166,"tag":202,"props":10508,"children":10509},{"style":1194},[10510],{"type":172,"value":2401},{"type":166,"tag":202,"props":10512,"children":10513},{"style":232},[10514],{"type":172,"value":1124},{"type":166,"tag":202,"props":10516,"children":10517},{"style":442},[10518],{"type":172,"value":1472},{"type":166,"tag":202,"props":10520,"children":10521},{"style":1158},[10522],{"type":172,"value":6236},{"type":166,"tag":202,"props":10524,"children":10525},{"style":442},[10526],{"type":172,"value":1620},{"type":166,"tag":202,"props":10528,"children":10529},{"style":464},[10530],{"type":172,"value":10531}," 200",{"type":166,"tag":202,"props":10533,"children":10534},{"style":442},[10535],{"type":172,"value":2931},{"type":166,"tag":202,"props":10537,"children":10538},{"class":204,"line":1140},[10539,10543,10548,10553],{"type":166,"tag":202,"props":10540,"children":10541},{"style":1464},[10542],{"type":172,"value":8526},{"type":166,"tag":202,"props":10544,"children":10545},{"style":436},[10546],{"type":172,"value":10547}," (obj) ",{"type":166,"tag":202,"props":10549,"children":10550},{"style":442},[10551],{"type":172,"value":10552},"{",{"type":166,"tag":202,"props":10554,"children":10555},{"style":1158},[10556],{"type":172,"value":10557}," \n",{"type":166,"tag":202,"props":10559,"children":10560},{"class":204,"line":1181},[10561,10565,10569,10573,10577,10581,10585,10589,10593,10597,10601,10605,10609],{"type":166,"tag":202,"props":10562,"children":10563},{"style":448},[10564],{"type":172,"value":10397},{"type":166,"tag":202,"props":10566,"children":10567},{"style":1158},[10568],{"type":172,"value":456},{"type":166,"tag":202,"props":10570,"children":10571},{"style":436},[10572],{"type":172,"value":4780},{"type":166,"tag":202,"props":10574,"children":10575},{"style":442},[10576],{"type":172,"value":445},{"type":166,"tag":202,"props":10578,"children":10579},{"style":448},[10580],{"type":172,"value":1155},{"type":166,"tag":202,"props":10582,"children":10583},{"style":1158},[10584],{"type":172,"value":456},{"type":166,"tag":202,"props":10586,"children":10587},{"style":436},[10588],{"type":172,"value":2431},{"type":166,"tag":202,"props":10590,"children":10591},{"style":442},[10592],{"type":172,"value":472},{"type":166,"tag":202,"props":10594,"children":10595},{"style":1107},[10596],{"type":172,"value":3552},{"type":166,"tag":202,"props":10598,"children":10599},{"style":442},[10600],{"type":172,"value":445},{"type":166,"tag":202,"props":10602,"children":10603},{"style":436},[10604],{"type":172,"value":2431},{"type":166,"tag":202,"props":10606,"children":10607},{"style":1158},[10608],{"type":172,"value":9035},{"type":166,"tag":202,"props":10610,"children":10611},{"style":489},[10612],{"type":172,"value":10613},"// 200 100\n",{"type":166,"tag":202,"props":10615,"children":10616},{"class":204,"line":1190},[10617],{"type":166,"tag":202,"props":10618,"children":10619},{"style":442},[10620],{"type":172,"value":1187},{"type":166,"tag":180,"props":10622,"children":10623},{},[10624],{"type":172,"value":10625},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":166,"tag":174,"props":10627,"children":10629},{"id":10628},"动态方法调用",[10630],{"type":172,"value":10628},{"type":166,"tag":180,"props":10632,"children":10633},{},[10634],{"type":172,"value":10635},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":166,"tag":180,"props":10637,"children":10638},{},[10639],{"type":172,"value":10640},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":166,"tag":180,"props":10642,"children":10643},{},[10644],{"type":172,"value":10645},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":166,"tag":180,"props":10647,"children":10648},{},[10649],{"type":172,"value":10650},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":166,"tag":191,"props":10652,"children":10654},{"className":424,"code":10653,"language":426,"meta":160,"style":160},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10655],{"type":166,"tag":198,"props":10656,"children":10657},{"__ignoreMap":160},[10658,10678,10714,10763],{"type":166,"tag":202,"props":10659,"children":10660},{"class":204,"line":205},[10661,10665,10670,10674],{"type":166,"tag":202,"props":10662,"children":10663},{"style":760},[10664],{"type":172,"value":1086},{"type":166,"tag":202,"props":10666,"children":10667},{"style":448},[10668],{"type":172,"value":10669}," Test",{"type":166,"tag":202,"props":10671,"children":10672},{"style":442},[10673],{"type":172,"value":809},{"type":166,"tag":202,"props":10675,"children":10676},{"style":442},[10677],{"type":172,"value":2892},{"type":166,"tag":202,"props":10679,"children":10680},{"class":204,"line":495},[10681,10686,10690,10694,10698,10702,10706,10710],{"type":166,"tag":202,"props":10682,"children":10683},{"style":436},[10684],{"type":172,"value":10685},"TestAnother ",{"type":166,"tag":202,"props":10687,"children":10688},{"style":232},[10689],{"type":172,"value":1635},{"type":166,"tag":202,"props":10691,"children":10692},{"style":436},[10693],{"type":172,"value":10669},{"type":166,"tag":202,"props":10695,"children":10696},{"style":442},[10697],{"type":172,"value":445},{"type":166,"tag":202,"props":10699,"children":10700},{"style":448},[10701],{"type":172,"value":7478},{"type":166,"tag":202,"props":10703,"children":10704},{"style":436},[10705],{"type":172,"value":456},{"type":166,"tag":202,"props":10707,"children":10708},{"style":442},[10709],{"type":172,"value":10462},{"type":166,"tag":202,"props":10711,"children":10712},{"style":436},[10713],{"type":172,"value":1178},{"type":166,"tag":202,"props":10715,"children":10716},{"class":204,"line":1140},[10717,10721,10725,10729,10733,10737,10741,10745,10750,10755,10759],{"type":166,"tag":202,"props":10718,"children":10719},{"style":436},[10720],{"type":172,"value":4780},{"type":166,"tag":202,"props":10722,"children":10723},{"style":442},[10724],{"type":172,"value":445},{"type":166,"tag":202,"props":10726,"children":10727},{"style":448},[10728],{"type":172,"value":1155},{"type":166,"tag":202,"props":10730,"children":10731},{"style":436},[10732],{"type":172,"value":456},{"type":166,"tag":202,"props":10734,"children":10735},{"style":232},[10736],{"type":172,"value":1276},{"type":166,"tag":202,"props":10738,"children":10739},{"style":448},[10740],{"type":172,"value":10669},{"type":166,"tag":202,"props":10742,"children":10743},{"style":436},[10744],{"type":172,"value":591},{"type":166,"tag":202,"props":10746,"children":10747},{"style":232},[10748],{"type":172,"value":10749},"instanceof",{"type":166,"tag":202,"props":10751,"children":10752},{"style":3308},[10753],{"type":172,"value":10754}," TestAnother",{"type":166,"tag":202,"props":10756,"children":10757},{"style":436},[10758],{"type":172,"value":486},{"type":166,"tag":202,"props":10760,"children":10761},{"style":489},[10762],{"type":172,"value":536},{"type":166,"tag":202,"props":10764,"children":10765},{"class":204,"line":1181},[10766,10770,10774,10778,10782,10787,10791,10795,10799],{"type":166,"tag":202,"props":10767,"children":10768},{"style":436},[10769],{"type":172,"value":4780},{"type":166,"tag":202,"props":10771,"children":10772},{"style":442},[10773],{"type":172,"value":445},{"type":166,"tag":202,"props":10775,"children":10776},{"style":448},[10777],{"type":172,"value":1155},{"type":166,"tag":202,"props":10779,"children":10780},{"style":436},[10781],{"type":172,"value":456},{"type":166,"tag":202,"props":10783,"children":10784},{"style":2583},[10785],{"type":172,"value":10786},"test2",{"type":166,"tag":202,"props":10788,"children":10789},{"style":442},[10790],{"type":172,"value":445},{"type":166,"tag":202,"props":10792,"children":10793},{"style":1194},[10794],{"type":172,"value":2594},{"type":166,"tag":202,"props":10796,"children":10797},{"style":436},[10798],{"type":172,"value":486},{"type":166,"tag":202,"props":10800,"children":10801},{"style":489},[10802],{"type":172,"value":726},{"type":166,"tag":180,"props":10804,"children":10805},{},[10806],{"type":172,"value":10807},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":166,"tag":174,"props":10809,"children":10811},{"id":10810},"通用执行环境的实现",[10812],{"type":172,"value":10810},{"type":166,"tag":180,"props":10814,"children":10815},{},[10816],{"type":172,"value":10817},"跳过。",{"type":166,"tag":167,"props":10819,"children":10821},{"id":10820},"勘误",[10822],{"type":172,"value":10823},"勘误？",{"type":166,"tag":280,"props":10825,"children":10826},{},[10827,10832,10837,10842,10847,10852,10857,10862,10867,10872,10877,10882,10887],{"type":166,"tag":284,"props":10828,"children":10829},{},[10830],{"type":172,"value":10831},"P71，属性读取器",{"type":166,"tag":284,"props":10833,"children":10834},{},[10835],{"type":172,"value":10836},"P77，逻辑与、按位非",{"type":166,"tag":284,"props":10838,"children":10839},{},[10840],{"type":172,"value":10841},"P107，catch 子句隐式声明",{"type":166,"tag":284,"props":10843,"children":10844},{},[10845],{"type":172,"value":10846},"P134，第二段代码，computedName 括号",{"type":166,"tag":284,"props":10848,"children":10849},{},[10850],{"type":172,"value":10851},"P148，ES8",{"type":166,"tag":284,"props":10853,"children":10854},{},[10855],{"type":172,"value":10856},"P179，MyObject() 有没有必要用括号",{"type":166,"tag":284,"props":10858,"children":10859},{},[10860],{"type":172,"value":10861},"P206，语言仅提供了...能力而已",{"type":166,"tag":284,"props":10863,"children":10864},{},[10865],{"type":172,"value":10866},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":166,"tag":284,"props":10868,"children":10869},{},[10870],{"type":172,"value":10871},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":166,"tag":284,"props":10873,"children":10874},{},[10875],{"type":172,"value":10876},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":166,"tag":284,"props":10878,"children":10879},{},[10880],{"type":172,"value":10881},"P536，表格最后一行 String",{"type":166,"tag":284,"props":10883,"children":10884},{},[10885],{"type":172,"value":10886},"P535，存取描述符",{"type":166,"tag":284,"props":10888,"children":10889},{},[10890],{"type":172,"value":10891},"P564，运算符",{"type":166,"tag":10893,"props":10894,"children":10897},"section",{"className":10895,"dataFootnotes":160},[10896],"footnotes",[10898,10905],{"type":166,"tag":167,"props":10899,"children":10902},{"className":10900,"id":267},[10901],"sr-only",[10903],{"type":172,"value":10904},"Footnotes",{"type":166,"tag":10906,"props":10907,"children":10908},"ol",{},[10909,10924,10937,10950,10963,10976],{"type":166,"tag":284,"props":10910,"children":10912},{"id":10911},"user-content-fn-first-class",[10913,10915],{"type":172,"value":10914},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":166,"tag":263,"props":10916,"children":10921},{"href":10917,"ariaLabel":10918,"className":10919,"dataFootnoteBackref":160},"#user-content-fnref-first-class","Back to reference 1",[10920],"data-footnote-backref",[10922],{"type":172,"value":10923},"↩",{"type":166,"tag":284,"props":10925,"children":10927},{"id":10926},"user-content-fn-oo",[10928,10930],{"type":172,"value":10929},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":166,"tag":263,"props":10931,"children":10935},{"href":10932,"ariaLabel":10933,"className":10934,"dataFootnoteBackref":160},"#user-content-fnref-oo","Back to reference 2",[10920],[10936],{"type":172,"value":10923},{"type":166,"tag":284,"props":10938,"children":10940},{"id":10939},"user-content-fn-string",[10941,10943],{"type":172,"value":10942},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":166,"tag":263,"props":10944,"children":10948},{"href":10945,"ariaLabel":10946,"className":10947,"dataFootnoteBackref":160},"#user-content-fnref-string","Back to reference 3",[10920],[10949],{"type":172,"value":10923},{"type":166,"tag":284,"props":10951,"children":10953},{"id":10952},"user-content-fn-namespace",[10954,10956],{"type":172,"value":10955},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":166,"tag":263,"props":10957,"children":10961},{"href":10958,"ariaLabel":10959,"className":10960,"dataFootnoteBackref":160},"#user-content-fnref-namespace","Back to reference 4",[10920],[10962],{"type":172,"value":10923},{"type":166,"tag":284,"props":10964,"children":10966},{"id":10965},"user-content-fn-iterationenv",[10967,10969],{"type":172,"value":10968},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":166,"tag":263,"props":10970,"children":10974},{"href":10971,"ariaLabel":10972,"className":10973,"dataFootnoteBackref":160},"#user-content-fnref-iterationenv","Back to reference 5",[10920],[10975],{"type":172,"value":10923},{"type":166,"tag":284,"props":10977,"children":10979},{"id":10978},"user-content-fn-reference",[10980,10982],{"type":172,"value":10981},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":166,"tag":263,"props":10983,"children":10987},{"href":10984,"ariaLabel":10985,"className":10986,"dataFootnoteBackref":160},"#user-content-fnref-reference","Back to reference 6",[10920],[10988],{"type":172,"value":10923},{"type":166,"tag":10990,"props":10991,"children":10992},"style",{},[10993],{"type":172,"value":10994},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":495,"depth":495,"links":10996},[10997,11006,11015,11025,11031,11041,11042],{"id":169,"depth":495,"text":169,"children":10998},[10999,11000,11001,11002,11003,11004,11005],{"id":176,"depth":1140,"text":176},{"id":250,"depth":1140,"text":250},{"id":376,"depth":1140,"text":376},{"id":1326,"depth":1140,"text":1326},{"id":2111,"depth":1140,"text":2111},{"id":2238,"depth":1140,"text":2238},{"id":2329,"depth":1140,"text":2329},{"id":2354,"depth":495,"text":2354,"children":11007},[11008,11009,11010,11011,11012,11013,11014],{"id":2359,"depth":1140,"text":176},{"id":2830,"depth":1140,"text":2830},{"id":3275,"depth":1140,"text":3275},{"id":4036,"depth":1140,"text":4036},{"id":4812,"depth":1140,"text":4812},{"id":4983,"depth":1140,"text":4983},{"id":5798,"depth":1140,"text":5798},{"id":5808,"depth":495,"text":5808,"children":11016},[11017,11018,11019,11020,11021,11022,11023,11024],{"id":5813,"depth":1140,"text":5813},{"id":5866,"depth":1140,"text":5866},{"id":6043,"depth":1140,"text":6043},{"id":6321,"depth":1140,"text":6321},{"id":6405,"depth":1140,"text":6405},{"id":6579,"depth":1140,"text":6579},{"id":6661,"depth":1140,"text":6661},{"id":6699,"depth":1140,"text":6699},{"id":6709,"depth":495,"text":6709,"children":11026},[11027,11028,11029,11030],{"id":6714,"depth":1140,"text":5813},{"id":6729,"depth":1140,"text":6732},{"id":7871,"depth":1140,"text":7871},{"id":8318,"depth":1140,"text":8318},{"id":8688,"depth":495,"text":8688,"children":11032},[11033,11034,11035,11036,11037,11038,11039,11040],{"id":8693,"depth":1140,"text":5813},{"id":8708,"depth":1140,"text":8708},{"id":9193,"depth":1140,"text":9193},{"id":9296,"depth":1140,"text":9296},{"id":9496,"depth":1140,"text":9496},{"id":10171,"depth":1140,"text":10171},{"id":10628,"depth":1140,"text":10628},{"id":10810,"depth":1140,"text":10810},{"id":10820,"depth":495,"text":10823},{"id":267,"depth":495,"text":10904},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11050,11054],{"_path":11051,"title":11052,"description":11053},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11055,"title":11056,"description":160},"/_books/9787301135907","日常生活中的自我呈现",1742745259991]