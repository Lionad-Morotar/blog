[{"data":1,"prerenderedAt":11300},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":389,"/_books/9787121386695-surround":11292},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":390,"_dir":391,"_draft":392,"_partial":393,"_locale":394,"title":395,"description":394,"body":396,"_type":11287,"_id":11288,"_source":11289,"_file":11290,"_extension":11291},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":397,"children":398,"toc":11239},"root",[399,407,413,419,424,482,487,508,513,552,557,570,575,580,585,590,608,613,618,623,636,641,646,651,656,771,776,781,841,846,887,892,925,930,935,960,965,1002,1007,1009,1302,1307,1559,1564,1569,1574,1592,1597,1682,1687,1818,1823,1828,2334,2339,2344,2349,2354,2456,2461,2466,2471,2476,2481,2486,2491,2544,2549,2562,2567,2572,2577,2582,2587,2592,2597,2602,2607,2612,2617,2793,2798,2890,2895,2900,2905,2910,2912,3029,3047,3052,3065,3070,3075,3080,3093,3098,3103,3239,3254,3259,3339,3344,3391,3505,3510,3515,3520,3705,3710,3715,3720,3883,3888,3916,3921,3934,3939,4191,4196,4201,4206,4266,4271,4276,4281,4286,4291,4389,4394,4399,4417,4422,4435,4440,4445,4458,4463,4468,4566,4571,4576,4581,4583,4775,4780,5049,5054,5059,5077,5082,5084,5199,5204,5222,5227,5232,5237,5242,5244,5435,5440,5453,5458,6039,6044,6049,6054,6059,6064,6069,6074,6079,6097,6102,6107,6112,6117,6118,6238,6243,6248,6253,6265,6270,6275,6280,6285,6290,6308,6425,6430,6563,6568,6573,6578,6596,6601,6606,6647,6652,6657,6662,6729,6734,6739,6783,6788,6793,6798,6816,6821,6826,6831,6898,6903,6908,6913,6931,6936,6941,6946,6951,6956,6961,6966,6971,6977,6982,7000,7005,7149,7167,7388,7393,7398,7529,7534,7552,7557,7605,7610,7732,7737,7742,8113,8118,8123,8128,8133,8138,8560,8565,8570,8575,8593,8598,8690,8695,8700,8887,8892,8897,8902,8907,8925,8930,8935,8940,8945,8950,8955,8960,9129,9134,9139,9285,9290,9430,9435,9440,9445,9450,9455,9487,9492,9538,9543,9548,9728,9733,9738,9743,9748,9753,9758,10254,10259,10264,10294,10299,10304,10309,10413,10418,10423,10712,10717,10722,10865,10870,10875,10880,10885,10890,10895,11047,11052,11057,11062,11068,11136,11233],{"type":400,"tag":401,"props":402,"children":404},"element","h2",{"id":403},"语法",[405],{"type":406,"value":403},"text",{"type":400,"tag":408,"props":409,"children":411},"h3",{"id":410},"语法综述",[412],{"type":406,"value":410},{"type":400,"tag":414,"props":415,"children":416},"p",{},[417],{"type":406,"value":418},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":400,"tag":414,"props":420,"children":421},{},[422],{"type":406,"value":423},"可以使用 --check 指令检测语法错误：",{"type":400,"tag":425,"props":426,"children":430},"pre",{"className":427,"code":428,"language":429,"meta":394,"style":394},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[431],{"type":400,"tag":432,"props":433,"children":434},"code",{"__ignoreMap":394},[435],{"type":400,"tag":436,"props":437,"children":440},"span",{"class":438,"line":439},"line",1,[441,447,453,459,464,470,476],{"type":400,"tag":436,"props":442,"children":444},{"style":443},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[445],{"type":406,"value":446},"echo",{"type":400,"tag":436,"props":448,"children":450},{"style":449},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[451],{"type":406,"value":452}," '",{"type":400,"tag":436,"props":454,"children":456},{"style":455},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[457],{"type":406,"value":458},"\"hello world\"",{"type":400,"tag":436,"props":460,"children":461},{"style":449},[462],{"type":406,"value":463},"'",{"type":400,"tag":436,"props":465,"children":467},{"style":466},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[468],{"type":406,"value":469}," |",{"type":400,"tag":436,"props":471,"children":473},{"style":472},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[474],{"type":406,"value":475}," node",{"type":400,"tag":436,"props":477,"children":479},{"style":478},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[480],{"type":406,"value":481}," -c\n",{"type":400,"tag":408,"props":483,"children":485},{"id":484},"声明语法",[486],{"type":406,"value":484},{"type":400,"tag":414,"props":488,"children":489},{},[490,492,506],{"type":406,"value":491},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":400,"tag":493,"props":494,"children":495},"sup",{},[496],{"type":400,"tag":497,"props":498,"children":503},"a",{"href":499,"ariaDescribedBy":500,"dataFootnoteRef":394,"id":502},"#user-content-fn-first-class",[501],"footnote-label","user-content-fnref-first-class",[504],{"type":406,"value":505},"1",{"type":406,"value":507},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":400,"tag":414,"props":509,"children":510},{},[511],{"type":406,"value":512},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":400,"tag":514,"props":515,"children":516},"ul",{},[517,536],{"type":400,"tag":518,"props":519,"children":520},"li",{},[521,523,534],{"type":406,"value":522},"基本数据类型：undefined、string、number、object",{"type":400,"tag":493,"props":524,"children":525},{},[526],{"type":400,"tag":497,"props":527,"children":531},{"href":528,"ariaDescribedBy":529,"dataFootnoteRef":394,"id":530},"#user-content-fn-oo",[501],"user-content-fnref-oo",[532],{"type":406,"value":533},"2",{"type":406,"value":535},"、function、boolean、symbol、bigint",{"type":400,"tag":518,"props":537,"children":538},{},[539,541],{"type":406,"value":540},"值类型和引用类型",{"type":400,"tag":493,"props":542,"children":543},{},[544],{"type":400,"tag":497,"props":545,"children":549},{"href":546,"ariaDescribedBy":547,"dataFootnoteRef":394,"id":548},"#user-content-fn-string",[501],"user-content-fnref-string",[550],{"type":406,"value":551},"3",{"type":400,"tag":414,"props":553,"children":554},{},[555],{"type":406,"value":556},"如果算上规范，可以再增加两种类型系统：",{"type":400,"tag":514,"props":558,"children":559},{},[560,565],{"type":400,"tag":518,"props":561,"children":562},{},[563],{"type":406,"value":564},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":400,"tag":518,"props":566,"children":567},{},[568],{"type":406,"value":569},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":400,"tag":414,"props":571,"children":572},{},[573],{"type":406,"value":574},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":400,"tag":414,"props":576,"children":577},{},[578],{"type":406,"value":579},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":400,"tag":414,"props":581,"children":582},{},[583],{"type":406,"value":584},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":400,"tag":414,"props":586,"children":587},{},[588],{"type":406,"value":589},"相关字符串字面量的一些冷知识：",{"type":400,"tag":514,"props":591,"children":592},{},[593,598,603],{"type":400,"tag":518,"props":594,"children":595},{},[596],{"type":406,"value":597},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":400,"tag":518,"props":599,"children":600},{},[601],{"type":406,"value":602},"空字符串也能作为对象的键。",{"type":400,"tag":518,"props":604,"children":605},{},[606],{"type":406,"value":607},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":400,"tag":408,"props":609,"children":611},{"id":610},"表达式运算",[612],{"type":406,"value":610},{"type":400,"tag":414,"props":614,"children":615},{},[616],{"type":406,"value":617},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":400,"tag":414,"props":619,"children":620},{},[621],{"type":406,"value":622},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":400,"tag":514,"props":624,"children":625},{},[626,631],{"type":400,"tag":518,"props":627,"children":628},{},[629],{"type":406,"value":630},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":400,"tag":518,"props":632,"children":633},{},[634],{"type":406,"value":635},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":400,"tag":414,"props":637,"children":638},{},[639],{"type":406,"value":640},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":400,"tag":414,"props":642,"children":643},{},[644],{"type":406,"value":645},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":400,"tag":414,"props":647,"children":648},{},[649],{"type":406,"value":650},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":400,"tag":414,"props":652,"children":653},{},[654],{"type":406,"value":655},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":400,"tag":425,"props":657,"children":661},{"className":658,"code":659,"language":660,"meta":394,"style":394},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[662],{"type":400,"tag":432,"props":663,"children":664},{"__ignoreMap":394},[665,727],{"type":400,"tag":436,"props":666,"children":667},{"class":438,"line":439},[668,674,680,686,691,696,702,707,712,716,721],{"type":400,"tag":436,"props":669,"children":671},{"style":670},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[672],{"type":406,"value":673},"Object",{"type":400,"tag":436,"props":675,"children":677},{"style":676},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[678],{"type":406,"value":679},".",{"type":400,"tag":436,"props":681,"children":683},{"style":682},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[684],{"type":406,"value":685},"is",{"type":400,"tag":436,"props":687,"children":688},{"style":670},[689],{"type":406,"value":690},"(",{"type":400,"tag":436,"props":692,"children":693},{"style":466},[694],{"type":406,"value":695},"+",{"type":400,"tag":436,"props":697,"children":699},{"style":698},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[700],{"type":406,"value":701},"0",{"type":400,"tag":436,"props":703,"children":704},{"style":676},[705],{"type":406,"value":706},",",{"type":400,"tag":436,"props":708,"children":709},{"style":466},[710],{"type":406,"value":711}," -",{"type":400,"tag":436,"props":713,"children":714},{"style":698},[715],{"type":406,"value":701},{"type":400,"tag":436,"props":717,"children":718},{"style":670},[719],{"type":406,"value":720},") ",{"type":400,"tag":436,"props":722,"children":724},{"style":723},"--shiki-light:#90A4AE;--shiki-default:#6A737D;--shiki-dark:#6A737D;--shiki-sepia:#88846F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[725],{"type":406,"value":726},"// false\n",{"type":400,"tag":436,"props":728,"children":730},{"class":438,"line":729},2,[731,735,739,743,747,753,757,762,766],{"type":400,"tag":436,"props":732,"children":733},{"style":670},[734],{"type":406,"value":673},{"type":400,"tag":436,"props":736,"children":737},{"style":676},[738],{"type":406,"value":679},{"type":400,"tag":436,"props":740,"children":741},{"style":682},[742],{"type":406,"value":685},{"type":400,"tag":436,"props":744,"children":745},{"style":670},[746],{"type":406,"value":690},{"type":400,"tag":436,"props":748,"children":750},{"style":749},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[751],{"type":406,"value":752},"NaN",{"type":400,"tag":436,"props":754,"children":755},{"style":676},[756],{"type":406,"value":706},{"type":400,"tag":436,"props":758,"children":759},{"style":749},[760],{"type":406,"value":761}," NaN",{"type":400,"tag":436,"props":763,"children":764},{"style":670},[765],{"type":406,"value":720},{"type":400,"tag":436,"props":767,"children":768},{"style":723},[769],{"type":406,"value":770},"// true\n",{"type":400,"tag":414,"props":772,"children":773},{},[774],{"type":406,"value":775},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":400,"tag":414,"props":777,"children":778},{},[779],{"type":406,"value":780},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":400,"tag":425,"props":782,"children":784},{"className":658,"code":783,"language":660,"meta":394,"style":394},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[785],{"type":400,"tag":432,"props":786,"children":787},{"__ignoreMap":394},[788,813],{"type":400,"tag":436,"props":789,"children":790},{"class":438,"line":439},[791,796,800,804,809],{"type":400,"tag":436,"props":792,"children":793},{"style":682},[794],{"type":406,"value":795},"Boolean",{"type":400,"tag":436,"props":797,"children":798},{"style":670},[799],{"type":406,"value":690},{"type":400,"tag":436,"props":801,"children":802},{"style":682},[803],{"type":406,"value":334},{"type":400,"tag":436,"props":805,"children":806},{"style":670},[807],{"type":406,"value":808},"()) ",{"type":400,"tag":436,"props":810,"children":811},{"style":723},[812],{"type":406,"value":770},{"type":400,"tag":436,"props":814,"children":815},{"class":438,"line":729},[816,820,825,830,836],{"type":400,"tag":436,"props":817,"children":818},{"style":682},[819],{"type":406,"value":334},{"type":400,"tag":436,"props":821,"children":822},{"style":670},[823],{"type":406,"value":824},"() ",{"type":400,"tag":436,"props":826,"children":827},{"style":466},[828],{"type":406,"value":829},"==",{"type":400,"tag":436,"props":831,"children":833},{"style":832},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[834],{"type":406,"value":835}," true",{"type":400,"tag":436,"props":837,"children":838},{"style":723},[839],{"type":406,"value":840}," // false\n",{"type":400,"tag":414,"props":842,"children":843},{},[844],{"type":406,"value":845},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":400,"tag":425,"props":847,"children":849},{"className":427,"code":848,"language":429,"meta":394,"style":394},"echo \"1 = 1\" | node -c\n",[850],{"type":400,"tag":432,"props":851,"children":852},{"__ignoreMap":394},[853],{"type":400,"tag":436,"props":854,"children":855},{"class":438,"line":439},[856,860,865,870,875,879,883],{"type":400,"tag":436,"props":857,"children":858},{"style":443},[859],{"type":406,"value":446},{"type":400,"tag":436,"props":861,"children":862},{"style":449},[863],{"type":406,"value":864}," \"",{"type":400,"tag":436,"props":866,"children":867},{"style":455},[868],{"type":406,"value":869},"1 = 1",{"type":400,"tag":436,"props":871,"children":872},{"style":449},[873],{"type":406,"value":874},"\"",{"type":400,"tag":436,"props":876,"children":877},{"style":466},[878],{"type":406,"value":469},{"type":400,"tag":436,"props":880,"children":881},{"style":472},[882],{"type":406,"value":475},{"type":400,"tag":436,"props":884,"children":885},{"style":478},[886],{"type":406,"value":481},{"type":400,"tag":414,"props":888,"children":889},{},[890],{"type":406,"value":891},"函数调用也有“隐式调用”这一概念：",{"type":400,"tag":514,"props":893,"children":894},{},[895,900,905,910,915,920],{"type":400,"tag":518,"props":896,"children":897},{},[898],{"type":406,"value":899},"使用 new 运算符",{"type":400,"tag":518,"props":901,"children":902},{},[903],{"type":406,"value":904},"模板处理函数 + 模板字符串调用",{"type":400,"tag":518,"props":906,"children":907},{},[908],{"type":406,"value":909},"函数作为属性存取器且发生了属性存取操作时",{"type":400,"tag":518,"props":911,"children":912},{},[913],{"type":406,"value":914},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":400,"tag":518,"props":916,"children":917},{},[918],{"type":406,"value":919},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":400,"tag":518,"props":921,"children":922},{},[923],{"type":406,"value":924},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":400,"tag":414,"props":926,"children":927},{},[928],{"type":406,"value":929},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":400,"tag":414,"props":931,"children":932},{},[933],{"type":406,"value":934},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":400,"tag":425,"props":936,"children":938},{"className":658,"code":937,"language":660,"meta":394,"style":394},"typeof x // undefined\n",[939],{"type":400,"tag":432,"props":940,"children":941},{"__ignoreMap":394},[942],{"type":400,"tag":436,"props":943,"children":944},{"class":438,"line":439},[945,950,955],{"type":400,"tag":436,"props":946,"children":947},{"style":466},[948],{"type":406,"value":949},"typeof",{"type":400,"tag":436,"props":951,"children":952},{"style":670},[953],{"type":406,"value":954}," x ",{"type":400,"tag":436,"props":956,"children":957},{"style":723},[958],{"type":406,"value":959},"// undefined\n",{"type":400,"tag":414,"props":961,"children":962},{},[963],{"type":406,"value":964},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":400,"tag":425,"props":966,"children":968},{"className":658,"code":967,"language":660,"meta":394,"style":394},"typeof x // ReferenceError\nlet x\n",[969],{"type":400,"tag":432,"props":970,"children":971},{"__ignoreMap":394},[972,988],{"type":400,"tag":436,"props":973,"children":974},{"class":438,"line":439},[975,979,983],{"type":400,"tag":436,"props":976,"children":977},{"style":466},[978],{"type":406,"value":949},{"type":400,"tag":436,"props":980,"children":981},{"style":670},[982],{"type":406,"value":954},{"type":400,"tag":436,"props":984,"children":985},{"style":723},[986],{"type":406,"value":987},"// ReferenceError\n",{"type":400,"tag":436,"props":989,"children":990},{"class":438,"line":729},[991,997],{"type":400,"tag":436,"props":992,"children":994},{"style":993},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[995],{"type":406,"value":996},"let",{"type":400,"tag":436,"props":998,"children":999},{"style":670},[1000],{"type":406,"value":1001}," x\n",{"type":400,"tag":414,"props":1003,"children":1004},{},[1005],{"type":406,"value":1006},"完整的运算符优先级列表如下：",{"type":406,"value":1008},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":1010,"props":1011,"children":1012},"table",{},[1013,1032],{"type":400,"tag":1014,"props":1015,"children":1016},"thead",{},[1017],{"type":400,"tag":1018,"props":1019,"children":1020},"tr",{},[1021,1027],{"type":400,"tag":1022,"props":1023,"children":1024},"th",{},[1025],{"type":406,"value":1026},"运算符",{"type":400,"tag":1022,"props":1028,"children":1029},{},[1030],{"type":406,"value":1031},"描述",{"type":400,"tag":1033,"props":1034,"children":1035},"tbody",{},[1036,1050,1068,1081,1094,1107,1120,1133,1146,1159,1172,1185,1198,1211,1224,1237,1250,1263,1276,1289],{"type":400,"tag":1018,"props":1037,"children":1038},{},[1039,1045],{"type":400,"tag":1040,"props":1041,"children":1042},"td",{},[1043],{"type":406,"value":1044},"()",{"type":400,"tag":1040,"props":1046,"children":1047},{},[1048],{"type":406,"value":1049},"成组运算",{"type":400,"tag":1018,"props":1051,"children":1052},{},[1053,1063],{"type":400,"tag":1040,"props":1054,"children":1055},{},[1056,1058,1061],{"type":406,"value":1057},".、",{"type":400,"tag":436,"props":1059,"children":1060},{},[],{"type":406,"value":1062},"、new ()",{"type":400,"tag":1040,"props":1064,"children":1065},{},[1066],{"type":406,"value":1067},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":400,"tag":1018,"props":1069,"children":1070},{},[1071,1076],{"type":400,"tag":1040,"props":1072,"children":1073},{},[1074],{"type":406,"value":1075},"()、new",{"type":400,"tag":1040,"props":1077,"children":1078},{},[1079],{"type":406,"value":1080},"函数调用、new 运算符",{"type":400,"tag":1018,"props":1082,"children":1083},{},[1084,1089],{"type":400,"tag":1040,"props":1085,"children":1086},{},[1087],{"type":406,"value":1088},"++、--",{"type":400,"tag":1040,"props":1090,"children":1091},{},[1092],{"type":406,"value":1093},"后置递增、后置递减",{"type":400,"tag":1018,"props":1095,"children":1096},{},[1097,1102],{"type":400,"tag":1040,"props":1098,"children":1099},{},[1100],{"type":406,"value":1101},"+、-、++、--、~、!、delete、typeof、void",{"type":400,"tag":1040,"props":1103,"children":1104},{},[1105],{"type":406,"value":1106},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":400,"tag":1018,"props":1108,"children":1109},{},[1110,1115],{"type":400,"tag":1040,"props":1111,"children":1112},{},[1113],{"type":406,"value":1114},"*、/、%",{"type":400,"tag":1040,"props":1116,"children":1117},{},[1118],{"type":406,"value":1119},"乘法、除法、取模",{"type":400,"tag":1018,"props":1121,"children":1122},{},[1123,1128],{"type":400,"tag":1040,"props":1124,"children":1125},{},[1126],{"type":406,"value":1127},"+、-、+",{"type":400,"tag":1040,"props":1129,"children":1130},{},[1131],{"type":406,"value":1132},"加法、减法、字符串连接",{"type":400,"tag":1018,"props":1134,"children":1135},{},[1136,1141],{"type":400,"tag":1040,"props":1137,"children":1138},{},[1139],{"type":406,"value":1140},"\u003C\u003C、>>、>>>",{"type":400,"tag":1040,"props":1142,"children":1143},{},[1144],{"type":406,"value":1145},"移位运算符",{"type":400,"tag":1018,"props":1147,"children":1148},{},[1149,1154],{"type":400,"tag":1040,"props":1150,"children":1151},{},[1152],{"type":406,"value":1153},"\u003C、\u003C=、>=、>、in、instanceof",{"type":400,"tag":1040,"props":1155,"children":1156},{},[1157],{"type":406,"value":1158},"关系运算符、in、instanceof",{"type":400,"tag":1018,"props":1160,"children":1161},{},[1162,1167],{"type":400,"tag":1040,"props":1163,"children":1164},{},[1165],{"type":406,"value":1166},"==、!=、===、!==",{"type":400,"tag":1040,"props":1168,"children":1169},{},[1170],{"type":406,"value":1171},"等值检测",{"type":400,"tag":1018,"props":1173,"children":1174},{},[1175,1180],{"type":400,"tag":1040,"props":1176,"children":1177},{},[1178],{"type":406,"value":1179},"&",{"type":400,"tag":1040,"props":1181,"children":1182},{},[1183],{"type":406,"value":1184},"按位与",{"type":400,"tag":1018,"props":1186,"children":1187},{},[1188,1193],{"type":400,"tag":1040,"props":1189,"children":1190},{},[1191],{"type":406,"value":1192},"^",{"type":400,"tag":1040,"props":1194,"children":1195},{},[1196],{"type":406,"value":1197},"按位异或",{"type":400,"tag":1018,"props":1199,"children":1200},{},[1201,1206],{"type":400,"tag":1040,"props":1202,"children":1203},{},[1204],{"type":406,"value":1205},"|",{"type":400,"tag":1040,"props":1207,"children":1208},{},[1209],{"type":406,"value":1210},"按位或",{"type":400,"tag":1018,"props":1212,"children":1213},{},[1214,1219],{"type":400,"tag":1040,"props":1215,"children":1216},{},[1217],{"type":406,"value":1218},"&&",{"type":400,"tag":1040,"props":1220,"children":1221},{},[1222],{"type":406,"value":1223},"逻辑与",{"type":400,"tag":1018,"props":1225,"children":1226},{},[1227,1232],{"type":400,"tag":1040,"props":1228,"children":1229},{},[1230],{"type":406,"value":1231},"||",{"type":400,"tag":1040,"props":1233,"children":1234},{},[1235],{"type":406,"value":1236},"逻辑或",{"type":400,"tag":1018,"props":1238,"children":1239},{},[1240,1245],{"type":400,"tag":1040,"props":1241,"children":1242},{},[1243],{"type":406,"value":1244},"?:",{"type":400,"tag":1040,"props":1246,"children":1247},{},[1248],{"type":406,"value":1249},"三木运算",{"type":400,"tag":1018,"props":1251,"children":1252},{},[1253,1258],{"type":400,"tag":1040,"props":1254,"children":1255},{},[1256],{"type":406,"value":1257},"=、oP=",{"type":400,"tag":1040,"props":1259,"children":1260},{},[1261],{"type":406,"value":1262},"赋值、运算赋值",{"type":400,"tag":1018,"props":1264,"children":1265},{},[1266,1271],{"type":400,"tag":1040,"props":1267,"children":1268},{},[1269],{"type":406,"value":1270},"yield、yield*",{"type":400,"tag":1040,"props":1272,"children":1273},{},[1274],{"type":406,"value":1275},"yield 表达式",{"type":400,"tag":1018,"props":1277,"children":1278},{},[1279,1284],{"type":400,"tag":1040,"props":1280,"children":1281},{},[1282],{"type":406,"value":1283},"...",{"type":400,"tag":1040,"props":1285,"children":1286},{},[1287],{"type":406,"value":1288},"展开运算符",{"type":400,"tag":1018,"props":1290,"children":1291},{},[1292,1297],{"type":400,"tag":1040,"props":1293,"children":1294},{},[1295],{"type":406,"value":1296},"，",{"type":400,"tag":1040,"props":1298,"children":1299},{},[1300],{"type":406,"value":1301},"逗号运算符、多重求值",{"type":400,"tag":414,"props":1303,"children":1304},{},[1305],{"type":406,"value":1306},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":400,"tag":425,"props":1308,"children":1310},{"className":658,"code":1309,"language":660,"meta":394,"style":394},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1311],{"type":400,"tag":432,"props":1312,"children":1313},{"__ignoreMap":394},[1314,1337,1373,1414,1423,1458,1495,1503,1530],{"type":400,"tag":436,"props":1315,"children":1316},{"class":438,"line":439},[1317,1322,1327,1332],{"type":400,"tag":436,"props":1318,"children":1319},{"style":993},[1320],{"type":406,"value":1321},"function",{"type":400,"tag":436,"props":1323,"children":1324},{"style":682},[1325],{"type":406,"value":1326}," A",{"type":400,"tag":436,"props":1328,"children":1329},{"style":676},[1330],{"type":406,"value":1331}," ()",{"type":400,"tag":436,"props":1333,"children":1334},{"style":676},[1335],{"type":406,"value":1336}," {\n",{"type":400,"tag":436,"props":1338,"children":1339},{"class":438,"line":729},[1340,1346,1350,1355,1360,1364,1368],{"type":400,"tag":436,"props":1341,"children":1343},{"style":1342},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1344],{"type":406,"value":1345},"  this",{"type":400,"tag":436,"props":1347,"children":1348},{"style":676},[1349],{"type":406,"value":679},{"type":400,"tag":436,"props":1351,"children":1352},{"style":670},[1353],{"type":406,"value":1354},"b",{"type":400,"tag":436,"props":1356,"children":1357},{"style":466},[1358],{"type":406,"value":1359}," =",{"type":400,"tag":436,"props":1361,"children":1362},{"style":449},[1363],{"type":406,"value":452},{"type":400,"tag":436,"props":1365,"children":1366},{"style":455},[1367],{"type":406,"value":1354},{"type":400,"tag":436,"props":1369,"children":1370},{"style":449},[1371],{"type":406,"value":1372},"'\n",{"type":400,"tag":436,"props":1374,"children":1376},{"class":438,"line":1375},3,[1377,1382,1386,1391,1396,1400,1405,1409],{"type":400,"tag":436,"props":1378,"children":1379},{"style":670},[1380],{"type":406,"value":1381},"  console",{"type":400,"tag":436,"props":1383,"children":1384},{"style":676},[1385],{"type":406,"value":679},{"type":400,"tag":436,"props":1387,"children":1388},{"style":682},[1389],{"type":406,"value":1390},"log",{"type":400,"tag":436,"props":1392,"children":1394},{"style":1393},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1395],{"type":406,"value":690},{"type":400,"tag":436,"props":1397,"children":1398},{"style":449},[1399],{"type":406,"value":463},{"type":400,"tag":436,"props":1401,"children":1402},{"style":455},[1403],{"type":406,"value":1404},"A().b",{"type":400,"tag":436,"props":1406,"children":1407},{"style":449},[1408],{"type":406,"value":463},{"type":400,"tag":436,"props":1410,"children":1411},{"style":1393},[1412],{"type":406,"value":1413},")\n",{"type":400,"tag":436,"props":1415,"children":1417},{"class":438,"line":1416},4,[1418],{"type":400,"tag":436,"props":1419,"children":1420},{"style":676},[1421],{"type":406,"value":1422},"}\n",{"type":400,"tag":436,"props":1424,"children":1426},{"class":438,"line":1425},5,[1427,1433,1437,1441,1445,1450,1454],{"type":400,"tag":436,"props":1428,"children":1430},{"style":1429},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1431],{"type":406,"value":1432},"A",{"type":400,"tag":436,"props":1434,"children":1435},{"style":676},[1436],{"type":406,"value":679},{"type":400,"tag":436,"props":1438,"children":1439},{"style":682},[1440],{"type":406,"value":1354},{"type":400,"tag":436,"props":1442,"children":1443},{"style":466},[1444],{"type":406,"value":1359},{"type":400,"tag":436,"props":1446,"children":1447},{"style":993},[1448],{"type":406,"value":1449}," function",{"type":400,"tag":436,"props":1451,"children":1452},{"style":676},[1453],{"type":406,"value":1331},{"type":400,"tag":436,"props":1455,"children":1456},{"style":676},[1457],{"type":406,"value":1336},{"type":400,"tag":436,"props":1459,"children":1461},{"class":438,"line":1460},6,[1462,1466,1470,1474,1478,1482,1487,1491],{"type":400,"tag":436,"props":1463,"children":1464},{"style":670},[1465],{"type":406,"value":1381},{"type":400,"tag":436,"props":1467,"children":1468},{"style":676},[1469],{"type":406,"value":679},{"type":400,"tag":436,"props":1471,"children":1472},{"style":682},[1473],{"type":406,"value":1390},{"type":400,"tag":436,"props":1475,"children":1476},{"style":1393},[1477],{"type":406,"value":690},{"type":400,"tag":436,"props":1479,"children":1480},{"style":449},[1481],{"type":406,"value":463},{"type":400,"tag":436,"props":1483,"children":1484},{"style":455},[1485],{"type":406,"value":1486},"A.b",{"type":400,"tag":436,"props":1488,"children":1489},{"style":449},[1490],{"type":406,"value":463},{"type":400,"tag":436,"props":1492,"children":1493},{"style":1393},[1494],{"type":406,"value":1413},{"type":400,"tag":436,"props":1496,"children":1498},{"class":438,"line":1497},7,[1499],{"type":400,"tag":436,"props":1500,"children":1501},{"style":676},[1502],{"type":406,"value":1422},{"type":400,"tag":436,"props":1504,"children":1506},{"class":438,"line":1505},8,[1507,1512,1516,1520,1525],{"type":400,"tag":436,"props":1508,"children":1509},{"style":466},[1510],{"type":406,"value":1511},"new",{"type":400,"tag":436,"props":1513,"children":1514},{"style":1429},[1515],{"type":406,"value":1326},{"type":400,"tag":436,"props":1517,"children":1518},{"style":676},[1519],{"type":406,"value":679},{"type":400,"tag":436,"props":1521,"children":1522},{"style":670},[1523],{"type":406,"value":1524},"b ",{"type":400,"tag":436,"props":1526,"children":1527},{"style":723},[1528],{"type":406,"value":1529},"// A.b\n",{"type":400,"tag":436,"props":1531,"children":1533},{"class":438,"line":1532},9,[1534,1538,1542,1546,1550,1554],{"type":400,"tag":436,"props":1535,"children":1536},{"style":466},[1537],{"type":406,"value":1511},{"type":400,"tag":436,"props":1539,"children":1540},{"style":682},[1541],{"type":406,"value":1326},{"type":400,"tag":436,"props":1543,"children":1544},{"style":670},[1545],{"type":406,"value":1044},{"type":400,"tag":436,"props":1547,"children":1548},{"style":676},[1549],{"type":406,"value":679},{"type":400,"tag":436,"props":1551,"children":1552},{"style":670},[1553],{"type":406,"value":1524},{"type":400,"tag":436,"props":1555,"children":1556},{"style":723},[1557],{"type":406,"value":1558},"// A().b\n",{"type":400,"tag":408,"props":1560,"children":1562},{"id":1561},"语句",[1563],{"type":406,"value":1561},{"type":400,"tag":414,"props":1565,"children":1566},{},[1567],{"type":406,"value":1568},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":400,"tag":414,"props":1570,"children":1571},{},[1572],{"type":406,"value":1573},"需要注意的点：",{"type":400,"tag":514,"props":1575,"children":1576},{},[1577,1582,1587],{"type":400,"tag":518,"props":1578,"children":1579},{},[1580],{"type":406,"value":1581},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":400,"tag":518,"props":1583,"children":1584},{},[1585],{"type":406,"value":1586},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":400,"tag":518,"props":1588,"children":1589},{},[1590],{"type":406,"value":1591},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":400,"tag":414,"props":1593,"children":1594},{},[1595],{"type":406,"value":1596},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":400,"tag":425,"props":1598,"children":1600},{"className":658,"code":1599,"language":660,"meta":394,"style":394},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1601],{"type":400,"tag":432,"props":1602,"children":1603},{"__ignoreMap":394},[1604,1635,1662],{"type":400,"tag":436,"props":1605,"children":1606},{"class":438,"line":439},[1607,1611,1616,1620,1626,1631],{"type":400,"tag":436,"props":1608,"children":1609},{"style":993},[1610],{"type":406,"value":1321},{"type":400,"tag":436,"props":1612,"children":1613},{"style":682},[1614],{"type":406,"value":1615}," log",{"type":400,"tag":436,"props":1617,"children":1618},{"style":676},[1619],{"type":406,"value":690},{"type":400,"tag":436,"props":1621,"children":1623},{"style":1622},"--shiki-light:#90A4AE;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#FD971F;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[1624],{"type":406,"value":1625},"arg",{"type":400,"tag":436,"props":1627,"children":1628},{"style":676},[1629],{"type":406,"value":1630},")",{"type":400,"tag":436,"props":1632,"children":1633},{"style":676},[1634],{"type":406,"value":1336},{"type":400,"tag":436,"props":1636,"children":1637},{"class":438,"line":729},[1638,1642,1646,1650,1654,1658],{"type":400,"tag":436,"props":1639,"children":1640},{"style":670},[1641],{"type":406,"value":1381},{"type":400,"tag":436,"props":1643,"children":1644},{"style":676},[1645],{"type":406,"value":679},{"type":400,"tag":436,"props":1647,"children":1648},{"style":682},[1649],{"type":406,"value":1390},{"type":400,"tag":436,"props":1651,"children":1652},{"style":1393},[1653],{"type":406,"value":690},{"type":400,"tag":436,"props":1655,"children":1656},{"style":670},[1657],{"type":406,"value":1625},{"type":400,"tag":436,"props":1659,"children":1660},{"style":1393},[1661],{"type":406,"value":1413},{"type":400,"tag":436,"props":1663,"children":1664},{"class":438,"line":1375},[1665,1670,1674,1678],{"type":400,"tag":436,"props":1666,"children":1667},{"style":676},[1668],{"type":406,"value":1669},"}",{"type":400,"tag":436,"props":1671,"children":1672},{"style":670},[1673],{"type":406,"value":690},{"type":400,"tag":436,"props":1675,"children":1676},{"style":698},[1677],{"type":406,"value":533},{"type":400,"tag":436,"props":1679,"children":1680},{"style":670},[1681],{"type":406,"value":1413},{"type":400,"tag":414,"props":1683,"children":1684},{},[1685],{"type":406,"value":1686},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":400,"tag":425,"props":1688,"children":1690},{"className":658,"code":1689,"language":660,"meta":394,"style":394},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1691],{"type":400,"tag":432,"props":1692,"children":1693},{"__ignoreMap":394},[1694,1746,1784,1811],{"type":400,"tag":436,"props":1695,"children":1696},{"class":438,"line":439},[1697,1703,1708,1713,1717,1722,1726,1731,1736,1741],{"type":400,"tag":436,"props":1698,"children":1700},{"style":1699},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[1701],{"type":406,"value":1702},"try",{"type":400,"tag":436,"props":1704,"children":1705},{"style":676},[1706],{"type":406,"value":1707}," {",{"type":400,"tag":436,"props":1709,"children":1710},{"style":1699},[1711],{"type":406,"value":1712}," throw",{"type":400,"tag":436,"props":1714,"children":1715},{"style":449},[1716],{"type":406,"value":452},{"type":400,"tag":436,"props":1718,"children":1719},{"style":455},[1720],{"type":406,"value":1721},"test",{"type":400,"tag":436,"props":1723,"children":1724},{"style":449},[1725],{"type":406,"value":463},{"type":400,"tag":436,"props":1727,"children":1728},{"style":676},[1729],{"type":406,"value":1730}," }",{"type":400,"tag":436,"props":1732,"children":1733},{"style":1699},[1734],{"type":406,"value":1735}," catch",{"type":400,"tag":436,"props":1737,"children":1738},{"style":670},[1739],{"type":406,"value":1740}," (e) ",{"type":400,"tag":436,"props":1742,"children":1743},{"style":676},[1744],{"type":406,"value":1745},"{\n",{"type":400,"tag":436,"props":1747,"children":1748},{"class":438,"line":729},[1749,1753,1757,1761,1765,1770,1774,1779],{"type":400,"tag":436,"props":1750,"children":1751},{"style":670},[1752],{"type":406,"value":1381},{"type":400,"tag":436,"props":1754,"children":1755},{"style":676},[1756],{"type":406,"value":679},{"type":400,"tag":436,"props":1758,"children":1759},{"style":682},[1760],{"type":406,"value":1390},{"type":400,"tag":436,"props":1762,"children":1763},{"style":1393},[1764],{"type":406,"value":690},{"type":400,"tag":436,"props":1766,"children":1767},{"style":670},[1768],{"type":406,"value":1769},"e",{"type":400,"tag":436,"props":1771,"children":1772},{"style":1393},[1773],{"type":406,"value":1630},{"type":400,"tag":436,"props":1775,"children":1776},{"style":676},[1777],{"type":406,"value":1778},";",{"type":400,"tag":436,"props":1780,"children":1781},{"style":723},[1782],{"type":406,"value":1783}," // test\n",{"type":400,"tag":436,"props":1785,"children":1786},{"class":438,"line":1375},[1787,1792,1797,1801,1806],{"type":400,"tag":436,"props":1788,"children":1789},{"style":993},[1790],{"type":406,"value":1791},"  var",{"type":400,"tag":436,"props":1793,"children":1794},{"style":670},[1795],{"type":406,"value":1796}," e",{"type":400,"tag":436,"props":1798,"children":1799},{"style":466},[1800],{"type":406,"value":1359},{"type":400,"tag":436,"props":1802,"children":1803},{"style":698},[1804],{"type":406,"value":1805}," 1",{"type":400,"tag":436,"props":1807,"children":1808},{"style":676},[1809],{"type":406,"value":1810},";\n",{"type":400,"tag":436,"props":1812,"children":1813},{"class":438,"line":1416},[1814],{"type":400,"tag":436,"props":1815,"children":1816},{"style":676},[1817],{"type":406,"value":1422},{"type":400,"tag":414,"props":1819,"children":1820},{},[1821],{"type":406,"value":1822},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":400,"tag":414,"props":1824,"children":1825},{},[1826],{"type":406,"value":1827},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":400,"tag":425,"props":1829,"children":1831},{"className":658,"code":1830,"language":660,"meta":394,"style":394},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1832],{"type":400,"tag":432,"props":1833,"children":1834},{"__ignoreMap":394},[1835,1843,1916,1982,2026,2068,2076,2083,2091,2106,2166,2227,2268,2309,2318,2326],{"type":400,"tag":436,"props":1836,"children":1837},{"class":438,"line":439},[1838],{"type":400,"tag":436,"props":1839,"children":1840},{"style":723},[1841],{"type":406,"value":1842},"// it works !\n",{"type":400,"tag":436,"props":1844,"children":1845},{"class":438,"line":729},[1846,1851,1856,1861,1866,1871,1875,1879,1884,1889,1894,1898,1903,1908,1912],{"type":400,"tag":436,"props":1847,"children":1849},{"style":1848},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1850],{"type":406,"value":1721},{"type":400,"tag":436,"props":1852,"children":1853},{"style":676},[1854],{"type":406,"value":1855},":",{"type":400,"tag":436,"props":1857,"children":1858},{"style":1699},[1859],{"type":406,"value":1860}," for",{"type":400,"tag":436,"props":1862,"children":1863},{"style":670},[1864],{"type":406,"value":1865}," (i ",{"type":400,"tag":436,"props":1867,"children":1868},{"style":466},[1869],{"type":406,"value":1870},"=",{"type":400,"tag":436,"props":1872,"children":1873},{"style":698},[1874],{"type":406,"value":1805},{"type":400,"tag":436,"props":1876,"children":1877},{"style":676},[1878],{"type":406,"value":1778},{"type":400,"tag":436,"props":1880,"children":1881},{"style":670},[1882],{"type":406,"value":1883}," i ",{"type":400,"tag":436,"props":1885,"children":1886},{"style":466},[1887],{"type":406,"value":1888},"\u003C",{"type":400,"tag":436,"props":1890,"children":1891},{"style":698},[1892],{"type":406,"value":1893}," 3",{"type":400,"tag":436,"props":1895,"children":1896},{"style":676},[1897],{"type":406,"value":1778},{"type":400,"tag":436,"props":1899,"children":1900},{"style":670},[1901],{"type":406,"value":1902}," i",{"type":400,"tag":436,"props":1904,"children":1905},{"style":466},[1906],{"type":406,"value":1907},"++",{"type":400,"tag":436,"props":1909,"children":1910},{"style":670},[1911],{"type":406,"value":720},{"type":400,"tag":436,"props":1913,"children":1914},{"style":676},[1915],{"type":406,"value":1745},{"type":400,"tag":436,"props":1917,"children":1918},{"class":438,"line":1375},[1919,1924,1929,1934,1938,1943,1947,1952,1957,1962,1966,1970,1974,1978],{"type":400,"tag":436,"props":1920,"children":1921},{"style":1699},[1922],{"type":406,"value":1923},"  for",{"type":400,"tag":436,"props":1925,"children":1926},{"style":1393},[1927],{"type":406,"value":1928}," (",{"type":400,"tag":436,"props":1930,"children":1931},{"style":670},[1932],{"type":406,"value":1933},"j",{"type":400,"tag":436,"props":1935,"children":1936},{"style":466},[1937],{"type":406,"value":1359},{"type":400,"tag":436,"props":1939,"children":1940},{"style":698},[1941],{"type":406,"value":1942}," 5",{"type":400,"tag":436,"props":1944,"children":1945},{"style":676},[1946],{"type":406,"value":1778},{"type":400,"tag":436,"props":1948,"children":1949},{"style":670},[1950],{"type":406,"value":1951}," j",{"type":400,"tag":436,"props":1953,"children":1954},{"style":466},[1955],{"type":406,"value":1956}," \u003C",{"type":400,"tag":436,"props":1958,"children":1959},{"style":698},[1960],{"type":406,"value":1961}," 8",{"type":400,"tag":436,"props":1963,"children":1964},{"style":676},[1965],{"type":406,"value":1778},{"type":400,"tag":436,"props":1967,"children":1968},{"style":670},[1969],{"type":406,"value":1951},{"type":400,"tag":436,"props":1971,"children":1972},{"style":466},[1973],{"type":406,"value":1907},{"type":400,"tag":436,"props":1975,"children":1976},{"style":1393},[1977],{"type":406,"value":720},{"type":400,"tag":436,"props":1979,"children":1980},{"style":676},[1981],{"type":406,"value":1745},{"type":400,"tag":436,"props":1983,"children":1984},{"class":438,"line":1416},[1985,1990,1994,1998,2003,2008,2012,2017,2022],{"type":400,"tag":436,"props":1986,"children":1987},{"style":1699},[1988],{"type":406,"value":1989},"    if",{"type":400,"tag":436,"props":1991,"children":1992},{"style":1393},[1993],{"type":406,"value":1928},{"type":400,"tag":436,"props":1995,"children":1996},{"style":670},[1997],{"type":406,"value":1933},{"type":400,"tag":436,"props":1999,"children":2000},{"style":466},[2001],{"type":406,"value":2002}," ===",{"type":400,"tag":436,"props":2004,"children":2005},{"style":698},[2006],{"type":406,"value":2007}," 6",{"type":400,"tag":436,"props":2009,"children":2010},{"style":1393},[2011],{"type":406,"value":720},{"type":400,"tag":436,"props":2013,"children":2014},{"style":1699},[2015],{"type":406,"value":2016},"continue",{"type":400,"tag":436,"props":2018,"children":2019},{"style":1848},[2020],{"type":406,"value":2021}," test",{"type":400,"tag":436,"props":2023,"children":2024},{"style":676},[2025],{"type":406,"value":1810},{"type":400,"tag":436,"props":2027,"children":2028},{"class":438,"line":1425},[2029,2034,2039,2043,2047,2051,2056,2060,2064],{"type":400,"tag":436,"props":2030,"children":2031},{"style":1699},[2032],{"type":406,"value":2033},"    else",{"type":400,"tag":436,"props":2035,"children":2036},{"style":670},[2037],{"type":406,"value":2038}," console",{"type":400,"tag":436,"props":2040,"children":2041},{"style":676},[2042],{"type":406,"value":679},{"type":400,"tag":436,"props":2044,"children":2045},{"style":682},[2046],{"type":406,"value":1390},{"type":400,"tag":436,"props":2048,"children":2049},{"style":1393},[2050],{"type":406,"value":690},{"type":400,"tag":436,"props":2052,"children":2053},{"style":670},[2054],{"type":406,"value":2055},"i",{"type":400,"tag":436,"props":2057,"children":2058},{"style":676},[2059],{"type":406,"value":706},{"type":400,"tag":436,"props":2061,"children":2062},{"style":670},[2063],{"type":406,"value":1951},{"type":400,"tag":436,"props":2065,"children":2066},{"style":1393},[2067],{"type":406,"value":1413},{"type":400,"tag":436,"props":2069,"children":2070},{"class":438,"line":1460},[2071],{"type":400,"tag":436,"props":2072,"children":2073},{"style":676},[2074],{"type":406,"value":2075},"  }\n",{"type":400,"tag":436,"props":2077,"children":2078},{"class":438,"line":1497},[2079],{"type":400,"tag":436,"props":2080,"children":2081},{"style":676},[2082],{"type":406,"value":1422},{"type":400,"tag":436,"props":2084,"children":2085},{"class":438,"line":1505},[2086],{"type":400,"tag":436,"props":2087,"children":2088},{"style":723},[2089],{"type":406,"value":2090},"// SyntaxError !\n",{"type":400,"tag":436,"props":2092,"children":2093},{"class":438,"line":1532},[2094,2098,2102],{"type":400,"tag":436,"props":2095,"children":2096},{"style":1848},[2097],{"type":406,"value":1721},{"type":400,"tag":436,"props":2099,"children":2100},{"style":676},[2101],{"type":406,"value":1855},{"type":400,"tag":436,"props":2103,"children":2104},{"style":676},[2105],{"type":406,"value":1336},{"type":400,"tag":436,"props":2107,"children":2109},{"class":438,"line":2108},10,[2110,2114,2118,2122,2126,2130,2134,2138,2142,2146,2150,2154,2158,2162],{"type":400,"tag":436,"props":2111,"children":2112},{"style":1699},[2113],{"type":406,"value":1923},{"type":400,"tag":436,"props":2115,"children":2116},{"style":1393},[2117],{"type":406,"value":1928},{"type":400,"tag":436,"props":2119,"children":2120},{"style":670},[2121],{"type":406,"value":2055},{"type":400,"tag":436,"props":2123,"children":2124},{"style":466},[2125],{"type":406,"value":1359},{"type":400,"tag":436,"props":2127,"children":2128},{"style":698},[2129],{"type":406,"value":1805},{"type":400,"tag":436,"props":2131,"children":2132},{"style":676},[2133],{"type":406,"value":1778},{"type":400,"tag":436,"props":2135,"children":2136},{"style":670},[2137],{"type":406,"value":1902},{"type":400,"tag":436,"props":2139,"children":2140},{"style":466},[2141],{"type":406,"value":1956},{"type":400,"tag":436,"props":2143,"children":2144},{"style":698},[2145],{"type":406,"value":1893},{"type":400,"tag":436,"props":2147,"children":2148},{"style":676},[2149],{"type":406,"value":1778},{"type":400,"tag":436,"props":2151,"children":2152},{"style":670},[2153],{"type":406,"value":1902},{"type":400,"tag":436,"props":2155,"children":2156},{"style":466},[2157],{"type":406,"value":1907},{"type":400,"tag":436,"props":2159,"children":2160},{"style":1393},[2161],{"type":406,"value":720},{"type":400,"tag":436,"props":2163,"children":2164},{"style":676},[2165],{"type":406,"value":1745},{"type":400,"tag":436,"props":2167,"children":2169},{"class":438,"line":2168},11,[2170,2175,2179,2183,2187,2191,2195,2199,2203,2207,2211,2215,2219,2223],{"type":400,"tag":436,"props":2171,"children":2172},{"style":1699},[2173],{"type":406,"value":2174},"    for",{"type":400,"tag":436,"props":2176,"children":2177},{"style":1393},[2178],{"type":406,"value":1928},{"type":400,"tag":436,"props":2180,"children":2181},{"style":670},[2182],{"type":406,"value":1933},{"type":400,"tag":436,"props":2184,"children":2185},{"style":466},[2186],{"type":406,"value":1359},{"type":400,"tag":436,"props":2188,"children":2189},{"style":698},[2190],{"type":406,"value":1942},{"type":400,"tag":436,"props":2192,"children":2193},{"style":676},[2194],{"type":406,"value":1778},{"type":400,"tag":436,"props":2196,"children":2197},{"style":670},[2198],{"type":406,"value":1951},{"type":400,"tag":436,"props":2200,"children":2201},{"style":466},[2202],{"type":406,"value":1956},{"type":400,"tag":436,"props":2204,"children":2205},{"style":698},[2206],{"type":406,"value":1961},{"type":400,"tag":436,"props":2208,"children":2209},{"style":676},[2210],{"type":406,"value":1778},{"type":400,"tag":436,"props":2212,"children":2213},{"style":670},[2214],{"type":406,"value":1951},{"type":400,"tag":436,"props":2216,"children":2217},{"style":466},[2218],{"type":406,"value":1907},{"type":400,"tag":436,"props":2220,"children":2221},{"style":1393},[2222],{"type":406,"value":720},{"type":400,"tag":436,"props":2224,"children":2225},{"style":676},[2226],{"type":406,"value":1745},{"type":400,"tag":436,"props":2228,"children":2230},{"class":438,"line":2229},12,[2231,2236,2240,2244,2248,2252,2256,2260,2264],{"type":400,"tag":436,"props":2232,"children":2233},{"style":1699},[2234],{"type":406,"value":2235},"      if",{"type":400,"tag":436,"props":2237,"children":2238},{"style":1393},[2239],{"type":406,"value":1928},{"type":400,"tag":436,"props":2241,"children":2242},{"style":670},[2243],{"type":406,"value":1933},{"type":400,"tag":436,"props":2245,"children":2246},{"style":466},[2247],{"type":406,"value":2002},{"type":400,"tag":436,"props":2249,"children":2250},{"style":698},[2251],{"type":406,"value":2007},{"type":400,"tag":436,"props":2253,"children":2254},{"style":1393},[2255],{"type":406,"value":720},{"type":400,"tag":436,"props":2257,"children":2258},{"style":1699},[2259],{"type":406,"value":2016},{"type":400,"tag":436,"props":2261,"children":2262},{"style":1848},[2263],{"type":406,"value":2021},{"type":400,"tag":436,"props":2265,"children":2266},{"style":676},[2267],{"type":406,"value":1810},{"type":400,"tag":436,"props":2269,"children":2271},{"class":438,"line":2270},13,[2272,2277,2281,2285,2289,2293,2297,2301,2305],{"type":400,"tag":436,"props":2273,"children":2274},{"style":1699},[2275],{"type":406,"value":2276},"      else",{"type":400,"tag":436,"props":2278,"children":2279},{"style":670},[2280],{"type":406,"value":2038},{"type":400,"tag":436,"props":2282,"children":2283},{"style":676},[2284],{"type":406,"value":679},{"type":400,"tag":436,"props":2286,"children":2287},{"style":682},[2288],{"type":406,"value":1390},{"type":400,"tag":436,"props":2290,"children":2291},{"style":1393},[2292],{"type":406,"value":690},{"type":400,"tag":436,"props":2294,"children":2295},{"style":670},[2296],{"type":406,"value":2055},{"type":400,"tag":436,"props":2298,"children":2299},{"style":676},[2300],{"type":406,"value":706},{"type":400,"tag":436,"props":2302,"children":2303},{"style":670},[2304],{"type":406,"value":1951},{"type":400,"tag":436,"props":2306,"children":2307},{"style":1393},[2308],{"type":406,"value":1413},{"type":400,"tag":436,"props":2310,"children":2312},{"class":438,"line":2311},14,[2313],{"type":400,"tag":436,"props":2314,"children":2315},{"style":676},[2316],{"type":406,"value":2317},"    }\n",{"type":400,"tag":436,"props":2319,"children":2321},{"class":438,"line":2320},15,[2322],{"type":400,"tag":436,"props":2323,"children":2324},{"style":676},[2325],{"type":406,"value":2075},{"type":400,"tag":436,"props":2327,"children":2329},{"class":438,"line":2328},16,[2330],{"type":400,"tag":436,"props":2331,"children":2332},{"style":676},[2333],{"type":406,"value":1422},{"type":400,"tag":414,"props":2335,"children":2336},{},[2337],{"type":406,"value":2338},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":400,"tag":414,"props":2340,"children":2341},{},[2342],{"type":406,"value":2343},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":400,"tag":408,"props":2345,"children":2347},{"id":2346},"模块",[2348],{"type":406,"value":2346},{"type":400,"tag":414,"props":2350,"children":2351},{},[2352],{"type":406,"value":2353},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":400,"tag":425,"props":2355,"children":2357},{"className":658,"code":2356,"language":660,"meta":394,"style":394},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2358],{"type":400,"tag":432,"props":2359,"children":2360},{"__ignoreMap":394},[2361,2409],{"type":400,"tag":436,"props":2362,"children":2363},{"class":438,"line":439},[2364,2369,2374,2378,2382,2387,2391,2396,2400,2405],{"type":400,"tag":436,"props":2365,"children":2366},{"style":1699},[2367],{"type":406,"value":2368},"import",{"type":400,"tag":436,"props":2370,"children":2371},{"style":670},[2372],{"type":406,"value":2373}," defaultExport",{"type":400,"tag":436,"props":2375,"children":2376},{"style":676},[2377],{"type":406,"value":706},{"type":400,"tag":436,"props":2379,"children":2380},{"style":676},[2381],{"type":406,"value":1707},{"type":400,"tag":436,"props":2383,"children":2384},{"style":670},[2385],{"type":406,"value":2386}," toolA",{"type":400,"tag":436,"props":2388,"children":2389},{"style":676},[2390],{"type":406,"value":1730},{"type":400,"tag":436,"props":2392,"children":2393},{"style":1699},[2394],{"type":406,"value":2395}," from",{"type":400,"tag":436,"props":2397,"children":2398},{"style":449},[2399],{"type":406,"value":452},{"type":400,"tag":436,"props":2401,"children":2402},{"style":455},[2403],{"type":406,"value":2404},"test.mjs",{"type":400,"tag":436,"props":2406,"children":2407},{"style":449},[2408],{"type":406,"value":1372},{"type":400,"tag":436,"props":2410,"children":2411},{"class":438,"line":729},[2412,2416,2420,2424,2429,2434,2439,2444,2448,2452],{"type":400,"tag":436,"props":2413,"children":2414},{"style":1699},[2415],{"type":406,"value":2368},{"type":400,"tag":436,"props":2417,"children":2418},{"style":670},[2419],{"type":406,"value":2373},{"type":400,"tag":436,"props":2421,"children":2422},{"style":676},[2423],{"type":406,"value":706},{"type":400,"tag":436,"props":2425,"children":2426},{"style":749},[2427],{"type":406,"value":2428}," *",{"type":400,"tag":436,"props":2430,"children":2431},{"style":1699},[2432],{"type":406,"value":2433}," as",{"type":400,"tag":436,"props":2435,"children":2436},{"style":670},[2437],{"type":406,"value":2438}," namespace ",{"type":400,"tag":436,"props":2440,"children":2441},{"style":1699},[2442],{"type":406,"value":2443},"from",{"type":400,"tag":436,"props":2445,"children":2446},{"style":449},[2447],{"type":406,"value":452},{"type":400,"tag":436,"props":2449,"children":2450},{"style":455},[2451],{"type":406,"value":2404},{"type":400,"tag":436,"props":2453,"children":2454},{"style":449},[2455],{"type":406,"value":1372},{"type":400,"tag":414,"props":2457,"children":2458},{},[2459],{"type":406,"value":2460},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":400,"tag":414,"props":2462,"children":2463},{},[2464],{"type":406,"value":2465},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":400,"tag":414,"props":2467,"children":2468},{},[2469],{"type":406,"value":2470},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":400,"tag":408,"props":2472,"children":2474},{"id":2473},"严格模式",[2475],{"type":406,"value":2473},{"type":400,"tag":414,"props":2477,"children":2478},{},[2479],{"type":406,"value":2480},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":400,"tag":414,"props":2482,"children":2483},{},[2484],{"type":406,"value":2485},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":400,"tag":414,"props":2487,"children":2488},{},[2489],{"type":406,"value":2490},"总的来说，严格模式一共有七条限制：",{"type":400,"tag":514,"props":2492,"children":2493},{},[2494,2499,2504,2509,2514,2519,2524,2529,2534,2539],{"type":400,"tag":518,"props":2495,"children":2496},{},[2497],{"type":406,"value":2498},"对象字面量中不能有相同的属性声明",{"type":400,"tag":518,"props":2500,"children":2501},{},[2502],{"type":406,"value":2503},"函数实参列表中不能有同名参数",{"type":400,"tag":518,"props":2505,"children":2506},{},[2507],{"type":406,"value":2508},"不能声明、重写或删除 eval、arguments 标识符",{"type":400,"tag":518,"props":2510,"children":2511},{},[2512],{"type":406,"value":2513},"不允许使用八进制数字字面量",{"type":400,"tag":518,"props":2515,"children":2516},{},[2517],{"type":406,"value":2518},"不能删除显式声明的标识符、名字或具名函数",{"type":400,"tag":518,"props":2520,"children":2521},{},[2522],{"type":406,"value":2523},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":400,"tag":518,"props":2525,"children":2526},{},[2527],{"type":406,"value":2528},"禁用 with 语句",{"type":400,"tag":518,"props":2530,"children":2531},{},[2532],{"type":406,"value":2533},"禁用隐式声明",{"type":400,"tag":518,"props":2535,"children":2536},{},[2537],{"type":406,"value":2538},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":400,"tag":518,"props":2540,"children":2541},{},[2542],{"type":406,"value":2543},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":400,"tag":414,"props":2545,"children":2546},{},[2547],{"type":406,"value":2548},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":400,"tag":514,"props":2550,"children":2551},{},[2552,2557],{"type":400,"tag":518,"props":2553,"children":2554},{},[2555],{"type":406,"value":2556},"间接调用 eval 函数",{"type":400,"tag":518,"props":2558,"children":2559},{},[2560],{"type":406,"value":2561},"使用 new Function 构造的新函数",{"type":400,"tag":408,"props":2563,"children":2565},{"id":2564},"运算符的二义性",[2566],{"type":406,"value":2564},{"type":400,"tag":414,"props":2568,"children":2569},{},[2570],{"type":406,"value":2571},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":400,"tag":414,"props":2573,"children":2574},{},[2575],{"type":406,"value":2576},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":400,"tag":414,"props":2578,"children":2579},{},[2580],{"type":406,"value":2581},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":400,"tag":414,"props":2583,"children":2584},{},[2585],{"type":406,"value":2586},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":400,"tag":401,"props":2588,"children":2590},{"id":2589},"面向对象语言特性",[2591],{"type":406,"value":2589},{"type":400,"tag":408,"props":2593,"children":2595},{"id":2594},"语法综述-1",[2596],{"type":406,"value":410},{"type":400,"tag":414,"props":2598,"children":2599},{},[2600],{"type":406,"value":2601},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":400,"tag":414,"props":2603,"children":2604},{},[2605],{"type":406,"value":2606},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":400,"tag":414,"props":2608,"children":2609},{},[2610],{"type":406,"value":2611},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":400,"tag":414,"props":2613,"children":2614},{},[2615],{"type":406,"value":2616},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":400,"tag":425,"props":2618,"children":2620},{"className":658,"code":2619,"language":660,"meta":394,"style":394},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2621],{"type":400,"tag":432,"props":2622,"children":2623},{"__ignoreMap":394},[2624,2645,2672,2701,2709,2726,2739,2746,2754,2762,2786],{"type":400,"tag":436,"props":2625,"children":2626},{"class":438,"line":439},[2627,2632,2637,2641],{"type":400,"tag":436,"props":2628,"children":2629},{"style":993},[2630],{"type":406,"value":2631},"var",{"type":400,"tag":436,"props":2633,"children":2634},{"style":670},[2635],{"type":406,"value":2636}," obj",{"type":400,"tag":436,"props":2638,"children":2639},{"style":466},[2640],{"type":406,"value":1870},{"type":400,"tag":436,"props":2642,"children":2643},{"style":676},[2644],{"type":406,"value":1745},{"type":400,"tag":436,"props":2646,"children":2647},{"class":438,"line":729},[2648,2653,2658,2662,2667],{"type":400,"tag":436,"props":2649,"children":2650},{"style":993},[2651],{"type":406,"value":2652},"  set",{"type":400,"tag":436,"props":2654,"children":2656},{"style":2655},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2657],{"type":406,"value":2021},{"type":400,"tag":436,"props":2659,"children":2660},{"style":676},[2661],{"type":406,"value":690},{"type":400,"tag":436,"props":2663,"children":2664},{"style":1622},[2665],{"type":406,"value":2666},"x",{"type":400,"tag":436,"props":2668,"children":2669},{"style":676},[2670],{"type":406,"value":2671},"){\n",{"type":400,"tag":436,"props":2673,"children":2674},{"class":438,"line":1375},[2675,2680,2684,2688,2693,2697],{"type":400,"tag":436,"props":2676,"children":2677},{"style":670},[2678],{"type":406,"value":2679},"    c",{"type":400,"tag":436,"props":2681,"children":2682},{"style":466},[2683],{"type":406,"value":1870},{"type":400,"tag":436,"props":2685,"children":2686},{"style":449},[2687],{"type":406,"value":463},{"type":400,"tag":436,"props":2689,"children":2690},{"style":455},[2691],{"type":406,"value":2692},"other",{"type":400,"tag":436,"props":2694,"children":2695},{"style":449},[2696],{"type":406,"value":463},{"type":400,"tag":436,"props":2698,"children":2699},{"style":676},[2700],{"type":406,"value":1810},{"type":400,"tag":436,"props":2702,"children":2703},{"class":438,"line":1416},[2704],{"type":400,"tag":436,"props":2705,"children":2706},{"style":676},[2707],{"type":406,"value":2708},"  },\n",{"type":400,"tag":436,"props":2710,"children":2711},{"class":438,"line":1425},[2712,2717,2721],{"type":400,"tag":436,"props":2713,"children":2714},{"style":993},[2715],{"type":406,"value":2716},"  get",{"type":400,"tag":436,"props":2718,"children":2719},{"style":2655},[2720],{"type":406,"value":2021},{"type":400,"tag":436,"props":2722,"children":2723},{"style":676},[2724],{"type":406,"value":2725},"(){\n",{"type":400,"tag":436,"props":2727,"children":2728},{"class":438,"line":1460},[2729,2734],{"type":400,"tag":436,"props":2730,"children":2731},{"style":1699},[2732],{"type":406,"value":2733},"    return",{"type":400,"tag":436,"props":2735,"children":2736},{"style":670},[2737],{"type":406,"value":2738}," c\n",{"type":400,"tag":436,"props":2740,"children":2741},{"class":438,"line":1497},[2742],{"type":400,"tag":436,"props":2743,"children":2744},{"style":676},[2745],{"type":406,"value":2708},{"type":400,"tag":436,"props":2747,"children":2748},{"class":438,"line":1505},[2749],{"type":400,"tag":436,"props":2750,"children":2751},{"style":723},[2752],{"type":406,"value":2753},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":400,"tag":436,"props":2755,"children":2756},{"class":438,"line":1532},[2757],{"type":400,"tag":436,"props":2758,"children":2759},{"style":723},[2760],{"type":406,"value":2761},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":400,"tag":436,"props":2763,"children":2764},{"class":438,"line":2108},[2765,2770,2774,2778,2782],{"type":400,"tag":436,"props":2766,"children":2767},{"style":1393},[2768],{"type":406,"value":2769},"  test",{"type":400,"tag":436,"props":2771,"children":2772},{"style":676},[2773],{"type":406,"value":1855},{"type":400,"tag":436,"props":2775,"children":2776},{"style":449},[2777],{"type":406,"value":452},{"type":400,"tag":436,"props":2779,"children":2780},{"style":455},[2781],{"type":406,"value":1721},{"type":400,"tag":436,"props":2783,"children":2784},{"style":449},[2785],{"type":406,"value":1372},{"type":400,"tag":436,"props":2787,"children":2788},{"class":438,"line":2168},[2789],{"type":400,"tag":436,"props":2790,"children":2791},{"style":676},[2792],{"type":406,"value":1422},{"type":400,"tag":414,"props":2794,"children":2795},{},[2796],{"type":406,"value":2797},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":400,"tag":425,"props":2799,"children":2801},{"className":658,"code":2800,"language":660,"meta":394,"style":394},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2802],{"type":400,"tag":432,"props":2803,"children":2804},{"__ignoreMap":394},[2805,2813,2857],{"type":400,"tag":436,"props":2806,"children":2807},{"class":438,"line":439},[2808],{"type":400,"tag":436,"props":2809,"children":2810},{"style":723},[2811],{"type":406,"value":2812},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":400,"tag":436,"props":2814,"children":2815},{"class":438,"line":729},[2816,2821,2825,2830,2834,2839,2844,2848,2853],{"type":400,"tag":436,"props":2817,"children":2819},{"style":2818},"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic",[2820],{"type":406,"value":1432},{"type":400,"tag":436,"props":2822,"children":2823},{"style":676},[2824],{"type":406,"value":679},{"type":400,"tag":436,"props":2826,"children":2827},{"style":1429},[2828],{"type":406,"value":2829},"prototype",{"type":400,"tag":436,"props":2831,"children":2832},{"style":466},[2833],{"type":406,"value":1359},{"type":400,"tag":436,"props":2835,"children":2836},{"style":466},[2837],{"type":406,"value":2838}," new",{"type":400,"tag":436,"props":2840,"children":2841},{"style":682},[2842],{"type":406,"value":2843}," B",{"type":400,"tag":436,"props":2845,"children":2846},{"style":670},[2847],{"type":406,"value":690},{"type":400,"tag":436,"props":2849,"children":2850},{"style":723},[2851],{"type":406,"value":2852},"/* 传入参数 */",{"type":400,"tag":436,"props":2854,"children":2855},{"style":670},[2856],{"type":406,"value":1413},{"type":400,"tag":436,"props":2858,"children":2859},{"class":438,"line":1375},[2860,2864,2868,2872,2876,2881,2885],{"type":400,"tag":436,"props":2861,"children":2862},{"style":2818},[2863],{"type":406,"value":1432},{"type":400,"tag":436,"props":2865,"children":2866},{"style":676},[2867],{"type":406,"value":679},{"type":400,"tag":436,"props":2869,"children":2870},{"style":1429},[2871],{"type":406,"value":2829},{"type":400,"tag":436,"props":2873,"children":2874},{"style":676},[2875],{"type":406,"value":679},{"type":400,"tag":436,"props":2877,"children":2878},{"style":1429},[2879],{"type":406,"value":2880},"constructor",{"type":400,"tag":436,"props":2882,"children":2883},{"style":466},[2884],{"type":406,"value":1359},{"type":400,"tag":436,"props":2886,"children":2887},{"style":1429},[2888],{"type":406,"value":2889}," A\n",{"type":400,"tag":414,"props":2891,"children":2892},{},[2893],{"type":406,"value":2894},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":400,"tag":414,"props":2896,"children":2897},{},[2898],{"type":406,"value":2899},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":400,"tag":414,"props":2901,"children":2902},{},[2903],{"type":406,"value":2904},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":400,"tag":414,"props":2906,"children":2907},{},[2908],{"type":406,"value":2909},"总结一下遍历对象成员的方法：",{"type":406,"value":2911},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":1010,"props":2913,"children":2914},{},[2915,2939],{"type":400,"tag":1014,"props":2916,"children":2917},{},[2918],{"type":400,"tag":1018,"props":2919,"children":2920},{},[2921,2926,2931,2935],{"type":400,"tag":1022,"props":2922,"children":2923},{},[2924],{"type":406,"value":2925},"键名",{"type":400,"tag":1022,"props":2927,"children":2928},{},[2929],{"type":406,"value":2930},"显隐式",{"type":400,"tag":1022,"props":2932,"children":2933},{},[2934],{"type":406,"value":403},{"type":400,"tag":1022,"props":2936,"children":2937},{},[2938],{"type":406,"value":1031},{"type":400,"tag":1033,"props":2940,"children":2941},{},[2942,2965,2985,3007],{"type":400,"tag":1018,"props":2943,"children":2944},{},[2945,2950,2955,2960],{"type":400,"tag":1040,"props":2946,"children":2947},{},[2948],{"type":406,"value":2949},"一般键名",{"type":400,"tag":1040,"props":2951,"children":2952},{},[2953],{"type":406,"value":2954},"显式",{"type":400,"tag":1040,"props":2956,"children":2957},{},[2958],{"type":406,"value":2959},"for...in",{"type":400,"tag":1040,"props":2961,"children":2962},{},[2963],{"type":406,"value":2964},"可列举的成员名（包含原型链）",{"type":400,"tag":1018,"props":2966,"children":2967},{},[2968,2972,2976,2981],{"type":400,"tag":1040,"props":2969,"children":2970},{},[2971],{"type":406,"value":2949},{"type":400,"tag":1040,"props":2973,"children":2974},{},[2975],{"type":406,"value":2954},{"type":400,"tag":1040,"props":2977,"children":2978},{},[2979],{"type":406,"value":2980},"Object.prototype.map、Object.prototype.entries、...",{"type":400,"tag":1040,"props":2982,"children":2983},{},[2984],{"type":406,"value":1283},{"type":400,"tag":1018,"props":2986,"children":2987},{},[2988,2992,2997,3002],{"type":400,"tag":1040,"props":2989,"children":2990},{},[2991],{"type":406,"value":2949},{"type":400,"tag":1040,"props":2993,"children":2994},{},[2995],{"type":406,"value":2996},"显式 & 隐式",{"type":400,"tag":1040,"props":2998,"children":2999},{},[3000],{"type":406,"value":3001},"Object.getOwnPropertyNames()",{"type":400,"tag":1040,"props":3003,"children":3004},{},[3005],{"type":406,"value":3006},"所有非符号的自由属性名",{"type":400,"tag":1018,"props":3008,"children":3009},{},[3010,3015,3019,3024],{"type":400,"tag":1040,"props":3011,"children":3012},{},[3013],{"type":406,"value":3014},"符号键名键名",{"type":400,"tag":1040,"props":3016,"children":3017},{},[3018],{"type":406,"value":2996},{"type":400,"tag":1040,"props":3020,"children":3021},{},[3022],{"type":406,"value":3023},"Object.getOwnPropertySymbols()",{"type":400,"tag":1040,"props":3025,"children":3026},{},[3027],{"type":406,"value":3028},"所有符号键名的自有属性名",{"type":400,"tag":414,"props":3030,"children":3031},{},[3032,3034,3039,3041,3045],{"type":406,"value":3033},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":400,"tag":436,"props":3035,"children":3036},{},[3037],{"type":406,"value":3038},"prop",{"type":406,"value":3040}," 更好的替代方案是 typeof(obj",{"type":400,"tag":436,"props":3042,"children":3043},{},[3044],{"type":406,"value":3038},{"type":406,"value":3046},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":400,"tag":414,"props":3048,"children":3049},{},[3050],{"type":406,"value":3051},"delete 运算符有些特殊的地方：",{"type":400,"tag":514,"props":3053,"children":3054},{},[3055,3060],{"type":400,"tag":518,"props":3056,"children":3057},{},[3058],{"type":406,"value":3059},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":400,"tag":518,"props":3061,"children":3062},{},[3063],{"type":406,"value":3064},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":400,"tag":408,"props":3066,"children":3068},{"id":3067},"原型继承",[3069],{"type":406,"value":3067},{"type":400,"tag":414,"props":3071,"children":3072},{},[3073],{"type":406,"value":3074},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":400,"tag":414,"props":3076,"children":3077},{},[3078],{"type":406,"value":3079},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":400,"tag":514,"props":3081,"children":3082},{},[3083,3088],{"type":400,"tag":518,"props":3084,"children":3085},{},[3086],{"type":406,"value":3087},"读对象的属性时优先读取对象的自有属性表",{"type":400,"tag":518,"props":3089,"children":3090},{},[3091],{"type":406,"value":3092},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":400,"tag":414,"props":3094,"children":3095},{},[3096],{"type":406,"value":3097},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":400,"tag":414,"props":3099,"children":3100},{},[3101],{"type":406,"value":3102},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":400,"tag":425,"props":3104,"children":3106},{"className":658,"code":3105,"language":660,"meta":394,"style":394},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3107],{"type":400,"tag":432,"props":3108,"children":3109},{"__ignoreMap":394},[3110,3130,3169,3210],{"type":400,"tag":436,"props":3111,"children":3112},{"class":438,"line":439},[3113,3117,3121,3125],{"type":400,"tag":436,"props":3114,"children":3115},{"style":993},[3116],{"type":406,"value":1321},{"type":400,"tag":436,"props":3118,"children":3119},{"style":682},[3120],{"type":406,"value":2021},{"type":400,"tag":436,"props":3122,"children":3123},{"style":676},[3124],{"type":406,"value":1331},{"type":400,"tag":436,"props":3126,"children":3127},{"style":676},[3128],{"type":406,"value":3129}," {}\n",{"type":400,"tag":436,"props":3131,"children":3132},{"class":438,"line":729},[3133,3137,3142,3146,3150,3155,3159,3164],{"type":400,"tag":436,"props":3134,"children":3135},{"style":993},[3136],{"type":406,"value":2631},{"type":400,"tag":436,"props":3138,"children":3139},{"style":670},[3140],{"type":406,"value":3141}," a ",{"type":400,"tag":436,"props":3143,"children":3144},{"style":466},[3145],{"type":406,"value":1870},{"type":400,"tag":436,"props":3147,"children":3148},{"style":676},[3149],{"type":406,"value":1707},{"type":400,"tag":436,"props":3151,"children":3152},{"style":2655},[3153],{"type":406,"value":3154}," testb",{"type":400,"tag":436,"props":3156,"children":3157},{"style":676},[3158],{"type":406,"value":1331},{"type":400,"tag":436,"props":3160,"children":3161},{"style":676},[3162],{"type":406,"value":3163}," {}",{"type":400,"tag":436,"props":3165,"children":3166},{"style":676},[3167],{"type":406,"value":3168}," }\n",{"type":400,"tag":436,"props":3170,"children":3171},{"class":438,"line":1375},[3172,3176,3180,3185,3189,3193,3197,3201,3205],{"type":400,"tag":436,"props":3173,"children":3174},{"style":670},[3175],{"type":406,"value":497},{"type":400,"tag":436,"props":3177,"children":3178},{"style":676},[3179],{"type":406,"value":679},{"type":400,"tag":436,"props":3181,"children":3182},{"style":670},[3183],{"type":406,"value":3184},"testb",{"type":400,"tag":436,"props":3186,"children":3187},{"style":676},[3188],{"type":406,"value":679},{"type":400,"tag":436,"props":3190,"children":3191},{"style":1429},[3192],{"type":406,"value":2829},{"type":400,"tag":436,"props":3194,"children":3195},{"style":466},[3196],{"type":406,"value":1359},{"type":400,"tag":436,"props":3198,"children":3199},{"style":2818},[3200],{"type":406,"value":2021},{"type":400,"tag":436,"props":3202,"children":3203},{"style":676},[3204],{"type":406,"value":679},{"type":400,"tag":436,"props":3206,"children":3207},{"style":1429},[3208],{"type":406,"value":3209},"prototype\n",{"type":400,"tag":436,"props":3211,"children":3212},{"class":438,"line":1416},[3213,3217,3222,3226,3230,3234],{"type":400,"tag":436,"props":3214,"children":3215},{"style":466},[3216],{"type":406,"value":1511},{"type":400,"tag":436,"props":3218,"children":3219},{"style":670},[3220],{"type":406,"value":3221}," a",{"type":400,"tag":436,"props":3223,"children":3224},{"style":676},[3225],{"type":406,"value":679},{"type":400,"tag":436,"props":3227,"children":3228},{"style":682},[3229],{"type":406,"value":3184},{"type":400,"tag":436,"props":3231,"children":3232},{"style":670},[3233],{"type":406,"value":824},{"type":400,"tag":436,"props":3235,"children":3236},{"style":723},[3237],{"type":406,"value":3238},"// TypeError\n",{"type":400,"tag":414,"props":3240,"children":3241},{},[3242,3244,3252],{"type":406,"value":3243},"在",{"type":400,"tag":497,"props":3245,"children":3249},{"href":3246,"rel":3247},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3248],"nofollow",[3250],{"type":406,"value":3251},"规范",{"type":406,"value":3253},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":400,"tag":414,"props":3255,"children":3256},{},[3257],{"type":406,"value":3258},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":400,"tag":425,"props":3260,"children":3262},{"className":658,"code":3261,"language":660,"meta":394,"style":394},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3263],{"type":400,"tag":432,"props":3264,"children":3265},{"__ignoreMap":394},[3266,3286,3306],{"type":400,"tag":436,"props":3267,"children":3268},{"class":438,"line":439},[3269,3273,3278,3282],{"type":400,"tag":436,"props":3270,"children":3271},{"style":993},[3272],{"type":406,"value":1321},{"type":400,"tag":436,"props":3274,"children":3275},{"style":682},[3276],{"type":406,"value":3277}," Parent",{"type":400,"tag":436,"props":3279,"children":3280},{"style":676},[3281],{"type":406,"value":1331},{"type":400,"tag":436,"props":3283,"children":3284},{"style":676},[3285],{"type":406,"value":3129},{"type":400,"tag":436,"props":3287,"children":3288},{"class":438,"line":729},[3289,3293,3298,3302],{"type":400,"tag":436,"props":3290,"children":3291},{"style":993},[3292],{"type":406,"value":1321},{"type":400,"tag":436,"props":3294,"children":3295},{"style":682},[3296],{"type":406,"value":3297}," Child",{"type":400,"tag":436,"props":3299,"children":3300},{"style":676},[3301],{"type":406,"value":1331},{"type":400,"tag":436,"props":3303,"children":3304},{"style":676},[3305],{"type":406,"value":3129},{"type":400,"tag":436,"props":3307,"children":3308},{"class":438,"line":1375},[3309,3314,3318,3322,3326,3330,3334],{"type":400,"tag":436,"props":3310,"children":3311},{"style":2818},[3312],{"type":406,"value":3313},"Child",{"type":400,"tag":436,"props":3315,"children":3316},{"style":676},[3317],{"type":406,"value":679},{"type":400,"tag":436,"props":3319,"children":3320},{"style":1429},[3321],{"type":406,"value":2829},{"type":400,"tag":436,"props":3323,"children":3324},{"style":466},[3325],{"type":406,"value":1359},{"type":400,"tag":436,"props":3327,"children":3328},{"style":466},[3329],{"type":406,"value":2838},{"type":400,"tag":436,"props":3331,"children":3332},{"style":682},[3333],{"type":406,"value":3277},{"type":400,"tag":436,"props":3335,"children":3336},{"style":670},[3337],{"type":406,"value":3338},"()\n",{"type":400,"tag":414,"props":3340,"children":3341},{},[3342],{"type":406,"value":3343},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":400,"tag":425,"props":3345,"children":3347},{"className":658,"code":3346,"language":660,"meta":394,"style":394},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3348],{"type":400,"tag":432,"props":3349,"children":3350},{"__ignoreMap":394},[3351,3359],{"type":400,"tag":436,"props":3352,"children":3353},{"class":438,"line":439},[3354],{"type":400,"tag":436,"props":3355,"children":3356},{"style":723},[3357],{"type":406,"value":3358},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":400,"tag":436,"props":3360,"children":3361},{"class":438,"line":729},[3362,3366,3370,3374,3378,3382,3386],{"type":400,"tag":436,"props":3363,"children":3364},{"style":2818},[3365],{"type":406,"value":3313},{"type":400,"tag":436,"props":3367,"children":3368},{"style":676},[3369],{"type":406,"value":679},{"type":400,"tag":436,"props":3371,"children":3372},{"style":1429},[3373],{"type":406,"value":2829},{"type":400,"tag":436,"props":3375,"children":3376},{"style":676},[3377],{"type":406,"value":679},{"type":400,"tag":436,"props":3379,"children":3380},{"style":1429},[3381],{"type":406,"value":2880},{"type":400,"tag":436,"props":3383,"children":3384},{"style":466},[3385],{"type":406,"value":1359},{"type":400,"tag":436,"props":3387,"children":3388},{"style":670},[3389],{"type":406,"value":3390}," Child\n",{"type":400,"tag":425,"props":3392,"children":3394},{"className":658,"code":3393,"language":660,"meta":394,"style":394},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3395],{"type":400,"tag":432,"props":3396,"children":3397},{"__ignoreMap":394},[3398,3406,3425,3444,3467,3474],{"type":400,"tag":436,"props":3399,"children":3400},{"class":438,"line":439},[3401],{"type":400,"tag":436,"props":3402,"children":3403},{"style":723},[3404],{"type":406,"value":3405},"// 这种方法叫做圣杯模式\n",{"type":400,"tag":436,"props":3407,"children":3408},{"class":438,"line":729},[3409,3413,3417,3421],{"type":400,"tag":436,"props":3410,"children":3411},{"style":993},[3412],{"type":406,"value":1321},{"type":400,"tag":436,"props":3414,"children":3415},{"style":682},[3416],{"type":406,"value":3277},{"type":400,"tag":436,"props":3418,"children":3419},{"style":676},[3420],{"type":406,"value":1331},{"type":400,"tag":436,"props":3422,"children":3423},{"style":676},[3424],{"type":406,"value":3129},{"type":400,"tag":436,"props":3426,"children":3427},{"class":438,"line":1375},[3428,3432,3436,3440],{"type":400,"tag":436,"props":3429,"children":3430},{"style":993},[3431],{"type":406,"value":1321},{"type":400,"tag":436,"props":3433,"children":3434},{"style":682},[3435],{"type":406,"value":3297},{"type":400,"tag":436,"props":3437,"children":3438},{"style":676},[3439],{"type":406,"value":1331},{"type":400,"tag":436,"props":3441,"children":3442},{"style":676},[3443],{"type":406,"value":1336},{"type":400,"tag":436,"props":3445,"children":3446},{"class":438,"line":1416},[3447,3451,3455,3459,3463],{"type":400,"tag":436,"props":3448,"children":3449},{"style":1342},[3450],{"type":406,"value":1345},{"type":400,"tag":436,"props":3452,"children":3453},{"style":676},[3454],{"type":406,"value":679},{"type":400,"tag":436,"props":3456,"children":3457},{"style":1429},[3458],{"type":406,"value":2880},{"type":400,"tag":436,"props":3460,"children":3461},{"style":466},[3462],{"type":406,"value":1359},{"type":400,"tag":436,"props":3464,"children":3465},{"style":670},[3466],{"type":406,"value":3390},{"type":400,"tag":436,"props":3468,"children":3469},{"class":438,"line":1425},[3470],{"type":400,"tag":436,"props":3471,"children":3472},{"style":676},[3473],{"type":406,"value":1422},{"type":400,"tag":436,"props":3475,"children":3476},{"class":438,"line":1460},[3477,3481,3485,3489,3493,3497,3501],{"type":400,"tag":436,"props":3478,"children":3479},{"style":2818},[3480],{"type":406,"value":3313},{"type":400,"tag":436,"props":3482,"children":3483},{"style":676},[3484],{"type":406,"value":679},{"type":400,"tag":436,"props":3486,"children":3487},{"style":1429},[3488],{"type":406,"value":2829},{"type":400,"tag":436,"props":3490,"children":3491},{"style":466},[3492],{"type":406,"value":1359},{"type":400,"tag":436,"props":3494,"children":3495},{"style":466},[3496],{"type":406,"value":2838},{"type":400,"tag":436,"props":3498,"children":3499},{"style":682},[3500],{"type":406,"value":3277},{"type":400,"tag":436,"props":3502,"children":3503},{"style":670},[3504],{"type":406,"value":3338},{"type":400,"tag":414,"props":3506,"children":3507},{},[3508],{"type":406,"value":3509},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":400,"tag":408,"props":3511,"children":3513},{"id":3512},"类继承",[3514],{"type":406,"value":3512},{"type":400,"tag":414,"props":3516,"children":3517},{},[3518],{"type":406,"value":3519},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":400,"tag":425,"props":3521,"children":3523},{"className":658,"code":3522,"language":660,"meta":394,"style":394},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3524],{"type":400,"tag":432,"props":3525,"children":3526},{"__ignoreMap":394},[3527,3535,3552,3578,3586,3605,3624,3654],{"type":400,"tag":436,"props":3528,"children":3529},{"class":438,"line":439},[3530],{"type":400,"tag":436,"props":3531,"children":3532},{"style":723},[3533],{"type":406,"value":3534},"/* 类声明 */\n",{"type":400,"tag":436,"props":3536,"children":3537},{"class":438,"line":729},[3538,3543,3548],{"type":400,"tag":436,"props":3539,"children":3540},{"style":993},[3541],{"type":406,"value":3542},"class",{"type":400,"tag":436,"props":3544,"children":3546},{"style":3545},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E;--shiki-light-text-decoration:inherit;--shiki-default-text-decoration:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia-text-decoration:underline",[3547],{"type":406,"value":3277},{"type":400,"tag":436,"props":3549,"children":3550},{"style":676},[3551],{"type":406,"value":3129},{"type":400,"tag":436,"props":3553,"children":3554},{"class":438,"line":1375},[3555,3559,3563,3569,3574],{"type":400,"tag":436,"props":3556,"children":3557},{"style":993},[3558],{"type":406,"value":3542},{"type":400,"tag":436,"props":3560,"children":3561},{"style":3545},[3562],{"type":406,"value":3297},{"type":400,"tag":436,"props":3564,"children":3566},{"style":3565},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3567],{"type":406,"value":3568}," extends",{"type":400,"tag":436,"props":3570,"children":3572},{"style":3571},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:italic;--shiki-light-text-decoration:inherit;--shiki-default-text-decoration:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia-text-decoration:underline",[3573],{"type":406,"value":3277},{"type":400,"tag":436,"props":3575,"children":3576},{"style":676},[3577],{"type":406,"value":3129},{"type":400,"tag":436,"props":3579,"children":3580},{"class":438,"line":1416},[3581],{"type":400,"tag":436,"props":3582,"children":3583},{"style":723},[3584],{"type":406,"value":3585},"/* 仿制代码 */\n",{"type":400,"tag":436,"props":3587,"children":3588},{"class":438,"line":1425},[3589,3593,3597,3601],{"type":400,"tag":436,"props":3590,"children":3591},{"style":993},[3592],{"type":406,"value":1321},{"type":400,"tag":436,"props":3594,"children":3595},{"style":682},[3596],{"type":406,"value":3277},{"type":400,"tag":436,"props":3598,"children":3599},{"style":676},[3600],{"type":406,"value":1044},{"type":400,"tag":436,"props":3602,"children":3603},{"style":676},[3604],{"type":406,"value":3129},{"type":400,"tag":436,"props":3606,"children":3607},{"class":438,"line":1460},[3608,3612,3616,3620],{"type":400,"tag":436,"props":3609,"children":3610},{"style":993},[3611],{"type":406,"value":1321},{"type":400,"tag":436,"props":3613,"children":3614},{"style":682},[3615],{"type":406,"value":3297},{"type":400,"tag":436,"props":3617,"children":3618},{"style":676},[3619],{"type":406,"value":1044},{"type":400,"tag":436,"props":3621,"children":3622},{"style":676},[3623],{"type":406,"value":3129},{"type":400,"tag":436,"props":3625,"children":3626},{"class":438,"line":1497},[3627,3631,3635,3640,3645,3649],{"type":400,"tag":436,"props":3628,"children":3629},{"style":670},[3630],{"type":406,"value":673},{"type":400,"tag":436,"props":3632,"children":3633},{"style":676},[3634],{"type":406,"value":679},{"type":400,"tag":436,"props":3636,"children":3637},{"style":682},[3638],{"type":406,"value":3639},"setPrototypeOf",{"type":400,"tag":436,"props":3641,"children":3642},{"style":670},[3643],{"type":406,"value":3644},"(Child",{"type":400,"tag":436,"props":3646,"children":3647},{"style":676},[3648],{"type":406,"value":706},{"type":400,"tag":436,"props":3650,"children":3651},{"style":670},[3652],{"type":406,"value":3653}," Parent)\n",{"type":400,"tag":436,"props":3655,"children":3656},{"class":438,"line":1505},[3657,3661,3665,3669,3673,3677,3681,3685,3689,3693,3697,3701],{"type":400,"tag":436,"props":3658,"children":3659},{"style":670},[3660],{"type":406,"value":673},{"type":400,"tag":436,"props":3662,"children":3663},{"style":676},[3664],{"type":406,"value":679},{"type":400,"tag":436,"props":3666,"children":3667},{"style":682},[3668],{"type":406,"value":3639},{"type":400,"tag":436,"props":3670,"children":3671},{"style":670},[3672],{"type":406,"value":690},{"type":400,"tag":436,"props":3674,"children":3675},{"style":2818},[3676],{"type":406,"value":3313},{"type":400,"tag":436,"props":3678,"children":3679},{"style":676},[3680],{"type":406,"value":679},{"type":400,"tag":436,"props":3682,"children":3683},{"style":1429},[3684],{"type":406,"value":2829},{"type":400,"tag":436,"props":3686,"children":3687},{"style":676},[3688],{"type":406,"value":706},{"type":400,"tag":436,"props":3690,"children":3691},{"style":2818},[3692],{"type":406,"value":3277},{"type":400,"tag":436,"props":3694,"children":3695},{"style":676},[3696],{"type":406,"value":679},{"type":400,"tag":436,"props":3698,"children":3699},{"style":1429},[3700],{"type":406,"value":2829},{"type":400,"tag":436,"props":3702,"children":3703},{"style":670},[3704],{"type":406,"value":1413},{"type":400,"tag":414,"props":3706,"children":3707},{},[3708],{"type":406,"value":3709},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":400,"tag":414,"props":3711,"children":3712},{},[3713],{"type":406,"value":3714},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":400,"tag":414,"props":3716,"children":3717},{},[3718],{"type":406,"value":3719},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":400,"tag":425,"props":3721,"children":3723},{"className":658,"code":3722,"language":660,"meta":394,"style":394},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3724],{"type":400,"tag":432,"props":3725,"children":3726},{"__ignoreMap":394},[3727,3768,3799,3835,3864,3876],{"type":400,"tag":436,"props":3728,"children":3729},{"class":438,"line":439},[3730,3735,3739,3743,3747,3752,3756,3760,3764],{"type":400,"tag":436,"props":3731,"children":3732},{"style":2818},[3733],{"type":406,"value":3734},"object",{"type":400,"tag":436,"props":3736,"children":3737},{"style":676},[3738],{"type":406,"value":679},{"type":400,"tag":436,"props":3740,"children":3741},{"style":1429},[3742],{"type":406,"value":2829},{"type":400,"tag":436,"props":3744,"children":3745},{"style":676},[3746],{"type":406,"value":679},{"type":400,"tag":436,"props":3748,"children":3749},{"style":682},[3750],{"type":406,"value":3751},"method",{"type":400,"tag":436,"props":3753,"children":3754},{"style":466},[3755],{"type":406,"value":1359},{"type":400,"tag":436,"props":3757,"children":3758},{"style":993},[3759],{"type":406,"value":1449},{"type":400,"tag":436,"props":3761,"children":3762},{"style":676},[3763],{"type":406,"value":1331},{"type":400,"tag":436,"props":3765,"children":3766},{"style":676},[3767],{"type":406,"value":1336},{"type":400,"tag":436,"props":3769,"children":3770},{"class":438,"line":729},[3771,3776,3781,3785,3790,3794],{"type":400,"tag":436,"props":3772,"children":3773},{"style":993},[3774],{"type":406,"value":3775},"  const",{"type":400,"tag":436,"props":3777,"children":3778},{"style":1429},[3779],{"type":406,"value":3780}," thisClass",{"type":400,"tag":436,"props":3782,"children":3783},{"style":466},[3784],{"type":406,"value":1359},{"type":400,"tag":436,"props":3786,"children":3787},{"style":1342},[3788],{"type":406,"value":3789}," this",{"type":400,"tag":436,"props":3791,"children":3792},{"style":676},[3793],{"type":406,"value":679},{"type":400,"tag":436,"props":3795,"children":3796},{"style":1429},[3797],{"type":406,"value":3798},"constructor\n",{"type":400,"tag":436,"props":3800,"children":3801},{"class":438,"line":1375},[3802,3806,3811,3815,3819,3823,3827,3831],{"type":400,"tag":436,"props":3803,"children":3804},{"style":993},[3805],{"type":406,"value":3775},{"type":400,"tag":436,"props":3807,"children":3808},{"style":1429},[3809],{"type":406,"value":3810}," parentClass",{"type":400,"tag":436,"props":3812,"children":3813},{"style":466},[3814],{"type":406,"value":1359},{"type":400,"tag":436,"props":3816,"children":3817},{"style":2818},[3818],{"type":406,"value":3780},{"type":400,"tag":436,"props":3820,"children":3821},{"style":676},[3822],{"type":406,"value":679},{"type":400,"tag":436,"props":3824,"children":3825},{"style":1429},[3826],{"type":406,"value":2829},{"type":400,"tag":436,"props":3828,"children":3829},{"style":676},[3830],{"type":406,"value":679},{"type":400,"tag":436,"props":3832,"children":3833},{"style":1429},[3834],{"type":406,"value":3798},{"type":400,"tag":436,"props":3836,"children":3837},{"class":438,"line":1416},[3838,3842,3847,3851,3855,3859],{"type":400,"tag":436,"props":3839,"children":3840},{"style":993},[3841],{"type":406,"value":3775},{"type":400,"tag":436,"props":3843,"children":3844},{"style":1429},[3845],{"type":406,"value":3846}," parentMethod",{"type":400,"tag":436,"props":3848,"children":3849},{"style":466},[3850],{"type":406,"value":1359},{"type":400,"tag":436,"props":3852,"children":3853},{"style":670},[3854],{"type":406,"value":3810},{"type":400,"tag":436,"props":3856,"children":3857},{"style":676},[3858],{"type":406,"value":679},{"type":400,"tag":436,"props":3860,"children":3861},{"style":670},[3862],{"type":406,"value":3863},"method\n",{"type":400,"tag":436,"props":3865,"children":3866},{"class":438,"line":1425},[3867,3872],{"type":400,"tag":436,"props":3868,"children":3869},{"style":682},[3870],{"type":406,"value":3871},"  parentMethod",{"type":400,"tag":436,"props":3873,"children":3874},{"style":1393},[3875],{"type":406,"value":3338},{"type":400,"tag":436,"props":3877,"children":3878},{"class":438,"line":1460},[3879],{"type":400,"tag":436,"props":3880,"children":3881},{"style":676},[3882],{"type":406,"value":1422},{"type":400,"tag":414,"props":3884,"children":3885},{},[3886],{"type":406,"value":3887},"super 的指向由几个规则所限制：",{"type":400,"tag":514,"props":3889,"children":3890},{},[3891,3896,3901,3906,3911],{"type":400,"tag":518,"props":3892,"children":3893},{},[3894],{"type":406,"value":3895},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":400,"tag":518,"props":3897,"children":3898},{},[3899],{"type":406,"value":3900},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":400,"tag":518,"props":3902,"children":3903},{},[3904],{"type":406,"value":3905},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":400,"tag":518,"props":3907,"children":3908},{},[3909],{"type":406,"value":3910},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":400,"tag":518,"props":3912,"children":3913},{},[3914],{"type":406,"value":3915},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":400,"tag":414,"props":3917,"children":3918},{},[3919],{"type":406,"value":3920},"总结可以得出规律：",{"type":400,"tag":514,"props":3922,"children":3923},{},[3924,3929],{"type":400,"tag":518,"props":3925,"children":3926},{},[3927],{"type":406,"value":3928},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":400,"tag":518,"props":3930,"children":3931},{},[3932],{"type":406,"value":3933},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":400,"tag":414,"props":3935,"children":3936},{},[3937],{"type":406,"value":3938},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":400,"tag":425,"props":3940,"children":3942},{"className":658,"code":3941,"language":660,"meta":394,"style":394},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3943],{"type":400,"tag":432,"props":3944,"children":3945},{"__ignoreMap":394},[3946,3987,4057,4086,4094,4133,4167],{"type":400,"tag":436,"props":3947,"children":3948},{"class":438,"line":439},[3949,3954,3958,3962,3967,3971,3975,3979,3983],{"type":400,"tag":436,"props":3950,"children":3951},{"style":670},[3952],{"type":406,"value":3953},"proto ",{"type":400,"tag":436,"props":3955,"children":3956},{"style":466},[3957],{"type":406,"value":1870},{"type":400,"tag":436,"props":3959,"children":3960},{"style":676},[3961],{"type":406,"value":1707},{"type":400,"tag":436,"props":3963,"children":3964},{"style":1393},[3965],{"type":406,"value":3966},"data",{"type":400,"tag":436,"props":3968,"children":3969},{"style":676},[3970],{"type":406,"value":1855},{"type":400,"tag":436,"props":3972,"children":3973},{"style":449},[3974],{"type":406,"value":452},{"type":400,"tag":436,"props":3976,"children":3977},{"style":455},[3978],{"type":406,"value":1721},{"type":400,"tag":436,"props":3980,"children":3981},{"style":449},[3982],{"type":406,"value":463},{"type":400,"tag":436,"props":3984,"children":3985},{"style":676},[3986],{"type":406,"value":1422},{"type":400,"tag":436,"props":3988,"children":3989},{"class":438,"line":729},[3990,3995,3999,4003,4007,4011,4015,4019,4023,4027,4031,4037,4041,4045,4049,4053],{"type":400,"tag":436,"props":3991,"children":3992},{"style":670},[3993],{"type":406,"value":3994},"obj ",{"type":400,"tag":436,"props":3996,"children":3997},{"style":466},[3998],{"type":406,"value":1870},{"type":400,"tag":436,"props":4000,"children":4001},{"style":676},[4002],{"type":406,"value":1707},{"type":400,"tag":436,"props":4004,"children":4005},{"style":2655},[4006],{"type":406,"value":2021},{"type":400,"tag":436,"props":4008,"children":4009},{"style":676},[4010],{"type":406,"value":1044},{"type":400,"tag":436,"props":4012,"children":4013},{"style":676},[4014],{"type":406,"value":1707},{"type":400,"tag":436,"props":4016,"children":4017},{"style":670},[4018],{"type":406,"value":2038},{"type":400,"tag":436,"props":4020,"children":4021},{"style":676},[4022],{"type":406,"value":679},{"type":400,"tag":436,"props":4024,"children":4025},{"style":682},[4026],{"type":406,"value":1390},{"type":400,"tag":436,"props":4028,"children":4029},{"style":1393},[4030],{"type":406,"value":690},{"type":400,"tag":436,"props":4032,"children":4034},{"style":4033},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4035],{"type":406,"value":4036},"super",{"type":400,"tag":436,"props":4038,"children":4039},{"style":676},[4040],{"type":406,"value":679},{"type":400,"tag":436,"props":4042,"children":4043},{"style":670},[4044],{"type":406,"value":3966},{"type":400,"tag":436,"props":4046,"children":4047},{"style":1393},[4048],{"type":406,"value":720},{"type":400,"tag":436,"props":4050,"children":4051},{"style":676},[4052],{"type":406,"value":1669},{"type":400,"tag":436,"props":4054,"children":4055},{"style":676},[4056],{"type":406,"value":3168},{"type":400,"tag":436,"props":4058,"children":4059},{"class":438,"line":1375},[4060,4064,4068,4072,4077,4081],{"type":400,"tag":436,"props":4061,"children":4062},{"style":670},[4063],{"type":406,"value":673},{"type":400,"tag":436,"props":4065,"children":4066},{"style":676},[4067],{"type":406,"value":679},{"type":400,"tag":436,"props":4069,"children":4070},{"style":682},[4071],{"type":406,"value":3639},{"type":400,"tag":436,"props":4073,"children":4074},{"style":670},[4075],{"type":406,"value":4076},"(obj",{"type":400,"tag":436,"props":4078,"children":4079},{"style":676},[4080],{"type":406,"value":706},{"type":400,"tag":436,"props":4082,"children":4083},{"style":670},[4084],{"type":406,"value":4085}," proto)\n",{"type":400,"tag":436,"props":4087,"children":4088},{"class":438,"line":1416},[4089],{"type":400,"tag":436,"props":4090,"children":4091},{"emptyLinePlaceholder":393},[4092],{"type":406,"value":4093},"\n",{"type":400,"tag":436,"props":4095,"children":4096},{"class":438,"line":1425},[4097,4102,4106,4111,4115,4120,4124,4129],{"type":400,"tag":436,"props":4098,"children":4099},{"style":670},[4100],{"type":406,"value":4101},"obj2 ",{"type":400,"tag":436,"props":4103,"children":4104},{"style":466},[4105],{"type":406,"value":1870},{"type":400,"tag":436,"props":4107,"children":4108},{"style":670},[4109],{"type":406,"value":4110}," Object",{"type":400,"tag":436,"props":4112,"children":4113},{"style":676},[4114],{"type":406,"value":679},{"type":400,"tag":436,"props":4116,"children":4117},{"style":682},[4118],{"type":406,"value":4119},"create",{"type":400,"tag":436,"props":4121,"children":4122},{"style":670},[4123],{"type":406,"value":690},{"type":400,"tag":436,"props":4125,"children":4126},{"style":749},[4127],{"type":406,"value":4128},"null",{"type":400,"tag":436,"props":4130,"children":4131},{"style":670},[4132],{"type":406,"value":1413},{"type":400,"tag":436,"props":4134,"children":4135},{"class":438,"line":1460},[4136,4141,4145,4150,4154,4158,4162],{"type":400,"tag":436,"props":4137,"children":4138},{"style":670},[4139],{"type":406,"value":4140},"obj2",{"type":400,"tag":436,"props":4142,"children":4143},{"style":676},[4144],{"type":406,"value":679},{"type":400,"tag":436,"props":4146,"children":4147},{"style":670},[4148],{"type":406,"value":4149},"test ",{"type":400,"tag":436,"props":4151,"children":4152},{"style":466},[4153],{"type":406,"value":1870},{"type":400,"tag":436,"props":4155,"children":4156},{"style":670},[4157],{"type":406,"value":2636},{"type":400,"tag":436,"props":4159,"children":4160},{"style":676},[4161],{"type":406,"value":679},{"type":400,"tag":436,"props":4163,"children":4164},{"style":670},[4165],{"type":406,"value":4166},"test\n",{"type":400,"tag":436,"props":4168,"children":4169},{"class":438,"line":1497},[4170,4174,4178,4182,4186],{"type":400,"tag":436,"props":4171,"children":4172},{"style":670},[4173],{"type":406,"value":4140},{"type":400,"tag":436,"props":4175,"children":4176},{"style":676},[4177],{"type":406,"value":679},{"type":400,"tag":436,"props":4179,"children":4180},{"style":682},[4181],{"type":406,"value":1721},{"type":400,"tag":436,"props":4183,"children":4184},{"style":670},[4185],{"type":406,"value":824},{"type":400,"tag":436,"props":4187,"children":4188},{"style":723},[4189],{"type":406,"value":4190},"// 'test'\n",{"type":400,"tag":414,"props":4192,"children":4193},{},[4194],{"type":406,"value":4195},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":400,"tag":414,"props":4197,"children":4198},{},[4199],{"type":406,"value":4200},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":400,"tag":414,"props":4202,"children":4203},{},[4204],{"type":406,"value":4205},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":400,"tag":425,"props":4207,"children":4209},{"className":658,"code":4208,"language":660,"meta":394,"style":394},"class StaticClass extends null {\n  static pow () {}\n}\n",[4210],{"type":400,"tag":432,"props":4211,"children":4212},{"__ignoreMap":394},[4213,4238,4259],{"type":400,"tag":436,"props":4214,"children":4215},{"class":438,"line":439},[4216,4220,4225,4229,4234],{"type":400,"tag":436,"props":4217,"children":4218},{"style":993},[4219],{"type":406,"value":3542},{"type":400,"tag":436,"props":4221,"children":4222},{"style":3545},[4223],{"type":406,"value":4224}," StaticClass",{"type":400,"tag":436,"props":4226,"children":4227},{"style":3565},[4228],{"type":406,"value":3568},{"type":400,"tag":436,"props":4230,"children":4231},{"style":749},[4232],{"type":406,"value":4233}," null",{"type":400,"tag":436,"props":4235,"children":4236},{"style":676},[4237],{"type":406,"value":1336},{"type":400,"tag":436,"props":4239,"children":4240},{"class":438,"line":729},[4241,4246,4251,4255],{"type":400,"tag":436,"props":4242,"children":4243},{"style":3565},[4244],{"type":406,"value":4245},"  static",{"type":400,"tag":436,"props":4247,"children":4248},{"style":2655},[4249],{"type":406,"value":4250}," pow",{"type":400,"tag":436,"props":4252,"children":4253},{"style":676},[4254],{"type":406,"value":1331},{"type":400,"tag":436,"props":4256,"children":4257},{"style":676},[4258],{"type":406,"value":3129},{"type":400,"tag":436,"props":4260,"children":4261},{"class":438,"line":1375},[4262],{"type":400,"tag":436,"props":4263,"children":4264},{"style":676},[4265],{"type":406,"value":1422},{"type":400,"tag":414,"props":4267,"children":4268},{},[4269],{"type":406,"value":4270},"P196，这个 new.target.prototype 没看懂。",{"type":400,"tag":408,"props":4272,"children":4274},{"id":4273},"对象系统",[4275],{"type":406,"value":4273},{"type":400,"tag":414,"props":4277,"children":4278},{},[4279],{"type":406,"value":4280},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":400,"tag":414,"props":4282,"children":4283},{},[4284],{"type":406,"value":4285},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":400,"tag":414,"props":4287,"children":4288},{},[4289],{"type":406,"value":4290},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":400,"tag":425,"props":4292,"children":4294},{"className":658,"code":4293,"language":660,"meta":394,"style":394},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4295],{"type":400,"tag":432,"props":4296,"children":4297},{"__ignoreMap":394},[4298,4313,4336,4357],{"type":400,"tag":436,"props":4299,"children":4300},{"class":438,"line":439},[4301,4305,4309],{"type":400,"tag":436,"props":4302,"children":4303},{"style":993},[4304],{"type":406,"value":3542},{"type":400,"tag":436,"props":4306,"children":4307},{"style":3545},[4308],{"type":406,"value":1326},{"type":400,"tag":436,"props":4310,"children":4311},{"style":676},[4312],{"type":406,"value":3129},{"type":400,"tag":436,"props":4314,"children":4315},{"class":438,"line":729},[4316,4320,4324,4328,4332],{"type":400,"tag":436,"props":4317,"children":4318},{"style":993},[4319],{"type":406,"value":3542},{"type":400,"tag":436,"props":4321,"children":4322},{"style":3545},[4323],{"type":406,"value":2843},{"type":400,"tag":436,"props":4325,"children":4326},{"style":3565},[4327],{"type":406,"value":3568},{"type":400,"tag":436,"props":4329,"children":4330},{"style":3571},[4331],{"type":406,"value":1326},{"type":400,"tag":436,"props":4333,"children":4334},{"style":676},[4335],{"type":406,"value":3129},{"type":400,"tag":436,"props":4337,"children":4338},{"class":438,"line":1375},[4339,4344,4349,4353],{"type":400,"tag":436,"props":4340,"children":4341},{"style":1429},[4342],{"type":406,"value":4343},"B",{"type":400,"tag":436,"props":4345,"children":4346},{"style":466},[4347],{"type":406,"value":4348}," instanceof",{"type":400,"tag":436,"props":4350,"children":4351},{"style":3545},[4352],{"type":406,"value":1326},{"type":400,"tag":436,"props":4354,"children":4355},{"style":723},[4356],{"type":406,"value":840},{"type":400,"tag":436,"props":4358,"children":4359},{"class":438,"line":1416},[4360,4364,4368,4373,4377,4381,4385],{"type":400,"tag":436,"props":4361,"children":4362},{"style":1429},[4363],{"type":406,"value":1432},{"type":400,"tag":436,"props":4365,"children":4366},{"style":676},[4367],{"type":406,"value":679},{"type":400,"tag":436,"props":4369,"children":4370},{"style":682},[4371],{"type":406,"value":4372},"isPrototypeOf",{"type":400,"tag":436,"props":4374,"children":4375},{"style":670},[4376],{"type":406,"value":690},{"type":400,"tag":436,"props":4378,"children":4379},{"style":1429},[4380],{"type":406,"value":4343},{"type":400,"tag":436,"props":4382,"children":4383},{"style":670},[4384],{"type":406,"value":720},{"type":400,"tag":436,"props":4386,"children":4387},{"style":723},[4388],{"type":406,"value":770},{"type":400,"tag":414,"props":4390,"children":4391},{},[4392],{"type":406,"value":4393},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":400,"tag":414,"props":4395,"children":4396},{},[4397],{"type":406,"value":4398},"this 实在函数执行时动态传入的，规则有三：",{"type":400,"tag":514,"props":4400,"children":4401},{},[4402,4407,4412],{"type":400,"tag":518,"props":4403,"children":4404},{},[4405],{"type":406,"value":4406},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":400,"tag":518,"props":4408,"children":4409},{},[4410],{"type":406,"value":4411},"根据存取运算符将左操作符作为 this 传入",{"type":400,"tag":518,"props":4413,"children":4414},{},[4415],{"type":406,"value":4416},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":400,"tag":414,"props":4418,"children":4419},{},[4420],{"type":406,"value":4421},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":400,"tag":514,"props":4423,"children":4424},{},[4425,4430],{"type":400,"tag":518,"props":4426,"children":4427},{},[4428],{"type":406,"value":4429},"如果运行在严格模式中，不改变 this 的值，否则",{"type":400,"tag":518,"props":4431,"children":4432},{},[4433],{"type":406,"value":4434},"使用全局对象作为 this 值",{"type":400,"tag":414,"props":4436,"children":4437},{},[4438],{"type":406,"value":4439},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":400,"tag":414,"props":4441,"children":4442},{},[4443],{"type":406,"value":4444},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":400,"tag":514,"props":4446,"children":4447},{},[4448,4453],{"type":400,"tag":518,"props":4449,"children":4450},{},[4451],{"type":406,"value":4452},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":400,"tag":518,"props":4454,"children":4455},{},[4456],{"type":406,"value":4457},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":400,"tag":414,"props":4459,"children":4460},{},[4461],{"type":406,"value":4462},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":400,"tag":414,"props":4464,"children":4465},{},[4466],{"type":406,"value":4467},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":400,"tag":425,"props":4469,"children":4471},{"className":658,"code":4470,"language":660,"meta":394,"style":394},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4472],{"type":400,"tag":432,"props":4473,"children":4474},{"__ignoreMap":394},[4475,4483,4504,4511,4519],{"type":400,"tag":436,"props":4476,"children":4477},{"class":438,"line":439},[4478],{"type":400,"tag":436,"props":4479,"children":4480},{"style":723},[4481],{"type":406,"value":4482},"// 获得所有原生对象、宿主对象等\n",{"type":400,"tag":436,"props":4484,"children":4485},{"class":438,"line":729},[4486,4490,4494,4499],{"type":400,"tag":436,"props":4487,"children":4488},{"style":670},[4489],{"type":406,"value":673},{"type":400,"tag":436,"props":4491,"children":4492},{"style":676},[4493],{"type":406,"value":679},{"type":400,"tag":436,"props":4495,"children":4496},{"style":682},[4497],{"type":406,"value":4498},"getOwnPropertyNames",{"type":400,"tag":436,"props":4500,"children":4501},{"style":670},[4502],{"type":406,"value":4503},"(global)\n",{"type":400,"tag":436,"props":4505,"children":4506},{"class":438,"line":1375},[4507],{"type":400,"tag":436,"props":4508,"children":4509},{"emptyLinePlaceholder":393},[4510],{"type":406,"value":4093},{"type":400,"tag":436,"props":4512,"children":4513},{"class":438,"line":1416},[4514],{"type":400,"tag":436,"props":4515,"children":4516},{"style":723},[4517],{"type":406,"value":4518},"// 验证 undefined 是否存在 global 对象中\n",{"type":400,"tag":436,"props":4520,"children":4521},{"class":438,"line":1425},[4522,4526,4530,4535,4540,4544,4548,4553,4557,4561],{"type":400,"tag":436,"props":4523,"children":4524},{"style":670},[4525],{"type":406,"value":673},{"type":400,"tag":436,"props":4527,"children":4528},{"style":676},[4529],{"type":406,"value":679},{"type":400,"tag":436,"props":4531,"children":4532},{"style":682},[4533],{"type":406,"value":4534},"getOwnPropertyDescriptor",{"type":400,"tag":436,"props":4536,"children":4537},{"style":670},[4538],{"type":406,"value":4539},"(global",{"type":400,"tag":436,"props":4541,"children":4542},{"style":676},[4543],{"type":406,"value":706},{"type":400,"tag":436,"props":4545,"children":4546},{"style":449},[4547],{"type":406,"value":452},{"type":400,"tag":436,"props":4549,"children":4550},{"style":455},[4551],{"type":406,"value":4552},"undefined",{"type":400,"tag":436,"props":4554,"children":4555},{"style":449},[4556],{"type":406,"value":463},{"type":400,"tag":436,"props":4558,"children":4559},{"style":670},[4560],{"type":406,"value":720},{"type":400,"tag":436,"props":4562,"children":4563},{"style":723},[4564],{"type":406,"value":4565},"// {value: undefined /* ... */ }\n",{"type":400,"tag":414,"props":4567,"children":4568},{},[4569],{"type":406,"value":4570},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":400,"tag":414,"props":4572,"children":4573},{},[4574],{"type":406,"value":4575},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":400,"tag":414,"props":4577,"children":4578},{},[4579],{"type":406,"value":4580},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":406,"value":4582},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":1010,"props":4584,"children":4585},{},[4586,4607],{"type":400,"tag":1014,"props":4587,"children":4588},{},[4589],{"type":400,"tag":1018,"props":4590,"children":4591},{},[4592,4597,4602],{"type":400,"tag":1022,"props":4593,"children":4594},{},[4595],{"type":406,"value":4596},"对象",{"type":400,"tag":1022,"props":4598,"children":4599},{},[4600],{"type":406,"value":4601},"特殊效果",{"type":400,"tag":1022,"props":4603,"children":4604},{},[4605],{"type":406,"value":4606},"注",{"type":400,"tag":1033,"props":4608,"children":4609},{},[4610,4628,4645,4661,4677,4693,4711,4727,4743,4759],{"type":400,"tag":1018,"props":4611,"children":4612},{},[4613,4618,4623],{"type":400,"tag":1040,"props":4614,"children":4615},{},[4616],{"type":406,"value":4617},"Number、String、Boolean、Symbol",{"type":400,"tag":1040,"props":4619,"children":4620},{},[4621],{"type":406,"value":4622},"包装类",{"type":400,"tag":1040,"props":4624,"children":4625},{},[4626],{"type":406,"value":4627},"({}).toString()",{"type":400,"tag":1018,"props":4629,"children":4630},{},[4631,4635,4640],{"type":400,"tag":1040,"props":4632,"children":4633},{},[4634],{"type":406,"value":673},{"type":400,"tag":1040,"props":4636,"children":4637},{},[4638],{"type":406,"value":4639},"调用包装类",{"type":400,"tag":1040,"props":4641,"children":4642},{},[4643],{"type":406,"value":4644},"new Object(5) + new Object(3)",{"type":400,"tag":1018,"props":4646,"children":4647},{},[4648,4653,4658],{"type":400,"tag":1040,"props":4649,"children":4650},{},[4651],{"type":406,"value":4652},"Array",{"type":400,"tag":1040,"props":4654,"children":4655},{},[4656],{"type":406,"value":4657},"自动维护 length 属性",{"type":400,"tag":1040,"props":4659,"children":4660},{},[],{"type":400,"tag":1018,"props":4662,"children":4663},{},[4664,4669,4674],{"type":400,"tag":1040,"props":4665,"children":4666},{},[4667],{"type":406,"value":4668},"Date",{"type":400,"tag":1040,"props":4670,"children":4671},{},[4672],{"type":406,"value":4673},"日期对象相关的运算",{"type":400,"tag":1040,"props":4675,"children":4676},{},[],{"type":400,"tag":1018,"props":4678,"children":4679},{},[4680,4685,4690],{"type":400,"tag":1040,"props":4681,"children":4682},{},[4683],{"type":406,"value":4684},"Function",{"type":400,"tag":1040,"props":4686,"children":4687},{},[4688],{"type":406,"value":4689},"创建可执行的函数",{"type":400,"tag":1040,"props":4691,"children":4692},{},[],{"type":400,"tag":1018,"props":4694,"children":4695},{},[4696,4701,4706],{"type":400,"tag":1040,"props":4697,"children":4698},{},[4699],{"type":406,"value":4700},"RegExp",{"type":400,"tag":1040,"props":4702,"children":4703},{},[4704],{"type":406,"value":4705},"可执行",{"type":400,"tag":1040,"props":4707,"children":4708},{},[4709],{"type":406,"value":4710},"仅在某些宿主中",{"type":400,"tag":1018,"props":4712,"children":4713},{},[4714,4719,4724],{"type":400,"tag":1040,"props":4715,"children":4716},{},[4717],{"type":406,"value":4718},"Proxy",{"type":400,"tag":1040,"props":4720,"children":4721},{},[4722],{"type":406,"value":4723},"代理目标对象、回收代理",{"type":400,"tag":1040,"props":4725,"children":4726},{},[],{"type":400,"tag":1018,"props":4728,"children":4729},{},[4730,4735,4740],{"type":400,"tag":1040,"props":4731,"children":4732},{},[4733],{"type":406,"value":4734},"TypedArray、DataView",{"type":400,"tag":1040,"props":4736,"children":4737},{},[4738],{"type":406,"value":4739},"创建及绑定 buffer",{"type":400,"tag":1040,"props":4741,"children":4742},{},[],{"type":400,"tag":1018,"props":4744,"children":4745},{},[4746,4751,4756],{"type":400,"tag":1040,"props":4747,"children":4748},{},[4749],{"type":406,"value":4750},"ArrayBuffer、SharedArray、Buffer",{"type":400,"tag":1040,"props":4752,"children":4753},{},[4754],{"type":406,"value":4755},"初始化 buffer 并维护 byteLength 属性",{"type":400,"tag":1040,"props":4757,"children":4758},{},[],{"type":400,"tag":1018,"props":4760,"children":4761},{},[4762,4767,4772],{"type":400,"tag":1040,"props":4763,"children":4764},{},[4765],{"type":406,"value":4766},"WeakMap、WeakSet",{"type":400,"tag":1040,"props":4768,"children":4769},{},[4770],{"type":406,"value":4771},"不修改引用并自动回收对象",{"type":400,"tag":1040,"props":4773,"children":4774},{},[],{"type":400,"tag":414,"props":4776,"children":4777},{},[4778],{"type":406,"value":4779},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":400,"tag":425,"props":4781,"children":4783},{"className":658,"code":4782,"language":660,"meta":394,"style":394},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4784],{"type":400,"tag":432,"props":4785,"children":4786},{"__ignoreMap":394},[4787,4820,4857,4933,4946,4953,5005,5012],{"type":400,"tag":436,"props":4788,"children":4789},{"class":438,"line":439},[4790,4794,4799,4803,4807,4812,4816],{"type":400,"tag":436,"props":4791,"children":4792},{"style":993},[4793],{"type":406,"value":1321},{"type":400,"tag":436,"props":4795,"children":4796},{"style":682},[4797],{"type":406,"value":4798}," MyDate",{"type":400,"tag":436,"props":4800,"children":4801},{"style":676},[4802],{"type":406,"value":690},{"type":400,"tag":436,"props":4804,"children":4805},{"style":466},[4806],{"type":406,"value":1283},{"type":400,"tag":436,"props":4808,"children":4809},{"style":1622},[4810],{"type":406,"value":4811},"args",{"type":400,"tag":436,"props":4813,"children":4814},{"style":676},[4815],{"type":406,"value":1630},{"type":400,"tag":436,"props":4817,"children":4818},{"style":676},[4819],{"type":406,"value":1336},{"type":400,"tag":436,"props":4821,"children":4822},{"class":438,"line":729},[4823,4827,4832,4836,4841,4845,4849,4853],{"type":400,"tag":436,"props":4824,"children":4825},{"style":993},[4826],{"type":406,"value":3775},{"type":400,"tag":436,"props":4828,"children":4829},{"style":1429},[4830],{"type":406,"value":4831}," Base",{"type":400,"tag":436,"props":4833,"children":4834},{"style":466},[4835],{"type":406,"value":1359},{"type":400,"tag":436,"props":4837,"children":4838},{"style":2818},[4839],{"type":406,"value":4840}," Date",{"type":400,"tag":436,"props":4842,"children":4843},{"style":676},[4844],{"type":406,"value":679},{"type":400,"tag":436,"props":4846,"children":4847},{"style":1429},[4848],{"type":406,"value":2829},{"type":400,"tag":436,"props":4850,"children":4851},{"style":676},[4852],{"type":406,"value":679},{"type":400,"tag":436,"props":4854,"children":4855},{"style":1429},[4856],{"type":406,"value":3798},{"type":400,"tag":436,"props":4858,"children":4859},{"class":438,"line":1375},[4860,4864,4869,4873,4877,4881,4885,4889,4893,4897,4901,4905,4909,4913,4917,4921,4925,4929],{"type":400,"tag":436,"props":4861,"children":4862},{"style":993},[4863],{"type":406,"value":3775},{"type":400,"tag":436,"props":4865,"children":4866},{"style":1429},[4867],{"type":406,"value":4868}," instance",{"type":400,"tag":436,"props":4870,"children":4871},{"style":466},[4872],{"type":406,"value":1359},{"type":400,"tag":436,"props":4874,"children":4875},{"style":670},[4876],{"type":406,"value":4110},{"type":400,"tag":436,"props":4878,"children":4879},{"style":676},[4880],{"type":406,"value":679},{"type":400,"tag":436,"props":4882,"children":4883},{"style":682},[4884],{"type":406,"value":3639},{"type":400,"tag":436,"props":4886,"children":4887},{"style":1393},[4888],{"type":406,"value":690},{"type":400,"tag":436,"props":4890,"children":4891},{"style":466},[4892],{"type":406,"value":1511},{"type":400,"tag":436,"props":4894,"children":4895},{"style":682},[4896],{"type":406,"value":4831},{"type":400,"tag":436,"props":4898,"children":4899},{"style":1393},[4900],{"type":406,"value":690},{"type":400,"tag":436,"props":4902,"children":4903},{"style":466},[4904],{"type":406,"value":1283},{"type":400,"tag":436,"props":4906,"children":4907},{"style":670},[4908],{"type":406,"value":4811},{"type":400,"tag":436,"props":4910,"children":4911},{"style":1393},[4912],{"type":406,"value":1630},{"type":400,"tag":436,"props":4914,"children":4915},{"style":676},[4916],{"type":406,"value":706},{"type":400,"tag":436,"props":4918,"children":4919},{"style":2818},[4920],{"type":406,"value":4798},{"type":400,"tag":436,"props":4922,"children":4923},{"style":676},[4924],{"type":406,"value":679},{"type":400,"tag":436,"props":4926,"children":4927},{"style":1429},[4928],{"type":406,"value":2829},{"type":400,"tag":436,"props":4930,"children":4931},{"style":1393},[4932],{"type":406,"value":1413},{"type":400,"tag":436,"props":4934,"children":4935},{"class":438,"line":1416},[4936,4941],{"type":400,"tag":436,"props":4937,"children":4938},{"style":1699},[4939],{"type":406,"value":4940},"  return",{"type":400,"tag":436,"props":4942,"children":4943},{"style":670},[4944],{"type":406,"value":4945}," instance\n",{"type":400,"tag":436,"props":4947,"children":4948},{"class":438,"line":1425},[4949],{"type":400,"tag":436,"props":4950,"children":4951},{"style":676},[4952],{"type":406,"value":1422},{"type":400,"tag":436,"props":4954,"children":4955},{"class":438,"line":1460},[4956,4960,4964,4968,4972,4977,4981,4985,4989,4993,4997,5001],{"type":400,"tag":436,"props":4957,"children":4958},{"style":670},[4959],{"type":406,"value":673},{"type":400,"tag":436,"props":4961,"children":4962},{"style":676},[4963],{"type":406,"value":679},{"type":400,"tag":436,"props":4965,"children":4966},{"style":682},[4967],{"type":406,"value":3639},{"type":400,"tag":436,"props":4969,"children":4970},{"style":670},[4971],{"type":406,"value":690},{"type":400,"tag":436,"props":4973,"children":4974},{"style":2818},[4975],{"type":406,"value":4976},"MyDate",{"type":400,"tag":436,"props":4978,"children":4979},{"style":676},[4980],{"type":406,"value":679},{"type":400,"tag":436,"props":4982,"children":4983},{"style":1429},[4984],{"type":406,"value":2829},{"type":400,"tag":436,"props":4986,"children":4987},{"style":676},[4988],{"type":406,"value":706},{"type":400,"tag":436,"props":4990,"children":4991},{"style":2818},[4992],{"type":406,"value":4840},{"type":400,"tag":436,"props":4994,"children":4995},{"style":676},[4996],{"type":406,"value":679},{"type":400,"tag":436,"props":4998,"children":4999},{"style":1429},[5000],{"type":406,"value":2829},{"type":400,"tag":436,"props":5002,"children":5003},{"style":670},[5004],{"type":406,"value":1413},{"type":400,"tag":436,"props":5006,"children":5007},{"class":438,"line":1497},[5008],{"type":400,"tag":436,"props":5009,"children":5010},{"emptyLinePlaceholder":393},[5011],{"type":406,"value":4093},{"type":400,"tag":436,"props":5013,"children":5014},{"class":438,"line":1505},[5015,5020,5024,5028,5032,5036,5040,5044],{"type":400,"tag":436,"props":5016,"children":5017},{"style":670},[5018],{"type":406,"value":5019},"console",{"type":400,"tag":436,"props":5021,"children":5022},{"style":676},[5023],{"type":406,"value":679},{"type":400,"tag":436,"props":5025,"children":5026},{"style":682},[5027],{"type":406,"value":1390},{"type":400,"tag":436,"props":5029,"children":5030},{"style":670},[5031],{"type":406,"value":690},{"type":400,"tag":436,"props":5033,"children":5034},{"style":466},[5035],{"type":406,"value":1511},{"type":400,"tag":436,"props":5037,"children":5038},{"style":682},[5039],{"type":406,"value":4798},{"type":400,"tag":436,"props":5041,"children":5042},{"style":670},[5043],{"type":406,"value":808},{"type":400,"tag":436,"props":5045,"children":5046},{"style":723},[5047],{"type":406,"value":5048},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":400,"tag":408,"props":5050,"children":5052},{"id":5051},"可定制的对象属性",[5053],{"type":406,"value":5051},{"type":400,"tag":414,"props":5055,"children":5056},{},[5057],{"type":406,"value":5058},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":400,"tag":514,"props":5060,"children":5061},{},[5062,5067,5072],{"type":400,"tag":518,"props":5063,"children":5064},{},[5065],{"type":406,"value":5066},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":400,"tag":518,"props":5068,"children":5069},{},[5070],{"type":406,"value":5071},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":400,"tag":518,"props":5073,"children":5074},{},[5075],{"type":406,"value":5076},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":400,"tag":414,"props":5078,"children":5079},{},[5080],{"type":406,"value":5081},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":406,"value":5083},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":1010,"props":5085,"children":5086},{},[5087,5113],{"type":400,"tag":1014,"props":5088,"children":5089},{},[5090],{"type":400,"tag":1018,"props":5091,"children":5092},{},[5093,5098,5103,5108],{"type":400,"tag":1022,"props":5094,"children":5095},{},[5096],{"type":406,"value":5097},"Object.xxx 方法",{"type":400,"tag":1022,"props":5099,"children":5100},{},[5101],{"type":406,"value":5102},"方法说明",{"type":400,"tag":1022,"props":5104,"children":5105},{},[5106],{"type":406,"value":5107},"对自有属性表的操作",{"type":400,"tag":1022,"props":5109,"children":5110},{},[5111],{"type":406,"value":5112},"检查方法",{"type":400,"tag":1033,"props":5114,"children":5115},{},[5116,5145,5173],{"type":400,"tag":1018,"props":5117,"children":5118},{},[5119,5124,5129,5140],{"type":400,"tag":1040,"props":5120,"children":5121},{},[5122],{"type":406,"value":5123},"preventExtensions(obj)",{"type":400,"tag":1040,"props":5125,"children":5126},{},[5127],{"type":406,"value":5128},"使实例不能添加新属性，也不可重置原型",{"type":400,"tag":1040,"props":5130,"children":5131},{},[5132,5138],{"type":400,"tag":5133,"props":5134,"children":5135},"del",{},[5136],{"type":406,"value":5137},"add",{"type":406,"value":5139},"、delete、update",{"type":400,"tag":1040,"props":5141,"children":5142},{},[5143],{"type":406,"value":5144},"isExtensible(obj)",{"type":400,"tag":1018,"props":5146,"children":5147},{},[5148,5153,5158,5168],{"type":400,"tag":1040,"props":5149,"children":5150},{},[5151],{"type":406,"value":5152},"seal(obj)",{"type":400,"tag":1040,"props":5154,"children":5155},{},[5156],{"type":406,"value":5157},"使实例不能新增新属性，也不能删除既有属性",{"type":400,"tag":1040,"props":5159,"children":5160},{},[5161,5166],{"type":400,"tag":5133,"props":5162,"children":5163},{},[5164],{"type":406,"value":5165},"add、delete",{"type":406,"value":5167},"、update",{"type":400,"tag":1040,"props":5169,"children":5170},{},[5171],{"type":406,"value":5172},"isSealed(obj)",{"type":400,"tag":1018,"props":5174,"children":5175},{},[5176,5181,5186,5194],{"type":400,"tag":1040,"props":5177,"children":5178},{},[5179],{"type":406,"value":5180},"freeze(obj)",{"type":400,"tag":1040,"props":5182,"children":5183},{},[5184],{"type":406,"value":5185},"使实例所有属性只读，且不能再添加、删除属性",{"type":400,"tag":1040,"props":5187,"children":5188},{},[5189],{"type":400,"tag":5133,"props":5190,"children":5191},{},[5192],{"type":406,"value":5193},"add、delete、update",{"type":400,"tag":1040,"props":5195,"children":5196},{},[5197],{"type":406,"value":5198},"isFrozen(obj)",{"type":400,"tag":414,"props":5200,"children":5201},{},[5202],{"type":406,"value":5203},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":400,"tag":514,"props":5205,"children":5206},{},[5207,5212,5217],{"type":400,"tag":518,"props":5208,"children":5209},{},[5210],{"type":406,"value":5211},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":400,"tag":518,"props":5213,"children":5214},{},[5215],{"type":406,"value":5216},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":400,"tag":518,"props":5218,"children":5219},{},[5220],{"type":406,"value":5221},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":400,"tag":408,"props":5223,"children":5225},{"id":5224},"运行期侵入",[5226],{"type":406,"value":5224},{"type":400,"tag":414,"props":5228,"children":5229},{},[5230],{"type":406,"value":5231},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":400,"tag":414,"props":5233,"children":5234},{},[5235],{"type":406,"value":5236},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":400,"tag":414,"props":5238,"children":5239},{},[5240],{"type":406,"value":5241},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":406,"value":5243},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":1010,"props":5245,"children":5246},{},[5247,5263],{"type":400,"tag":1014,"props":5248,"children":5249},{},[5250],{"type":400,"tag":1018,"props":5251,"children":5252},{},[5253,5258],{"type":400,"tag":1022,"props":5254,"children":5255},{},[5256],{"type":406,"value":5257},"内部方法",{"type":400,"tag":1022,"props":5259,"children":5260},{},[5261],{"type":406,"value":5262},"handler.xxx",{"type":400,"tag":1033,"props":5264,"children":5265},{},[5266,5279,5292,5305,5318,5331,5344,5357,5370,5383,5396,5409,5422],{"type":400,"tag":1018,"props":5267,"children":5268},{},[5269,5274],{"type":400,"tag":1040,"props":5270,"children":5271},{},[5272],{"type":406,"value":5273},"[[GetPrototypeOf]]",{"type":400,"tag":1040,"props":5275,"children":5276},{},[5277],{"type":406,"value":5278},"getPrototypeOf()",{"type":400,"tag":1018,"props":5280,"children":5281},{},[5282,5287],{"type":400,"tag":1040,"props":5283,"children":5284},{},[5285],{"type":406,"value":5286},"[[SetPrototypeOf]]",{"type":400,"tag":1040,"props":5288,"children":5289},{},[5290],{"type":406,"value":5291},"setPrototypeOf()",{"type":400,"tag":1018,"props":5293,"children":5294},{},[5295,5300],{"type":400,"tag":1040,"props":5296,"children":5297},{},[5298],{"type":406,"value":5299},"[[IsExtensible]]",{"type":400,"tag":1040,"props":5301,"children":5302},{},[5303],{"type":406,"value":5304},"isExtensible()",{"type":400,"tag":1018,"props":5306,"children":5307},{},[5308,5313],{"type":400,"tag":1040,"props":5309,"children":5310},{},[5311],{"type":406,"value":5312},"[[PreventExtensions]]",{"type":400,"tag":1040,"props":5314,"children":5315},{},[5316],{"type":406,"value":5317},"preventExtensions()",{"type":400,"tag":1018,"props":5319,"children":5320},{},[5321,5326],{"type":400,"tag":1040,"props":5322,"children":5323},{},[5324],{"type":406,"value":5325},"[[GetOwnProperty]]",{"type":400,"tag":1040,"props":5327,"children":5328},{},[5329],{"type":406,"value":5330},"getOwnPropertyDescriptor()",{"type":400,"tag":1018,"props":5332,"children":5333},{},[5334,5339],{"type":400,"tag":1040,"props":5335,"children":5336},{},[5337],{"type":406,"value":5338},"[[HasProperty]]",{"type":400,"tag":1040,"props":5340,"children":5341},{},[5342],{"type":406,"value":5343},"has()",{"type":400,"tag":1018,"props":5345,"children":5346},{},[5347,5352],{"type":400,"tag":1040,"props":5348,"children":5349},{},[5350],{"type":406,"value":5351},"[[DefineOwnProperty]]",{"type":400,"tag":1040,"props":5353,"children":5354},{},[5355],{"type":406,"value":5356},"defineProperty()",{"type":400,"tag":1018,"props":5358,"children":5359},{},[5360,5365],{"type":400,"tag":1040,"props":5361,"children":5362},{},[5363],{"type":406,"value":5364},"[[Get]]",{"type":400,"tag":1040,"props":5366,"children":5367},{},[5368],{"type":406,"value":5369},"get()",{"type":400,"tag":1018,"props":5371,"children":5372},{},[5373,5378],{"type":400,"tag":1040,"props":5374,"children":5375},{},[5376],{"type":406,"value":5377},"[[Set]]",{"type":400,"tag":1040,"props":5379,"children":5380},{},[5381],{"type":406,"value":5382},"set()",{"type":400,"tag":1018,"props":5384,"children":5385},{},[5386,5391],{"type":400,"tag":1040,"props":5387,"children":5388},{},[5389],{"type":406,"value":5390},"[[Delete]]",{"type":400,"tag":1040,"props":5392,"children":5393},{},[5394],{"type":406,"value":5395},"deleteProperty()",{"type":400,"tag":1018,"props":5397,"children":5398},{},[5399,5404],{"type":400,"tag":1040,"props":5400,"children":5401},{},[5402],{"type":406,"value":5403},"[[OwnPropertyKeys]]",{"type":400,"tag":1040,"props":5405,"children":5406},{},[5407],{"type":406,"value":5408},"ownKeys()",{"type":400,"tag":1018,"props":5410,"children":5411},{},[5412,5417],{"type":400,"tag":1040,"props":5413,"children":5414},{},[5415],{"type":406,"value":5416},"[[Call]]",{"type":400,"tag":1040,"props":5418,"children":5419},{},[5420],{"type":406,"value":5421},"apply()",{"type":400,"tag":1018,"props":5423,"children":5424},{},[5425,5430],{"type":400,"tag":1040,"props":5426,"children":5427},{},[5428],{"type":406,"value":5429},"[[Construct]]",{"type":400,"tag":1040,"props":5431,"children":5432},{},[5433],{"type":406,"value":5434},"construct()",{"type":400,"tag":414,"props":5436,"children":5437},{},[5438],{"type":406,"value":5439},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":400,"tag":514,"props":5441,"children":5442},{},[5443,5448],{"type":400,"tag":518,"props":5444,"children":5445},{},[5446],{"type":406,"value":5447},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":400,"tag":518,"props":5449,"children":5450},{},[5451],{"type":406,"value":5452},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":400,"tag":414,"props":5454,"children":5455},{},[5456],{"type":406,"value":5457},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":400,"tag":425,"props":5459,"children":5461},{"className":658,"code":5460,"language":660,"meta":394,"style":394},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5462],{"type":400,"tag":432,"props":5463,"children":5464},{"__ignoreMap":394},[5465,5503,5552,5593,5671,5715,5780,5787,5821,5861,5900,5920,5937,5975,5982,5989,6000],{"type":400,"tag":436,"props":5466,"children":5467},{"class":438,"line":439},[5468,5472,5477,5481,5486,5490,5495,5499],{"type":400,"tag":436,"props":5469,"children":5470},{"style":993},[5471],{"type":406,"value":1321},{"type":400,"tag":436,"props":5473,"children":5474},{"style":682},[5475],{"type":406,"value":5476}," intrudeOnPrototype",{"type":400,"tag":436,"props":5478,"children":5479},{"style":676},[5480],{"type":406,"value":690},{"type":400,"tag":436,"props":5482,"children":5483},{"style":1622},[5484],{"type":406,"value":5485},"Fn",{"type":400,"tag":436,"props":5487,"children":5488},{"style":676},[5489],{"type":406,"value":706},{"type":400,"tag":436,"props":5491,"children":5492},{"style":1622},[5493],{"type":406,"value":5494}," handler",{"type":400,"tag":436,"props":5496,"children":5497},{"style":676},[5498],{"type":406,"value":1630},{"type":400,"tag":436,"props":5500,"children":5501},{"style":676},[5502],{"type":406,"value":1336},{"type":400,"tag":436,"props":5504,"children":5505},{"class":438,"line":729},[5506,5510,5515,5519,5523,5527,5532,5536,5540,5544,5548],{"type":400,"tag":436,"props":5507,"children":5508},{"style":993},[5509],{"type":406,"value":3775},{"type":400,"tag":436,"props":5511,"children":5512},{"style":1429},[5513],{"type":406,"value":5514}," originPrototype",{"type":400,"tag":436,"props":5516,"children":5517},{"style":466},[5518],{"type":406,"value":1359},{"type":400,"tag":436,"props":5520,"children":5521},{"style":670},[5522],{"type":406,"value":4110},{"type":400,"tag":436,"props":5524,"children":5525},{"style":676},[5526],{"type":406,"value":679},{"type":400,"tag":436,"props":5528,"children":5529},{"style":682},[5530],{"type":406,"value":5531},"getPrototypeOf",{"type":400,"tag":436,"props":5533,"children":5534},{"style":1393},[5535],{"type":406,"value":690},{"type":400,"tag":436,"props":5537,"children":5538},{"style":2818},[5539],{"type":406,"value":5485},{"type":400,"tag":436,"props":5541,"children":5542},{"style":676},[5543],{"type":406,"value":679},{"type":400,"tag":436,"props":5545,"children":5546},{"style":1429},[5547],{"type":406,"value":2829},{"type":400,"tag":436,"props":5549,"children":5550},{"style":1393},[5551],{"type":406,"value":1413},{"type":400,"tag":436,"props":5553,"children":5554},{"class":438,"line":1375},[5555,5559,5564,5568,5572,5576,5580,5584,5589],{"type":400,"tag":436,"props":5556,"children":5557},{"style":993},[5558],{"type":406,"value":3775},{"type":400,"tag":436,"props":5560,"children":5561},{"style":1429},[5562],{"type":406,"value":5563}," target",{"type":400,"tag":436,"props":5565,"children":5566},{"style":466},[5567],{"type":406,"value":1359},{"type":400,"tag":436,"props":5569,"children":5570},{"style":670},[5571],{"type":406,"value":4110},{"type":400,"tag":436,"props":5573,"children":5574},{"style":676},[5575],{"type":406,"value":679},{"type":400,"tag":436,"props":5577,"children":5578},{"style":682},[5579],{"type":406,"value":4119},{"type":400,"tag":436,"props":5581,"children":5582},{"style":1393},[5583],{"type":406,"value":690},{"type":400,"tag":436,"props":5585,"children":5586},{"style":670},[5587],{"type":406,"value":5588},"originPrototype",{"type":400,"tag":436,"props":5590,"children":5591},{"style":1393},[5592],{"type":406,"value":1413},{"type":400,"tag":436,"props":5594,"children":5595},{"class":438,"line":1416},[5596,5600,5604,5610,5614,5619,5623,5628,5632,5636,5641,5645,5650,5654,5659,5663,5667],{"type":400,"tag":436,"props":5597,"children":5598},{"style":993},[5599],{"type":406,"value":3775},{"type":400,"tag":436,"props":5601,"children":5602},{"style":676},[5603],{"type":406,"value":1707},{"type":400,"tag":436,"props":5605,"children":5607},{"style":5606},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5608],{"type":406,"value":5609}," proxy",{"type":400,"tag":436,"props":5611,"children":5612},{"style":676},[5613],{"type":406,"value":1855},{"type":400,"tag":436,"props":5615,"children":5616},{"style":1429},[5617],{"type":406,"value":5618}," newPrototype",{"type":400,"tag":436,"props":5620,"children":5621},{"style":676},[5622],{"type":406,"value":706},{"type":400,"tag":436,"props":5624,"children":5625},{"style":1429},[5626],{"type":406,"value":5627}," revoke",{"type":400,"tag":436,"props":5629,"children":5630},{"style":676},[5631],{"type":406,"value":1730},{"type":400,"tag":436,"props":5633,"children":5634},{"style":466},[5635],{"type":406,"value":1359},{"type":400,"tag":436,"props":5637,"children":5638},{"style":670},[5639],{"type":406,"value":5640}," Proxy",{"type":400,"tag":436,"props":5642,"children":5643},{"style":676},[5644],{"type":406,"value":679},{"type":400,"tag":436,"props":5646,"children":5647},{"style":682},[5648],{"type":406,"value":5649},"revocable",{"type":400,"tag":436,"props":5651,"children":5652},{"style":1393},[5653],{"type":406,"value":690},{"type":400,"tag":436,"props":5655,"children":5656},{"style":670},[5657],{"type":406,"value":5658},"target",{"type":400,"tag":436,"props":5660,"children":5661},{"style":676},[5662],{"type":406,"value":706},{"type":400,"tag":436,"props":5664,"children":5665},{"style":670},[5666],{"type":406,"value":5494},{"type":400,"tag":436,"props":5668,"children":5669},{"style":1393},[5670],{"type":406,"value":1413},{"type":400,"tag":436,"props":5672,"children":5673},{"class":438,"line":1425},[5674,5679,5683,5687,5691,5695,5699,5703,5707,5711],{"type":400,"tag":436,"props":5675,"children":5676},{"style":670},[5677],{"type":406,"value":5678},"  Object",{"type":400,"tag":436,"props":5680,"children":5681},{"style":676},[5682],{"type":406,"value":679},{"type":400,"tag":436,"props":5684,"children":5685},{"style":682},[5686],{"type":406,"value":3639},{"type":400,"tag":436,"props":5688,"children":5689},{"style":1393},[5690],{"type":406,"value":690},{"type":400,"tag":436,"props":5692,"children":5693},{"style":2818},[5694],{"type":406,"value":5485},{"type":400,"tag":436,"props":5696,"children":5697},{"style":676},[5698],{"type":406,"value":679},{"type":400,"tag":436,"props":5700,"children":5701},{"style":1429},[5702],{"type":406,"value":2829},{"type":400,"tag":436,"props":5704,"children":5705},{"style":676},[5706],{"type":406,"value":706},{"type":400,"tag":436,"props":5708,"children":5709},{"style":670},[5710],{"type":406,"value":5618},{"type":400,"tag":436,"props":5712,"children":5713},{"style":1393},[5714],{"type":406,"value":1413},{"type":400,"tag":436,"props":5716,"children":5717},{"class":438,"line":1460},[5718,5722,5726,5731,5735,5739,5743,5747,5751,5755,5759,5763,5767,5771,5775],{"type":400,"tag":436,"props":5719,"children":5720},{"style":1699},[5721],{"type":406,"value":4940},{"type":400,"tag":436,"props":5723,"children":5724},{"style":676},[5725],{"type":406,"value":1331},{"type":400,"tag":436,"props":5727,"children":5728},{"style":993},[5729],{"type":406,"value":5730}," =>",{"type":400,"tag":436,"props":5732,"children":5733},{"style":682},[5734],{"type":406,"value":5627},{"type":400,"tag":436,"props":5736,"children":5737},{"style":1393},[5738],{"type":406,"value":690},{"type":400,"tag":436,"props":5740,"children":5741},{"style":670},[5742],{"type":406,"value":673},{"type":400,"tag":436,"props":5744,"children":5745},{"style":676},[5746],{"type":406,"value":679},{"type":400,"tag":436,"props":5748,"children":5749},{"style":682},[5750],{"type":406,"value":3639},{"type":400,"tag":436,"props":5752,"children":5753},{"style":1393},[5754],{"type":406,"value":690},{"type":400,"tag":436,"props":5756,"children":5757},{"style":2818},[5758],{"type":406,"value":5485},{"type":400,"tag":436,"props":5760,"children":5761},{"style":676},[5762],{"type":406,"value":679},{"type":400,"tag":436,"props":5764,"children":5765},{"style":1429},[5766],{"type":406,"value":2829},{"type":400,"tag":436,"props":5768,"children":5769},{"style":676},[5770],{"type":406,"value":706},{"type":400,"tag":436,"props":5772,"children":5773},{"style":670},[5774],{"type":406,"value":5514},{"type":400,"tag":436,"props":5776,"children":5777},{"style":1393},[5778],{"type":406,"value":5779},"))\n",{"type":400,"tag":436,"props":5781,"children":5782},{"class":438,"line":1497},[5783],{"type":400,"tag":436,"props":5784,"children":5785},{"style":676},[5786],{"type":406,"value":1422},{"type":400,"tag":436,"props":5788,"children":5789},{"class":438,"line":1505},[5790,5795,5800,5804,5808,5813,5817],{"type":400,"tag":436,"props":5791,"children":5792},{"style":993},[5793],{"type":406,"value":5794},"const",{"type":400,"tag":436,"props":5796,"children":5797},{"style":1429},[5798],{"type":406,"value":5799}," recovery",{"type":400,"tag":436,"props":5801,"children":5802},{"style":466},[5803],{"type":406,"value":1359},{"type":400,"tag":436,"props":5805,"children":5806},{"style":682},[5807],{"type":406,"value":5476},{"type":400,"tag":436,"props":5809,"children":5810},{"style":670},[5811],{"type":406,"value":5812},"(String",{"type":400,"tag":436,"props":5814,"children":5815},{"style":676},[5816],{"type":406,"value":706},{"type":400,"tag":436,"props":5818,"children":5819},{"style":676},[5820],{"type":406,"value":1336},{"type":400,"tag":436,"props":5822,"children":5823},{"class":438,"line":1532},[5824,5828,5832,5836,5840,5844,5848,5853,5857],{"type":400,"tag":436,"props":5825,"children":5826},{"style":682},[5827],{"type":406,"value":2716},{"type":400,"tag":436,"props":5829,"children":5830},{"style":676},[5831],{"type":406,"value":1855},{"type":400,"tag":436,"props":5833,"children":5834},{"style":993},[5835],{"type":406,"value":1449},{"type":400,"tag":436,"props":5837,"children":5838},{"style":676},[5839],{"type":406,"value":1928},{"type":400,"tag":436,"props":5841,"children":5842},{"style":1622},[5843],{"type":406,"value":5658},{"type":400,"tag":436,"props":5845,"children":5846},{"style":676},[5847],{"type":406,"value":706},{"type":400,"tag":436,"props":5849,"children":5850},{"style":1622},[5851],{"type":406,"value":5852}," prop",{"type":400,"tag":436,"props":5854,"children":5855},{"style":676},[5856],{"type":406,"value":1630},{"type":400,"tag":436,"props":5858,"children":5859},{"style":676},[5860],{"type":406,"value":1336},{"type":400,"tag":436,"props":5862,"children":5863},{"class":438,"line":2108},[5864,5868,5872,5876,5880,5884,5888,5892,5896],{"type":400,"tag":436,"props":5865,"children":5866},{"style":1699},[5867],{"type":406,"value":1989},{"type":400,"tag":436,"props":5869,"children":5870},{"style":1393},[5871],{"type":406,"value":1928},{"type":400,"tag":436,"props":5873,"children":5874},{"style":670},[5875],{"type":406,"value":3038},{"type":400,"tag":436,"props":5877,"children":5878},{"style":466},[5879],{"type":406,"value":2002},{"type":400,"tag":436,"props":5881,"children":5882},{"style":449},[5883],{"type":406,"value":452},{"type":400,"tag":436,"props":5885,"children":5886},{"style":455},[5887],{"type":406,"value":1721},{"type":400,"tag":436,"props":5889,"children":5890},{"style":449},[5891],{"type":406,"value":463},{"type":400,"tag":436,"props":5893,"children":5894},{"style":1393},[5895],{"type":406,"value":720},{"type":400,"tag":436,"props":5897,"children":5898},{"style":676},[5899],{"type":406,"value":1745},{"type":400,"tag":436,"props":5901,"children":5902},{"class":438,"line":2168},[5903,5908,5912,5916],{"type":400,"tag":436,"props":5904,"children":5905},{"style":1699},[5906],{"type":406,"value":5907},"      return",{"type":400,"tag":436,"props":5909,"children":5910},{"style":449},[5911],{"type":406,"value":452},{"type":400,"tag":436,"props":5913,"children":5914},{"style":455},[5915],{"type":406,"value":1721},{"type":400,"tag":436,"props":5917,"children":5918},{"style":449},[5919],{"type":406,"value":1372},{"type":400,"tag":436,"props":5921,"children":5922},{"class":438,"line":2229},[5923,5928,5933],{"type":400,"tag":436,"props":5924,"children":5925},{"style":676},[5926],{"type":406,"value":5927},"    }",{"type":400,"tag":436,"props":5929,"children":5930},{"style":1699},[5931],{"type":406,"value":5932}," else",{"type":400,"tag":436,"props":5934,"children":5935},{"style":676},[5936],{"type":406,"value":1336},{"type":400,"tag":436,"props":5938,"children":5939},{"class":438,"line":2270},[5940,5944,5949,5953,5958,5962,5966,5971],{"type":400,"tag":436,"props":5941,"children":5942},{"style":1699},[5943],{"type":406,"value":5907},{"type":400,"tag":436,"props":5945,"children":5946},{"style":670},[5947],{"type":406,"value":5948}," Reflect",{"type":400,"tag":436,"props":5950,"children":5951},{"style":676},[5952],{"type":406,"value":679},{"type":400,"tag":436,"props":5954,"children":5955},{"style":682},[5956],{"type":406,"value":5957},"get",{"type":400,"tag":436,"props":5959,"children":5960},{"style":1393},[5961],{"type":406,"value":690},{"type":400,"tag":436,"props":5963,"children":5964},{"style":466},[5965],{"type":406,"value":1283},{"type":400,"tag":436,"props":5967,"children":5968},{"style":4033},[5969],{"type":406,"value":5970},"arguments",{"type":400,"tag":436,"props":5972,"children":5973},{"style":1393},[5974],{"type":406,"value":1413},{"type":400,"tag":436,"props":5976,"children":5977},{"class":438,"line":2311},[5978],{"type":400,"tag":436,"props":5979,"children":5980},{"style":676},[5981],{"type":406,"value":2317},{"type":400,"tag":436,"props":5983,"children":5984},{"class":438,"line":2320},[5985],{"type":400,"tag":436,"props":5986,"children":5987},{"style":676},[5988],{"type":406,"value":2075},{"type":400,"tag":436,"props":5990,"children":5991},{"class":438,"line":2328},[5992,5996],{"type":400,"tag":436,"props":5993,"children":5994},{"style":676},[5995],{"type":406,"value":1669},{"type":400,"tag":436,"props":5997,"children":5998},{"style":670},[5999],{"type":406,"value":1413},{"type":400,"tag":436,"props":6001,"children":6003},{"class":438,"line":6002},17,[6004,6008,6012,6016,6020,6025,6029,6034],{"type":400,"tag":436,"props":6005,"children":6006},{"style":670},[6007],{"type":406,"value":5019},{"type":400,"tag":436,"props":6009,"children":6010},{"style":676},[6011],{"type":406,"value":679},{"type":400,"tag":436,"props":6013,"children":6014},{"style":682},[6015],{"type":406,"value":1390},{"type":400,"tag":436,"props":6017,"children":6018},{"style":670},[6019],{"type":406,"value":690},{"type":400,"tag":436,"props":6021,"children":6022},{"style":449},[6023],{"type":406,"value":6024},"''",{"type":400,"tag":436,"props":6026,"children":6027},{"style":676},[6028],{"type":406,"value":679},{"type":400,"tag":436,"props":6030,"children":6031},{"style":670},[6032],{"type":406,"value":6033},"test) ",{"type":400,"tag":436,"props":6035,"children":6036},{"style":723},[6037],{"type":406,"value":6038},"// test\n",{"type":400,"tag":408,"props":6040,"children":6042},{"id":6041},"元编程系统",[6043],{"type":406,"value":6041},{"type":400,"tag":414,"props":6045,"children":6046},{},[6047],{"type":406,"value":6048},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":400,"tag":401,"props":6050,"children":6052},{"id":6051},"结构化",[6053],{"type":406,"value":6051},{"type":400,"tag":408,"props":6055,"children":6057},{"id":6056},"概述",[6058],{"type":406,"value":6056},{"type":400,"tag":414,"props":6060,"children":6061},{},[6062],{"type":406,"value":6063},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":400,"tag":414,"props":6065,"children":6066},{},[6067],{"type":406,"value":6068},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":400,"tag":414,"props":6070,"children":6071},{},[6072],{"type":406,"value":6073},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":400,"tag":414,"props":6075,"children":6076},{},[6077],{"type":406,"value":6078},"面向对象解决了结构化带来诸多问题的三点：",{"type":400,"tag":514,"props":6080,"children":6081},{},[6082,6087,6092],{"type":400,"tag":518,"props":6083,"children":6084},{},[6085],{"type":406,"value":6086},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":400,"tag":518,"props":6088,"children":6089},{},[6090],{"type":406,"value":6091},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":400,"tag":518,"props":6093,"children":6094},{},[6095],{"type":406,"value":6096},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":400,"tag":414,"props":6098,"children":6099},{},[6100],{"type":406,"value":6101},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":400,"tag":414,"props":6103,"children":6104},{},[6105],{"type":406,"value":6106},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":400,"tag":408,"props":6108,"children":6110},{"id":6109},"基本的组织元素",[6111],{"type":406,"value":6109},{"type":400,"tag":414,"props":6113,"children":6114},{},[6115],{"type":406,"value":6116},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":406,"value":2911},{"type":400,"tag":1010,"props":6119,"children":6120},{},[6121,6147],{"type":400,"tag":1014,"props":6122,"children":6123},{},[6124],{"type":400,"tag":1018,"props":6125,"children":6126},{},[6127,6132,6137,6142],{"type":400,"tag":1022,"props":6128,"children":6129},{},[6130],{"type":406,"value":6131},"元素",{"type":400,"tag":1022,"props":6133,"children":6134},{},[6135],{"type":406,"value":6136},"物理形态",{"type":400,"tag":1022,"props":6138,"children":6139},{},[6140],{"type":406,"value":6141},"静态",{"type":400,"tag":1022,"props":6143,"children":6144},{},[6145],{"type":406,"value":6146},"动态",{"type":400,"tag":1033,"props":6148,"children":6149},{},[6150,6171,6194,6216],{"type":400,"tag":1018,"props":6151,"children":6152},{},[6153,6158,6161,6166],{"type":400,"tag":1040,"props":6154,"children":6155},{},[6156],{"type":406,"value":6157},"标识符",{"type":400,"tag":1040,"props":6159,"children":6160},{},[],{"type":400,"tag":1040,"props":6162,"children":6163},{},[6164],{"type":406,"value":6165},"变量声明、函数声明、类声明",{"type":400,"tag":1040,"props":6167,"children":6168},{},[6169],{"type":406,"value":6170},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":400,"tag":1018,"props":6172,"children":6173},{},[6174,6179,6184,6189],{"type":400,"tag":1040,"props":6175,"children":6176},{},[6177],{"type":406,"value":6178},"表达式",{"type":400,"tag":1040,"props":6180,"children":6181},{},[6182],{"type":406,"value":6183},"模板字符串",{"type":400,"tag":1040,"props":6185,"children":6186},{},[6187],{"type":406,"value":6188},"值、箭头函数体",{"type":400,"tag":1040,"props":6190,"children":6191},{},[6192],{"type":406,"value":6193},"通过 eval 执行表达式语句",{"type":400,"tag":1018,"props":6195,"children":6196},{},[6197,6201,6206,6211],{"type":400,"tag":1040,"props":6198,"children":6199},{},[6200],{"type":406,"value":1561},{"type":400,"tag":1040,"props":6202,"children":6203},{},[6204],{"type":406,"value":6205},".js 文件",{"type":400,"tag":1040,"props":6207,"children":6208},{},[6209],{"type":406,"value":6210},"块和块级作用域",{"type":400,"tag":1040,"props":6212,"children":6213},{},[6214],{"type":406,"value":6215},"eval()",{"type":400,"tag":1018,"props":6217,"children":6218},{},[6219,6223,6228,6233],{"type":400,"tag":1040,"props":6220,"children":6221},{},[6222],{"type":406,"value":2346},{"type":400,"tag":1040,"props":6224,"children":6225},{},[6226],{"type":406,"value":6227},".mjs 文件",{"type":400,"tag":1040,"props":6229,"children":6230},{},[6231],{"type":406,"value":6232},"import、export、require()",{"type":400,"tag":1040,"props":6234,"children":6235},{},[6236],{"type":406,"value":6237},"import().then()",{"type":400,"tag":414,"props":6239,"children":6240},{},[6241],{"type":406,"value":6242},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":400,"tag":414,"props":6244,"children":6245},{},[6246],{"type":406,"value":6247},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":400,"tag":414,"props":6249,"children":6250},{},[6251],{"type":406,"value":6252},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":400,"tag":414,"props":6254,"children":6255},{},[6256,6258,6263],{"type":406,"value":6257},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":400,"tag":436,"props":6259,"children":6260},{},[6261],{"type":406,"value":6262},"1,2,3",{"type":406,"value":6264}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":400,"tag":414,"props":6266,"children":6267},{},[6268],{"type":406,"value":6269},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":400,"tag":414,"props":6271,"children":6272},{},[6273],{"type":406,"value":6274},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":400,"tag":414,"props":6276,"children":6277},{},[6278],{"type":406,"value":6279},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":400,"tag":414,"props":6281,"children":6282},{},[6283],{"type":406,"value":6284},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":400,"tag":408,"props":6286,"children":6288},{"id":6287},"声明",[6289],{"type":406,"value":6287},{"type":400,"tag":414,"props":6291,"children":6292},{},[6293,6295,6306],{"type":406,"value":6294},"除了 const 和 namespace",{"type":400,"tag":493,"props":6296,"children":6297},{},[6298],{"type":400,"tag":497,"props":6299,"children":6303},{"href":6300,"ariaDescribedBy":6301,"dataFootnoteRef":394,"id":6302},"#user-content-fn-namespace",[501],"user-content-fnref-namespace",[6304],{"type":406,"value":6305},"4",{"type":406,"value":6307}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":400,"tag":425,"props":6309,"children":6311},{"className":658,"code":6310,"language":660,"meta":394,"style":394},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6312],{"type":400,"tag":432,"props":6313,"children":6314},{"__ignoreMap":394},[6315,6343,6359,6391,6413],{"type":400,"tag":436,"props":6316,"children":6317},{"class":438,"line":439},[6318,6323,6327,6331,6335,6339],{"type":400,"tag":436,"props":6319,"children":6320},{"style":466},[6321],{"type":406,"value":6322},"!",{"type":400,"tag":436,"props":6324,"children":6325},{"style":670},[6326],{"type":406,"value":690},{"type":400,"tag":436,"props":6328,"children":6329},{"style":993},[6330],{"type":406,"value":1321},{"type":400,"tag":436,"props":6332,"children":6333},{"style":682},[6334],{"type":406,"value":2021},{"type":400,"tag":436,"props":6336,"children":6337},{"style":676},[6338],{"type":406,"value":1044},{"type":400,"tag":436,"props":6340,"children":6341},{"style":676},[6342],{"type":406,"value":1336},{"type":400,"tag":436,"props":6344,"children":6345},{"class":438,"line":729},[6346,6350,6354],{"type":400,"tag":436,"props":6347,"children":6348},{"style":670},[6349],{"type":406,"value":2769},{"type":400,"tag":436,"props":6351,"children":6352},{"style":466},[6353],{"type":406,"value":1359},{"type":400,"tag":436,"props":6355,"children":6356},{"style":698},[6357],{"type":406,"value":6358}," 100\n",{"type":400,"tag":436,"props":6360,"children":6361},{"class":438,"line":1375},[6362,6366,6370,6374,6378,6382,6386],{"type":400,"tag":436,"props":6363,"children":6364},{"style":670},[6365],{"type":406,"value":1381},{"type":400,"tag":436,"props":6367,"children":6368},{"style":676},[6369],{"type":406,"value":679},{"type":400,"tag":436,"props":6371,"children":6372},{"style":682},[6373],{"type":406,"value":1390},{"type":400,"tag":436,"props":6375,"children":6376},{"style":1393},[6377],{"type":406,"value":690},{"type":400,"tag":436,"props":6379,"children":6380},{"style":670},[6381],{"type":406,"value":1721},{"type":400,"tag":436,"props":6383,"children":6384},{"style":1393},[6385],{"type":406,"value":720},{"type":400,"tag":436,"props":6387,"children":6388},{"style":723},[6389],{"type":406,"value":6390},"// [Function ...]\n",{"type":400,"tag":436,"props":6392,"children":6393},{"class":438,"line":1416},[6394,6399,6403,6408],{"type":400,"tag":436,"props":6395,"children":6396},{"style":4033},[6397],{"type":406,"value":6398},"  arguments",{"type":400,"tag":436,"props":6400,"children":6401},{"style":466},[6402],{"type":406,"value":1359},{"type":400,"tag":436,"props":6404,"children":6405},{"style":1393},[6406],{"type":406,"value":6407}," [] ",{"type":400,"tag":436,"props":6409,"children":6410},{"style":723},[6411],{"type":406,"value":6412},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":400,"tag":436,"props":6414,"children":6415},{"class":438,"line":1425},[6416,6420],{"type":400,"tag":436,"props":6417,"children":6418},{"style":676},[6419],{"type":406,"value":1669},{"type":400,"tag":436,"props":6421,"children":6422},{"style":670},[6423],{"type":406,"value":6424},"())\n",{"type":400,"tag":414,"props":6426,"children":6427},{},[6428],{"type":406,"value":6429},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":400,"tag":425,"props":6431,"children":6433},{"className":658,"code":6432,"language":660,"meta":394,"style":394},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6434],{"type":400,"tag":432,"props":6435,"children":6436},{"__ignoreMap":394},[6437,6445,6464,6490,6518,6556],{"type":400,"tag":436,"props":6438,"children":6439},{"class":438,"line":439},[6440],{"type":400,"tag":436,"props":6441,"children":6442},{"style":723},[6443],{"type":406,"value":6444},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":400,"tag":436,"props":6446,"children":6447},{"class":438,"line":729},[6448,6452,6456,6460],{"type":400,"tag":436,"props":6449,"children":6450},{"style":993},[6451],{"type":406,"value":1321},{"type":400,"tag":436,"props":6453,"children":6454},{"style":682},[6455],{"type":406,"value":2021},{"type":400,"tag":436,"props":6457,"children":6458},{"style":676},[6459],{"type":406,"value":1044},{"type":400,"tag":436,"props":6461,"children":6462},{"style":676},[6463],{"type":406,"value":1336},{"type":400,"tag":436,"props":6465,"children":6466},{"class":438,"line":1375},[6467,6472,6476,6481,6485],{"type":400,"tag":436,"props":6468,"children":6469},{"style":676},[6470],{"type":406,"value":6471},"  {",{"type":400,"tag":436,"props":6473,"children":6474},{"style":993},[6475],{"type":406,"value":1321},{"type":400,"tag":436,"props":6477,"children":6478},{"style":682},[6479],{"type":406,"value":6480}," x",{"type":400,"tag":436,"props":6482,"children":6483},{"style":676},[6484],{"type":406,"value":1331},{"type":400,"tag":436,"props":6486,"children":6487},{"style":676},[6488],{"type":406,"value":6489}," {}};\n",{"type":400,"tag":436,"props":6491,"children":6492},{"class":438,"line":1416},[6493,6497,6501,6505,6510,6514],{"type":400,"tag":436,"props":6494,"children":6495},{"style":1848},[6496],{"type":406,"value":2769},{"type":400,"tag":436,"props":6498,"children":6499},{"style":676},[6500],{"type":406,"value":1855},{"type":400,"tag":436,"props":6502,"children":6503},{"style":993},[6504],{"type":406,"value":1449},{"type":400,"tag":436,"props":6506,"children":6507},{"style":682},[6508],{"type":406,"value":6509}," y",{"type":400,"tag":436,"props":6511,"children":6512},{"style":676},[6513],{"type":406,"value":1331},{"type":400,"tag":436,"props":6515,"children":6516},{"style":676},[6517],{"type":406,"value":3129},{"type":400,"tag":436,"props":6519,"children":6520},{"class":438,"line":1425},[6521,6526,6530,6535,6539,6543,6548,6552],{"type":400,"tag":436,"props":6522,"children":6523},{"style":1699},[6524],{"type":406,"value":6525},"  if",{"type":400,"tag":436,"props":6527,"children":6528},{"style":1393},[6529],{"type":406,"value":1928},{"type":400,"tag":436,"props":6531,"children":6532},{"style":832},[6533],{"type":406,"value":6534},"true",{"type":400,"tag":436,"props":6536,"children":6537},{"style":1393},[6538],{"type":406,"value":720},{"type":400,"tag":436,"props":6540,"children":6541},{"style":993},[6542],{"type":406,"value":1321},{"type":400,"tag":436,"props":6544,"children":6545},{"style":682},[6546],{"type":406,"value":6547}," z",{"type":400,"tag":436,"props":6549,"children":6550},{"style":676},[6551],{"type":406,"value":1331},{"type":400,"tag":436,"props":6553,"children":6554},{"style":676},[6555],{"type":406,"value":3129},{"type":400,"tag":436,"props":6557,"children":6558},{"class":438,"line":1460},[6559],{"type":400,"tag":436,"props":6560,"children":6561},{"style":676},[6562],{"type":406,"value":1422},{"type":400,"tag":408,"props":6564,"children":6566},{"id":6565},"语句与代码分块",[6567],{"type":406,"value":6565},{"type":400,"tag":414,"props":6569,"children":6570},{},[6571],{"type":406,"value":6572},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":400,"tag":414,"props":6574,"children":6575},{},[6576],{"type":406,"value":6577},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":400,"tag":414,"props":6579,"children":6580},{},[6581,6583,6594],{"type":406,"value":6582},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":400,"tag":493,"props":6584,"children":6585},{},[6586],{"type":400,"tag":497,"props":6587,"children":6591},{"href":6588,"ariaDescribedBy":6589,"dataFootnoteRef":394,"id":6590},"#user-content-fn-iterationenv",[501],"user-content-fnref-iterationenv",[6592],{"type":406,"value":6593},"5",{"type":406,"value":6595},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":400,"tag":414,"props":6597,"children":6598},{},[6599],{"type":406,"value":6600},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":400,"tag":414,"props":6602,"children":6603},{},[6604],{"type":406,"value":6605},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":400,"tag":425,"props":6607,"children":6609},{"className":658,"code":6608,"language":660,"meta":394,"style":394},"eval(`if (true) ; else ;`) // undefined\n",[6610],{"type":400,"tag":432,"props":6611,"children":6612},{"__ignoreMap":394},[6613],{"type":400,"tag":436,"props":6614,"children":6615},{"class":438,"line":439},[6616,6621,6625,6630,6635,6639,6643],{"type":400,"tag":436,"props":6617,"children":6618},{"style":682},[6619],{"type":406,"value":6620},"eval",{"type":400,"tag":436,"props":6622,"children":6623},{"style":670},[6624],{"type":406,"value":690},{"type":400,"tag":436,"props":6626,"children":6627},{"style":449},[6628],{"type":406,"value":6629},"`",{"type":400,"tag":436,"props":6631,"children":6632},{"style":455},[6633],{"type":406,"value":6634},"if (true) ; else ;",{"type":400,"tag":436,"props":6636,"children":6637},{"style":449},[6638],{"type":406,"value":6629},{"type":400,"tag":436,"props":6640,"children":6641},{"style":670},[6642],{"type":406,"value":720},{"type":400,"tag":436,"props":6644,"children":6645},{"style":723},[6646],{"type":406,"value":959},{"type":400,"tag":408,"props":6648,"children":6650},{"id":6649},"组织形式分块的方法",[6651],{"type":406,"value":6649},{"type":400,"tag":414,"props":6653,"children":6654},{},[6655],{"type":406,"value":6656},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":400,"tag":414,"props":6658,"children":6659},{},[6660],{"type":406,"value":6661},"数据声明语句中存在块级作用域，如：",{"type":400,"tag":425,"props":6663,"children":6665},{"className":658,"code":6664,"language":660,"meta":394,"style":394},"const x = 1, y = x\nconsole.log(y) // 1\n",[6666],{"type":400,"tag":432,"props":6667,"children":6668},{"__ignoreMap":394},[6669,6704],{"type":400,"tag":436,"props":6670,"children":6671},{"class":438,"line":439},[6672,6676,6680,6684,6688,6692,6696,6700],{"type":400,"tag":436,"props":6673,"children":6674},{"style":993},[6675],{"type":406,"value":5794},{"type":400,"tag":436,"props":6677,"children":6678},{"style":1429},[6679],{"type":406,"value":6480},{"type":400,"tag":436,"props":6681,"children":6682},{"style":466},[6683],{"type":406,"value":1359},{"type":400,"tag":436,"props":6685,"children":6686},{"style":698},[6687],{"type":406,"value":1805},{"type":400,"tag":436,"props":6689,"children":6690},{"style":676},[6691],{"type":406,"value":706},{"type":400,"tag":436,"props":6693,"children":6694},{"style":1429},[6695],{"type":406,"value":6509},{"type":400,"tag":436,"props":6697,"children":6698},{"style":466},[6699],{"type":406,"value":1359},{"type":400,"tag":436,"props":6701,"children":6702},{"style":670},[6703],{"type":406,"value":1001},{"type":400,"tag":436,"props":6705,"children":6706},{"class":438,"line":729},[6707,6711,6715,6719,6724],{"type":400,"tag":436,"props":6708,"children":6709},{"style":670},[6710],{"type":406,"value":5019},{"type":400,"tag":436,"props":6712,"children":6713},{"style":676},[6714],{"type":406,"value":679},{"type":400,"tag":436,"props":6716,"children":6717},{"style":682},[6718],{"type":406,"value":1390},{"type":400,"tag":436,"props":6720,"children":6721},{"style":670},[6722],{"type":406,"value":6723},"(y) ",{"type":400,"tag":436,"props":6725,"children":6726},{"style":723},[6727],{"type":406,"value":6728},"// 1\n",{"type":400,"tag":414,"props":6730,"children":6731},{},[6732],{"type":406,"value":6733},"表达式级别的作用域只存在于 eval 调用中。",{"type":400,"tag":414,"props":6735,"children":6736},{},[6737],{"type":406,"value":6738},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":400,"tag":425,"props":6740,"children":6742},{"className":658,"code":6741,"language":660,"meta":394,"style":394},"if (1) let x = 1\n",[6743],{"type":400,"tag":432,"props":6744,"children":6745},{"__ignoreMap":394},[6746],{"type":400,"tag":436,"props":6747,"children":6748},{"class":438,"line":439},[6749,6754,6758,6762,6766,6770,6774,6778],{"type":400,"tag":436,"props":6750,"children":6751},{"style":1699},[6752],{"type":406,"value":6753},"if",{"type":400,"tag":436,"props":6755,"children":6756},{"style":670},[6757],{"type":406,"value":1928},{"type":400,"tag":436,"props":6759,"children":6760},{"style":698},[6761],{"type":406,"value":505},{"type":400,"tag":436,"props":6763,"children":6764},{"style":670},[6765],{"type":406,"value":720},{"type":400,"tag":436,"props":6767,"children":6768},{"style":993},[6769],{"type":406,"value":996},{"type":400,"tag":436,"props":6771,"children":6772},{"style":670},[6773],{"type":406,"value":954},{"type":400,"tag":436,"props":6775,"children":6776},{"style":466},[6777],{"type":406,"value":1870},{"type":400,"tag":436,"props":6779,"children":6780},{"style":698},[6781],{"type":406,"value":6782}," 1\n",{"type":400,"tag":414,"props":6784,"children":6785},{},[6786],{"type":406,"value":6787},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":400,"tag":414,"props":6789,"children":6790},{},[6791],{"type":406,"value":6792},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":400,"tag":414,"props":6794,"children":6795},{},[6796],{"type":406,"value":6797},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":400,"tag":514,"props":6799,"children":6800},{},[6801,6806,6811],{"type":400,"tag":518,"props":6802,"children":6803},{},[6804],{"type":406,"value":6805},"词法作用域互不相交。",{"type":400,"tag":518,"props":6807,"children":6808},{},[6809],{"type":406,"value":6810},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":400,"tag":518,"props":6812,"children":6813},{},[6814],{"type":406,"value":6815},"高级别流程变更语句可以跨越低级别的作用域。",{"type":400,"tag":414,"props":6817,"children":6818},{},[6819],{"type":406,"value":6820},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":400,"tag":408,"props":6822,"children":6824},{"id":6823},"层次结构程序设计",[6825],{"type":406,"value":6823},{"type":400,"tag":414,"props":6827,"children":6828},{},[6829],{"type":406,"value":6830},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":400,"tag":425,"props":6832,"children":6834},{"className":658,"code":6833,"language":660,"meta":394,"style":394},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6835],{"type":400,"tag":432,"props":6836,"children":6837},{"__ignoreMap":394},[6838,6877],{"type":400,"tag":436,"props":6839,"children":6840},{"class":438,"line":439},[6841,6845,6850,6854,6859,6863,6868,6872],{"type":400,"tag":436,"props":6842,"children":6843},{"style":993},[6844],{"type":406,"value":5794},{"type":400,"tag":436,"props":6846,"children":6847},{"style":1429},[6848],{"type":406,"value":6849}," method",{"type":400,"tag":436,"props":6851,"children":6852},{"style":466},[6853],{"type":406,"value":1359},{"type":400,"tag":436,"props":6855,"children":6856},{"style":670},[6857],{"type":406,"value":6858}," obj[Object",{"type":400,"tag":436,"props":6860,"children":6861},{"style":676},[6862],{"type":406,"value":679},{"type":400,"tag":436,"props":6864,"children":6865},{"style":670},[6866],{"type":406,"value":6867},"getPropertySymbols[",{"type":400,"tag":436,"props":6869,"children":6870},{"style":698},[6871],{"type":406,"value":701},{"type":400,"tag":436,"props":6873,"children":6874},{"style":670},[6875],{"type":406,"value":6876},"]]\n",{"type":400,"tag":436,"props":6878,"children":6879},{"class":438,"line":729},[6880,6884,6888,6893],{"type":400,"tag":436,"props":6881,"children":6882},{"style":670},[6883],{"type":406,"value":3751},{"type":400,"tag":436,"props":6885,"children":6886},{"style":676},[6887],{"type":406,"value":679},{"type":400,"tag":436,"props":6889,"children":6890},{"style":682},[6891],{"type":406,"value":6892},"call",{"type":400,"tag":436,"props":6894,"children":6895},{"style":670},[6896],{"type":406,"value":6897},"(obj)\n",{"type":400,"tag":414,"props":6899,"children":6900},{},[6901],{"type":406,"value":6902},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":400,"tag":408,"props":6904,"children":6906},{"id":6905},"变量作用域",[6907],{"type":406,"value":6905},{"type":400,"tag":414,"props":6909,"children":6910},{},[6911],{"type":406,"value":6912},"变量作用域有三个特殊之处：",{"type":400,"tag":514,"props":6914,"children":6915},{},[6916,6921,6926],{"type":400,"tag":518,"props":6917,"children":6918},{},[6919],{"type":406,"value":6920},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":400,"tag":518,"props":6922,"children":6923},{},[6924],{"type":406,"value":6925},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":400,"tag":518,"props":6927,"children":6928},{},[6929],{"type":406,"value":6930},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":400,"tag":414,"props":6932,"children":6933},{},[6934],{"type":406,"value":6935},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":400,"tag":414,"props":6937,"children":6938},{},[6939],{"type":406,"value":6940},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":400,"tag":408,"props":6942,"children":6944},{"id":6943},"私有属性和私有字段的纷争",[6945],{"type":406,"value":6943},{"type":400,"tag":414,"props":6947,"children":6948},{},[6949],{"type":406,"value":6950},"(_　_)。゜zｚＺ",{"type":400,"tag":401,"props":6952,"children":6954},{"id":6953},"函数式语言特性",[6955],{"type":406,"value":6953},{"type":400,"tag":408,"props":6957,"children":6959},{"id":6958},"概述-1",[6960],{"type":406,"value":6056},{"type":400,"tag":414,"props":6962,"children":6963},{},[6964],{"type":406,"value":6965},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":400,"tag":414,"props":6967,"children":6968},{},[6969],{"type":406,"value":6970},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":400,"tag":408,"props":6972,"children":6974},{"id":6973},"js中的函数",[6975],{"type":406,"value":6976},"JS中的函数",{"type":400,"tag":414,"props":6978,"children":6979},{},[6980],{"type":406,"value":6981},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":400,"tag":514,"props":6983,"children":6984},{},[6985,6990,6995],{"type":400,"tag":518,"props":6986,"children":6987},{},[6988],{"type":406,"value":6989},"无法显式使用“use strict”切换到严格模式。",{"type":400,"tag":518,"props":6991,"children":6992},{},[6993],{"type":406,"value":6994},"不接受重名参数。",{"type":400,"tag":518,"props":6996,"children":6997},{},[6998],{"type":406,"value":6999},"形参和 arguments 之间将解除绑定关系。",{"type":400,"tag":414,"props":7001,"children":7002},{},[7003],{"type":406,"value":7004},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":400,"tag":425,"props":7006,"children":7008},{"className":658,"code":7007,"language":660,"meta":394,"style":394},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[7009],{"type":400,"tag":432,"props":7010,"children":7011},{"__ignoreMap":394},[7012,7056,7109,7116],{"type":400,"tag":436,"props":7013,"children":7014},{"class":438,"line":439},[7015,7019,7023,7027,7031,7035,7040,7044,7048,7052],{"type":400,"tag":436,"props":7016,"children":7017},{"style":993},[7018],{"type":406,"value":1321},{"type":400,"tag":436,"props":7020,"children":7021},{"style":682},[7022],{"type":406,"value":2021},{"type":400,"tag":436,"props":7024,"children":7025},{"style":676},[7026],{"type":406,"value":690},{"type":400,"tag":436,"props":7028,"children":7029},{"style":1622},[7030],{"type":406,"value":497},{"type":400,"tag":436,"props":7032,"children":7033},{"style":676},[7034],{"type":406,"value":706},{"type":400,"tag":436,"props":7036,"children":7037},{"style":1622},[7038],{"type":406,"value":7039}," b",{"type":400,"tag":436,"props":7041,"children":7042},{"style":466},[7043],{"type":406,"value":1359},{"type":400,"tag":436,"props":7045,"children":7046},{"style":698},[7047],{"type":406,"value":1805},{"type":400,"tag":436,"props":7049,"children":7050},{"style":676},[7051],{"type":406,"value":1630},{"type":400,"tag":436,"props":7053,"children":7054},{"style":676},[7055],{"type":406,"value":1336},{"type":400,"tag":436,"props":7057,"children":7058},{"class":438,"line":729},[7059,7063,7067,7071,7075,7079,7083,7088,7092,7097,7101,7105],{"type":400,"tag":436,"props":7060,"children":7061},{"style":670},[7062],{"type":406,"value":1381},{"type":400,"tag":436,"props":7064,"children":7065},{"style":676},[7066],{"type":406,"value":679},{"type":400,"tag":436,"props":7068,"children":7069},{"style":682},[7070],{"type":406,"value":1390},{"type":400,"tag":436,"props":7072,"children":7073},{"style":1393},[7074],{"type":406,"value":690},{"type":400,"tag":436,"props":7076,"children":7077},{"style":670},[7078],{"type":406,"value":1721},{"type":400,"tag":436,"props":7080,"children":7081},{"style":676},[7082],{"type":406,"value":679},{"type":400,"tag":436,"props":7084,"children":7085},{"style":1429},[7086],{"type":406,"value":7087},"length",{"type":400,"tag":436,"props":7089,"children":7090},{"style":676},[7091],{"type":406,"value":706},{"type":400,"tag":436,"props":7093,"children":7094},{"style":4033},[7095],{"type":406,"value":7096}," arguments",{"type":400,"tag":436,"props":7098,"children":7099},{"style":676},[7100],{"type":406,"value":679},{"type":400,"tag":436,"props":7102,"children":7103},{"style":1429},[7104],{"type":406,"value":7087},{"type":400,"tag":436,"props":7106,"children":7107},{"style":1393},[7108],{"type":406,"value":1413},{"type":400,"tag":436,"props":7110,"children":7111},{"class":438,"line":1375},[7112],{"type":400,"tag":436,"props":7113,"children":7114},{"style":676},[7115],{"type":406,"value":1422},{"type":400,"tag":436,"props":7117,"children":7118},{"class":438,"line":1416},[7119,7123,7127,7131,7135,7140,7144],{"type":400,"tag":436,"props":7120,"children":7121},{"style":682},[7122],{"type":406,"value":1721},{"type":400,"tag":436,"props":7124,"children":7125},{"style":670},[7126],{"type":406,"value":690},{"type":400,"tag":436,"props":7128,"children":7129},{"style":698},[7130],{"type":406,"value":505},{"type":400,"tag":436,"props":7132,"children":7133},{"style":676},[7134],{"type":406,"value":706},{"type":400,"tag":436,"props":7136,"children":7137},{"style":698},[7138],{"type":406,"value":7139}," 2",{"type":400,"tag":436,"props":7141,"children":7142},{"style":670},[7143],{"type":406,"value":720},{"type":400,"tag":436,"props":7145,"children":7146},{"style":723},[7147],{"type":406,"value":7148},"// 1，2\n",{"type":400,"tag":414,"props":7150,"children":7151},{},[7152,7154,7165],{"type":406,"value":7153},"表达式最后返回的是值而不是引用",{"type":400,"tag":493,"props":7155,"children":7156},{},[7157],{"type":400,"tag":497,"props":7158,"children":7162},{"href":7159,"ariaDescribedBy":7160,"dataFootnoteRef":394,"id":7161},"#user-content-fn-reference",[501],"user-content-fnref-reference",[7163],{"type":406,"value":7164},"6",{"type":406,"value":7166},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":400,"tag":425,"props":7168,"children":7170},{"className":658,"code":7169,"language":660,"meta":394,"style":394},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7171],{"type":400,"tag":432,"props":7172,"children":7173},{"__ignoreMap":394},[7174,7199,7218,7239,7255,7292,7299,7306,7343],{"type":400,"tag":436,"props":7175,"children":7176},{"class":438,"line":439},[7177,7182,7186,7191,7195],{"type":400,"tag":436,"props":7178,"children":7179},{"style":670},[7180],{"type":406,"value":7181},"window",{"type":400,"tag":436,"props":7183,"children":7184},{"style":676},[7185],{"type":406,"value":679},{"type":400,"tag":436,"props":7187,"children":7188},{"style":670},[7189],{"type":406,"value":7190},"x ",{"type":400,"tag":436,"props":7192,"children":7193},{"style":466},[7194],{"type":406,"value":1870},{"type":400,"tag":436,"props":7196,"children":7197},{"style":698},[7198],{"type":406,"value":6782},{"type":400,"tag":436,"props":7200,"children":7201},{"class":438,"line":729},[7202,7206,7210,7214],{"type":400,"tag":436,"props":7203,"children":7204},{"style":993},[7205],{"type":406,"value":5794},{"type":400,"tag":436,"props":7207,"children":7208},{"style":1429},[7209],{"type":406,"value":3221},{"type":400,"tag":436,"props":7211,"children":7212},{"style":466},[7213],{"type":406,"value":1359},{"type":400,"tag":436,"props":7215,"children":7216},{"style":676},[7217],{"type":406,"value":1336},{"type":400,"tag":436,"props":7219,"children":7220},{"class":438,"line":1375},[7221,7226,7230,7234],{"type":400,"tag":436,"props":7222,"children":7223},{"style":1393},[7224],{"type":406,"value":7225},"  x",{"type":400,"tag":436,"props":7227,"children":7228},{"style":676},[7229],{"type":406,"value":1855},{"type":400,"tag":436,"props":7231,"children":7232},{"style":698},[7233],{"type":406,"value":7139},{"type":400,"tag":436,"props":7235,"children":7236},{"style":676},[7237],{"type":406,"value":7238},",\n",{"type":400,"tag":436,"props":7240,"children":7241},{"class":438,"line":1416},[7242,7247,7251],{"type":400,"tag":436,"props":7243,"children":7244},{"style":2655},[7245],{"type":406,"value":7246},"  b",{"type":400,"tag":436,"props":7248,"children":7249},{"style":676},[7250],{"type":406,"value":1331},{"type":400,"tag":436,"props":7252,"children":7253},{"style":676},[7254],{"type":406,"value":1336},{"type":400,"tag":436,"props":7256,"children":7257},{"class":438,"line":1425},[7258,7263,7267,7271,7275,7280,7284,7288],{"type":400,"tag":436,"props":7259,"children":7260},{"style":670},[7261],{"type":406,"value":7262},"    console",{"type":400,"tag":436,"props":7264,"children":7265},{"style":676},[7266],{"type":406,"value":679},{"type":400,"tag":436,"props":7268,"children":7269},{"style":682},[7270],{"type":406,"value":1390},{"type":400,"tag":436,"props":7272,"children":7273},{"style":1393},[7274],{"type":406,"value":690},{"type":400,"tag":436,"props":7276,"children":7277},{"style":1342},[7278],{"type":406,"value":7279},"this",{"type":400,"tag":436,"props":7281,"children":7282},{"style":676},[7283],{"type":406,"value":679},{"type":400,"tag":436,"props":7285,"children":7286},{"style":670},[7287],{"type":406,"value":2666},{"type":400,"tag":436,"props":7289,"children":7290},{"style":1393},[7291],{"type":406,"value":1413},{"type":400,"tag":436,"props":7293,"children":7294},{"class":438,"line":1460},[7295],{"type":400,"tag":436,"props":7296,"children":7297},{"style":676},[7298],{"type":406,"value":2075},{"type":400,"tag":436,"props":7300,"children":7301},{"class":438,"line":1497},[7302],{"type":400,"tag":436,"props":7303,"children":7304},{"style":676},[7305],{"type":406,"value":1422},{"type":400,"tag":436,"props":7307,"children":7308},{"class":438,"line":1505},[7309,7313,7317,7321,7326,7330,7334,7338],{"type":400,"tag":436,"props":7310,"children":7311},{"style":670},[7312],{"type":406,"value":5019},{"type":400,"tag":436,"props":7314,"children":7315},{"style":676},[7316],{"type":406,"value":679},{"type":400,"tag":436,"props":7318,"children":7319},{"style":682},[7320],{"type":406,"value":1390},{"type":400,"tag":436,"props":7322,"children":7323},{"style":670},[7324],{"type":406,"value":7325},"(a",{"type":400,"tag":436,"props":7327,"children":7328},{"style":676},[7329],{"type":406,"value":679},{"type":400,"tag":436,"props":7331,"children":7332},{"style":682},[7333],{"type":406,"value":1354},{"type":400,"tag":436,"props":7335,"children":7336},{"style":670},[7337],{"type":406,"value":808},{"type":400,"tag":436,"props":7339,"children":7340},{"style":723},[7341],{"type":406,"value":7342},"// 2\n",{"type":400,"tag":436,"props":7344,"children":7345},{"class":438,"line":1532},[7346,7350,7354,7358,7363,7367,7371,7375,7379,7384],{"type":400,"tag":436,"props":7347,"children":7348},{"style":670},[7349],{"type":406,"value":5019},{"type":400,"tag":436,"props":7351,"children":7352},{"style":676},[7353],{"type":406,"value":679},{"type":400,"tag":436,"props":7355,"children":7356},{"style":682},[7357],{"type":406,"value":1390},{"type":400,"tag":436,"props":7359,"children":7360},{"style":670},[7361],{"type":406,"value":7362},"((",{"type":400,"tag":436,"props":7364,"children":7365},{"style":698},[7366],{"type":406,"value":701},{"type":400,"tag":436,"props":7368,"children":7369},{"style":676},[7370],{"type":406,"value":706},{"type":400,"tag":436,"props":7372,"children":7373},{"style":670},[7374],{"type":406,"value":3221},{"type":400,"tag":436,"props":7376,"children":7377},{"style":676},[7378],{"type":406,"value":679},{"type":400,"tag":436,"props":7380,"children":7381},{"style":670},[7382],{"type":406,"value":7383},"b)()) ",{"type":400,"tag":436,"props":7385,"children":7386},{"style":723},[7387],{"type":406,"value":6728},{"type":400,"tag":414,"props":7389,"children":7390},{},[7391],{"type":406,"value":7392},"具名函数在表达式中时不会声明标识符。",{"type":400,"tag":414,"props":7394,"children":7395},{},[7396],{"type":406,"value":7397},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":400,"tag":425,"props":7399,"children":7401},{"className":658,"code":7400,"language":660,"meta":394,"style":394},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7402],{"type":400,"tag":432,"props":7403,"children":7404},{"__ignoreMap":394},[7405,7424,7452,7467,7474,7502],{"type":400,"tag":436,"props":7406,"children":7407},{"class":438,"line":439},[7408,7412,7416,7420],{"type":400,"tag":436,"props":7409,"children":7410},{"style":993},[7411],{"type":406,"value":5794},{"type":400,"tag":436,"props":7413,"children":7414},{"style":1429},[7415],{"type":406,"value":3221},{"type":400,"tag":436,"props":7417,"children":7418},{"style":466},[7419],{"type":406,"value":1359},{"type":400,"tag":436,"props":7421,"children":7422},{"style":676},[7423],{"type":406,"value":1336},{"type":400,"tag":436,"props":7425,"children":7426},{"class":438,"line":729},[7427,7431,7435,7439,7443,7447],{"type":400,"tag":436,"props":7428,"children":7429},{"style":682},[7430],{"type":406,"value":7246},{"type":400,"tag":436,"props":7432,"children":7433},{"style":676},[7434],{"type":406,"value":1855},{"type":400,"tag":436,"props":7436,"children":7437},{"style":993},[7438],{"type":406,"value":1449},{"type":400,"tag":436,"props":7440,"children":7441},{"style":682},[7442],{"type":406,"value":2021},{"type":400,"tag":436,"props":7444,"children":7445},{"style":676},[7446],{"type":406,"value":1044},{"type":400,"tag":436,"props":7448,"children":7449},{"style":676},[7450],{"type":406,"value":7451}," {},\n",{"type":400,"tag":436,"props":7453,"children":7454},{"class":438,"line":1375},[7455,7459,7463],{"type":400,"tag":436,"props":7456,"children":7457},{"style":2655},[7458],{"type":406,"value":2769},{"type":400,"tag":436,"props":7460,"children":7461},{"style":676},[7462],{"type":406,"value":1044},{"type":400,"tag":436,"props":7464,"children":7465},{"style":676},[7466],{"type":406,"value":3129},{"type":400,"tag":436,"props":7468,"children":7469},{"class":438,"line":1416},[7470],{"type":400,"tag":436,"props":7471,"children":7472},{"style":676},[7473],{"type":406,"value":1422},{"type":400,"tag":436,"props":7475,"children":7476},{"class":438,"line":1425},[7477,7481,7485,7489,7493,7497],{"type":400,"tag":436,"props":7478,"children":7479},{"style":466},[7480],{"type":406,"value":1511},{"type":400,"tag":436,"props":7482,"children":7483},{"style":670},[7484],{"type":406,"value":3221},{"type":400,"tag":436,"props":7486,"children":7487},{"style":676},[7488],{"type":406,"value":679},{"type":400,"tag":436,"props":7490,"children":7491},{"style":682},[7492],{"type":406,"value":1354},{"type":400,"tag":436,"props":7494,"children":7495},{"style":670},[7496],{"type":406,"value":824},{"type":400,"tag":436,"props":7498,"children":7499},{"style":723},[7500],{"type":406,"value":7501},"// {}\n",{"type":400,"tag":436,"props":7503,"children":7504},{"class":438,"line":1460},[7505,7509,7513,7517,7521,7525],{"type":400,"tag":436,"props":7506,"children":7507},{"style":466},[7508],{"type":406,"value":1511},{"type":400,"tag":436,"props":7510,"children":7511},{"style":670},[7512],{"type":406,"value":3221},{"type":400,"tag":436,"props":7514,"children":7515},{"style":676},[7516],{"type":406,"value":679},{"type":400,"tag":436,"props":7518,"children":7519},{"style":682},[7520],{"type":406,"value":1721},{"type":400,"tag":436,"props":7522,"children":7523},{"style":670},[7524],{"type":406,"value":824},{"type":400,"tag":436,"props":7526,"children":7527},{"style":723},[7528],{"type":406,"value":3238},{"type":400,"tag":414,"props":7530,"children":7531},{},[7532],{"type":406,"value":7533},"方法的特性总结以下三点：",{"type":400,"tag":514,"props":7535,"children":7536},{},[7537,7542,7547],{"type":400,"tag":518,"props":7538,"children":7539},{},[7540],{"type":406,"value":7541},"不能作为构造器。",{"type":400,"tag":518,"props":7543,"children":7544},{},[7545],{"type":406,"value":7546},"除了生成器方法，没有内部原型。",{"type":400,"tag":518,"props":7548,"children":7549},{},[7550],{"type":406,"value":7551},"方法不能具名。",{"type":400,"tag":414,"props":7553,"children":7554},{},[7555],{"type":406,"value":7556},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":400,"tag":425,"props":7558,"children":7560},{"className":658,"code":7559,"language":660,"meta":394,"style":394},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7561],{"type":400,"tag":432,"props":7562,"children":7563},{"__ignoreMap":394},[7564],{"type":400,"tag":436,"props":7565,"children":7566},{"class":438,"line":439},[7567,7571,7575,7579,7584,7588,7592,7596,7600],{"type":400,"tag":436,"props":7568,"children":7569},{"style":670},[7570],{"type":406,"value":673},{"type":400,"tag":436,"props":7572,"children":7573},{"style":676},[7574],{"type":406,"value":679},{"type":400,"tag":436,"props":7576,"children":7577},{"style":682},[7578],{"type":406,"value":3639},{"type":400,"tag":436,"props":7580,"children":7581},{"style":670},[7582],{"type":406,"value":7583},"(boundFn",{"type":400,"tag":436,"props":7585,"children":7586},{"style":676},[7587],{"type":406,"value":706},{"type":400,"tag":436,"props":7589,"children":7590},{"style":670},[7591],{"type":406,"value":4110},{"type":400,"tag":436,"props":7593,"children":7594},{"style":676},[7595],{"type":406,"value":679},{"type":400,"tag":436,"props":7597,"children":7598},{"style":682},[7599],{"type":406,"value":5531},{"type":400,"tag":436,"props":7601,"children":7602},{"style":670},[7603],{"type":406,"value":7604},"(targetFn))\n",{"type":400,"tag":414,"props":7606,"children":7607},{},[7608],{"type":406,"value":7609},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":400,"tag":425,"props":7611,"children":7613},{"className":658,"code":7612,"language":660,"meta":394,"style":394},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7614],{"type":400,"tag":432,"props":7615,"children":7616},{"__ignoreMap":394},[7617,7636,7679,7686],{"type":400,"tag":436,"props":7618,"children":7619},{"class":438,"line":439},[7620,7624,7628,7632],{"type":400,"tag":436,"props":7621,"children":7622},{"style":993},[7623],{"type":406,"value":1321},{"type":400,"tag":436,"props":7625,"children":7626},{"style":682},[7627],{"type":406,"value":3221},{"type":400,"tag":436,"props":7629,"children":7630},{"style":676},[7631],{"type":406,"value":1331},{"type":400,"tag":436,"props":7633,"children":7634},{"style":676},[7635],{"type":406,"value":1336},{"type":400,"tag":436,"props":7637,"children":7638},{"class":438,"line":729},[7639,7643,7647,7651,7655,7659,7663,7667,7671,7675],{"type":400,"tag":436,"props":7640,"children":7641},{"style":670},[7642],{"type":406,"value":1381},{"type":400,"tag":436,"props":7644,"children":7645},{"style":676},[7646],{"type":406,"value":679},{"type":400,"tag":436,"props":7648,"children":7649},{"style":682},[7650],{"type":406,"value":1390},{"type":400,"tag":436,"props":7652,"children":7653},{"style":1393},[7654],{"type":406,"value":690},{"type":400,"tag":436,"props":7656,"children":7657},{"style":466},[7658],{"type":406,"value":1511},{"type":400,"tag":436,"props":7660,"children":7661},{"style":676},[7662],{"type":406,"value":679},{"type":400,"tag":436,"props":7664,"children":7665},{"style":1429},[7666],{"type":406,"value":5658},{"type":400,"tag":436,"props":7668,"children":7669},{"style":466},[7670],{"type":406,"value":2002},{"type":400,"tag":436,"props":7672,"children":7673},{"style":670},[7674],{"type":406,"value":3221},{"type":400,"tag":436,"props":7676,"children":7677},{"style":1393},[7678],{"type":406,"value":1413},{"type":400,"tag":436,"props":7680,"children":7681},{"class":438,"line":1375},[7682],{"type":400,"tag":436,"props":7683,"children":7684},{"style":676},[7685],{"type":406,"value":1422},{"type":400,"tag":436,"props":7687,"children":7688},{"class":438,"line":1416},[7689,7693,7697,7701,7705,7709,7714,7718,7723,7728],{"type":400,"tag":436,"props":7690,"children":7691},{"style":670},[7692],{"type":406,"value":5019},{"type":400,"tag":436,"props":7694,"children":7695},{"style":676},[7696],{"type":406,"value":679},{"type":400,"tag":436,"props":7698,"children":7699},{"style":682},[7700],{"type":406,"value":1390},{"type":400,"tag":436,"props":7702,"children":7703},{"style":670},[7704],{"type":406,"value":690},{"type":400,"tag":436,"props":7706,"children":7707},{"style":466},[7708],{"type":406,"value":1511},{"type":400,"tag":436,"props":7710,"children":7711},{"style":670},[7712],{"type":406,"value":7713}," (a",{"type":400,"tag":436,"props":7715,"children":7716},{"style":676},[7717],{"type":406,"value":679},{"type":400,"tag":436,"props":7719,"children":7720},{"style":682},[7721],{"type":406,"value":7722},"bind",{"type":400,"tag":436,"props":7724,"children":7725},{"style":670},[7726],{"type":406,"value":7727},"())) ",{"type":400,"tag":436,"props":7729,"children":7730},{"style":723},[7731],{"type":406,"value":770},{"type":400,"tag":414,"props":7733,"children":7734},{},[7735],{"type":406,"value":7736},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":400,"tag":414,"props":7738,"children":7739},{},[7740],{"type":406,"value":7741},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":400,"tag":425,"props":7743,"children":7745},{"className":658,"code":7744,"language":660,"meta":394,"style":394},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7746],{"type":400,"tag":432,"props":7747,"children":7748},{"__ignoreMap":394},[7749,7768,7789,7814,7844,7876,7904,7930,7958,7974,8026,8034,8041,8064,8071,8078],{"type":400,"tag":436,"props":7750,"children":7751},{"class":438,"line":439},[7752,7756,7760,7764],{"type":400,"tag":436,"props":7753,"children":7754},{"style":993},[7755],{"type":406,"value":5794},{"type":400,"tag":436,"props":7757,"children":7758},{"style":1429},[7759],{"type":406,"value":2636},{"type":400,"tag":436,"props":7761,"children":7762},{"style":466},[7763],{"type":406,"value":1359},{"type":400,"tag":436,"props":7765,"children":7766},{"style":676},[7767],{"type":406,"value":1336},{"type":400,"tag":436,"props":7769,"children":7770},{"class":438,"line":729},[7771,7776,7780,7785],{"type":400,"tag":436,"props":7772,"children":7773},{"style":1393},[7774],{"type":406,"value":7775},"  step",{"type":400,"tag":436,"props":7777,"children":7778},{"style":676},[7779],{"type":406,"value":1855},{"type":400,"tag":436,"props":7781,"children":7782},{"style":698},[7783],{"type":406,"value":7784}," 0",{"type":400,"tag":436,"props":7786,"children":7787},{"style":676},[7788],{"type":406,"value":7238},{"type":400,"tag":436,"props":7790,"children":7791},{"class":438,"line":1375},[7792,7797,7801,7806,7810],{"type":400,"tag":436,"props":7793,"children":7794},{"style":2655},[7795],{"type":406,"value":7796},"  run",{"type":400,"tag":436,"props":7798,"children":7799},{"style":676},[7800],{"type":406,"value":1928},{"type":400,"tag":436,"props":7802,"children":7803},{"style":1622},[7804],{"type":406,"value":7805},"init",{"type":400,"tag":436,"props":7807,"children":7808},{"style":676},[7809],{"type":406,"value":1630},{"type":400,"tag":436,"props":7811,"children":7812},{"style":676},[7813],{"type":406,"value":1336},{"type":400,"tag":436,"props":7815,"children":7816},{"class":438,"line":1416},[7817,7822,7828,7832,7836,7840],{"type":400,"tag":436,"props":7818,"children":7819},{"style":993},[7820],{"type":406,"value":7821},"    const",{"type":400,"tag":436,"props":7823,"children":7825},{"style":7824},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7826],{"type":406,"value":7827}," exec",{"type":400,"tag":436,"props":7829,"children":7830},{"style":466},[7831],{"type":406,"value":1359},{"type":400,"tag":436,"props":7833,"children":7834},{"style":1622},[7835],{"type":406,"value":6480},{"type":400,"tag":436,"props":7837,"children":7838},{"style":993},[7839],{"type":406,"value":5730},{"type":400,"tag":436,"props":7841,"children":7842},{"style":676},[7843],{"type":406,"value":1336},{"type":400,"tag":436,"props":7845,"children":7846},{"class":438,"line":1425},[7847,7851,7855,7859,7864,7868,7872],{"type":400,"tag":436,"props":7848,"children":7849},{"style":1699},[7850],{"type":406,"value":2235},{"type":400,"tag":436,"props":7852,"children":7853},{"style":1393},[7854],{"type":406,"value":1928},{"type":400,"tag":436,"props":7856,"children":7857},{"style":670},[7858],{"type":406,"value":2666},{"type":400,"tag":436,"props":7860,"children":7861},{"style":466},[7862],{"type":406,"value":7863}," >",{"type":400,"tag":436,"props":7865,"children":7866},{"style":698},[7867],{"type":406,"value":7784},{"type":400,"tag":436,"props":7869,"children":7870},{"style":1393},[7871],{"type":406,"value":720},{"type":400,"tag":436,"props":7873,"children":7874},{"style":676},[7875],{"type":406,"value":1745},{"type":400,"tag":436,"props":7877,"children":7878},{"class":438,"line":1460},[7879,7884,7888,7892,7896,7900],{"type":400,"tag":436,"props":7880,"children":7881},{"style":670},[7882],{"type":406,"value":7883},"        console",{"type":400,"tag":436,"props":7885,"children":7886},{"style":676},[7887],{"type":406,"value":679},{"type":400,"tag":436,"props":7889,"children":7890},{"style":682},[7891],{"type":406,"value":1390},{"type":400,"tag":436,"props":7893,"children":7894},{"style":1393},[7895],{"type":406,"value":690},{"type":400,"tag":436,"props":7897,"children":7898},{"style":670},[7899],{"type":406,"value":2666},{"type":400,"tag":436,"props":7901,"children":7902},{"style":1393},[7903],{"type":406,"value":1413},{"type":400,"tag":436,"props":7905,"children":7906},{"class":438,"line":1497},[7907,7912,7916,7921,7926],{"type":400,"tag":436,"props":7908,"children":7909},{"style":1342},[7910],{"type":406,"value":7911},"        this",{"type":400,"tag":436,"props":7913,"children":7914},{"style":676},[7915],{"type":406,"value":679},{"type":400,"tag":436,"props":7917,"children":7918},{"style":670},[7919],{"type":406,"value":7920},"step",{"type":400,"tag":436,"props":7922,"children":7923},{"style":466},[7924],{"type":406,"value":7925}," +=",{"type":400,"tag":436,"props":7927,"children":7928},{"style":698},[7929],{"type":406,"value":6782},{"type":400,"tag":436,"props":7931,"children":7932},{"class":438,"line":1505},[7933,7938,7942,7946,7950,7954],{"type":400,"tag":436,"props":7934,"children":7935},{"style":682},[7936],{"type":406,"value":7937},"        exec",{"type":400,"tag":436,"props":7939,"children":7940},{"style":1393},[7941],{"type":406,"value":690},{"type":400,"tag":436,"props":7943,"children":7944},{"style":670},[7945],{"type":406,"value":2666},{"type":400,"tag":436,"props":7947,"children":7948},{"style":466},[7949],{"type":406,"value":711},{"type":400,"tag":436,"props":7951,"children":7952},{"style":698},[7953],{"type":406,"value":1805},{"type":400,"tag":436,"props":7955,"children":7956},{"style":1393},[7957],{"type":406,"value":1413},{"type":400,"tag":436,"props":7959,"children":7960},{"class":438,"line":1532},[7961,7966,7970],{"type":400,"tag":436,"props":7962,"children":7963},{"style":676},[7964],{"type":406,"value":7965},"      }",{"type":400,"tag":436,"props":7967,"children":7968},{"style":1699},[7969],{"type":406,"value":5932},{"type":400,"tag":436,"props":7971,"children":7972},{"style":676},[7973],{"type":406,"value":1336},{"type":400,"tag":436,"props":7975,"children":7976},{"class":438,"line":2108},[7977,7981,7985,7989,7993,7997,8002,8006,8010,8014,8018,8022],{"type":400,"tag":436,"props":7978,"children":7979},{"style":670},[7980],{"type":406,"value":7883},{"type":400,"tag":436,"props":7982,"children":7983},{"style":676},[7984],{"type":406,"value":679},{"type":400,"tag":436,"props":7986,"children":7987},{"style":682},[7988],{"type":406,"value":1390},{"type":400,"tag":436,"props":7990,"children":7991},{"style":1393},[7992],{"type":406,"value":690},{"type":400,"tag":436,"props":7994,"children":7995},{"style":449},[7996],{"type":406,"value":463},{"type":400,"tag":436,"props":7998,"children":7999},{"style":455},[8000],{"type":406,"value":8001},"steps: ",{"type":400,"tag":436,"props":8003,"children":8004},{"style":449},[8005],{"type":406,"value":463},{"type":400,"tag":436,"props":8007,"children":8008},{"style":676},[8009],{"type":406,"value":706},{"type":400,"tag":436,"props":8011,"children":8012},{"style":1342},[8013],{"type":406,"value":3789},{"type":400,"tag":436,"props":8015,"children":8016},{"style":676},[8017],{"type":406,"value":679},{"type":400,"tag":436,"props":8019,"children":8020},{"style":670},[8021],{"type":406,"value":7920},{"type":400,"tag":436,"props":8023,"children":8024},{"style":1393},[8025],{"type":406,"value":1413},{"type":400,"tag":436,"props":8027,"children":8028},{"class":438,"line":2168},[8029],{"type":400,"tag":436,"props":8030,"children":8031},{"style":676},[8032],{"type":406,"value":8033},"      }\n",{"type":400,"tag":436,"props":8035,"children":8036},{"class":438,"line":2229},[8037],{"type":400,"tag":436,"props":8038,"children":8039},{"style":676},[8040],{"type":406,"value":2317},{"type":400,"tag":436,"props":8042,"children":8043},{"class":438,"line":2270},[8044,8048,8052,8056,8060],{"type":400,"tag":436,"props":8045,"children":8046},{"style":1699},[8047],{"type":406,"value":2733},{"type":400,"tag":436,"props":8049,"children":8050},{"style":682},[8051],{"type":406,"value":7827},{"type":400,"tag":436,"props":8053,"children":8054},{"style":1393},[8055],{"type":406,"value":690},{"type":400,"tag":436,"props":8057,"children":8058},{"style":670},[8059],{"type":406,"value":7805},{"type":400,"tag":436,"props":8061,"children":8062},{"style":1393},[8063],{"type":406,"value":1413},{"type":400,"tag":436,"props":8065,"children":8066},{"class":438,"line":2311},[8067],{"type":400,"tag":436,"props":8068,"children":8069},{"style":676},[8070],{"type":406,"value":2075},{"type":400,"tag":436,"props":8072,"children":8073},{"class":438,"line":2320},[8074],{"type":400,"tag":436,"props":8075,"children":8076},{"style":676},[8077],{"type":406,"value":1422},{"type":400,"tag":436,"props":8079,"children":8080},{"class":438,"line":2328},[8081,8086,8090,8095,8099,8104,8108],{"type":400,"tag":436,"props":8082,"children":8083},{"style":670},[8084],{"type":406,"value":8085},"obj",{"type":400,"tag":436,"props":8087,"children":8088},{"style":676},[8089],{"type":406,"value":679},{"type":400,"tag":436,"props":8091,"children":8092},{"style":682},[8093],{"type":406,"value":8094},"run",{"type":400,"tag":436,"props":8096,"children":8097},{"style":670},[8098],{"type":406,"value":690},{"type":400,"tag":436,"props":8100,"children":8101},{"style":698},[8102],{"type":406,"value":8103},"10",{"type":400,"tag":436,"props":8105,"children":8106},{"style":670},[8107],{"type":406,"value":720},{"type":400,"tag":436,"props":8109,"children":8110},{"style":723},[8111],{"type":406,"value":8112},"// steps: 10\n",{"type":400,"tag":408,"props":8114,"children":8116},{"id":8115},"函数的行为",[8117],{"type":406,"value":8115},{"type":400,"tag":414,"props":8119,"children":8120},{},[8121],{"type":406,"value":8122},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":400,"tag":414,"props":8124,"children":8125},{},[8126],{"type":406,"value":8127},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":400,"tag":414,"props":8129,"children":8130},{},[8131],{"type":406,"value":8132},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":400,"tag":414,"props":8134,"children":8135},{},[8136],{"type":406,"value":8137},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":400,"tag":425,"props":8139,"children":8141},{"className":658,"code":8140,"language":660,"meta":394,"style":394},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8142],{"type":400,"tag":432,"props":8143,"children":8144},{"__ignoreMap":394},[8145,8170,8182,8194,8206,8217,8234,8270,8277,8284,8308,8320,8367,8400,8445,8460,8496,8517,8525,8533,8542,8551],{"type":400,"tag":436,"props":8146,"children":8147},{"class":438,"line":439},[8148,8152,8157,8162,8166],{"type":400,"tag":436,"props":8149,"children":8150},{"style":993},[8151],{"type":406,"value":1321},{"type":400,"tag":436,"props":8153,"children":8154},{"style":466},[8155],{"type":406,"value":8156},"*",{"type":400,"tag":436,"props":8158,"children":8159},{"style":682},[8160],{"type":406,"value":8161}," GetThisDone",{"type":400,"tag":436,"props":8163,"children":8164},{"style":676},[8165],{"type":406,"value":1044},{"type":400,"tag":436,"props":8167,"children":8168},{"style":676},[8169],{"type":406,"value":1336},{"type":400,"tag":436,"props":8171,"children":8172},{"class":438,"line":729},[8173,8178],{"type":400,"tag":436,"props":8174,"children":8175},{"style":1699},[8176],{"type":406,"value":8177},"  try",{"type":400,"tag":436,"props":8179,"children":8180},{"style":676},[8181],{"type":406,"value":1336},{"type":400,"tag":436,"props":8183,"children":8184},{"class":438,"line":1375},[8185,8190],{"type":400,"tag":436,"props":8186,"children":8187},{"style":1699},[8188],{"type":406,"value":8189},"    yield",{"type":400,"tag":436,"props":8191,"children":8192},{"style":698},[8193],{"type":406,"value":6782},{"type":400,"tag":436,"props":8195,"children":8196},{"class":438,"line":1416},[8197,8201],{"type":400,"tag":436,"props":8198,"children":8199},{"style":1699},[8200],{"type":406,"value":8189},{"type":400,"tag":436,"props":8202,"children":8203},{"style":698},[8204],{"type":406,"value":8205}," 10\n",{"type":400,"tag":436,"props":8207,"children":8208},{"class":438,"line":1425},[8209,8213],{"type":400,"tag":436,"props":8210,"children":8211},{"style":1699},[8212],{"type":406,"value":8189},{"type":400,"tag":436,"props":8214,"children":8215},{"style":698},[8216],{"type":406,"value":6782},{"type":400,"tag":436,"props":8218,"children":8219},{"class":438,"line":1460},[8220,8225,8230],{"type":400,"tag":436,"props":8221,"children":8222},{"style":676},[8223],{"type":406,"value":8224},"  }",{"type":400,"tag":436,"props":8226,"children":8227},{"style":1699},[8228],{"type":406,"value":8229}," finally",{"type":400,"tag":436,"props":8231,"children":8232},{"style":676},[8233],{"type":406,"value":1336},{"type":400,"tag":436,"props":8235,"children":8236},{"class":438,"line":1497},[8237,8241,8245,8249,8253,8257,8262,8266],{"type":400,"tag":436,"props":8238,"children":8239},{"style":670},[8240],{"type":406,"value":7262},{"type":400,"tag":436,"props":8242,"children":8243},{"style":676},[8244],{"type":406,"value":679},{"type":400,"tag":436,"props":8246,"children":8247},{"style":682},[8248],{"type":406,"value":1390},{"type":400,"tag":436,"props":8250,"children":8251},{"style":1393},[8252],{"type":406,"value":690},{"type":400,"tag":436,"props":8254,"children":8255},{"style":449},[8256],{"type":406,"value":463},{"type":400,"tag":436,"props":8258,"children":8259},{"style":455},[8260],{"type":406,"value":8261},"done",{"type":400,"tag":436,"props":8263,"children":8264},{"style":449},[8265],{"type":406,"value":463},{"type":400,"tag":436,"props":8267,"children":8268},{"style":1393},[8269],{"type":406,"value":1413},{"type":400,"tag":436,"props":8271,"children":8272},{"class":438,"line":1505},[8273],{"type":400,"tag":436,"props":8274,"children":8275},{"style":676},[8276],{"type":406,"value":2075},{"type":400,"tag":436,"props":8278,"children":8279},{"class":438,"line":1532},[8280],{"type":400,"tag":436,"props":8281,"children":8282},{"style":676},[8283],{"type":406,"value":1422},{"type":400,"tag":436,"props":8285,"children":8286},{"class":438,"line":2108},[8287,8291,8296,8300,8304],{"type":400,"tag":436,"props":8288,"children":8289},{"style":993},[8290],{"type":406,"value":5794},{"type":400,"tag":436,"props":8292,"children":8293},{"style":1429},[8294],{"type":406,"value":8295}," get",{"type":400,"tag":436,"props":8297,"children":8298},{"style":466},[8299],{"type":406,"value":1359},{"type":400,"tag":436,"props":8301,"children":8302},{"style":682},[8303],{"type":406,"value":8161},{"type":400,"tag":436,"props":8305,"children":8306},{"style":670},[8307],{"type":406,"value":3338},{"type":400,"tag":436,"props":8309,"children":8310},{"class":438,"line":2168},[8311,8315],{"type":400,"tag":436,"props":8312,"children":8313},{"style":993},[8314],{"type":406,"value":996},{"type":400,"tag":436,"props":8316,"children":8317},{"style":670},[8318],{"type":406,"value":8319}," val\n",{"type":400,"tag":436,"props":8321,"children":8322},{"class":438,"line":2229},[8323,8328,8333,8337,8341,8345,8350,8354,8358,8363],{"type":400,"tag":436,"props":8324,"children":8325},{"style":1699},[8326],{"type":406,"value":8327},"while",{"type":400,"tag":436,"props":8329,"children":8330},{"style":670},[8331],{"type":406,"value":8332}," (val ",{"type":400,"tag":436,"props":8334,"children":8335},{"style":466},[8336],{"type":406,"value":1870},{"type":400,"tag":436,"props":8338,"children":8339},{"style":670},[8340],{"type":406,"value":8295},{"type":400,"tag":436,"props":8342,"children":8343},{"style":676},[8344],{"type":406,"value":679},{"type":400,"tag":436,"props":8346,"children":8347},{"style":682},[8348],{"type":406,"value":8349},"next",{"type":400,"tag":436,"props":8351,"children":8352},{"style":670},[8353],{"type":406,"value":1044},{"type":400,"tag":436,"props":8355,"children":8356},{"style":676},[8357],{"type":406,"value":679},{"type":400,"tag":436,"props":8359,"children":8360},{"style":670},[8361],{"type":406,"value":8362},"value) ",{"type":400,"tag":436,"props":8364,"children":8365},{"style":676},[8366],{"type":406,"value":1745},{"type":400,"tag":436,"props":8368,"children":8369},{"class":438,"line":2270},[8370,8374,8378,8383,8387,8392,8396],{"type":400,"tag":436,"props":8371,"children":8372},{"style":1699},[8373],{"type":406,"value":6525},{"type":400,"tag":436,"props":8375,"children":8376},{"style":1393},[8377],{"type":406,"value":1928},{"type":400,"tag":436,"props":8379,"children":8380},{"style":670},[8381],{"type":406,"value":8382},"val",{"type":400,"tag":436,"props":8384,"children":8385},{"style":466},[8386],{"type":406,"value":1956},{"type":400,"tag":436,"props":8388,"children":8389},{"style":698},[8390],{"type":406,"value":8391}," 10",{"type":400,"tag":436,"props":8393,"children":8394},{"style":1393},[8395],{"type":406,"value":720},{"type":400,"tag":436,"props":8397,"children":8398},{"style":676},[8399],{"type":406,"value":1745},{"type":400,"tag":436,"props":8401,"children":8402},{"class":438,"line":2311},[8403,8407,8411,8415,8419,8423,8428,8432,8436,8441],{"type":400,"tag":436,"props":8404,"children":8405},{"style":670},[8406],{"type":406,"value":7262},{"type":400,"tag":436,"props":8408,"children":8409},{"style":676},[8410],{"type":406,"value":679},{"type":400,"tag":436,"props":8412,"children":8413},{"style":682},[8414],{"type":406,"value":1390},{"type":400,"tag":436,"props":8416,"children":8417},{"style":1393},[8418],{"type":406,"value":690},{"type":400,"tag":436,"props":8420,"children":8421},{"style":449},[8422],{"type":406,"value":463},{"type":400,"tag":436,"props":8424,"children":8425},{"style":455},[8426],{"type":406,"value":8427},"right val:",{"type":400,"tag":436,"props":8429,"children":8430},{"style":449},[8431],{"type":406,"value":463},{"type":400,"tag":436,"props":8433,"children":8434},{"style":676},[8435],{"type":406,"value":706},{"type":400,"tag":436,"props":8437,"children":8438},{"style":670},[8439],{"type":406,"value":8440}," val",{"type":400,"tag":436,"props":8442,"children":8443},{"style":1393},[8444],{"type":406,"value":1413},{"type":400,"tag":436,"props":8446,"children":8447},{"class":438,"line":2320},[8448,8452,8456],{"type":400,"tag":436,"props":8449,"children":8450},{"style":676},[8451],{"type":406,"value":8224},{"type":400,"tag":436,"props":8453,"children":8454},{"style":1699},[8455],{"type":406,"value":5932},{"type":400,"tag":436,"props":8457,"children":8458},{"style":676},[8459],{"type":406,"value":1336},{"type":400,"tag":436,"props":8461,"children":8462},{"class":438,"line":2328},[8463,8467,8471,8475,8479,8483,8488,8492],{"type":400,"tag":436,"props":8464,"children":8465},{"style":670},[8466],{"type":406,"value":7262},{"type":400,"tag":436,"props":8468,"children":8469},{"style":676},[8470],{"type":406,"value":679},{"type":400,"tag":436,"props":8472,"children":8473},{"style":682},[8474],{"type":406,"value":1390},{"type":400,"tag":436,"props":8476,"children":8477},{"style":1393},[8478],{"type":406,"value":690},{"type":400,"tag":436,"props":8480,"children":8481},{"style":449},[8482],{"type":406,"value":463},{"type":400,"tag":436,"props":8484,"children":8485},{"style":455},[8486],{"type":406,"value":8487},"wrong val",{"type":400,"tag":436,"props":8489,"children":8490},{"style":449},[8491],{"type":406,"value":463},{"type":400,"tag":436,"props":8493,"children":8494},{"style":1393},[8495],{"type":406,"value":1413},{"type":400,"tag":436,"props":8497,"children":8498},{"class":438,"line":6002},[8499,8504,8508,8513],{"type":400,"tag":436,"props":8500,"children":8501},{"style":670},[8502],{"type":406,"value":8503},"    get",{"type":400,"tag":436,"props":8505,"children":8506},{"style":676},[8507],{"type":406,"value":679},{"type":400,"tag":436,"props":8509,"children":8510},{"style":682},[8511],{"type":406,"value":8512},"return",{"type":400,"tag":436,"props":8514,"children":8515},{"style":1393},[8516],{"type":406,"value":3338},{"type":400,"tag":436,"props":8518,"children":8520},{"class":438,"line":8519},18,[8521],{"type":400,"tag":436,"props":8522,"children":8523},{"style":676},[8524],{"type":406,"value":2075},{"type":400,"tag":436,"props":8526,"children":8528},{"class":438,"line":8527},19,[8529],{"type":400,"tag":436,"props":8530,"children":8531},{"style":676},[8532],{"type":406,"value":1422},{"type":400,"tag":436,"props":8534,"children":8536},{"class":438,"line":8535},20,[8537],{"type":400,"tag":436,"props":8538,"children":8539},{"style":723},[8540],{"type":406,"value":8541},"// right val: 1\n",{"type":400,"tag":436,"props":8543,"children":8545},{"class":438,"line":8544},21,[8546],{"type":400,"tag":436,"props":8547,"children":8548},{"style":723},[8549],{"type":406,"value":8550},"// wrong val\n",{"type":400,"tag":436,"props":8552,"children":8554},{"class":438,"line":8553},22,[8555],{"type":400,"tag":436,"props":8556,"children":8557},{"style":723},[8558],{"type":406,"value":8559},"// done\n",{"type":400,"tag":408,"props":8561,"children":8563},{"id":8562},"闭包",[8564],{"type":406,"value":8562},{"type":400,"tag":414,"props":8566,"children":8567},{},[8568],{"type":406,"value":8569},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":400,"tag":414,"props":8571,"children":8572},{},[8573],{"type":406,"value":8574},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":400,"tag":514,"props":8576,"children":8577},{},[8578,8583,8588],{"type":400,"tag":518,"props":8579,"children":8580},{},[8581],{"type":406,"value":8582},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":400,"tag":518,"props":8584,"children":8585},{},[8586],{"type":406,"value":8587},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":400,"tag":518,"props":8589,"children":8590},{},[8591],{"type":406,"value":8592},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":400,"tag":414,"props":8594,"children":8595},{},[8596],{"type":406,"value":8597},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":400,"tag":425,"props":8599,"children":8601},{"className":658,"code":8600,"language":660,"meta":394,"style":394},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8602],{"type":400,"tag":432,"props":8603,"children":8604},{"__ignoreMap":394},[8605,8624,8639,8646,8657],{"type":400,"tag":436,"props":8606,"children":8607},{"class":438,"line":439},[8608,8612,8616,8620],{"type":400,"tag":436,"props":8609,"children":8610},{"style":993},[8611],{"type":406,"value":1321},{"type":400,"tag":436,"props":8613,"children":8614},{"style":682},[8615],{"type":406,"value":2021},{"type":400,"tag":436,"props":8617,"children":8618},{"style":676},[8619],{"type":406,"value":1331},{"type":400,"tag":436,"props":8621,"children":8622},{"style":676},[8623],{"type":406,"value":1336},{"type":400,"tag":436,"props":8625,"children":8626},{"class":438,"line":729},[8627,8631,8635],{"type":400,"tag":436,"props":8628,"children":8629},{"style":670},[8630],{"type":406,"value":2769},{"type":400,"tag":436,"props":8632,"children":8633},{"style":466},[8634],{"type":406,"value":1359},{"type":400,"tag":436,"props":8636,"children":8637},{"style":698},[8638],{"type":406,"value":6782},{"type":400,"tag":436,"props":8640,"children":8641},{"class":438,"line":1375},[8642],{"type":400,"tag":436,"props":8643,"children":8644},{"style":676},[8645],{"type":406,"value":1422},{"type":400,"tag":436,"props":8647,"children":8648},{"class":438,"line":1416},[8649,8653],{"type":400,"tag":436,"props":8650,"children":8651},{"style":682},[8652],{"type":406,"value":1721},{"type":400,"tag":436,"props":8654,"children":8655},{"style":670},[8656],{"type":406,"value":3338},{"type":400,"tag":436,"props":8658,"children":8659},{"class":438,"line":1425},[8660,8664,8668,8672,8676,8680,8685],{"type":400,"tag":436,"props":8661,"children":8662},{"style":670},[8663],{"type":406,"value":5019},{"type":400,"tag":436,"props":8665,"children":8666},{"style":676},[8667],{"type":406,"value":679},{"type":400,"tag":436,"props":8669,"children":8670},{"style":682},[8671],{"type":406,"value":1390},{"type":400,"tag":436,"props":8673,"children":8674},{"style":670},[8675],{"type":406,"value":690},{"type":400,"tag":436,"props":8677,"children":8678},{"style":466},[8679],{"type":406,"value":949},{"type":400,"tag":436,"props":8681,"children":8682},{"style":670},[8683],{"type":406,"value":8684}," test) ",{"type":400,"tag":436,"props":8686,"children":8687},{"style":723},[8688],{"type":406,"value":8689},"// number\n",{"type":400,"tag":414,"props":8691,"children":8692},{},[8693],{"type":406,"value":8694},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":400,"tag":414,"props":8696,"children":8697},{},[8698],{"type":406,"value":8699},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":400,"tag":425,"props":8701,"children":8703},{"className":658,"code":8702,"language":660,"meta":394,"style":394},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8704],{"type":400,"tag":432,"props":8705,"children":8706},{"__ignoreMap":394},[8707,8743,8763,8780,8800,8823,8839,8846],{"type":400,"tag":436,"props":8708,"children":8709},{"class":438,"line":439},[8710,8714,8718,8722,8726,8731,8735,8739],{"type":400,"tag":436,"props":8711,"children":8712},{"style":993},[8713],{"type":406,"value":996},{"type":400,"tag":436,"props":8715,"children":8716},{"style":670},[8717],{"type":406,"value":3141},{"type":400,"tag":436,"props":8719,"children":8720},{"style":466},[8721],{"type":406,"value":1870},{"type":400,"tag":436,"props":8723,"children":8724},{"style":676},[8725],{"type":406,"value":1707},{"type":400,"tag":436,"props":8727,"children":8728},{"style":1393},[8729],{"type":406,"value":8730}," value",{"type":400,"tag":436,"props":8732,"children":8733},{"style":676},[8734],{"type":406,"value":1855},{"type":400,"tag":436,"props":8736,"children":8737},{"style":698},[8738],{"type":406,"value":505},{"type":400,"tag":436,"props":8740,"children":8741},{"style":676},[8742],{"type":406,"value":3168},{"type":400,"tag":436,"props":8744,"children":8745},{"class":438,"line":729},[8746,8750,8755,8759],{"type":400,"tag":436,"props":8747,"children":8748},{"style":993},[8749],{"type":406,"value":996},{"type":400,"tag":436,"props":8751,"children":8752},{"style":670},[8753],{"type":406,"value":8754}," b ",{"type":400,"tag":436,"props":8756,"children":8757},{"style":466},[8758],{"type":406,"value":1870},{"type":400,"tag":436,"props":8760,"children":8761},{"style":698},[8762],{"type":406,"value":6782},{"type":400,"tag":436,"props":8764,"children":8765},{"class":438,"line":1375},[8766,8771,8776],{"type":400,"tag":436,"props":8767,"children":8768},{"style":1699},[8769],{"type":406,"value":8770},"with",{"type":400,"tag":436,"props":8772,"children":8773},{"style":670},[8774],{"type":406,"value":8775}," (a) ",{"type":400,"tag":436,"props":8777,"children":8778},{"style":676},[8779],{"type":406,"value":1745},{"type":400,"tag":436,"props":8781,"children":8782},{"class":438,"line":1416},[8783,8788,8792,8796],{"type":400,"tag":436,"props":8784,"children":8785},{"style":993},[8786],{"type":406,"value":8787}," var",{"type":400,"tag":436,"props":8789,"children":8790},{"style":670},[8791],{"type":406,"value":8730},{"type":400,"tag":436,"props":8793,"children":8794},{"style":466},[8795],{"type":406,"value":1359},{"type":400,"tag":436,"props":8797,"children":8798},{"style":698},[8799],{"type":406,"value":6358},{"type":400,"tag":436,"props":8801,"children":8802},{"class":438,"line":1425},[8803,8807,8811,8815,8819],{"type":400,"tag":436,"props":8804,"children":8805},{"style":670},[8806],{"type":406,"value":3221},{"type":400,"tag":436,"props":8808,"children":8809},{"style":676},[8810],{"type":406,"value":679},{"type":400,"tag":436,"props":8812,"children":8813},{"style":670},[8814],{"type":406,"value":1354},{"type":400,"tag":436,"props":8816,"children":8817},{"style":466},[8818],{"type":406,"value":1359},{"type":400,"tag":436,"props":8820,"children":8821},{"style":698},[8822],{"type":406,"value":6782},{"type":400,"tag":436,"props":8824,"children":8825},{"class":438,"line":1460},[8826,8830,8834],{"type":400,"tag":436,"props":8827,"children":8828},{"style":670},[8829],{"type":406,"value":7039},{"type":400,"tag":436,"props":8831,"children":8832},{"style":466},[8833],{"type":406,"value":1359},{"type":400,"tag":436,"props":8835,"children":8836},{"style":698},[8837],{"type":406,"value":8838}," 2\n",{"type":400,"tag":436,"props":8840,"children":8841},{"class":438,"line":1497},[8842],{"type":400,"tag":436,"props":8843,"children":8844},{"style":676},[8845],{"type":406,"value":1422},{"type":400,"tag":436,"props":8847,"children":8848},{"class":438,"line":1505},[8849,8853,8857,8861,8865,8869,8873,8877,8882],{"type":400,"tag":436,"props":8850,"children":8851},{"style":670},[8852],{"type":406,"value":5019},{"type":400,"tag":436,"props":8854,"children":8855},{"style":676},[8856],{"type":406,"value":679},{"type":400,"tag":436,"props":8858,"children":8859},{"style":682},[8860],{"type":406,"value":1390},{"type":400,"tag":436,"props":8862,"children":8863},{"style":670},[8864],{"type":406,"value":7325},{"type":400,"tag":436,"props":8866,"children":8867},{"style":676},[8868],{"type":406,"value":706},{"type":400,"tag":436,"props":8870,"children":8871},{"style":670},[8872],{"type":406,"value":7039},{"type":400,"tag":436,"props":8874,"children":8875},{"style":676},[8876],{"type":406,"value":706},{"type":400,"tag":436,"props":8878,"children":8879},{"style":670},[8880],{"type":406,"value":8881}," value) ",{"type":400,"tag":436,"props":8883,"children":8884},{"style":723},[8885],{"type":406,"value":8886},"// { value:100, b:2 }, 1, undefined\n",{"type":400,"tag":414,"props":8888,"children":8889},{},[8890],{"type":406,"value":8891},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":400,"tag":414,"props":8893,"children":8894},{},[8895],{"type":406,"value":8896},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":400,"tag":414,"props":8898,"children":8899},{},[8900],{"type":406,"value":8901},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":400,"tag":414,"props":8903,"children":8904},{},[8905],{"type":406,"value":8906},"闭包内标识符系统的优先级规则：",{"type":400,"tag":514,"props":8908,"children":8909},{},[8910,8915,8920],{"type":400,"tag":518,"props":8911,"children":8912},{},[8913],{"type":406,"value":8914},"内部函数声明 > 函数参数名列表",{"type":400,"tag":518,"props":8916,"children":8917},{},[8918],{"type":406,"value":8919},"参数中的 arguments 名字 > 函数的 arguments",{"type":400,"tag":518,"props":8921,"children":8922},{},[8923],{"type":406,"value":8924},"var 声明的名字如果已存在，则不再创建新变量",{"type":400,"tag":414,"props":8926,"children":8927},{},[8928],{"type":406,"value":8929},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":400,"tag":401,"props":8931,"children":8933},{"id":8932},"动态语言特性",[8934],{"type":406,"value":8932},{"type":400,"tag":408,"props":8936,"children":8938},{"id":8937},"概述-2",[8939],{"type":406,"value":6056},{"type":400,"tag":414,"props":8941,"children":8942},{},[8943],{"type":406,"value":8944},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":400,"tag":414,"props":8946,"children":8947},{},[8948],{"type":406,"value":8949},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":400,"tag":408,"props":8951,"children":8953},{"id":8952},"对象与值类型之间的转换",[8954],{"type":406,"value":8952},{"type":400,"tag":414,"props":8956,"children":8957},{},[8958],{"type":406,"value":8959},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":400,"tag":425,"props":8961,"children":8963},{"className":658,"code":8962,"language":660,"meta":394,"style":394},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8964],{"type":400,"tag":432,"props":8965,"children":8966},{"__ignoreMap":394},[8967,9015,9038,9046,9090,9097],{"type":400,"tag":436,"props":8968,"children":8969},{"class":438,"line":439},[8970,8974,8979,8983,8987,8991,8995,8999,9003,9007,9011],{"type":400,"tag":436,"props":8971,"children":8972},{"style":993},[8973],{"type":406,"value":2631},{"type":400,"tag":436,"props":8975,"children":8976},{"style":7824},[8977],{"type":406,"value":8978}," toString",{"type":400,"tag":436,"props":8980,"children":8981},{"style":466},[8982],{"type":406,"value":1359},{"type":400,"tag":436,"props":8984,"children":8985},{"style":676},[8986],{"type":406,"value":1331},{"type":400,"tag":436,"props":8988,"children":8989},{"style":993},[8990],{"type":406,"value":5730},{"type":400,"tag":436,"props":8992,"children":8993},{"style":670},[8994],{"type":406,"value":2038},{"type":400,"tag":436,"props":8996,"children":8997},{"style":676},[8998],{"type":406,"value":679},{"type":400,"tag":436,"props":9000,"children":9001},{"style":682},[9002],{"type":406,"value":1390},{"type":400,"tag":436,"props":9004,"children":9005},{"style":670},[9006],{"type":406,"value":690},{"type":400,"tag":436,"props":9008,"children":9009},{"style":698},[9010],{"type":406,"value":505},{"type":400,"tag":436,"props":9012,"children":9013},{"style":670},[9014],{"type":406,"value":1413},{"type":400,"tag":436,"props":9016,"children":9017},{"class":438,"line":729},[9018,9022,9026,9030,9034],{"type":400,"tag":436,"props":9019,"children":9020},{"style":1699},[9021],{"type":406,"value":8770},{"type":400,"tag":436,"props":9023,"children":9024},{"style":670},[9025],{"type":406,"value":1928},{"type":400,"tag":436,"props":9027,"children":9028},{"style":698},[9029],{"type":406,"value":505},{"type":400,"tag":436,"props":9031,"children":9032},{"style":670},[9033],{"type":406,"value":720},{"type":400,"tag":436,"props":9035,"children":9036},{"style":676},[9037],{"type":406,"value":1745},{"type":400,"tag":436,"props":9039,"children":9040},{"class":438,"line":1375},[9041],{"type":400,"tag":436,"props":9042,"children":9043},{"style":723},[9044],{"type":406,"value":9045},"  // equal to (1).toString = ...\n",{"type":400,"tag":436,"props":9047,"children":9048},{"class":438,"line":1416},[9049,9054,9058,9062,9066,9070,9074,9078,9082,9086],{"type":400,"tag":436,"props":9050,"children":9051},{"style":682},[9052],{"type":406,"value":9053},"  toString",{"type":400,"tag":436,"props":9055,"children":9056},{"style":466},[9057],{"type":406,"value":1359},{"type":400,"tag":436,"props":9059,"children":9060},{"style":676},[9061],{"type":406,"value":1331},{"type":400,"tag":436,"props":9063,"children":9064},{"style":993},[9065],{"type":406,"value":5730},{"type":400,"tag":436,"props":9067,"children":9068},{"style":670},[9069],{"type":406,"value":2038},{"type":400,"tag":436,"props":9071,"children":9072},{"style":676},[9073],{"type":406,"value":679},{"type":400,"tag":436,"props":9075,"children":9076},{"style":682},[9077],{"type":406,"value":1390},{"type":400,"tag":436,"props":9079,"children":9080},{"style":1393},[9081],{"type":406,"value":690},{"type":400,"tag":436,"props":9083,"children":9084},{"style":698},[9085],{"type":406,"value":533},{"type":400,"tag":436,"props":9087,"children":9088},{"style":1393},[9089],{"type":406,"value":1413},{"type":400,"tag":436,"props":9091,"children":9092},{"class":438,"line":1425},[9093],{"type":400,"tag":436,"props":9094,"children":9095},{"style":676},[9096],{"type":406,"value":1422},{"type":400,"tag":436,"props":9098,"children":9099},{"class":438,"line":1460},[9100,9104,9108,9112,9116,9121,9125],{"type":400,"tag":436,"props":9101,"children":9102},{"style":670},[9103],{"type":406,"value":5019},{"type":400,"tag":436,"props":9105,"children":9106},{"style":676},[9107],{"type":406,"value":679},{"type":400,"tag":436,"props":9109,"children":9110},{"style":682},[9111],{"type":406,"value":1390},{"type":400,"tag":436,"props":9113,"children":9114},{"style":670},[9115],{"type":406,"value":690},{"type":400,"tag":436,"props":9117,"children":9118},{"style":682},[9119],{"type":406,"value":9120},"toString",{"type":400,"tag":436,"props":9122,"children":9123},{"style":670},[9124],{"type":406,"value":808},{"type":400,"tag":436,"props":9126,"children":9127},{"style":723},[9128],{"type":406,"value":6728},{"type":400,"tag":414,"props":9130,"children":9131},{},[9132],{"type":406,"value":9133},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":400,"tag":414,"props":9135,"children":9136},{},[9137],{"type":406,"value":9138},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":400,"tag":425,"props":9140,"children":9142},{"className":658,"code":9141,"language":660,"meta":394,"style":394},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9143],{"type":400,"tag":432,"props":9144,"children":9145},{"__ignoreMap":394},[9146,9188,9231],{"type":400,"tag":436,"props":9147,"children":9148},{"class":438,"line":439},[9149,9154,9158,9162,9166,9171,9175,9179,9183],{"type":400,"tag":436,"props":9150,"children":9151},{"style":2818},[9152],{"type":406,"value":9153},"String",{"type":400,"tag":436,"props":9155,"children":9156},{"style":676},[9157],{"type":406,"value":679},{"type":400,"tag":436,"props":9159,"children":9160},{"style":1429},[9161],{"type":406,"value":2829},{"type":400,"tag":436,"props":9163,"children":9164},{"style":676},[9165],{"type":406,"value":679},{"type":400,"tag":436,"props":9167,"children":9168},{"style":682},[9169],{"type":406,"value":9170},"valueOf",{"type":400,"tag":436,"props":9172,"children":9173},{"style":466},[9174],{"type":406,"value":1359},{"type":400,"tag":436,"props":9176,"children":9177},{"style":676},[9178],{"type":406,"value":1331},{"type":400,"tag":436,"props":9180,"children":9181},{"style":993},[9182],{"type":406,"value":5730},{"type":400,"tag":436,"props":9184,"children":9185},{"style":698},[9186],{"type":406,"value":9187}," 0\n",{"type":400,"tag":436,"props":9189,"children":9190},{"class":438,"line":729},[9191,9195,9199,9203,9207,9211,9215,9219,9223,9227],{"type":400,"tag":436,"props":9192,"children":9193},{"style":670},[9194],{"type":406,"value":5019},{"type":400,"tag":436,"props":9196,"children":9197},{"style":676},[9198],{"type":406,"value":679},{"type":400,"tag":436,"props":9200,"children":9201},{"style":682},[9202],{"type":406,"value":1390},{"type":400,"tag":436,"props":9204,"children":9205},{"style":670},[9206],{"type":406,"value":690},{"type":400,"tag":436,"props":9208,"children":9209},{"style":466},[9210],{"type":406,"value":695},{"type":400,"tag":436,"props":9212,"children":9213},{"style":449},[9214],{"type":406,"value":463},{"type":400,"tag":436,"props":9216,"children":9217},{"style":455},[9218],{"type":406,"value":505},{"type":400,"tag":436,"props":9220,"children":9221},{"style":449},[9222],{"type":406,"value":463},{"type":400,"tag":436,"props":9224,"children":9225},{"style":670},[9226],{"type":406,"value":720},{"type":400,"tag":436,"props":9228,"children":9229},{"style":723},[9230],{"type":406,"value":6728},{"type":400,"tag":436,"props":9232,"children":9233},{"class":438,"line":1375},[9234,9238,9242,9246,9250,9255,9259,9263,9267,9271,9275,9280],{"type":400,"tag":436,"props":9235,"children":9236},{"style":670},[9237],{"type":406,"value":5019},{"type":400,"tag":436,"props":9239,"children":9240},{"style":676},[9241],{"type":406,"value":679},{"type":400,"tag":436,"props":9243,"children":9244},{"style":682},[9245],{"type":406,"value":1390},{"type":400,"tag":436,"props":9247,"children":9248},{"style":670},[9249],{"type":406,"value":690},{"type":400,"tag":436,"props":9251,"children":9252},{"style":466},[9253],{"type":406,"value":9254},"+new",{"type":400,"tag":436,"props":9256,"children":9257},{"style":682},[9258],{"type":406,"value":4110},{"type":400,"tag":436,"props":9260,"children":9261},{"style":670},[9262],{"type":406,"value":690},{"type":400,"tag":436,"props":9264,"children":9265},{"style":449},[9266],{"type":406,"value":463},{"type":400,"tag":436,"props":9268,"children":9269},{"style":455},[9270],{"type":406,"value":505},{"type":400,"tag":436,"props":9272,"children":9273},{"style":449},[9274],{"type":406,"value":463},{"type":400,"tag":436,"props":9276,"children":9277},{"style":670},[9278],{"type":406,"value":9279},")) ",{"type":400,"tag":436,"props":9281,"children":9282},{"style":723},[9283],{"type":406,"value":9284},"// 0\n",{"type":400,"tag":414,"props":9286,"children":9287},{},[9288],{"type":406,"value":9289},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":400,"tag":425,"props":9291,"children":9293},{"className":658,"code":9292,"language":660,"meta":394,"style":394},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9294],{"type":400,"tag":432,"props":9295,"children":9296},{"__ignoreMap":394},[9297,9334,9366,9398],{"type":400,"tag":436,"props":9298,"children":9299},{"class":438,"line":439},[9300,9304,9309,9313,9317,9321,9325,9330],{"type":400,"tag":436,"props":9301,"children":9302},{"style":993},[9303],{"type":406,"value":5794},{"type":400,"tag":436,"props":9305,"children":9306},{"style":1429},[9307],{"type":406,"value":9308}," f",{"type":400,"tag":436,"props":9310,"children":9311},{"style":466},[9312],{"type":406,"value":1359},{"type":400,"tag":436,"props":9314,"children":9315},{"style":466},[9316],{"type":406,"value":2838},{"type":400,"tag":436,"props":9318,"children":9319},{"style":682},[9320],{"type":406,"value":4110},{"type":400,"tag":436,"props":9322,"children":9323},{"style":670},[9324],{"type":406,"value":690},{"type":400,"tag":436,"props":9326,"children":9327},{"style":832},[9328],{"type":406,"value":9329},"false",{"type":400,"tag":436,"props":9331,"children":9332},{"style":670},[9333],{"type":406,"value":1413},{"type":400,"tag":436,"props":9335,"children":9336},{"class":438,"line":729},[9337,9341,9345,9349,9353,9357,9362],{"type":400,"tag":436,"props":9338,"children":9339},{"style":670},[9340],{"type":406,"value":5019},{"type":400,"tag":436,"props":9342,"children":9343},{"style":676},[9344],{"type":406,"value":679},{"type":400,"tag":436,"props":9346,"children":9347},{"style":682},[9348],{"type":406,"value":1390},{"type":400,"tag":436,"props":9350,"children":9351},{"style":670},[9352],{"type":406,"value":690},{"type":400,"tag":436,"props":9354,"children":9355},{"style":466},[9356],{"type":406,"value":695},{"type":400,"tag":436,"props":9358,"children":9359},{"style":670},[9360],{"type":406,"value":9361},"f) ",{"type":400,"tag":436,"props":9363,"children":9364},{"style":723},[9365],{"type":406,"value":9284},{"type":400,"tag":436,"props":9367,"children":9368},{"class":438,"line":1375},[9369,9373,9377,9381,9385,9390,9394],{"type":400,"tag":436,"props":9370,"children":9371},{"style":670},[9372],{"type":406,"value":5019},{"type":400,"tag":436,"props":9374,"children":9375},{"style":676},[9376],{"type":406,"value":679},{"type":400,"tag":436,"props":9378,"children":9379},{"style":682},[9380],{"type":406,"value":1390},{"type":400,"tag":436,"props":9382,"children":9383},{"style":670},[9384],{"type":406,"value":690},{"type":400,"tag":436,"props":9386,"children":9387},{"style":466},[9388],{"type":406,"value":9389},"!!",{"type":400,"tag":436,"props":9391,"children":9392},{"style":670},[9393],{"type":406,"value":9361},{"type":400,"tag":436,"props":9395,"children":9396},{"style":723},[9397],{"type":406,"value":770},{"type":400,"tag":436,"props":9399,"children":9400},{"class":438,"line":1416},[9401,9405,9409,9413,9417,9421,9426],{"type":400,"tag":436,"props":9402,"children":9403},{"style":670},[9404],{"type":406,"value":5019},{"type":400,"tag":436,"props":9406,"children":9407},{"style":676},[9408],{"type":406,"value":679},{"type":400,"tag":436,"props":9410,"children":9411},{"style":682},[9412],{"type":406,"value":1390},{"type":400,"tag":436,"props":9414,"children":9415},{"style":670},[9416],{"type":406,"value":690},{"type":400,"tag":436,"props":9418,"children":9419},{"style":682},[9420],{"type":406,"value":795},{"type":400,"tag":436,"props":9422,"children":9423},{"style":670},[9424],{"type":406,"value":9425},"(f)) ",{"type":400,"tag":436,"props":9427,"children":9428},{"style":723},[9429],{"type":406,"value":770},{"type":400,"tag":414,"props":9431,"children":9432},{},[9433],{"type":406,"value":9434},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":400,"tag":408,"props":9436,"children":9438},{"id":9437},"值类型的转换",[9439],{"type":406,"value":9437},{"type":400,"tag":414,"props":9441,"children":9442},{},[9443],{"type":406,"value":9444},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":400,"tag":414,"props":9446,"children":9447},{},[9448],{"type":406,"value":9449},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":400,"tag":414,"props":9451,"children":9452},{},[9453],{"type":406,"value":9454},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":400,"tag":425,"props":9456,"children":9458},{"className":658,"code":9457,"language":660,"meta":394,"style":394},"parseInt(1e35) // 1\n",[9459],{"type":400,"tag":432,"props":9460,"children":9461},{"__ignoreMap":394},[9462],{"type":400,"tag":436,"props":9463,"children":9464},{"class":438,"line":439},[9465,9470,9474,9479,9483],{"type":400,"tag":436,"props":9466,"children":9467},{"style":682},[9468],{"type":406,"value":9469},"parseInt",{"type":400,"tag":436,"props":9471,"children":9472},{"style":670},[9473],{"type":406,"value":690},{"type":400,"tag":436,"props":9475,"children":9476},{"style":698},[9477],{"type":406,"value":9478},"1e35",{"type":400,"tag":436,"props":9480,"children":9481},{"style":670},[9482],{"type":406,"value":720},{"type":400,"tag":436,"props":9484,"children":9485},{"style":723},[9486],{"type":406,"value":6728},{"type":400,"tag":414,"props":9488,"children":9489},{},[9490],{"type":406,"value":9491},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":400,"tag":425,"props":9493,"children":9495},{"className":658,"code":9494,"language":660,"meta":394,"style":394},"String() // ''\nString(undefined) // undefined\n",[9496],{"type":400,"tag":432,"props":9497,"children":9498},{"__ignoreMap":394},[9499,9515],{"type":400,"tag":436,"props":9500,"children":9501},{"class":438,"line":439},[9502,9506,9510],{"type":400,"tag":436,"props":9503,"children":9504},{"style":682},[9505],{"type":406,"value":9153},{"type":400,"tag":436,"props":9507,"children":9508},{"style":670},[9509],{"type":406,"value":824},{"type":400,"tag":436,"props":9511,"children":9512},{"style":723},[9513],{"type":406,"value":9514},"// ''\n",{"type":400,"tag":436,"props":9516,"children":9517},{"class":438,"line":729},[9518,9522,9526,9530,9534],{"type":400,"tag":436,"props":9519,"children":9520},{"style":682},[9521],{"type":406,"value":9153},{"type":400,"tag":436,"props":9523,"children":9524},{"style":670},[9525],{"type":406,"value":690},{"type":400,"tag":436,"props":9527,"children":9528},{"style":749},[9529],{"type":406,"value":4552},{"type":400,"tag":436,"props":9531,"children":9532},{"style":670},[9533],{"type":406,"value":720},{"type":400,"tag":436,"props":9535,"children":9536},{"style":723},[9537],{"type":406,"value":959},{"type":400,"tag":408,"props":9539,"children":9541},{"id":9540},"对象与数组的动态特性",[9542],{"type":406,"value":9540},{"type":400,"tag":414,"props":9544,"children":9545},{},[9546],{"type":406,"value":9547},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":400,"tag":425,"props":9549,"children":9551},{"className":658,"code":9550,"language":660,"meta":394,"style":394},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9552],{"type":400,"tag":432,"props":9553,"children":9554},{"__ignoreMap":394},[9555,9591,9616,9639,9663],{"type":400,"tag":436,"props":9556,"children":9557},{"class":438,"line":439},[9558,9562,9566,9570,9574,9579,9583,9587],{"type":400,"tag":436,"props":9559,"children":9560},{"style":993},[9561],{"type":406,"value":5794},{"type":400,"tag":436,"props":9563,"children":9564},{"style":1429},[9565],{"type":406,"value":3221},{"type":400,"tag":436,"props":9567,"children":9568},{"style":466},[9569],{"type":406,"value":1359},{"type":400,"tag":436,"props":9571,"children":9572},{"style":466},[9573],{"type":406,"value":2838},{"type":400,"tag":436,"props":9575,"children":9576},{"style":682},[9577],{"type":406,"value":9578}," Array",{"type":400,"tag":436,"props":9580,"children":9581},{"style":670},[9582],{"type":406,"value":690},{"type":400,"tag":436,"props":9584,"children":9585},{"style":698},[9586],{"type":406,"value":8103},{"type":400,"tag":436,"props":9588,"children":9589},{"style":670},[9590],{"type":406,"value":1413},{"type":400,"tag":436,"props":9592,"children":9593},{"class":438,"line":729},[9594,9599,9603,9608,9612],{"type":400,"tag":436,"props":9595,"children":9596},{"style":670},[9597],{"type":406,"value":9598},"a[",{"type":400,"tag":436,"props":9600,"children":9601},{"style":698},[9602],{"type":406,"value":505},{"type":400,"tag":436,"props":9604,"children":9605},{"style":670},[9606],{"type":406,"value":9607},"] ",{"type":400,"tag":436,"props":9609,"children":9610},{"style":466},[9611],{"type":406,"value":1870},{"type":400,"tag":436,"props":9613,"children":9614},{"style":698},[9615],{"type":406,"value":6782},{"type":400,"tag":436,"props":9617,"children":9618},{"class":438,"line":1375},[9619,9623,9627,9631,9635],{"type":400,"tag":436,"props":9620,"children":9621},{"style":670},[9622],{"type":406,"value":9598},{"type":400,"tag":436,"props":9624,"children":9625},{"style":698},[9626],{"type":406,"value":6305},{"type":400,"tag":436,"props":9628,"children":9629},{"style":670},[9630],{"type":406,"value":9607},{"type":400,"tag":436,"props":9632,"children":9633},{"style":466},[9634],{"type":406,"value":1870},{"type":400,"tag":436,"props":9636,"children":9637},{"style":698},[9638],{"type":406,"value":6782},{"type":400,"tag":436,"props":9640,"children":9641},{"class":438,"line":1416},[9642,9646,9651,9655,9659],{"type":400,"tag":436,"props":9643,"children":9644},{"style":670},[9645],{"type":406,"value":9598},{"type":400,"tag":436,"props":9647,"children":9648},{"style":698},[9649],{"type":406,"value":9650},"7",{"type":400,"tag":436,"props":9652,"children":9653},{"style":670},[9654],{"type":406,"value":9607},{"type":400,"tag":436,"props":9656,"children":9657},{"style":466},[9658],{"type":406,"value":1870},{"type":400,"tag":436,"props":9660,"children":9661},{"style":698},[9662],{"type":406,"value":6782},{"type":400,"tag":436,"props":9664,"children":9665},{"class":438,"line":1425},[9666,9670,9674,9679,9683,9687,9691,9696,9700,9705,9709,9714,9719,9723],{"type":400,"tag":436,"props":9667,"children":9668},{"style":670},[9669],{"type":406,"value":497},{"type":400,"tag":436,"props":9671,"children":9672},{"style":676},[9673],{"type":406,"value":679},{"type":400,"tag":436,"props":9675,"children":9676},{"style":682},[9677],{"type":406,"value":9678},"sort",{"type":400,"tag":436,"props":9680,"children":9681},{"style":670},[9682],{"type":406,"value":690},{"type":400,"tag":436,"props":9684,"children":9685},{"style":676},[9686],{"type":406,"value":1044},{"type":400,"tag":436,"props":9688,"children":9689},{"style":993},[9690],{"type":406,"value":5730},{"type":400,"tag":436,"props":9692,"children":9693},{"style":670},[9694],{"type":406,"value":9695}," Math",{"type":400,"tag":436,"props":9697,"children":9698},{"style":676},[9699],{"type":406,"value":679},{"type":400,"tag":436,"props":9701,"children":9702},{"style":682},[9703],{"type":406,"value":9704},"random",{"type":400,"tag":436,"props":9706,"children":9707},{"style":670},[9708],{"type":406,"value":824},{"type":400,"tag":436,"props":9710,"children":9711},{"style":466},[9712],{"type":406,"value":9713},"-",{"type":400,"tag":436,"props":9715,"children":9716},{"style":698},[9717],{"type":406,"value":9718}," 0.5",{"type":400,"tag":436,"props":9720,"children":9721},{"style":670},[9722],{"type":406,"value":720},{"type":400,"tag":436,"props":9724,"children":9725},{"style":723},[9726],{"type":406,"value":9727},"// [1, 1, 1, empty x 7]\n",{"type":400,"tag":414,"props":9729,"children":9730},{},[9731],{"type":406,"value":9732},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":400,"tag":414,"props":9734,"children":9735},{},[9736],{"type":406,"value":9737},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":400,"tag":408,"props":9739,"children":9741},{"id":9740},"重写",[9742],{"type":406,"value":9740},{"type":400,"tag":414,"props":9744,"children":9745},{},[9746],{"type":406,"value":9747},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":400,"tag":414,"props":9749,"children":9750},{},[9751],{"type":406,"value":9752},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":400,"tag":414,"props":9754,"children":9755},{},[9756],{"type":406,"value":9757},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":400,"tag":425,"props":9759,"children":9761},{"className":658,"code":9760,"language":660,"meta":394,"style":394},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9762],{"type":400,"tag":432,"props":9763,"children":9764},{"__ignoreMap":394},[9765,9806,9821,9842,9859,9866,9877,9900,9932,9967,10007,10047,10055,10111,10126,10174,10181,10188,10199,10222],{"type":400,"tag":436,"props":9766,"children":9767},{"class":438,"line":439},[9768,9772,9776,9780,9784,9788,9793,9797,9802],{"type":400,"tag":436,"props":9769,"children":9770},{"style":993},[9771],{"type":406,"value":5794},{"type":400,"tag":436,"props":9773,"children":9774},{"style":1429},[9775],{"type":406,"value":3221},{"type":400,"tag":436,"props":9777,"children":9778},{"style":466},[9779],{"type":406,"value":1359},{"type":400,"tag":436,"props":9781,"children":9782},{"style":670},[9783],{"type":406,"value":4110},{"type":400,"tag":436,"props":9785,"children":9786},{"style":676},[9787],{"type":406,"value":679},{"type":400,"tag":436,"props":9789,"children":9790},{"style":682},[9791],{"type":406,"value":9792},"defineProperties",{"type":400,"tag":436,"props":9794,"children":9795},{"style":670},[9796],{"type":406,"value":690},{"type":400,"tag":436,"props":9798,"children":9799},{"style":676},[9800],{"type":406,"value":9801},"{},",{"type":400,"tag":436,"props":9803,"children":9804},{"style":676},[9805],{"type":406,"value":1336},{"type":400,"tag":436,"props":9807,"children":9808},{"class":438,"line":729},[9809,9813,9817],{"type":400,"tag":436,"props":9810,"children":9811},{"style":1393},[9812],{"type":406,"value":2769},{"type":400,"tag":436,"props":9814,"children":9815},{"style":676},[9816],{"type":406,"value":1855},{"type":400,"tag":436,"props":9818,"children":9819},{"style":676},[9820],{"type":406,"value":1336},{"type":400,"tag":436,"props":9822,"children":9823},{"class":438,"line":1375},[9824,9829,9833,9838],{"type":400,"tag":436,"props":9825,"children":9826},{"style":1393},[9827],{"type":406,"value":9828},"    value",{"type":400,"tag":436,"props":9830,"children":9831},{"style":676},[9832],{"type":406,"value":1855},{"type":400,"tag":436,"props":9834,"children":9835},{"style":698},[9836],{"type":406,"value":9837}," 100",{"type":400,"tag":436,"props":9839,"children":9840},{"style":676},[9841],{"type":406,"value":7238},{"type":400,"tag":436,"props":9843,"children":9844},{"class":438,"line":1416},[9845,9850,9854],{"type":400,"tag":436,"props":9846,"children":9847},{"style":1393},[9848],{"type":406,"value":9849},"    configurable",{"type":400,"tag":436,"props":9851,"children":9852},{"style":676},[9853],{"type":406,"value":1855},{"type":400,"tag":436,"props":9855,"children":9856},{"style":832},[9857],{"type":406,"value":9858}," true\n",{"type":400,"tag":436,"props":9860,"children":9861},{"class":438,"line":1425},[9862],{"type":400,"tag":436,"props":9863,"children":9864},{"style":676},[9865],{"type":406,"value":2075},{"type":400,"tag":436,"props":9867,"children":9868},{"class":438,"line":1460},[9869,9873],{"type":400,"tag":436,"props":9870,"children":9871},{"style":676},[9872],{"type":406,"value":1669},{"type":400,"tag":436,"props":9874,"children":9875},{"style":670},[9876],{"type":406,"value":1413},{"type":400,"tag":436,"props":9878,"children":9879},{"class":438,"line":1497},[9880,9884,9888,9892,9896],{"type":400,"tag":436,"props":9881,"children":9882},{"style":670},[9883],{"type":406,"value":497},{"type":400,"tag":436,"props":9885,"children":9886},{"style":676},[9887],{"type":406,"value":679},{"type":400,"tag":436,"props":9889,"children":9890},{"style":670},[9891],{"type":406,"value":4149},{"type":400,"tag":436,"props":9893,"children":9894},{"style":466},[9895],{"type":406,"value":1870},{"type":400,"tag":436,"props":9897,"children":9898},{"style":698},[9899],{"type":406,"value":6782},{"type":400,"tag":436,"props":9901,"children":9902},{"class":438,"line":1505},[9903,9907,9911,9915,9919,9923,9927],{"type":400,"tag":436,"props":9904,"children":9905},{"style":670},[9906],{"type":406,"value":5019},{"type":400,"tag":436,"props":9908,"children":9909},{"style":676},[9910],{"type":406,"value":679},{"type":400,"tag":436,"props":9912,"children":9913},{"style":682},[9914],{"type":406,"value":1390},{"type":400,"tag":436,"props":9916,"children":9917},{"style":670},[9918],{"type":406,"value":7325},{"type":400,"tag":436,"props":9920,"children":9921},{"style":676},[9922],{"type":406,"value":679},{"type":400,"tag":436,"props":9924,"children":9925},{"style":670},[9926],{"type":406,"value":6033},{"type":400,"tag":436,"props":9928,"children":9929},{"style":723},[9930],{"type":406,"value":9931},"// 100\n",{"type":400,"tag":436,"props":9933,"children":9934},{"class":438,"line":1532},[9935,9939,9943,9947,9951,9955,9959,9963],{"type":400,"tag":436,"props":9936,"children":9937},{"style":993},[9938],{"type":406,"value":5794},{"type":400,"tag":436,"props":9940,"children":9941},{"style":1429},[9942],{"type":406,"value":7039},{"type":400,"tag":436,"props":9944,"children":9945},{"style":466},[9946],{"type":406,"value":1359},{"type":400,"tag":436,"props":9948,"children":9949},{"style":466},[9950],{"type":406,"value":2838},{"type":400,"tag":436,"props":9952,"children":9953},{"style":682},[9954],{"type":406,"value":5640},{"type":400,"tag":436,"props":9956,"children":9957},{"style":670},[9958],{"type":406,"value":7325},{"type":400,"tag":436,"props":9960,"children":9961},{"style":676},[9962],{"type":406,"value":706},{"type":400,"tag":436,"props":9964,"children":9965},{"style":676},[9966],{"type":406,"value":1336},{"type":400,"tag":436,"props":9968,"children":9969},{"class":438,"line":2108},[9970,9974,9978,9982,9986,9991,9995,9999,10003],{"type":400,"tag":436,"props":9971,"children":9972},{"style":2655},[9973],{"type":406,"value":2652},{"type":400,"tag":436,"props":9975,"children":9976},{"style":676},[9977],{"type":406,"value":1928},{"type":400,"tag":436,"props":9979,"children":9980},{"style":1622},[9981],{"type":406,"value":5658},{"type":400,"tag":436,"props":9983,"children":9984},{"style":676},[9985],{"type":406,"value":706},{"type":400,"tag":436,"props":9987,"children":9988},{"style":1622},[9989],{"type":406,"value":9990}," key",{"type":400,"tag":436,"props":9992,"children":9993},{"style":676},[9994],{"type":406,"value":706},{"type":400,"tag":436,"props":9996,"children":9997},{"style":1622},[9998],{"type":406,"value":8730},{"type":400,"tag":436,"props":10000,"children":10001},{"style":676},[10002],{"type":406,"value":1630},{"type":400,"tag":436,"props":10004,"children":10005},{"style":676},[10006],{"type":406,"value":1336},{"type":400,"tag":436,"props":10008,"children":10009},{"class":438,"line":2168},[10010,10014,10018,10023,10027,10031,10035,10039,10043],{"type":400,"tag":436,"props":10011,"children":10012},{"style":1699},[10013],{"type":406,"value":1989},{"type":400,"tag":436,"props":10015,"children":10016},{"style":1393},[10017],{"type":406,"value":1928},{"type":400,"tag":436,"props":10019,"children":10020},{"style":670},[10021],{"type":406,"value":10022},"key",{"type":400,"tag":436,"props":10024,"children":10025},{"style":466},[10026],{"type":406,"value":2002},{"type":400,"tag":436,"props":10028,"children":10029},{"style":449},[10030],{"type":406,"value":452},{"type":400,"tag":436,"props":10032,"children":10033},{"style":455},[10034],{"type":406,"value":1721},{"type":400,"tag":436,"props":10036,"children":10037},{"style":449},[10038],{"type":406,"value":463},{"type":400,"tag":436,"props":10040,"children":10041},{"style":1393},[10042],{"type":406,"value":720},{"type":400,"tag":436,"props":10044,"children":10045},{"style":676},[10046],{"type":406,"value":1745},{"type":400,"tag":436,"props":10048,"children":10049},{"class":438,"line":2229},[10050],{"type":400,"tag":436,"props":10051,"children":10052},{"style":723},[10053],{"type":406,"value":10054},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":400,"tag":436,"props":10056,"children":10057},{"class":438,"line":2270},[10058,10062,10066,10070,10075,10079,10083,10087,10091,10095,10099,10103,10107],{"type":400,"tag":436,"props":10059,"children":10060},{"style":1699},[10061],{"type":406,"value":5907},{"type":400,"tag":436,"props":10063,"children":10064},{"style":670},[10065],{"type":406,"value":5948},{"type":400,"tag":436,"props":10067,"children":10068},{"style":676},[10069],{"type":406,"value":679},{"type":400,"tag":436,"props":10071,"children":10072},{"style":682},[10073],{"type":406,"value":10074},"defineProperty",{"type":400,"tag":436,"props":10076,"children":10077},{"style":1393},[10078],{"type":406,"value":690},{"type":400,"tag":436,"props":10080,"children":10081},{"style":670},[10082],{"type":406,"value":5658},{"type":400,"tag":436,"props":10084,"children":10085},{"style":676},[10086],{"type":406,"value":706},{"type":400,"tag":436,"props":10088,"children":10089},{"style":670},[10090],{"type":406,"value":9990},{"type":400,"tag":436,"props":10092,"children":10093},{"style":676},[10094],{"type":406,"value":706},{"type":400,"tag":436,"props":10096,"children":10097},{"style":676},[10098],{"type":406,"value":1707},{"type":400,"tag":436,"props":10100,"children":10101},{"style":670},[10102],{"type":406,"value":8730},{"type":400,"tag":436,"props":10104,"children":10105},{"style":676},[10106],{"type":406,"value":1730},{"type":400,"tag":436,"props":10108,"children":10109},{"style":1393},[10110],{"type":406,"value":1413},{"type":400,"tag":436,"props":10112,"children":10113},{"class":438,"line":2311},[10114,10118,10122],{"type":400,"tag":436,"props":10115,"children":10116},{"style":676},[10117],{"type":406,"value":5927},{"type":400,"tag":436,"props":10119,"children":10120},{"style":1699},[10121],{"type":406,"value":5932},{"type":400,"tag":436,"props":10123,"children":10124},{"style":676},[10125],{"type":406,"value":1336},{"type":400,"tag":436,"props":10127,"children":10128},{"class":438,"line":2320},[10129,10133,10137,10141,10146,10150,10154,10158,10162,10166,10170],{"type":400,"tag":436,"props":10130,"children":10131},{"style":1699},[10132],{"type":406,"value":5907},{"type":400,"tag":436,"props":10134,"children":10135},{"style":670},[10136],{"type":406,"value":5948},{"type":400,"tag":436,"props":10138,"children":10139},{"style":676},[10140],{"type":406,"value":679},{"type":400,"tag":436,"props":10142,"children":10143},{"style":682},[10144],{"type":406,"value":10145},"set",{"type":400,"tag":436,"props":10147,"children":10148},{"style":1393},[10149],{"type":406,"value":690},{"type":400,"tag":436,"props":10151,"children":10152},{"style":670},[10153],{"type":406,"value":5658},{"type":400,"tag":436,"props":10155,"children":10156},{"style":676},[10157],{"type":406,"value":706},{"type":400,"tag":436,"props":10159,"children":10160},{"style":670},[10161],{"type":406,"value":9990},{"type":400,"tag":436,"props":10163,"children":10164},{"style":676},[10165],{"type":406,"value":706},{"type":400,"tag":436,"props":10167,"children":10168},{"style":670},[10169],{"type":406,"value":8730},{"type":400,"tag":436,"props":10171,"children":10172},{"style":1393},[10173],{"type":406,"value":1413},{"type":400,"tag":436,"props":10175,"children":10176},{"class":438,"line":2328},[10177],{"type":400,"tag":436,"props":10178,"children":10179},{"style":676},[10180],{"type":406,"value":2317},{"type":400,"tag":436,"props":10182,"children":10183},{"class":438,"line":6002},[10184],{"type":400,"tag":436,"props":10185,"children":10186},{"style":676},[10187],{"type":406,"value":2075},{"type":400,"tag":436,"props":10189,"children":10190},{"class":438,"line":8519},[10191,10195],{"type":400,"tag":436,"props":10192,"children":10193},{"style":676},[10194],{"type":406,"value":1669},{"type":400,"tag":436,"props":10196,"children":10197},{"style":670},[10198],{"type":406,"value":1413},{"type":400,"tag":436,"props":10200,"children":10201},{"class":438,"line":8527},[10202,10206,10210,10214,10218],{"type":400,"tag":436,"props":10203,"children":10204},{"style":670},[10205],{"type":406,"value":1354},{"type":400,"tag":436,"props":10207,"children":10208},{"style":676},[10209],{"type":406,"value":679},{"type":400,"tag":436,"props":10211,"children":10212},{"style":670},[10213],{"type":406,"value":4149},{"type":400,"tag":436,"props":10215,"children":10216},{"style":466},[10217],{"type":406,"value":1870},{"type":400,"tag":436,"props":10219,"children":10220},{"style":698},[10221],{"type":406,"value":6782},{"type":400,"tag":436,"props":10223,"children":10224},{"class":438,"line":8535},[10225,10229,10233,10237,10242,10246,10250],{"type":400,"tag":436,"props":10226,"children":10227},{"style":670},[10228],{"type":406,"value":5019},{"type":400,"tag":436,"props":10230,"children":10231},{"style":676},[10232],{"type":406,"value":679},{"type":400,"tag":436,"props":10234,"children":10235},{"style":682},[10236],{"type":406,"value":1390},{"type":400,"tag":436,"props":10238,"children":10239},{"style":670},[10240],{"type":406,"value":10241},"(b",{"type":400,"tag":436,"props":10243,"children":10244},{"style":676},[10245],{"type":406,"value":679},{"type":400,"tag":436,"props":10247,"children":10248},{"style":670},[10249],{"type":406,"value":6033},{"type":400,"tag":436,"props":10251,"children":10252},{"style":723},[10253],{"type":406,"value":6728},{"type":400,"tag":414,"props":10255,"children":10256},{},[10257],{"type":406,"value":10258},"自增自减运算符会隐式的转换操作数的类型。",{"type":400,"tag":414,"props":10260,"children":10261},{},[10262],{"type":406,"value":10263},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":400,"tag":425,"props":10265,"children":10267},{"className":658,"code":10266,"language":660,"meta":394,"style":394},"class a extends a {}\n",[10268],{"type":400,"tag":432,"props":10269,"children":10270},{"__ignoreMap":394},[10271],{"type":400,"tag":436,"props":10272,"children":10273},{"class":438,"line":439},[10274,10278,10282,10286,10290],{"type":400,"tag":436,"props":10275,"children":10276},{"style":993},[10277],{"type":406,"value":3542},{"type":400,"tag":436,"props":10279,"children":10280},{"style":3545},[10281],{"type":406,"value":3221},{"type":400,"tag":436,"props":10283,"children":10284},{"style":3565},[10285],{"type":406,"value":3568},{"type":400,"tag":436,"props":10287,"children":10288},{"style":3571},[10289],{"type":406,"value":3221},{"type":400,"tag":436,"props":10291,"children":10292},{"style":676},[10293],{"type":406,"value":3129},{"type":400,"tag":414,"props":10295,"children":10296},{},[10297],{"type":406,"value":10298},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":400,"tag":414,"props":10300,"children":10301},{},[10302],{"type":406,"value":10303},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":400,"tag":414,"props":10305,"children":10306},{},[10307],{"type":406,"value":10308},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":400,"tag":425,"props":10310,"children":10312},{"className":658,"code":10311,"language":660,"meta":394,"style":394},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10313],{"type":400,"tag":432,"props":10314,"children":10315},{"__ignoreMap":394},[10316,10369,10382,10389],{"type":400,"tag":436,"props":10317,"children":10318},{"class":438,"line":439},[10319,10323,10328,10332,10336,10341,10345,10349,10353,10357,10361,10365],{"type":400,"tag":436,"props":10320,"children":10321},{"style":1699},[10322],{"type":406,"value":8770},{"type":400,"tag":436,"props":10324,"children":10325},{"style":670},[10326],{"type":406,"value":10327}," (a ",{"type":400,"tag":436,"props":10329,"children":10330},{"style":466},[10331],{"type":406,"value":1870},{"type":400,"tag":436,"props":10333,"children":10334},{"style":676},[10335],{"type":406,"value":1707},{"type":400,"tag":436,"props":10337,"children":10338},{"style":1393},[10339],{"type":406,"value":10340}," undefined",{"type":400,"tag":436,"props":10342,"children":10343},{"style":676},[10344],{"type":406,"value":1855},{"type":400,"tag":436,"props":10346,"children":10347},{"style":449},[10348],{"type":406,"value":452},{"type":400,"tag":436,"props":10350,"children":10351},{"style":455},[10352],{"type":406,"value":1721},{"type":400,"tag":436,"props":10354,"children":10355},{"style":449},[10356],{"type":406,"value":463},{"type":400,"tag":436,"props":10358,"children":10359},{"style":676},[10360],{"type":406,"value":1730},{"type":400,"tag":436,"props":10362,"children":10363},{"style":670},[10364],{"type":406,"value":720},{"type":400,"tag":436,"props":10366,"children":10367},{"style":676},[10368],{"type":406,"value":1745},{"type":400,"tag":436,"props":10370,"children":10371},{"class":438,"line":729},[10372,10377],{"type":400,"tag":436,"props":10373,"children":10374},{"style":466},[10375],{"type":406,"value":10376},"  delete",{"type":400,"tag":436,"props":10378,"children":10379},{"style":749},[10380],{"type":406,"value":10381}," undefined\n",{"type":400,"tag":436,"props":10383,"children":10384},{"class":438,"line":1375},[10385],{"type":400,"tag":436,"props":10386,"children":10387},{"style":676},[10388],{"type":406,"value":1422},{"type":400,"tag":436,"props":10390,"children":10391},{"class":438,"line":1416},[10392,10396,10400,10404,10409],{"type":400,"tag":436,"props":10393,"children":10394},{"style":670},[10395],{"type":406,"value":5019},{"type":400,"tag":436,"props":10397,"children":10398},{"style":676},[10399],{"type":406,"value":679},{"type":400,"tag":436,"props":10401,"children":10402},{"style":682},[10403],{"type":406,"value":1390},{"type":400,"tag":436,"props":10405,"children":10406},{"style":670},[10407],{"type":406,"value":10408},"(a) ",{"type":400,"tag":436,"props":10410,"children":10411},{"style":723},[10412],{"type":406,"value":7501},{"type":400,"tag":408,"props":10414,"children":10416},{"id":10415},"动态绑定",[10417],{"type":406,"value":10415},{"type":400,"tag":414,"props":10419,"children":10420},{},[10421],{"type":406,"value":10422},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":400,"tag":425,"props":10424,"children":10426},{"className":658,"code":10425,"language":660,"meta":394,"style":394},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10427],{"type":400,"tag":432,"props":10428,"children":10429},{"__ignoreMap":394},[10430,10450,10470,10498,10506,10535,10543,10572,10580,10626,10634,10675,10682],{"type":400,"tag":436,"props":10431,"children":10432},{"class":438,"line":439},[10433,10437,10442,10446],{"type":400,"tag":436,"props":10434,"children":10435},{"style":993},[10436],{"type":406,"value":1321},{"type":400,"tag":436,"props":10438,"children":10439},{"style":682},[10440],{"type":406,"value":10441}," indirect",{"type":400,"tag":436,"props":10443,"children":10444},{"style":676},[10445],{"type":406,"value":1044},{"type":400,"tag":436,"props":10447,"children":10448},{"style":676},[10449],{"type":406,"value":1336},{"type":400,"tag":436,"props":10451,"children":10452},{"class":438,"line":729},[10453,10457,10461,10465],{"type":400,"tag":436,"props":10454,"children":10455},{"style":993},[10456],{"type":406,"value":3775},{"type":400,"tag":436,"props":10458,"children":10459},{"style":1429},[10460],{"type":406,"value":7827},{"type":400,"tag":436,"props":10462,"children":10463},{"style":466},[10464],{"type":406,"value":1359},{"type":400,"tag":436,"props":10466,"children":10467},{"style":670},[10468],{"type":406,"value":10469}," eval\n",{"type":400,"tag":436,"props":10471,"children":10472},{"class":438,"line":1375},[10473,10477,10482,10486,10490,10494],{"type":400,"tag":436,"props":10474,"children":10475},{"style":993},[10476],{"type":406,"value":3775},{"type":400,"tag":436,"props":10478,"children":10479},{"style":7824},[10480],{"type":406,"value":10481}," getEval",{"type":400,"tag":436,"props":10483,"children":10484},{"style":466},[10485],{"type":406,"value":1359},{"type":400,"tag":436,"props":10487,"children":10488},{"style":676},[10489],{"type":406,"value":1331},{"type":400,"tag":436,"props":10491,"children":10492},{"style":993},[10493],{"type":406,"value":5730},{"type":400,"tag":436,"props":10495,"children":10496},{"style":670},[10497],{"type":406,"value":10469},{"type":400,"tag":436,"props":10499,"children":10500},{"class":438,"line":1416},[10501],{"type":400,"tag":436,"props":10502,"children":10503},{"style":723},[10504],{"type":406,"value":10505},"  // 单值表达式\n",{"type":400,"tag":436,"props":10507,"children":10508},{"class":438,"line":1425},[10509,10514,10518,10522,10527,10531],{"type":400,"tag":436,"props":10510,"children":10511},{"style":682},[10512],{"type":406,"value":10513},"  exec",{"type":400,"tag":436,"props":10515,"children":10516},{"style":1393},[10517],{"type":406,"value":690},{"type":400,"tag":436,"props":10519,"children":10520},{"style":449},[10521],{"type":406,"value":463},{"type":400,"tag":436,"props":10523,"children":10524},{"style":455},[10525],{"type":406,"value":10526},"console.log(this === globalThis)",{"type":400,"tag":436,"props":10528,"children":10529},{"style":449},[10530],{"type":406,"value":463},{"type":400,"tag":436,"props":10532,"children":10533},{"style":1393},[10534],{"type":406,"value":1413},{"type":400,"tag":436,"props":10536,"children":10537},{"class":438,"line":1460},[10538],{"type":400,"tag":436,"props":10539,"children":10540},{"style":723},[10541],{"type":406,"value":10542},"  // 函数返回\n",{"type":400,"tag":436,"props":10544,"children":10545},{"class":438,"line":1497},[10546,10551,10556,10560,10564,10568],{"type":400,"tag":436,"props":10547,"children":10548},{"style":682},[10549],{"type":406,"value":10550},"  getEval",{"type":400,"tag":436,"props":10552,"children":10553},{"style":1393},[10554],{"type":406,"value":10555},"()(",{"type":400,"tag":436,"props":10557,"children":10558},{"style":449},[10559],{"type":406,"value":463},{"type":400,"tag":436,"props":10561,"children":10562},{"style":455},[10563],{"type":406,"value":10526},{"type":400,"tag":436,"props":10565,"children":10566},{"style":449},[10567],{"type":406,"value":463},{"type":400,"tag":436,"props":10569,"children":10570},{"style":1393},[10571],{"type":406,"value":1413},{"type":400,"tag":436,"props":10573,"children":10574},{"class":438,"line":1505},[10575],{"type":400,"tag":436,"props":10576,"children":10577},{"style":723},[10578],{"type":406,"value":10579},"  // 携带逗号运算符的分组运算符\n",{"type":400,"tag":436,"props":10581,"children":10582},{"class":438,"line":1532},[10583,10588,10592,10596,10600,10605,10610,10614,10618,10622],{"type":400,"tag":436,"props":10584,"children":10585},{"style":676},[10586],{"type":406,"value":10587},"  ;",{"type":400,"tag":436,"props":10589,"children":10590},{"style":1393},[10591],{"type":406,"value":690},{"type":400,"tag":436,"props":10593,"children":10594},{"style":698},[10595],{"type":406,"value":701},{"type":400,"tag":436,"props":10597,"children":10598},{"style":676},[10599],{"type":406,"value":706},{"type":400,"tag":436,"props":10601,"children":10602},{"style":670},[10603],{"type":406,"value":10604}," eval",{"type":400,"tag":436,"props":10606,"children":10607},{"style":1393},[10608],{"type":406,"value":10609},")(",{"type":400,"tag":436,"props":10611,"children":10612},{"style":449},[10613],{"type":406,"value":463},{"type":400,"tag":436,"props":10615,"children":10616},{"style":455},[10617],{"type":406,"value":10526},{"type":400,"tag":436,"props":10619,"children":10620},{"style":449},[10621],{"type":406,"value":463},{"type":400,"tag":436,"props":10623,"children":10624},{"style":1393},[10625],{"type":406,"value":1413},{"type":400,"tag":436,"props":10627,"children":10628},{"class":438,"line":2108},[10629],{"type":400,"tag":436,"props":10630,"children":10631},{"style":723},[10632],{"type":406,"value":10633},"  // eval.call 等方法\n",{"type":400,"tag":436,"props":10635,"children":10636},{"class":438,"line":2168},[10637,10642,10646,10650,10655,10659,10663,10667,10671],{"type":400,"tag":436,"props":10638,"children":10639},{"style":670},[10640],{"type":406,"value":10641},"  eval",{"type":400,"tag":436,"props":10643,"children":10644},{"style":676},[10645],{"type":406,"value":679},{"type":400,"tag":436,"props":10647,"children":10648},{"style":682},[10649],{"type":406,"value":6892},{"type":400,"tag":436,"props":10651,"children":10652},{"style":1393},[10653],{"type":406,"value":10654},"(()",{"type":400,"tag":436,"props":10656,"children":10657},{"style":676},[10658],{"type":406,"value":706},{"type":400,"tag":436,"props":10660,"children":10661},{"style":449},[10662],{"type":406,"value":452},{"type":400,"tag":436,"props":10664,"children":10665},{"style":455},[10666],{"type":406,"value":10526},{"type":400,"tag":436,"props":10668,"children":10669},{"style":449},[10670],{"type":406,"value":463},{"type":400,"tag":436,"props":10672,"children":10673},{"style":1393},[10674],{"type":406,"value":1413},{"type":400,"tag":436,"props":10676,"children":10677},{"class":438,"line":2229},[10678],{"type":400,"tag":436,"props":10679,"children":10680},{"style":676},[10681],{"type":406,"value":1422},{"type":400,"tag":436,"props":10683,"children":10684},{"class":438,"line":2270},[10685,10690,10694,10698,10702,10707],{"type":400,"tag":436,"props":10686,"children":10687},{"style":670},[10688],{"type":406,"value":10689},"indirect",{"type":400,"tag":436,"props":10691,"children":10692},{"style":676},[10693],{"type":406,"value":679},{"type":400,"tag":436,"props":10695,"children":10696},{"style":682},[10697],{"type":406,"value":7722},{"type":400,"tag":436,"props":10699,"children":10700},{"style":670},[10701],{"type":406,"value":690},{"type":400,"tag":436,"props":10703,"children":10704},{"style":676},[10705],{"type":406,"value":10706},"{}",{"type":400,"tag":436,"props":10708,"children":10709},{"style":670},[10710],{"type":406,"value":10711},")()\n",{"type":400,"tag":414,"props":10713,"children":10714},{},[10715],{"type":406,"value":10716},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":400,"tag":414,"props":10718,"children":10719},{},[10720],{"type":406,"value":10721},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":400,"tag":425,"props":10723,"children":10725},{"className":658,"code":10724,"language":660,"meta":394,"style":394},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10726],{"type":400,"tag":432,"props":10727,"children":10728},{"__ignoreMap":394},[10729,10744,10780,10802,10858],{"type":400,"tag":436,"props":10730,"children":10731},{"class":438,"line":439},[10732,10736,10740],{"type":400,"tag":436,"props":10733,"children":10734},{"style":670},[10735],{"type":406,"value":7190},{"type":400,"tag":436,"props":10737,"children":10738},{"style":466},[10739],{"type":406,"value":1870},{"type":400,"tag":436,"props":10741,"children":10742},{"style":698},[10743],{"type":406,"value":6358},{"type":400,"tag":436,"props":10745,"children":10746},{"class":438,"line":729},[10747,10751,10755,10759,10763,10767,10771,10776],{"type":400,"tag":436,"props":10748,"children":10749},{"style":993},[10750],{"type":406,"value":5794},{"type":400,"tag":436,"props":10752,"children":10753},{"style":1429},[10754],{"type":406,"value":2636},{"type":400,"tag":436,"props":10756,"children":10757},{"style":466},[10758],{"type":406,"value":1359},{"type":400,"tag":436,"props":10760,"children":10761},{"style":676},[10762],{"type":406,"value":1707},{"type":400,"tag":436,"props":10764,"children":10765},{"style":1393},[10766],{"type":406,"value":6480},{"type":400,"tag":436,"props":10768,"children":10769},{"style":676},[10770],{"type":406,"value":1855},{"type":400,"tag":436,"props":10772,"children":10773},{"style":698},[10774],{"type":406,"value":10775}," 200",{"type":400,"tag":436,"props":10777,"children":10778},{"style":676},[10779],{"type":406,"value":3168},{"type":400,"tag":436,"props":10781,"children":10782},{"class":438,"line":1375},[10783,10787,10792,10797],{"type":400,"tag":436,"props":10784,"children":10785},{"style":1699},[10786],{"type":406,"value":8770},{"type":400,"tag":436,"props":10788,"children":10789},{"style":670},[10790],{"type":406,"value":10791}," (obj) ",{"type":400,"tag":436,"props":10793,"children":10794},{"style":676},[10795],{"type":406,"value":10796},"{",{"type":400,"tag":436,"props":10798,"children":10799},{"style":1393},[10800],{"type":406,"value":10801}," \n",{"type":400,"tag":436,"props":10803,"children":10804},{"class":438,"line":1416},[10805,10809,10813,10817,10821,10825,10829,10833,10837,10841,10845,10849,10853],{"type":400,"tag":436,"props":10806,"children":10807},{"style":682},[10808],{"type":406,"value":10641},{"type":400,"tag":436,"props":10810,"children":10811},{"style":1393},[10812],{"type":406,"value":690},{"type":400,"tag":436,"props":10814,"children":10815},{"style":670},[10816],{"type":406,"value":5019},{"type":400,"tag":436,"props":10818,"children":10819},{"style":676},[10820],{"type":406,"value":679},{"type":400,"tag":436,"props":10822,"children":10823},{"style":682},[10824],{"type":406,"value":1390},{"type":400,"tag":436,"props":10826,"children":10827},{"style":1393},[10828],{"type":406,"value":690},{"type":400,"tag":436,"props":10830,"children":10831},{"style":670},[10832],{"type":406,"value":2666},{"type":400,"tag":436,"props":10834,"children":10835},{"style":676},[10836],{"type":406,"value":706},{"type":400,"tag":436,"props":10838,"children":10839},{"style":1342},[10840],{"type":406,"value":3789},{"type":400,"tag":436,"props":10842,"children":10843},{"style":676},[10844],{"type":406,"value":679},{"type":400,"tag":436,"props":10846,"children":10847},{"style":670},[10848],{"type":406,"value":2666},{"type":400,"tag":436,"props":10850,"children":10851},{"style":1393},[10852],{"type":406,"value":9279},{"type":400,"tag":436,"props":10854,"children":10855},{"style":723},[10856],{"type":406,"value":10857},"// 200 100\n",{"type":400,"tag":436,"props":10859,"children":10860},{"class":438,"line":1425},[10861],{"type":400,"tag":436,"props":10862,"children":10863},{"style":676},[10864],{"type":406,"value":1422},{"type":400,"tag":414,"props":10866,"children":10867},{},[10868],{"type":406,"value":10869},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":400,"tag":408,"props":10871,"children":10873},{"id":10872},"动态方法调用",[10874],{"type":406,"value":10872},{"type":400,"tag":414,"props":10876,"children":10877},{},[10878],{"type":406,"value":10879},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":400,"tag":414,"props":10881,"children":10882},{},[10883],{"type":406,"value":10884},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":400,"tag":414,"props":10886,"children":10887},{},[10888],{"type":406,"value":10889},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":400,"tag":414,"props":10891,"children":10892},{},[10893],{"type":406,"value":10894},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":400,"tag":425,"props":10896,"children":10898},{"className":658,"code":10897,"language":660,"meta":394,"style":394},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10899],{"type":400,"tag":432,"props":10900,"children":10901},{"__ignoreMap":394},[10902,10922,10958,11007],{"type":400,"tag":436,"props":10903,"children":10904},{"class":438,"line":439},[10905,10909,10914,10918],{"type":400,"tag":436,"props":10906,"children":10907},{"style":993},[10908],{"type":406,"value":1321},{"type":400,"tag":436,"props":10910,"children":10911},{"style":682},[10912],{"type":406,"value":10913}," Test",{"type":400,"tag":436,"props":10915,"children":10916},{"style":676},[10917],{"type":406,"value":1044},{"type":400,"tag":436,"props":10919,"children":10920},{"style":676},[10921],{"type":406,"value":3129},{"type":400,"tag":436,"props":10923,"children":10924},{"class":438,"line":729},[10925,10930,10934,10938,10942,10946,10950,10954],{"type":400,"tag":436,"props":10926,"children":10927},{"style":670},[10928],{"type":406,"value":10929},"TestAnother ",{"type":400,"tag":436,"props":10931,"children":10932},{"style":466},[10933],{"type":406,"value":1870},{"type":400,"tag":436,"props":10935,"children":10936},{"style":670},[10937],{"type":406,"value":10913},{"type":400,"tag":436,"props":10939,"children":10940},{"style":676},[10941],{"type":406,"value":679},{"type":400,"tag":436,"props":10943,"children":10944},{"style":682},[10945],{"type":406,"value":7722},{"type":400,"tag":436,"props":10947,"children":10948},{"style":670},[10949],{"type":406,"value":690},{"type":400,"tag":436,"props":10951,"children":10952},{"style":676},[10953],{"type":406,"value":10706},{"type":400,"tag":436,"props":10955,"children":10956},{"style":670},[10957],{"type":406,"value":1413},{"type":400,"tag":436,"props":10959,"children":10960},{"class":438,"line":1375},[10961,10965,10969,10973,10977,10981,10985,10989,10994,10999,11003],{"type":400,"tag":436,"props":10962,"children":10963},{"style":670},[10964],{"type":406,"value":5019},{"type":400,"tag":436,"props":10966,"children":10967},{"style":676},[10968],{"type":406,"value":679},{"type":400,"tag":436,"props":10970,"children":10971},{"style":682},[10972],{"type":406,"value":1390},{"type":400,"tag":436,"props":10974,"children":10975},{"style":670},[10976],{"type":406,"value":690},{"type":400,"tag":436,"props":10978,"children":10979},{"style":466},[10980],{"type":406,"value":1511},{"type":400,"tag":436,"props":10982,"children":10983},{"style":682},[10984],{"type":406,"value":10913},{"type":400,"tag":436,"props":10986,"children":10987},{"style":670},[10988],{"type":406,"value":824},{"type":400,"tag":436,"props":10990,"children":10991},{"style":466},[10992],{"type":406,"value":10993},"instanceof",{"type":400,"tag":436,"props":10995,"children":10996},{"style":3545},[10997],{"type":406,"value":10998}," TestAnother",{"type":400,"tag":436,"props":11000,"children":11001},{"style":670},[11002],{"type":406,"value":720},{"type":400,"tag":436,"props":11004,"children":11005},{"style":723},[11006],{"type":406,"value":770},{"type":400,"tag":436,"props":11008,"children":11009},{"class":438,"line":1416},[11010,11014,11018,11022,11026,11031,11035,11039,11043],{"type":400,"tag":436,"props":11011,"children":11012},{"style":670},[11013],{"type":406,"value":5019},{"type":400,"tag":436,"props":11015,"children":11016},{"style":676},[11017],{"type":406,"value":679},{"type":400,"tag":436,"props":11019,"children":11020},{"style":682},[11021],{"type":406,"value":1390},{"type":400,"tag":436,"props":11023,"children":11024},{"style":670},[11025],{"type":406,"value":690},{"type":400,"tag":436,"props":11027,"children":11028},{"style":2818},[11029],{"type":406,"value":11030},"test2",{"type":400,"tag":436,"props":11032,"children":11033},{"style":676},[11034],{"type":406,"value":679},{"type":400,"tag":436,"props":11036,"children":11037},{"style":1429},[11038],{"type":406,"value":2829},{"type":400,"tag":436,"props":11040,"children":11041},{"style":670},[11042],{"type":406,"value":720},{"type":400,"tag":436,"props":11044,"children":11045},{"style":723},[11046],{"type":406,"value":959},{"type":400,"tag":414,"props":11048,"children":11049},{},[11050],{"type":406,"value":11051},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":400,"tag":408,"props":11053,"children":11055},{"id":11054},"通用执行环境的实现",[11056],{"type":406,"value":11054},{"type":400,"tag":414,"props":11058,"children":11059},{},[11060],{"type":406,"value":11061},"跳过。",{"type":400,"tag":401,"props":11063,"children":11065},{"id":11064},"勘误",[11066],{"type":406,"value":11067},"勘误？",{"type":400,"tag":514,"props":11069,"children":11070},{},[11071,11076,11081,11086,11091,11096,11101,11106,11111,11116,11121,11126,11131],{"type":400,"tag":518,"props":11072,"children":11073},{},[11074],{"type":406,"value":11075},"P71，属性读取器",{"type":400,"tag":518,"props":11077,"children":11078},{},[11079],{"type":406,"value":11080},"P77，逻辑与、按位非",{"type":400,"tag":518,"props":11082,"children":11083},{},[11084],{"type":406,"value":11085},"P107，catch 子句隐式声明",{"type":400,"tag":518,"props":11087,"children":11088},{},[11089],{"type":406,"value":11090},"P134，第二段代码，computedName 括号",{"type":400,"tag":518,"props":11092,"children":11093},{},[11094],{"type":406,"value":11095},"P148，ES8",{"type":400,"tag":518,"props":11097,"children":11098},{},[11099],{"type":406,"value":11100},"P179，MyObject() 有没有必要用括号",{"type":400,"tag":518,"props":11102,"children":11103},{},[11104],{"type":406,"value":11105},"P206，语言仅提供了...能力而已",{"type":400,"tag":518,"props":11107,"children":11108},{},[11109],{"type":406,"value":11110},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":400,"tag":518,"props":11112,"children":11113},{},[11114],{"type":406,"value":11115},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":400,"tag":518,"props":11117,"children":11118},{},[11119],{"type":406,"value":11120},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":400,"tag":518,"props":11122,"children":11123},{},[11124],{"type":406,"value":11125},"P536，表格最后一行 String",{"type":400,"tag":518,"props":11127,"children":11128},{},[11129],{"type":406,"value":11130},"P535，存取描述符",{"type":400,"tag":518,"props":11132,"children":11133},{},[11134],{"type":406,"value":11135},"P564，运算符",{"type":400,"tag":11137,"props":11138,"children":11141},"section",{"className":11139,"dataFootnotes":394},[11140],"footnotes",[11142,11149],{"type":400,"tag":401,"props":11143,"children":11146},{"className":11144,"id":501},[11145],"sr-only",[11147],{"type":406,"value":11148},"Footnotes",{"type":400,"tag":11150,"props":11151,"children":11152},"ol",{},[11153,11168,11181,11194,11207,11220],{"type":400,"tag":518,"props":11154,"children":11156},{"id":11155},"user-content-fn-first-class",[11157,11159],{"type":406,"value":11158},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":400,"tag":497,"props":11160,"children":11165},{"href":11161,"ariaLabel":11162,"className":11163,"dataFootnoteBackref":394},"#user-content-fnref-first-class","Back to reference 1",[11164],"data-footnote-backref",[11166],{"type":406,"value":11167},"↩",{"type":400,"tag":518,"props":11169,"children":11171},{"id":11170},"user-content-fn-oo",[11172,11174],{"type":406,"value":11173},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":400,"tag":497,"props":11175,"children":11179},{"href":11176,"ariaLabel":11177,"className":11178,"dataFootnoteBackref":394},"#user-content-fnref-oo","Back to reference 2",[11164],[11180],{"type":406,"value":11167},{"type":400,"tag":518,"props":11182,"children":11184},{"id":11183},"user-content-fn-string",[11185,11187],{"type":406,"value":11186},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":400,"tag":497,"props":11188,"children":11192},{"href":11189,"ariaLabel":11190,"className":11191,"dataFootnoteBackref":394},"#user-content-fnref-string","Back to reference 3",[11164],[11193],{"type":406,"value":11167},{"type":400,"tag":518,"props":11195,"children":11197},{"id":11196},"user-content-fn-namespace",[11198,11200],{"type":406,"value":11199},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":400,"tag":497,"props":11201,"children":11205},{"href":11202,"ariaLabel":11203,"className":11204,"dataFootnoteBackref":394},"#user-content-fnref-namespace","Back to reference 4",[11164],[11206],{"type":406,"value":11167},{"type":400,"tag":518,"props":11208,"children":11210},{"id":11209},"user-content-fn-iterationenv",[11211,11213],{"type":406,"value":11212},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":400,"tag":497,"props":11214,"children":11218},{"href":11215,"ariaLabel":11216,"className":11217,"dataFootnoteBackref":394},"#user-content-fnref-iterationenv","Back to reference 5",[11164],[11219],{"type":406,"value":11167},{"type":400,"tag":518,"props":11221,"children":11223},{"id":11222},"user-content-fn-reference",[11224,11226],{"type":406,"value":11225},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":400,"tag":497,"props":11227,"children":11231},{"href":11228,"ariaLabel":11229,"className":11230,"dataFootnoteBackref":394},"#user-content-fnref-reference","Back to reference 6",[11164],[11232],{"type":406,"value":11167},{"type":400,"tag":11234,"props":11235,"children":11236},"style",{},[11237],{"type":406,"value":11238},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":394,"searchDepth":729,"depth":729,"links":11240},[11241,11250,11259,11269,11275,11285,11286],{"id":403,"depth":729,"text":403,"children":11242},[11243,11244,11245,11246,11247,11248,11249],{"id":410,"depth":1375,"text":410},{"id":484,"depth":1375,"text":484},{"id":610,"depth":1375,"text":610},{"id":1561,"depth":1375,"text":1561},{"id":2346,"depth":1375,"text":2346},{"id":2473,"depth":1375,"text":2473},{"id":2564,"depth":1375,"text":2564},{"id":2589,"depth":729,"text":2589,"children":11251},[11252,11253,11254,11255,11256,11257,11258],{"id":2594,"depth":1375,"text":410},{"id":3067,"depth":1375,"text":3067},{"id":3512,"depth":1375,"text":3512},{"id":4273,"depth":1375,"text":4273},{"id":5051,"depth":1375,"text":5051},{"id":5224,"depth":1375,"text":5224},{"id":6041,"depth":1375,"text":6041},{"id":6051,"depth":729,"text":6051,"children":11260},[11261,11262,11263,11264,11265,11266,11267,11268],{"id":6056,"depth":1375,"text":6056},{"id":6109,"depth":1375,"text":6109},{"id":6287,"depth":1375,"text":6287},{"id":6565,"depth":1375,"text":6565},{"id":6649,"depth":1375,"text":6649},{"id":6823,"depth":1375,"text":6823},{"id":6905,"depth":1375,"text":6905},{"id":6943,"depth":1375,"text":6943},{"id":6953,"depth":729,"text":6953,"children":11270},[11271,11272,11273,11274],{"id":6958,"depth":1375,"text":6056},{"id":6973,"depth":1375,"text":6976},{"id":8115,"depth":1375,"text":8115},{"id":8562,"depth":1375,"text":8562},{"id":8932,"depth":729,"text":8932,"children":11276},[11277,11278,11279,11280,11281,11282,11283,11284],{"id":8937,"depth":1375,"text":6056},{"id":8952,"depth":1375,"text":8952},{"id":9437,"depth":1375,"text":9437},{"id":9540,"depth":1375,"text":9540},{"id":9740,"depth":1375,"text":9740},{"id":10415,"depth":1375,"text":10415},{"id":10872,"depth":1375,"text":10872},{"id":11054,"depth":1375,"text":11054},{"id":11064,"depth":729,"text":11067},{"id":501,"depth":729,"text":11148},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","md",[11293,11297],{"_path":11294,"title":11295,"description":11296},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11298,"title":11299,"description":394},"/_books/9787301135907","日常生活中的自我呈现",1718618907056]