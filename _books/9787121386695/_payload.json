[{"data":1,"prerenderedAt":11063},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":161,"/_books/9787121386695-surround":11055},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":166,"body":168,"_type":11049,"_id":11050,"_source":11051,"_file":11052,"_stem":11053,"_extension":11054},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":169,"children":170,"toc":11001},"root",[171,179,185,191,196,254,259,280,285,324,329,342,347,352,357,362,380,385,390,395,408,413,418,423,428,543,548,553,614,619,660,665,698,703,708,733,738,775,780,1073,1078,1330,1335,1340,1345,1363,1368,1453,1458,1589,1594,1599,2105,2110,2115,2120,2125,2227,2232,2237,2242,2247,2252,2257,2262,2315,2320,2333,2338,2343,2348,2353,2358,2363,2368,2373,2378,2383,2388,2564,2569,2661,2666,2671,2676,2681,2798,2816,2821,2834,2839,2844,2849,2862,2867,2872,3008,3023,3028,3108,3113,3160,3274,3279,3284,3289,3474,3479,3484,3489,3652,3657,3685,3690,3703,3708,3960,3965,3970,3975,4035,4040,4045,4050,4055,4060,4158,4163,4168,4186,4191,4204,4209,4214,4227,4232,4237,4335,4340,4345,4350,4542,4547,4816,4821,4826,4844,4849,4964,4969,4987,4992,4997,5002,5007,5198,5203,5216,5221,5802,5807,5812,5817,5822,5827,5832,5837,5842,5860,5865,5870,5875,5880,6000,6005,6010,6015,6027,6032,6037,6042,6047,6052,6070,6187,6192,6325,6330,6335,6340,6358,6363,6368,6409,6414,6419,6424,6491,6496,6501,6545,6550,6555,6560,6578,6583,6588,6593,6660,6665,6670,6675,6693,6698,6703,6708,6713,6718,6723,6728,6733,6739,6744,6762,6767,6911,6929,7150,7155,7160,7291,7296,7314,7319,7367,7372,7494,7499,7504,7875,7880,7885,7890,7895,7900,8322,8327,8332,8337,8355,8360,8452,8457,8462,8649,8654,8659,8664,8669,8687,8692,8697,8702,8707,8712,8717,8722,8891,8896,8901,9047,9052,9192,9197,9202,9207,9212,9217,9249,9254,9300,9305,9310,9490,9495,9500,9505,9510,9515,9520,10016,10021,10026,10056,10061,10066,10071,10175,10180,10185,10474,10479,10484,10627,10632,10637,10642,10647,10652,10657,10809,10814,10819,10824,10830,10898,10995],{"type":172,"tag":173,"props":174,"children":176},"element","h2",{"id":175},"语法",[177],{"type":178,"value":175},"text",{"type":172,"tag":180,"props":181,"children":183},"h3",{"id":182},"语法综述",[184],{"type":178,"value":182},{"type":172,"tag":186,"props":187,"children":188},"p",{},[189],{"type":178,"value":190},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":172,"tag":186,"props":192,"children":193},{},[194],{"type":178,"value":195},"可以使用 --check 指令检测语法错误：",{"type":172,"tag":197,"props":198,"children":202},"pre",{"className":199,"code":200,"language":201,"meta":166,"style":166},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[203],{"type":172,"tag":204,"props":205,"children":206},"code",{"__ignoreMap":166},[207],{"type":172,"tag":208,"props":209,"children":212},"span",{"class":210,"line":211},"line",1,[213,219,225,231,236,242,248],{"type":172,"tag":208,"props":214,"children":216},{"style":215},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[217],{"type":178,"value":218},"echo",{"type":172,"tag":208,"props":220,"children":222},{"style":221},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[223],{"type":178,"value":224}," '",{"type":172,"tag":208,"props":226,"children":228},{"style":227},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[229],{"type":178,"value":230},"\"hello world\"",{"type":172,"tag":208,"props":232,"children":233},{"style":221},[234],{"type":178,"value":235},"'",{"type":172,"tag":208,"props":237,"children":239},{"style":238},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[240],{"type":178,"value":241}," |",{"type":172,"tag":208,"props":243,"children":245},{"style":244},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[246],{"type":178,"value":247}," node",{"type":172,"tag":208,"props":249,"children":251},{"style":250},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[252],{"type":178,"value":253}," -c\n",{"type":172,"tag":180,"props":255,"children":257},{"id":256},"声明语法",[258],{"type":178,"value":256},{"type":172,"tag":186,"props":260,"children":261},{},[262,264,278],{"type":178,"value":263},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":172,"tag":265,"props":266,"children":267},"sup",{},[268],{"type":172,"tag":269,"props":270,"children":275},"a",{"href":271,"ariaDescribedBy":272,"dataFootnoteRef":166,"id":274},"#user-content-fn-first-class",[273],"footnote-label","user-content-fnref-first-class",[276],{"type":178,"value":277},"1",{"type":178,"value":279},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":172,"tag":186,"props":281,"children":282},{},[283],{"type":178,"value":284},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":172,"tag":286,"props":287,"children":288},"ul",{},[289,308],{"type":172,"tag":290,"props":291,"children":292},"li",{},[293,295,306],{"type":178,"value":294},"基本数据类型：undefined、string、number、object",{"type":172,"tag":265,"props":296,"children":297},{},[298],{"type":172,"tag":269,"props":299,"children":303},{"href":300,"ariaDescribedBy":301,"dataFootnoteRef":166,"id":302},"#user-content-fn-oo",[273],"user-content-fnref-oo",[304],{"type":178,"value":305},"2",{"type":178,"value":307},"、function、boolean、symbol、bigint",{"type":172,"tag":290,"props":309,"children":310},{},[311,313],{"type":178,"value":312},"值类型和引用类型",{"type":172,"tag":265,"props":314,"children":315},{},[316],{"type":172,"tag":269,"props":317,"children":321},{"href":318,"ariaDescribedBy":319,"dataFootnoteRef":166,"id":320},"#user-content-fn-string",[273],"user-content-fnref-string",[322],{"type":178,"value":323},"3",{"type":172,"tag":186,"props":325,"children":326},{},[327],{"type":178,"value":328},"如果算上规范，可以再增加两种类型系统：",{"type":172,"tag":286,"props":330,"children":331},{},[332,337],{"type":172,"tag":290,"props":333,"children":334},{},[335],{"type":178,"value":336},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":172,"tag":290,"props":338,"children":339},{},[340],{"type":178,"value":341},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":172,"tag":186,"props":343,"children":344},{},[345],{"type":178,"value":346},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":172,"tag":186,"props":348,"children":349},{},[350],{"type":178,"value":351},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":172,"tag":186,"props":353,"children":354},{},[355],{"type":178,"value":356},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":172,"tag":186,"props":358,"children":359},{},[360],{"type":178,"value":361},"相关字符串字面量的一些冷知识：",{"type":172,"tag":286,"props":363,"children":364},{},[365,370,375],{"type":172,"tag":290,"props":366,"children":367},{},[368],{"type":178,"value":369},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":172,"tag":290,"props":371,"children":372},{},[373],{"type":178,"value":374},"空字符串也能作为对象的键。",{"type":172,"tag":290,"props":376,"children":377},{},[378],{"type":178,"value":379},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":172,"tag":180,"props":381,"children":383},{"id":382},"表达式运算",[384],{"type":178,"value":382},{"type":172,"tag":186,"props":386,"children":387},{},[388],{"type":178,"value":389},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":172,"tag":186,"props":391,"children":392},{},[393],{"type":178,"value":394},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":172,"tag":286,"props":396,"children":397},{},[398,403],{"type":172,"tag":290,"props":399,"children":400},{},[401],{"type":178,"value":402},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":172,"tag":290,"props":404,"children":405},{},[406],{"type":178,"value":407},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":172,"tag":186,"props":409,"children":410},{},[411],{"type":178,"value":412},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":172,"tag":186,"props":414,"children":415},{},[416],{"type":178,"value":417},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":172,"tag":186,"props":419,"children":420},{},[421],{"type":178,"value":422},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":172,"tag":186,"props":424,"children":425},{},[426],{"type":178,"value":427},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":172,"tag":197,"props":429,"children":433},{"className":430,"code":431,"language":432,"meta":166,"style":166},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[434],{"type":172,"tag":204,"props":435,"children":436},{"__ignoreMap":166},[437,499],{"type":172,"tag":208,"props":438,"children":439},{"class":210,"line":211},[440,446,452,458,463,468,474,479,484,488,493],{"type":172,"tag":208,"props":441,"children":443},{"style":442},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[444],{"type":178,"value":445},"Object",{"type":172,"tag":208,"props":447,"children":449},{"style":448},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[450],{"type":178,"value":451},".",{"type":172,"tag":208,"props":453,"children":455},{"style":454},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[456],{"type":178,"value":457},"is",{"type":172,"tag":208,"props":459,"children":460},{"style":442},[461],{"type":178,"value":462},"(",{"type":172,"tag":208,"props":464,"children":465},{"style":238},[466],{"type":178,"value":467},"+",{"type":172,"tag":208,"props":469,"children":471},{"style":470},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[472],{"type":178,"value":473},"0",{"type":172,"tag":208,"props":475,"children":476},{"style":448},[477],{"type":178,"value":478},",",{"type":172,"tag":208,"props":480,"children":481},{"style":238},[482],{"type":178,"value":483}," -",{"type":172,"tag":208,"props":485,"children":486},{"style":470},[487],{"type":178,"value":473},{"type":172,"tag":208,"props":489,"children":490},{"style":442},[491],{"type":178,"value":492},") ",{"type":172,"tag":208,"props":494,"children":496},{"style":495},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[497],{"type":178,"value":498},"// false\n",{"type":172,"tag":208,"props":500,"children":502},{"class":210,"line":501},2,[503,507,511,515,519,525,529,534,538],{"type":172,"tag":208,"props":504,"children":505},{"style":442},[506],{"type":178,"value":445},{"type":172,"tag":208,"props":508,"children":509},{"style":448},[510],{"type":178,"value":451},{"type":172,"tag":208,"props":512,"children":513},{"style":454},[514],{"type":178,"value":457},{"type":172,"tag":208,"props":516,"children":517},{"style":442},[518],{"type":178,"value":462},{"type":172,"tag":208,"props":520,"children":522},{"style":521},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[523],{"type":178,"value":524},"NaN",{"type":172,"tag":208,"props":526,"children":527},{"style":448},[528],{"type":178,"value":478},{"type":172,"tag":208,"props":530,"children":531},{"style":521},[532],{"type":178,"value":533}," NaN",{"type":172,"tag":208,"props":535,"children":536},{"style":442},[537],{"type":178,"value":492},{"type":172,"tag":208,"props":539,"children":540},{"style":495},[541],{"type":178,"value":542},"// true\n",{"type":172,"tag":186,"props":544,"children":545},{},[546],{"type":178,"value":547},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":172,"tag":186,"props":549,"children":550},{},[551],{"type":178,"value":552},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":172,"tag":197,"props":554,"children":556},{"className":430,"code":555,"language":432,"meta":166,"style":166},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[557],{"type":172,"tag":204,"props":558,"children":559},{"__ignoreMap":166},[560,586],{"type":172,"tag":208,"props":561,"children":562},{"class":210,"line":211},[563,568,572,577,582],{"type":172,"tag":208,"props":564,"children":565},{"style":454},[566],{"type":178,"value":567},"Boolean",{"type":172,"tag":208,"props":569,"children":570},{"style":442},[571],{"type":178,"value":462},{"type":172,"tag":208,"props":573,"children":574},{"style":454},[575],{"type":178,"value":576},"Symbol",{"type":172,"tag":208,"props":578,"children":579},{"style":442},[580],{"type":178,"value":581},"()) ",{"type":172,"tag":208,"props":583,"children":584},{"style":495},[585],{"type":178,"value":542},{"type":172,"tag":208,"props":587,"children":588},{"class":210,"line":501},[589,593,598,603,609],{"type":172,"tag":208,"props":590,"children":591},{"style":454},[592],{"type":178,"value":576},{"type":172,"tag":208,"props":594,"children":595},{"style":442},[596],{"type":178,"value":597},"() ",{"type":172,"tag":208,"props":599,"children":600},{"style":238},[601],{"type":178,"value":602},"==",{"type":172,"tag":208,"props":604,"children":606},{"style":605},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[607],{"type":178,"value":608}," true",{"type":172,"tag":208,"props":610,"children":611},{"style":495},[612],{"type":178,"value":613}," // false\n",{"type":172,"tag":186,"props":615,"children":616},{},[617],{"type":178,"value":618},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":172,"tag":197,"props":620,"children":622},{"className":199,"code":621,"language":201,"meta":166,"style":166},"echo \"1 = 1\" | node -c\n",[623],{"type":172,"tag":204,"props":624,"children":625},{"__ignoreMap":166},[626],{"type":172,"tag":208,"props":627,"children":628},{"class":210,"line":211},[629,633,638,643,648,652,656],{"type":172,"tag":208,"props":630,"children":631},{"style":215},[632],{"type":178,"value":218},{"type":172,"tag":208,"props":634,"children":635},{"style":221},[636],{"type":178,"value":637}," \"",{"type":172,"tag":208,"props":639,"children":640},{"style":227},[641],{"type":178,"value":642},"1 = 1",{"type":172,"tag":208,"props":644,"children":645},{"style":221},[646],{"type":178,"value":647},"\"",{"type":172,"tag":208,"props":649,"children":650},{"style":238},[651],{"type":178,"value":241},{"type":172,"tag":208,"props":653,"children":654},{"style":244},[655],{"type":178,"value":247},{"type":172,"tag":208,"props":657,"children":658},{"style":250},[659],{"type":178,"value":253},{"type":172,"tag":186,"props":661,"children":662},{},[663],{"type":178,"value":664},"函数调用也有“隐式调用”这一概念：",{"type":172,"tag":286,"props":666,"children":667},{},[668,673,678,683,688,693],{"type":172,"tag":290,"props":669,"children":670},{},[671],{"type":178,"value":672},"使用 new 运算符",{"type":172,"tag":290,"props":674,"children":675},{},[676],{"type":178,"value":677},"模板处理函数 + 模板字符串调用",{"type":172,"tag":290,"props":679,"children":680},{},[681],{"type":178,"value":682},"函数作为属性存取器且发生了属性存取操作时",{"type":172,"tag":290,"props":684,"children":685},{},[686],{"type":178,"value":687},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":172,"tag":290,"props":689,"children":690},{},[691],{"type":178,"value":692},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":172,"tag":290,"props":694,"children":695},{},[696],{"type":178,"value":697},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":172,"tag":186,"props":699,"children":700},{},[701],{"type":178,"value":702},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":172,"tag":186,"props":704,"children":705},{},[706],{"type":178,"value":707},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":172,"tag":197,"props":709,"children":711},{"className":430,"code":710,"language":432,"meta":166,"style":166},"typeof x // undefined\n",[712],{"type":172,"tag":204,"props":713,"children":714},{"__ignoreMap":166},[715],{"type":172,"tag":208,"props":716,"children":717},{"class":210,"line":211},[718,723,728],{"type":172,"tag":208,"props":719,"children":720},{"style":238},[721],{"type":178,"value":722},"typeof",{"type":172,"tag":208,"props":724,"children":725},{"style":442},[726],{"type":178,"value":727}," x ",{"type":172,"tag":208,"props":729,"children":730},{"style":495},[731],{"type":178,"value":732},"// undefined\n",{"type":172,"tag":186,"props":734,"children":735},{},[736],{"type":178,"value":737},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":172,"tag":197,"props":739,"children":741},{"className":430,"code":740,"language":432,"meta":166,"style":166},"typeof x // ReferenceError\nlet x\n",[742],{"type":172,"tag":204,"props":743,"children":744},{"__ignoreMap":166},[745,761],{"type":172,"tag":208,"props":746,"children":747},{"class":210,"line":211},[748,752,756],{"type":172,"tag":208,"props":749,"children":750},{"style":238},[751],{"type":178,"value":722},{"type":172,"tag":208,"props":753,"children":754},{"style":442},[755],{"type":178,"value":727},{"type":172,"tag":208,"props":757,"children":758},{"style":495},[759],{"type":178,"value":760},"// ReferenceError\n",{"type":172,"tag":208,"props":762,"children":763},{"class":210,"line":501},[764,770],{"type":172,"tag":208,"props":765,"children":767},{"style":766},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[768],{"type":178,"value":769},"let",{"type":172,"tag":208,"props":771,"children":772},{"style":442},[773],{"type":178,"value":774}," x\n",{"type":172,"tag":186,"props":776,"children":777},{},[778],{"type":178,"value":779},"完整的运算符优先级列表如下：",{"type":172,"tag":781,"props":782,"children":783},"table",{},[784,803],{"type":172,"tag":785,"props":786,"children":787},"thead",{},[788],{"type":172,"tag":789,"props":790,"children":791},"tr",{},[792,798],{"type":172,"tag":793,"props":794,"children":795},"th",{},[796],{"type":178,"value":797},"运算符",{"type":172,"tag":793,"props":799,"children":800},{},[801],{"type":178,"value":802},"描述",{"type":172,"tag":804,"props":805,"children":806},"tbody",{},[807,821,839,852,865,878,891,904,917,930,943,956,969,982,995,1008,1021,1034,1047,1060],{"type":172,"tag":789,"props":808,"children":809},{},[810,816],{"type":172,"tag":811,"props":812,"children":813},"td",{},[814],{"type":178,"value":815},"()",{"type":172,"tag":811,"props":817,"children":818},{},[819],{"type":178,"value":820},"成组运算",{"type":172,"tag":789,"props":822,"children":823},{},[824,834],{"type":172,"tag":811,"props":825,"children":826},{},[827,829,832],{"type":178,"value":828},".、",{"type":172,"tag":208,"props":830,"children":831},{},[],{"type":178,"value":833},"、new ()",{"type":172,"tag":811,"props":835,"children":836},{},[837],{"type":178,"value":838},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":172,"tag":789,"props":840,"children":841},{},[842,847],{"type":172,"tag":811,"props":843,"children":844},{},[845],{"type":178,"value":846},"()、new",{"type":172,"tag":811,"props":848,"children":849},{},[850],{"type":178,"value":851},"函数调用、new 运算符",{"type":172,"tag":789,"props":853,"children":854},{},[855,860],{"type":172,"tag":811,"props":856,"children":857},{},[858],{"type":178,"value":859},"++、--",{"type":172,"tag":811,"props":861,"children":862},{},[863],{"type":178,"value":864},"后置递增、后置递减",{"type":172,"tag":789,"props":866,"children":867},{},[868,873],{"type":172,"tag":811,"props":869,"children":870},{},[871],{"type":178,"value":872},"+、-、++、--、~、!、delete、typeof、void",{"type":172,"tag":811,"props":874,"children":875},{},[876],{"type":178,"value":877},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":172,"tag":789,"props":879,"children":880},{},[881,886],{"type":172,"tag":811,"props":882,"children":883},{},[884],{"type":178,"value":885},"*、/、%",{"type":172,"tag":811,"props":887,"children":888},{},[889],{"type":178,"value":890},"乘法、除法、取模",{"type":172,"tag":789,"props":892,"children":893},{},[894,899],{"type":172,"tag":811,"props":895,"children":896},{},[897],{"type":178,"value":898},"+、-、+",{"type":172,"tag":811,"props":900,"children":901},{},[902],{"type":178,"value":903},"加法、减法、字符串连接",{"type":172,"tag":789,"props":905,"children":906},{},[907,912],{"type":172,"tag":811,"props":908,"children":909},{},[910],{"type":178,"value":911},"\u003C\u003C、>>、>>>",{"type":172,"tag":811,"props":913,"children":914},{},[915],{"type":178,"value":916},"移位运算符",{"type":172,"tag":789,"props":918,"children":919},{},[920,925],{"type":172,"tag":811,"props":921,"children":922},{},[923],{"type":178,"value":924},"\u003C、\u003C=、>=、>、in、instanceof",{"type":172,"tag":811,"props":926,"children":927},{},[928],{"type":178,"value":929},"关系运算符、in、instanceof",{"type":172,"tag":789,"props":931,"children":932},{},[933,938],{"type":172,"tag":811,"props":934,"children":935},{},[936],{"type":178,"value":937},"==、!=、===、!==",{"type":172,"tag":811,"props":939,"children":940},{},[941],{"type":178,"value":942},"等值检测",{"type":172,"tag":789,"props":944,"children":945},{},[946,951],{"type":172,"tag":811,"props":947,"children":948},{},[949],{"type":178,"value":950},"&",{"type":172,"tag":811,"props":952,"children":953},{},[954],{"type":178,"value":955},"按位与",{"type":172,"tag":789,"props":957,"children":958},{},[959,964],{"type":172,"tag":811,"props":960,"children":961},{},[962],{"type":178,"value":963},"^",{"type":172,"tag":811,"props":965,"children":966},{},[967],{"type":178,"value":968},"按位异或",{"type":172,"tag":789,"props":970,"children":971},{},[972,977],{"type":172,"tag":811,"props":973,"children":974},{},[975],{"type":178,"value":976},"|",{"type":172,"tag":811,"props":978,"children":979},{},[980],{"type":178,"value":981},"按位或",{"type":172,"tag":789,"props":983,"children":984},{},[985,990],{"type":172,"tag":811,"props":986,"children":987},{},[988],{"type":178,"value":989},"&&",{"type":172,"tag":811,"props":991,"children":992},{},[993],{"type":178,"value":994},"逻辑与",{"type":172,"tag":789,"props":996,"children":997},{},[998,1003],{"type":172,"tag":811,"props":999,"children":1000},{},[1001],{"type":178,"value":1002},"||",{"type":172,"tag":811,"props":1004,"children":1005},{},[1006],{"type":178,"value":1007},"逻辑或",{"type":172,"tag":789,"props":1009,"children":1010},{},[1011,1016],{"type":172,"tag":811,"props":1012,"children":1013},{},[1014],{"type":178,"value":1015},"?:",{"type":172,"tag":811,"props":1017,"children":1018},{},[1019],{"type":178,"value":1020},"三木运算",{"type":172,"tag":789,"props":1022,"children":1023},{},[1024,1029],{"type":172,"tag":811,"props":1025,"children":1026},{},[1027],{"type":178,"value":1028},"=、oP=",{"type":172,"tag":811,"props":1030,"children":1031},{},[1032],{"type":178,"value":1033},"赋值、运算赋值",{"type":172,"tag":789,"props":1035,"children":1036},{},[1037,1042],{"type":172,"tag":811,"props":1038,"children":1039},{},[1040],{"type":178,"value":1041},"yield、yield*",{"type":172,"tag":811,"props":1043,"children":1044},{},[1045],{"type":178,"value":1046},"yield 表达式",{"type":172,"tag":789,"props":1048,"children":1049},{},[1050,1055],{"type":172,"tag":811,"props":1051,"children":1052},{},[1053],{"type":178,"value":1054},"...",{"type":172,"tag":811,"props":1056,"children":1057},{},[1058],{"type":178,"value":1059},"展开运算符",{"type":172,"tag":789,"props":1061,"children":1062},{},[1063,1068],{"type":172,"tag":811,"props":1064,"children":1065},{},[1066],{"type":178,"value":1067},"，",{"type":172,"tag":811,"props":1069,"children":1070},{},[1071],{"type":178,"value":1072},"逗号运算符、多重求值",{"type":172,"tag":186,"props":1074,"children":1075},{},[1076],{"type":178,"value":1077},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":172,"tag":197,"props":1079,"children":1081},{"className":430,"code":1080,"language":432,"meta":166,"style":166},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1082],{"type":172,"tag":204,"props":1083,"children":1084},{"__ignoreMap":166},[1085,1108,1144,1185,1194,1229,1266,1274,1301],{"type":172,"tag":208,"props":1086,"children":1087},{"class":210,"line":211},[1088,1093,1098,1103],{"type":172,"tag":208,"props":1089,"children":1090},{"style":766},[1091],{"type":178,"value":1092},"function",{"type":172,"tag":208,"props":1094,"children":1095},{"style":454},[1096],{"type":178,"value":1097}," A",{"type":172,"tag":208,"props":1099,"children":1100},{"style":448},[1101],{"type":178,"value":1102}," ()",{"type":172,"tag":208,"props":1104,"children":1105},{"style":448},[1106],{"type":178,"value":1107}," {\n",{"type":172,"tag":208,"props":1109,"children":1110},{"class":210,"line":501},[1111,1117,1121,1126,1131,1135,1139],{"type":172,"tag":208,"props":1112,"children":1114},{"style":1113},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1115],{"type":178,"value":1116},"  this",{"type":172,"tag":208,"props":1118,"children":1119},{"style":448},[1120],{"type":178,"value":451},{"type":172,"tag":208,"props":1122,"children":1123},{"style":442},[1124],{"type":178,"value":1125},"b",{"type":172,"tag":208,"props":1127,"children":1128},{"style":238},[1129],{"type":178,"value":1130}," =",{"type":172,"tag":208,"props":1132,"children":1133},{"style":221},[1134],{"type":178,"value":224},{"type":172,"tag":208,"props":1136,"children":1137},{"style":227},[1138],{"type":178,"value":1125},{"type":172,"tag":208,"props":1140,"children":1141},{"style":221},[1142],{"type":178,"value":1143},"'\n",{"type":172,"tag":208,"props":1145,"children":1147},{"class":210,"line":1146},3,[1148,1153,1157,1162,1167,1171,1176,1180],{"type":172,"tag":208,"props":1149,"children":1150},{"style":442},[1151],{"type":178,"value":1152},"  console",{"type":172,"tag":208,"props":1154,"children":1155},{"style":448},[1156],{"type":178,"value":451},{"type":172,"tag":208,"props":1158,"children":1159},{"style":454},[1160],{"type":178,"value":1161},"log",{"type":172,"tag":208,"props":1163,"children":1165},{"style":1164},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1166],{"type":178,"value":462},{"type":172,"tag":208,"props":1168,"children":1169},{"style":221},[1170],{"type":178,"value":235},{"type":172,"tag":208,"props":1172,"children":1173},{"style":227},[1174],{"type":178,"value":1175},"A().b",{"type":172,"tag":208,"props":1177,"children":1178},{"style":221},[1179],{"type":178,"value":235},{"type":172,"tag":208,"props":1181,"children":1182},{"style":1164},[1183],{"type":178,"value":1184},")\n",{"type":172,"tag":208,"props":1186,"children":1188},{"class":210,"line":1187},4,[1189],{"type":172,"tag":208,"props":1190,"children":1191},{"style":448},[1192],{"type":178,"value":1193},"}\n",{"type":172,"tag":208,"props":1195,"children":1197},{"class":210,"line":1196},5,[1198,1204,1208,1212,1216,1221,1225],{"type":172,"tag":208,"props":1199,"children":1201},{"style":1200},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1202],{"type":178,"value":1203},"A",{"type":172,"tag":208,"props":1205,"children":1206},{"style":448},[1207],{"type":178,"value":451},{"type":172,"tag":208,"props":1209,"children":1210},{"style":454},[1211],{"type":178,"value":1125},{"type":172,"tag":208,"props":1213,"children":1214},{"style":238},[1215],{"type":178,"value":1130},{"type":172,"tag":208,"props":1217,"children":1218},{"style":766},[1219],{"type":178,"value":1220}," function",{"type":172,"tag":208,"props":1222,"children":1223},{"style":448},[1224],{"type":178,"value":1102},{"type":172,"tag":208,"props":1226,"children":1227},{"style":448},[1228],{"type":178,"value":1107},{"type":172,"tag":208,"props":1230,"children":1232},{"class":210,"line":1231},6,[1233,1237,1241,1245,1249,1253,1258,1262],{"type":172,"tag":208,"props":1234,"children":1235},{"style":442},[1236],{"type":178,"value":1152},{"type":172,"tag":208,"props":1238,"children":1239},{"style":448},[1240],{"type":178,"value":451},{"type":172,"tag":208,"props":1242,"children":1243},{"style":454},[1244],{"type":178,"value":1161},{"type":172,"tag":208,"props":1246,"children":1247},{"style":1164},[1248],{"type":178,"value":462},{"type":172,"tag":208,"props":1250,"children":1251},{"style":221},[1252],{"type":178,"value":235},{"type":172,"tag":208,"props":1254,"children":1255},{"style":227},[1256],{"type":178,"value":1257},"A.b",{"type":172,"tag":208,"props":1259,"children":1260},{"style":221},[1261],{"type":178,"value":235},{"type":172,"tag":208,"props":1263,"children":1264},{"style":1164},[1265],{"type":178,"value":1184},{"type":172,"tag":208,"props":1267,"children":1269},{"class":210,"line":1268},7,[1270],{"type":172,"tag":208,"props":1271,"children":1272},{"style":448},[1273],{"type":178,"value":1193},{"type":172,"tag":208,"props":1275,"children":1277},{"class":210,"line":1276},8,[1278,1283,1287,1291,1296],{"type":172,"tag":208,"props":1279,"children":1280},{"style":238},[1281],{"type":178,"value":1282},"new",{"type":172,"tag":208,"props":1284,"children":1285},{"style":1200},[1286],{"type":178,"value":1097},{"type":172,"tag":208,"props":1288,"children":1289},{"style":448},[1290],{"type":178,"value":451},{"type":172,"tag":208,"props":1292,"children":1293},{"style":442},[1294],{"type":178,"value":1295},"b ",{"type":172,"tag":208,"props":1297,"children":1298},{"style":495},[1299],{"type":178,"value":1300},"// A.b\n",{"type":172,"tag":208,"props":1302,"children":1304},{"class":210,"line":1303},9,[1305,1309,1313,1317,1321,1325],{"type":172,"tag":208,"props":1306,"children":1307},{"style":238},[1308],{"type":178,"value":1282},{"type":172,"tag":208,"props":1310,"children":1311},{"style":454},[1312],{"type":178,"value":1097},{"type":172,"tag":208,"props":1314,"children":1315},{"style":442},[1316],{"type":178,"value":815},{"type":172,"tag":208,"props":1318,"children":1319},{"style":448},[1320],{"type":178,"value":451},{"type":172,"tag":208,"props":1322,"children":1323},{"style":442},[1324],{"type":178,"value":1295},{"type":172,"tag":208,"props":1326,"children":1327},{"style":495},[1328],{"type":178,"value":1329},"// A().b\n",{"type":172,"tag":180,"props":1331,"children":1333},{"id":1332},"语句",[1334],{"type":178,"value":1332},{"type":172,"tag":186,"props":1336,"children":1337},{},[1338],{"type":178,"value":1339},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":172,"tag":186,"props":1341,"children":1342},{},[1343],{"type":178,"value":1344},"需要注意的点：",{"type":172,"tag":286,"props":1346,"children":1347},{},[1348,1353,1358],{"type":172,"tag":290,"props":1349,"children":1350},{},[1351],{"type":178,"value":1352},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":172,"tag":290,"props":1354,"children":1355},{},[1356],{"type":178,"value":1357},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":172,"tag":290,"props":1359,"children":1360},{},[1361],{"type":178,"value":1362},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":172,"tag":186,"props":1364,"children":1365},{},[1366],{"type":178,"value":1367},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":172,"tag":197,"props":1369,"children":1371},{"className":430,"code":1370,"language":432,"meta":166,"style":166},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1372],{"type":172,"tag":204,"props":1373,"children":1374},{"__ignoreMap":166},[1375,1406,1433],{"type":172,"tag":208,"props":1376,"children":1377},{"class":210,"line":211},[1378,1382,1387,1391,1397,1402],{"type":172,"tag":208,"props":1379,"children":1380},{"style":766},[1381],{"type":178,"value":1092},{"type":172,"tag":208,"props":1383,"children":1384},{"style":454},[1385],{"type":178,"value":1386}," log",{"type":172,"tag":208,"props":1388,"children":1389},{"style":448},[1390],{"type":178,"value":462},{"type":172,"tag":208,"props":1392,"children":1394},{"style":1393},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1395],{"type":178,"value":1396},"arg",{"type":172,"tag":208,"props":1398,"children":1399},{"style":448},[1400],{"type":178,"value":1401},")",{"type":172,"tag":208,"props":1403,"children":1404},{"style":448},[1405],{"type":178,"value":1107},{"type":172,"tag":208,"props":1407,"children":1408},{"class":210,"line":501},[1409,1413,1417,1421,1425,1429],{"type":172,"tag":208,"props":1410,"children":1411},{"style":442},[1412],{"type":178,"value":1152},{"type":172,"tag":208,"props":1414,"children":1415},{"style":448},[1416],{"type":178,"value":451},{"type":172,"tag":208,"props":1418,"children":1419},{"style":454},[1420],{"type":178,"value":1161},{"type":172,"tag":208,"props":1422,"children":1423},{"style":1164},[1424],{"type":178,"value":462},{"type":172,"tag":208,"props":1426,"children":1427},{"style":442},[1428],{"type":178,"value":1396},{"type":172,"tag":208,"props":1430,"children":1431},{"style":1164},[1432],{"type":178,"value":1184},{"type":172,"tag":208,"props":1434,"children":1435},{"class":210,"line":1146},[1436,1441,1445,1449],{"type":172,"tag":208,"props":1437,"children":1438},{"style":448},[1439],{"type":178,"value":1440},"}",{"type":172,"tag":208,"props":1442,"children":1443},{"style":442},[1444],{"type":178,"value":462},{"type":172,"tag":208,"props":1446,"children":1447},{"style":470},[1448],{"type":178,"value":305},{"type":172,"tag":208,"props":1450,"children":1451},{"style":442},[1452],{"type":178,"value":1184},{"type":172,"tag":186,"props":1454,"children":1455},{},[1456],{"type":178,"value":1457},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":172,"tag":197,"props":1459,"children":1461},{"className":430,"code":1460,"language":432,"meta":166,"style":166},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1462],{"type":172,"tag":204,"props":1463,"children":1464},{"__ignoreMap":166},[1465,1517,1555,1582],{"type":172,"tag":208,"props":1466,"children":1467},{"class":210,"line":211},[1468,1474,1479,1484,1488,1493,1497,1502,1507,1512],{"type":172,"tag":208,"props":1469,"children":1471},{"style":1470},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1472],{"type":178,"value":1473},"try",{"type":172,"tag":208,"props":1475,"children":1476},{"style":448},[1477],{"type":178,"value":1478}," {",{"type":172,"tag":208,"props":1480,"children":1481},{"style":1470},[1482],{"type":178,"value":1483}," throw",{"type":172,"tag":208,"props":1485,"children":1486},{"style":221},[1487],{"type":178,"value":224},{"type":172,"tag":208,"props":1489,"children":1490},{"style":227},[1491],{"type":178,"value":1492},"test",{"type":172,"tag":208,"props":1494,"children":1495},{"style":221},[1496],{"type":178,"value":235},{"type":172,"tag":208,"props":1498,"children":1499},{"style":448},[1500],{"type":178,"value":1501}," }",{"type":172,"tag":208,"props":1503,"children":1504},{"style":1470},[1505],{"type":178,"value":1506}," catch",{"type":172,"tag":208,"props":1508,"children":1509},{"style":442},[1510],{"type":178,"value":1511}," (e) ",{"type":172,"tag":208,"props":1513,"children":1514},{"style":448},[1515],{"type":178,"value":1516},"{\n",{"type":172,"tag":208,"props":1518,"children":1519},{"class":210,"line":501},[1520,1524,1528,1532,1536,1541,1545,1550],{"type":172,"tag":208,"props":1521,"children":1522},{"style":442},[1523],{"type":178,"value":1152},{"type":172,"tag":208,"props":1525,"children":1526},{"style":448},[1527],{"type":178,"value":451},{"type":172,"tag":208,"props":1529,"children":1530},{"style":454},[1531],{"type":178,"value":1161},{"type":172,"tag":208,"props":1533,"children":1534},{"style":1164},[1535],{"type":178,"value":462},{"type":172,"tag":208,"props":1537,"children":1538},{"style":442},[1539],{"type":178,"value":1540},"e",{"type":172,"tag":208,"props":1542,"children":1543},{"style":1164},[1544],{"type":178,"value":1401},{"type":172,"tag":208,"props":1546,"children":1547},{"style":448},[1548],{"type":178,"value":1549},";",{"type":172,"tag":208,"props":1551,"children":1552},{"style":495},[1553],{"type":178,"value":1554}," // test\n",{"type":172,"tag":208,"props":1556,"children":1557},{"class":210,"line":1146},[1558,1563,1568,1572,1577],{"type":172,"tag":208,"props":1559,"children":1560},{"style":766},[1561],{"type":178,"value":1562},"  var",{"type":172,"tag":208,"props":1564,"children":1565},{"style":442},[1566],{"type":178,"value":1567}," e",{"type":172,"tag":208,"props":1569,"children":1570},{"style":238},[1571],{"type":178,"value":1130},{"type":172,"tag":208,"props":1573,"children":1574},{"style":470},[1575],{"type":178,"value":1576}," 1",{"type":172,"tag":208,"props":1578,"children":1579},{"style":448},[1580],{"type":178,"value":1581},";\n",{"type":172,"tag":208,"props":1583,"children":1584},{"class":210,"line":1187},[1585],{"type":172,"tag":208,"props":1586,"children":1587},{"style":448},[1588],{"type":178,"value":1193},{"type":172,"tag":186,"props":1590,"children":1591},{},[1592],{"type":178,"value":1593},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":172,"tag":186,"props":1595,"children":1596},{},[1597],{"type":178,"value":1598},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":172,"tag":197,"props":1600,"children":1602},{"className":430,"code":1601,"language":432,"meta":166,"style":166},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1603],{"type":172,"tag":204,"props":1604,"children":1605},{"__ignoreMap":166},[1606,1614,1687,1753,1797,1839,1847,1854,1862,1877,1937,1998,2039,2080,2089,2097],{"type":172,"tag":208,"props":1607,"children":1608},{"class":210,"line":211},[1609],{"type":172,"tag":208,"props":1610,"children":1611},{"style":495},[1612],{"type":178,"value":1613},"// it works !\n",{"type":172,"tag":208,"props":1615,"children":1616},{"class":210,"line":501},[1617,1622,1627,1632,1637,1642,1646,1650,1655,1660,1665,1669,1674,1679,1683],{"type":172,"tag":208,"props":1618,"children":1620},{"style":1619},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1621],{"type":178,"value":1492},{"type":172,"tag":208,"props":1623,"children":1624},{"style":448},[1625],{"type":178,"value":1626},":",{"type":172,"tag":208,"props":1628,"children":1629},{"style":1470},[1630],{"type":178,"value":1631}," for",{"type":172,"tag":208,"props":1633,"children":1634},{"style":442},[1635],{"type":178,"value":1636}," (i ",{"type":172,"tag":208,"props":1638,"children":1639},{"style":238},[1640],{"type":178,"value":1641},"=",{"type":172,"tag":208,"props":1643,"children":1644},{"style":470},[1645],{"type":178,"value":1576},{"type":172,"tag":208,"props":1647,"children":1648},{"style":448},[1649],{"type":178,"value":1549},{"type":172,"tag":208,"props":1651,"children":1652},{"style":442},[1653],{"type":178,"value":1654}," i ",{"type":172,"tag":208,"props":1656,"children":1657},{"style":238},[1658],{"type":178,"value":1659},"\u003C",{"type":172,"tag":208,"props":1661,"children":1662},{"style":470},[1663],{"type":178,"value":1664}," 3",{"type":172,"tag":208,"props":1666,"children":1667},{"style":448},[1668],{"type":178,"value":1549},{"type":172,"tag":208,"props":1670,"children":1671},{"style":442},[1672],{"type":178,"value":1673}," i",{"type":172,"tag":208,"props":1675,"children":1676},{"style":238},[1677],{"type":178,"value":1678},"++",{"type":172,"tag":208,"props":1680,"children":1681},{"style":442},[1682],{"type":178,"value":492},{"type":172,"tag":208,"props":1684,"children":1685},{"style":448},[1686],{"type":178,"value":1516},{"type":172,"tag":208,"props":1688,"children":1689},{"class":210,"line":1146},[1690,1695,1700,1705,1709,1714,1718,1723,1728,1733,1737,1741,1745,1749],{"type":172,"tag":208,"props":1691,"children":1692},{"style":1470},[1693],{"type":178,"value":1694},"  for",{"type":172,"tag":208,"props":1696,"children":1697},{"style":1164},[1698],{"type":178,"value":1699}," (",{"type":172,"tag":208,"props":1701,"children":1702},{"style":442},[1703],{"type":178,"value":1704},"j",{"type":172,"tag":208,"props":1706,"children":1707},{"style":238},[1708],{"type":178,"value":1130},{"type":172,"tag":208,"props":1710,"children":1711},{"style":470},[1712],{"type":178,"value":1713}," 5",{"type":172,"tag":208,"props":1715,"children":1716},{"style":448},[1717],{"type":178,"value":1549},{"type":172,"tag":208,"props":1719,"children":1720},{"style":442},[1721],{"type":178,"value":1722}," j",{"type":172,"tag":208,"props":1724,"children":1725},{"style":238},[1726],{"type":178,"value":1727}," \u003C",{"type":172,"tag":208,"props":1729,"children":1730},{"style":470},[1731],{"type":178,"value":1732}," 8",{"type":172,"tag":208,"props":1734,"children":1735},{"style":448},[1736],{"type":178,"value":1549},{"type":172,"tag":208,"props":1738,"children":1739},{"style":442},[1740],{"type":178,"value":1722},{"type":172,"tag":208,"props":1742,"children":1743},{"style":238},[1744],{"type":178,"value":1678},{"type":172,"tag":208,"props":1746,"children":1747},{"style":1164},[1748],{"type":178,"value":492},{"type":172,"tag":208,"props":1750,"children":1751},{"style":448},[1752],{"type":178,"value":1516},{"type":172,"tag":208,"props":1754,"children":1755},{"class":210,"line":1187},[1756,1761,1765,1769,1774,1779,1783,1788,1793],{"type":172,"tag":208,"props":1757,"children":1758},{"style":1470},[1759],{"type":178,"value":1760},"    if",{"type":172,"tag":208,"props":1762,"children":1763},{"style":1164},[1764],{"type":178,"value":1699},{"type":172,"tag":208,"props":1766,"children":1767},{"style":442},[1768],{"type":178,"value":1704},{"type":172,"tag":208,"props":1770,"children":1771},{"style":238},[1772],{"type":178,"value":1773}," ===",{"type":172,"tag":208,"props":1775,"children":1776},{"style":470},[1777],{"type":178,"value":1778}," 6",{"type":172,"tag":208,"props":1780,"children":1781},{"style":1164},[1782],{"type":178,"value":492},{"type":172,"tag":208,"props":1784,"children":1785},{"style":1470},[1786],{"type":178,"value":1787},"continue",{"type":172,"tag":208,"props":1789,"children":1790},{"style":1619},[1791],{"type":178,"value":1792}," test",{"type":172,"tag":208,"props":1794,"children":1795},{"style":448},[1796],{"type":178,"value":1581},{"type":172,"tag":208,"props":1798,"children":1799},{"class":210,"line":1196},[1800,1805,1810,1814,1818,1822,1827,1831,1835],{"type":172,"tag":208,"props":1801,"children":1802},{"style":1470},[1803],{"type":178,"value":1804},"    else",{"type":172,"tag":208,"props":1806,"children":1807},{"style":442},[1808],{"type":178,"value":1809}," console",{"type":172,"tag":208,"props":1811,"children":1812},{"style":448},[1813],{"type":178,"value":451},{"type":172,"tag":208,"props":1815,"children":1816},{"style":454},[1817],{"type":178,"value":1161},{"type":172,"tag":208,"props":1819,"children":1820},{"style":1164},[1821],{"type":178,"value":462},{"type":172,"tag":208,"props":1823,"children":1824},{"style":442},[1825],{"type":178,"value":1826},"i",{"type":172,"tag":208,"props":1828,"children":1829},{"style":448},[1830],{"type":178,"value":478},{"type":172,"tag":208,"props":1832,"children":1833},{"style":442},[1834],{"type":178,"value":1722},{"type":172,"tag":208,"props":1836,"children":1837},{"style":1164},[1838],{"type":178,"value":1184},{"type":172,"tag":208,"props":1840,"children":1841},{"class":210,"line":1231},[1842],{"type":172,"tag":208,"props":1843,"children":1844},{"style":448},[1845],{"type":178,"value":1846},"  }\n",{"type":172,"tag":208,"props":1848,"children":1849},{"class":210,"line":1268},[1850],{"type":172,"tag":208,"props":1851,"children":1852},{"style":448},[1853],{"type":178,"value":1193},{"type":172,"tag":208,"props":1855,"children":1856},{"class":210,"line":1276},[1857],{"type":172,"tag":208,"props":1858,"children":1859},{"style":495},[1860],{"type":178,"value":1861},"// SyntaxError !\n",{"type":172,"tag":208,"props":1863,"children":1864},{"class":210,"line":1303},[1865,1869,1873],{"type":172,"tag":208,"props":1866,"children":1867},{"style":1619},[1868],{"type":178,"value":1492},{"type":172,"tag":208,"props":1870,"children":1871},{"style":448},[1872],{"type":178,"value":1626},{"type":172,"tag":208,"props":1874,"children":1875},{"style":448},[1876],{"type":178,"value":1107},{"type":172,"tag":208,"props":1878,"children":1880},{"class":210,"line":1879},10,[1881,1885,1889,1893,1897,1901,1905,1909,1913,1917,1921,1925,1929,1933],{"type":172,"tag":208,"props":1882,"children":1883},{"style":1470},[1884],{"type":178,"value":1694},{"type":172,"tag":208,"props":1886,"children":1887},{"style":1164},[1888],{"type":178,"value":1699},{"type":172,"tag":208,"props":1890,"children":1891},{"style":442},[1892],{"type":178,"value":1826},{"type":172,"tag":208,"props":1894,"children":1895},{"style":238},[1896],{"type":178,"value":1130},{"type":172,"tag":208,"props":1898,"children":1899},{"style":470},[1900],{"type":178,"value":1576},{"type":172,"tag":208,"props":1902,"children":1903},{"style":448},[1904],{"type":178,"value":1549},{"type":172,"tag":208,"props":1906,"children":1907},{"style":442},[1908],{"type":178,"value":1673},{"type":172,"tag":208,"props":1910,"children":1911},{"style":238},[1912],{"type":178,"value":1727},{"type":172,"tag":208,"props":1914,"children":1915},{"style":470},[1916],{"type":178,"value":1664},{"type":172,"tag":208,"props":1918,"children":1919},{"style":448},[1920],{"type":178,"value":1549},{"type":172,"tag":208,"props":1922,"children":1923},{"style":442},[1924],{"type":178,"value":1673},{"type":172,"tag":208,"props":1926,"children":1927},{"style":238},[1928],{"type":178,"value":1678},{"type":172,"tag":208,"props":1930,"children":1931},{"style":1164},[1932],{"type":178,"value":492},{"type":172,"tag":208,"props":1934,"children":1935},{"style":448},[1936],{"type":178,"value":1516},{"type":172,"tag":208,"props":1938,"children":1940},{"class":210,"line":1939},11,[1941,1946,1950,1954,1958,1962,1966,1970,1974,1978,1982,1986,1990,1994],{"type":172,"tag":208,"props":1942,"children":1943},{"style":1470},[1944],{"type":178,"value":1945},"    for",{"type":172,"tag":208,"props":1947,"children":1948},{"style":1164},[1949],{"type":178,"value":1699},{"type":172,"tag":208,"props":1951,"children":1952},{"style":442},[1953],{"type":178,"value":1704},{"type":172,"tag":208,"props":1955,"children":1956},{"style":238},[1957],{"type":178,"value":1130},{"type":172,"tag":208,"props":1959,"children":1960},{"style":470},[1961],{"type":178,"value":1713},{"type":172,"tag":208,"props":1963,"children":1964},{"style":448},[1965],{"type":178,"value":1549},{"type":172,"tag":208,"props":1967,"children":1968},{"style":442},[1969],{"type":178,"value":1722},{"type":172,"tag":208,"props":1971,"children":1972},{"style":238},[1973],{"type":178,"value":1727},{"type":172,"tag":208,"props":1975,"children":1976},{"style":470},[1977],{"type":178,"value":1732},{"type":172,"tag":208,"props":1979,"children":1980},{"style":448},[1981],{"type":178,"value":1549},{"type":172,"tag":208,"props":1983,"children":1984},{"style":442},[1985],{"type":178,"value":1722},{"type":172,"tag":208,"props":1987,"children":1988},{"style":238},[1989],{"type":178,"value":1678},{"type":172,"tag":208,"props":1991,"children":1992},{"style":1164},[1993],{"type":178,"value":492},{"type":172,"tag":208,"props":1995,"children":1996},{"style":448},[1997],{"type":178,"value":1516},{"type":172,"tag":208,"props":1999,"children":2001},{"class":210,"line":2000},12,[2002,2007,2011,2015,2019,2023,2027,2031,2035],{"type":172,"tag":208,"props":2003,"children":2004},{"style":1470},[2005],{"type":178,"value":2006},"      if",{"type":172,"tag":208,"props":2008,"children":2009},{"style":1164},[2010],{"type":178,"value":1699},{"type":172,"tag":208,"props":2012,"children":2013},{"style":442},[2014],{"type":178,"value":1704},{"type":172,"tag":208,"props":2016,"children":2017},{"style":238},[2018],{"type":178,"value":1773},{"type":172,"tag":208,"props":2020,"children":2021},{"style":470},[2022],{"type":178,"value":1778},{"type":172,"tag":208,"props":2024,"children":2025},{"style":1164},[2026],{"type":178,"value":492},{"type":172,"tag":208,"props":2028,"children":2029},{"style":1470},[2030],{"type":178,"value":1787},{"type":172,"tag":208,"props":2032,"children":2033},{"style":1619},[2034],{"type":178,"value":1792},{"type":172,"tag":208,"props":2036,"children":2037},{"style":448},[2038],{"type":178,"value":1581},{"type":172,"tag":208,"props":2040,"children":2042},{"class":210,"line":2041},13,[2043,2048,2052,2056,2060,2064,2068,2072,2076],{"type":172,"tag":208,"props":2044,"children":2045},{"style":1470},[2046],{"type":178,"value":2047},"      else",{"type":172,"tag":208,"props":2049,"children":2050},{"style":442},[2051],{"type":178,"value":1809},{"type":172,"tag":208,"props":2053,"children":2054},{"style":448},[2055],{"type":178,"value":451},{"type":172,"tag":208,"props":2057,"children":2058},{"style":454},[2059],{"type":178,"value":1161},{"type":172,"tag":208,"props":2061,"children":2062},{"style":1164},[2063],{"type":178,"value":462},{"type":172,"tag":208,"props":2065,"children":2066},{"style":442},[2067],{"type":178,"value":1826},{"type":172,"tag":208,"props":2069,"children":2070},{"style":448},[2071],{"type":178,"value":478},{"type":172,"tag":208,"props":2073,"children":2074},{"style":442},[2075],{"type":178,"value":1722},{"type":172,"tag":208,"props":2077,"children":2078},{"style":1164},[2079],{"type":178,"value":1184},{"type":172,"tag":208,"props":2081,"children":2083},{"class":210,"line":2082},14,[2084],{"type":172,"tag":208,"props":2085,"children":2086},{"style":448},[2087],{"type":178,"value":2088},"    }\n",{"type":172,"tag":208,"props":2090,"children":2092},{"class":210,"line":2091},15,[2093],{"type":172,"tag":208,"props":2094,"children":2095},{"style":448},[2096],{"type":178,"value":1846},{"type":172,"tag":208,"props":2098,"children":2100},{"class":210,"line":2099},16,[2101],{"type":172,"tag":208,"props":2102,"children":2103},{"style":448},[2104],{"type":178,"value":1193},{"type":172,"tag":186,"props":2106,"children":2107},{},[2108],{"type":178,"value":2109},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":172,"tag":186,"props":2111,"children":2112},{},[2113],{"type":178,"value":2114},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":172,"tag":180,"props":2116,"children":2118},{"id":2117},"模块",[2119],{"type":178,"value":2117},{"type":172,"tag":186,"props":2121,"children":2122},{},[2123],{"type":178,"value":2124},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":172,"tag":197,"props":2126,"children":2128},{"className":430,"code":2127,"language":432,"meta":166,"style":166},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2129],{"type":172,"tag":204,"props":2130,"children":2131},{"__ignoreMap":166},[2132,2180],{"type":172,"tag":208,"props":2133,"children":2134},{"class":210,"line":211},[2135,2140,2145,2149,2153,2158,2162,2167,2171,2176],{"type":172,"tag":208,"props":2136,"children":2137},{"style":1470},[2138],{"type":178,"value":2139},"import",{"type":172,"tag":208,"props":2141,"children":2142},{"style":442},[2143],{"type":178,"value":2144}," defaultExport",{"type":172,"tag":208,"props":2146,"children":2147},{"style":448},[2148],{"type":178,"value":478},{"type":172,"tag":208,"props":2150,"children":2151},{"style":448},[2152],{"type":178,"value":1478},{"type":172,"tag":208,"props":2154,"children":2155},{"style":442},[2156],{"type":178,"value":2157}," toolA",{"type":172,"tag":208,"props":2159,"children":2160},{"style":448},[2161],{"type":178,"value":1501},{"type":172,"tag":208,"props":2163,"children":2164},{"style":1470},[2165],{"type":178,"value":2166}," from",{"type":172,"tag":208,"props":2168,"children":2169},{"style":221},[2170],{"type":178,"value":224},{"type":172,"tag":208,"props":2172,"children":2173},{"style":227},[2174],{"type":178,"value":2175},"test.mjs",{"type":172,"tag":208,"props":2177,"children":2178},{"style":221},[2179],{"type":178,"value":1143},{"type":172,"tag":208,"props":2181,"children":2182},{"class":210,"line":501},[2183,2187,2191,2195,2200,2205,2210,2215,2219,2223],{"type":172,"tag":208,"props":2184,"children":2185},{"style":1470},[2186],{"type":178,"value":2139},{"type":172,"tag":208,"props":2188,"children":2189},{"style":442},[2190],{"type":178,"value":2144},{"type":172,"tag":208,"props":2192,"children":2193},{"style":448},[2194],{"type":178,"value":478},{"type":172,"tag":208,"props":2196,"children":2197},{"style":521},[2198],{"type":178,"value":2199}," *",{"type":172,"tag":208,"props":2201,"children":2202},{"style":1470},[2203],{"type":178,"value":2204}," as",{"type":172,"tag":208,"props":2206,"children":2207},{"style":442},[2208],{"type":178,"value":2209}," namespace ",{"type":172,"tag":208,"props":2211,"children":2212},{"style":1470},[2213],{"type":178,"value":2214},"from",{"type":172,"tag":208,"props":2216,"children":2217},{"style":221},[2218],{"type":178,"value":224},{"type":172,"tag":208,"props":2220,"children":2221},{"style":227},[2222],{"type":178,"value":2175},{"type":172,"tag":208,"props":2224,"children":2225},{"style":221},[2226],{"type":178,"value":1143},{"type":172,"tag":186,"props":2228,"children":2229},{},[2230],{"type":178,"value":2231},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":172,"tag":186,"props":2233,"children":2234},{},[2235],{"type":178,"value":2236},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":172,"tag":186,"props":2238,"children":2239},{},[2240],{"type":178,"value":2241},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":172,"tag":180,"props":2243,"children":2245},{"id":2244},"严格模式",[2246],{"type":178,"value":2244},{"type":172,"tag":186,"props":2248,"children":2249},{},[2250],{"type":178,"value":2251},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":172,"tag":186,"props":2253,"children":2254},{},[2255],{"type":178,"value":2256},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":172,"tag":186,"props":2258,"children":2259},{},[2260],{"type":178,"value":2261},"总的来说，严格模式一共有七条限制：",{"type":172,"tag":286,"props":2263,"children":2264},{},[2265,2270,2275,2280,2285,2290,2295,2300,2305,2310],{"type":172,"tag":290,"props":2266,"children":2267},{},[2268],{"type":178,"value":2269},"对象字面量中不能有相同的属性声明",{"type":172,"tag":290,"props":2271,"children":2272},{},[2273],{"type":178,"value":2274},"函数实参列表中不能有同名参数",{"type":172,"tag":290,"props":2276,"children":2277},{},[2278],{"type":178,"value":2279},"不能声明、重写或删除 eval、arguments 标识符",{"type":172,"tag":290,"props":2281,"children":2282},{},[2283],{"type":178,"value":2284},"不允许使用八进制数字字面量",{"type":172,"tag":290,"props":2286,"children":2287},{},[2288],{"type":178,"value":2289},"不能删除显式声明的标识符、名字或具名函数",{"type":172,"tag":290,"props":2291,"children":2292},{},[2293],{"type":178,"value":2294},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":172,"tag":290,"props":2296,"children":2297},{},[2298],{"type":178,"value":2299},"禁用 with 语句",{"type":172,"tag":290,"props":2301,"children":2302},{},[2303],{"type":178,"value":2304},"禁用隐式声明",{"type":172,"tag":290,"props":2306,"children":2307},{},[2308],{"type":178,"value":2309},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":172,"tag":290,"props":2311,"children":2312},{},[2313],{"type":178,"value":2314},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":172,"tag":186,"props":2316,"children":2317},{},[2318],{"type":178,"value":2319},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":172,"tag":286,"props":2321,"children":2322},{},[2323,2328],{"type":172,"tag":290,"props":2324,"children":2325},{},[2326],{"type":178,"value":2327},"间接调用 eval 函数",{"type":172,"tag":290,"props":2329,"children":2330},{},[2331],{"type":178,"value":2332},"使用 new Function 构造的新函数",{"type":172,"tag":180,"props":2334,"children":2336},{"id":2335},"运算符的二义性",[2337],{"type":178,"value":2335},{"type":172,"tag":186,"props":2339,"children":2340},{},[2341],{"type":178,"value":2342},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":172,"tag":186,"props":2344,"children":2345},{},[2346],{"type":178,"value":2347},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":172,"tag":186,"props":2349,"children":2350},{},[2351],{"type":178,"value":2352},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":172,"tag":186,"props":2354,"children":2355},{},[2356],{"type":178,"value":2357},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":172,"tag":173,"props":2359,"children":2361},{"id":2360},"面向对象语言特性",[2362],{"type":178,"value":2360},{"type":172,"tag":180,"props":2364,"children":2366},{"id":2365},"语法综述-1",[2367],{"type":178,"value":182},{"type":172,"tag":186,"props":2369,"children":2370},{},[2371],{"type":178,"value":2372},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":172,"tag":186,"props":2374,"children":2375},{},[2376],{"type":178,"value":2377},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":172,"tag":186,"props":2379,"children":2380},{},[2381],{"type":178,"value":2382},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":172,"tag":186,"props":2384,"children":2385},{},[2386],{"type":178,"value":2387},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":172,"tag":197,"props":2389,"children":2391},{"className":430,"code":2390,"language":432,"meta":166,"style":166},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2392],{"type":172,"tag":204,"props":2393,"children":2394},{"__ignoreMap":166},[2395,2416,2443,2472,2480,2497,2510,2517,2525,2533,2557],{"type":172,"tag":208,"props":2396,"children":2397},{"class":210,"line":211},[2398,2403,2408,2412],{"type":172,"tag":208,"props":2399,"children":2400},{"style":766},[2401],{"type":178,"value":2402},"var",{"type":172,"tag":208,"props":2404,"children":2405},{"style":442},[2406],{"type":178,"value":2407}," obj",{"type":172,"tag":208,"props":2409,"children":2410},{"style":238},[2411],{"type":178,"value":1641},{"type":172,"tag":208,"props":2413,"children":2414},{"style":448},[2415],{"type":178,"value":1516},{"type":172,"tag":208,"props":2417,"children":2418},{"class":210,"line":501},[2419,2424,2429,2433,2438],{"type":172,"tag":208,"props":2420,"children":2421},{"style":766},[2422],{"type":178,"value":2423},"  set",{"type":172,"tag":208,"props":2425,"children":2427},{"style":2426},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2428],{"type":178,"value":1792},{"type":172,"tag":208,"props":2430,"children":2431},{"style":448},[2432],{"type":178,"value":462},{"type":172,"tag":208,"props":2434,"children":2435},{"style":1393},[2436],{"type":178,"value":2437},"x",{"type":172,"tag":208,"props":2439,"children":2440},{"style":448},[2441],{"type":178,"value":2442},"){\n",{"type":172,"tag":208,"props":2444,"children":2445},{"class":210,"line":1146},[2446,2451,2455,2459,2464,2468],{"type":172,"tag":208,"props":2447,"children":2448},{"style":442},[2449],{"type":178,"value":2450},"    c",{"type":172,"tag":208,"props":2452,"children":2453},{"style":238},[2454],{"type":178,"value":1641},{"type":172,"tag":208,"props":2456,"children":2457},{"style":221},[2458],{"type":178,"value":235},{"type":172,"tag":208,"props":2460,"children":2461},{"style":227},[2462],{"type":178,"value":2463},"other",{"type":172,"tag":208,"props":2465,"children":2466},{"style":221},[2467],{"type":178,"value":235},{"type":172,"tag":208,"props":2469,"children":2470},{"style":448},[2471],{"type":178,"value":1581},{"type":172,"tag":208,"props":2473,"children":2474},{"class":210,"line":1187},[2475],{"type":172,"tag":208,"props":2476,"children":2477},{"style":448},[2478],{"type":178,"value":2479},"  },\n",{"type":172,"tag":208,"props":2481,"children":2482},{"class":210,"line":1196},[2483,2488,2492],{"type":172,"tag":208,"props":2484,"children":2485},{"style":766},[2486],{"type":178,"value":2487},"  get",{"type":172,"tag":208,"props":2489,"children":2490},{"style":2426},[2491],{"type":178,"value":1792},{"type":172,"tag":208,"props":2493,"children":2494},{"style":448},[2495],{"type":178,"value":2496},"(){\n",{"type":172,"tag":208,"props":2498,"children":2499},{"class":210,"line":1231},[2500,2505],{"type":172,"tag":208,"props":2501,"children":2502},{"style":1470},[2503],{"type":178,"value":2504},"    return",{"type":172,"tag":208,"props":2506,"children":2507},{"style":442},[2508],{"type":178,"value":2509}," c\n",{"type":172,"tag":208,"props":2511,"children":2512},{"class":210,"line":1268},[2513],{"type":172,"tag":208,"props":2514,"children":2515},{"style":448},[2516],{"type":178,"value":2479},{"type":172,"tag":208,"props":2518,"children":2519},{"class":210,"line":1276},[2520],{"type":172,"tag":208,"props":2521,"children":2522},{"style":495},[2523],{"type":178,"value":2524},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":172,"tag":208,"props":2526,"children":2527},{"class":210,"line":1303},[2528],{"type":172,"tag":208,"props":2529,"children":2530},{"style":495},[2531],{"type":178,"value":2532},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":172,"tag":208,"props":2534,"children":2535},{"class":210,"line":1879},[2536,2541,2545,2549,2553],{"type":172,"tag":208,"props":2537,"children":2538},{"style":1164},[2539],{"type":178,"value":2540},"  test",{"type":172,"tag":208,"props":2542,"children":2543},{"style":448},[2544],{"type":178,"value":1626},{"type":172,"tag":208,"props":2546,"children":2547},{"style":221},[2548],{"type":178,"value":224},{"type":172,"tag":208,"props":2550,"children":2551},{"style":227},[2552],{"type":178,"value":1492},{"type":172,"tag":208,"props":2554,"children":2555},{"style":221},[2556],{"type":178,"value":1143},{"type":172,"tag":208,"props":2558,"children":2559},{"class":210,"line":1939},[2560],{"type":172,"tag":208,"props":2561,"children":2562},{"style":448},[2563],{"type":178,"value":1193},{"type":172,"tag":186,"props":2565,"children":2566},{},[2567],{"type":178,"value":2568},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":172,"tag":197,"props":2570,"children":2572},{"className":430,"code":2571,"language":432,"meta":166,"style":166},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2573],{"type":172,"tag":204,"props":2574,"children":2575},{"__ignoreMap":166},[2576,2584,2628],{"type":172,"tag":208,"props":2577,"children":2578},{"class":210,"line":211},[2579],{"type":172,"tag":208,"props":2580,"children":2581},{"style":495},[2582],{"type":178,"value":2583},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":172,"tag":208,"props":2585,"children":2586},{"class":210,"line":501},[2587,2592,2596,2601,2605,2610,2615,2619,2624],{"type":172,"tag":208,"props":2588,"children":2590},{"style":2589},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2591],{"type":178,"value":1203},{"type":172,"tag":208,"props":2593,"children":2594},{"style":448},[2595],{"type":178,"value":451},{"type":172,"tag":208,"props":2597,"children":2598},{"style":1200},[2599],{"type":178,"value":2600},"prototype",{"type":172,"tag":208,"props":2602,"children":2603},{"style":238},[2604],{"type":178,"value":1130},{"type":172,"tag":208,"props":2606,"children":2607},{"style":238},[2608],{"type":178,"value":2609}," new",{"type":172,"tag":208,"props":2611,"children":2612},{"style":454},[2613],{"type":178,"value":2614}," B",{"type":172,"tag":208,"props":2616,"children":2617},{"style":442},[2618],{"type":178,"value":462},{"type":172,"tag":208,"props":2620,"children":2621},{"style":495},[2622],{"type":178,"value":2623},"/* 传入参数 */",{"type":172,"tag":208,"props":2625,"children":2626},{"style":442},[2627],{"type":178,"value":1184},{"type":172,"tag":208,"props":2629,"children":2630},{"class":210,"line":1146},[2631,2635,2639,2643,2647,2652,2656],{"type":172,"tag":208,"props":2632,"children":2633},{"style":2589},[2634],{"type":178,"value":1203},{"type":172,"tag":208,"props":2636,"children":2637},{"style":448},[2638],{"type":178,"value":451},{"type":172,"tag":208,"props":2640,"children":2641},{"style":1200},[2642],{"type":178,"value":2600},{"type":172,"tag":208,"props":2644,"children":2645},{"style":448},[2646],{"type":178,"value":451},{"type":172,"tag":208,"props":2648,"children":2649},{"style":1200},[2650],{"type":178,"value":2651},"constructor",{"type":172,"tag":208,"props":2653,"children":2654},{"style":238},[2655],{"type":178,"value":1130},{"type":172,"tag":208,"props":2657,"children":2658},{"style":1200},[2659],{"type":178,"value":2660}," A\n",{"type":172,"tag":186,"props":2662,"children":2663},{},[2664],{"type":178,"value":2665},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":172,"tag":186,"props":2667,"children":2668},{},[2669],{"type":178,"value":2670},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":172,"tag":186,"props":2672,"children":2673},{},[2674],{"type":178,"value":2675},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":172,"tag":186,"props":2677,"children":2678},{},[2679],{"type":178,"value":2680},"总结一下遍历对象成员的方法：",{"type":172,"tag":781,"props":2682,"children":2683},{},[2684,2708],{"type":172,"tag":785,"props":2685,"children":2686},{},[2687],{"type":172,"tag":789,"props":2688,"children":2689},{},[2690,2695,2700,2704],{"type":172,"tag":793,"props":2691,"children":2692},{},[2693],{"type":178,"value":2694},"键名",{"type":172,"tag":793,"props":2696,"children":2697},{},[2698],{"type":178,"value":2699},"显隐式",{"type":172,"tag":793,"props":2701,"children":2702},{},[2703],{"type":178,"value":175},{"type":172,"tag":793,"props":2705,"children":2706},{},[2707],{"type":178,"value":802},{"type":172,"tag":804,"props":2709,"children":2710},{},[2711,2734,2754,2776],{"type":172,"tag":789,"props":2712,"children":2713},{},[2714,2719,2724,2729],{"type":172,"tag":811,"props":2715,"children":2716},{},[2717],{"type":178,"value":2718},"一般键名",{"type":172,"tag":811,"props":2720,"children":2721},{},[2722],{"type":178,"value":2723},"显式",{"type":172,"tag":811,"props":2725,"children":2726},{},[2727],{"type":178,"value":2728},"for...in",{"type":172,"tag":811,"props":2730,"children":2731},{},[2732],{"type":178,"value":2733},"可列举的成员名（包含原型链）",{"type":172,"tag":789,"props":2735,"children":2736},{},[2737,2741,2745,2750],{"type":172,"tag":811,"props":2738,"children":2739},{},[2740],{"type":178,"value":2718},{"type":172,"tag":811,"props":2742,"children":2743},{},[2744],{"type":178,"value":2723},{"type":172,"tag":811,"props":2746,"children":2747},{},[2748],{"type":178,"value":2749},"Object.prototype.map、Object.prototype.entries、...",{"type":172,"tag":811,"props":2751,"children":2752},{},[2753],{"type":178,"value":1054},{"type":172,"tag":789,"props":2755,"children":2756},{},[2757,2761,2766,2771],{"type":172,"tag":811,"props":2758,"children":2759},{},[2760],{"type":178,"value":2718},{"type":172,"tag":811,"props":2762,"children":2763},{},[2764],{"type":178,"value":2765},"显式 & 隐式",{"type":172,"tag":811,"props":2767,"children":2768},{},[2769],{"type":178,"value":2770},"Object.getOwnPropertyNames()",{"type":172,"tag":811,"props":2772,"children":2773},{},[2774],{"type":178,"value":2775},"所有非符号的自由属性名",{"type":172,"tag":789,"props":2777,"children":2778},{},[2779,2784,2788,2793],{"type":172,"tag":811,"props":2780,"children":2781},{},[2782],{"type":178,"value":2783},"符号键名键名",{"type":172,"tag":811,"props":2785,"children":2786},{},[2787],{"type":178,"value":2765},{"type":172,"tag":811,"props":2789,"children":2790},{},[2791],{"type":178,"value":2792},"Object.getOwnPropertySymbols()",{"type":172,"tag":811,"props":2794,"children":2795},{},[2796],{"type":178,"value":2797},"所有符号键名的自有属性名",{"type":172,"tag":186,"props":2799,"children":2800},{},[2801,2803,2808,2810,2814],{"type":178,"value":2802},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":172,"tag":208,"props":2804,"children":2805},{},[2806],{"type":178,"value":2807},"prop",{"type":178,"value":2809}," 更好的替代方案是 typeof(obj",{"type":172,"tag":208,"props":2811,"children":2812},{},[2813],{"type":178,"value":2807},{"type":178,"value":2815},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":172,"tag":186,"props":2817,"children":2818},{},[2819],{"type":178,"value":2820},"delete 运算符有些特殊的地方：",{"type":172,"tag":286,"props":2822,"children":2823},{},[2824,2829],{"type":172,"tag":290,"props":2825,"children":2826},{},[2827],{"type":178,"value":2828},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":172,"tag":290,"props":2830,"children":2831},{},[2832],{"type":178,"value":2833},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":172,"tag":180,"props":2835,"children":2837},{"id":2836},"原型继承",[2838],{"type":178,"value":2836},{"type":172,"tag":186,"props":2840,"children":2841},{},[2842],{"type":178,"value":2843},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":172,"tag":186,"props":2845,"children":2846},{},[2847],{"type":178,"value":2848},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":172,"tag":286,"props":2850,"children":2851},{},[2852,2857],{"type":172,"tag":290,"props":2853,"children":2854},{},[2855],{"type":178,"value":2856},"读对象的属性时优先读取对象的自有属性表",{"type":172,"tag":290,"props":2858,"children":2859},{},[2860],{"type":178,"value":2861},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":172,"tag":186,"props":2863,"children":2864},{},[2865],{"type":178,"value":2866},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":172,"tag":186,"props":2868,"children":2869},{},[2870],{"type":178,"value":2871},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":172,"tag":197,"props":2873,"children":2875},{"className":430,"code":2874,"language":432,"meta":166,"style":166},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[2876],{"type":172,"tag":204,"props":2877,"children":2878},{"__ignoreMap":166},[2879,2899,2938,2979],{"type":172,"tag":208,"props":2880,"children":2881},{"class":210,"line":211},[2882,2886,2890,2894],{"type":172,"tag":208,"props":2883,"children":2884},{"style":766},[2885],{"type":178,"value":1092},{"type":172,"tag":208,"props":2887,"children":2888},{"style":454},[2889],{"type":178,"value":1792},{"type":172,"tag":208,"props":2891,"children":2892},{"style":448},[2893],{"type":178,"value":1102},{"type":172,"tag":208,"props":2895,"children":2896},{"style":448},[2897],{"type":178,"value":2898}," {}\n",{"type":172,"tag":208,"props":2900,"children":2901},{"class":210,"line":501},[2902,2906,2911,2915,2919,2924,2928,2933],{"type":172,"tag":208,"props":2903,"children":2904},{"style":766},[2905],{"type":178,"value":2402},{"type":172,"tag":208,"props":2907,"children":2908},{"style":442},[2909],{"type":178,"value":2910}," a ",{"type":172,"tag":208,"props":2912,"children":2913},{"style":238},[2914],{"type":178,"value":1641},{"type":172,"tag":208,"props":2916,"children":2917},{"style":448},[2918],{"type":178,"value":1478},{"type":172,"tag":208,"props":2920,"children":2921},{"style":2426},[2922],{"type":178,"value":2923}," testb",{"type":172,"tag":208,"props":2925,"children":2926},{"style":448},[2927],{"type":178,"value":1102},{"type":172,"tag":208,"props":2929,"children":2930},{"style":448},[2931],{"type":178,"value":2932}," {}",{"type":172,"tag":208,"props":2934,"children":2935},{"style":448},[2936],{"type":178,"value":2937}," }\n",{"type":172,"tag":208,"props":2939,"children":2940},{"class":210,"line":1146},[2941,2945,2949,2954,2958,2962,2966,2970,2974],{"type":172,"tag":208,"props":2942,"children":2943},{"style":442},[2944],{"type":178,"value":269},{"type":172,"tag":208,"props":2946,"children":2947},{"style":448},[2948],{"type":178,"value":451},{"type":172,"tag":208,"props":2950,"children":2951},{"style":442},[2952],{"type":178,"value":2953},"testb",{"type":172,"tag":208,"props":2955,"children":2956},{"style":448},[2957],{"type":178,"value":451},{"type":172,"tag":208,"props":2959,"children":2960},{"style":1200},[2961],{"type":178,"value":2600},{"type":172,"tag":208,"props":2963,"children":2964},{"style":238},[2965],{"type":178,"value":1130},{"type":172,"tag":208,"props":2967,"children":2968},{"style":2589},[2969],{"type":178,"value":1792},{"type":172,"tag":208,"props":2971,"children":2972},{"style":448},[2973],{"type":178,"value":451},{"type":172,"tag":208,"props":2975,"children":2976},{"style":1200},[2977],{"type":178,"value":2978},"prototype\n",{"type":172,"tag":208,"props":2980,"children":2981},{"class":210,"line":1187},[2982,2986,2991,2995,2999,3003],{"type":172,"tag":208,"props":2983,"children":2984},{"style":238},[2985],{"type":178,"value":1282},{"type":172,"tag":208,"props":2987,"children":2988},{"style":442},[2989],{"type":178,"value":2990}," a",{"type":172,"tag":208,"props":2992,"children":2993},{"style":448},[2994],{"type":178,"value":451},{"type":172,"tag":208,"props":2996,"children":2997},{"style":454},[2998],{"type":178,"value":2953},{"type":172,"tag":208,"props":3000,"children":3001},{"style":442},[3002],{"type":178,"value":597},{"type":172,"tag":208,"props":3004,"children":3005},{"style":495},[3006],{"type":178,"value":3007},"// TypeError\n",{"type":172,"tag":186,"props":3009,"children":3010},{},[3011,3013,3021],{"type":178,"value":3012},"在",{"type":172,"tag":269,"props":3014,"children":3018},{"href":3015,"rel":3016},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3017],"nofollow",[3019],{"type":178,"value":3020},"规范",{"type":178,"value":3022},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":172,"tag":186,"props":3024,"children":3025},{},[3026],{"type":178,"value":3027},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":172,"tag":197,"props":3029,"children":3031},{"className":430,"code":3030,"language":432,"meta":166,"style":166},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3032],{"type":172,"tag":204,"props":3033,"children":3034},{"__ignoreMap":166},[3035,3055,3075],{"type":172,"tag":208,"props":3036,"children":3037},{"class":210,"line":211},[3038,3042,3047,3051],{"type":172,"tag":208,"props":3039,"children":3040},{"style":766},[3041],{"type":178,"value":1092},{"type":172,"tag":208,"props":3043,"children":3044},{"style":454},[3045],{"type":178,"value":3046}," Parent",{"type":172,"tag":208,"props":3048,"children":3049},{"style":448},[3050],{"type":178,"value":1102},{"type":172,"tag":208,"props":3052,"children":3053},{"style":448},[3054],{"type":178,"value":2898},{"type":172,"tag":208,"props":3056,"children":3057},{"class":210,"line":501},[3058,3062,3067,3071],{"type":172,"tag":208,"props":3059,"children":3060},{"style":766},[3061],{"type":178,"value":1092},{"type":172,"tag":208,"props":3063,"children":3064},{"style":454},[3065],{"type":178,"value":3066}," Child",{"type":172,"tag":208,"props":3068,"children":3069},{"style":448},[3070],{"type":178,"value":1102},{"type":172,"tag":208,"props":3072,"children":3073},{"style":448},[3074],{"type":178,"value":2898},{"type":172,"tag":208,"props":3076,"children":3077},{"class":210,"line":1146},[3078,3083,3087,3091,3095,3099,3103],{"type":172,"tag":208,"props":3079,"children":3080},{"style":2589},[3081],{"type":178,"value":3082},"Child",{"type":172,"tag":208,"props":3084,"children":3085},{"style":448},[3086],{"type":178,"value":451},{"type":172,"tag":208,"props":3088,"children":3089},{"style":1200},[3090],{"type":178,"value":2600},{"type":172,"tag":208,"props":3092,"children":3093},{"style":238},[3094],{"type":178,"value":1130},{"type":172,"tag":208,"props":3096,"children":3097},{"style":238},[3098],{"type":178,"value":2609},{"type":172,"tag":208,"props":3100,"children":3101},{"style":454},[3102],{"type":178,"value":3046},{"type":172,"tag":208,"props":3104,"children":3105},{"style":442},[3106],{"type":178,"value":3107},"()\n",{"type":172,"tag":186,"props":3109,"children":3110},{},[3111],{"type":178,"value":3112},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":172,"tag":197,"props":3114,"children":3116},{"className":430,"code":3115,"language":432,"meta":166,"style":166},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3117],{"type":172,"tag":204,"props":3118,"children":3119},{"__ignoreMap":166},[3120,3128],{"type":172,"tag":208,"props":3121,"children":3122},{"class":210,"line":211},[3123],{"type":172,"tag":208,"props":3124,"children":3125},{"style":495},[3126],{"type":178,"value":3127},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":172,"tag":208,"props":3129,"children":3130},{"class":210,"line":501},[3131,3135,3139,3143,3147,3151,3155],{"type":172,"tag":208,"props":3132,"children":3133},{"style":2589},[3134],{"type":178,"value":3082},{"type":172,"tag":208,"props":3136,"children":3137},{"style":448},[3138],{"type":178,"value":451},{"type":172,"tag":208,"props":3140,"children":3141},{"style":1200},[3142],{"type":178,"value":2600},{"type":172,"tag":208,"props":3144,"children":3145},{"style":448},[3146],{"type":178,"value":451},{"type":172,"tag":208,"props":3148,"children":3149},{"style":1200},[3150],{"type":178,"value":2651},{"type":172,"tag":208,"props":3152,"children":3153},{"style":238},[3154],{"type":178,"value":1130},{"type":172,"tag":208,"props":3156,"children":3157},{"style":442},[3158],{"type":178,"value":3159}," Child\n",{"type":172,"tag":197,"props":3161,"children":3163},{"className":430,"code":3162,"language":432,"meta":166,"style":166},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3164],{"type":172,"tag":204,"props":3165,"children":3166},{"__ignoreMap":166},[3167,3175,3194,3213,3236,3243],{"type":172,"tag":208,"props":3168,"children":3169},{"class":210,"line":211},[3170],{"type":172,"tag":208,"props":3171,"children":3172},{"style":495},[3173],{"type":178,"value":3174},"// 这种方法叫做圣杯模式\n",{"type":172,"tag":208,"props":3176,"children":3177},{"class":210,"line":501},[3178,3182,3186,3190],{"type":172,"tag":208,"props":3179,"children":3180},{"style":766},[3181],{"type":178,"value":1092},{"type":172,"tag":208,"props":3183,"children":3184},{"style":454},[3185],{"type":178,"value":3046},{"type":172,"tag":208,"props":3187,"children":3188},{"style":448},[3189],{"type":178,"value":1102},{"type":172,"tag":208,"props":3191,"children":3192},{"style":448},[3193],{"type":178,"value":2898},{"type":172,"tag":208,"props":3195,"children":3196},{"class":210,"line":1146},[3197,3201,3205,3209],{"type":172,"tag":208,"props":3198,"children":3199},{"style":766},[3200],{"type":178,"value":1092},{"type":172,"tag":208,"props":3202,"children":3203},{"style":454},[3204],{"type":178,"value":3066},{"type":172,"tag":208,"props":3206,"children":3207},{"style":448},[3208],{"type":178,"value":1102},{"type":172,"tag":208,"props":3210,"children":3211},{"style":448},[3212],{"type":178,"value":1107},{"type":172,"tag":208,"props":3214,"children":3215},{"class":210,"line":1187},[3216,3220,3224,3228,3232],{"type":172,"tag":208,"props":3217,"children":3218},{"style":1113},[3219],{"type":178,"value":1116},{"type":172,"tag":208,"props":3221,"children":3222},{"style":448},[3223],{"type":178,"value":451},{"type":172,"tag":208,"props":3225,"children":3226},{"style":1200},[3227],{"type":178,"value":2651},{"type":172,"tag":208,"props":3229,"children":3230},{"style":238},[3231],{"type":178,"value":1130},{"type":172,"tag":208,"props":3233,"children":3234},{"style":442},[3235],{"type":178,"value":3159},{"type":172,"tag":208,"props":3237,"children":3238},{"class":210,"line":1196},[3239],{"type":172,"tag":208,"props":3240,"children":3241},{"style":448},[3242],{"type":178,"value":1193},{"type":172,"tag":208,"props":3244,"children":3245},{"class":210,"line":1231},[3246,3250,3254,3258,3262,3266,3270],{"type":172,"tag":208,"props":3247,"children":3248},{"style":2589},[3249],{"type":178,"value":3082},{"type":172,"tag":208,"props":3251,"children":3252},{"style":448},[3253],{"type":178,"value":451},{"type":172,"tag":208,"props":3255,"children":3256},{"style":1200},[3257],{"type":178,"value":2600},{"type":172,"tag":208,"props":3259,"children":3260},{"style":238},[3261],{"type":178,"value":1130},{"type":172,"tag":208,"props":3263,"children":3264},{"style":238},[3265],{"type":178,"value":2609},{"type":172,"tag":208,"props":3267,"children":3268},{"style":454},[3269],{"type":178,"value":3046},{"type":172,"tag":208,"props":3271,"children":3272},{"style":442},[3273],{"type":178,"value":3107},{"type":172,"tag":186,"props":3275,"children":3276},{},[3277],{"type":178,"value":3278},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":172,"tag":180,"props":3280,"children":3282},{"id":3281},"类继承",[3283],{"type":178,"value":3281},{"type":172,"tag":186,"props":3285,"children":3286},{},[3287],{"type":178,"value":3288},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":172,"tag":197,"props":3290,"children":3292},{"className":430,"code":3291,"language":432,"meta":166,"style":166},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3293],{"type":172,"tag":204,"props":3294,"children":3295},{"__ignoreMap":166},[3296,3304,3321,3347,3355,3374,3393,3423],{"type":172,"tag":208,"props":3297,"children":3298},{"class":210,"line":211},[3299],{"type":172,"tag":208,"props":3300,"children":3301},{"style":495},[3302],{"type":178,"value":3303},"/* 类声明 */\n",{"type":172,"tag":208,"props":3305,"children":3306},{"class":210,"line":501},[3307,3312,3317],{"type":172,"tag":208,"props":3308,"children":3309},{"style":766},[3310],{"type":178,"value":3311},"class",{"type":172,"tag":208,"props":3313,"children":3315},{"style":3314},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3316],{"type":178,"value":3046},{"type":172,"tag":208,"props":3318,"children":3319},{"style":448},[3320],{"type":178,"value":2898},{"type":172,"tag":208,"props":3322,"children":3323},{"class":210,"line":1146},[3324,3328,3332,3338,3343],{"type":172,"tag":208,"props":3325,"children":3326},{"style":766},[3327],{"type":178,"value":3311},{"type":172,"tag":208,"props":3329,"children":3330},{"style":3314},[3331],{"type":178,"value":3066},{"type":172,"tag":208,"props":3333,"children":3335},{"style":3334},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3336],{"type":178,"value":3337}," extends",{"type":172,"tag":208,"props":3339,"children":3341},{"style":3340},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3342],{"type":178,"value":3046},{"type":172,"tag":208,"props":3344,"children":3345},{"style":448},[3346],{"type":178,"value":2898},{"type":172,"tag":208,"props":3348,"children":3349},{"class":210,"line":1187},[3350],{"type":172,"tag":208,"props":3351,"children":3352},{"style":495},[3353],{"type":178,"value":3354},"/* 仿制代码 */\n",{"type":172,"tag":208,"props":3356,"children":3357},{"class":210,"line":1196},[3358,3362,3366,3370],{"type":172,"tag":208,"props":3359,"children":3360},{"style":766},[3361],{"type":178,"value":1092},{"type":172,"tag":208,"props":3363,"children":3364},{"style":454},[3365],{"type":178,"value":3046},{"type":172,"tag":208,"props":3367,"children":3368},{"style":448},[3369],{"type":178,"value":815},{"type":172,"tag":208,"props":3371,"children":3372},{"style":448},[3373],{"type":178,"value":2898},{"type":172,"tag":208,"props":3375,"children":3376},{"class":210,"line":1231},[3377,3381,3385,3389],{"type":172,"tag":208,"props":3378,"children":3379},{"style":766},[3380],{"type":178,"value":1092},{"type":172,"tag":208,"props":3382,"children":3383},{"style":454},[3384],{"type":178,"value":3066},{"type":172,"tag":208,"props":3386,"children":3387},{"style":448},[3388],{"type":178,"value":815},{"type":172,"tag":208,"props":3390,"children":3391},{"style":448},[3392],{"type":178,"value":2898},{"type":172,"tag":208,"props":3394,"children":3395},{"class":210,"line":1268},[3396,3400,3404,3409,3414,3418],{"type":172,"tag":208,"props":3397,"children":3398},{"style":442},[3399],{"type":178,"value":445},{"type":172,"tag":208,"props":3401,"children":3402},{"style":448},[3403],{"type":178,"value":451},{"type":172,"tag":208,"props":3405,"children":3406},{"style":454},[3407],{"type":178,"value":3408},"setPrototypeOf",{"type":172,"tag":208,"props":3410,"children":3411},{"style":442},[3412],{"type":178,"value":3413},"(Child",{"type":172,"tag":208,"props":3415,"children":3416},{"style":448},[3417],{"type":178,"value":478},{"type":172,"tag":208,"props":3419,"children":3420},{"style":442},[3421],{"type":178,"value":3422}," Parent)\n",{"type":172,"tag":208,"props":3424,"children":3425},{"class":210,"line":1276},[3426,3430,3434,3438,3442,3446,3450,3454,3458,3462,3466,3470],{"type":172,"tag":208,"props":3427,"children":3428},{"style":442},[3429],{"type":178,"value":445},{"type":172,"tag":208,"props":3431,"children":3432},{"style":448},[3433],{"type":178,"value":451},{"type":172,"tag":208,"props":3435,"children":3436},{"style":454},[3437],{"type":178,"value":3408},{"type":172,"tag":208,"props":3439,"children":3440},{"style":442},[3441],{"type":178,"value":462},{"type":172,"tag":208,"props":3443,"children":3444},{"style":2589},[3445],{"type":178,"value":3082},{"type":172,"tag":208,"props":3447,"children":3448},{"style":448},[3449],{"type":178,"value":451},{"type":172,"tag":208,"props":3451,"children":3452},{"style":1200},[3453],{"type":178,"value":2600},{"type":172,"tag":208,"props":3455,"children":3456},{"style":448},[3457],{"type":178,"value":478},{"type":172,"tag":208,"props":3459,"children":3460},{"style":2589},[3461],{"type":178,"value":3046},{"type":172,"tag":208,"props":3463,"children":3464},{"style":448},[3465],{"type":178,"value":451},{"type":172,"tag":208,"props":3467,"children":3468},{"style":1200},[3469],{"type":178,"value":2600},{"type":172,"tag":208,"props":3471,"children":3472},{"style":442},[3473],{"type":178,"value":1184},{"type":172,"tag":186,"props":3475,"children":3476},{},[3477],{"type":178,"value":3478},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":172,"tag":186,"props":3480,"children":3481},{},[3482],{"type":178,"value":3483},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":172,"tag":186,"props":3485,"children":3486},{},[3487],{"type":178,"value":3488},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":172,"tag":197,"props":3490,"children":3492},{"className":430,"code":3491,"language":432,"meta":166,"style":166},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3493],{"type":172,"tag":204,"props":3494,"children":3495},{"__ignoreMap":166},[3496,3537,3568,3604,3633,3645],{"type":172,"tag":208,"props":3497,"children":3498},{"class":210,"line":211},[3499,3504,3508,3512,3516,3521,3525,3529,3533],{"type":172,"tag":208,"props":3500,"children":3501},{"style":2589},[3502],{"type":178,"value":3503},"object",{"type":172,"tag":208,"props":3505,"children":3506},{"style":448},[3507],{"type":178,"value":451},{"type":172,"tag":208,"props":3509,"children":3510},{"style":1200},[3511],{"type":178,"value":2600},{"type":172,"tag":208,"props":3513,"children":3514},{"style":448},[3515],{"type":178,"value":451},{"type":172,"tag":208,"props":3517,"children":3518},{"style":454},[3519],{"type":178,"value":3520},"method",{"type":172,"tag":208,"props":3522,"children":3523},{"style":238},[3524],{"type":178,"value":1130},{"type":172,"tag":208,"props":3526,"children":3527},{"style":766},[3528],{"type":178,"value":1220},{"type":172,"tag":208,"props":3530,"children":3531},{"style":448},[3532],{"type":178,"value":1102},{"type":172,"tag":208,"props":3534,"children":3535},{"style":448},[3536],{"type":178,"value":1107},{"type":172,"tag":208,"props":3538,"children":3539},{"class":210,"line":501},[3540,3545,3550,3554,3559,3563],{"type":172,"tag":208,"props":3541,"children":3542},{"style":766},[3543],{"type":178,"value":3544},"  const",{"type":172,"tag":208,"props":3546,"children":3547},{"style":1200},[3548],{"type":178,"value":3549}," thisClass",{"type":172,"tag":208,"props":3551,"children":3552},{"style":238},[3553],{"type":178,"value":1130},{"type":172,"tag":208,"props":3555,"children":3556},{"style":1113},[3557],{"type":178,"value":3558}," this",{"type":172,"tag":208,"props":3560,"children":3561},{"style":448},[3562],{"type":178,"value":451},{"type":172,"tag":208,"props":3564,"children":3565},{"style":1200},[3566],{"type":178,"value":3567},"constructor\n",{"type":172,"tag":208,"props":3569,"children":3570},{"class":210,"line":1146},[3571,3575,3580,3584,3588,3592,3596,3600],{"type":172,"tag":208,"props":3572,"children":3573},{"style":766},[3574],{"type":178,"value":3544},{"type":172,"tag":208,"props":3576,"children":3577},{"style":1200},[3578],{"type":178,"value":3579}," parentClass",{"type":172,"tag":208,"props":3581,"children":3582},{"style":238},[3583],{"type":178,"value":1130},{"type":172,"tag":208,"props":3585,"children":3586},{"style":2589},[3587],{"type":178,"value":3549},{"type":172,"tag":208,"props":3589,"children":3590},{"style":448},[3591],{"type":178,"value":451},{"type":172,"tag":208,"props":3593,"children":3594},{"style":1200},[3595],{"type":178,"value":2600},{"type":172,"tag":208,"props":3597,"children":3598},{"style":448},[3599],{"type":178,"value":451},{"type":172,"tag":208,"props":3601,"children":3602},{"style":1200},[3603],{"type":178,"value":3567},{"type":172,"tag":208,"props":3605,"children":3606},{"class":210,"line":1187},[3607,3611,3616,3620,3624,3628],{"type":172,"tag":208,"props":3608,"children":3609},{"style":766},[3610],{"type":178,"value":3544},{"type":172,"tag":208,"props":3612,"children":3613},{"style":1200},[3614],{"type":178,"value":3615}," parentMethod",{"type":172,"tag":208,"props":3617,"children":3618},{"style":238},[3619],{"type":178,"value":1130},{"type":172,"tag":208,"props":3621,"children":3622},{"style":442},[3623],{"type":178,"value":3579},{"type":172,"tag":208,"props":3625,"children":3626},{"style":448},[3627],{"type":178,"value":451},{"type":172,"tag":208,"props":3629,"children":3630},{"style":442},[3631],{"type":178,"value":3632},"method\n",{"type":172,"tag":208,"props":3634,"children":3635},{"class":210,"line":1196},[3636,3641],{"type":172,"tag":208,"props":3637,"children":3638},{"style":454},[3639],{"type":178,"value":3640},"  parentMethod",{"type":172,"tag":208,"props":3642,"children":3643},{"style":1164},[3644],{"type":178,"value":3107},{"type":172,"tag":208,"props":3646,"children":3647},{"class":210,"line":1231},[3648],{"type":172,"tag":208,"props":3649,"children":3650},{"style":448},[3651],{"type":178,"value":1193},{"type":172,"tag":186,"props":3653,"children":3654},{},[3655],{"type":178,"value":3656},"super 的指向由几个规则所限制：",{"type":172,"tag":286,"props":3658,"children":3659},{},[3660,3665,3670,3675,3680],{"type":172,"tag":290,"props":3661,"children":3662},{},[3663],{"type":178,"value":3664},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":172,"tag":290,"props":3666,"children":3667},{},[3668],{"type":178,"value":3669},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":172,"tag":290,"props":3671,"children":3672},{},[3673],{"type":178,"value":3674},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":172,"tag":290,"props":3676,"children":3677},{},[3678],{"type":178,"value":3679},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":172,"tag":290,"props":3681,"children":3682},{},[3683],{"type":178,"value":3684},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":172,"tag":186,"props":3686,"children":3687},{},[3688],{"type":178,"value":3689},"总结可以得出规律：",{"type":172,"tag":286,"props":3691,"children":3692},{},[3693,3698],{"type":172,"tag":290,"props":3694,"children":3695},{},[3696],{"type":178,"value":3697},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":172,"tag":290,"props":3699,"children":3700},{},[3701],{"type":178,"value":3702},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":172,"tag":186,"props":3704,"children":3705},{},[3706],{"type":178,"value":3707},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":172,"tag":197,"props":3709,"children":3711},{"className":430,"code":3710,"language":432,"meta":166,"style":166},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3712],{"type":172,"tag":204,"props":3713,"children":3714},{"__ignoreMap":166},[3715,3756,3826,3855,3863,3902,3936],{"type":172,"tag":208,"props":3716,"children":3717},{"class":210,"line":211},[3718,3723,3727,3731,3736,3740,3744,3748,3752],{"type":172,"tag":208,"props":3719,"children":3720},{"style":442},[3721],{"type":178,"value":3722},"proto ",{"type":172,"tag":208,"props":3724,"children":3725},{"style":238},[3726],{"type":178,"value":1641},{"type":172,"tag":208,"props":3728,"children":3729},{"style":448},[3730],{"type":178,"value":1478},{"type":172,"tag":208,"props":3732,"children":3733},{"style":1164},[3734],{"type":178,"value":3735},"data",{"type":172,"tag":208,"props":3737,"children":3738},{"style":448},[3739],{"type":178,"value":1626},{"type":172,"tag":208,"props":3741,"children":3742},{"style":221},[3743],{"type":178,"value":224},{"type":172,"tag":208,"props":3745,"children":3746},{"style":227},[3747],{"type":178,"value":1492},{"type":172,"tag":208,"props":3749,"children":3750},{"style":221},[3751],{"type":178,"value":235},{"type":172,"tag":208,"props":3753,"children":3754},{"style":448},[3755],{"type":178,"value":1193},{"type":172,"tag":208,"props":3757,"children":3758},{"class":210,"line":501},[3759,3764,3768,3772,3776,3780,3784,3788,3792,3796,3800,3806,3810,3814,3818,3822],{"type":172,"tag":208,"props":3760,"children":3761},{"style":442},[3762],{"type":178,"value":3763},"obj ",{"type":172,"tag":208,"props":3765,"children":3766},{"style":238},[3767],{"type":178,"value":1641},{"type":172,"tag":208,"props":3769,"children":3770},{"style":448},[3771],{"type":178,"value":1478},{"type":172,"tag":208,"props":3773,"children":3774},{"style":2426},[3775],{"type":178,"value":1792},{"type":172,"tag":208,"props":3777,"children":3778},{"style":448},[3779],{"type":178,"value":815},{"type":172,"tag":208,"props":3781,"children":3782},{"style":448},[3783],{"type":178,"value":1478},{"type":172,"tag":208,"props":3785,"children":3786},{"style":442},[3787],{"type":178,"value":1809},{"type":172,"tag":208,"props":3789,"children":3790},{"style":448},[3791],{"type":178,"value":451},{"type":172,"tag":208,"props":3793,"children":3794},{"style":454},[3795],{"type":178,"value":1161},{"type":172,"tag":208,"props":3797,"children":3798},{"style":1164},[3799],{"type":178,"value":462},{"type":172,"tag":208,"props":3801,"children":3803},{"style":3802},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[3804],{"type":178,"value":3805},"super",{"type":172,"tag":208,"props":3807,"children":3808},{"style":448},[3809],{"type":178,"value":451},{"type":172,"tag":208,"props":3811,"children":3812},{"style":442},[3813],{"type":178,"value":3735},{"type":172,"tag":208,"props":3815,"children":3816},{"style":1164},[3817],{"type":178,"value":492},{"type":172,"tag":208,"props":3819,"children":3820},{"style":448},[3821],{"type":178,"value":1440},{"type":172,"tag":208,"props":3823,"children":3824},{"style":448},[3825],{"type":178,"value":2937},{"type":172,"tag":208,"props":3827,"children":3828},{"class":210,"line":1146},[3829,3833,3837,3841,3846,3850],{"type":172,"tag":208,"props":3830,"children":3831},{"style":442},[3832],{"type":178,"value":445},{"type":172,"tag":208,"props":3834,"children":3835},{"style":448},[3836],{"type":178,"value":451},{"type":172,"tag":208,"props":3838,"children":3839},{"style":454},[3840],{"type":178,"value":3408},{"type":172,"tag":208,"props":3842,"children":3843},{"style":442},[3844],{"type":178,"value":3845},"(obj",{"type":172,"tag":208,"props":3847,"children":3848},{"style":448},[3849],{"type":178,"value":478},{"type":172,"tag":208,"props":3851,"children":3852},{"style":442},[3853],{"type":178,"value":3854}," proto)\n",{"type":172,"tag":208,"props":3856,"children":3857},{"class":210,"line":1187},[3858],{"type":172,"tag":208,"props":3859,"children":3860},{"emptyLinePlaceholder":165},[3861],{"type":178,"value":3862},"\n",{"type":172,"tag":208,"props":3864,"children":3865},{"class":210,"line":1196},[3866,3871,3875,3880,3884,3889,3893,3898],{"type":172,"tag":208,"props":3867,"children":3868},{"style":442},[3869],{"type":178,"value":3870},"obj2 ",{"type":172,"tag":208,"props":3872,"children":3873},{"style":238},[3874],{"type":178,"value":1641},{"type":172,"tag":208,"props":3876,"children":3877},{"style":442},[3878],{"type":178,"value":3879}," Object",{"type":172,"tag":208,"props":3881,"children":3882},{"style":448},[3883],{"type":178,"value":451},{"type":172,"tag":208,"props":3885,"children":3886},{"style":454},[3887],{"type":178,"value":3888},"create",{"type":172,"tag":208,"props":3890,"children":3891},{"style":442},[3892],{"type":178,"value":462},{"type":172,"tag":208,"props":3894,"children":3895},{"style":521},[3896],{"type":178,"value":3897},"null",{"type":172,"tag":208,"props":3899,"children":3900},{"style":442},[3901],{"type":178,"value":1184},{"type":172,"tag":208,"props":3903,"children":3904},{"class":210,"line":1231},[3905,3910,3914,3919,3923,3927,3931],{"type":172,"tag":208,"props":3906,"children":3907},{"style":442},[3908],{"type":178,"value":3909},"obj2",{"type":172,"tag":208,"props":3911,"children":3912},{"style":448},[3913],{"type":178,"value":451},{"type":172,"tag":208,"props":3915,"children":3916},{"style":442},[3917],{"type":178,"value":3918},"test ",{"type":172,"tag":208,"props":3920,"children":3921},{"style":238},[3922],{"type":178,"value":1641},{"type":172,"tag":208,"props":3924,"children":3925},{"style":442},[3926],{"type":178,"value":2407},{"type":172,"tag":208,"props":3928,"children":3929},{"style":448},[3930],{"type":178,"value":451},{"type":172,"tag":208,"props":3932,"children":3933},{"style":442},[3934],{"type":178,"value":3935},"test\n",{"type":172,"tag":208,"props":3937,"children":3938},{"class":210,"line":1268},[3939,3943,3947,3951,3955],{"type":172,"tag":208,"props":3940,"children":3941},{"style":442},[3942],{"type":178,"value":3909},{"type":172,"tag":208,"props":3944,"children":3945},{"style":448},[3946],{"type":178,"value":451},{"type":172,"tag":208,"props":3948,"children":3949},{"style":454},[3950],{"type":178,"value":1492},{"type":172,"tag":208,"props":3952,"children":3953},{"style":442},[3954],{"type":178,"value":597},{"type":172,"tag":208,"props":3956,"children":3957},{"style":495},[3958],{"type":178,"value":3959},"// 'test'\n",{"type":172,"tag":186,"props":3961,"children":3962},{},[3963],{"type":178,"value":3964},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":172,"tag":186,"props":3966,"children":3967},{},[3968],{"type":178,"value":3969},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":172,"tag":186,"props":3971,"children":3972},{},[3973],{"type":178,"value":3974},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":172,"tag":197,"props":3976,"children":3978},{"className":430,"code":3977,"language":432,"meta":166,"style":166},"class StaticClass extends null {\n  static pow () {}\n}\n",[3979],{"type":172,"tag":204,"props":3980,"children":3981},{"__ignoreMap":166},[3982,4007,4028],{"type":172,"tag":208,"props":3983,"children":3984},{"class":210,"line":211},[3985,3989,3994,3998,4003],{"type":172,"tag":208,"props":3986,"children":3987},{"style":766},[3988],{"type":178,"value":3311},{"type":172,"tag":208,"props":3990,"children":3991},{"style":3314},[3992],{"type":178,"value":3993}," StaticClass",{"type":172,"tag":208,"props":3995,"children":3996},{"style":3334},[3997],{"type":178,"value":3337},{"type":172,"tag":208,"props":3999,"children":4000},{"style":521},[4001],{"type":178,"value":4002}," null",{"type":172,"tag":208,"props":4004,"children":4005},{"style":448},[4006],{"type":178,"value":1107},{"type":172,"tag":208,"props":4008,"children":4009},{"class":210,"line":501},[4010,4015,4020,4024],{"type":172,"tag":208,"props":4011,"children":4012},{"style":3334},[4013],{"type":178,"value":4014},"  static",{"type":172,"tag":208,"props":4016,"children":4017},{"style":2426},[4018],{"type":178,"value":4019}," pow",{"type":172,"tag":208,"props":4021,"children":4022},{"style":448},[4023],{"type":178,"value":1102},{"type":172,"tag":208,"props":4025,"children":4026},{"style":448},[4027],{"type":178,"value":2898},{"type":172,"tag":208,"props":4029,"children":4030},{"class":210,"line":1146},[4031],{"type":172,"tag":208,"props":4032,"children":4033},{"style":448},[4034],{"type":178,"value":1193},{"type":172,"tag":186,"props":4036,"children":4037},{},[4038],{"type":178,"value":4039},"P196，这个 new.target.prototype 没看懂。",{"type":172,"tag":180,"props":4041,"children":4043},{"id":4042},"对象系统",[4044],{"type":178,"value":4042},{"type":172,"tag":186,"props":4046,"children":4047},{},[4048],{"type":178,"value":4049},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":172,"tag":186,"props":4051,"children":4052},{},[4053],{"type":178,"value":4054},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":172,"tag":186,"props":4056,"children":4057},{},[4058],{"type":178,"value":4059},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":172,"tag":197,"props":4061,"children":4063},{"className":430,"code":4062,"language":432,"meta":166,"style":166},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4064],{"type":172,"tag":204,"props":4065,"children":4066},{"__ignoreMap":166},[4067,4082,4105,4126],{"type":172,"tag":208,"props":4068,"children":4069},{"class":210,"line":211},[4070,4074,4078],{"type":172,"tag":208,"props":4071,"children":4072},{"style":766},[4073],{"type":178,"value":3311},{"type":172,"tag":208,"props":4075,"children":4076},{"style":3314},[4077],{"type":178,"value":1097},{"type":172,"tag":208,"props":4079,"children":4080},{"style":448},[4081],{"type":178,"value":2898},{"type":172,"tag":208,"props":4083,"children":4084},{"class":210,"line":501},[4085,4089,4093,4097,4101],{"type":172,"tag":208,"props":4086,"children":4087},{"style":766},[4088],{"type":178,"value":3311},{"type":172,"tag":208,"props":4090,"children":4091},{"style":3314},[4092],{"type":178,"value":2614},{"type":172,"tag":208,"props":4094,"children":4095},{"style":3334},[4096],{"type":178,"value":3337},{"type":172,"tag":208,"props":4098,"children":4099},{"style":3340},[4100],{"type":178,"value":1097},{"type":172,"tag":208,"props":4102,"children":4103},{"style":448},[4104],{"type":178,"value":2898},{"type":172,"tag":208,"props":4106,"children":4107},{"class":210,"line":1146},[4108,4113,4118,4122],{"type":172,"tag":208,"props":4109,"children":4110},{"style":1200},[4111],{"type":178,"value":4112},"B",{"type":172,"tag":208,"props":4114,"children":4115},{"style":238},[4116],{"type":178,"value":4117}," instanceof",{"type":172,"tag":208,"props":4119,"children":4120},{"style":3314},[4121],{"type":178,"value":1097},{"type":172,"tag":208,"props":4123,"children":4124},{"style":495},[4125],{"type":178,"value":613},{"type":172,"tag":208,"props":4127,"children":4128},{"class":210,"line":1187},[4129,4133,4137,4142,4146,4150,4154],{"type":172,"tag":208,"props":4130,"children":4131},{"style":1200},[4132],{"type":178,"value":1203},{"type":172,"tag":208,"props":4134,"children":4135},{"style":448},[4136],{"type":178,"value":451},{"type":172,"tag":208,"props":4138,"children":4139},{"style":454},[4140],{"type":178,"value":4141},"isPrototypeOf",{"type":172,"tag":208,"props":4143,"children":4144},{"style":442},[4145],{"type":178,"value":462},{"type":172,"tag":208,"props":4147,"children":4148},{"style":1200},[4149],{"type":178,"value":4112},{"type":172,"tag":208,"props":4151,"children":4152},{"style":442},[4153],{"type":178,"value":492},{"type":172,"tag":208,"props":4155,"children":4156},{"style":495},[4157],{"type":178,"value":542},{"type":172,"tag":186,"props":4159,"children":4160},{},[4161],{"type":178,"value":4162},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":172,"tag":186,"props":4164,"children":4165},{},[4166],{"type":178,"value":4167},"this 实在函数执行时动态传入的，规则有三：",{"type":172,"tag":286,"props":4169,"children":4170},{},[4171,4176,4181],{"type":172,"tag":290,"props":4172,"children":4173},{},[4174],{"type":178,"value":4175},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":172,"tag":290,"props":4177,"children":4178},{},[4179],{"type":178,"value":4180},"根据存取运算符将左操作符作为 this 传入",{"type":172,"tag":290,"props":4182,"children":4183},{},[4184],{"type":178,"value":4185},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":172,"tag":186,"props":4187,"children":4188},{},[4189],{"type":178,"value":4190},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":172,"tag":286,"props":4192,"children":4193},{},[4194,4199],{"type":172,"tag":290,"props":4195,"children":4196},{},[4197],{"type":178,"value":4198},"如果运行在严格模式中，不改变 this 的值，否则",{"type":172,"tag":290,"props":4200,"children":4201},{},[4202],{"type":178,"value":4203},"使用全局对象作为 this 值",{"type":172,"tag":186,"props":4205,"children":4206},{},[4207],{"type":178,"value":4208},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":172,"tag":186,"props":4210,"children":4211},{},[4212],{"type":178,"value":4213},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":172,"tag":286,"props":4215,"children":4216},{},[4217,4222],{"type":172,"tag":290,"props":4218,"children":4219},{},[4220],{"type":178,"value":4221},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":172,"tag":290,"props":4223,"children":4224},{},[4225],{"type":178,"value":4226},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":172,"tag":186,"props":4228,"children":4229},{},[4230],{"type":178,"value":4231},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":172,"tag":186,"props":4233,"children":4234},{},[4235],{"type":178,"value":4236},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":172,"tag":197,"props":4238,"children":4240},{"className":430,"code":4239,"language":432,"meta":166,"style":166},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4241],{"type":172,"tag":204,"props":4242,"children":4243},{"__ignoreMap":166},[4244,4252,4273,4280,4288],{"type":172,"tag":208,"props":4245,"children":4246},{"class":210,"line":211},[4247],{"type":172,"tag":208,"props":4248,"children":4249},{"style":495},[4250],{"type":178,"value":4251},"// 获得所有原生对象、宿主对象等\n",{"type":172,"tag":208,"props":4253,"children":4254},{"class":210,"line":501},[4255,4259,4263,4268],{"type":172,"tag":208,"props":4256,"children":4257},{"style":442},[4258],{"type":178,"value":445},{"type":172,"tag":208,"props":4260,"children":4261},{"style":448},[4262],{"type":178,"value":451},{"type":172,"tag":208,"props":4264,"children":4265},{"style":454},[4266],{"type":178,"value":4267},"getOwnPropertyNames",{"type":172,"tag":208,"props":4269,"children":4270},{"style":442},[4271],{"type":178,"value":4272},"(global)\n",{"type":172,"tag":208,"props":4274,"children":4275},{"class":210,"line":1146},[4276],{"type":172,"tag":208,"props":4277,"children":4278},{"emptyLinePlaceholder":165},[4279],{"type":178,"value":3862},{"type":172,"tag":208,"props":4281,"children":4282},{"class":210,"line":1187},[4283],{"type":172,"tag":208,"props":4284,"children":4285},{"style":495},[4286],{"type":178,"value":4287},"// 验证 undefined 是否存在 global 对象中\n",{"type":172,"tag":208,"props":4289,"children":4290},{"class":210,"line":1196},[4291,4295,4299,4304,4309,4313,4317,4322,4326,4330],{"type":172,"tag":208,"props":4292,"children":4293},{"style":442},[4294],{"type":178,"value":445},{"type":172,"tag":208,"props":4296,"children":4297},{"style":448},[4298],{"type":178,"value":451},{"type":172,"tag":208,"props":4300,"children":4301},{"style":454},[4302],{"type":178,"value":4303},"getOwnPropertyDescriptor",{"type":172,"tag":208,"props":4305,"children":4306},{"style":442},[4307],{"type":178,"value":4308},"(global",{"type":172,"tag":208,"props":4310,"children":4311},{"style":448},[4312],{"type":178,"value":478},{"type":172,"tag":208,"props":4314,"children":4315},{"style":221},[4316],{"type":178,"value":224},{"type":172,"tag":208,"props":4318,"children":4319},{"style":227},[4320],{"type":178,"value":4321},"undefined",{"type":172,"tag":208,"props":4323,"children":4324},{"style":221},[4325],{"type":178,"value":235},{"type":172,"tag":208,"props":4327,"children":4328},{"style":442},[4329],{"type":178,"value":492},{"type":172,"tag":208,"props":4331,"children":4332},{"style":495},[4333],{"type":178,"value":4334},"// {value: undefined /* ... */ }\n",{"type":172,"tag":186,"props":4336,"children":4337},{},[4338],{"type":178,"value":4339},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":172,"tag":186,"props":4341,"children":4342},{},[4343],{"type":178,"value":4344},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":172,"tag":186,"props":4346,"children":4347},{},[4348],{"type":178,"value":4349},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":172,"tag":781,"props":4351,"children":4352},{},[4353,4374],{"type":172,"tag":785,"props":4354,"children":4355},{},[4356],{"type":172,"tag":789,"props":4357,"children":4358},{},[4359,4364,4369],{"type":172,"tag":793,"props":4360,"children":4361},{},[4362],{"type":178,"value":4363},"对象",{"type":172,"tag":793,"props":4365,"children":4366},{},[4367],{"type":178,"value":4368},"特殊效果",{"type":172,"tag":793,"props":4370,"children":4371},{},[4372],{"type":178,"value":4373},"注",{"type":172,"tag":804,"props":4375,"children":4376},{},[4377,4395,4412,4428,4444,4460,4478,4494,4510,4526],{"type":172,"tag":789,"props":4378,"children":4379},{},[4380,4385,4390],{"type":172,"tag":811,"props":4381,"children":4382},{},[4383],{"type":178,"value":4384},"Number、String、Boolean、Symbol",{"type":172,"tag":811,"props":4386,"children":4387},{},[4388],{"type":178,"value":4389},"包装类",{"type":172,"tag":811,"props":4391,"children":4392},{},[4393],{"type":178,"value":4394},"({}).toString()",{"type":172,"tag":789,"props":4396,"children":4397},{},[4398,4402,4407],{"type":172,"tag":811,"props":4399,"children":4400},{},[4401],{"type":178,"value":445},{"type":172,"tag":811,"props":4403,"children":4404},{},[4405],{"type":178,"value":4406},"调用包装类",{"type":172,"tag":811,"props":4408,"children":4409},{},[4410],{"type":178,"value":4411},"new Object(5) + new Object(3)",{"type":172,"tag":789,"props":4413,"children":4414},{},[4415,4420,4425],{"type":172,"tag":811,"props":4416,"children":4417},{},[4418],{"type":178,"value":4419},"Array",{"type":172,"tag":811,"props":4421,"children":4422},{},[4423],{"type":178,"value":4424},"自动维护 length 属性",{"type":172,"tag":811,"props":4426,"children":4427},{},[],{"type":172,"tag":789,"props":4429,"children":4430},{},[4431,4436,4441],{"type":172,"tag":811,"props":4432,"children":4433},{},[4434],{"type":178,"value":4435},"Date",{"type":172,"tag":811,"props":4437,"children":4438},{},[4439],{"type":178,"value":4440},"日期对象相关的运算",{"type":172,"tag":811,"props":4442,"children":4443},{},[],{"type":172,"tag":789,"props":4445,"children":4446},{},[4447,4452,4457],{"type":172,"tag":811,"props":4448,"children":4449},{},[4450],{"type":178,"value":4451},"Function",{"type":172,"tag":811,"props":4453,"children":4454},{},[4455],{"type":178,"value":4456},"创建可执行的函数",{"type":172,"tag":811,"props":4458,"children":4459},{},[],{"type":172,"tag":789,"props":4461,"children":4462},{},[4463,4468,4473],{"type":172,"tag":811,"props":4464,"children":4465},{},[4466],{"type":178,"value":4467},"RegExp",{"type":172,"tag":811,"props":4469,"children":4470},{},[4471],{"type":178,"value":4472},"可执行",{"type":172,"tag":811,"props":4474,"children":4475},{},[4476],{"type":178,"value":4477},"仅在某些宿主中",{"type":172,"tag":789,"props":4479,"children":4480},{},[4481,4486,4491],{"type":172,"tag":811,"props":4482,"children":4483},{},[4484],{"type":178,"value":4485},"Proxy",{"type":172,"tag":811,"props":4487,"children":4488},{},[4489],{"type":178,"value":4490},"代理目标对象、回收代理",{"type":172,"tag":811,"props":4492,"children":4493},{},[],{"type":172,"tag":789,"props":4495,"children":4496},{},[4497,4502,4507],{"type":172,"tag":811,"props":4498,"children":4499},{},[4500],{"type":178,"value":4501},"TypedArray、DataView",{"type":172,"tag":811,"props":4503,"children":4504},{},[4505],{"type":178,"value":4506},"创建及绑定 buffer",{"type":172,"tag":811,"props":4508,"children":4509},{},[],{"type":172,"tag":789,"props":4511,"children":4512},{},[4513,4518,4523],{"type":172,"tag":811,"props":4514,"children":4515},{},[4516],{"type":178,"value":4517},"ArrayBuffer、SharedArray、Buffer",{"type":172,"tag":811,"props":4519,"children":4520},{},[4521],{"type":178,"value":4522},"初始化 buffer 并维护 byteLength 属性",{"type":172,"tag":811,"props":4524,"children":4525},{},[],{"type":172,"tag":789,"props":4527,"children":4528},{},[4529,4534,4539],{"type":172,"tag":811,"props":4530,"children":4531},{},[4532],{"type":178,"value":4533},"WeakMap、WeakSet",{"type":172,"tag":811,"props":4535,"children":4536},{},[4537],{"type":178,"value":4538},"不修改引用并自动回收对象",{"type":172,"tag":811,"props":4540,"children":4541},{},[],{"type":172,"tag":186,"props":4543,"children":4544},{},[4545],{"type":178,"value":4546},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":172,"tag":197,"props":4548,"children":4550},{"className":430,"code":4549,"language":432,"meta":166,"style":166},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4551],{"type":172,"tag":204,"props":4552,"children":4553},{"__ignoreMap":166},[4554,4587,4624,4700,4713,4720,4772,4779],{"type":172,"tag":208,"props":4555,"children":4556},{"class":210,"line":211},[4557,4561,4566,4570,4574,4579,4583],{"type":172,"tag":208,"props":4558,"children":4559},{"style":766},[4560],{"type":178,"value":1092},{"type":172,"tag":208,"props":4562,"children":4563},{"style":454},[4564],{"type":178,"value":4565}," MyDate",{"type":172,"tag":208,"props":4567,"children":4568},{"style":448},[4569],{"type":178,"value":462},{"type":172,"tag":208,"props":4571,"children":4572},{"style":238},[4573],{"type":178,"value":1054},{"type":172,"tag":208,"props":4575,"children":4576},{"style":1393},[4577],{"type":178,"value":4578},"args",{"type":172,"tag":208,"props":4580,"children":4581},{"style":448},[4582],{"type":178,"value":1401},{"type":172,"tag":208,"props":4584,"children":4585},{"style":448},[4586],{"type":178,"value":1107},{"type":172,"tag":208,"props":4588,"children":4589},{"class":210,"line":501},[4590,4594,4599,4603,4608,4612,4616,4620],{"type":172,"tag":208,"props":4591,"children":4592},{"style":766},[4593],{"type":178,"value":3544},{"type":172,"tag":208,"props":4595,"children":4596},{"style":1200},[4597],{"type":178,"value":4598}," Base",{"type":172,"tag":208,"props":4600,"children":4601},{"style":238},[4602],{"type":178,"value":1130},{"type":172,"tag":208,"props":4604,"children":4605},{"style":2589},[4606],{"type":178,"value":4607}," Date",{"type":172,"tag":208,"props":4609,"children":4610},{"style":448},[4611],{"type":178,"value":451},{"type":172,"tag":208,"props":4613,"children":4614},{"style":1200},[4615],{"type":178,"value":2600},{"type":172,"tag":208,"props":4617,"children":4618},{"style":448},[4619],{"type":178,"value":451},{"type":172,"tag":208,"props":4621,"children":4622},{"style":1200},[4623],{"type":178,"value":3567},{"type":172,"tag":208,"props":4625,"children":4626},{"class":210,"line":1146},[4627,4631,4636,4640,4644,4648,4652,4656,4660,4664,4668,4672,4676,4680,4684,4688,4692,4696],{"type":172,"tag":208,"props":4628,"children":4629},{"style":766},[4630],{"type":178,"value":3544},{"type":172,"tag":208,"props":4632,"children":4633},{"style":1200},[4634],{"type":178,"value":4635}," instance",{"type":172,"tag":208,"props":4637,"children":4638},{"style":238},[4639],{"type":178,"value":1130},{"type":172,"tag":208,"props":4641,"children":4642},{"style":442},[4643],{"type":178,"value":3879},{"type":172,"tag":208,"props":4645,"children":4646},{"style":448},[4647],{"type":178,"value":451},{"type":172,"tag":208,"props":4649,"children":4650},{"style":454},[4651],{"type":178,"value":3408},{"type":172,"tag":208,"props":4653,"children":4654},{"style":1164},[4655],{"type":178,"value":462},{"type":172,"tag":208,"props":4657,"children":4658},{"style":238},[4659],{"type":178,"value":1282},{"type":172,"tag":208,"props":4661,"children":4662},{"style":454},[4663],{"type":178,"value":4598},{"type":172,"tag":208,"props":4665,"children":4666},{"style":1164},[4667],{"type":178,"value":462},{"type":172,"tag":208,"props":4669,"children":4670},{"style":238},[4671],{"type":178,"value":1054},{"type":172,"tag":208,"props":4673,"children":4674},{"style":442},[4675],{"type":178,"value":4578},{"type":172,"tag":208,"props":4677,"children":4678},{"style":1164},[4679],{"type":178,"value":1401},{"type":172,"tag":208,"props":4681,"children":4682},{"style":448},[4683],{"type":178,"value":478},{"type":172,"tag":208,"props":4685,"children":4686},{"style":2589},[4687],{"type":178,"value":4565},{"type":172,"tag":208,"props":4689,"children":4690},{"style":448},[4691],{"type":178,"value":451},{"type":172,"tag":208,"props":4693,"children":4694},{"style":1200},[4695],{"type":178,"value":2600},{"type":172,"tag":208,"props":4697,"children":4698},{"style":1164},[4699],{"type":178,"value":1184},{"type":172,"tag":208,"props":4701,"children":4702},{"class":210,"line":1187},[4703,4708],{"type":172,"tag":208,"props":4704,"children":4705},{"style":1470},[4706],{"type":178,"value":4707},"  return",{"type":172,"tag":208,"props":4709,"children":4710},{"style":442},[4711],{"type":178,"value":4712}," instance\n",{"type":172,"tag":208,"props":4714,"children":4715},{"class":210,"line":1196},[4716],{"type":172,"tag":208,"props":4717,"children":4718},{"style":448},[4719],{"type":178,"value":1193},{"type":172,"tag":208,"props":4721,"children":4722},{"class":210,"line":1231},[4723,4727,4731,4735,4739,4744,4748,4752,4756,4760,4764,4768],{"type":172,"tag":208,"props":4724,"children":4725},{"style":442},[4726],{"type":178,"value":445},{"type":172,"tag":208,"props":4728,"children":4729},{"style":448},[4730],{"type":178,"value":451},{"type":172,"tag":208,"props":4732,"children":4733},{"style":454},[4734],{"type":178,"value":3408},{"type":172,"tag":208,"props":4736,"children":4737},{"style":442},[4738],{"type":178,"value":462},{"type":172,"tag":208,"props":4740,"children":4741},{"style":2589},[4742],{"type":178,"value":4743},"MyDate",{"type":172,"tag":208,"props":4745,"children":4746},{"style":448},[4747],{"type":178,"value":451},{"type":172,"tag":208,"props":4749,"children":4750},{"style":1200},[4751],{"type":178,"value":2600},{"type":172,"tag":208,"props":4753,"children":4754},{"style":448},[4755],{"type":178,"value":478},{"type":172,"tag":208,"props":4757,"children":4758},{"style":2589},[4759],{"type":178,"value":4607},{"type":172,"tag":208,"props":4761,"children":4762},{"style":448},[4763],{"type":178,"value":451},{"type":172,"tag":208,"props":4765,"children":4766},{"style":1200},[4767],{"type":178,"value":2600},{"type":172,"tag":208,"props":4769,"children":4770},{"style":442},[4771],{"type":178,"value":1184},{"type":172,"tag":208,"props":4773,"children":4774},{"class":210,"line":1268},[4775],{"type":172,"tag":208,"props":4776,"children":4777},{"emptyLinePlaceholder":165},[4778],{"type":178,"value":3862},{"type":172,"tag":208,"props":4780,"children":4781},{"class":210,"line":1276},[4782,4787,4791,4795,4799,4803,4807,4811],{"type":172,"tag":208,"props":4783,"children":4784},{"style":442},[4785],{"type":178,"value":4786},"console",{"type":172,"tag":208,"props":4788,"children":4789},{"style":448},[4790],{"type":178,"value":451},{"type":172,"tag":208,"props":4792,"children":4793},{"style":454},[4794],{"type":178,"value":1161},{"type":172,"tag":208,"props":4796,"children":4797},{"style":442},[4798],{"type":178,"value":462},{"type":172,"tag":208,"props":4800,"children":4801},{"style":238},[4802],{"type":178,"value":1282},{"type":172,"tag":208,"props":4804,"children":4805},{"style":454},[4806],{"type":178,"value":4565},{"type":172,"tag":208,"props":4808,"children":4809},{"style":442},[4810],{"type":178,"value":581},{"type":172,"tag":208,"props":4812,"children":4813},{"style":495},[4814],{"type":178,"value":4815},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":172,"tag":180,"props":4817,"children":4819},{"id":4818},"可定制的对象属性",[4820],{"type":178,"value":4818},{"type":172,"tag":186,"props":4822,"children":4823},{},[4824],{"type":178,"value":4825},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":172,"tag":286,"props":4827,"children":4828},{},[4829,4834,4839],{"type":172,"tag":290,"props":4830,"children":4831},{},[4832],{"type":178,"value":4833},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":172,"tag":290,"props":4835,"children":4836},{},[4837],{"type":178,"value":4838},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":172,"tag":290,"props":4840,"children":4841},{},[4842],{"type":178,"value":4843},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":172,"tag":186,"props":4845,"children":4846},{},[4847],{"type":178,"value":4848},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":172,"tag":781,"props":4850,"children":4851},{},[4852,4878],{"type":172,"tag":785,"props":4853,"children":4854},{},[4855],{"type":172,"tag":789,"props":4856,"children":4857},{},[4858,4863,4868,4873],{"type":172,"tag":793,"props":4859,"children":4860},{},[4861],{"type":178,"value":4862},"Object.xxx 方法",{"type":172,"tag":793,"props":4864,"children":4865},{},[4866],{"type":178,"value":4867},"方法说明",{"type":172,"tag":793,"props":4869,"children":4870},{},[4871],{"type":178,"value":4872},"对自有属性表的操作",{"type":172,"tag":793,"props":4874,"children":4875},{},[4876],{"type":178,"value":4877},"检查方法",{"type":172,"tag":804,"props":4879,"children":4880},{},[4881,4910,4938],{"type":172,"tag":789,"props":4882,"children":4883},{},[4884,4889,4894,4905],{"type":172,"tag":811,"props":4885,"children":4886},{},[4887],{"type":178,"value":4888},"preventExtensions(obj)",{"type":172,"tag":811,"props":4890,"children":4891},{},[4892],{"type":178,"value":4893},"使实例不能添加新属性，也不可重置原型",{"type":172,"tag":811,"props":4895,"children":4896},{},[4897,4903],{"type":172,"tag":4898,"props":4899,"children":4900},"del",{},[4901],{"type":178,"value":4902},"add",{"type":178,"value":4904},"、delete、update",{"type":172,"tag":811,"props":4906,"children":4907},{},[4908],{"type":178,"value":4909},"isExtensible(obj)",{"type":172,"tag":789,"props":4911,"children":4912},{},[4913,4918,4923,4933],{"type":172,"tag":811,"props":4914,"children":4915},{},[4916],{"type":178,"value":4917},"seal(obj)",{"type":172,"tag":811,"props":4919,"children":4920},{},[4921],{"type":178,"value":4922},"使实例不能新增新属性，也不能删除既有属性",{"type":172,"tag":811,"props":4924,"children":4925},{},[4926,4931],{"type":172,"tag":4898,"props":4927,"children":4928},{},[4929],{"type":178,"value":4930},"add、delete",{"type":178,"value":4932},"、update",{"type":172,"tag":811,"props":4934,"children":4935},{},[4936],{"type":178,"value":4937},"isSealed(obj)",{"type":172,"tag":789,"props":4939,"children":4940},{},[4941,4946,4951,4959],{"type":172,"tag":811,"props":4942,"children":4943},{},[4944],{"type":178,"value":4945},"freeze(obj)",{"type":172,"tag":811,"props":4947,"children":4948},{},[4949],{"type":178,"value":4950},"使实例所有属性只读，且不能再添加、删除属性",{"type":172,"tag":811,"props":4952,"children":4953},{},[4954],{"type":172,"tag":4898,"props":4955,"children":4956},{},[4957],{"type":178,"value":4958},"add、delete、update",{"type":172,"tag":811,"props":4960,"children":4961},{},[4962],{"type":178,"value":4963},"isFrozen(obj)",{"type":172,"tag":186,"props":4965,"children":4966},{},[4967],{"type":178,"value":4968},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":172,"tag":286,"props":4970,"children":4971},{},[4972,4977,4982],{"type":172,"tag":290,"props":4973,"children":4974},{},[4975],{"type":178,"value":4976},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":172,"tag":290,"props":4978,"children":4979},{},[4980],{"type":178,"value":4981},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":172,"tag":290,"props":4983,"children":4984},{},[4985],{"type":178,"value":4986},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":172,"tag":180,"props":4988,"children":4990},{"id":4989},"运行期侵入",[4991],{"type":178,"value":4989},{"type":172,"tag":186,"props":4993,"children":4994},{},[4995],{"type":178,"value":4996},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":172,"tag":186,"props":4998,"children":4999},{},[5000],{"type":178,"value":5001},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":172,"tag":186,"props":5003,"children":5004},{},[5005],{"type":178,"value":5006},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":172,"tag":781,"props":5008,"children":5009},{},[5010,5026],{"type":172,"tag":785,"props":5011,"children":5012},{},[5013],{"type":172,"tag":789,"props":5014,"children":5015},{},[5016,5021],{"type":172,"tag":793,"props":5017,"children":5018},{},[5019],{"type":178,"value":5020},"内部方法",{"type":172,"tag":793,"props":5022,"children":5023},{},[5024],{"type":178,"value":5025},"handler.xxx",{"type":172,"tag":804,"props":5027,"children":5028},{},[5029,5042,5055,5068,5081,5094,5107,5120,5133,5146,5159,5172,5185],{"type":172,"tag":789,"props":5030,"children":5031},{},[5032,5037],{"type":172,"tag":811,"props":5033,"children":5034},{},[5035],{"type":178,"value":5036},"[[GetPrototypeOf]]",{"type":172,"tag":811,"props":5038,"children":5039},{},[5040],{"type":178,"value":5041},"getPrototypeOf()",{"type":172,"tag":789,"props":5043,"children":5044},{},[5045,5050],{"type":172,"tag":811,"props":5046,"children":5047},{},[5048],{"type":178,"value":5049},"[[SetPrototypeOf]]",{"type":172,"tag":811,"props":5051,"children":5052},{},[5053],{"type":178,"value":5054},"setPrototypeOf()",{"type":172,"tag":789,"props":5056,"children":5057},{},[5058,5063],{"type":172,"tag":811,"props":5059,"children":5060},{},[5061],{"type":178,"value":5062},"[[IsExtensible]]",{"type":172,"tag":811,"props":5064,"children":5065},{},[5066],{"type":178,"value":5067},"isExtensible()",{"type":172,"tag":789,"props":5069,"children":5070},{},[5071,5076],{"type":172,"tag":811,"props":5072,"children":5073},{},[5074],{"type":178,"value":5075},"[[PreventExtensions]]",{"type":172,"tag":811,"props":5077,"children":5078},{},[5079],{"type":178,"value":5080},"preventExtensions()",{"type":172,"tag":789,"props":5082,"children":5083},{},[5084,5089],{"type":172,"tag":811,"props":5085,"children":5086},{},[5087],{"type":178,"value":5088},"[[GetOwnProperty]]",{"type":172,"tag":811,"props":5090,"children":5091},{},[5092],{"type":178,"value":5093},"getOwnPropertyDescriptor()",{"type":172,"tag":789,"props":5095,"children":5096},{},[5097,5102],{"type":172,"tag":811,"props":5098,"children":5099},{},[5100],{"type":178,"value":5101},"[[HasProperty]]",{"type":172,"tag":811,"props":5103,"children":5104},{},[5105],{"type":178,"value":5106},"has()",{"type":172,"tag":789,"props":5108,"children":5109},{},[5110,5115],{"type":172,"tag":811,"props":5111,"children":5112},{},[5113],{"type":178,"value":5114},"[[DefineOwnProperty]]",{"type":172,"tag":811,"props":5116,"children":5117},{},[5118],{"type":178,"value":5119},"defineProperty()",{"type":172,"tag":789,"props":5121,"children":5122},{},[5123,5128],{"type":172,"tag":811,"props":5124,"children":5125},{},[5126],{"type":178,"value":5127},"[[Get]]",{"type":172,"tag":811,"props":5129,"children":5130},{},[5131],{"type":178,"value":5132},"get()",{"type":172,"tag":789,"props":5134,"children":5135},{},[5136,5141],{"type":172,"tag":811,"props":5137,"children":5138},{},[5139],{"type":178,"value":5140},"[[Set]]",{"type":172,"tag":811,"props":5142,"children":5143},{},[5144],{"type":178,"value":5145},"set()",{"type":172,"tag":789,"props":5147,"children":5148},{},[5149,5154],{"type":172,"tag":811,"props":5150,"children":5151},{},[5152],{"type":178,"value":5153},"[[Delete]]",{"type":172,"tag":811,"props":5155,"children":5156},{},[5157],{"type":178,"value":5158},"deleteProperty()",{"type":172,"tag":789,"props":5160,"children":5161},{},[5162,5167],{"type":172,"tag":811,"props":5163,"children":5164},{},[5165],{"type":178,"value":5166},"[[OwnPropertyKeys]]",{"type":172,"tag":811,"props":5168,"children":5169},{},[5170],{"type":178,"value":5171},"ownKeys()",{"type":172,"tag":789,"props":5173,"children":5174},{},[5175,5180],{"type":172,"tag":811,"props":5176,"children":5177},{},[5178],{"type":178,"value":5179},"[[Call]]",{"type":172,"tag":811,"props":5181,"children":5182},{},[5183],{"type":178,"value":5184},"apply()",{"type":172,"tag":789,"props":5186,"children":5187},{},[5188,5193],{"type":172,"tag":811,"props":5189,"children":5190},{},[5191],{"type":178,"value":5192},"[[Construct]]",{"type":172,"tag":811,"props":5194,"children":5195},{},[5196],{"type":178,"value":5197},"construct()",{"type":172,"tag":186,"props":5199,"children":5200},{},[5201],{"type":178,"value":5202},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":172,"tag":286,"props":5204,"children":5205},{},[5206,5211],{"type":172,"tag":290,"props":5207,"children":5208},{},[5209],{"type":178,"value":5210},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":172,"tag":290,"props":5212,"children":5213},{},[5214],{"type":178,"value":5215},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":172,"tag":186,"props":5217,"children":5218},{},[5219],{"type":178,"value":5220},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":172,"tag":197,"props":5222,"children":5224},{"className":430,"code":5223,"language":432,"meta":166,"style":166},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5225],{"type":172,"tag":204,"props":5226,"children":5227},{"__ignoreMap":166},[5228,5266,5315,5356,5434,5478,5543,5550,5584,5624,5663,5683,5700,5738,5745,5752,5763],{"type":172,"tag":208,"props":5229,"children":5230},{"class":210,"line":211},[5231,5235,5240,5244,5249,5253,5258,5262],{"type":172,"tag":208,"props":5232,"children":5233},{"style":766},[5234],{"type":178,"value":1092},{"type":172,"tag":208,"props":5236,"children":5237},{"style":454},[5238],{"type":178,"value":5239}," intrudeOnPrototype",{"type":172,"tag":208,"props":5241,"children":5242},{"style":448},[5243],{"type":178,"value":462},{"type":172,"tag":208,"props":5245,"children":5246},{"style":1393},[5247],{"type":178,"value":5248},"Fn",{"type":172,"tag":208,"props":5250,"children":5251},{"style":448},[5252],{"type":178,"value":478},{"type":172,"tag":208,"props":5254,"children":5255},{"style":1393},[5256],{"type":178,"value":5257}," handler",{"type":172,"tag":208,"props":5259,"children":5260},{"style":448},[5261],{"type":178,"value":1401},{"type":172,"tag":208,"props":5263,"children":5264},{"style":448},[5265],{"type":178,"value":1107},{"type":172,"tag":208,"props":5267,"children":5268},{"class":210,"line":501},[5269,5273,5278,5282,5286,5290,5295,5299,5303,5307,5311],{"type":172,"tag":208,"props":5270,"children":5271},{"style":766},[5272],{"type":178,"value":3544},{"type":172,"tag":208,"props":5274,"children":5275},{"style":1200},[5276],{"type":178,"value":5277}," originPrototype",{"type":172,"tag":208,"props":5279,"children":5280},{"style":238},[5281],{"type":178,"value":1130},{"type":172,"tag":208,"props":5283,"children":5284},{"style":442},[5285],{"type":178,"value":3879},{"type":172,"tag":208,"props":5287,"children":5288},{"style":448},[5289],{"type":178,"value":451},{"type":172,"tag":208,"props":5291,"children":5292},{"style":454},[5293],{"type":178,"value":5294},"getPrototypeOf",{"type":172,"tag":208,"props":5296,"children":5297},{"style":1164},[5298],{"type":178,"value":462},{"type":172,"tag":208,"props":5300,"children":5301},{"style":2589},[5302],{"type":178,"value":5248},{"type":172,"tag":208,"props":5304,"children":5305},{"style":448},[5306],{"type":178,"value":451},{"type":172,"tag":208,"props":5308,"children":5309},{"style":1200},[5310],{"type":178,"value":2600},{"type":172,"tag":208,"props":5312,"children":5313},{"style":1164},[5314],{"type":178,"value":1184},{"type":172,"tag":208,"props":5316,"children":5317},{"class":210,"line":1146},[5318,5322,5327,5331,5335,5339,5343,5347,5352],{"type":172,"tag":208,"props":5319,"children":5320},{"style":766},[5321],{"type":178,"value":3544},{"type":172,"tag":208,"props":5323,"children":5324},{"style":1200},[5325],{"type":178,"value":5326}," target",{"type":172,"tag":208,"props":5328,"children":5329},{"style":238},[5330],{"type":178,"value":1130},{"type":172,"tag":208,"props":5332,"children":5333},{"style":442},[5334],{"type":178,"value":3879},{"type":172,"tag":208,"props":5336,"children":5337},{"style":448},[5338],{"type":178,"value":451},{"type":172,"tag":208,"props":5340,"children":5341},{"style":454},[5342],{"type":178,"value":3888},{"type":172,"tag":208,"props":5344,"children":5345},{"style":1164},[5346],{"type":178,"value":462},{"type":172,"tag":208,"props":5348,"children":5349},{"style":442},[5350],{"type":178,"value":5351},"originPrototype",{"type":172,"tag":208,"props":5353,"children":5354},{"style":1164},[5355],{"type":178,"value":1184},{"type":172,"tag":208,"props":5357,"children":5358},{"class":210,"line":1187},[5359,5363,5367,5373,5377,5382,5386,5391,5395,5399,5404,5408,5413,5417,5422,5426,5430],{"type":172,"tag":208,"props":5360,"children":5361},{"style":766},[5362],{"type":178,"value":3544},{"type":172,"tag":208,"props":5364,"children":5365},{"style":448},[5366],{"type":178,"value":1478},{"type":172,"tag":208,"props":5368,"children":5370},{"style":5369},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5371],{"type":178,"value":5372}," proxy",{"type":172,"tag":208,"props":5374,"children":5375},{"style":448},[5376],{"type":178,"value":1626},{"type":172,"tag":208,"props":5378,"children":5379},{"style":1200},[5380],{"type":178,"value":5381}," newPrototype",{"type":172,"tag":208,"props":5383,"children":5384},{"style":448},[5385],{"type":178,"value":478},{"type":172,"tag":208,"props":5387,"children":5388},{"style":1200},[5389],{"type":178,"value":5390}," revoke",{"type":172,"tag":208,"props":5392,"children":5393},{"style":448},[5394],{"type":178,"value":1501},{"type":172,"tag":208,"props":5396,"children":5397},{"style":238},[5398],{"type":178,"value":1130},{"type":172,"tag":208,"props":5400,"children":5401},{"style":442},[5402],{"type":178,"value":5403}," Proxy",{"type":172,"tag":208,"props":5405,"children":5406},{"style":448},[5407],{"type":178,"value":451},{"type":172,"tag":208,"props":5409,"children":5410},{"style":454},[5411],{"type":178,"value":5412},"revocable",{"type":172,"tag":208,"props":5414,"children":5415},{"style":1164},[5416],{"type":178,"value":462},{"type":172,"tag":208,"props":5418,"children":5419},{"style":442},[5420],{"type":178,"value":5421},"target",{"type":172,"tag":208,"props":5423,"children":5424},{"style":448},[5425],{"type":178,"value":478},{"type":172,"tag":208,"props":5427,"children":5428},{"style":442},[5429],{"type":178,"value":5257},{"type":172,"tag":208,"props":5431,"children":5432},{"style":1164},[5433],{"type":178,"value":1184},{"type":172,"tag":208,"props":5435,"children":5436},{"class":210,"line":1196},[5437,5442,5446,5450,5454,5458,5462,5466,5470,5474],{"type":172,"tag":208,"props":5438,"children":5439},{"style":442},[5440],{"type":178,"value":5441},"  Object",{"type":172,"tag":208,"props":5443,"children":5444},{"style":448},[5445],{"type":178,"value":451},{"type":172,"tag":208,"props":5447,"children":5448},{"style":454},[5449],{"type":178,"value":3408},{"type":172,"tag":208,"props":5451,"children":5452},{"style":1164},[5453],{"type":178,"value":462},{"type":172,"tag":208,"props":5455,"children":5456},{"style":2589},[5457],{"type":178,"value":5248},{"type":172,"tag":208,"props":5459,"children":5460},{"style":448},[5461],{"type":178,"value":451},{"type":172,"tag":208,"props":5463,"children":5464},{"style":1200},[5465],{"type":178,"value":2600},{"type":172,"tag":208,"props":5467,"children":5468},{"style":448},[5469],{"type":178,"value":478},{"type":172,"tag":208,"props":5471,"children":5472},{"style":442},[5473],{"type":178,"value":5381},{"type":172,"tag":208,"props":5475,"children":5476},{"style":1164},[5477],{"type":178,"value":1184},{"type":172,"tag":208,"props":5479,"children":5480},{"class":210,"line":1231},[5481,5485,5489,5494,5498,5502,5506,5510,5514,5518,5522,5526,5530,5534,5538],{"type":172,"tag":208,"props":5482,"children":5483},{"style":1470},[5484],{"type":178,"value":4707},{"type":172,"tag":208,"props":5486,"children":5487},{"style":448},[5488],{"type":178,"value":1102},{"type":172,"tag":208,"props":5490,"children":5491},{"style":766},[5492],{"type":178,"value":5493}," =>",{"type":172,"tag":208,"props":5495,"children":5496},{"style":454},[5497],{"type":178,"value":5390},{"type":172,"tag":208,"props":5499,"children":5500},{"style":1164},[5501],{"type":178,"value":462},{"type":172,"tag":208,"props":5503,"children":5504},{"style":442},[5505],{"type":178,"value":445},{"type":172,"tag":208,"props":5507,"children":5508},{"style":448},[5509],{"type":178,"value":451},{"type":172,"tag":208,"props":5511,"children":5512},{"style":454},[5513],{"type":178,"value":3408},{"type":172,"tag":208,"props":5515,"children":5516},{"style":1164},[5517],{"type":178,"value":462},{"type":172,"tag":208,"props":5519,"children":5520},{"style":2589},[5521],{"type":178,"value":5248},{"type":172,"tag":208,"props":5523,"children":5524},{"style":448},[5525],{"type":178,"value":451},{"type":172,"tag":208,"props":5527,"children":5528},{"style":1200},[5529],{"type":178,"value":2600},{"type":172,"tag":208,"props":5531,"children":5532},{"style":448},[5533],{"type":178,"value":478},{"type":172,"tag":208,"props":5535,"children":5536},{"style":442},[5537],{"type":178,"value":5277},{"type":172,"tag":208,"props":5539,"children":5540},{"style":1164},[5541],{"type":178,"value":5542},"))\n",{"type":172,"tag":208,"props":5544,"children":5545},{"class":210,"line":1268},[5546],{"type":172,"tag":208,"props":5547,"children":5548},{"style":448},[5549],{"type":178,"value":1193},{"type":172,"tag":208,"props":5551,"children":5552},{"class":210,"line":1276},[5553,5558,5563,5567,5571,5576,5580],{"type":172,"tag":208,"props":5554,"children":5555},{"style":766},[5556],{"type":178,"value":5557},"const",{"type":172,"tag":208,"props":5559,"children":5560},{"style":1200},[5561],{"type":178,"value":5562}," recovery",{"type":172,"tag":208,"props":5564,"children":5565},{"style":238},[5566],{"type":178,"value":1130},{"type":172,"tag":208,"props":5568,"children":5569},{"style":454},[5570],{"type":178,"value":5239},{"type":172,"tag":208,"props":5572,"children":5573},{"style":442},[5574],{"type":178,"value":5575},"(String",{"type":172,"tag":208,"props":5577,"children":5578},{"style":448},[5579],{"type":178,"value":478},{"type":172,"tag":208,"props":5581,"children":5582},{"style":448},[5583],{"type":178,"value":1107},{"type":172,"tag":208,"props":5585,"children":5586},{"class":210,"line":1303},[5587,5591,5595,5599,5603,5607,5611,5616,5620],{"type":172,"tag":208,"props":5588,"children":5589},{"style":454},[5590],{"type":178,"value":2487},{"type":172,"tag":208,"props":5592,"children":5593},{"style":448},[5594],{"type":178,"value":1626},{"type":172,"tag":208,"props":5596,"children":5597},{"style":766},[5598],{"type":178,"value":1220},{"type":172,"tag":208,"props":5600,"children":5601},{"style":448},[5602],{"type":178,"value":1699},{"type":172,"tag":208,"props":5604,"children":5605},{"style":1393},[5606],{"type":178,"value":5421},{"type":172,"tag":208,"props":5608,"children":5609},{"style":448},[5610],{"type":178,"value":478},{"type":172,"tag":208,"props":5612,"children":5613},{"style":1393},[5614],{"type":178,"value":5615}," prop",{"type":172,"tag":208,"props":5617,"children":5618},{"style":448},[5619],{"type":178,"value":1401},{"type":172,"tag":208,"props":5621,"children":5622},{"style":448},[5623],{"type":178,"value":1107},{"type":172,"tag":208,"props":5625,"children":5626},{"class":210,"line":1879},[5627,5631,5635,5639,5643,5647,5651,5655,5659],{"type":172,"tag":208,"props":5628,"children":5629},{"style":1470},[5630],{"type":178,"value":1760},{"type":172,"tag":208,"props":5632,"children":5633},{"style":1164},[5634],{"type":178,"value":1699},{"type":172,"tag":208,"props":5636,"children":5637},{"style":442},[5638],{"type":178,"value":2807},{"type":172,"tag":208,"props":5640,"children":5641},{"style":238},[5642],{"type":178,"value":1773},{"type":172,"tag":208,"props":5644,"children":5645},{"style":221},[5646],{"type":178,"value":224},{"type":172,"tag":208,"props":5648,"children":5649},{"style":227},[5650],{"type":178,"value":1492},{"type":172,"tag":208,"props":5652,"children":5653},{"style":221},[5654],{"type":178,"value":235},{"type":172,"tag":208,"props":5656,"children":5657},{"style":1164},[5658],{"type":178,"value":492},{"type":172,"tag":208,"props":5660,"children":5661},{"style":448},[5662],{"type":178,"value":1516},{"type":172,"tag":208,"props":5664,"children":5665},{"class":210,"line":1939},[5666,5671,5675,5679],{"type":172,"tag":208,"props":5667,"children":5668},{"style":1470},[5669],{"type":178,"value":5670},"      return",{"type":172,"tag":208,"props":5672,"children":5673},{"style":221},[5674],{"type":178,"value":224},{"type":172,"tag":208,"props":5676,"children":5677},{"style":227},[5678],{"type":178,"value":1492},{"type":172,"tag":208,"props":5680,"children":5681},{"style":221},[5682],{"type":178,"value":1143},{"type":172,"tag":208,"props":5684,"children":5685},{"class":210,"line":2000},[5686,5691,5696],{"type":172,"tag":208,"props":5687,"children":5688},{"style":448},[5689],{"type":178,"value":5690},"    }",{"type":172,"tag":208,"props":5692,"children":5693},{"style":1470},[5694],{"type":178,"value":5695}," else",{"type":172,"tag":208,"props":5697,"children":5698},{"style":448},[5699],{"type":178,"value":1107},{"type":172,"tag":208,"props":5701,"children":5702},{"class":210,"line":2041},[5703,5707,5712,5716,5721,5725,5729,5734],{"type":172,"tag":208,"props":5704,"children":5705},{"style":1470},[5706],{"type":178,"value":5670},{"type":172,"tag":208,"props":5708,"children":5709},{"style":442},[5710],{"type":178,"value":5711}," Reflect",{"type":172,"tag":208,"props":5713,"children":5714},{"style":448},[5715],{"type":178,"value":451},{"type":172,"tag":208,"props":5717,"children":5718},{"style":454},[5719],{"type":178,"value":5720},"get",{"type":172,"tag":208,"props":5722,"children":5723},{"style":1164},[5724],{"type":178,"value":462},{"type":172,"tag":208,"props":5726,"children":5727},{"style":238},[5728],{"type":178,"value":1054},{"type":172,"tag":208,"props":5730,"children":5731},{"style":3802},[5732],{"type":178,"value":5733},"arguments",{"type":172,"tag":208,"props":5735,"children":5736},{"style":1164},[5737],{"type":178,"value":1184},{"type":172,"tag":208,"props":5739,"children":5740},{"class":210,"line":2082},[5741],{"type":172,"tag":208,"props":5742,"children":5743},{"style":448},[5744],{"type":178,"value":2088},{"type":172,"tag":208,"props":5746,"children":5747},{"class":210,"line":2091},[5748],{"type":172,"tag":208,"props":5749,"children":5750},{"style":448},[5751],{"type":178,"value":1846},{"type":172,"tag":208,"props":5753,"children":5754},{"class":210,"line":2099},[5755,5759],{"type":172,"tag":208,"props":5756,"children":5757},{"style":448},[5758],{"type":178,"value":1440},{"type":172,"tag":208,"props":5760,"children":5761},{"style":442},[5762],{"type":178,"value":1184},{"type":172,"tag":208,"props":5764,"children":5766},{"class":210,"line":5765},17,[5767,5771,5775,5779,5783,5788,5792,5797],{"type":172,"tag":208,"props":5768,"children":5769},{"style":442},[5770],{"type":178,"value":4786},{"type":172,"tag":208,"props":5772,"children":5773},{"style":448},[5774],{"type":178,"value":451},{"type":172,"tag":208,"props":5776,"children":5777},{"style":454},[5778],{"type":178,"value":1161},{"type":172,"tag":208,"props":5780,"children":5781},{"style":442},[5782],{"type":178,"value":462},{"type":172,"tag":208,"props":5784,"children":5785},{"style":221},[5786],{"type":178,"value":5787},"''",{"type":172,"tag":208,"props":5789,"children":5790},{"style":448},[5791],{"type":178,"value":451},{"type":172,"tag":208,"props":5793,"children":5794},{"style":442},[5795],{"type":178,"value":5796},"test) ",{"type":172,"tag":208,"props":5798,"children":5799},{"style":495},[5800],{"type":178,"value":5801},"// test\n",{"type":172,"tag":180,"props":5803,"children":5805},{"id":5804},"元编程系统",[5806],{"type":178,"value":5804},{"type":172,"tag":186,"props":5808,"children":5809},{},[5810],{"type":178,"value":5811},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":172,"tag":173,"props":5813,"children":5815},{"id":5814},"结构化",[5816],{"type":178,"value":5814},{"type":172,"tag":180,"props":5818,"children":5820},{"id":5819},"概述",[5821],{"type":178,"value":5819},{"type":172,"tag":186,"props":5823,"children":5824},{},[5825],{"type":178,"value":5826},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":172,"tag":186,"props":5828,"children":5829},{},[5830],{"type":178,"value":5831},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":172,"tag":186,"props":5833,"children":5834},{},[5835],{"type":178,"value":5836},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":172,"tag":186,"props":5838,"children":5839},{},[5840],{"type":178,"value":5841},"面向对象解决了结构化带来诸多问题的三点：",{"type":172,"tag":286,"props":5843,"children":5844},{},[5845,5850,5855],{"type":172,"tag":290,"props":5846,"children":5847},{},[5848],{"type":178,"value":5849},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":172,"tag":290,"props":5851,"children":5852},{},[5853],{"type":178,"value":5854},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":172,"tag":290,"props":5856,"children":5857},{},[5858],{"type":178,"value":5859},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":172,"tag":186,"props":5861,"children":5862},{},[5863],{"type":178,"value":5864},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":172,"tag":186,"props":5866,"children":5867},{},[5868],{"type":178,"value":5869},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":172,"tag":180,"props":5871,"children":5873},{"id":5872},"基本的组织元素",[5874],{"type":178,"value":5872},{"type":172,"tag":186,"props":5876,"children":5877},{},[5878],{"type":178,"value":5879},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":172,"tag":781,"props":5881,"children":5882},{},[5883,5909],{"type":172,"tag":785,"props":5884,"children":5885},{},[5886],{"type":172,"tag":789,"props":5887,"children":5888},{},[5889,5894,5899,5904],{"type":172,"tag":793,"props":5890,"children":5891},{},[5892],{"type":178,"value":5893},"元素",{"type":172,"tag":793,"props":5895,"children":5896},{},[5897],{"type":178,"value":5898},"物理形态",{"type":172,"tag":793,"props":5900,"children":5901},{},[5902],{"type":178,"value":5903},"静态",{"type":172,"tag":793,"props":5905,"children":5906},{},[5907],{"type":178,"value":5908},"动态",{"type":172,"tag":804,"props":5910,"children":5911},{},[5912,5933,5956,5978],{"type":172,"tag":789,"props":5913,"children":5914},{},[5915,5920,5923,5928],{"type":172,"tag":811,"props":5916,"children":5917},{},[5918],{"type":178,"value":5919},"标识符",{"type":172,"tag":811,"props":5921,"children":5922},{},[],{"type":172,"tag":811,"props":5924,"children":5925},{},[5926],{"type":178,"value":5927},"变量声明、函数声明、类声明",{"type":172,"tag":811,"props":5929,"children":5930},{},[5931],{"type":178,"value":5932},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":172,"tag":789,"props":5934,"children":5935},{},[5936,5941,5946,5951],{"type":172,"tag":811,"props":5937,"children":5938},{},[5939],{"type":178,"value":5940},"表达式",{"type":172,"tag":811,"props":5942,"children":5943},{},[5944],{"type":178,"value":5945},"模板字符串",{"type":172,"tag":811,"props":5947,"children":5948},{},[5949],{"type":178,"value":5950},"值、箭头函数体",{"type":172,"tag":811,"props":5952,"children":5953},{},[5954],{"type":178,"value":5955},"通过 eval 执行表达式语句",{"type":172,"tag":789,"props":5957,"children":5958},{},[5959,5963,5968,5973],{"type":172,"tag":811,"props":5960,"children":5961},{},[5962],{"type":178,"value":1332},{"type":172,"tag":811,"props":5964,"children":5965},{},[5966],{"type":178,"value":5967},".js 文件",{"type":172,"tag":811,"props":5969,"children":5970},{},[5971],{"type":178,"value":5972},"块和块级作用域",{"type":172,"tag":811,"props":5974,"children":5975},{},[5976],{"type":178,"value":5977},"eval()",{"type":172,"tag":789,"props":5979,"children":5980},{},[5981,5985,5990,5995],{"type":172,"tag":811,"props":5982,"children":5983},{},[5984],{"type":178,"value":2117},{"type":172,"tag":811,"props":5986,"children":5987},{},[5988],{"type":178,"value":5989},".mjs 文件",{"type":172,"tag":811,"props":5991,"children":5992},{},[5993],{"type":178,"value":5994},"import、export、require()",{"type":172,"tag":811,"props":5996,"children":5997},{},[5998],{"type":178,"value":5999},"import().then()",{"type":172,"tag":186,"props":6001,"children":6002},{},[6003],{"type":178,"value":6004},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":172,"tag":186,"props":6006,"children":6007},{},[6008],{"type":178,"value":6009},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":172,"tag":186,"props":6011,"children":6012},{},[6013],{"type":178,"value":6014},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":172,"tag":186,"props":6016,"children":6017},{},[6018,6020,6025],{"type":178,"value":6019},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":172,"tag":208,"props":6021,"children":6022},{},[6023],{"type":178,"value":6024},"1,2,3",{"type":178,"value":6026}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":172,"tag":186,"props":6028,"children":6029},{},[6030],{"type":178,"value":6031},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":172,"tag":186,"props":6033,"children":6034},{},[6035],{"type":178,"value":6036},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":172,"tag":186,"props":6038,"children":6039},{},[6040],{"type":178,"value":6041},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":172,"tag":186,"props":6043,"children":6044},{},[6045],{"type":178,"value":6046},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":172,"tag":180,"props":6048,"children":6050},{"id":6049},"声明",[6051],{"type":178,"value":6049},{"type":172,"tag":186,"props":6053,"children":6054},{},[6055,6057,6068],{"type":178,"value":6056},"除了 const 和 namespace",{"type":172,"tag":265,"props":6058,"children":6059},{},[6060],{"type":172,"tag":269,"props":6061,"children":6065},{"href":6062,"ariaDescribedBy":6063,"dataFootnoteRef":166,"id":6064},"#user-content-fn-namespace",[273],"user-content-fnref-namespace",[6066],{"type":178,"value":6067},"4",{"type":178,"value":6069}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":172,"tag":197,"props":6071,"children":6073},{"className":430,"code":6072,"language":432,"meta":166,"style":166},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6074],{"type":172,"tag":204,"props":6075,"children":6076},{"__ignoreMap":166},[6077,6105,6121,6153,6175],{"type":172,"tag":208,"props":6078,"children":6079},{"class":210,"line":211},[6080,6085,6089,6093,6097,6101],{"type":172,"tag":208,"props":6081,"children":6082},{"style":238},[6083],{"type":178,"value":6084},"!",{"type":172,"tag":208,"props":6086,"children":6087},{"style":442},[6088],{"type":178,"value":462},{"type":172,"tag":208,"props":6090,"children":6091},{"style":766},[6092],{"type":178,"value":1092},{"type":172,"tag":208,"props":6094,"children":6095},{"style":454},[6096],{"type":178,"value":1792},{"type":172,"tag":208,"props":6098,"children":6099},{"style":448},[6100],{"type":178,"value":815},{"type":172,"tag":208,"props":6102,"children":6103},{"style":448},[6104],{"type":178,"value":1107},{"type":172,"tag":208,"props":6106,"children":6107},{"class":210,"line":501},[6108,6112,6116],{"type":172,"tag":208,"props":6109,"children":6110},{"style":442},[6111],{"type":178,"value":2540},{"type":172,"tag":208,"props":6113,"children":6114},{"style":238},[6115],{"type":178,"value":1130},{"type":172,"tag":208,"props":6117,"children":6118},{"style":470},[6119],{"type":178,"value":6120}," 100\n",{"type":172,"tag":208,"props":6122,"children":6123},{"class":210,"line":1146},[6124,6128,6132,6136,6140,6144,6148],{"type":172,"tag":208,"props":6125,"children":6126},{"style":442},[6127],{"type":178,"value":1152},{"type":172,"tag":208,"props":6129,"children":6130},{"style":448},[6131],{"type":178,"value":451},{"type":172,"tag":208,"props":6133,"children":6134},{"style":454},[6135],{"type":178,"value":1161},{"type":172,"tag":208,"props":6137,"children":6138},{"style":1164},[6139],{"type":178,"value":462},{"type":172,"tag":208,"props":6141,"children":6142},{"style":442},[6143],{"type":178,"value":1492},{"type":172,"tag":208,"props":6145,"children":6146},{"style":1164},[6147],{"type":178,"value":492},{"type":172,"tag":208,"props":6149,"children":6150},{"style":495},[6151],{"type":178,"value":6152},"// [Function ...]\n",{"type":172,"tag":208,"props":6154,"children":6155},{"class":210,"line":1187},[6156,6161,6165,6170],{"type":172,"tag":208,"props":6157,"children":6158},{"style":3802},[6159],{"type":178,"value":6160},"  arguments",{"type":172,"tag":208,"props":6162,"children":6163},{"style":238},[6164],{"type":178,"value":1130},{"type":172,"tag":208,"props":6166,"children":6167},{"style":1164},[6168],{"type":178,"value":6169}," [] ",{"type":172,"tag":208,"props":6171,"children":6172},{"style":495},[6173],{"type":178,"value":6174},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":172,"tag":208,"props":6176,"children":6177},{"class":210,"line":1196},[6178,6182],{"type":172,"tag":208,"props":6179,"children":6180},{"style":448},[6181],{"type":178,"value":1440},{"type":172,"tag":208,"props":6183,"children":6184},{"style":442},[6185],{"type":178,"value":6186},"())\n",{"type":172,"tag":186,"props":6188,"children":6189},{},[6190],{"type":178,"value":6191},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":172,"tag":197,"props":6193,"children":6195},{"className":430,"code":6194,"language":432,"meta":166,"style":166},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6196],{"type":172,"tag":204,"props":6197,"children":6198},{"__ignoreMap":166},[6199,6207,6226,6252,6280,6318],{"type":172,"tag":208,"props":6200,"children":6201},{"class":210,"line":211},[6202],{"type":172,"tag":208,"props":6203,"children":6204},{"style":495},[6205],{"type":178,"value":6206},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":172,"tag":208,"props":6208,"children":6209},{"class":210,"line":501},[6210,6214,6218,6222],{"type":172,"tag":208,"props":6211,"children":6212},{"style":766},[6213],{"type":178,"value":1092},{"type":172,"tag":208,"props":6215,"children":6216},{"style":454},[6217],{"type":178,"value":1792},{"type":172,"tag":208,"props":6219,"children":6220},{"style":448},[6221],{"type":178,"value":815},{"type":172,"tag":208,"props":6223,"children":6224},{"style":448},[6225],{"type":178,"value":1107},{"type":172,"tag":208,"props":6227,"children":6228},{"class":210,"line":1146},[6229,6234,6238,6243,6247],{"type":172,"tag":208,"props":6230,"children":6231},{"style":448},[6232],{"type":178,"value":6233},"  {",{"type":172,"tag":208,"props":6235,"children":6236},{"style":766},[6237],{"type":178,"value":1092},{"type":172,"tag":208,"props":6239,"children":6240},{"style":454},[6241],{"type":178,"value":6242}," x",{"type":172,"tag":208,"props":6244,"children":6245},{"style":448},[6246],{"type":178,"value":1102},{"type":172,"tag":208,"props":6248,"children":6249},{"style":448},[6250],{"type":178,"value":6251}," {}};\n",{"type":172,"tag":208,"props":6253,"children":6254},{"class":210,"line":1187},[6255,6259,6263,6267,6272,6276],{"type":172,"tag":208,"props":6256,"children":6257},{"style":1619},[6258],{"type":178,"value":2540},{"type":172,"tag":208,"props":6260,"children":6261},{"style":448},[6262],{"type":178,"value":1626},{"type":172,"tag":208,"props":6264,"children":6265},{"style":766},[6266],{"type":178,"value":1220},{"type":172,"tag":208,"props":6268,"children":6269},{"style":454},[6270],{"type":178,"value":6271}," y",{"type":172,"tag":208,"props":6273,"children":6274},{"style":448},[6275],{"type":178,"value":1102},{"type":172,"tag":208,"props":6277,"children":6278},{"style":448},[6279],{"type":178,"value":2898},{"type":172,"tag":208,"props":6281,"children":6282},{"class":210,"line":1196},[6283,6288,6292,6297,6301,6305,6310,6314],{"type":172,"tag":208,"props":6284,"children":6285},{"style":1470},[6286],{"type":178,"value":6287},"  if",{"type":172,"tag":208,"props":6289,"children":6290},{"style":1164},[6291],{"type":178,"value":1699},{"type":172,"tag":208,"props":6293,"children":6294},{"style":605},[6295],{"type":178,"value":6296},"true",{"type":172,"tag":208,"props":6298,"children":6299},{"style":1164},[6300],{"type":178,"value":492},{"type":172,"tag":208,"props":6302,"children":6303},{"style":766},[6304],{"type":178,"value":1092},{"type":172,"tag":208,"props":6306,"children":6307},{"style":454},[6308],{"type":178,"value":6309}," z",{"type":172,"tag":208,"props":6311,"children":6312},{"style":448},[6313],{"type":178,"value":1102},{"type":172,"tag":208,"props":6315,"children":6316},{"style":448},[6317],{"type":178,"value":2898},{"type":172,"tag":208,"props":6319,"children":6320},{"class":210,"line":1231},[6321],{"type":172,"tag":208,"props":6322,"children":6323},{"style":448},[6324],{"type":178,"value":1193},{"type":172,"tag":180,"props":6326,"children":6328},{"id":6327},"语句与代码分块",[6329],{"type":178,"value":6327},{"type":172,"tag":186,"props":6331,"children":6332},{},[6333],{"type":178,"value":6334},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":172,"tag":186,"props":6336,"children":6337},{},[6338],{"type":178,"value":6339},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":172,"tag":186,"props":6341,"children":6342},{},[6343,6345,6356],{"type":178,"value":6344},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":172,"tag":265,"props":6346,"children":6347},{},[6348],{"type":172,"tag":269,"props":6349,"children":6353},{"href":6350,"ariaDescribedBy":6351,"dataFootnoteRef":166,"id":6352},"#user-content-fn-iterationenv",[273],"user-content-fnref-iterationenv",[6354],{"type":178,"value":6355},"5",{"type":178,"value":6357},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":172,"tag":186,"props":6359,"children":6360},{},[6361],{"type":178,"value":6362},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":172,"tag":186,"props":6364,"children":6365},{},[6366],{"type":178,"value":6367},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":172,"tag":197,"props":6369,"children":6371},{"className":430,"code":6370,"language":432,"meta":166,"style":166},"eval(`if (true) ; else ;`) // undefined\n",[6372],{"type":172,"tag":204,"props":6373,"children":6374},{"__ignoreMap":166},[6375],{"type":172,"tag":208,"props":6376,"children":6377},{"class":210,"line":211},[6378,6383,6387,6392,6397,6401,6405],{"type":172,"tag":208,"props":6379,"children":6380},{"style":454},[6381],{"type":178,"value":6382},"eval",{"type":172,"tag":208,"props":6384,"children":6385},{"style":442},[6386],{"type":178,"value":462},{"type":172,"tag":208,"props":6388,"children":6389},{"style":221},[6390],{"type":178,"value":6391},"`",{"type":172,"tag":208,"props":6393,"children":6394},{"style":227},[6395],{"type":178,"value":6396},"if (true) ; else ;",{"type":172,"tag":208,"props":6398,"children":6399},{"style":221},[6400],{"type":178,"value":6391},{"type":172,"tag":208,"props":6402,"children":6403},{"style":442},[6404],{"type":178,"value":492},{"type":172,"tag":208,"props":6406,"children":6407},{"style":495},[6408],{"type":178,"value":732},{"type":172,"tag":180,"props":6410,"children":6412},{"id":6411},"组织形式分块的方法",[6413],{"type":178,"value":6411},{"type":172,"tag":186,"props":6415,"children":6416},{},[6417],{"type":178,"value":6418},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":172,"tag":186,"props":6420,"children":6421},{},[6422],{"type":178,"value":6423},"数据声明语句中存在块级作用域，如：",{"type":172,"tag":197,"props":6425,"children":6427},{"className":430,"code":6426,"language":432,"meta":166,"style":166},"const x = 1, y = x\nconsole.log(y) // 1\n",[6428],{"type":172,"tag":204,"props":6429,"children":6430},{"__ignoreMap":166},[6431,6466],{"type":172,"tag":208,"props":6432,"children":6433},{"class":210,"line":211},[6434,6438,6442,6446,6450,6454,6458,6462],{"type":172,"tag":208,"props":6435,"children":6436},{"style":766},[6437],{"type":178,"value":5557},{"type":172,"tag":208,"props":6439,"children":6440},{"style":1200},[6441],{"type":178,"value":6242},{"type":172,"tag":208,"props":6443,"children":6444},{"style":238},[6445],{"type":178,"value":1130},{"type":172,"tag":208,"props":6447,"children":6448},{"style":470},[6449],{"type":178,"value":1576},{"type":172,"tag":208,"props":6451,"children":6452},{"style":448},[6453],{"type":178,"value":478},{"type":172,"tag":208,"props":6455,"children":6456},{"style":1200},[6457],{"type":178,"value":6271},{"type":172,"tag":208,"props":6459,"children":6460},{"style":238},[6461],{"type":178,"value":1130},{"type":172,"tag":208,"props":6463,"children":6464},{"style":442},[6465],{"type":178,"value":774},{"type":172,"tag":208,"props":6467,"children":6468},{"class":210,"line":501},[6469,6473,6477,6481,6486],{"type":172,"tag":208,"props":6470,"children":6471},{"style":442},[6472],{"type":178,"value":4786},{"type":172,"tag":208,"props":6474,"children":6475},{"style":448},[6476],{"type":178,"value":451},{"type":172,"tag":208,"props":6478,"children":6479},{"style":454},[6480],{"type":178,"value":1161},{"type":172,"tag":208,"props":6482,"children":6483},{"style":442},[6484],{"type":178,"value":6485},"(y) ",{"type":172,"tag":208,"props":6487,"children":6488},{"style":495},[6489],{"type":178,"value":6490},"// 1\n",{"type":172,"tag":186,"props":6492,"children":6493},{},[6494],{"type":178,"value":6495},"表达式级别的作用域只存在于 eval 调用中。",{"type":172,"tag":186,"props":6497,"children":6498},{},[6499],{"type":178,"value":6500},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":172,"tag":197,"props":6502,"children":6504},{"className":430,"code":6503,"language":432,"meta":166,"style":166},"if (1) let x = 1\n",[6505],{"type":172,"tag":204,"props":6506,"children":6507},{"__ignoreMap":166},[6508],{"type":172,"tag":208,"props":6509,"children":6510},{"class":210,"line":211},[6511,6516,6520,6524,6528,6532,6536,6540],{"type":172,"tag":208,"props":6512,"children":6513},{"style":1470},[6514],{"type":178,"value":6515},"if",{"type":172,"tag":208,"props":6517,"children":6518},{"style":442},[6519],{"type":178,"value":1699},{"type":172,"tag":208,"props":6521,"children":6522},{"style":470},[6523],{"type":178,"value":277},{"type":172,"tag":208,"props":6525,"children":6526},{"style":442},[6527],{"type":178,"value":492},{"type":172,"tag":208,"props":6529,"children":6530},{"style":766},[6531],{"type":178,"value":769},{"type":172,"tag":208,"props":6533,"children":6534},{"style":442},[6535],{"type":178,"value":727},{"type":172,"tag":208,"props":6537,"children":6538},{"style":238},[6539],{"type":178,"value":1641},{"type":172,"tag":208,"props":6541,"children":6542},{"style":470},[6543],{"type":178,"value":6544}," 1\n",{"type":172,"tag":186,"props":6546,"children":6547},{},[6548],{"type":178,"value":6549},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":172,"tag":186,"props":6551,"children":6552},{},[6553],{"type":178,"value":6554},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":172,"tag":186,"props":6556,"children":6557},{},[6558],{"type":178,"value":6559},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":172,"tag":286,"props":6561,"children":6562},{},[6563,6568,6573],{"type":172,"tag":290,"props":6564,"children":6565},{},[6566],{"type":178,"value":6567},"词法作用域互不相交。",{"type":172,"tag":290,"props":6569,"children":6570},{},[6571],{"type":178,"value":6572},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":172,"tag":290,"props":6574,"children":6575},{},[6576],{"type":178,"value":6577},"高级别流程变更语句可以跨越低级别的作用域。",{"type":172,"tag":186,"props":6579,"children":6580},{},[6581],{"type":178,"value":6582},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":172,"tag":180,"props":6584,"children":6586},{"id":6585},"层次结构程序设计",[6587],{"type":178,"value":6585},{"type":172,"tag":186,"props":6589,"children":6590},{},[6591],{"type":178,"value":6592},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":172,"tag":197,"props":6594,"children":6596},{"className":430,"code":6595,"language":432,"meta":166,"style":166},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6597],{"type":172,"tag":204,"props":6598,"children":6599},{"__ignoreMap":166},[6600,6639],{"type":172,"tag":208,"props":6601,"children":6602},{"class":210,"line":211},[6603,6607,6612,6616,6621,6625,6630,6634],{"type":172,"tag":208,"props":6604,"children":6605},{"style":766},[6606],{"type":178,"value":5557},{"type":172,"tag":208,"props":6608,"children":6609},{"style":1200},[6610],{"type":178,"value":6611}," method",{"type":172,"tag":208,"props":6613,"children":6614},{"style":238},[6615],{"type":178,"value":1130},{"type":172,"tag":208,"props":6617,"children":6618},{"style":442},[6619],{"type":178,"value":6620}," obj[Object",{"type":172,"tag":208,"props":6622,"children":6623},{"style":448},[6624],{"type":178,"value":451},{"type":172,"tag":208,"props":6626,"children":6627},{"style":442},[6628],{"type":178,"value":6629},"getPropertySymbols[",{"type":172,"tag":208,"props":6631,"children":6632},{"style":470},[6633],{"type":178,"value":473},{"type":172,"tag":208,"props":6635,"children":6636},{"style":442},[6637],{"type":178,"value":6638},"]]\n",{"type":172,"tag":208,"props":6640,"children":6641},{"class":210,"line":501},[6642,6646,6650,6655],{"type":172,"tag":208,"props":6643,"children":6644},{"style":442},[6645],{"type":178,"value":3520},{"type":172,"tag":208,"props":6647,"children":6648},{"style":448},[6649],{"type":178,"value":451},{"type":172,"tag":208,"props":6651,"children":6652},{"style":454},[6653],{"type":178,"value":6654},"call",{"type":172,"tag":208,"props":6656,"children":6657},{"style":442},[6658],{"type":178,"value":6659},"(obj)\n",{"type":172,"tag":186,"props":6661,"children":6662},{},[6663],{"type":178,"value":6664},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":172,"tag":180,"props":6666,"children":6668},{"id":6667},"变量作用域",[6669],{"type":178,"value":6667},{"type":172,"tag":186,"props":6671,"children":6672},{},[6673],{"type":178,"value":6674},"变量作用域有三个特殊之处：",{"type":172,"tag":286,"props":6676,"children":6677},{},[6678,6683,6688],{"type":172,"tag":290,"props":6679,"children":6680},{},[6681],{"type":178,"value":6682},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":172,"tag":290,"props":6684,"children":6685},{},[6686],{"type":178,"value":6687},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":172,"tag":290,"props":6689,"children":6690},{},[6691],{"type":178,"value":6692},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":172,"tag":186,"props":6694,"children":6695},{},[6696],{"type":178,"value":6697},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":172,"tag":186,"props":6699,"children":6700},{},[6701],{"type":178,"value":6702},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":172,"tag":180,"props":6704,"children":6706},{"id":6705},"私有属性和私有字段的纷争",[6707],{"type":178,"value":6705},{"type":172,"tag":186,"props":6709,"children":6710},{},[6711],{"type":178,"value":6712},"(_　_)。゜zｚＺ",{"type":172,"tag":173,"props":6714,"children":6716},{"id":6715},"函数式语言特性",[6717],{"type":178,"value":6715},{"type":172,"tag":180,"props":6719,"children":6721},{"id":6720},"概述-1",[6722],{"type":178,"value":5819},{"type":172,"tag":186,"props":6724,"children":6725},{},[6726],{"type":178,"value":6727},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":172,"tag":186,"props":6729,"children":6730},{},[6731],{"type":178,"value":6732},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":172,"tag":180,"props":6734,"children":6736},{"id":6735},"js中的函数",[6737],{"type":178,"value":6738},"JS中的函数",{"type":172,"tag":186,"props":6740,"children":6741},{},[6742],{"type":178,"value":6743},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":172,"tag":286,"props":6745,"children":6746},{},[6747,6752,6757],{"type":172,"tag":290,"props":6748,"children":6749},{},[6750],{"type":178,"value":6751},"无法显式使用“use strict”切换到严格模式。",{"type":172,"tag":290,"props":6753,"children":6754},{},[6755],{"type":178,"value":6756},"不接受重名参数。",{"type":172,"tag":290,"props":6758,"children":6759},{},[6760],{"type":178,"value":6761},"形参和 arguments 之间将解除绑定关系。",{"type":172,"tag":186,"props":6763,"children":6764},{},[6765],{"type":178,"value":6766},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":172,"tag":197,"props":6768,"children":6770},{"className":430,"code":6769,"language":432,"meta":166,"style":166},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[6771],{"type":172,"tag":204,"props":6772,"children":6773},{"__ignoreMap":166},[6774,6818,6871,6878],{"type":172,"tag":208,"props":6775,"children":6776},{"class":210,"line":211},[6777,6781,6785,6789,6793,6797,6802,6806,6810,6814],{"type":172,"tag":208,"props":6778,"children":6779},{"style":766},[6780],{"type":178,"value":1092},{"type":172,"tag":208,"props":6782,"children":6783},{"style":454},[6784],{"type":178,"value":1792},{"type":172,"tag":208,"props":6786,"children":6787},{"style":448},[6788],{"type":178,"value":462},{"type":172,"tag":208,"props":6790,"children":6791},{"style":1393},[6792],{"type":178,"value":269},{"type":172,"tag":208,"props":6794,"children":6795},{"style":448},[6796],{"type":178,"value":478},{"type":172,"tag":208,"props":6798,"children":6799},{"style":1393},[6800],{"type":178,"value":6801}," b",{"type":172,"tag":208,"props":6803,"children":6804},{"style":238},[6805],{"type":178,"value":1130},{"type":172,"tag":208,"props":6807,"children":6808},{"style":470},[6809],{"type":178,"value":1576},{"type":172,"tag":208,"props":6811,"children":6812},{"style":448},[6813],{"type":178,"value":1401},{"type":172,"tag":208,"props":6815,"children":6816},{"style":448},[6817],{"type":178,"value":1107},{"type":172,"tag":208,"props":6819,"children":6820},{"class":210,"line":501},[6821,6825,6829,6833,6837,6841,6845,6850,6854,6859,6863,6867],{"type":172,"tag":208,"props":6822,"children":6823},{"style":442},[6824],{"type":178,"value":1152},{"type":172,"tag":208,"props":6826,"children":6827},{"style":448},[6828],{"type":178,"value":451},{"type":172,"tag":208,"props":6830,"children":6831},{"style":454},[6832],{"type":178,"value":1161},{"type":172,"tag":208,"props":6834,"children":6835},{"style":1164},[6836],{"type":178,"value":462},{"type":172,"tag":208,"props":6838,"children":6839},{"style":442},[6840],{"type":178,"value":1492},{"type":172,"tag":208,"props":6842,"children":6843},{"style":448},[6844],{"type":178,"value":451},{"type":172,"tag":208,"props":6846,"children":6847},{"style":1200},[6848],{"type":178,"value":6849},"length",{"type":172,"tag":208,"props":6851,"children":6852},{"style":448},[6853],{"type":178,"value":478},{"type":172,"tag":208,"props":6855,"children":6856},{"style":3802},[6857],{"type":178,"value":6858}," arguments",{"type":172,"tag":208,"props":6860,"children":6861},{"style":448},[6862],{"type":178,"value":451},{"type":172,"tag":208,"props":6864,"children":6865},{"style":1200},[6866],{"type":178,"value":6849},{"type":172,"tag":208,"props":6868,"children":6869},{"style":1164},[6870],{"type":178,"value":1184},{"type":172,"tag":208,"props":6872,"children":6873},{"class":210,"line":1146},[6874],{"type":172,"tag":208,"props":6875,"children":6876},{"style":448},[6877],{"type":178,"value":1193},{"type":172,"tag":208,"props":6879,"children":6880},{"class":210,"line":1187},[6881,6885,6889,6893,6897,6902,6906],{"type":172,"tag":208,"props":6882,"children":6883},{"style":454},[6884],{"type":178,"value":1492},{"type":172,"tag":208,"props":6886,"children":6887},{"style":442},[6888],{"type":178,"value":462},{"type":172,"tag":208,"props":6890,"children":6891},{"style":470},[6892],{"type":178,"value":277},{"type":172,"tag":208,"props":6894,"children":6895},{"style":448},[6896],{"type":178,"value":478},{"type":172,"tag":208,"props":6898,"children":6899},{"style":470},[6900],{"type":178,"value":6901}," 2",{"type":172,"tag":208,"props":6903,"children":6904},{"style":442},[6905],{"type":178,"value":492},{"type":172,"tag":208,"props":6907,"children":6908},{"style":495},[6909],{"type":178,"value":6910},"// 1，2\n",{"type":172,"tag":186,"props":6912,"children":6913},{},[6914,6916,6927],{"type":178,"value":6915},"表达式最后返回的是值而不是引用",{"type":172,"tag":265,"props":6917,"children":6918},{},[6919],{"type":172,"tag":269,"props":6920,"children":6924},{"href":6921,"ariaDescribedBy":6922,"dataFootnoteRef":166,"id":6923},"#user-content-fn-reference",[273],"user-content-fnref-reference",[6925],{"type":178,"value":6926},"6",{"type":178,"value":6928},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":172,"tag":197,"props":6930,"children":6932},{"className":430,"code":6931,"language":432,"meta":166,"style":166},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[6933],{"type":172,"tag":204,"props":6934,"children":6935},{"__ignoreMap":166},[6936,6961,6980,7001,7017,7054,7061,7068,7105],{"type":172,"tag":208,"props":6937,"children":6938},{"class":210,"line":211},[6939,6944,6948,6953,6957],{"type":172,"tag":208,"props":6940,"children":6941},{"style":442},[6942],{"type":178,"value":6943},"window",{"type":172,"tag":208,"props":6945,"children":6946},{"style":448},[6947],{"type":178,"value":451},{"type":172,"tag":208,"props":6949,"children":6950},{"style":442},[6951],{"type":178,"value":6952},"x ",{"type":172,"tag":208,"props":6954,"children":6955},{"style":238},[6956],{"type":178,"value":1641},{"type":172,"tag":208,"props":6958,"children":6959},{"style":470},[6960],{"type":178,"value":6544},{"type":172,"tag":208,"props":6962,"children":6963},{"class":210,"line":501},[6964,6968,6972,6976],{"type":172,"tag":208,"props":6965,"children":6966},{"style":766},[6967],{"type":178,"value":5557},{"type":172,"tag":208,"props":6969,"children":6970},{"style":1200},[6971],{"type":178,"value":2990},{"type":172,"tag":208,"props":6973,"children":6974},{"style":238},[6975],{"type":178,"value":1130},{"type":172,"tag":208,"props":6977,"children":6978},{"style":448},[6979],{"type":178,"value":1107},{"type":172,"tag":208,"props":6981,"children":6982},{"class":210,"line":1146},[6983,6988,6992,6996],{"type":172,"tag":208,"props":6984,"children":6985},{"style":1164},[6986],{"type":178,"value":6987},"  x",{"type":172,"tag":208,"props":6989,"children":6990},{"style":448},[6991],{"type":178,"value":1626},{"type":172,"tag":208,"props":6993,"children":6994},{"style":470},[6995],{"type":178,"value":6901},{"type":172,"tag":208,"props":6997,"children":6998},{"style":448},[6999],{"type":178,"value":7000},",\n",{"type":172,"tag":208,"props":7002,"children":7003},{"class":210,"line":1187},[7004,7009,7013],{"type":172,"tag":208,"props":7005,"children":7006},{"style":2426},[7007],{"type":178,"value":7008},"  b",{"type":172,"tag":208,"props":7010,"children":7011},{"style":448},[7012],{"type":178,"value":1102},{"type":172,"tag":208,"props":7014,"children":7015},{"style":448},[7016],{"type":178,"value":1107},{"type":172,"tag":208,"props":7018,"children":7019},{"class":210,"line":1196},[7020,7025,7029,7033,7037,7042,7046,7050],{"type":172,"tag":208,"props":7021,"children":7022},{"style":442},[7023],{"type":178,"value":7024},"    console",{"type":172,"tag":208,"props":7026,"children":7027},{"style":448},[7028],{"type":178,"value":451},{"type":172,"tag":208,"props":7030,"children":7031},{"style":454},[7032],{"type":178,"value":1161},{"type":172,"tag":208,"props":7034,"children":7035},{"style":1164},[7036],{"type":178,"value":462},{"type":172,"tag":208,"props":7038,"children":7039},{"style":1113},[7040],{"type":178,"value":7041},"this",{"type":172,"tag":208,"props":7043,"children":7044},{"style":448},[7045],{"type":178,"value":451},{"type":172,"tag":208,"props":7047,"children":7048},{"style":442},[7049],{"type":178,"value":2437},{"type":172,"tag":208,"props":7051,"children":7052},{"style":1164},[7053],{"type":178,"value":1184},{"type":172,"tag":208,"props":7055,"children":7056},{"class":210,"line":1231},[7057],{"type":172,"tag":208,"props":7058,"children":7059},{"style":448},[7060],{"type":178,"value":1846},{"type":172,"tag":208,"props":7062,"children":7063},{"class":210,"line":1268},[7064],{"type":172,"tag":208,"props":7065,"children":7066},{"style":448},[7067],{"type":178,"value":1193},{"type":172,"tag":208,"props":7069,"children":7070},{"class":210,"line":1276},[7071,7075,7079,7083,7088,7092,7096,7100],{"type":172,"tag":208,"props":7072,"children":7073},{"style":442},[7074],{"type":178,"value":4786},{"type":172,"tag":208,"props":7076,"children":7077},{"style":448},[7078],{"type":178,"value":451},{"type":172,"tag":208,"props":7080,"children":7081},{"style":454},[7082],{"type":178,"value":1161},{"type":172,"tag":208,"props":7084,"children":7085},{"style":442},[7086],{"type":178,"value":7087},"(a",{"type":172,"tag":208,"props":7089,"children":7090},{"style":448},[7091],{"type":178,"value":451},{"type":172,"tag":208,"props":7093,"children":7094},{"style":454},[7095],{"type":178,"value":1125},{"type":172,"tag":208,"props":7097,"children":7098},{"style":442},[7099],{"type":178,"value":581},{"type":172,"tag":208,"props":7101,"children":7102},{"style":495},[7103],{"type":178,"value":7104},"// 2\n",{"type":172,"tag":208,"props":7106,"children":7107},{"class":210,"line":1303},[7108,7112,7116,7120,7125,7129,7133,7137,7141,7146],{"type":172,"tag":208,"props":7109,"children":7110},{"style":442},[7111],{"type":178,"value":4786},{"type":172,"tag":208,"props":7113,"children":7114},{"style":448},[7115],{"type":178,"value":451},{"type":172,"tag":208,"props":7117,"children":7118},{"style":454},[7119],{"type":178,"value":1161},{"type":172,"tag":208,"props":7121,"children":7122},{"style":442},[7123],{"type":178,"value":7124},"((",{"type":172,"tag":208,"props":7126,"children":7127},{"style":470},[7128],{"type":178,"value":473},{"type":172,"tag":208,"props":7130,"children":7131},{"style":448},[7132],{"type":178,"value":478},{"type":172,"tag":208,"props":7134,"children":7135},{"style":442},[7136],{"type":178,"value":2990},{"type":172,"tag":208,"props":7138,"children":7139},{"style":448},[7140],{"type":178,"value":451},{"type":172,"tag":208,"props":7142,"children":7143},{"style":442},[7144],{"type":178,"value":7145},"b)()) ",{"type":172,"tag":208,"props":7147,"children":7148},{"style":495},[7149],{"type":178,"value":6490},{"type":172,"tag":186,"props":7151,"children":7152},{},[7153],{"type":178,"value":7154},"具名函数在表达式中时不会声明标识符。",{"type":172,"tag":186,"props":7156,"children":7157},{},[7158],{"type":178,"value":7159},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":172,"tag":197,"props":7161,"children":7163},{"className":430,"code":7162,"language":432,"meta":166,"style":166},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7164],{"type":172,"tag":204,"props":7165,"children":7166},{"__ignoreMap":166},[7167,7186,7214,7229,7236,7264],{"type":172,"tag":208,"props":7168,"children":7169},{"class":210,"line":211},[7170,7174,7178,7182],{"type":172,"tag":208,"props":7171,"children":7172},{"style":766},[7173],{"type":178,"value":5557},{"type":172,"tag":208,"props":7175,"children":7176},{"style":1200},[7177],{"type":178,"value":2990},{"type":172,"tag":208,"props":7179,"children":7180},{"style":238},[7181],{"type":178,"value":1130},{"type":172,"tag":208,"props":7183,"children":7184},{"style":448},[7185],{"type":178,"value":1107},{"type":172,"tag":208,"props":7187,"children":7188},{"class":210,"line":501},[7189,7193,7197,7201,7205,7209],{"type":172,"tag":208,"props":7190,"children":7191},{"style":454},[7192],{"type":178,"value":7008},{"type":172,"tag":208,"props":7194,"children":7195},{"style":448},[7196],{"type":178,"value":1626},{"type":172,"tag":208,"props":7198,"children":7199},{"style":766},[7200],{"type":178,"value":1220},{"type":172,"tag":208,"props":7202,"children":7203},{"style":454},[7204],{"type":178,"value":1792},{"type":172,"tag":208,"props":7206,"children":7207},{"style":448},[7208],{"type":178,"value":815},{"type":172,"tag":208,"props":7210,"children":7211},{"style":448},[7212],{"type":178,"value":7213}," {},\n",{"type":172,"tag":208,"props":7215,"children":7216},{"class":210,"line":1146},[7217,7221,7225],{"type":172,"tag":208,"props":7218,"children":7219},{"style":2426},[7220],{"type":178,"value":2540},{"type":172,"tag":208,"props":7222,"children":7223},{"style":448},[7224],{"type":178,"value":815},{"type":172,"tag":208,"props":7226,"children":7227},{"style":448},[7228],{"type":178,"value":2898},{"type":172,"tag":208,"props":7230,"children":7231},{"class":210,"line":1187},[7232],{"type":172,"tag":208,"props":7233,"children":7234},{"style":448},[7235],{"type":178,"value":1193},{"type":172,"tag":208,"props":7237,"children":7238},{"class":210,"line":1196},[7239,7243,7247,7251,7255,7259],{"type":172,"tag":208,"props":7240,"children":7241},{"style":238},[7242],{"type":178,"value":1282},{"type":172,"tag":208,"props":7244,"children":7245},{"style":442},[7246],{"type":178,"value":2990},{"type":172,"tag":208,"props":7248,"children":7249},{"style":448},[7250],{"type":178,"value":451},{"type":172,"tag":208,"props":7252,"children":7253},{"style":454},[7254],{"type":178,"value":1125},{"type":172,"tag":208,"props":7256,"children":7257},{"style":442},[7258],{"type":178,"value":597},{"type":172,"tag":208,"props":7260,"children":7261},{"style":495},[7262],{"type":178,"value":7263},"// {}\n",{"type":172,"tag":208,"props":7265,"children":7266},{"class":210,"line":1231},[7267,7271,7275,7279,7283,7287],{"type":172,"tag":208,"props":7268,"children":7269},{"style":238},[7270],{"type":178,"value":1282},{"type":172,"tag":208,"props":7272,"children":7273},{"style":442},[7274],{"type":178,"value":2990},{"type":172,"tag":208,"props":7276,"children":7277},{"style":448},[7278],{"type":178,"value":451},{"type":172,"tag":208,"props":7280,"children":7281},{"style":454},[7282],{"type":178,"value":1492},{"type":172,"tag":208,"props":7284,"children":7285},{"style":442},[7286],{"type":178,"value":597},{"type":172,"tag":208,"props":7288,"children":7289},{"style":495},[7290],{"type":178,"value":3007},{"type":172,"tag":186,"props":7292,"children":7293},{},[7294],{"type":178,"value":7295},"方法的特性总结以下三点：",{"type":172,"tag":286,"props":7297,"children":7298},{},[7299,7304,7309],{"type":172,"tag":290,"props":7300,"children":7301},{},[7302],{"type":178,"value":7303},"不能作为构造器。",{"type":172,"tag":290,"props":7305,"children":7306},{},[7307],{"type":178,"value":7308},"除了生成器方法，没有内部原型。",{"type":172,"tag":290,"props":7310,"children":7311},{},[7312],{"type":178,"value":7313},"方法不能具名。",{"type":172,"tag":186,"props":7315,"children":7316},{},[7317],{"type":178,"value":7318},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":172,"tag":197,"props":7320,"children":7322},{"className":430,"code":7321,"language":432,"meta":166,"style":166},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7323],{"type":172,"tag":204,"props":7324,"children":7325},{"__ignoreMap":166},[7326],{"type":172,"tag":208,"props":7327,"children":7328},{"class":210,"line":211},[7329,7333,7337,7341,7346,7350,7354,7358,7362],{"type":172,"tag":208,"props":7330,"children":7331},{"style":442},[7332],{"type":178,"value":445},{"type":172,"tag":208,"props":7334,"children":7335},{"style":448},[7336],{"type":178,"value":451},{"type":172,"tag":208,"props":7338,"children":7339},{"style":454},[7340],{"type":178,"value":3408},{"type":172,"tag":208,"props":7342,"children":7343},{"style":442},[7344],{"type":178,"value":7345},"(boundFn",{"type":172,"tag":208,"props":7347,"children":7348},{"style":448},[7349],{"type":178,"value":478},{"type":172,"tag":208,"props":7351,"children":7352},{"style":442},[7353],{"type":178,"value":3879},{"type":172,"tag":208,"props":7355,"children":7356},{"style":448},[7357],{"type":178,"value":451},{"type":172,"tag":208,"props":7359,"children":7360},{"style":454},[7361],{"type":178,"value":5294},{"type":172,"tag":208,"props":7363,"children":7364},{"style":442},[7365],{"type":178,"value":7366},"(targetFn))\n",{"type":172,"tag":186,"props":7368,"children":7369},{},[7370],{"type":178,"value":7371},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":172,"tag":197,"props":7373,"children":7375},{"className":430,"code":7374,"language":432,"meta":166,"style":166},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7376],{"type":172,"tag":204,"props":7377,"children":7378},{"__ignoreMap":166},[7379,7398,7441,7448],{"type":172,"tag":208,"props":7380,"children":7381},{"class":210,"line":211},[7382,7386,7390,7394],{"type":172,"tag":208,"props":7383,"children":7384},{"style":766},[7385],{"type":178,"value":1092},{"type":172,"tag":208,"props":7387,"children":7388},{"style":454},[7389],{"type":178,"value":2990},{"type":172,"tag":208,"props":7391,"children":7392},{"style":448},[7393],{"type":178,"value":1102},{"type":172,"tag":208,"props":7395,"children":7396},{"style":448},[7397],{"type":178,"value":1107},{"type":172,"tag":208,"props":7399,"children":7400},{"class":210,"line":501},[7401,7405,7409,7413,7417,7421,7425,7429,7433,7437],{"type":172,"tag":208,"props":7402,"children":7403},{"style":442},[7404],{"type":178,"value":1152},{"type":172,"tag":208,"props":7406,"children":7407},{"style":448},[7408],{"type":178,"value":451},{"type":172,"tag":208,"props":7410,"children":7411},{"style":454},[7412],{"type":178,"value":1161},{"type":172,"tag":208,"props":7414,"children":7415},{"style":1164},[7416],{"type":178,"value":462},{"type":172,"tag":208,"props":7418,"children":7419},{"style":238},[7420],{"type":178,"value":1282},{"type":172,"tag":208,"props":7422,"children":7423},{"style":448},[7424],{"type":178,"value":451},{"type":172,"tag":208,"props":7426,"children":7427},{"style":1200},[7428],{"type":178,"value":5421},{"type":172,"tag":208,"props":7430,"children":7431},{"style":238},[7432],{"type":178,"value":1773},{"type":172,"tag":208,"props":7434,"children":7435},{"style":442},[7436],{"type":178,"value":2990},{"type":172,"tag":208,"props":7438,"children":7439},{"style":1164},[7440],{"type":178,"value":1184},{"type":172,"tag":208,"props":7442,"children":7443},{"class":210,"line":1146},[7444],{"type":172,"tag":208,"props":7445,"children":7446},{"style":448},[7447],{"type":178,"value":1193},{"type":172,"tag":208,"props":7449,"children":7450},{"class":210,"line":1187},[7451,7455,7459,7463,7467,7471,7476,7480,7485,7490],{"type":172,"tag":208,"props":7452,"children":7453},{"style":442},[7454],{"type":178,"value":4786},{"type":172,"tag":208,"props":7456,"children":7457},{"style":448},[7458],{"type":178,"value":451},{"type":172,"tag":208,"props":7460,"children":7461},{"style":454},[7462],{"type":178,"value":1161},{"type":172,"tag":208,"props":7464,"children":7465},{"style":442},[7466],{"type":178,"value":462},{"type":172,"tag":208,"props":7468,"children":7469},{"style":238},[7470],{"type":178,"value":1282},{"type":172,"tag":208,"props":7472,"children":7473},{"style":442},[7474],{"type":178,"value":7475}," (a",{"type":172,"tag":208,"props":7477,"children":7478},{"style":448},[7479],{"type":178,"value":451},{"type":172,"tag":208,"props":7481,"children":7482},{"style":454},[7483],{"type":178,"value":7484},"bind",{"type":172,"tag":208,"props":7486,"children":7487},{"style":442},[7488],{"type":178,"value":7489},"())) ",{"type":172,"tag":208,"props":7491,"children":7492},{"style":495},[7493],{"type":178,"value":542},{"type":172,"tag":186,"props":7495,"children":7496},{},[7497],{"type":178,"value":7498},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":172,"tag":186,"props":7500,"children":7501},{},[7502],{"type":178,"value":7503},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":172,"tag":197,"props":7505,"children":7507},{"className":430,"code":7506,"language":432,"meta":166,"style":166},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7508],{"type":172,"tag":204,"props":7509,"children":7510},{"__ignoreMap":166},[7511,7530,7551,7576,7606,7638,7666,7692,7720,7736,7788,7796,7803,7826,7833,7840],{"type":172,"tag":208,"props":7512,"children":7513},{"class":210,"line":211},[7514,7518,7522,7526],{"type":172,"tag":208,"props":7515,"children":7516},{"style":766},[7517],{"type":178,"value":5557},{"type":172,"tag":208,"props":7519,"children":7520},{"style":1200},[7521],{"type":178,"value":2407},{"type":172,"tag":208,"props":7523,"children":7524},{"style":238},[7525],{"type":178,"value":1130},{"type":172,"tag":208,"props":7527,"children":7528},{"style":448},[7529],{"type":178,"value":1107},{"type":172,"tag":208,"props":7531,"children":7532},{"class":210,"line":501},[7533,7538,7542,7547],{"type":172,"tag":208,"props":7534,"children":7535},{"style":1164},[7536],{"type":178,"value":7537},"  step",{"type":172,"tag":208,"props":7539,"children":7540},{"style":448},[7541],{"type":178,"value":1626},{"type":172,"tag":208,"props":7543,"children":7544},{"style":470},[7545],{"type":178,"value":7546}," 0",{"type":172,"tag":208,"props":7548,"children":7549},{"style":448},[7550],{"type":178,"value":7000},{"type":172,"tag":208,"props":7552,"children":7553},{"class":210,"line":1146},[7554,7559,7563,7568,7572],{"type":172,"tag":208,"props":7555,"children":7556},{"style":2426},[7557],{"type":178,"value":7558},"  run",{"type":172,"tag":208,"props":7560,"children":7561},{"style":448},[7562],{"type":178,"value":1699},{"type":172,"tag":208,"props":7564,"children":7565},{"style":1393},[7566],{"type":178,"value":7567},"init",{"type":172,"tag":208,"props":7569,"children":7570},{"style":448},[7571],{"type":178,"value":1401},{"type":172,"tag":208,"props":7573,"children":7574},{"style":448},[7575],{"type":178,"value":1107},{"type":172,"tag":208,"props":7577,"children":7578},{"class":210,"line":1187},[7579,7584,7590,7594,7598,7602],{"type":172,"tag":208,"props":7580,"children":7581},{"style":766},[7582],{"type":178,"value":7583},"    const",{"type":172,"tag":208,"props":7585,"children":7587},{"style":7586},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7588],{"type":178,"value":7589}," exec",{"type":172,"tag":208,"props":7591,"children":7592},{"style":238},[7593],{"type":178,"value":1130},{"type":172,"tag":208,"props":7595,"children":7596},{"style":1393},[7597],{"type":178,"value":6242},{"type":172,"tag":208,"props":7599,"children":7600},{"style":766},[7601],{"type":178,"value":5493},{"type":172,"tag":208,"props":7603,"children":7604},{"style":448},[7605],{"type":178,"value":1107},{"type":172,"tag":208,"props":7607,"children":7608},{"class":210,"line":1196},[7609,7613,7617,7621,7626,7630,7634],{"type":172,"tag":208,"props":7610,"children":7611},{"style":1470},[7612],{"type":178,"value":2006},{"type":172,"tag":208,"props":7614,"children":7615},{"style":1164},[7616],{"type":178,"value":1699},{"type":172,"tag":208,"props":7618,"children":7619},{"style":442},[7620],{"type":178,"value":2437},{"type":172,"tag":208,"props":7622,"children":7623},{"style":238},[7624],{"type":178,"value":7625}," >",{"type":172,"tag":208,"props":7627,"children":7628},{"style":470},[7629],{"type":178,"value":7546},{"type":172,"tag":208,"props":7631,"children":7632},{"style":1164},[7633],{"type":178,"value":492},{"type":172,"tag":208,"props":7635,"children":7636},{"style":448},[7637],{"type":178,"value":1516},{"type":172,"tag":208,"props":7639,"children":7640},{"class":210,"line":1231},[7641,7646,7650,7654,7658,7662],{"type":172,"tag":208,"props":7642,"children":7643},{"style":442},[7644],{"type":178,"value":7645},"        console",{"type":172,"tag":208,"props":7647,"children":7648},{"style":448},[7649],{"type":178,"value":451},{"type":172,"tag":208,"props":7651,"children":7652},{"style":454},[7653],{"type":178,"value":1161},{"type":172,"tag":208,"props":7655,"children":7656},{"style":1164},[7657],{"type":178,"value":462},{"type":172,"tag":208,"props":7659,"children":7660},{"style":442},[7661],{"type":178,"value":2437},{"type":172,"tag":208,"props":7663,"children":7664},{"style":1164},[7665],{"type":178,"value":1184},{"type":172,"tag":208,"props":7667,"children":7668},{"class":210,"line":1268},[7669,7674,7678,7683,7688],{"type":172,"tag":208,"props":7670,"children":7671},{"style":1113},[7672],{"type":178,"value":7673},"        this",{"type":172,"tag":208,"props":7675,"children":7676},{"style":448},[7677],{"type":178,"value":451},{"type":172,"tag":208,"props":7679,"children":7680},{"style":442},[7681],{"type":178,"value":7682},"step",{"type":172,"tag":208,"props":7684,"children":7685},{"style":238},[7686],{"type":178,"value":7687}," +=",{"type":172,"tag":208,"props":7689,"children":7690},{"style":470},[7691],{"type":178,"value":6544},{"type":172,"tag":208,"props":7693,"children":7694},{"class":210,"line":1276},[7695,7700,7704,7708,7712,7716],{"type":172,"tag":208,"props":7696,"children":7697},{"style":454},[7698],{"type":178,"value":7699},"        exec",{"type":172,"tag":208,"props":7701,"children":7702},{"style":1164},[7703],{"type":178,"value":462},{"type":172,"tag":208,"props":7705,"children":7706},{"style":442},[7707],{"type":178,"value":2437},{"type":172,"tag":208,"props":7709,"children":7710},{"style":238},[7711],{"type":178,"value":483},{"type":172,"tag":208,"props":7713,"children":7714},{"style":470},[7715],{"type":178,"value":1576},{"type":172,"tag":208,"props":7717,"children":7718},{"style":1164},[7719],{"type":178,"value":1184},{"type":172,"tag":208,"props":7721,"children":7722},{"class":210,"line":1303},[7723,7728,7732],{"type":172,"tag":208,"props":7724,"children":7725},{"style":448},[7726],{"type":178,"value":7727},"      }",{"type":172,"tag":208,"props":7729,"children":7730},{"style":1470},[7731],{"type":178,"value":5695},{"type":172,"tag":208,"props":7733,"children":7734},{"style":448},[7735],{"type":178,"value":1107},{"type":172,"tag":208,"props":7737,"children":7738},{"class":210,"line":1879},[7739,7743,7747,7751,7755,7759,7764,7768,7772,7776,7780,7784],{"type":172,"tag":208,"props":7740,"children":7741},{"style":442},[7742],{"type":178,"value":7645},{"type":172,"tag":208,"props":7744,"children":7745},{"style":448},[7746],{"type":178,"value":451},{"type":172,"tag":208,"props":7748,"children":7749},{"style":454},[7750],{"type":178,"value":1161},{"type":172,"tag":208,"props":7752,"children":7753},{"style":1164},[7754],{"type":178,"value":462},{"type":172,"tag":208,"props":7756,"children":7757},{"style":221},[7758],{"type":178,"value":235},{"type":172,"tag":208,"props":7760,"children":7761},{"style":227},[7762],{"type":178,"value":7763},"steps: ",{"type":172,"tag":208,"props":7765,"children":7766},{"style":221},[7767],{"type":178,"value":235},{"type":172,"tag":208,"props":7769,"children":7770},{"style":448},[7771],{"type":178,"value":478},{"type":172,"tag":208,"props":7773,"children":7774},{"style":1113},[7775],{"type":178,"value":3558},{"type":172,"tag":208,"props":7777,"children":7778},{"style":448},[7779],{"type":178,"value":451},{"type":172,"tag":208,"props":7781,"children":7782},{"style":442},[7783],{"type":178,"value":7682},{"type":172,"tag":208,"props":7785,"children":7786},{"style":1164},[7787],{"type":178,"value":1184},{"type":172,"tag":208,"props":7789,"children":7790},{"class":210,"line":1939},[7791],{"type":172,"tag":208,"props":7792,"children":7793},{"style":448},[7794],{"type":178,"value":7795},"      }\n",{"type":172,"tag":208,"props":7797,"children":7798},{"class":210,"line":2000},[7799],{"type":172,"tag":208,"props":7800,"children":7801},{"style":448},[7802],{"type":178,"value":2088},{"type":172,"tag":208,"props":7804,"children":7805},{"class":210,"line":2041},[7806,7810,7814,7818,7822],{"type":172,"tag":208,"props":7807,"children":7808},{"style":1470},[7809],{"type":178,"value":2504},{"type":172,"tag":208,"props":7811,"children":7812},{"style":454},[7813],{"type":178,"value":7589},{"type":172,"tag":208,"props":7815,"children":7816},{"style":1164},[7817],{"type":178,"value":462},{"type":172,"tag":208,"props":7819,"children":7820},{"style":442},[7821],{"type":178,"value":7567},{"type":172,"tag":208,"props":7823,"children":7824},{"style":1164},[7825],{"type":178,"value":1184},{"type":172,"tag":208,"props":7827,"children":7828},{"class":210,"line":2082},[7829],{"type":172,"tag":208,"props":7830,"children":7831},{"style":448},[7832],{"type":178,"value":1846},{"type":172,"tag":208,"props":7834,"children":7835},{"class":210,"line":2091},[7836],{"type":172,"tag":208,"props":7837,"children":7838},{"style":448},[7839],{"type":178,"value":1193},{"type":172,"tag":208,"props":7841,"children":7842},{"class":210,"line":2099},[7843,7848,7852,7857,7861,7866,7870],{"type":172,"tag":208,"props":7844,"children":7845},{"style":442},[7846],{"type":178,"value":7847},"obj",{"type":172,"tag":208,"props":7849,"children":7850},{"style":448},[7851],{"type":178,"value":451},{"type":172,"tag":208,"props":7853,"children":7854},{"style":454},[7855],{"type":178,"value":7856},"run",{"type":172,"tag":208,"props":7858,"children":7859},{"style":442},[7860],{"type":178,"value":462},{"type":172,"tag":208,"props":7862,"children":7863},{"style":470},[7864],{"type":178,"value":7865},"10",{"type":172,"tag":208,"props":7867,"children":7868},{"style":442},[7869],{"type":178,"value":492},{"type":172,"tag":208,"props":7871,"children":7872},{"style":495},[7873],{"type":178,"value":7874},"// steps: 10\n",{"type":172,"tag":180,"props":7876,"children":7878},{"id":7877},"函数的行为",[7879],{"type":178,"value":7877},{"type":172,"tag":186,"props":7881,"children":7882},{},[7883],{"type":178,"value":7884},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":172,"tag":186,"props":7886,"children":7887},{},[7888],{"type":178,"value":7889},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":172,"tag":186,"props":7891,"children":7892},{},[7893],{"type":178,"value":7894},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":172,"tag":186,"props":7896,"children":7897},{},[7898],{"type":178,"value":7899},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":172,"tag":197,"props":7901,"children":7903},{"className":430,"code":7902,"language":432,"meta":166,"style":166},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[7904],{"type":172,"tag":204,"props":7905,"children":7906},{"__ignoreMap":166},[7907,7932,7944,7956,7968,7979,7996,8032,8039,8046,8070,8082,8129,8162,8207,8222,8258,8279,8287,8295,8304,8313],{"type":172,"tag":208,"props":7908,"children":7909},{"class":210,"line":211},[7910,7914,7919,7924,7928],{"type":172,"tag":208,"props":7911,"children":7912},{"style":766},[7913],{"type":178,"value":1092},{"type":172,"tag":208,"props":7915,"children":7916},{"style":238},[7917],{"type":178,"value":7918},"*",{"type":172,"tag":208,"props":7920,"children":7921},{"style":454},[7922],{"type":178,"value":7923}," GetThisDone",{"type":172,"tag":208,"props":7925,"children":7926},{"style":448},[7927],{"type":178,"value":815},{"type":172,"tag":208,"props":7929,"children":7930},{"style":448},[7931],{"type":178,"value":1107},{"type":172,"tag":208,"props":7933,"children":7934},{"class":210,"line":501},[7935,7940],{"type":172,"tag":208,"props":7936,"children":7937},{"style":1470},[7938],{"type":178,"value":7939},"  try",{"type":172,"tag":208,"props":7941,"children":7942},{"style":448},[7943],{"type":178,"value":1107},{"type":172,"tag":208,"props":7945,"children":7946},{"class":210,"line":1146},[7947,7952],{"type":172,"tag":208,"props":7948,"children":7949},{"style":1470},[7950],{"type":178,"value":7951},"    yield",{"type":172,"tag":208,"props":7953,"children":7954},{"style":470},[7955],{"type":178,"value":6544},{"type":172,"tag":208,"props":7957,"children":7958},{"class":210,"line":1187},[7959,7963],{"type":172,"tag":208,"props":7960,"children":7961},{"style":1470},[7962],{"type":178,"value":7951},{"type":172,"tag":208,"props":7964,"children":7965},{"style":470},[7966],{"type":178,"value":7967}," 10\n",{"type":172,"tag":208,"props":7969,"children":7970},{"class":210,"line":1196},[7971,7975],{"type":172,"tag":208,"props":7972,"children":7973},{"style":1470},[7974],{"type":178,"value":7951},{"type":172,"tag":208,"props":7976,"children":7977},{"style":470},[7978],{"type":178,"value":6544},{"type":172,"tag":208,"props":7980,"children":7981},{"class":210,"line":1231},[7982,7987,7992],{"type":172,"tag":208,"props":7983,"children":7984},{"style":448},[7985],{"type":178,"value":7986},"  }",{"type":172,"tag":208,"props":7988,"children":7989},{"style":1470},[7990],{"type":178,"value":7991}," finally",{"type":172,"tag":208,"props":7993,"children":7994},{"style":448},[7995],{"type":178,"value":1107},{"type":172,"tag":208,"props":7997,"children":7998},{"class":210,"line":1268},[7999,8003,8007,8011,8015,8019,8024,8028],{"type":172,"tag":208,"props":8000,"children":8001},{"style":442},[8002],{"type":178,"value":7024},{"type":172,"tag":208,"props":8004,"children":8005},{"style":448},[8006],{"type":178,"value":451},{"type":172,"tag":208,"props":8008,"children":8009},{"style":454},[8010],{"type":178,"value":1161},{"type":172,"tag":208,"props":8012,"children":8013},{"style":1164},[8014],{"type":178,"value":462},{"type":172,"tag":208,"props":8016,"children":8017},{"style":221},[8018],{"type":178,"value":235},{"type":172,"tag":208,"props":8020,"children":8021},{"style":227},[8022],{"type":178,"value":8023},"done",{"type":172,"tag":208,"props":8025,"children":8026},{"style":221},[8027],{"type":178,"value":235},{"type":172,"tag":208,"props":8029,"children":8030},{"style":1164},[8031],{"type":178,"value":1184},{"type":172,"tag":208,"props":8033,"children":8034},{"class":210,"line":1276},[8035],{"type":172,"tag":208,"props":8036,"children":8037},{"style":448},[8038],{"type":178,"value":1846},{"type":172,"tag":208,"props":8040,"children":8041},{"class":210,"line":1303},[8042],{"type":172,"tag":208,"props":8043,"children":8044},{"style":448},[8045],{"type":178,"value":1193},{"type":172,"tag":208,"props":8047,"children":8048},{"class":210,"line":1879},[8049,8053,8058,8062,8066],{"type":172,"tag":208,"props":8050,"children":8051},{"style":766},[8052],{"type":178,"value":5557},{"type":172,"tag":208,"props":8054,"children":8055},{"style":1200},[8056],{"type":178,"value":8057}," get",{"type":172,"tag":208,"props":8059,"children":8060},{"style":238},[8061],{"type":178,"value":1130},{"type":172,"tag":208,"props":8063,"children":8064},{"style":454},[8065],{"type":178,"value":7923},{"type":172,"tag":208,"props":8067,"children":8068},{"style":442},[8069],{"type":178,"value":3107},{"type":172,"tag":208,"props":8071,"children":8072},{"class":210,"line":1939},[8073,8077],{"type":172,"tag":208,"props":8074,"children":8075},{"style":766},[8076],{"type":178,"value":769},{"type":172,"tag":208,"props":8078,"children":8079},{"style":442},[8080],{"type":178,"value":8081}," val\n",{"type":172,"tag":208,"props":8083,"children":8084},{"class":210,"line":2000},[8085,8090,8095,8099,8103,8107,8112,8116,8120,8125],{"type":172,"tag":208,"props":8086,"children":8087},{"style":1470},[8088],{"type":178,"value":8089},"while",{"type":172,"tag":208,"props":8091,"children":8092},{"style":442},[8093],{"type":178,"value":8094}," (val ",{"type":172,"tag":208,"props":8096,"children":8097},{"style":238},[8098],{"type":178,"value":1641},{"type":172,"tag":208,"props":8100,"children":8101},{"style":442},[8102],{"type":178,"value":8057},{"type":172,"tag":208,"props":8104,"children":8105},{"style":448},[8106],{"type":178,"value":451},{"type":172,"tag":208,"props":8108,"children":8109},{"style":454},[8110],{"type":178,"value":8111},"next",{"type":172,"tag":208,"props":8113,"children":8114},{"style":442},[8115],{"type":178,"value":815},{"type":172,"tag":208,"props":8117,"children":8118},{"style":448},[8119],{"type":178,"value":451},{"type":172,"tag":208,"props":8121,"children":8122},{"style":442},[8123],{"type":178,"value":8124},"value) ",{"type":172,"tag":208,"props":8126,"children":8127},{"style":448},[8128],{"type":178,"value":1516},{"type":172,"tag":208,"props":8130,"children":8131},{"class":210,"line":2041},[8132,8136,8140,8145,8149,8154,8158],{"type":172,"tag":208,"props":8133,"children":8134},{"style":1470},[8135],{"type":178,"value":6287},{"type":172,"tag":208,"props":8137,"children":8138},{"style":1164},[8139],{"type":178,"value":1699},{"type":172,"tag":208,"props":8141,"children":8142},{"style":442},[8143],{"type":178,"value":8144},"val",{"type":172,"tag":208,"props":8146,"children":8147},{"style":238},[8148],{"type":178,"value":1727},{"type":172,"tag":208,"props":8150,"children":8151},{"style":470},[8152],{"type":178,"value":8153}," 10",{"type":172,"tag":208,"props":8155,"children":8156},{"style":1164},[8157],{"type":178,"value":492},{"type":172,"tag":208,"props":8159,"children":8160},{"style":448},[8161],{"type":178,"value":1516},{"type":172,"tag":208,"props":8163,"children":8164},{"class":210,"line":2082},[8165,8169,8173,8177,8181,8185,8190,8194,8198,8203],{"type":172,"tag":208,"props":8166,"children":8167},{"style":442},[8168],{"type":178,"value":7024},{"type":172,"tag":208,"props":8170,"children":8171},{"style":448},[8172],{"type":178,"value":451},{"type":172,"tag":208,"props":8174,"children":8175},{"style":454},[8176],{"type":178,"value":1161},{"type":172,"tag":208,"props":8178,"children":8179},{"style":1164},[8180],{"type":178,"value":462},{"type":172,"tag":208,"props":8182,"children":8183},{"style":221},[8184],{"type":178,"value":235},{"type":172,"tag":208,"props":8186,"children":8187},{"style":227},[8188],{"type":178,"value":8189},"right val:",{"type":172,"tag":208,"props":8191,"children":8192},{"style":221},[8193],{"type":178,"value":235},{"type":172,"tag":208,"props":8195,"children":8196},{"style":448},[8197],{"type":178,"value":478},{"type":172,"tag":208,"props":8199,"children":8200},{"style":442},[8201],{"type":178,"value":8202}," val",{"type":172,"tag":208,"props":8204,"children":8205},{"style":1164},[8206],{"type":178,"value":1184},{"type":172,"tag":208,"props":8208,"children":8209},{"class":210,"line":2091},[8210,8214,8218],{"type":172,"tag":208,"props":8211,"children":8212},{"style":448},[8213],{"type":178,"value":7986},{"type":172,"tag":208,"props":8215,"children":8216},{"style":1470},[8217],{"type":178,"value":5695},{"type":172,"tag":208,"props":8219,"children":8220},{"style":448},[8221],{"type":178,"value":1107},{"type":172,"tag":208,"props":8223,"children":8224},{"class":210,"line":2099},[8225,8229,8233,8237,8241,8245,8250,8254],{"type":172,"tag":208,"props":8226,"children":8227},{"style":442},[8228],{"type":178,"value":7024},{"type":172,"tag":208,"props":8230,"children":8231},{"style":448},[8232],{"type":178,"value":451},{"type":172,"tag":208,"props":8234,"children":8235},{"style":454},[8236],{"type":178,"value":1161},{"type":172,"tag":208,"props":8238,"children":8239},{"style":1164},[8240],{"type":178,"value":462},{"type":172,"tag":208,"props":8242,"children":8243},{"style":221},[8244],{"type":178,"value":235},{"type":172,"tag":208,"props":8246,"children":8247},{"style":227},[8248],{"type":178,"value":8249},"wrong val",{"type":172,"tag":208,"props":8251,"children":8252},{"style":221},[8253],{"type":178,"value":235},{"type":172,"tag":208,"props":8255,"children":8256},{"style":1164},[8257],{"type":178,"value":1184},{"type":172,"tag":208,"props":8259,"children":8260},{"class":210,"line":5765},[8261,8266,8270,8275],{"type":172,"tag":208,"props":8262,"children":8263},{"style":442},[8264],{"type":178,"value":8265},"    get",{"type":172,"tag":208,"props":8267,"children":8268},{"style":448},[8269],{"type":178,"value":451},{"type":172,"tag":208,"props":8271,"children":8272},{"style":454},[8273],{"type":178,"value":8274},"return",{"type":172,"tag":208,"props":8276,"children":8277},{"style":1164},[8278],{"type":178,"value":3107},{"type":172,"tag":208,"props":8280,"children":8282},{"class":210,"line":8281},18,[8283],{"type":172,"tag":208,"props":8284,"children":8285},{"style":448},[8286],{"type":178,"value":1846},{"type":172,"tag":208,"props":8288,"children":8290},{"class":210,"line":8289},19,[8291],{"type":172,"tag":208,"props":8292,"children":8293},{"style":448},[8294],{"type":178,"value":1193},{"type":172,"tag":208,"props":8296,"children":8298},{"class":210,"line":8297},20,[8299],{"type":172,"tag":208,"props":8300,"children":8301},{"style":495},[8302],{"type":178,"value":8303},"// right val: 1\n",{"type":172,"tag":208,"props":8305,"children":8307},{"class":210,"line":8306},21,[8308],{"type":172,"tag":208,"props":8309,"children":8310},{"style":495},[8311],{"type":178,"value":8312},"// wrong val\n",{"type":172,"tag":208,"props":8314,"children":8316},{"class":210,"line":8315},22,[8317],{"type":172,"tag":208,"props":8318,"children":8319},{"style":495},[8320],{"type":178,"value":8321},"// done\n",{"type":172,"tag":180,"props":8323,"children":8325},{"id":8324},"闭包",[8326],{"type":178,"value":8324},{"type":172,"tag":186,"props":8328,"children":8329},{},[8330],{"type":178,"value":8331},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":172,"tag":186,"props":8333,"children":8334},{},[8335],{"type":178,"value":8336},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":172,"tag":286,"props":8338,"children":8339},{},[8340,8345,8350],{"type":172,"tag":290,"props":8341,"children":8342},{},[8343],{"type":178,"value":8344},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":172,"tag":290,"props":8346,"children":8347},{},[8348],{"type":178,"value":8349},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":172,"tag":290,"props":8351,"children":8352},{},[8353],{"type":178,"value":8354},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":172,"tag":186,"props":8356,"children":8357},{},[8358],{"type":178,"value":8359},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":172,"tag":197,"props":8361,"children":8363},{"className":430,"code":8362,"language":432,"meta":166,"style":166},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8364],{"type":172,"tag":204,"props":8365,"children":8366},{"__ignoreMap":166},[8367,8386,8401,8408,8419],{"type":172,"tag":208,"props":8368,"children":8369},{"class":210,"line":211},[8370,8374,8378,8382],{"type":172,"tag":208,"props":8371,"children":8372},{"style":766},[8373],{"type":178,"value":1092},{"type":172,"tag":208,"props":8375,"children":8376},{"style":454},[8377],{"type":178,"value":1792},{"type":172,"tag":208,"props":8379,"children":8380},{"style":448},[8381],{"type":178,"value":1102},{"type":172,"tag":208,"props":8383,"children":8384},{"style":448},[8385],{"type":178,"value":1107},{"type":172,"tag":208,"props":8387,"children":8388},{"class":210,"line":501},[8389,8393,8397],{"type":172,"tag":208,"props":8390,"children":8391},{"style":442},[8392],{"type":178,"value":2540},{"type":172,"tag":208,"props":8394,"children":8395},{"style":238},[8396],{"type":178,"value":1130},{"type":172,"tag":208,"props":8398,"children":8399},{"style":470},[8400],{"type":178,"value":6544},{"type":172,"tag":208,"props":8402,"children":8403},{"class":210,"line":1146},[8404],{"type":172,"tag":208,"props":8405,"children":8406},{"style":448},[8407],{"type":178,"value":1193},{"type":172,"tag":208,"props":8409,"children":8410},{"class":210,"line":1187},[8411,8415],{"type":172,"tag":208,"props":8412,"children":8413},{"style":454},[8414],{"type":178,"value":1492},{"type":172,"tag":208,"props":8416,"children":8417},{"style":442},[8418],{"type":178,"value":3107},{"type":172,"tag":208,"props":8420,"children":8421},{"class":210,"line":1196},[8422,8426,8430,8434,8438,8442,8447],{"type":172,"tag":208,"props":8423,"children":8424},{"style":442},[8425],{"type":178,"value":4786},{"type":172,"tag":208,"props":8427,"children":8428},{"style":448},[8429],{"type":178,"value":451},{"type":172,"tag":208,"props":8431,"children":8432},{"style":454},[8433],{"type":178,"value":1161},{"type":172,"tag":208,"props":8435,"children":8436},{"style":442},[8437],{"type":178,"value":462},{"type":172,"tag":208,"props":8439,"children":8440},{"style":238},[8441],{"type":178,"value":722},{"type":172,"tag":208,"props":8443,"children":8444},{"style":442},[8445],{"type":178,"value":8446}," test) ",{"type":172,"tag":208,"props":8448,"children":8449},{"style":495},[8450],{"type":178,"value":8451},"// number\n",{"type":172,"tag":186,"props":8453,"children":8454},{},[8455],{"type":178,"value":8456},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":172,"tag":186,"props":8458,"children":8459},{},[8460],{"type":178,"value":8461},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":172,"tag":197,"props":8463,"children":8465},{"className":430,"code":8464,"language":432,"meta":166,"style":166},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8466],{"type":172,"tag":204,"props":8467,"children":8468},{"__ignoreMap":166},[8469,8505,8525,8542,8562,8585,8601,8608],{"type":172,"tag":208,"props":8470,"children":8471},{"class":210,"line":211},[8472,8476,8480,8484,8488,8493,8497,8501],{"type":172,"tag":208,"props":8473,"children":8474},{"style":766},[8475],{"type":178,"value":769},{"type":172,"tag":208,"props":8477,"children":8478},{"style":442},[8479],{"type":178,"value":2910},{"type":172,"tag":208,"props":8481,"children":8482},{"style":238},[8483],{"type":178,"value":1641},{"type":172,"tag":208,"props":8485,"children":8486},{"style":448},[8487],{"type":178,"value":1478},{"type":172,"tag":208,"props":8489,"children":8490},{"style":1164},[8491],{"type":178,"value":8492}," value",{"type":172,"tag":208,"props":8494,"children":8495},{"style":448},[8496],{"type":178,"value":1626},{"type":172,"tag":208,"props":8498,"children":8499},{"style":470},[8500],{"type":178,"value":277},{"type":172,"tag":208,"props":8502,"children":8503},{"style":448},[8504],{"type":178,"value":2937},{"type":172,"tag":208,"props":8506,"children":8507},{"class":210,"line":501},[8508,8512,8517,8521],{"type":172,"tag":208,"props":8509,"children":8510},{"style":766},[8511],{"type":178,"value":769},{"type":172,"tag":208,"props":8513,"children":8514},{"style":442},[8515],{"type":178,"value":8516}," b ",{"type":172,"tag":208,"props":8518,"children":8519},{"style":238},[8520],{"type":178,"value":1641},{"type":172,"tag":208,"props":8522,"children":8523},{"style":470},[8524],{"type":178,"value":6544},{"type":172,"tag":208,"props":8526,"children":8527},{"class":210,"line":1146},[8528,8533,8538],{"type":172,"tag":208,"props":8529,"children":8530},{"style":1470},[8531],{"type":178,"value":8532},"with",{"type":172,"tag":208,"props":8534,"children":8535},{"style":442},[8536],{"type":178,"value":8537}," (a) ",{"type":172,"tag":208,"props":8539,"children":8540},{"style":448},[8541],{"type":178,"value":1516},{"type":172,"tag":208,"props":8543,"children":8544},{"class":210,"line":1187},[8545,8550,8554,8558],{"type":172,"tag":208,"props":8546,"children":8547},{"style":766},[8548],{"type":178,"value":8549}," var",{"type":172,"tag":208,"props":8551,"children":8552},{"style":442},[8553],{"type":178,"value":8492},{"type":172,"tag":208,"props":8555,"children":8556},{"style":238},[8557],{"type":178,"value":1130},{"type":172,"tag":208,"props":8559,"children":8560},{"style":470},[8561],{"type":178,"value":6120},{"type":172,"tag":208,"props":8563,"children":8564},{"class":210,"line":1196},[8565,8569,8573,8577,8581],{"type":172,"tag":208,"props":8566,"children":8567},{"style":442},[8568],{"type":178,"value":2990},{"type":172,"tag":208,"props":8570,"children":8571},{"style":448},[8572],{"type":178,"value":451},{"type":172,"tag":208,"props":8574,"children":8575},{"style":442},[8576],{"type":178,"value":1125},{"type":172,"tag":208,"props":8578,"children":8579},{"style":238},[8580],{"type":178,"value":1130},{"type":172,"tag":208,"props":8582,"children":8583},{"style":470},[8584],{"type":178,"value":6544},{"type":172,"tag":208,"props":8586,"children":8587},{"class":210,"line":1231},[8588,8592,8596],{"type":172,"tag":208,"props":8589,"children":8590},{"style":442},[8591],{"type":178,"value":6801},{"type":172,"tag":208,"props":8593,"children":8594},{"style":238},[8595],{"type":178,"value":1130},{"type":172,"tag":208,"props":8597,"children":8598},{"style":470},[8599],{"type":178,"value":8600}," 2\n",{"type":172,"tag":208,"props":8602,"children":8603},{"class":210,"line":1268},[8604],{"type":172,"tag":208,"props":8605,"children":8606},{"style":448},[8607],{"type":178,"value":1193},{"type":172,"tag":208,"props":8609,"children":8610},{"class":210,"line":1276},[8611,8615,8619,8623,8627,8631,8635,8639,8644],{"type":172,"tag":208,"props":8612,"children":8613},{"style":442},[8614],{"type":178,"value":4786},{"type":172,"tag":208,"props":8616,"children":8617},{"style":448},[8618],{"type":178,"value":451},{"type":172,"tag":208,"props":8620,"children":8621},{"style":454},[8622],{"type":178,"value":1161},{"type":172,"tag":208,"props":8624,"children":8625},{"style":442},[8626],{"type":178,"value":7087},{"type":172,"tag":208,"props":8628,"children":8629},{"style":448},[8630],{"type":178,"value":478},{"type":172,"tag":208,"props":8632,"children":8633},{"style":442},[8634],{"type":178,"value":6801},{"type":172,"tag":208,"props":8636,"children":8637},{"style":448},[8638],{"type":178,"value":478},{"type":172,"tag":208,"props":8640,"children":8641},{"style":442},[8642],{"type":178,"value":8643}," value) ",{"type":172,"tag":208,"props":8645,"children":8646},{"style":495},[8647],{"type":178,"value":8648},"// { value:100, b:2 }, 1, undefined\n",{"type":172,"tag":186,"props":8650,"children":8651},{},[8652],{"type":178,"value":8653},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":172,"tag":186,"props":8655,"children":8656},{},[8657],{"type":178,"value":8658},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":172,"tag":186,"props":8660,"children":8661},{},[8662],{"type":178,"value":8663},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":172,"tag":186,"props":8665,"children":8666},{},[8667],{"type":178,"value":8668},"闭包内标识符系统的优先级规则：",{"type":172,"tag":286,"props":8670,"children":8671},{},[8672,8677,8682],{"type":172,"tag":290,"props":8673,"children":8674},{},[8675],{"type":178,"value":8676},"内部函数声明 > 函数参数名列表",{"type":172,"tag":290,"props":8678,"children":8679},{},[8680],{"type":178,"value":8681},"参数中的 arguments 名字 > 函数的 arguments",{"type":172,"tag":290,"props":8683,"children":8684},{},[8685],{"type":178,"value":8686},"var 声明的名字如果已存在，则不再创建新变量",{"type":172,"tag":186,"props":8688,"children":8689},{},[8690],{"type":178,"value":8691},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":172,"tag":173,"props":8693,"children":8695},{"id":8694},"动态语言特性",[8696],{"type":178,"value":8694},{"type":172,"tag":180,"props":8698,"children":8700},{"id":8699},"概述-2",[8701],{"type":178,"value":5819},{"type":172,"tag":186,"props":8703,"children":8704},{},[8705],{"type":178,"value":8706},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":172,"tag":186,"props":8708,"children":8709},{},[8710],{"type":178,"value":8711},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":172,"tag":180,"props":8713,"children":8715},{"id":8714},"对象与值类型之间的转换",[8716],{"type":178,"value":8714},{"type":172,"tag":186,"props":8718,"children":8719},{},[8720],{"type":178,"value":8721},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":172,"tag":197,"props":8723,"children":8725},{"className":430,"code":8724,"language":432,"meta":166,"style":166},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8726],{"type":172,"tag":204,"props":8727,"children":8728},{"__ignoreMap":166},[8729,8777,8800,8808,8852,8859],{"type":172,"tag":208,"props":8730,"children":8731},{"class":210,"line":211},[8732,8736,8741,8745,8749,8753,8757,8761,8765,8769,8773],{"type":172,"tag":208,"props":8733,"children":8734},{"style":766},[8735],{"type":178,"value":2402},{"type":172,"tag":208,"props":8737,"children":8738},{"style":7586},[8739],{"type":178,"value":8740}," toString",{"type":172,"tag":208,"props":8742,"children":8743},{"style":238},[8744],{"type":178,"value":1130},{"type":172,"tag":208,"props":8746,"children":8747},{"style":448},[8748],{"type":178,"value":1102},{"type":172,"tag":208,"props":8750,"children":8751},{"style":766},[8752],{"type":178,"value":5493},{"type":172,"tag":208,"props":8754,"children":8755},{"style":442},[8756],{"type":178,"value":1809},{"type":172,"tag":208,"props":8758,"children":8759},{"style":448},[8760],{"type":178,"value":451},{"type":172,"tag":208,"props":8762,"children":8763},{"style":454},[8764],{"type":178,"value":1161},{"type":172,"tag":208,"props":8766,"children":8767},{"style":442},[8768],{"type":178,"value":462},{"type":172,"tag":208,"props":8770,"children":8771},{"style":470},[8772],{"type":178,"value":277},{"type":172,"tag":208,"props":8774,"children":8775},{"style":442},[8776],{"type":178,"value":1184},{"type":172,"tag":208,"props":8778,"children":8779},{"class":210,"line":501},[8780,8784,8788,8792,8796],{"type":172,"tag":208,"props":8781,"children":8782},{"style":1470},[8783],{"type":178,"value":8532},{"type":172,"tag":208,"props":8785,"children":8786},{"style":442},[8787],{"type":178,"value":1699},{"type":172,"tag":208,"props":8789,"children":8790},{"style":470},[8791],{"type":178,"value":277},{"type":172,"tag":208,"props":8793,"children":8794},{"style":442},[8795],{"type":178,"value":492},{"type":172,"tag":208,"props":8797,"children":8798},{"style":448},[8799],{"type":178,"value":1516},{"type":172,"tag":208,"props":8801,"children":8802},{"class":210,"line":1146},[8803],{"type":172,"tag":208,"props":8804,"children":8805},{"style":495},[8806],{"type":178,"value":8807},"  // equal to (1).toString = ...\n",{"type":172,"tag":208,"props":8809,"children":8810},{"class":210,"line":1187},[8811,8816,8820,8824,8828,8832,8836,8840,8844,8848],{"type":172,"tag":208,"props":8812,"children":8813},{"style":454},[8814],{"type":178,"value":8815},"  toString",{"type":172,"tag":208,"props":8817,"children":8818},{"style":238},[8819],{"type":178,"value":1130},{"type":172,"tag":208,"props":8821,"children":8822},{"style":448},[8823],{"type":178,"value":1102},{"type":172,"tag":208,"props":8825,"children":8826},{"style":766},[8827],{"type":178,"value":5493},{"type":172,"tag":208,"props":8829,"children":8830},{"style":442},[8831],{"type":178,"value":1809},{"type":172,"tag":208,"props":8833,"children":8834},{"style":448},[8835],{"type":178,"value":451},{"type":172,"tag":208,"props":8837,"children":8838},{"style":454},[8839],{"type":178,"value":1161},{"type":172,"tag":208,"props":8841,"children":8842},{"style":1164},[8843],{"type":178,"value":462},{"type":172,"tag":208,"props":8845,"children":8846},{"style":470},[8847],{"type":178,"value":305},{"type":172,"tag":208,"props":8849,"children":8850},{"style":1164},[8851],{"type":178,"value":1184},{"type":172,"tag":208,"props":8853,"children":8854},{"class":210,"line":1196},[8855],{"type":172,"tag":208,"props":8856,"children":8857},{"style":448},[8858],{"type":178,"value":1193},{"type":172,"tag":208,"props":8860,"children":8861},{"class":210,"line":1231},[8862,8866,8870,8874,8878,8883,8887],{"type":172,"tag":208,"props":8863,"children":8864},{"style":442},[8865],{"type":178,"value":4786},{"type":172,"tag":208,"props":8867,"children":8868},{"style":448},[8869],{"type":178,"value":451},{"type":172,"tag":208,"props":8871,"children":8872},{"style":454},[8873],{"type":178,"value":1161},{"type":172,"tag":208,"props":8875,"children":8876},{"style":442},[8877],{"type":178,"value":462},{"type":172,"tag":208,"props":8879,"children":8880},{"style":454},[8881],{"type":178,"value":8882},"toString",{"type":172,"tag":208,"props":8884,"children":8885},{"style":442},[8886],{"type":178,"value":581},{"type":172,"tag":208,"props":8888,"children":8889},{"style":495},[8890],{"type":178,"value":6490},{"type":172,"tag":186,"props":8892,"children":8893},{},[8894],{"type":178,"value":8895},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":172,"tag":186,"props":8897,"children":8898},{},[8899],{"type":178,"value":8900},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":172,"tag":197,"props":8902,"children":8904},{"className":430,"code":8903,"language":432,"meta":166,"style":166},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[8905],{"type":172,"tag":204,"props":8906,"children":8907},{"__ignoreMap":166},[8908,8950,8993],{"type":172,"tag":208,"props":8909,"children":8910},{"class":210,"line":211},[8911,8916,8920,8924,8928,8933,8937,8941,8945],{"type":172,"tag":208,"props":8912,"children":8913},{"style":2589},[8914],{"type":178,"value":8915},"String",{"type":172,"tag":208,"props":8917,"children":8918},{"style":448},[8919],{"type":178,"value":451},{"type":172,"tag":208,"props":8921,"children":8922},{"style":1200},[8923],{"type":178,"value":2600},{"type":172,"tag":208,"props":8925,"children":8926},{"style":448},[8927],{"type":178,"value":451},{"type":172,"tag":208,"props":8929,"children":8930},{"style":454},[8931],{"type":178,"value":8932},"valueOf",{"type":172,"tag":208,"props":8934,"children":8935},{"style":238},[8936],{"type":178,"value":1130},{"type":172,"tag":208,"props":8938,"children":8939},{"style":448},[8940],{"type":178,"value":1102},{"type":172,"tag":208,"props":8942,"children":8943},{"style":766},[8944],{"type":178,"value":5493},{"type":172,"tag":208,"props":8946,"children":8947},{"style":470},[8948],{"type":178,"value":8949}," 0\n",{"type":172,"tag":208,"props":8951,"children":8952},{"class":210,"line":501},[8953,8957,8961,8965,8969,8973,8977,8981,8985,8989],{"type":172,"tag":208,"props":8954,"children":8955},{"style":442},[8956],{"type":178,"value":4786},{"type":172,"tag":208,"props":8958,"children":8959},{"style":448},[8960],{"type":178,"value":451},{"type":172,"tag":208,"props":8962,"children":8963},{"style":454},[8964],{"type":178,"value":1161},{"type":172,"tag":208,"props":8966,"children":8967},{"style":442},[8968],{"type":178,"value":462},{"type":172,"tag":208,"props":8970,"children":8971},{"style":238},[8972],{"type":178,"value":467},{"type":172,"tag":208,"props":8974,"children":8975},{"style":221},[8976],{"type":178,"value":235},{"type":172,"tag":208,"props":8978,"children":8979},{"style":227},[8980],{"type":178,"value":277},{"type":172,"tag":208,"props":8982,"children":8983},{"style":221},[8984],{"type":178,"value":235},{"type":172,"tag":208,"props":8986,"children":8987},{"style":442},[8988],{"type":178,"value":492},{"type":172,"tag":208,"props":8990,"children":8991},{"style":495},[8992],{"type":178,"value":6490},{"type":172,"tag":208,"props":8994,"children":8995},{"class":210,"line":1146},[8996,9000,9004,9008,9012,9017,9021,9025,9029,9033,9037,9042],{"type":172,"tag":208,"props":8997,"children":8998},{"style":442},[8999],{"type":178,"value":4786},{"type":172,"tag":208,"props":9001,"children":9002},{"style":448},[9003],{"type":178,"value":451},{"type":172,"tag":208,"props":9005,"children":9006},{"style":454},[9007],{"type":178,"value":1161},{"type":172,"tag":208,"props":9009,"children":9010},{"style":442},[9011],{"type":178,"value":462},{"type":172,"tag":208,"props":9013,"children":9014},{"style":238},[9015],{"type":178,"value":9016},"+new",{"type":172,"tag":208,"props":9018,"children":9019},{"style":454},[9020],{"type":178,"value":3879},{"type":172,"tag":208,"props":9022,"children":9023},{"style":442},[9024],{"type":178,"value":462},{"type":172,"tag":208,"props":9026,"children":9027},{"style":221},[9028],{"type":178,"value":235},{"type":172,"tag":208,"props":9030,"children":9031},{"style":227},[9032],{"type":178,"value":277},{"type":172,"tag":208,"props":9034,"children":9035},{"style":221},[9036],{"type":178,"value":235},{"type":172,"tag":208,"props":9038,"children":9039},{"style":442},[9040],{"type":178,"value":9041},")) ",{"type":172,"tag":208,"props":9043,"children":9044},{"style":495},[9045],{"type":178,"value":9046},"// 0\n",{"type":172,"tag":186,"props":9048,"children":9049},{},[9050],{"type":178,"value":9051},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":172,"tag":197,"props":9053,"children":9055},{"className":430,"code":9054,"language":432,"meta":166,"style":166},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9056],{"type":172,"tag":204,"props":9057,"children":9058},{"__ignoreMap":166},[9059,9096,9128,9160],{"type":172,"tag":208,"props":9060,"children":9061},{"class":210,"line":211},[9062,9066,9071,9075,9079,9083,9087,9092],{"type":172,"tag":208,"props":9063,"children":9064},{"style":766},[9065],{"type":178,"value":5557},{"type":172,"tag":208,"props":9067,"children":9068},{"style":1200},[9069],{"type":178,"value":9070}," f",{"type":172,"tag":208,"props":9072,"children":9073},{"style":238},[9074],{"type":178,"value":1130},{"type":172,"tag":208,"props":9076,"children":9077},{"style":238},[9078],{"type":178,"value":2609},{"type":172,"tag":208,"props":9080,"children":9081},{"style":454},[9082],{"type":178,"value":3879},{"type":172,"tag":208,"props":9084,"children":9085},{"style":442},[9086],{"type":178,"value":462},{"type":172,"tag":208,"props":9088,"children":9089},{"style":605},[9090],{"type":178,"value":9091},"false",{"type":172,"tag":208,"props":9093,"children":9094},{"style":442},[9095],{"type":178,"value":1184},{"type":172,"tag":208,"props":9097,"children":9098},{"class":210,"line":501},[9099,9103,9107,9111,9115,9119,9124],{"type":172,"tag":208,"props":9100,"children":9101},{"style":442},[9102],{"type":178,"value":4786},{"type":172,"tag":208,"props":9104,"children":9105},{"style":448},[9106],{"type":178,"value":451},{"type":172,"tag":208,"props":9108,"children":9109},{"style":454},[9110],{"type":178,"value":1161},{"type":172,"tag":208,"props":9112,"children":9113},{"style":442},[9114],{"type":178,"value":462},{"type":172,"tag":208,"props":9116,"children":9117},{"style":238},[9118],{"type":178,"value":467},{"type":172,"tag":208,"props":9120,"children":9121},{"style":442},[9122],{"type":178,"value":9123},"f) ",{"type":172,"tag":208,"props":9125,"children":9126},{"style":495},[9127],{"type":178,"value":9046},{"type":172,"tag":208,"props":9129,"children":9130},{"class":210,"line":1146},[9131,9135,9139,9143,9147,9152,9156],{"type":172,"tag":208,"props":9132,"children":9133},{"style":442},[9134],{"type":178,"value":4786},{"type":172,"tag":208,"props":9136,"children":9137},{"style":448},[9138],{"type":178,"value":451},{"type":172,"tag":208,"props":9140,"children":9141},{"style":454},[9142],{"type":178,"value":1161},{"type":172,"tag":208,"props":9144,"children":9145},{"style":442},[9146],{"type":178,"value":462},{"type":172,"tag":208,"props":9148,"children":9149},{"style":238},[9150],{"type":178,"value":9151},"!!",{"type":172,"tag":208,"props":9153,"children":9154},{"style":442},[9155],{"type":178,"value":9123},{"type":172,"tag":208,"props":9157,"children":9158},{"style":495},[9159],{"type":178,"value":542},{"type":172,"tag":208,"props":9161,"children":9162},{"class":210,"line":1187},[9163,9167,9171,9175,9179,9183,9188],{"type":172,"tag":208,"props":9164,"children":9165},{"style":442},[9166],{"type":178,"value":4786},{"type":172,"tag":208,"props":9168,"children":9169},{"style":448},[9170],{"type":178,"value":451},{"type":172,"tag":208,"props":9172,"children":9173},{"style":454},[9174],{"type":178,"value":1161},{"type":172,"tag":208,"props":9176,"children":9177},{"style":442},[9178],{"type":178,"value":462},{"type":172,"tag":208,"props":9180,"children":9181},{"style":454},[9182],{"type":178,"value":567},{"type":172,"tag":208,"props":9184,"children":9185},{"style":442},[9186],{"type":178,"value":9187},"(f)) ",{"type":172,"tag":208,"props":9189,"children":9190},{"style":495},[9191],{"type":178,"value":542},{"type":172,"tag":186,"props":9193,"children":9194},{},[9195],{"type":178,"value":9196},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":172,"tag":180,"props":9198,"children":9200},{"id":9199},"值类型的转换",[9201],{"type":178,"value":9199},{"type":172,"tag":186,"props":9203,"children":9204},{},[9205],{"type":178,"value":9206},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":172,"tag":186,"props":9208,"children":9209},{},[9210],{"type":178,"value":9211},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":172,"tag":186,"props":9213,"children":9214},{},[9215],{"type":178,"value":9216},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":172,"tag":197,"props":9218,"children":9220},{"className":430,"code":9219,"language":432,"meta":166,"style":166},"parseInt(1e35) // 1\n",[9221],{"type":172,"tag":204,"props":9222,"children":9223},{"__ignoreMap":166},[9224],{"type":172,"tag":208,"props":9225,"children":9226},{"class":210,"line":211},[9227,9232,9236,9241,9245],{"type":172,"tag":208,"props":9228,"children":9229},{"style":454},[9230],{"type":178,"value":9231},"parseInt",{"type":172,"tag":208,"props":9233,"children":9234},{"style":442},[9235],{"type":178,"value":462},{"type":172,"tag":208,"props":9237,"children":9238},{"style":470},[9239],{"type":178,"value":9240},"1e35",{"type":172,"tag":208,"props":9242,"children":9243},{"style":442},[9244],{"type":178,"value":492},{"type":172,"tag":208,"props":9246,"children":9247},{"style":495},[9248],{"type":178,"value":6490},{"type":172,"tag":186,"props":9250,"children":9251},{},[9252],{"type":178,"value":9253},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":172,"tag":197,"props":9255,"children":9257},{"className":430,"code":9256,"language":432,"meta":166,"style":166},"String() // ''\nString(undefined) // undefined\n",[9258],{"type":172,"tag":204,"props":9259,"children":9260},{"__ignoreMap":166},[9261,9277],{"type":172,"tag":208,"props":9262,"children":9263},{"class":210,"line":211},[9264,9268,9272],{"type":172,"tag":208,"props":9265,"children":9266},{"style":454},[9267],{"type":178,"value":8915},{"type":172,"tag":208,"props":9269,"children":9270},{"style":442},[9271],{"type":178,"value":597},{"type":172,"tag":208,"props":9273,"children":9274},{"style":495},[9275],{"type":178,"value":9276},"// ''\n",{"type":172,"tag":208,"props":9278,"children":9279},{"class":210,"line":501},[9280,9284,9288,9292,9296],{"type":172,"tag":208,"props":9281,"children":9282},{"style":454},[9283],{"type":178,"value":8915},{"type":172,"tag":208,"props":9285,"children":9286},{"style":442},[9287],{"type":178,"value":462},{"type":172,"tag":208,"props":9289,"children":9290},{"style":521},[9291],{"type":178,"value":4321},{"type":172,"tag":208,"props":9293,"children":9294},{"style":442},[9295],{"type":178,"value":492},{"type":172,"tag":208,"props":9297,"children":9298},{"style":495},[9299],{"type":178,"value":732},{"type":172,"tag":180,"props":9301,"children":9303},{"id":9302},"对象与数组的动态特性",[9304],{"type":178,"value":9302},{"type":172,"tag":186,"props":9306,"children":9307},{},[9308],{"type":178,"value":9309},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":172,"tag":197,"props":9311,"children":9313},{"className":430,"code":9312,"language":432,"meta":166,"style":166},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9314],{"type":172,"tag":204,"props":9315,"children":9316},{"__ignoreMap":166},[9317,9353,9378,9401,9425],{"type":172,"tag":208,"props":9318,"children":9319},{"class":210,"line":211},[9320,9324,9328,9332,9336,9341,9345,9349],{"type":172,"tag":208,"props":9321,"children":9322},{"style":766},[9323],{"type":178,"value":5557},{"type":172,"tag":208,"props":9325,"children":9326},{"style":1200},[9327],{"type":178,"value":2990},{"type":172,"tag":208,"props":9329,"children":9330},{"style":238},[9331],{"type":178,"value":1130},{"type":172,"tag":208,"props":9333,"children":9334},{"style":238},[9335],{"type":178,"value":2609},{"type":172,"tag":208,"props":9337,"children":9338},{"style":454},[9339],{"type":178,"value":9340}," Array",{"type":172,"tag":208,"props":9342,"children":9343},{"style":442},[9344],{"type":178,"value":462},{"type":172,"tag":208,"props":9346,"children":9347},{"style":470},[9348],{"type":178,"value":7865},{"type":172,"tag":208,"props":9350,"children":9351},{"style":442},[9352],{"type":178,"value":1184},{"type":172,"tag":208,"props":9354,"children":9355},{"class":210,"line":501},[9356,9361,9365,9370,9374],{"type":172,"tag":208,"props":9357,"children":9358},{"style":442},[9359],{"type":178,"value":9360},"a[",{"type":172,"tag":208,"props":9362,"children":9363},{"style":470},[9364],{"type":178,"value":277},{"type":172,"tag":208,"props":9366,"children":9367},{"style":442},[9368],{"type":178,"value":9369},"] ",{"type":172,"tag":208,"props":9371,"children":9372},{"style":238},[9373],{"type":178,"value":1641},{"type":172,"tag":208,"props":9375,"children":9376},{"style":470},[9377],{"type":178,"value":6544},{"type":172,"tag":208,"props":9379,"children":9380},{"class":210,"line":1146},[9381,9385,9389,9393,9397],{"type":172,"tag":208,"props":9382,"children":9383},{"style":442},[9384],{"type":178,"value":9360},{"type":172,"tag":208,"props":9386,"children":9387},{"style":470},[9388],{"type":178,"value":6067},{"type":172,"tag":208,"props":9390,"children":9391},{"style":442},[9392],{"type":178,"value":9369},{"type":172,"tag":208,"props":9394,"children":9395},{"style":238},[9396],{"type":178,"value":1641},{"type":172,"tag":208,"props":9398,"children":9399},{"style":470},[9400],{"type":178,"value":6544},{"type":172,"tag":208,"props":9402,"children":9403},{"class":210,"line":1187},[9404,9408,9413,9417,9421],{"type":172,"tag":208,"props":9405,"children":9406},{"style":442},[9407],{"type":178,"value":9360},{"type":172,"tag":208,"props":9409,"children":9410},{"style":470},[9411],{"type":178,"value":9412},"7",{"type":172,"tag":208,"props":9414,"children":9415},{"style":442},[9416],{"type":178,"value":9369},{"type":172,"tag":208,"props":9418,"children":9419},{"style":238},[9420],{"type":178,"value":1641},{"type":172,"tag":208,"props":9422,"children":9423},{"style":470},[9424],{"type":178,"value":6544},{"type":172,"tag":208,"props":9426,"children":9427},{"class":210,"line":1196},[9428,9432,9436,9441,9445,9449,9453,9458,9462,9467,9471,9476,9481,9485],{"type":172,"tag":208,"props":9429,"children":9430},{"style":442},[9431],{"type":178,"value":269},{"type":172,"tag":208,"props":9433,"children":9434},{"style":448},[9435],{"type":178,"value":451},{"type":172,"tag":208,"props":9437,"children":9438},{"style":454},[9439],{"type":178,"value":9440},"sort",{"type":172,"tag":208,"props":9442,"children":9443},{"style":442},[9444],{"type":178,"value":462},{"type":172,"tag":208,"props":9446,"children":9447},{"style":448},[9448],{"type":178,"value":815},{"type":172,"tag":208,"props":9450,"children":9451},{"style":766},[9452],{"type":178,"value":5493},{"type":172,"tag":208,"props":9454,"children":9455},{"style":442},[9456],{"type":178,"value":9457}," Math",{"type":172,"tag":208,"props":9459,"children":9460},{"style":448},[9461],{"type":178,"value":451},{"type":172,"tag":208,"props":9463,"children":9464},{"style":454},[9465],{"type":178,"value":9466},"random",{"type":172,"tag":208,"props":9468,"children":9469},{"style":442},[9470],{"type":178,"value":597},{"type":172,"tag":208,"props":9472,"children":9473},{"style":238},[9474],{"type":178,"value":9475},"-",{"type":172,"tag":208,"props":9477,"children":9478},{"style":470},[9479],{"type":178,"value":9480}," 0.5",{"type":172,"tag":208,"props":9482,"children":9483},{"style":442},[9484],{"type":178,"value":492},{"type":172,"tag":208,"props":9486,"children":9487},{"style":495},[9488],{"type":178,"value":9489},"// [1, 1, 1, empty x 7]\n",{"type":172,"tag":186,"props":9491,"children":9492},{},[9493],{"type":178,"value":9494},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":172,"tag":186,"props":9496,"children":9497},{},[9498],{"type":178,"value":9499},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":172,"tag":180,"props":9501,"children":9503},{"id":9502},"重写",[9504],{"type":178,"value":9502},{"type":172,"tag":186,"props":9506,"children":9507},{},[9508],{"type":178,"value":9509},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":172,"tag":186,"props":9511,"children":9512},{},[9513],{"type":178,"value":9514},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":172,"tag":186,"props":9516,"children":9517},{},[9518],{"type":178,"value":9519},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":172,"tag":197,"props":9521,"children":9523},{"className":430,"code":9522,"language":432,"meta":166,"style":166},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9524],{"type":172,"tag":204,"props":9525,"children":9526},{"__ignoreMap":166},[9527,9568,9583,9604,9621,9628,9639,9662,9694,9729,9769,9809,9817,9873,9888,9936,9943,9950,9961,9984],{"type":172,"tag":208,"props":9528,"children":9529},{"class":210,"line":211},[9530,9534,9538,9542,9546,9550,9555,9559,9564],{"type":172,"tag":208,"props":9531,"children":9532},{"style":766},[9533],{"type":178,"value":5557},{"type":172,"tag":208,"props":9535,"children":9536},{"style":1200},[9537],{"type":178,"value":2990},{"type":172,"tag":208,"props":9539,"children":9540},{"style":238},[9541],{"type":178,"value":1130},{"type":172,"tag":208,"props":9543,"children":9544},{"style":442},[9545],{"type":178,"value":3879},{"type":172,"tag":208,"props":9547,"children":9548},{"style":448},[9549],{"type":178,"value":451},{"type":172,"tag":208,"props":9551,"children":9552},{"style":454},[9553],{"type":178,"value":9554},"defineProperties",{"type":172,"tag":208,"props":9556,"children":9557},{"style":442},[9558],{"type":178,"value":462},{"type":172,"tag":208,"props":9560,"children":9561},{"style":448},[9562],{"type":178,"value":9563},"{},",{"type":172,"tag":208,"props":9565,"children":9566},{"style":448},[9567],{"type":178,"value":1107},{"type":172,"tag":208,"props":9569,"children":9570},{"class":210,"line":501},[9571,9575,9579],{"type":172,"tag":208,"props":9572,"children":9573},{"style":1164},[9574],{"type":178,"value":2540},{"type":172,"tag":208,"props":9576,"children":9577},{"style":448},[9578],{"type":178,"value":1626},{"type":172,"tag":208,"props":9580,"children":9581},{"style":448},[9582],{"type":178,"value":1107},{"type":172,"tag":208,"props":9584,"children":9585},{"class":210,"line":1146},[9586,9591,9595,9600],{"type":172,"tag":208,"props":9587,"children":9588},{"style":1164},[9589],{"type":178,"value":9590},"    value",{"type":172,"tag":208,"props":9592,"children":9593},{"style":448},[9594],{"type":178,"value":1626},{"type":172,"tag":208,"props":9596,"children":9597},{"style":470},[9598],{"type":178,"value":9599}," 100",{"type":172,"tag":208,"props":9601,"children":9602},{"style":448},[9603],{"type":178,"value":7000},{"type":172,"tag":208,"props":9605,"children":9606},{"class":210,"line":1187},[9607,9612,9616],{"type":172,"tag":208,"props":9608,"children":9609},{"style":1164},[9610],{"type":178,"value":9611},"    configurable",{"type":172,"tag":208,"props":9613,"children":9614},{"style":448},[9615],{"type":178,"value":1626},{"type":172,"tag":208,"props":9617,"children":9618},{"style":605},[9619],{"type":178,"value":9620}," true\n",{"type":172,"tag":208,"props":9622,"children":9623},{"class":210,"line":1196},[9624],{"type":172,"tag":208,"props":9625,"children":9626},{"style":448},[9627],{"type":178,"value":1846},{"type":172,"tag":208,"props":9629,"children":9630},{"class":210,"line":1231},[9631,9635],{"type":172,"tag":208,"props":9632,"children":9633},{"style":448},[9634],{"type":178,"value":1440},{"type":172,"tag":208,"props":9636,"children":9637},{"style":442},[9638],{"type":178,"value":1184},{"type":172,"tag":208,"props":9640,"children":9641},{"class":210,"line":1268},[9642,9646,9650,9654,9658],{"type":172,"tag":208,"props":9643,"children":9644},{"style":442},[9645],{"type":178,"value":269},{"type":172,"tag":208,"props":9647,"children":9648},{"style":448},[9649],{"type":178,"value":451},{"type":172,"tag":208,"props":9651,"children":9652},{"style":442},[9653],{"type":178,"value":3918},{"type":172,"tag":208,"props":9655,"children":9656},{"style":238},[9657],{"type":178,"value":1641},{"type":172,"tag":208,"props":9659,"children":9660},{"style":470},[9661],{"type":178,"value":6544},{"type":172,"tag":208,"props":9663,"children":9664},{"class":210,"line":1276},[9665,9669,9673,9677,9681,9685,9689],{"type":172,"tag":208,"props":9666,"children":9667},{"style":442},[9668],{"type":178,"value":4786},{"type":172,"tag":208,"props":9670,"children":9671},{"style":448},[9672],{"type":178,"value":451},{"type":172,"tag":208,"props":9674,"children":9675},{"style":454},[9676],{"type":178,"value":1161},{"type":172,"tag":208,"props":9678,"children":9679},{"style":442},[9680],{"type":178,"value":7087},{"type":172,"tag":208,"props":9682,"children":9683},{"style":448},[9684],{"type":178,"value":451},{"type":172,"tag":208,"props":9686,"children":9687},{"style":442},[9688],{"type":178,"value":5796},{"type":172,"tag":208,"props":9690,"children":9691},{"style":495},[9692],{"type":178,"value":9693},"// 100\n",{"type":172,"tag":208,"props":9695,"children":9696},{"class":210,"line":1303},[9697,9701,9705,9709,9713,9717,9721,9725],{"type":172,"tag":208,"props":9698,"children":9699},{"style":766},[9700],{"type":178,"value":5557},{"type":172,"tag":208,"props":9702,"children":9703},{"style":1200},[9704],{"type":178,"value":6801},{"type":172,"tag":208,"props":9706,"children":9707},{"style":238},[9708],{"type":178,"value":1130},{"type":172,"tag":208,"props":9710,"children":9711},{"style":238},[9712],{"type":178,"value":2609},{"type":172,"tag":208,"props":9714,"children":9715},{"style":454},[9716],{"type":178,"value":5403},{"type":172,"tag":208,"props":9718,"children":9719},{"style":442},[9720],{"type":178,"value":7087},{"type":172,"tag":208,"props":9722,"children":9723},{"style":448},[9724],{"type":178,"value":478},{"type":172,"tag":208,"props":9726,"children":9727},{"style":448},[9728],{"type":178,"value":1107},{"type":172,"tag":208,"props":9730,"children":9731},{"class":210,"line":1879},[9732,9736,9740,9744,9748,9753,9757,9761,9765],{"type":172,"tag":208,"props":9733,"children":9734},{"style":2426},[9735],{"type":178,"value":2423},{"type":172,"tag":208,"props":9737,"children":9738},{"style":448},[9739],{"type":178,"value":1699},{"type":172,"tag":208,"props":9741,"children":9742},{"style":1393},[9743],{"type":178,"value":5421},{"type":172,"tag":208,"props":9745,"children":9746},{"style":448},[9747],{"type":178,"value":478},{"type":172,"tag":208,"props":9749,"children":9750},{"style":1393},[9751],{"type":178,"value":9752}," key",{"type":172,"tag":208,"props":9754,"children":9755},{"style":448},[9756],{"type":178,"value":478},{"type":172,"tag":208,"props":9758,"children":9759},{"style":1393},[9760],{"type":178,"value":8492},{"type":172,"tag":208,"props":9762,"children":9763},{"style":448},[9764],{"type":178,"value":1401},{"type":172,"tag":208,"props":9766,"children":9767},{"style":448},[9768],{"type":178,"value":1107},{"type":172,"tag":208,"props":9770,"children":9771},{"class":210,"line":1939},[9772,9776,9780,9785,9789,9793,9797,9801,9805],{"type":172,"tag":208,"props":9773,"children":9774},{"style":1470},[9775],{"type":178,"value":1760},{"type":172,"tag":208,"props":9777,"children":9778},{"style":1164},[9779],{"type":178,"value":1699},{"type":172,"tag":208,"props":9781,"children":9782},{"style":442},[9783],{"type":178,"value":9784},"key",{"type":172,"tag":208,"props":9786,"children":9787},{"style":238},[9788],{"type":178,"value":1773},{"type":172,"tag":208,"props":9790,"children":9791},{"style":221},[9792],{"type":178,"value":224},{"type":172,"tag":208,"props":9794,"children":9795},{"style":227},[9796],{"type":178,"value":1492},{"type":172,"tag":208,"props":9798,"children":9799},{"style":221},[9800],{"type":178,"value":235},{"type":172,"tag":208,"props":9802,"children":9803},{"style":1164},[9804],{"type":178,"value":492},{"type":172,"tag":208,"props":9806,"children":9807},{"style":448},[9808],{"type":178,"value":1516},{"type":172,"tag":208,"props":9810,"children":9811},{"class":210,"line":2000},[9812],{"type":172,"tag":208,"props":9813,"children":9814},{"style":495},[9815],{"type":178,"value":9816},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":172,"tag":208,"props":9818,"children":9819},{"class":210,"line":2041},[9820,9824,9828,9832,9837,9841,9845,9849,9853,9857,9861,9865,9869],{"type":172,"tag":208,"props":9821,"children":9822},{"style":1470},[9823],{"type":178,"value":5670},{"type":172,"tag":208,"props":9825,"children":9826},{"style":442},[9827],{"type":178,"value":5711},{"type":172,"tag":208,"props":9829,"children":9830},{"style":448},[9831],{"type":178,"value":451},{"type":172,"tag":208,"props":9833,"children":9834},{"style":454},[9835],{"type":178,"value":9836},"defineProperty",{"type":172,"tag":208,"props":9838,"children":9839},{"style":1164},[9840],{"type":178,"value":462},{"type":172,"tag":208,"props":9842,"children":9843},{"style":442},[9844],{"type":178,"value":5421},{"type":172,"tag":208,"props":9846,"children":9847},{"style":448},[9848],{"type":178,"value":478},{"type":172,"tag":208,"props":9850,"children":9851},{"style":442},[9852],{"type":178,"value":9752},{"type":172,"tag":208,"props":9854,"children":9855},{"style":448},[9856],{"type":178,"value":478},{"type":172,"tag":208,"props":9858,"children":9859},{"style":448},[9860],{"type":178,"value":1478},{"type":172,"tag":208,"props":9862,"children":9863},{"style":442},[9864],{"type":178,"value":8492},{"type":172,"tag":208,"props":9866,"children":9867},{"style":448},[9868],{"type":178,"value":1501},{"type":172,"tag":208,"props":9870,"children":9871},{"style":1164},[9872],{"type":178,"value":1184},{"type":172,"tag":208,"props":9874,"children":9875},{"class":210,"line":2082},[9876,9880,9884],{"type":172,"tag":208,"props":9877,"children":9878},{"style":448},[9879],{"type":178,"value":5690},{"type":172,"tag":208,"props":9881,"children":9882},{"style":1470},[9883],{"type":178,"value":5695},{"type":172,"tag":208,"props":9885,"children":9886},{"style":448},[9887],{"type":178,"value":1107},{"type":172,"tag":208,"props":9889,"children":9890},{"class":210,"line":2091},[9891,9895,9899,9903,9908,9912,9916,9920,9924,9928,9932],{"type":172,"tag":208,"props":9892,"children":9893},{"style":1470},[9894],{"type":178,"value":5670},{"type":172,"tag":208,"props":9896,"children":9897},{"style":442},[9898],{"type":178,"value":5711},{"type":172,"tag":208,"props":9900,"children":9901},{"style":448},[9902],{"type":178,"value":451},{"type":172,"tag":208,"props":9904,"children":9905},{"style":454},[9906],{"type":178,"value":9907},"set",{"type":172,"tag":208,"props":9909,"children":9910},{"style":1164},[9911],{"type":178,"value":462},{"type":172,"tag":208,"props":9913,"children":9914},{"style":442},[9915],{"type":178,"value":5421},{"type":172,"tag":208,"props":9917,"children":9918},{"style":448},[9919],{"type":178,"value":478},{"type":172,"tag":208,"props":9921,"children":9922},{"style":442},[9923],{"type":178,"value":9752},{"type":172,"tag":208,"props":9925,"children":9926},{"style":448},[9927],{"type":178,"value":478},{"type":172,"tag":208,"props":9929,"children":9930},{"style":442},[9931],{"type":178,"value":8492},{"type":172,"tag":208,"props":9933,"children":9934},{"style":1164},[9935],{"type":178,"value":1184},{"type":172,"tag":208,"props":9937,"children":9938},{"class":210,"line":2099},[9939],{"type":172,"tag":208,"props":9940,"children":9941},{"style":448},[9942],{"type":178,"value":2088},{"type":172,"tag":208,"props":9944,"children":9945},{"class":210,"line":5765},[9946],{"type":172,"tag":208,"props":9947,"children":9948},{"style":448},[9949],{"type":178,"value":1846},{"type":172,"tag":208,"props":9951,"children":9952},{"class":210,"line":8281},[9953,9957],{"type":172,"tag":208,"props":9954,"children":9955},{"style":448},[9956],{"type":178,"value":1440},{"type":172,"tag":208,"props":9958,"children":9959},{"style":442},[9960],{"type":178,"value":1184},{"type":172,"tag":208,"props":9962,"children":9963},{"class":210,"line":8289},[9964,9968,9972,9976,9980],{"type":172,"tag":208,"props":9965,"children":9966},{"style":442},[9967],{"type":178,"value":1125},{"type":172,"tag":208,"props":9969,"children":9970},{"style":448},[9971],{"type":178,"value":451},{"type":172,"tag":208,"props":9973,"children":9974},{"style":442},[9975],{"type":178,"value":3918},{"type":172,"tag":208,"props":9977,"children":9978},{"style":238},[9979],{"type":178,"value":1641},{"type":172,"tag":208,"props":9981,"children":9982},{"style":470},[9983],{"type":178,"value":6544},{"type":172,"tag":208,"props":9985,"children":9986},{"class":210,"line":8297},[9987,9991,9995,9999,10004,10008,10012],{"type":172,"tag":208,"props":9988,"children":9989},{"style":442},[9990],{"type":178,"value":4786},{"type":172,"tag":208,"props":9992,"children":9993},{"style":448},[9994],{"type":178,"value":451},{"type":172,"tag":208,"props":9996,"children":9997},{"style":454},[9998],{"type":178,"value":1161},{"type":172,"tag":208,"props":10000,"children":10001},{"style":442},[10002],{"type":178,"value":10003},"(b",{"type":172,"tag":208,"props":10005,"children":10006},{"style":448},[10007],{"type":178,"value":451},{"type":172,"tag":208,"props":10009,"children":10010},{"style":442},[10011],{"type":178,"value":5796},{"type":172,"tag":208,"props":10013,"children":10014},{"style":495},[10015],{"type":178,"value":6490},{"type":172,"tag":186,"props":10017,"children":10018},{},[10019],{"type":178,"value":10020},"自增自减运算符会隐式的转换操作数的类型。",{"type":172,"tag":186,"props":10022,"children":10023},{},[10024],{"type":178,"value":10025},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":172,"tag":197,"props":10027,"children":10029},{"className":430,"code":10028,"language":432,"meta":166,"style":166},"class a extends a {}\n",[10030],{"type":172,"tag":204,"props":10031,"children":10032},{"__ignoreMap":166},[10033],{"type":172,"tag":208,"props":10034,"children":10035},{"class":210,"line":211},[10036,10040,10044,10048,10052],{"type":172,"tag":208,"props":10037,"children":10038},{"style":766},[10039],{"type":178,"value":3311},{"type":172,"tag":208,"props":10041,"children":10042},{"style":3314},[10043],{"type":178,"value":2990},{"type":172,"tag":208,"props":10045,"children":10046},{"style":3334},[10047],{"type":178,"value":3337},{"type":172,"tag":208,"props":10049,"children":10050},{"style":3340},[10051],{"type":178,"value":2990},{"type":172,"tag":208,"props":10053,"children":10054},{"style":448},[10055],{"type":178,"value":2898},{"type":172,"tag":186,"props":10057,"children":10058},{},[10059],{"type":178,"value":10060},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":172,"tag":186,"props":10062,"children":10063},{},[10064],{"type":178,"value":10065},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":172,"tag":186,"props":10067,"children":10068},{},[10069],{"type":178,"value":10070},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":172,"tag":197,"props":10072,"children":10074},{"className":430,"code":10073,"language":432,"meta":166,"style":166},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10075],{"type":172,"tag":204,"props":10076,"children":10077},{"__ignoreMap":166},[10078,10131,10144,10151],{"type":172,"tag":208,"props":10079,"children":10080},{"class":210,"line":211},[10081,10085,10090,10094,10098,10103,10107,10111,10115,10119,10123,10127],{"type":172,"tag":208,"props":10082,"children":10083},{"style":1470},[10084],{"type":178,"value":8532},{"type":172,"tag":208,"props":10086,"children":10087},{"style":442},[10088],{"type":178,"value":10089}," (a ",{"type":172,"tag":208,"props":10091,"children":10092},{"style":238},[10093],{"type":178,"value":1641},{"type":172,"tag":208,"props":10095,"children":10096},{"style":448},[10097],{"type":178,"value":1478},{"type":172,"tag":208,"props":10099,"children":10100},{"style":1164},[10101],{"type":178,"value":10102}," undefined",{"type":172,"tag":208,"props":10104,"children":10105},{"style":448},[10106],{"type":178,"value":1626},{"type":172,"tag":208,"props":10108,"children":10109},{"style":221},[10110],{"type":178,"value":224},{"type":172,"tag":208,"props":10112,"children":10113},{"style":227},[10114],{"type":178,"value":1492},{"type":172,"tag":208,"props":10116,"children":10117},{"style":221},[10118],{"type":178,"value":235},{"type":172,"tag":208,"props":10120,"children":10121},{"style":448},[10122],{"type":178,"value":1501},{"type":172,"tag":208,"props":10124,"children":10125},{"style":442},[10126],{"type":178,"value":492},{"type":172,"tag":208,"props":10128,"children":10129},{"style":448},[10130],{"type":178,"value":1516},{"type":172,"tag":208,"props":10132,"children":10133},{"class":210,"line":501},[10134,10139],{"type":172,"tag":208,"props":10135,"children":10136},{"style":238},[10137],{"type":178,"value":10138},"  delete",{"type":172,"tag":208,"props":10140,"children":10141},{"style":521},[10142],{"type":178,"value":10143}," undefined\n",{"type":172,"tag":208,"props":10145,"children":10146},{"class":210,"line":1146},[10147],{"type":172,"tag":208,"props":10148,"children":10149},{"style":448},[10150],{"type":178,"value":1193},{"type":172,"tag":208,"props":10152,"children":10153},{"class":210,"line":1187},[10154,10158,10162,10166,10171],{"type":172,"tag":208,"props":10155,"children":10156},{"style":442},[10157],{"type":178,"value":4786},{"type":172,"tag":208,"props":10159,"children":10160},{"style":448},[10161],{"type":178,"value":451},{"type":172,"tag":208,"props":10163,"children":10164},{"style":454},[10165],{"type":178,"value":1161},{"type":172,"tag":208,"props":10167,"children":10168},{"style":442},[10169],{"type":178,"value":10170},"(a) ",{"type":172,"tag":208,"props":10172,"children":10173},{"style":495},[10174],{"type":178,"value":7263},{"type":172,"tag":180,"props":10176,"children":10178},{"id":10177},"动态绑定",[10179],{"type":178,"value":10177},{"type":172,"tag":186,"props":10181,"children":10182},{},[10183],{"type":178,"value":10184},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":172,"tag":197,"props":10186,"children":10188},{"className":430,"code":10187,"language":432,"meta":166,"style":166},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10189],{"type":172,"tag":204,"props":10190,"children":10191},{"__ignoreMap":166},[10192,10212,10232,10260,10268,10297,10305,10334,10342,10388,10396,10437,10444],{"type":172,"tag":208,"props":10193,"children":10194},{"class":210,"line":211},[10195,10199,10204,10208],{"type":172,"tag":208,"props":10196,"children":10197},{"style":766},[10198],{"type":178,"value":1092},{"type":172,"tag":208,"props":10200,"children":10201},{"style":454},[10202],{"type":178,"value":10203}," indirect",{"type":172,"tag":208,"props":10205,"children":10206},{"style":448},[10207],{"type":178,"value":815},{"type":172,"tag":208,"props":10209,"children":10210},{"style":448},[10211],{"type":178,"value":1107},{"type":172,"tag":208,"props":10213,"children":10214},{"class":210,"line":501},[10215,10219,10223,10227],{"type":172,"tag":208,"props":10216,"children":10217},{"style":766},[10218],{"type":178,"value":3544},{"type":172,"tag":208,"props":10220,"children":10221},{"style":1200},[10222],{"type":178,"value":7589},{"type":172,"tag":208,"props":10224,"children":10225},{"style":238},[10226],{"type":178,"value":1130},{"type":172,"tag":208,"props":10228,"children":10229},{"style":442},[10230],{"type":178,"value":10231}," eval\n",{"type":172,"tag":208,"props":10233,"children":10234},{"class":210,"line":1146},[10235,10239,10244,10248,10252,10256],{"type":172,"tag":208,"props":10236,"children":10237},{"style":766},[10238],{"type":178,"value":3544},{"type":172,"tag":208,"props":10240,"children":10241},{"style":7586},[10242],{"type":178,"value":10243}," getEval",{"type":172,"tag":208,"props":10245,"children":10246},{"style":238},[10247],{"type":178,"value":1130},{"type":172,"tag":208,"props":10249,"children":10250},{"style":448},[10251],{"type":178,"value":1102},{"type":172,"tag":208,"props":10253,"children":10254},{"style":766},[10255],{"type":178,"value":5493},{"type":172,"tag":208,"props":10257,"children":10258},{"style":442},[10259],{"type":178,"value":10231},{"type":172,"tag":208,"props":10261,"children":10262},{"class":210,"line":1187},[10263],{"type":172,"tag":208,"props":10264,"children":10265},{"style":495},[10266],{"type":178,"value":10267},"  // 单值表达式\n",{"type":172,"tag":208,"props":10269,"children":10270},{"class":210,"line":1196},[10271,10276,10280,10284,10289,10293],{"type":172,"tag":208,"props":10272,"children":10273},{"style":454},[10274],{"type":178,"value":10275},"  exec",{"type":172,"tag":208,"props":10277,"children":10278},{"style":1164},[10279],{"type":178,"value":462},{"type":172,"tag":208,"props":10281,"children":10282},{"style":221},[10283],{"type":178,"value":235},{"type":172,"tag":208,"props":10285,"children":10286},{"style":227},[10287],{"type":178,"value":10288},"console.log(this === globalThis)",{"type":172,"tag":208,"props":10290,"children":10291},{"style":221},[10292],{"type":178,"value":235},{"type":172,"tag":208,"props":10294,"children":10295},{"style":1164},[10296],{"type":178,"value":1184},{"type":172,"tag":208,"props":10298,"children":10299},{"class":210,"line":1231},[10300],{"type":172,"tag":208,"props":10301,"children":10302},{"style":495},[10303],{"type":178,"value":10304},"  // 函数返回\n",{"type":172,"tag":208,"props":10306,"children":10307},{"class":210,"line":1268},[10308,10313,10318,10322,10326,10330],{"type":172,"tag":208,"props":10309,"children":10310},{"style":454},[10311],{"type":178,"value":10312},"  getEval",{"type":172,"tag":208,"props":10314,"children":10315},{"style":1164},[10316],{"type":178,"value":10317},"()(",{"type":172,"tag":208,"props":10319,"children":10320},{"style":221},[10321],{"type":178,"value":235},{"type":172,"tag":208,"props":10323,"children":10324},{"style":227},[10325],{"type":178,"value":10288},{"type":172,"tag":208,"props":10327,"children":10328},{"style":221},[10329],{"type":178,"value":235},{"type":172,"tag":208,"props":10331,"children":10332},{"style":1164},[10333],{"type":178,"value":1184},{"type":172,"tag":208,"props":10335,"children":10336},{"class":210,"line":1276},[10337],{"type":172,"tag":208,"props":10338,"children":10339},{"style":495},[10340],{"type":178,"value":10341},"  // 携带逗号运算符的分组运算符\n",{"type":172,"tag":208,"props":10343,"children":10344},{"class":210,"line":1303},[10345,10350,10354,10358,10362,10367,10372,10376,10380,10384],{"type":172,"tag":208,"props":10346,"children":10347},{"style":448},[10348],{"type":178,"value":10349},"  ;",{"type":172,"tag":208,"props":10351,"children":10352},{"style":1164},[10353],{"type":178,"value":462},{"type":172,"tag":208,"props":10355,"children":10356},{"style":470},[10357],{"type":178,"value":473},{"type":172,"tag":208,"props":10359,"children":10360},{"style":448},[10361],{"type":178,"value":478},{"type":172,"tag":208,"props":10363,"children":10364},{"style":442},[10365],{"type":178,"value":10366}," eval",{"type":172,"tag":208,"props":10368,"children":10369},{"style":1164},[10370],{"type":178,"value":10371},")(",{"type":172,"tag":208,"props":10373,"children":10374},{"style":221},[10375],{"type":178,"value":235},{"type":172,"tag":208,"props":10377,"children":10378},{"style":227},[10379],{"type":178,"value":10288},{"type":172,"tag":208,"props":10381,"children":10382},{"style":221},[10383],{"type":178,"value":235},{"type":172,"tag":208,"props":10385,"children":10386},{"style":1164},[10387],{"type":178,"value":1184},{"type":172,"tag":208,"props":10389,"children":10390},{"class":210,"line":1879},[10391],{"type":172,"tag":208,"props":10392,"children":10393},{"style":495},[10394],{"type":178,"value":10395},"  // eval.call 等方法\n",{"type":172,"tag":208,"props":10397,"children":10398},{"class":210,"line":1939},[10399,10404,10408,10412,10417,10421,10425,10429,10433],{"type":172,"tag":208,"props":10400,"children":10401},{"style":442},[10402],{"type":178,"value":10403},"  eval",{"type":172,"tag":208,"props":10405,"children":10406},{"style":448},[10407],{"type":178,"value":451},{"type":172,"tag":208,"props":10409,"children":10410},{"style":454},[10411],{"type":178,"value":6654},{"type":172,"tag":208,"props":10413,"children":10414},{"style":1164},[10415],{"type":178,"value":10416},"(()",{"type":172,"tag":208,"props":10418,"children":10419},{"style":448},[10420],{"type":178,"value":478},{"type":172,"tag":208,"props":10422,"children":10423},{"style":221},[10424],{"type":178,"value":224},{"type":172,"tag":208,"props":10426,"children":10427},{"style":227},[10428],{"type":178,"value":10288},{"type":172,"tag":208,"props":10430,"children":10431},{"style":221},[10432],{"type":178,"value":235},{"type":172,"tag":208,"props":10434,"children":10435},{"style":1164},[10436],{"type":178,"value":1184},{"type":172,"tag":208,"props":10438,"children":10439},{"class":210,"line":2000},[10440],{"type":172,"tag":208,"props":10441,"children":10442},{"style":448},[10443],{"type":178,"value":1193},{"type":172,"tag":208,"props":10445,"children":10446},{"class":210,"line":2041},[10447,10452,10456,10460,10464,10469],{"type":172,"tag":208,"props":10448,"children":10449},{"style":442},[10450],{"type":178,"value":10451},"indirect",{"type":172,"tag":208,"props":10453,"children":10454},{"style":448},[10455],{"type":178,"value":451},{"type":172,"tag":208,"props":10457,"children":10458},{"style":454},[10459],{"type":178,"value":7484},{"type":172,"tag":208,"props":10461,"children":10462},{"style":442},[10463],{"type":178,"value":462},{"type":172,"tag":208,"props":10465,"children":10466},{"style":448},[10467],{"type":178,"value":10468},"{}",{"type":172,"tag":208,"props":10470,"children":10471},{"style":442},[10472],{"type":178,"value":10473},")()\n",{"type":172,"tag":186,"props":10475,"children":10476},{},[10477],{"type":178,"value":10478},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":172,"tag":186,"props":10480,"children":10481},{},[10482],{"type":178,"value":10483},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":172,"tag":197,"props":10485,"children":10487},{"className":430,"code":10486,"language":432,"meta":166,"style":166},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10488],{"type":172,"tag":204,"props":10489,"children":10490},{"__ignoreMap":166},[10491,10506,10542,10564,10620],{"type":172,"tag":208,"props":10492,"children":10493},{"class":210,"line":211},[10494,10498,10502],{"type":172,"tag":208,"props":10495,"children":10496},{"style":442},[10497],{"type":178,"value":6952},{"type":172,"tag":208,"props":10499,"children":10500},{"style":238},[10501],{"type":178,"value":1641},{"type":172,"tag":208,"props":10503,"children":10504},{"style":470},[10505],{"type":178,"value":6120},{"type":172,"tag":208,"props":10507,"children":10508},{"class":210,"line":501},[10509,10513,10517,10521,10525,10529,10533,10538],{"type":172,"tag":208,"props":10510,"children":10511},{"style":766},[10512],{"type":178,"value":5557},{"type":172,"tag":208,"props":10514,"children":10515},{"style":1200},[10516],{"type":178,"value":2407},{"type":172,"tag":208,"props":10518,"children":10519},{"style":238},[10520],{"type":178,"value":1130},{"type":172,"tag":208,"props":10522,"children":10523},{"style":448},[10524],{"type":178,"value":1478},{"type":172,"tag":208,"props":10526,"children":10527},{"style":1164},[10528],{"type":178,"value":6242},{"type":172,"tag":208,"props":10530,"children":10531},{"style":448},[10532],{"type":178,"value":1626},{"type":172,"tag":208,"props":10534,"children":10535},{"style":470},[10536],{"type":178,"value":10537}," 200",{"type":172,"tag":208,"props":10539,"children":10540},{"style":448},[10541],{"type":178,"value":2937},{"type":172,"tag":208,"props":10543,"children":10544},{"class":210,"line":1146},[10545,10549,10554,10559],{"type":172,"tag":208,"props":10546,"children":10547},{"style":1470},[10548],{"type":178,"value":8532},{"type":172,"tag":208,"props":10550,"children":10551},{"style":442},[10552],{"type":178,"value":10553}," (obj) ",{"type":172,"tag":208,"props":10555,"children":10556},{"style":448},[10557],{"type":178,"value":10558},"{",{"type":172,"tag":208,"props":10560,"children":10561},{"style":1164},[10562],{"type":178,"value":10563}," \n",{"type":172,"tag":208,"props":10565,"children":10566},{"class":210,"line":1187},[10567,10571,10575,10579,10583,10587,10591,10595,10599,10603,10607,10611,10615],{"type":172,"tag":208,"props":10568,"children":10569},{"style":454},[10570],{"type":178,"value":10403},{"type":172,"tag":208,"props":10572,"children":10573},{"style":1164},[10574],{"type":178,"value":462},{"type":172,"tag":208,"props":10576,"children":10577},{"style":442},[10578],{"type":178,"value":4786},{"type":172,"tag":208,"props":10580,"children":10581},{"style":448},[10582],{"type":178,"value":451},{"type":172,"tag":208,"props":10584,"children":10585},{"style":454},[10586],{"type":178,"value":1161},{"type":172,"tag":208,"props":10588,"children":10589},{"style":1164},[10590],{"type":178,"value":462},{"type":172,"tag":208,"props":10592,"children":10593},{"style":442},[10594],{"type":178,"value":2437},{"type":172,"tag":208,"props":10596,"children":10597},{"style":448},[10598],{"type":178,"value":478},{"type":172,"tag":208,"props":10600,"children":10601},{"style":1113},[10602],{"type":178,"value":3558},{"type":172,"tag":208,"props":10604,"children":10605},{"style":448},[10606],{"type":178,"value":451},{"type":172,"tag":208,"props":10608,"children":10609},{"style":442},[10610],{"type":178,"value":2437},{"type":172,"tag":208,"props":10612,"children":10613},{"style":1164},[10614],{"type":178,"value":9041},{"type":172,"tag":208,"props":10616,"children":10617},{"style":495},[10618],{"type":178,"value":10619},"// 200 100\n",{"type":172,"tag":208,"props":10621,"children":10622},{"class":210,"line":1196},[10623],{"type":172,"tag":208,"props":10624,"children":10625},{"style":448},[10626],{"type":178,"value":1193},{"type":172,"tag":186,"props":10628,"children":10629},{},[10630],{"type":178,"value":10631},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":172,"tag":180,"props":10633,"children":10635},{"id":10634},"动态方法调用",[10636],{"type":178,"value":10634},{"type":172,"tag":186,"props":10638,"children":10639},{},[10640],{"type":178,"value":10641},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":172,"tag":186,"props":10643,"children":10644},{},[10645],{"type":178,"value":10646},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":172,"tag":186,"props":10648,"children":10649},{},[10650],{"type":178,"value":10651},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":172,"tag":186,"props":10653,"children":10654},{},[10655],{"type":178,"value":10656},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":172,"tag":197,"props":10658,"children":10660},{"className":430,"code":10659,"language":432,"meta":166,"style":166},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10661],{"type":172,"tag":204,"props":10662,"children":10663},{"__ignoreMap":166},[10664,10684,10720,10769],{"type":172,"tag":208,"props":10665,"children":10666},{"class":210,"line":211},[10667,10671,10676,10680],{"type":172,"tag":208,"props":10668,"children":10669},{"style":766},[10670],{"type":178,"value":1092},{"type":172,"tag":208,"props":10672,"children":10673},{"style":454},[10674],{"type":178,"value":10675}," Test",{"type":172,"tag":208,"props":10677,"children":10678},{"style":448},[10679],{"type":178,"value":815},{"type":172,"tag":208,"props":10681,"children":10682},{"style":448},[10683],{"type":178,"value":2898},{"type":172,"tag":208,"props":10685,"children":10686},{"class":210,"line":501},[10687,10692,10696,10700,10704,10708,10712,10716],{"type":172,"tag":208,"props":10688,"children":10689},{"style":442},[10690],{"type":178,"value":10691},"TestAnother ",{"type":172,"tag":208,"props":10693,"children":10694},{"style":238},[10695],{"type":178,"value":1641},{"type":172,"tag":208,"props":10697,"children":10698},{"style":442},[10699],{"type":178,"value":10675},{"type":172,"tag":208,"props":10701,"children":10702},{"style":448},[10703],{"type":178,"value":451},{"type":172,"tag":208,"props":10705,"children":10706},{"style":454},[10707],{"type":178,"value":7484},{"type":172,"tag":208,"props":10709,"children":10710},{"style":442},[10711],{"type":178,"value":462},{"type":172,"tag":208,"props":10713,"children":10714},{"style":448},[10715],{"type":178,"value":10468},{"type":172,"tag":208,"props":10717,"children":10718},{"style":442},[10719],{"type":178,"value":1184},{"type":172,"tag":208,"props":10721,"children":10722},{"class":210,"line":1146},[10723,10727,10731,10735,10739,10743,10747,10751,10756,10761,10765],{"type":172,"tag":208,"props":10724,"children":10725},{"style":442},[10726],{"type":178,"value":4786},{"type":172,"tag":208,"props":10728,"children":10729},{"style":448},[10730],{"type":178,"value":451},{"type":172,"tag":208,"props":10732,"children":10733},{"style":454},[10734],{"type":178,"value":1161},{"type":172,"tag":208,"props":10736,"children":10737},{"style":442},[10738],{"type":178,"value":462},{"type":172,"tag":208,"props":10740,"children":10741},{"style":238},[10742],{"type":178,"value":1282},{"type":172,"tag":208,"props":10744,"children":10745},{"style":454},[10746],{"type":178,"value":10675},{"type":172,"tag":208,"props":10748,"children":10749},{"style":442},[10750],{"type":178,"value":597},{"type":172,"tag":208,"props":10752,"children":10753},{"style":238},[10754],{"type":178,"value":10755},"instanceof",{"type":172,"tag":208,"props":10757,"children":10758},{"style":3314},[10759],{"type":178,"value":10760}," TestAnother",{"type":172,"tag":208,"props":10762,"children":10763},{"style":442},[10764],{"type":178,"value":492},{"type":172,"tag":208,"props":10766,"children":10767},{"style":495},[10768],{"type":178,"value":542},{"type":172,"tag":208,"props":10770,"children":10771},{"class":210,"line":1187},[10772,10776,10780,10784,10788,10793,10797,10801,10805],{"type":172,"tag":208,"props":10773,"children":10774},{"style":442},[10775],{"type":178,"value":4786},{"type":172,"tag":208,"props":10777,"children":10778},{"style":448},[10779],{"type":178,"value":451},{"type":172,"tag":208,"props":10781,"children":10782},{"style":454},[10783],{"type":178,"value":1161},{"type":172,"tag":208,"props":10785,"children":10786},{"style":442},[10787],{"type":178,"value":462},{"type":172,"tag":208,"props":10789,"children":10790},{"style":2589},[10791],{"type":178,"value":10792},"test2",{"type":172,"tag":208,"props":10794,"children":10795},{"style":448},[10796],{"type":178,"value":451},{"type":172,"tag":208,"props":10798,"children":10799},{"style":1200},[10800],{"type":178,"value":2600},{"type":172,"tag":208,"props":10802,"children":10803},{"style":442},[10804],{"type":178,"value":492},{"type":172,"tag":208,"props":10806,"children":10807},{"style":495},[10808],{"type":178,"value":732},{"type":172,"tag":186,"props":10810,"children":10811},{},[10812],{"type":178,"value":10813},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":172,"tag":180,"props":10815,"children":10817},{"id":10816},"通用执行环境的实现",[10818],{"type":178,"value":10816},{"type":172,"tag":186,"props":10820,"children":10821},{},[10822],{"type":178,"value":10823},"跳过。",{"type":172,"tag":173,"props":10825,"children":10827},{"id":10826},"勘误",[10828],{"type":178,"value":10829},"勘误？",{"type":172,"tag":286,"props":10831,"children":10832},{},[10833,10838,10843,10848,10853,10858,10863,10868,10873,10878,10883,10888,10893],{"type":172,"tag":290,"props":10834,"children":10835},{},[10836],{"type":178,"value":10837},"P71，属性读取器",{"type":172,"tag":290,"props":10839,"children":10840},{},[10841],{"type":178,"value":10842},"P77，逻辑与、按位非",{"type":172,"tag":290,"props":10844,"children":10845},{},[10846],{"type":178,"value":10847},"P107，catch 子句隐式声明",{"type":172,"tag":290,"props":10849,"children":10850},{},[10851],{"type":178,"value":10852},"P134，第二段代码，computedName 括号",{"type":172,"tag":290,"props":10854,"children":10855},{},[10856],{"type":178,"value":10857},"P148，ES8",{"type":172,"tag":290,"props":10859,"children":10860},{},[10861],{"type":178,"value":10862},"P179，MyObject() 有没有必要用括号",{"type":172,"tag":290,"props":10864,"children":10865},{},[10866],{"type":178,"value":10867},"P206，语言仅提供了...能力而已",{"type":172,"tag":290,"props":10869,"children":10870},{},[10871],{"type":178,"value":10872},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":172,"tag":290,"props":10874,"children":10875},{},[10876],{"type":178,"value":10877},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":172,"tag":290,"props":10879,"children":10880},{},[10881],{"type":178,"value":10882},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":172,"tag":290,"props":10884,"children":10885},{},[10886],{"type":178,"value":10887},"P536，表格最后一行 String",{"type":172,"tag":290,"props":10889,"children":10890},{},[10891],{"type":178,"value":10892},"P535，存取描述符",{"type":172,"tag":290,"props":10894,"children":10895},{},[10896],{"type":178,"value":10897},"P564，运算符",{"type":172,"tag":10899,"props":10900,"children":10903},"section",{"className":10901,"dataFootnotes":166},[10902],"footnotes",[10904,10911],{"type":172,"tag":173,"props":10905,"children":10908},{"className":10906,"id":273},[10907],"sr-only",[10909],{"type":178,"value":10910},"Footnotes",{"type":172,"tag":10912,"props":10913,"children":10914},"ol",{},[10915,10930,10943,10956,10969,10982],{"type":172,"tag":290,"props":10916,"children":10918},{"id":10917},"user-content-fn-first-class",[10919,10921],{"type":178,"value":10920},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":172,"tag":269,"props":10922,"children":10927},{"href":10923,"ariaLabel":10924,"className":10925,"dataFootnoteBackref":166},"#user-content-fnref-first-class","Back to reference 1",[10926],"data-footnote-backref",[10928],{"type":178,"value":10929},"↩",{"type":172,"tag":290,"props":10931,"children":10933},{"id":10932},"user-content-fn-oo",[10934,10936],{"type":178,"value":10935},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":172,"tag":269,"props":10937,"children":10941},{"href":10938,"ariaLabel":10939,"className":10940,"dataFootnoteBackref":166},"#user-content-fnref-oo","Back to reference 2",[10926],[10942],{"type":178,"value":10929},{"type":172,"tag":290,"props":10944,"children":10946},{"id":10945},"user-content-fn-string",[10947,10949],{"type":178,"value":10948},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":172,"tag":269,"props":10950,"children":10954},{"href":10951,"ariaLabel":10952,"className":10953,"dataFootnoteBackref":166},"#user-content-fnref-string","Back to reference 3",[10926],[10955],{"type":178,"value":10929},{"type":172,"tag":290,"props":10957,"children":10959},{"id":10958},"user-content-fn-namespace",[10960,10962],{"type":178,"value":10961},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":172,"tag":269,"props":10963,"children":10967},{"href":10964,"ariaLabel":10965,"className":10966,"dataFootnoteBackref":166},"#user-content-fnref-namespace","Back to reference 4",[10926],[10968],{"type":178,"value":10929},{"type":172,"tag":290,"props":10970,"children":10972},{"id":10971},"user-content-fn-iterationenv",[10973,10975],{"type":178,"value":10974},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":172,"tag":269,"props":10976,"children":10980},{"href":10977,"ariaLabel":10978,"className":10979,"dataFootnoteBackref":166},"#user-content-fnref-iterationenv","Back to reference 5",[10926],[10981],{"type":178,"value":10929},{"type":172,"tag":290,"props":10983,"children":10985},{"id":10984},"user-content-fn-reference",[10986,10988],{"type":178,"value":10987},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":172,"tag":269,"props":10989,"children":10993},{"href":10990,"ariaLabel":10991,"className":10992,"dataFootnoteBackref":166},"#user-content-fnref-reference","Back to reference 6",[10926],[10994],{"type":178,"value":10929},{"type":172,"tag":10996,"props":10997,"children":10998},"style",{},[10999],{"type":178,"value":11000},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":501,"depth":501,"links":11002},[11003,11012,11021,11031,11037,11047,11048],{"id":175,"depth":501,"text":175,"children":11004},[11005,11006,11007,11008,11009,11010,11011],{"id":182,"depth":1146,"text":182},{"id":256,"depth":1146,"text":256},{"id":382,"depth":1146,"text":382},{"id":1332,"depth":1146,"text":1332},{"id":2117,"depth":1146,"text":2117},{"id":2244,"depth":1146,"text":2244},{"id":2335,"depth":1146,"text":2335},{"id":2360,"depth":501,"text":2360,"children":11013},[11014,11015,11016,11017,11018,11019,11020],{"id":2365,"depth":1146,"text":182},{"id":2836,"depth":1146,"text":2836},{"id":3281,"depth":1146,"text":3281},{"id":4042,"depth":1146,"text":4042},{"id":4818,"depth":1146,"text":4818},{"id":4989,"depth":1146,"text":4989},{"id":5804,"depth":1146,"text":5804},{"id":5814,"depth":501,"text":5814,"children":11022},[11023,11024,11025,11026,11027,11028,11029,11030],{"id":5819,"depth":1146,"text":5819},{"id":5872,"depth":1146,"text":5872},{"id":6049,"depth":1146,"text":6049},{"id":6327,"depth":1146,"text":6327},{"id":6411,"depth":1146,"text":6411},{"id":6585,"depth":1146,"text":6585},{"id":6667,"depth":1146,"text":6667},{"id":6705,"depth":1146,"text":6705},{"id":6715,"depth":501,"text":6715,"children":11032},[11033,11034,11035,11036],{"id":6720,"depth":1146,"text":5819},{"id":6735,"depth":1146,"text":6738},{"id":7877,"depth":1146,"text":7877},{"id":8324,"depth":1146,"text":8324},{"id":8694,"depth":501,"text":8694,"children":11038},[11039,11040,11041,11042,11043,11044,11045,11046],{"id":8699,"depth":1146,"text":5819},{"id":8714,"depth":1146,"text":8714},{"id":9199,"depth":1146,"text":9199},{"id":9302,"depth":1146,"text":9302},{"id":9502,"depth":1146,"text":9502},{"id":10177,"depth":1146,"text":10177},{"id":10634,"depth":1146,"text":10634},{"id":10816,"depth":1146,"text":10816},{"id":10826,"depth":501,"text":10829},{"id":273,"depth":501,"text":10910},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11056,11060],{"_path":11057,"title":11058,"description":11059},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11061,"title":11062,"description":166},"/_books/9787301135907","日常生活中的自我呈现",1761757129364]