[{"data":1,"prerenderedAt":11317},["ShallowReactive",2],{"navigation":3,"/_books/9787121386695":416,"/_books/9787121386695-surround":11309},[4,32,86,108,135,141,147,153,399,405,411],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🗂️ 使你的 Git Graph 变得清晰易懂","/articles/clean-git-tree",{"title":42,"_path":43},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":45,"_path":46},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":48,"_path":49},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":51,"_path":52},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":54,"_path":55},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":57,"_path":58},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":60,"_path":61},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":63,"_path":64},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":66,"_path":67},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":69,"_path":70},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":72,"_path":73},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":75,"_path":76},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":78,"_path":79},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":81,"_path":82},"🚝 四十二篇系列","/articles/fourty-two",{"title":84,"_path":85},"📝 技术博客归档","/articles/fold",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102,105],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107},"🖨️ any-to-base64","/tools/any-to-base64",{"title":109,"_path":110,"children":111},"吉他剧场 / Music","/music",[112,114,117,120,123,126,129,132],{"title":113,"_path":110},"🎸 FingerStyle！",{"title":115,"_path":116},"🌬️ 等待的风","/music/wind",{"title":118,"_path":119},"💕 约定的海洋","/music/ocean",{"title":121,"_path":122},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":124,"_path":125},"🌏 残酷天使的行动纲领","/music/eva",{"title":127,"_path":128},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":130,"_path":131},"🍷 Wu Wei","/music/wu-wei",{"title":133,"_path":134},"🌅 无题","/music/untitled",{"title":136,"_path":137,"children":138},"画点什么 / Paint","/paint",[139],{"title":140,"_path":137},"🚧 正在施工",{"title":142,"_path":143,"children":144},"读书笔记 / Notes","/books",[145],{"title":146,"_path":143},"📕 读书笔记",{"title":148,"_path":149,"children":150},"知识地图 / Maps","/maps",[151],{"title":152,"_path":149},"🏁 知识地图",{"title":154,"_path":155,"children":156},"零散的笔记 / Gists","/gists",[157,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":158,"_path":155},"🧊 Gists",{"title":160,"_path":161},"网站的可访问性","/gists/accessibility",{"title":163,"_path":164},"Bit","/gists/bit",{"title":166,"_path":167},"图片模糊","/gists/blur",{"title":169,"_path":170},"渲染相关笔记","/gists/c4d",{"title":172,"_path":173},"CDN 问题记录","/gists/cdn",{"title":175,"_path":176},"消毒剂","/gists/cleaner",{"title":178,"_path":179},"Windows Command","/gists/cmd",{"title":181,"_path":182},"Command","/gists/command",{"title":184,"_path":185},"复杂科学","/gists/complexity-science",{"title":187,"_path":188},"GitHub Copilot","/gists/copilot",{"title":190,"_path":191},"宇宙","/gists/cosmos",{"title":193,"_path":194},"C++","/gists/cpp",{"title":196,"_path":197},"Data Structure","/gists/data-structure",{"title":199,"_path":200},"DEPRESSION","/gists/depression",{"title":202,"_path":203},"设计模式","/gists/design-patterns",{"title":205,"_path":206},"Developer Experience","/gists/developer-experience",{"title":208,"_path":209},"Device Metrics","/gists/device-metrix",{"title":211,"_path":212},"数字化转型","/gists/digital-transformation",{"title":214,"_path":215},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":217,"_path":218},"正则表达式","/gists/eegex",{"title":220,"_path":221},"Emoji","/gists/emoji",{"title":223,"_path":224},"工程","/gists/engineering",{"title":226,"_path":227},"熵","/gists/entropy",{"title":229,"_path":230},"Environment","/gists/environment",{"title":232,"_path":233},"Erlang","/gists/erlang",{"title":235,"_path":236},"逃离塔克夫","/gists/escape-from-tarkov",{"title":238,"_path":239},"ESNext (ES6-ES11)","/gists/esnext",{"title":241,"_path":242},"Eval！","/gists/eval",{"title":244,"_path":245},"Flutter","/gists/flutter",{"title":247,"_path":248},"字体","/gists/font",{"title":250,"_path":251},"JS 函数式编程","/gists/functional",{"title":253,"_path":254},"游戏化","/gists/gamification",{"title":256,"_path":257},"Google C++ Standard","/gists/google-cpp-standard",{"title":259,"_path":260},"双向链接完全体","/gists/graph",{"title":262,"_path":263},"Hardwares","/gists/hardwares",{"title":265,"_path":266},"哈希冲突","/gists/hash-collision",{"title":268,"_path":269},"信息设计","/gists/information-design",{"title":271,"_path":272},"InstantPage","/gists/instant.page",{"title":274,"_path":275},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":277,"_path":278},"KVStore","/gists/key-value-db",{"title":280,"_path":281},"Kubernetes","/gists/kubernetes",{"title":283,"_path":284},"Makefile","/gists/makefile",{"title":286,"_path":287},"Markdown Inline Style","/gists/markdown-nice",{"title":289,"_path":290},"小程序","/gists/miniapp",{"title":292,"_path":293},"减小页面快照体积","/gists/minify-html",{"title":295,"_path":296},"mklink","/gists/mklink",{"title":298,"_path":299},"Mock","/gists/mock",{"title":301,"_path":302},"多人协作系统","/gists/multiplayer",{"title":304,"_path":305},"多端应用","/gists/multy-end-app",{"title":307,"_path":308},"神经科学","/gists/neuroscience",{"title":310,"_path":311},"OO","/gists/oo",{"title":313,"_path":314},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":316,"_path":317},"PInvoke","/gists/pinvoke",{"title":319,"_path":320},"像素","/gists/pixel",{"title":322,"_path":323},"PowerShell","/gists/powershell",{"title":325,"_path":326},"量子","/gists/quantum",{"title":328,"_path":329},"保持好奇心","/gists/questions",{"title":331,"_path":332},"React Native","/gists/react-native",{"title":334,"_path":335},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":337,"_path":338},"SEO","/gists/seo",{"title":340,"_path":341},"Shader","/gists/shader",{"title":343,"_path":344},"Shape Up","/gists/shape-up",{"title":346,"_path":347},"睡觉","/gists/sleep",{"title":349,"_path":350},"记录奇怪的问题","/gists/solved",{"title":352,"_path":353},"States","/gists/states",{"title":355,"_path":356},"Storage","/gists/storage",{"title":358,"_path":359},"音视频流处理","/gists/stream-cli",{"title":361,"_path":362},"Symbol","/gists/symbol",{"title":364,"_path":365},"系统论","/gists/systems-theory",{"title":367,"_path":368},"Taro","/gists/taro",{"title":370,"_path":371},"任务切片","/gists/task-slice",{"title":373,"_path":374},"技术偏好","/gists/tech-dudge",{"title":376,"_path":377},"Untitled","/gists/untitled",{"title":379,"_path":380},"可变字体","/gists/variable-font",{"title":382,"_path":383},"视觉错觉","/gists/visual-illusion",{"title":385,"_path":386},"SS(SSR)","/gists/vpn",{"title":388,"_path":389},"VS Code 插件开发","/gists/vscode-plugin",{"title":391,"_path":392},"Web Components","/gists/web-components",{"title":394,"_path":395},"Windows","/gists/windows",{"title":397,"_path":398},"查缺补漏","/gists/wrong",{"title":400,"_path":401,"children":402},"代码笔记 / Gists","/source-code",[403],{"title":404,"_path":401},"🚄 代码笔记",{"title":406,"_path":407,"children":408},"我 / Abount","/hire",[409],{"title":410,"_path":407},"📬 技术简历",{"title":412,"_path":413,"children":414},"todo","/todo",[415],{"title":412,"_path":413},{"_path":417,"_dir":418,"_draft":419,"_partial":420,"_locale":421,"title":422,"description":421,"body":423,"_type":11303,"_id":11304,"_source":11305,"_file":11306,"_stem":11307,"_extension":11308},"/_books/9787121386695","_books",false,true,"","JavaScript 语言精粹与编程实践",{"type":424,"children":425,"toc":11255},"root",[426,434,440,446,451,509,514,535,540,579,584,597,602,607,612,617,635,640,645,650,663,668,673,678,683,798,803,808,868,873,914,919,952,957,962,987,992,1029,1034,1327,1332,1584,1589,1594,1599,1617,1622,1707,1712,1843,1848,1853,2359,2364,2369,2374,2379,2481,2486,2491,2496,2501,2506,2511,2516,2569,2574,2587,2592,2597,2602,2607,2612,2617,2622,2627,2632,2637,2642,2818,2823,2915,2920,2925,2930,2935,3052,3070,3075,3088,3093,3098,3103,3116,3121,3126,3262,3277,3282,3362,3367,3414,3528,3533,3538,3543,3728,3733,3738,3743,3906,3911,3939,3944,3957,3962,4214,4219,4224,4229,4289,4294,4299,4304,4309,4314,4412,4417,4422,4440,4445,4458,4463,4468,4481,4486,4491,4589,4594,4599,4604,4796,4801,5070,5075,5080,5098,5103,5218,5223,5241,5246,5251,5256,5261,5452,5457,5470,5475,6056,6061,6066,6071,6076,6081,6086,6091,6096,6114,6119,6124,6129,6134,6254,6259,6264,6269,6281,6286,6291,6296,6301,6306,6324,6441,6446,6579,6584,6589,6594,6612,6617,6622,6663,6668,6673,6678,6745,6750,6755,6799,6804,6809,6814,6832,6837,6842,6847,6914,6919,6924,6929,6947,6952,6957,6962,6967,6972,6977,6982,6987,6993,6998,7016,7021,7165,7183,7404,7409,7414,7545,7550,7568,7573,7621,7626,7748,7753,7758,8129,8134,8139,8144,8149,8154,8576,8581,8586,8591,8609,8614,8706,8711,8716,8903,8908,8913,8918,8923,8941,8946,8951,8956,8961,8966,8971,8976,9145,9150,9155,9301,9306,9446,9451,9456,9461,9466,9471,9503,9508,9554,9559,9564,9744,9749,9754,9759,9764,9769,9774,10270,10275,10280,10310,10315,10320,10325,10429,10434,10439,10728,10733,10738,10881,10886,10891,10896,10901,10906,10911,11063,11068,11073,11078,11084,11152,11249],{"type":427,"tag":428,"props":429,"children":431},"element","h2",{"id":430},"语法",[432],{"type":433,"value":430},"text",{"type":427,"tag":435,"props":436,"children":438},"h3",{"id":437},"语法综述",[439],{"type":433,"value":437},{"type":427,"tag":441,"props":442,"children":443},"p",{},[444],{"type":433,"value":445},"语言中的标识符大致分为两类，用于绑定语义逻辑的语法关键字，和用于绑定数据及其存储位置的变量。两者分别限定了逻辑的作用域以及变量的生存周期，所以所谓“声明”，即约定了数据的生存周期以及逻辑的作用域；编程也就被解释成了“说明数据和逻辑”的过程。",{"type":427,"tag":441,"props":447,"children":448},{},[449],{"type":433,"value":450},"可以使用 --check 指令检测语法错误：",{"type":427,"tag":452,"props":453,"children":457},"pre",{"className":454,"code":455,"language":456,"meta":421,"style":421},"language-bash shiki shiki-themes material-theme-lighter github-light github-dark monokai","echo '\"hello world\"' | node -c\n","bash",[458],{"type":427,"tag":459,"props":460,"children":461},"code",{"__ignoreMap":421},[462],{"type":427,"tag":463,"props":464,"children":467},"span",{"class":465,"line":466},"line",1,[468,474,480,486,491,497,503],{"type":427,"tag":463,"props":469,"children":471},{"style":470},"--shiki-light:#6182B8;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#66D9EF",[472],{"type":433,"value":473},"echo",{"type":427,"tag":463,"props":475,"children":477},{"style":476},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[478],{"type":433,"value":479}," '",{"type":427,"tag":463,"props":481,"children":483},{"style":482},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[484],{"type":433,"value":485},"\"hello world\"",{"type":427,"tag":463,"props":487,"children":488},{"style":476},[489],{"type":433,"value":490},"'",{"type":427,"tag":463,"props":492,"children":494},{"style":493},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[495],{"type":433,"value":496}," |",{"type":427,"tag":463,"props":498,"children":500},{"style":499},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[501],{"type":433,"value":502}," node",{"type":427,"tag":463,"props":504,"children":506},{"style":505},"--shiki-light:#91B859;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[507],{"type":433,"value":508}," -c\n",{"type":427,"tag":435,"props":510,"children":512},{"id":511},"声明语法",[513],{"type":433,"value":511},{"type":427,"tag":441,"props":515,"children":516},{},[517,519,533],{"type":433,"value":518},"JS “识别的” 7 种数据类型叫做基本数据类型（第一类类型",{"type":427,"tag":520,"props":521,"children":522},"sup",{},[523],{"type":427,"tag":524,"props":525,"children":530},"a",{"href":526,"ariaDescribedBy":527,"dataFootnoteRef":421,"id":529},"#user-content-fn-first-class",[528],"footnote-label","user-content-fnref-first-class",[531],{"type":433,"value":532},"1",{"type":433,"value":534},"），识别是以 typeof 运算符为准的。早期的 JS 语言中，正则是可执行的（实现了 [[call]] 内部方法），所以 typeof 会返回 function，这一 bug 后来被修正。",{"type":427,"tag":441,"props":536,"children":537},{},[538],{"type":433,"value":539},"撇开 OO 不论，JS 中有以下几种类型系统可以讨论：",{"type":427,"tag":541,"props":542,"children":543},"ul",{},[544,563],{"type":427,"tag":545,"props":546,"children":547},"li",{},[548,550,561],{"type":433,"value":549},"基本数据类型：undefined、string、number、object",{"type":427,"tag":520,"props":551,"children":552},{},[553],{"type":427,"tag":524,"props":554,"children":558},{"href":555,"ariaDescribedBy":556,"dataFootnoteRef":421,"id":557},"#user-content-fn-oo",[528],"user-content-fnref-oo",[559],{"type":433,"value":560},"2",{"type":433,"value":562},"、function、boolean、symbol、bigint",{"type":427,"tag":545,"props":564,"children":565},{},[566,568],{"type":433,"value":567},"值类型和引用类型",{"type":427,"tag":520,"props":569,"children":570},{},[571],{"type":427,"tag":524,"props":572,"children":576},{"href":573,"ariaDescribedBy":574,"dataFootnoteRef":421,"id":575},"#user-content-fn-string",[528],"user-content-fnref-string",[577],{"type":433,"value":578},"3",{"type":427,"tag":441,"props":580,"children":581},{},[582],{"type":433,"value":583},"如果算上规范，可以再增加两种类型系统：",{"type":427,"tag":541,"props":585,"children":586},{},[587,592],{"type":427,"tag":545,"props":588,"children":589},{},[590],{"type":433,"value":591},"ECMAScript 语言类型：Null、Undefined、String、Symbol、Number、BigInt、Object",{"type":427,"tag":545,"props":593,"children":594},{},[595],{"type":433,"value":596},"ECMAScript 规范类型：List、Record、Relation、Set、Completion Record、Reference、Property Description、Lexical Environment、Environtment Record，为叙述语言类型提供帮助",{"type":427,"tag":441,"props":598,"children":599},{},[600],{"type":433,"value":601},"变量声明一共两种形式：显式声明和隐式声明。隐式声明即赋值语句中出现了未声明的变量的情况，这种声明方式不可靠；其余的声明，包括 try...catch 子句中的异常变量都是显式声明。",{"type":427,"tag":441,"props":603,"children":604},{},[605],{"type":433,"value":606},"let 和 var 声明一个不同的地方在于 let 声明不会在全局对象上挂新的属性。",{"type":427,"tag":441,"props":608,"children":609},{},[610],{"type":433,"value":611},"需要注意的是尽管规范确定了常量声明不能再绑定，但是在 ES5 兼容环境或是 ES6 模拟环境中（如使用只读属性模拟常量），修改常量不会抛出异常。",{"type":427,"tag":441,"props":613,"children":614},{},[615],{"type":433,"value":616},"相关字符串字面量的一些冷知识：",{"type":427,"tag":541,"props":618,"children":619},{},[620,625,630],{"type":427,"tag":545,"props":621,"children":622},{},[623],{"type":433,"value":624},"大于 U+FFFF 的字符的长度在 UTF8 文件夹的长度是 2，但是过换编码，结果不同，试了下 GBK 下的结果为 1。",{"type":427,"tag":545,"props":626,"children":627},{},[628],{"type":433,"value":629},"空字符串也能作为对象的键。",{"type":427,"tag":545,"props":631,"children":632},{},[633],{"type":433,"value":634},"字符串模板本质上是一个字面量的引用，在 JS 内部表达为一个带 raw 属性的类数组对象，这点可通过 String.raw 函数间接验证。题外话，String.raw 搭配 new RegExp 非常好用哦。",{"type":427,"tag":435,"props":636,"children":638},{"id":637},"表达式运算",[639],{"type":433,"value":637},{"type":427,"tag":441,"props":641,"children":642},{},[643],{"type":433,"value":644},"运算符不仅是各类标点，还有许多单词，如 typeof、void、new、in、delete、instanceof、yield、await 这些都算。",{"type":427,"tag":441,"props":646,"children":647},{},[648],{"type":433,"value":649},"在规范中经常看到基本表达式（Primary Expression）的概念，它主要由两部分组成：",{"type":427,"tag":541,"props":651,"children":652},{},[653,658],{"type":427,"tag":545,"props":654,"children":655},{},[656],{"type":433,"value":657},"单值表达式：表达式的结果既该值，如 this、super、new.target、arguments 以及各种变量引用以及原始值、正则的字面量",{"type":427,"tag":545,"props":659,"children":660},{},[661],{"type":433,"value":662},"非原始值字面量（数组、对象、函数）以及表达式分组运算（()）",{"type":427,"tag":441,"props":664,"children":665},{},[666],{"type":433,"value":667},"可以发现，除了单值表达式外，表达式的结果应该是运算后得到的值（应该至少有一个运算符）。运算符得到的结果类型不外乎值类型、引用类型或 undefined 三种。",{"type":427,"tag":441,"props":669,"children":670},{},[671],{"type":433,"value":672},"ES5 规范了将字符串作为类数组对象，也就是说可以通过下标存取取得字符串的值，但是不能改变它。从 ES6 开始，字符串添加了 Symbol.iterator 属性，可通过展开操作符、yield* 或 for...of 语句操作。",{"type":427,"tag":441,"props":674,"children":675},{},[676],{"type":433,"value":677},"在位运算操作中，运算目标将强制为一个有符号的 32 位整数：非数值转化为数值、浮点数先向零取整，所以常见到“1.1 | 0”这种取证操作并不是位运算有什么魔法，而是在“|0”前，1.1 就被取整了，而任何数按位或 0 会得到其本身。",{"type":427,"tag":441,"props":679,"children":680},{},[681],{"type":433,"value":682},"等值检测的一个缺陷是它不会区分 +0 和 -0，而这两者在数学运算中被认为是两个不同的数；它也不能区分 NaN，所以 ES6 新增了 Object.is 方法来判断 +0、-0 以及 NaN。",{"type":427,"tag":452,"props":684,"children":688},{"className":685,"code":686,"language":687,"meta":421,"style":421},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","Object.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n","js",[689],{"type":427,"tag":459,"props":690,"children":691},{"__ignoreMap":421},[692,754],{"type":427,"tag":463,"props":693,"children":694},{"class":465,"line":466},[695,701,707,713,718,723,729,734,739,743,748],{"type":427,"tag":463,"props":696,"children":698},{"style":697},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[699],{"type":433,"value":700},"Object",{"type":427,"tag":463,"props":702,"children":704},{"style":703},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[705],{"type":433,"value":706},".",{"type":427,"tag":463,"props":708,"children":710},{"style":709},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[711],{"type":433,"value":712},"is",{"type":427,"tag":463,"props":714,"children":715},{"style":697},[716],{"type":433,"value":717},"(",{"type":427,"tag":463,"props":719,"children":720},{"style":493},[721],{"type":433,"value":722},"+",{"type":427,"tag":463,"props":724,"children":726},{"style":725},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[727],{"type":433,"value":728},"0",{"type":427,"tag":463,"props":730,"children":731},{"style":703},[732],{"type":433,"value":733},",",{"type":427,"tag":463,"props":735,"children":736},{"style":493},[737],{"type":433,"value":738}," -",{"type":427,"tag":463,"props":740,"children":741},{"style":725},[742],{"type":433,"value":728},{"type":427,"tag":463,"props":744,"children":745},{"style":697},[746],{"type":433,"value":747},") ",{"type":427,"tag":463,"props":749,"children":751},{"style":750},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[752],{"type":433,"value":753},"// false\n",{"type":427,"tag":463,"props":755,"children":757},{"class":465,"line":756},2,[758,762,766,770,774,780,784,789,793],{"type":427,"tag":463,"props":759,"children":760},{"style":697},[761],{"type":433,"value":700},{"type":427,"tag":463,"props":763,"children":764},{"style":703},[765],{"type":433,"value":706},{"type":427,"tag":463,"props":767,"children":768},{"style":709},[769],{"type":433,"value":712},{"type":427,"tag":463,"props":771,"children":772},{"style":697},[773],{"type":433,"value":717},{"type":427,"tag":463,"props":775,"children":777},{"style":776},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[778],{"type":433,"value":779},"NaN",{"type":427,"tag":463,"props":781,"children":782},{"style":703},[783],{"type":433,"value":733},{"type":427,"tag":463,"props":785,"children":786},{"style":776},[787],{"type":433,"value":788}," NaN",{"type":427,"tag":463,"props":790,"children":791},{"style":697},[792],{"type":433,"value":747},{"type":427,"tag":463,"props":794,"children":795},{"style":750},[796],{"type":433,"value":797},"// true\n",{"type":427,"tag":441,"props":799,"children":800},{},[801],{"type":433,"value":802},"在比较判定中，JS 总是倾向将操作数转换为数字进行比较，因为字符串比较性能更差。比较运算同理，当字符串和非字符串进行比较时，会尝试将字符串转换为数字。",{"type":427,"tag":441,"props":804,"children":805},{},[806],{"type":433,"value":807},"有一个特例，符号虽然能转化为布尔值，但是不在等值判定算法其中，也就不等值于 true：",{"type":427,"tag":452,"props":809,"children":811},{"className":685,"code":810,"language":687,"meta":421,"style":421},"Boolean(Symbol()) // true\nSymbol() == true // false\n",[812],{"type":427,"tag":459,"props":813,"children":814},{"__ignoreMap":421},[815,840],{"type":427,"tag":463,"props":816,"children":817},{"class":465,"line":466},[818,823,827,831,836],{"type":427,"tag":463,"props":819,"children":820},{"style":709},[821],{"type":433,"value":822},"Boolean",{"type":427,"tag":463,"props":824,"children":825},{"style":697},[826],{"type":433,"value":717},{"type":427,"tag":463,"props":828,"children":829},{"style":709},[830],{"type":433,"value":361},{"type":427,"tag":463,"props":832,"children":833},{"style":697},[834],{"type":433,"value":835},"()) ",{"type":427,"tag":463,"props":837,"children":838},{"style":750},[839],{"type":433,"value":797},{"type":427,"tag":463,"props":841,"children":842},{"class":465,"line":756},[843,847,852,857,863],{"type":427,"tag":463,"props":844,"children":845},{"style":709},[846],{"type":433,"value":361},{"type":427,"tag":463,"props":848,"children":849},{"style":697},[850],{"type":433,"value":851},"() ",{"type":427,"tag":463,"props":853,"children":854},{"style":493},[855],{"type":433,"value":856},"==",{"type":427,"tag":463,"props":858,"children":860},{"style":859},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[861],{"type":433,"value":862}," true",{"type":427,"tag":463,"props":864,"children":865},{"style":750},[866],{"type":433,"value":867}," // false\n",{"type":427,"tag":441,"props":869,"children":870},{},[871],{"type":433,"value":872},"赋值也是运算符，所以左右两侧都是操作数。按照表达式的概念，操作数可以是值也可以是引用，所以类似“1 = 1”的表达式是可以通过语法检测的，不过只是在其他阶段会抛出引用错误。",{"type":427,"tag":452,"props":874,"children":876},{"className":454,"code":875,"language":456,"meta":421,"style":421},"echo \"1 = 1\" | node -c\n",[877],{"type":427,"tag":459,"props":878,"children":879},{"__ignoreMap":421},[880],{"type":427,"tag":463,"props":881,"children":882},{"class":465,"line":466},[883,887,892,897,902,906,910],{"type":427,"tag":463,"props":884,"children":885},{"style":470},[886],{"type":433,"value":473},{"type":427,"tag":463,"props":888,"children":889},{"style":476},[890],{"type":433,"value":891}," \"",{"type":427,"tag":463,"props":893,"children":894},{"style":482},[895],{"type":433,"value":896},"1 = 1",{"type":427,"tag":463,"props":898,"children":899},{"style":476},[900],{"type":433,"value":901},"\"",{"type":427,"tag":463,"props":903,"children":904},{"style":493},[905],{"type":433,"value":496},{"type":427,"tag":463,"props":907,"children":908},{"style":499},[909],{"type":433,"value":502},{"type":427,"tag":463,"props":911,"children":912},{"style":505},[913],{"type":433,"value":508},{"type":427,"tag":441,"props":915,"children":916},{},[917],{"type":433,"value":918},"函数调用也有“隐式调用”这一概念：",{"type":427,"tag":541,"props":920,"children":921},{},[922,927,932,937,942,947],{"type":427,"tag":545,"props":923,"children":924},{},[925],{"type":433,"value":926},"使用 new 运算符",{"type":427,"tag":545,"props":928,"children":929},{},[930],{"type":433,"value":931},"模板处理函数 + 模板字符串调用",{"type":427,"tag":545,"props":933,"children":934},{},[935],{"type":433,"value":936},"函数作为属性存取器且发生了属性存取操作时",{"type":427,"tag":545,"props":938,"children":939},{},[940],{"type":433,"value":941},"函数作为符号属性（如 Symbol.hasInstance）并触发了对应操作时",{"type":427,"tag":545,"props":943,"children":944},{},[945],{"type":433,"value":946},"使用 Proxy 创建了源函数的代理对象后，调用代理对象会隐式调用源函数",{"type":427,"tag":545,"props":948,"children":949},{},[950],{"type":433,"value":951},"使用 bind 将源函数绑定为目标函数后，调用目标函数会隐式调用源函数",{"type":427,"tag":441,"props":953,"children":954},{},[955],{"type":433,"value":956},"一直以为使用 bind 时是“创造”了新函数，啊，这里好迷。更迷的是，使用 new 运算符时虽然能见到函数名后面紧跟的小括号，但那不是调用运算符，而是 new 运算符的参数传入表，起调用作用的是 new 运算符，所以是隐式调用。",{"type":427,"tag":441,"props":958,"children":959},{},[960],{"type":433,"value":961},"typeof 在运算符中是一个很特殊的存在，一般变量在表达式中都是以值参与运算，而 typeof 是求值的类型，可以无视标识符是否声明过，比如：",{"type":427,"tag":452,"props":963,"children":965},{"className":685,"code":964,"language":687,"meta":421,"style":421},"typeof x // undefined\n",[966],{"type":427,"tag":459,"props":967,"children":968},{"__ignoreMap":421},[969],{"type":427,"tag":463,"props":970,"children":971},{"class":465,"line":466},[972,977,982],{"type":427,"tag":463,"props":973,"children":974},{"style":493},[975],{"type":433,"value":976},"typeof",{"type":427,"tag":463,"props":978,"children":979},{"style":697},[980],{"type":433,"value":981}," x ",{"type":427,"tag":463,"props":983,"children":984},{"style":750},[985],{"type":433,"value":986},"// undefined\n",{"type":427,"tag":441,"props":988,"children":989},{},[990],{"type":433,"value":991},"但有一个很疑惑的地方是，由于暂时性死区的存在，typeof 运算符也并不总是这么安全。",{"type":427,"tag":452,"props":993,"children":995},{"className":685,"code":994,"language":687,"meta":421,"style":421},"typeof x // ReferenceError\nlet x\n",[996],{"type":427,"tag":459,"props":997,"children":998},{"__ignoreMap":421},[999,1015],{"type":427,"tag":463,"props":1000,"children":1001},{"class":465,"line":466},[1002,1006,1010],{"type":427,"tag":463,"props":1003,"children":1004},{"style":493},[1005],{"type":433,"value":976},{"type":427,"tag":463,"props":1007,"children":1008},{"style":697},[1009],{"type":433,"value":981},{"type":427,"tag":463,"props":1011,"children":1012},{"style":750},[1013],{"type":433,"value":1014},"// ReferenceError\n",{"type":427,"tag":463,"props":1016,"children":1017},{"class":465,"line":756},[1018,1024],{"type":427,"tag":463,"props":1019,"children":1021},{"style":1020},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[1022],{"type":433,"value":1023},"let",{"type":427,"tag":463,"props":1025,"children":1026},{"style":697},[1027],{"type":433,"value":1028}," x\n",{"type":427,"tag":441,"props":1030,"children":1031},{},[1032],{"type":433,"value":1033},"完整的运算符优先级列表如下：",{"type":427,"tag":1035,"props":1036,"children":1037},"table",{},[1038,1057],{"type":427,"tag":1039,"props":1040,"children":1041},"thead",{},[1042],{"type":427,"tag":1043,"props":1044,"children":1045},"tr",{},[1046,1052],{"type":427,"tag":1047,"props":1048,"children":1049},"th",{},[1050],{"type":433,"value":1051},"运算符",{"type":427,"tag":1047,"props":1053,"children":1054},{},[1055],{"type":433,"value":1056},"描述",{"type":427,"tag":1058,"props":1059,"children":1060},"tbody",{},[1061,1075,1093,1106,1119,1132,1145,1158,1171,1184,1197,1210,1223,1236,1249,1262,1275,1288,1301,1314],{"type":427,"tag":1043,"props":1062,"children":1063},{},[1064,1070],{"type":427,"tag":1065,"props":1066,"children":1067},"td",{},[1068],{"type":433,"value":1069},"()",{"type":427,"tag":1065,"props":1071,"children":1072},{},[1073],{"type":433,"value":1074},"成组运算",{"type":427,"tag":1043,"props":1076,"children":1077},{},[1078,1088],{"type":427,"tag":1065,"props":1079,"children":1080},{},[1081,1083,1086],{"type":433,"value":1082},".、",{"type":427,"tag":463,"props":1084,"children":1085},{},[],{"type":433,"value":1087},"、new ()",{"type":427,"tag":1065,"props":1089,"children":1090},{},[1091],{"type":433,"value":1092},"对象成员存取、数组下标、带传参列表的 new 运算符",{"type":427,"tag":1043,"props":1094,"children":1095},{},[1096,1101],{"type":427,"tag":1065,"props":1097,"children":1098},{},[1099],{"type":433,"value":1100},"()、new",{"type":427,"tag":1065,"props":1102,"children":1103},{},[1104],{"type":433,"value":1105},"函数调用、new 运算符",{"type":427,"tag":1043,"props":1107,"children":1108},{},[1109,1114],{"type":427,"tag":1065,"props":1110,"children":1111},{},[1112],{"type":433,"value":1113},"++、--",{"type":427,"tag":1065,"props":1115,"children":1116},{},[1117],{"type":433,"value":1118},"后置递增、后置递减",{"type":427,"tag":1043,"props":1120,"children":1121},{},[1122,1127],{"type":427,"tag":1065,"props":1123,"children":1124},{},[1125],{"type":433,"value":1126},"+、-、++、--、~、!、delete、typeof、void",{"type":427,"tag":1065,"props":1128,"children":1129},{},[1130],{"type":433,"value":1131},"前置加、前置减、前置递增、前置递减、按位取反、逻辑非、delete、typeof、void",{"type":427,"tag":1043,"props":1133,"children":1134},{},[1135,1140],{"type":427,"tag":1065,"props":1136,"children":1137},{},[1138],{"type":433,"value":1139},"*、/、%",{"type":427,"tag":1065,"props":1141,"children":1142},{},[1143],{"type":433,"value":1144},"乘法、除法、取模",{"type":427,"tag":1043,"props":1146,"children":1147},{},[1148,1153],{"type":427,"tag":1065,"props":1149,"children":1150},{},[1151],{"type":433,"value":1152},"+、-、+",{"type":427,"tag":1065,"props":1154,"children":1155},{},[1156],{"type":433,"value":1157},"加法、减法、字符串连接",{"type":427,"tag":1043,"props":1159,"children":1160},{},[1161,1166],{"type":427,"tag":1065,"props":1162,"children":1163},{},[1164],{"type":433,"value":1165},"\u003C\u003C、>>、>>>",{"type":427,"tag":1065,"props":1167,"children":1168},{},[1169],{"type":433,"value":1170},"移位运算符",{"type":427,"tag":1043,"props":1172,"children":1173},{},[1174,1179],{"type":427,"tag":1065,"props":1175,"children":1176},{},[1177],{"type":433,"value":1178},"\u003C、\u003C=、>=、>、in、instanceof",{"type":427,"tag":1065,"props":1180,"children":1181},{},[1182],{"type":433,"value":1183},"关系运算符、in、instanceof",{"type":427,"tag":1043,"props":1185,"children":1186},{},[1187,1192],{"type":427,"tag":1065,"props":1188,"children":1189},{},[1190],{"type":433,"value":1191},"==、!=、===、!==",{"type":427,"tag":1065,"props":1193,"children":1194},{},[1195],{"type":433,"value":1196},"等值检测",{"type":427,"tag":1043,"props":1198,"children":1199},{},[1200,1205],{"type":427,"tag":1065,"props":1201,"children":1202},{},[1203],{"type":433,"value":1204},"&",{"type":427,"tag":1065,"props":1206,"children":1207},{},[1208],{"type":433,"value":1209},"按位与",{"type":427,"tag":1043,"props":1211,"children":1212},{},[1213,1218],{"type":427,"tag":1065,"props":1214,"children":1215},{},[1216],{"type":433,"value":1217},"^",{"type":427,"tag":1065,"props":1219,"children":1220},{},[1221],{"type":433,"value":1222},"按位异或",{"type":427,"tag":1043,"props":1224,"children":1225},{},[1226,1231],{"type":427,"tag":1065,"props":1227,"children":1228},{},[1229],{"type":433,"value":1230},"|",{"type":427,"tag":1065,"props":1232,"children":1233},{},[1234],{"type":433,"value":1235},"按位或",{"type":427,"tag":1043,"props":1237,"children":1238},{},[1239,1244],{"type":427,"tag":1065,"props":1240,"children":1241},{},[1242],{"type":433,"value":1243},"&&",{"type":427,"tag":1065,"props":1245,"children":1246},{},[1247],{"type":433,"value":1248},"逻辑与",{"type":427,"tag":1043,"props":1250,"children":1251},{},[1252,1257],{"type":427,"tag":1065,"props":1253,"children":1254},{},[1255],{"type":433,"value":1256},"||",{"type":427,"tag":1065,"props":1258,"children":1259},{},[1260],{"type":433,"value":1261},"逻辑或",{"type":427,"tag":1043,"props":1263,"children":1264},{},[1265,1270],{"type":427,"tag":1065,"props":1266,"children":1267},{},[1268],{"type":433,"value":1269},"?:",{"type":427,"tag":1065,"props":1271,"children":1272},{},[1273],{"type":433,"value":1274},"三木运算",{"type":427,"tag":1043,"props":1276,"children":1277},{},[1278,1283],{"type":427,"tag":1065,"props":1279,"children":1280},{},[1281],{"type":433,"value":1282},"=、oP=",{"type":427,"tag":1065,"props":1284,"children":1285},{},[1286],{"type":433,"value":1287},"赋值、运算赋值",{"type":427,"tag":1043,"props":1289,"children":1290},{},[1291,1296],{"type":427,"tag":1065,"props":1292,"children":1293},{},[1294],{"type":433,"value":1295},"yield、yield*",{"type":427,"tag":1065,"props":1297,"children":1298},{},[1299],{"type":433,"value":1300},"yield 表达式",{"type":427,"tag":1043,"props":1302,"children":1303},{},[1304,1309],{"type":427,"tag":1065,"props":1305,"children":1306},{},[1307],{"type":433,"value":1308},"...",{"type":427,"tag":1065,"props":1310,"children":1311},{},[1312],{"type":433,"value":1313},"展开运算符",{"type":427,"tag":1043,"props":1315,"children":1316},{},[1317,1322],{"type":427,"tag":1065,"props":1318,"children":1319},{},[1320],{"type":433,"value":1321},"，",{"type":427,"tag":1065,"props":1323,"children":1324},{},[1325],{"type":433,"value":1326},"逗号运算符、多重求值",{"type":427,"tag":441,"props":1328,"children":1329},{},[1330],{"type":433,"value":1331},"需要注意的是 new 的优先级问题。以往的博客一直在强调使用 new 运算符时一定要带上括号，而不是混用带括号和不带括号两种用法。两种用法最显著的区别在于，它们的运算优先级不一样，以点号存取运算符为例：",{"type":427,"tag":452,"props":1333,"children":1335},{"className":685,"code":1334,"language":687,"meta":421,"style":421},"function A () {\n  this.b = 'b'\n  console.log('A().b')\n}\nA.b = function () {\n  console.log('A.b')\n}\nnew A.b // A.b\nnew A().b // A().b\n",[1336],{"type":427,"tag":459,"props":1337,"children":1338},{"__ignoreMap":421},[1339,1362,1398,1439,1448,1483,1520,1528,1555],{"type":427,"tag":463,"props":1340,"children":1341},{"class":465,"line":466},[1342,1347,1352,1357],{"type":427,"tag":463,"props":1343,"children":1344},{"style":1020},[1345],{"type":433,"value":1346},"function",{"type":427,"tag":463,"props":1348,"children":1349},{"style":709},[1350],{"type":433,"value":1351}," A",{"type":427,"tag":463,"props":1353,"children":1354},{"style":703},[1355],{"type":433,"value":1356}," ()",{"type":427,"tag":463,"props":1358,"children":1359},{"style":703},[1360],{"type":433,"value":1361}," {\n",{"type":427,"tag":463,"props":1363,"children":1364},{"class":465,"line":756},[1365,1371,1375,1380,1385,1389,1393],{"type":427,"tag":463,"props":1366,"children":1368},{"style":1367},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[1369],{"type":433,"value":1370},"  this",{"type":427,"tag":463,"props":1372,"children":1373},{"style":703},[1374],{"type":433,"value":706},{"type":427,"tag":463,"props":1376,"children":1377},{"style":697},[1378],{"type":433,"value":1379},"b",{"type":427,"tag":463,"props":1381,"children":1382},{"style":493},[1383],{"type":433,"value":1384}," =",{"type":427,"tag":463,"props":1386,"children":1387},{"style":476},[1388],{"type":433,"value":479},{"type":427,"tag":463,"props":1390,"children":1391},{"style":482},[1392],{"type":433,"value":1379},{"type":427,"tag":463,"props":1394,"children":1395},{"style":476},[1396],{"type":433,"value":1397},"'\n",{"type":427,"tag":463,"props":1399,"children":1401},{"class":465,"line":1400},3,[1402,1407,1411,1416,1421,1425,1430,1434],{"type":427,"tag":463,"props":1403,"children":1404},{"style":697},[1405],{"type":433,"value":1406},"  console",{"type":427,"tag":463,"props":1408,"children":1409},{"style":703},[1410],{"type":433,"value":706},{"type":427,"tag":463,"props":1412,"children":1413},{"style":709},[1414],{"type":433,"value":1415},"log",{"type":427,"tag":463,"props":1417,"children":1419},{"style":1418},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1420],{"type":433,"value":717},{"type":427,"tag":463,"props":1422,"children":1423},{"style":476},[1424],{"type":433,"value":490},{"type":427,"tag":463,"props":1426,"children":1427},{"style":482},[1428],{"type":433,"value":1429},"A().b",{"type":427,"tag":463,"props":1431,"children":1432},{"style":476},[1433],{"type":433,"value":490},{"type":427,"tag":463,"props":1435,"children":1436},{"style":1418},[1437],{"type":433,"value":1438},")\n",{"type":427,"tag":463,"props":1440,"children":1442},{"class":465,"line":1441},4,[1443],{"type":427,"tag":463,"props":1444,"children":1445},{"style":703},[1446],{"type":433,"value":1447},"}\n",{"type":427,"tag":463,"props":1449,"children":1451},{"class":465,"line":1450},5,[1452,1458,1462,1466,1470,1475,1479],{"type":427,"tag":463,"props":1453,"children":1455},{"style":1454},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[1456],{"type":433,"value":1457},"A",{"type":427,"tag":463,"props":1459,"children":1460},{"style":703},[1461],{"type":433,"value":706},{"type":427,"tag":463,"props":1463,"children":1464},{"style":709},[1465],{"type":433,"value":1379},{"type":427,"tag":463,"props":1467,"children":1468},{"style":493},[1469],{"type":433,"value":1384},{"type":427,"tag":463,"props":1471,"children":1472},{"style":1020},[1473],{"type":433,"value":1474}," function",{"type":427,"tag":463,"props":1476,"children":1477},{"style":703},[1478],{"type":433,"value":1356},{"type":427,"tag":463,"props":1480,"children":1481},{"style":703},[1482],{"type":433,"value":1361},{"type":427,"tag":463,"props":1484,"children":1486},{"class":465,"line":1485},6,[1487,1491,1495,1499,1503,1507,1512,1516],{"type":427,"tag":463,"props":1488,"children":1489},{"style":697},[1490],{"type":433,"value":1406},{"type":427,"tag":463,"props":1492,"children":1493},{"style":703},[1494],{"type":433,"value":706},{"type":427,"tag":463,"props":1496,"children":1497},{"style":709},[1498],{"type":433,"value":1415},{"type":427,"tag":463,"props":1500,"children":1501},{"style":1418},[1502],{"type":433,"value":717},{"type":427,"tag":463,"props":1504,"children":1505},{"style":476},[1506],{"type":433,"value":490},{"type":427,"tag":463,"props":1508,"children":1509},{"style":482},[1510],{"type":433,"value":1511},"A.b",{"type":427,"tag":463,"props":1513,"children":1514},{"style":476},[1515],{"type":433,"value":490},{"type":427,"tag":463,"props":1517,"children":1518},{"style":1418},[1519],{"type":433,"value":1438},{"type":427,"tag":463,"props":1521,"children":1523},{"class":465,"line":1522},7,[1524],{"type":427,"tag":463,"props":1525,"children":1526},{"style":703},[1527],{"type":433,"value":1447},{"type":427,"tag":463,"props":1529,"children":1531},{"class":465,"line":1530},8,[1532,1537,1541,1545,1550],{"type":427,"tag":463,"props":1533,"children":1534},{"style":493},[1535],{"type":433,"value":1536},"new",{"type":427,"tag":463,"props":1538,"children":1539},{"style":1454},[1540],{"type":433,"value":1351},{"type":427,"tag":463,"props":1542,"children":1543},{"style":703},[1544],{"type":433,"value":706},{"type":427,"tag":463,"props":1546,"children":1547},{"style":697},[1548],{"type":433,"value":1549},"b ",{"type":427,"tag":463,"props":1551,"children":1552},{"style":750},[1553],{"type":433,"value":1554},"// A.b\n",{"type":427,"tag":463,"props":1556,"children":1558},{"class":465,"line":1557},9,[1559,1563,1567,1571,1575,1579],{"type":427,"tag":463,"props":1560,"children":1561},{"style":493},[1562],{"type":433,"value":1536},{"type":427,"tag":463,"props":1564,"children":1565},{"style":709},[1566],{"type":433,"value":1351},{"type":427,"tag":463,"props":1568,"children":1569},{"style":697},[1570],{"type":433,"value":1069},{"type":427,"tag":463,"props":1572,"children":1573},{"style":703},[1574],{"type":433,"value":706},{"type":427,"tag":463,"props":1576,"children":1577},{"style":697},[1578],{"type":433,"value":1549},{"type":427,"tag":463,"props":1580,"children":1581},{"style":750},[1582],{"type":433,"value":1583},"// A().b\n",{"type":427,"tag":435,"props":1585,"children":1587},{"id":1586},"语句",[1588],{"type":433,"value":1586},{"type":427,"tag":441,"props":1590,"children":1591},{},[1592],{"type":433,"value":1593},"按照类型，JS 中的语句可分为：声明语句、表达式语句、分支语句、循环语句、控制结构（continue、break 等）、其他（空语句、妇科语句、调式语句）、标签化语句。",{"type":427,"tag":441,"props":1595,"children":1596},{},[1597],{"type":433,"value":1598},"需要注意的点：",{"type":427,"tag":541,"props":1600,"children":1601},{},[1602,1607,1612],{"type":427,"tag":545,"props":1603,"children":1604},{},[1605],{"type":433,"value":1606},"调试语句（debugger;）用于开启宿主环境的调试器",{"type":427,"tag":545,"props":1608,"children":1609},{},[1610],{"type":433,"value":1611},"除了分号外，EOF 也可以作为语句的结束标志（我没有试验成功）",{"type":427,"tag":545,"props":1613,"children":1614},{},[1615],{"type":433,"value":1616},"大括号并不是 for...in 等语句的语法元素，但却是 try...catch 中的语法元素",{"type":427,"tag":441,"props":1618,"children":1619},{},[1620],{"type":433,"value":1621},"解释一下为什么声明函数后没有办法直接加上小括号调用该函数，由于花括号是函数声明语句的语法成分（而不是理解为复合语句）所以解释器会自动在大括号结束后插入空格。",{"type":427,"tag":452,"props":1623,"children":1625},{"className":685,"code":1624,"language":687,"meta":421,"style":421},"function log(arg) {\n  console.log(arg)\n}(2)\n",[1626],{"type":427,"tag":459,"props":1627,"children":1628},{"__ignoreMap":421},[1629,1660,1687],{"type":427,"tag":463,"props":1630,"children":1631},{"class":465,"line":466},[1632,1636,1641,1645,1651,1656],{"type":427,"tag":463,"props":1633,"children":1634},{"style":1020},[1635],{"type":433,"value":1346},{"type":427,"tag":463,"props":1637,"children":1638},{"style":709},[1639],{"type":433,"value":1640}," log",{"type":427,"tag":463,"props":1642,"children":1643},{"style":703},[1644],{"type":433,"value":717},{"type":427,"tag":463,"props":1646,"children":1648},{"style":1647},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[1649],{"type":433,"value":1650},"arg",{"type":427,"tag":463,"props":1652,"children":1653},{"style":703},[1654],{"type":433,"value":1655},")",{"type":427,"tag":463,"props":1657,"children":1658},{"style":703},[1659],{"type":433,"value":1361},{"type":427,"tag":463,"props":1661,"children":1662},{"class":465,"line":756},[1663,1667,1671,1675,1679,1683],{"type":427,"tag":463,"props":1664,"children":1665},{"style":697},[1666],{"type":433,"value":1406},{"type":427,"tag":463,"props":1668,"children":1669},{"style":703},[1670],{"type":433,"value":706},{"type":427,"tag":463,"props":1672,"children":1673},{"style":709},[1674],{"type":433,"value":1415},{"type":427,"tag":463,"props":1676,"children":1677},{"style":1418},[1678],{"type":433,"value":717},{"type":427,"tag":463,"props":1680,"children":1681},{"style":697},[1682],{"type":433,"value":1650},{"type":427,"tag":463,"props":1684,"children":1685},{"style":1418},[1686],{"type":433,"value":1438},{"type":427,"tag":463,"props":1688,"children":1689},{"class":465,"line":1400},[1690,1695,1699,1703],{"type":427,"tag":463,"props":1691,"children":1692},{"style":703},[1693],{"type":433,"value":1694},"}",{"type":427,"tag":463,"props":1696,"children":1697},{"style":697},[1698],{"type":433,"value":717},{"type":427,"tag":463,"props":1700,"children":1701},{"style":725},[1702],{"type":433,"value":560},{"type":427,"tag":463,"props":1704,"children":1705},{"style":697},[1706],{"type":433,"value":1438},{"type":427,"tag":441,"props":1708,"children":1709},{},[1710],{"type":433,"value":1711},"在 for...in 等语句中声明的变量，如果是 var 声明，那么变量作用域将等同于当前所在函数级别，let 及 const 声明则等同于当前语句的块级作用域级别。try...catch 子句中显式声明的变量虽然没有 let、var 等声明关键字，但是经过测试发现其等同于 var 声明。",{"type":427,"tag":452,"props":1713,"children":1715},{"className":685,"code":1714,"language":687,"meta":421,"style":421},"try { throw 'test' } catch (e) {\n  console.log(e); // test\n  var e = 1;\n}\n",[1716],{"type":427,"tag":459,"props":1717,"children":1718},{"__ignoreMap":421},[1719,1771,1809,1836],{"type":427,"tag":463,"props":1720,"children":1721},{"class":465,"line":466},[1722,1728,1733,1738,1742,1747,1751,1756,1761,1766],{"type":427,"tag":463,"props":1723,"children":1725},{"style":1724},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[1726],{"type":433,"value":1727},"try",{"type":427,"tag":463,"props":1729,"children":1730},{"style":703},[1731],{"type":433,"value":1732}," {",{"type":427,"tag":463,"props":1734,"children":1735},{"style":1724},[1736],{"type":433,"value":1737}," throw",{"type":427,"tag":463,"props":1739,"children":1740},{"style":476},[1741],{"type":433,"value":479},{"type":427,"tag":463,"props":1743,"children":1744},{"style":482},[1745],{"type":433,"value":1746},"test",{"type":427,"tag":463,"props":1748,"children":1749},{"style":476},[1750],{"type":433,"value":490},{"type":427,"tag":463,"props":1752,"children":1753},{"style":703},[1754],{"type":433,"value":1755}," }",{"type":427,"tag":463,"props":1757,"children":1758},{"style":1724},[1759],{"type":433,"value":1760}," catch",{"type":427,"tag":463,"props":1762,"children":1763},{"style":697},[1764],{"type":433,"value":1765}," (e) ",{"type":427,"tag":463,"props":1767,"children":1768},{"style":703},[1769],{"type":433,"value":1770},"{\n",{"type":427,"tag":463,"props":1772,"children":1773},{"class":465,"line":756},[1774,1778,1782,1786,1790,1795,1799,1804],{"type":427,"tag":463,"props":1775,"children":1776},{"style":697},[1777],{"type":433,"value":1406},{"type":427,"tag":463,"props":1779,"children":1780},{"style":703},[1781],{"type":433,"value":706},{"type":427,"tag":463,"props":1783,"children":1784},{"style":709},[1785],{"type":433,"value":1415},{"type":427,"tag":463,"props":1787,"children":1788},{"style":1418},[1789],{"type":433,"value":717},{"type":427,"tag":463,"props":1791,"children":1792},{"style":697},[1793],{"type":433,"value":1794},"e",{"type":427,"tag":463,"props":1796,"children":1797},{"style":1418},[1798],{"type":433,"value":1655},{"type":427,"tag":463,"props":1800,"children":1801},{"style":703},[1802],{"type":433,"value":1803},";",{"type":427,"tag":463,"props":1805,"children":1806},{"style":750},[1807],{"type":433,"value":1808}," // test\n",{"type":427,"tag":463,"props":1810,"children":1811},{"class":465,"line":1400},[1812,1817,1822,1826,1831],{"type":427,"tag":463,"props":1813,"children":1814},{"style":1020},[1815],{"type":433,"value":1816},"  var",{"type":427,"tag":463,"props":1818,"children":1819},{"style":697},[1820],{"type":433,"value":1821}," e",{"type":427,"tag":463,"props":1823,"children":1824},{"style":493},[1825],{"type":433,"value":1384},{"type":427,"tag":463,"props":1827,"children":1828},{"style":725},[1829],{"type":433,"value":1830}," 1",{"type":427,"tag":463,"props":1832,"children":1833},{"style":703},[1834],{"type":433,"value":1835},";\n",{"type":427,"tag":463,"props":1837,"children":1838},{"class":465,"line":1441},[1839],{"type":427,"tag":463,"props":1840,"children":1841},{"style":703},[1842],{"type":433,"value":1447},{"type":427,"tag":441,"props":1844,"children":1845},{},[1846],{"type":433,"value":1847},"标签不能作用与注释语句，因为注释会被解释器忽略，所以标签作用会渗透到下一个语句；同时他不能作用域导入导出、函数或类声明语句，因为这些语句没有可执行的意义。",{"type":427,"tag":441,"props":1849,"children":1850},{},[1851],{"type":433,"value":1852},"continue 子句不允许跳转到“当前/外层的单个循环语句起始”之外的地方，所以在循环语句外面加上花括号是会报语法错误的：",{"type":427,"tag":452,"props":1854,"children":1856},{"className":685,"code":1855,"language":687,"meta":421,"style":421},"// it works !\ntest: for (i = 1; i \u003C 3; i++) {\n  for (j = 5; j \u003C 8; j++) {\n    if (j === 6) continue test;\n    else console.log(i, j)\n  }\n}\n// SyntaxError !\ntest: {\n  for (i = 1; i \u003C 3; i++) {\n    for (j = 5; j \u003C 8; j++) {\n      if (j === 6) continue test;\n      else console.log(i, j)\n    }\n  }\n} \n",[1857],{"type":427,"tag":459,"props":1858,"children":1859},{"__ignoreMap":421},[1860,1868,1941,2007,2051,2093,2101,2108,2116,2131,2191,2252,2293,2334,2343,2351],{"type":427,"tag":463,"props":1861,"children":1862},{"class":465,"line":466},[1863],{"type":427,"tag":463,"props":1864,"children":1865},{"style":750},[1866],{"type":433,"value":1867},"// it works !\n",{"type":427,"tag":463,"props":1869,"children":1870},{"class":465,"line":756},[1871,1876,1881,1886,1891,1896,1900,1904,1909,1914,1919,1923,1928,1933,1937],{"type":427,"tag":463,"props":1872,"children":1874},{"style":1873},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[1875],{"type":433,"value":1746},{"type":427,"tag":463,"props":1877,"children":1878},{"style":703},[1879],{"type":433,"value":1880},":",{"type":427,"tag":463,"props":1882,"children":1883},{"style":1724},[1884],{"type":433,"value":1885}," for",{"type":427,"tag":463,"props":1887,"children":1888},{"style":697},[1889],{"type":433,"value":1890}," (i ",{"type":427,"tag":463,"props":1892,"children":1893},{"style":493},[1894],{"type":433,"value":1895},"=",{"type":427,"tag":463,"props":1897,"children":1898},{"style":725},[1899],{"type":433,"value":1830},{"type":427,"tag":463,"props":1901,"children":1902},{"style":703},[1903],{"type":433,"value":1803},{"type":427,"tag":463,"props":1905,"children":1906},{"style":697},[1907],{"type":433,"value":1908}," i ",{"type":427,"tag":463,"props":1910,"children":1911},{"style":493},[1912],{"type":433,"value":1913},"\u003C",{"type":427,"tag":463,"props":1915,"children":1916},{"style":725},[1917],{"type":433,"value":1918}," 3",{"type":427,"tag":463,"props":1920,"children":1921},{"style":703},[1922],{"type":433,"value":1803},{"type":427,"tag":463,"props":1924,"children":1925},{"style":697},[1926],{"type":433,"value":1927}," i",{"type":427,"tag":463,"props":1929,"children":1930},{"style":493},[1931],{"type":433,"value":1932},"++",{"type":427,"tag":463,"props":1934,"children":1935},{"style":697},[1936],{"type":433,"value":747},{"type":427,"tag":463,"props":1938,"children":1939},{"style":703},[1940],{"type":433,"value":1770},{"type":427,"tag":463,"props":1942,"children":1943},{"class":465,"line":1400},[1944,1949,1954,1959,1963,1968,1972,1977,1982,1987,1991,1995,1999,2003],{"type":427,"tag":463,"props":1945,"children":1946},{"style":1724},[1947],{"type":433,"value":1948},"  for",{"type":427,"tag":463,"props":1950,"children":1951},{"style":1418},[1952],{"type":433,"value":1953}," (",{"type":427,"tag":463,"props":1955,"children":1956},{"style":697},[1957],{"type":433,"value":1958},"j",{"type":427,"tag":463,"props":1960,"children":1961},{"style":493},[1962],{"type":433,"value":1384},{"type":427,"tag":463,"props":1964,"children":1965},{"style":725},[1966],{"type":433,"value":1967}," 5",{"type":427,"tag":463,"props":1969,"children":1970},{"style":703},[1971],{"type":433,"value":1803},{"type":427,"tag":463,"props":1973,"children":1974},{"style":697},[1975],{"type":433,"value":1976}," j",{"type":427,"tag":463,"props":1978,"children":1979},{"style":493},[1980],{"type":433,"value":1981}," \u003C",{"type":427,"tag":463,"props":1983,"children":1984},{"style":725},[1985],{"type":433,"value":1986}," 8",{"type":427,"tag":463,"props":1988,"children":1989},{"style":703},[1990],{"type":433,"value":1803},{"type":427,"tag":463,"props":1992,"children":1993},{"style":697},[1994],{"type":433,"value":1976},{"type":427,"tag":463,"props":1996,"children":1997},{"style":493},[1998],{"type":433,"value":1932},{"type":427,"tag":463,"props":2000,"children":2001},{"style":1418},[2002],{"type":433,"value":747},{"type":427,"tag":463,"props":2004,"children":2005},{"style":703},[2006],{"type":433,"value":1770},{"type":427,"tag":463,"props":2008,"children":2009},{"class":465,"line":1441},[2010,2015,2019,2023,2028,2033,2037,2042,2047],{"type":427,"tag":463,"props":2011,"children":2012},{"style":1724},[2013],{"type":433,"value":2014},"    if",{"type":427,"tag":463,"props":2016,"children":2017},{"style":1418},[2018],{"type":433,"value":1953},{"type":427,"tag":463,"props":2020,"children":2021},{"style":697},[2022],{"type":433,"value":1958},{"type":427,"tag":463,"props":2024,"children":2025},{"style":493},[2026],{"type":433,"value":2027}," ===",{"type":427,"tag":463,"props":2029,"children":2030},{"style":725},[2031],{"type":433,"value":2032}," 6",{"type":427,"tag":463,"props":2034,"children":2035},{"style":1418},[2036],{"type":433,"value":747},{"type":427,"tag":463,"props":2038,"children":2039},{"style":1724},[2040],{"type":433,"value":2041},"continue",{"type":427,"tag":463,"props":2043,"children":2044},{"style":1873},[2045],{"type":433,"value":2046}," test",{"type":427,"tag":463,"props":2048,"children":2049},{"style":703},[2050],{"type":433,"value":1835},{"type":427,"tag":463,"props":2052,"children":2053},{"class":465,"line":1450},[2054,2059,2064,2068,2072,2076,2081,2085,2089],{"type":427,"tag":463,"props":2055,"children":2056},{"style":1724},[2057],{"type":433,"value":2058},"    else",{"type":427,"tag":463,"props":2060,"children":2061},{"style":697},[2062],{"type":433,"value":2063}," console",{"type":427,"tag":463,"props":2065,"children":2066},{"style":703},[2067],{"type":433,"value":706},{"type":427,"tag":463,"props":2069,"children":2070},{"style":709},[2071],{"type":433,"value":1415},{"type":427,"tag":463,"props":2073,"children":2074},{"style":1418},[2075],{"type":433,"value":717},{"type":427,"tag":463,"props":2077,"children":2078},{"style":697},[2079],{"type":433,"value":2080},"i",{"type":427,"tag":463,"props":2082,"children":2083},{"style":703},[2084],{"type":433,"value":733},{"type":427,"tag":463,"props":2086,"children":2087},{"style":697},[2088],{"type":433,"value":1976},{"type":427,"tag":463,"props":2090,"children":2091},{"style":1418},[2092],{"type":433,"value":1438},{"type":427,"tag":463,"props":2094,"children":2095},{"class":465,"line":1485},[2096],{"type":427,"tag":463,"props":2097,"children":2098},{"style":703},[2099],{"type":433,"value":2100},"  }\n",{"type":427,"tag":463,"props":2102,"children":2103},{"class":465,"line":1522},[2104],{"type":427,"tag":463,"props":2105,"children":2106},{"style":703},[2107],{"type":433,"value":1447},{"type":427,"tag":463,"props":2109,"children":2110},{"class":465,"line":1530},[2111],{"type":427,"tag":463,"props":2112,"children":2113},{"style":750},[2114],{"type":433,"value":2115},"// SyntaxError !\n",{"type":427,"tag":463,"props":2117,"children":2118},{"class":465,"line":1557},[2119,2123,2127],{"type":427,"tag":463,"props":2120,"children":2121},{"style":1873},[2122],{"type":433,"value":1746},{"type":427,"tag":463,"props":2124,"children":2125},{"style":703},[2126],{"type":433,"value":1880},{"type":427,"tag":463,"props":2128,"children":2129},{"style":703},[2130],{"type":433,"value":1361},{"type":427,"tag":463,"props":2132,"children":2134},{"class":465,"line":2133},10,[2135,2139,2143,2147,2151,2155,2159,2163,2167,2171,2175,2179,2183,2187],{"type":427,"tag":463,"props":2136,"children":2137},{"style":1724},[2138],{"type":433,"value":1948},{"type":427,"tag":463,"props":2140,"children":2141},{"style":1418},[2142],{"type":433,"value":1953},{"type":427,"tag":463,"props":2144,"children":2145},{"style":697},[2146],{"type":433,"value":2080},{"type":427,"tag":463,"props":2148,"children":2149},{"style":493},[2150],{"type":433,"value":1384},{"type":427,"tag":463,"props":2152,"children":2153},{"style":725},[2154],{"type":433,"value":1830},{"type":427,"tag":463,"props":2156,"children":2157},{"style":703},[2158],{"type":433,"value":1803},{"type":427,"tag":463,"props":2160,"children":2161},{"style":697},[2162],{"type":433,"value":1927},{"type":427,"tag":463,"props":2164,"children":2165},{"style":493},[2166],{"type":433,"value":1981},{"type":427,"tag":463,"props":2168,"children":2169},{"style":725},[2170],{"type":433,"value":1918},{"type":427,"tag":463,"props":2172,"children":2173},{"style":703},[2174],{"type":433,"value":1803},{"type":427,"tag":463,"props":2176,"children":2177},{"style":697},[2178],{"type":433,"value":1927},{"type":427,"tag":463,"props":2180,"children":2181},{"style":493},[2182],{"type":433,"value":1932},{"type":427,"tag":463,"props":2184,"children":2185},{"style":1418},[2186],{"type":433,"value":747},{"type":427,"tag":463,"props":2188,"children":2189},{"style":703},[2190],{"type":433,"value":1770},{"type":427,"tag":463,"props":2192,"children":2194},{"class":465,"line":2193},11,[2195,2200,2204,2208,2212,2216,2220,2224,2228,2232,2236,2240,2244,2248],{"type":427,"tag":463,"props":2196,"children":2197},{"style":1724},[2198],{"type":433,"value":2199},"    for",{"type":427,"tag":463,"props":2201,"children":2202},{"style":1418},[2203],{"type":433,"value":1953},{"type":427,"tag":463,"props":2205,"children":2206},{"style":697},[2207],{"type":433,"value":1958},{"type":427,"tag":463,"props":2209,"children":2210},{"style":493},[2211],{"type":433,"value":1384},{"type":427,"tag":463,"props":2213,"children":2214},{"style":725},[2215],{"type":433,"value":1967},{"type":427,"tag":463,"props":2217,"children":2218},{"style":703},[2219],{"type":433,"value":1803},{"type":427,"tag":463,"props":2221,"children":2222},{"style":697},[2223],{"type":433,"value":1976},{"type":427,"tag":463,"props":2225,"children":2226},{"style":493},[2227],{"type":433,"value":1981},{"type":427,"tag":463,"props":2229,"children":2230},{"style":725},[2231],{"type":433,"value":1986},{"type":427,"tag":463,"props":2233,"children":2234},{"style":703},[2235],{"type":433,"value":1803},{"type":427,"tag":463,"props":2237,"children":2238},{"style":697},[2239],{"type":433,"value":1976},{"type":427,"tag":463,"props":2241,"children":2242},{"style":493},[2243],{"type":433,"value":1932},{"type":427,"tag":463,"props":2245,"children":2246},{"style":1418},[2247],{"type":433,"value":747},{"type":427,"tag":463,"props":2249,"children":2250},{"style":703},[2251],{"type":433,"value":1770},{"type":427,"tag":463,"props":2253,"children":2255},{"class":465,"line":2254},12,[2256,2261,2265,2269,2273,2277,2281,2285,2289],{"type":427,"tag":463,"props":2257,"children":2258},{"style":1724},[2259],{"type":433,"value":2260},"      if",{"type":427,"tag":463,"props":2262,"children":2263},{"style":1418},[2264],{"type":433,"value":1953},{"type":427,"tag":463,"props":2266,"children":2267},{"style":697},[2268],{"type":433,"value":1958},{"type":427,"tag":463,"props":2270,"children":2271},{"style":493},[2272],{"type":433,"value":2027},{"type":427,"tag":463,"props":2274,"children":2275},{"style":725},[2276],{"type":433,"value":2032},{"type":427,"tag":463,"props":2278,"children":2279},{"style":1418},[2280],{"type":433,"value":747},{"type":427,"tag":463,"props":2282,"children":2283},{"style":1724},[2284],{"type":433,"value":2041},{"type":427,"tag":463,"props":2286,"children":2287},{"style":1873},[2288],{"type":433,"value":2046},{"type":427,"tag":463,"props":2290,"children":2291},{"style":703},[2292],{"type":433,"value":1835},{"type":427,"tag":463,"props":2294,"children":2296},{"class":465,"line":2295},13,[2297,2302,2306,2310,2314,2318,2322,2326,2330],{"type":427,"tag":463,"props":2298,"children":2299},{"style":1724},[2300],{"type":433,"value":2301},"      else",{"type":427,"tag":463,"props":2303,"children":2304},{"style":697},[2305],{"type":433,"value":2063},{"type":427,"tag":463,"props":2307,"children":2308},{"style":703},[2309],{"type":433,"value":706},{"type":427,"tag":463,"props":2311,"children":2312},{"style":709},[2313],{"type":433,"value":1415},{"type":427,"tag":463,"props":2315,"children":2316},{"style":1418},[2317],{"type":433,"value":717},{"type":427,"tag":463,"props":2319,"children":2320},{"style":697},[2321],{"type":433,"value":2080},{"type":427,"tag":463,"props":2323,"children":2324},{"style":703},[2325],{"type":433,"value":733},{"type":427,"tag":463,"props":2327,"children":2328},{"style":697},[2329],{"type":433,"value":1976},{"type":427,"tag":463,"props":2331,"children":2332},{"style":1418},[2333],{"type":433,"value":1438},{"type":427,"tag":463,"props":2335,"children":2337},{"class":465,"line":2336},14,[2338],{"type":427,"tag":463,"props":2339,"children":2340},{"style":703},[2341],{"type":433,"value":2342},"    }\n",{"type":427,"tag":463,"props":2344,"children":2346},{"class":465,"line":2345},15,[2347],{"type":427,"tag":463,"props":2348,"children":2349},{"style":703},[2350],{"type":433,"value":2100},{"type":427,"tag":463,"props":2352,"children":2354},{"class":465,"line":2353},16,[2355],{"type":427,"tag":463,"props":2356,"children":2357},{"style":703},[2358],{"type":433,"value":1447},{"type":427,"tag":441,"props":2360,"children":2361},{},[2362],{"type":433,"value":2363},"ES2019 后，try...catch 允许省略 catch 中的 exception 声明部分。",{"type":427,"tag":441,"props":2365,"children":2366},{},[2367],{"type":433,"value":2368},"try...finnally 中的结束处理的执行顺序需要注意，它会在 try 中的 return 后以及 try 中的 break 前执行。",{"type":427,"tag":435,"props":2370,"children":2372},{"id":2371},"模块",[2373],{"type":433,"value":2371},{"type":427,"tag":441,"props":2375,"children":2376},{},[2377],{"type":433,"value":2378},"模块有几种导入方式：默认导入、名字导入、命名空间导入，其中默认导入能和另外两种组合使用，但是后两者不能混用。",{"type":427,"tag":452,"props":2380,"children":2382},{"className":685,"code":2381,"language":687,"meta":421,"style":421},"import defaultExport, { toolA } from 'test.mjs'\nimport defaultExport, * as namespace from 'test.mjs'\n",[2383],{"type":427,"tag":459,"props":2384,"children":2385},{"__ignoreMap":421},[2386,2434],{"type":427,"tag":463,"props":2387,"children":2388},{"class":465,"line":466},[2389,2394,2399,2403,2407,2412,2416,2421,2425,2430],{"type":427,"tag":463,"props":2390,"children":2391},{"style":1724},[2392],{"type":433,"value":2393},"import",{"type":427,"tag":463,"props":2395,"children":2396},{"style":697},[2397],{"type":433,"value":2398}," defaultExport",{"type":427,"tag":463,"props":2400,"children":2401},{"style":703},[2402],{"type":433,"value":733},{"type":427,"tag":463,"props":2404,"children":2405},{"style":703},[2406],{"type":433,"value":1732},{"type":427,"tag":463,"props":2408,"children":2409},{"style":697},[2410],{"type":433,"value":2411}," toolA",{"type":427,"tag":463,"props":2413,"children":2414},{"style":703},[2415],{"type":433,"value":1755},{"type":427,"tag":463,"props":2417,"children":2418},{"style":1724},[2419],{"type":433,"value":2420}," from",{"type":427,"tag":463,"props":2422,"children":2423},{"style":476},[2424],{"type":433,"value":479},{"type":427,"tag":463,"props":2426,"children":2427},{"style":482},[2428],{"type":433,"value":2429},"test.mjs",{"type":427,"tag":463,"props":2431,"children":2432},{"style":476},[2433],{"type":433,"value":1397},{"type":427,"tag":463,"props":2435,"children":2436},{"class":465,"line":756},[2437,2441,2445,2449,2454,2459,2464,2469,2473,2477],{"type":427,"tag":463,"props":2438,"children":2439},{"style":1724},[2440],{"type":433,"value":2393},{"type":427,"tag":463,"props":2442,"children":2443},{"style":697},[2444],{"type":433,"value":2398},{"type":427,"tag":463,"props":2446,"children":2447},{"style":703},[2448],{"type":433,"value":733},{"type":427,"tag":463,"props":2450,"children":2451},{"style":776},[2452],{"type":433,"value":2453}," *",{"type":427,"tag":463,"props":2455,"children":2456},{"style":1724},[2457],{"type":433,"value":2458}," as",{"type":427,"tag":463,"props":2460,"children":2461},{"style":697},[2462],{"type":433,"value":2463}," namespace ",{"type":427,"tag":463,"props":2465,"children":2466},{"style":1724},[2467],{"type":433,"value":2468},"from",{"type":427,"tag":463,"props":2470,"children":2471},{"style":476},[2472],{"type":433,"value":479},{"type":427,"tag":463,"props":2474,"children":2475},{"style":482},[2476],{"type":433,"value":2429},{"type":427,"tag":463,"props":2478,"children":2479},{"style":476},[2480],{"type":433,"value":1397},{"type":427,"tag":441,"props":2482,"children":2483},{},[2484],{"type":433,"value":2485},"其中，名字导入中声明的标识符是本地的名字，但他是通过不可变间接绑定（immutable indirect binding）绑定到了源模块中的名字，所以不能够被修改，修改时会发生类型错误（修改时和常量类似）。",{"type":427,"tag":441,"props":2487,"children":2488},{},[2489],{"type":433,"value":2490},"模块载入发生在执行之前装载模块的阶段。JS 使用深度遍历分析模块的依赖关系并递归装载，语法分析阶段只会在导出表建立对应名字的项，而名字与值的绑定要等到执行阶段才能完成，这和 var 声明类似，同时也能说明为什么允许导出值，比如：export default 1+2。",{"type":427,"tag":441,"props":2492,"children":2493},{},[2494],{"type":433,"value":2495},"为什么处于严格模式时，用户代码没有办法动态地在模块顶层的命名空间中新增名字或标识符？",{"type":427,"tag":435,"props":2497,"children":2499},{"id":2498},"严格模式",[2500],{"type":433,"value":2498},{"type":427,"tag":441,"props":2502,"children":2503},{},[2504],{"type":433,"value":2505},"严格模式使用一段字面量字符串“use strict”开启，它是一种“指示前缀”，当然，带上分号后也可以被称为“字面量表达式语句”。除了指示前缀这种方法，使用宿主的运行参数也可以开启，如“node --use_strict”。此外，ESModule 中的代码默认是以严格模式运行的，所以要小心顶层的 this 了！",{"type":427,"tag":441,"props":2507,"children":2508},{},[2509],{"type":433,"value":2510},"“use strict”的位置非常严格，它必须是“第一个”语句，就算它前面有空语句或者其本身在标签语句中也不行。",{"type":427,"tag":441,"props":2512,"children":2513},{},[2514],{"type":433,"value":2515},"总的来说，严格模式一共有七条限制：",{"type":427,"tag":541,"props":2517,"children":2518},{},[2519,2524,2529,2534,2539,2544,2549,2554,2559,2564],{"type":427,"tag":545,"props":2520,"children":2521},{},[2522],{"type":433,"value":2523},"对象字面量中不能有相同的属性声明",{"type":427,"tag":545,"props":2525,"children":2526},{},[2527],{"type":433,"value":2528},"函数实参列表中不能有同名参数",{"type":427,"tag":545,"props":2530,"children":2531},{},[2532],{"type":433,"value":2533},"不能声明、重写或删除 eval、arguments 标识符",{"type":427,"tag":545,"props":2535,"children":2536},{},[2537],{"type":433,"value":2538},"不允许使用八进制数字字面量",{"type":427,"tag":545,"props":2540,"children":2541},{},[2542],{"type":433,"value":2543},"不能删除显式声明的标识符、名字或具名函数",{"type":427,"tag":545,"props":2545,"children":2546},{},[2547],{"type":433,"value":2548},"新增了 implements、interface、let、package、private、protected、public、static、yield 这些关键字",{"type":427,"tag":545,"props":2550,"children":2551},{},[2552],{"type":433,"value":2553},"禁用 with 语句",{"type":427,"tag":545,"props":2555,"children":2556},{},[2557],{"type":433,"value":2558},"禁用隐式声明",{"type":427,"tag":545,"props":2560,"children":2561},{},[2562],{"type":433,"value":2563},"禁止扩展不可扩展对象、禁止删除封装对象或冻结对象的属性、禁止删除不可配置的属性或写只读属性",{"type":427,"tag":545,"props":2565,"children":2566},{},[2567],{"type":433,"value":2568},"禁止访问 fn.caller 以及 arguments.callee 属性",{"type":427,"tag":441,"props":2570,"children":2571},{},[2572],{"type":433,"value":2573},"有两种方法可以在严格模式中以非严格模式运行代码：",{"type":427,"tag":541,"props":2575,"children":2576},{},[2577,2582],{"type":427,"tag":545,"props":2578,"children":2579},{},[2580],{"type":433,"value":2581},"间接调用 eval 函数",{"type":427,"tag":545,"props":2583,"children":2584},{},[2585],{"type":433,"value":2586},"使用 new Function 构造的新函数",{"type":427,"tag":435,"props":2588,"children":2590},{"id":2589},"运算符的二义性",[2591],{"type":433,"value":2589},{"type":427,"tag":441,"props":2593,"children":2594},{},[2595],{"type":433,"value":2596},"某些标点符号的二义性（比如加号和连接运算符）使得引擎无法在语法分析阶段就确定符号的具体作用。",{"type":427,"tag":441,"props":2598,"children":2599},{},[2600],{"type":433,"value":2601},"由于加法是值运算，所以涉及到对象加法，那么结果类型便变得不那么可控，这是 JS 中的类型系统饱受诟病的原因之一。这个问题的根源在于 JS 是动态语言，它具有动态类型绑定的特征。",{"type":427,"tag":441,"props":2603,"children":2604},{},[2605],{"type":433,"value":2606},"某些语句或在特定语义下会发生类型转换，比如 if、while 语句的括号内的表达式会被隐式转换为布尔值，with 语句内括号中的表达式会被隐式转为对象。",{"type":427,"tag":441,"props":2608,"children":2609},{},[2610],{"type":433,"value":2611},"一些语法结构被称为“Cover...”，因为在语法分析时，它包含了两种可能的推断，比如 async() 可以理解为调用 async 函数或是匿名同步函数的开头部分，因此 async () 也被称为 “Cover CallExpression And AsyncArrowHead”。",{"type":427,"tag":428,"props":2613,"children":2615},{"id":2614},"面向对象语言特性",[2616],{"type":433,"value":2614},{"type":427,"tag":435,"props":2618,"children":2620},{"id":2619},"语法综述-1",[2621],{"type":433,"value":437},{"type":427,"tag":441,"props":2623,"children":2624},{},[2625],{"type":433,"value":2626},"for...in 和 for...of 分别用来遍历对象的成员名和成员值，其中 for...of 不仅仅是用来设计为遍历数组的，所有实现了迭代器接口的对象都可以使用它，Array、Map、Set、String、TypedArray、arguments 等，这些对象也叫做集合（collections）。",{"type":427,"tag":441,"props":2628,"children":2629},{},[2630],{"type":433,"value":2631},"从技术上来说，只有在内存中连续布局的才是多维数组，所以把 JS 种这种可以使数组分量指向其它数组的数组叫做“数组的数组”或“交错数组”。",{"type":427,"tag":441,"props":2633,"children":2634},{},[2635],{"type":433,"value":2636},"正则中八进制和分组引用是冲突的（\\ddd 和 \\nn），当发生歧义时，优先理解为分组引用，若找到对应引用才理解为八进制字符匹配。",{"type":427,"tag":441,"props":2638,"children":2639},{},[2640],{"type":433,"value":2641},"ES5 严格模式下，字面量中不允出现许同一个属性的名字声明和存取器声明，但这个限制在 ES6 被取消了。为什么要取消，没搞懂。",{"type":427,"tag":452,"props":2643,"children":2645},{"className":685,"code":2644,"language":687,"meta":421,"style":421},"var obj={\n  set test(x){\n    c='other';\n  },\n  get test(){\n    return c\n  },\n  // 经过测试发现，声明按照只有最后一个生效，\n  // 比如下面这行会覆盖上面两个属性存取器\n  test: 'test'\n}\n",[2646],{"type":427,"tag":459,"props":2647,"children":2648},{"__ignoreMap":421},[2649,2670,2697,2726,2734,2751,2764,2771,2779,2787,2811],{"type":427,"tag":463,"props":2650,"children":2651},{"class":465,"line":466},[2652,2657,2662,2666],{"type":427,"tag":463,"props":2653,"children":2654},{"style":1020},[2655],{"type":433,"value":2656},"var",{"type":427,"tag":463,"props":2658,"children":2659},{"style":697},[2660],{"type":433,"value":2661}," obj",{"type":427,"tag":463,"props":2663,"children":2664},{"style":493},[2665],{"type":433,"value":1895},{"type":427,"tag":463,"props":2667,"children":2668},{"style":703},[2669],{"type":433,"value":1770},{"type":427,"tag":463,"props":2671,"children":2672},{"class":465,"line":756},[2673,2678,2683,2687,2692],{"type":427,"tag":463,"props":2674,"children":2675},{"style":1020},[2676],{"type":433,"value":2677},"  set",{"type":427,"tag":463,"props":2679,"children":2681},{"style":2680},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[2682],{"type":433,"value":2046},{"type":427,"tag":463,"props":2684,"children":2685},{"style":703},[2686],{"type":433,"value":717},{"type":427,"tag":463,"props":2688,"children":2689},{"style":1647},[2690],{"type":433,"value":2691},"x",{"type":427,"tag":463,"props":2693,"children":2694},{"style":703},[2695],{"type":433,"value":2696},"){\n",{"type":427,"tag":463,"props":2698,"children":2699},{"class":465,"line":1400},[2700,2705,2709,2713,2718,2722],{"type":427,"tag":463,"props":2701,"children":2702},{"style":697},[2703],{"type":433,"value":2704},"    c",{"type":427,"tag":463,"props":2706,"children":2707},{"style":493},[2708],{"type":433,"value":1895},{"type":427,"tag":463,"props":2710,"children":2711},{"style":476},[2712],{"type":433,"value":490},{"type":427,"tag":463,"props":2714,"children":2715},{"style":482},[2716],{"type":433,"value":2717},"other",{"type":427,"tag":463,"props":2719,"children":2720},{"style":476},[2721],{"type":433,"value":490},{"type":427,"tag":463,"props":2723,"children":2724},{"style":703},[2725],{"type":433,"value":1835},{"type":427,"tag":463,"props":2727,"children":2728},{"class":465,"line":1441},[2729],{"type":427,"tag":463,"props":2730,"children":2731},{"style":703},[2732],{"type":433,"value":2733},"  },\n",{"type":427,"tag":463,"props":2735,"children":2736},{"class":465,"line":1450},[2737,2742,2746],{"type":427,"tag":463,"props":2738,"children":2739},{"style":1020},[2740],{"type":433,"value":2741},"  get",{"type":427,"tag":463,"props":2743,"children":2744},{"style":2680},[2745],{"type":433,"value":2046},{"type":427,"tag":463,"props":2747,"children":2748},{"style":703},[2749],{"type":433,"value":2750},"(){\n",{"type":427,"tag":463,"props":2752,"children":2753},{"class":465,"line":1485},[2754,2759],{"type":427,"tag":463,"props":2755,"children":2756},{"style":1724},[2757],{"type":433,"value":2758},"    return",{"type":427,"tag":463,"props":2760,"children":2761},{"style":697},[2762],{"type":433,"value":2763}," c\n",{"type":427,"tag":463,"props":2765,"children":2766},{"class":465,"line":1522},[2767],{"type":427,"tag":463,"props":2768,"children":2769},{"style":703},[2770],{"type":433,"value":2733},{"type":427,"tag":463,"props":2772,"children":2773},{"class":465,"line":1530},[2774],{"type":427,"tag":463,"props":2775,"children":2776},{"style":750},[2777],{"type":433,"value":2778},"  // 经过测试发现，声明按照只有最后一个生效，\n",{"type":427,"tag":463,"props":2780,"children":2781},{"class":465,"line":1557},[2782],{"type":427,"tag":463,"props":2783,"children":2784},{"style":750},[2785],{"type":433,"value":2786},"  // 比如下面这行会覆盖上面两个属性存取器\n",{"type":427,"tag":463,"props":2788,"children":2789},{"class":465,"line":2133},[2790,2795,2799,2803,2807],{"type":427,"tag":463,"props":2791,"children":2792},{"style":1418},[2793],{"type":433,"value":2794},"  test",{"type":427,"tag":463,"props":2796,"children":2797},{"style":703},[2798],{"type":433,"value":1880},{"type":427,"tag":463,"props":2800,"children":2801},{"style":476},[2802],{"type":433,"value":479},{"type":427,"tag":463,"props":2804,"children":2805},{"style":482},[2806],{"type":433,"value":1746},{"type":427,"tag":463,"props":2808,"children":2809},{"style":476},[2810],{"type":433,"value":1397},{"type":427,"tag":463,"props":2812,"children":2813},{"class":465,"line":2193},[2814],{"type":427,"tag":463,"props":2815,"children":2816},{"style":703},[2817],{"type":433,"value":1447},{"type":427,"tag":441,"props":2819,"children":2820},{},[2821],{"type":433,"value":2822},"ES6 的 class 本质上是声明构造器的一种方式，因而所谓类继承，其实也是传统原型继承模式的一种表现方式。extends 类似以下代码。",{"type":427,"tag":452,"props":2824,"children":2826},{"className":685,"code":2825,"language":687,"meta":421,"style":421},"// class A extends B { constructor() { super(/* 传入参数 */) } }\nA.prototype = new B(/* 传入参数 */)\nA.prototype.constructor = A\n",[2827],{"type":427,"tag":459,"props":2828,"children":2829},{"__ignoreMap":421},[2830,2838,2882],{"type":427,"tag":463,"props":2831,"children":2832},{"class":465,"line":466},[2833],{"type":427,"tag":463,"props":2834,"children":2835},{"style":750},[2836],{"type":433,"value":2837},"// class A extends B { constructor() { super(/* 传入参数 */) } }\n",{"type":427,"tag":463,"props":2839,"children":2840},{"class":465,"line":756},[2841,2846,2850,2855,2859,2864,2869,2873,2878],{"type":427,"tag":463,"props":2842,"children":2844},{"style":2843},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-default:#005CC5;--shiki-default-font-style:inherit;--shiki-dark:#79B8FF;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[2845],{"type":433,"value":1457},{"type":427,"tag":463,"props":2847,"children":2848},{"style":703},[2849],{"type":433,"value":706},{"type":427,"tag":463,"props":2851,"children":2852},{"style":1454},[2853],{"type":433,"value":2854},"prototype",{"type":427,"tag":463,"props":2856,"children":2857},{"style":493},[2858],{"type":433,"value":1384},{"type":427,"tag":463,"props":2860,"children":2861},{"style":493},[2862],{"type":433,"value":2863}," new",{"type":427,"tag":463,"props":2865,"children":2866},{"style":709},[2867],{"type":433,"value":2868}," B",{"type":427,"tag":463,"props":2870,"children":2871},{"style":697},[2872],{"type":433,"value":717},{"type":427,"tag":463,"props":2874,"children":2875},{"style":750},[2876],{"type":433,"value":2877},"/* 传入参数 */",{"type":427,"tag":463,"props":2879,"children":2880},{"style":697},[2881],{"type":433,"value":1438},{"type":427,"tag":463,"props":2883,"children":2884},{"class":465,"line":1400},[2885,2889,2893,2897,2901,2906,2910],{"type":427,"tag":463,"props":2886,"children":2887},{"style":2843},[2888],{"type":433,"value":1457},{"type":427,"tag":463,"props":2890,"children":2891},{"style":703},[2892],{"type":433,"value":706},{"type":427,"tag":463,"props":2894,"children":2895},{"style":1454},[2896],{"type":433,"value":2854},{"type":427,"tag":463,"props":2898,"children":2899},{"style":703},[2900],{"type":433,"value":706},{"type":427,"tag":463,"props":2902,"children":2903},{"style":1454},[2904],{"type":433,"value":2905},"constructor",{"type":427,"tag":463,"props":2907,"children":2908},{"style":493},[2909],{"type":433,"value":1384},{"type":427,"tag":463,"props":2911,"children":2912},{"style":1454},[2913],{"type":433,"value":2914}," A\n",{"type":427,"tag":441,"props":2916,"children":2917},{},[2918],{"type":433,"value":2919},"使用 class 声明的代码是处于严格模式的，这意味这 extends 声明中的代码也同样会处于严格模式，当然，必须是 extends 字面量声明（正常代码几乎不会这么做）。",{"type":427,"tag":441,"props":2921,"children":2922},{},[2923],{"type":433,"value":2924},"类的静态成员方法也可以使用 super.x() 的方式调用，只是 this 会绑定到类的 constructor 上。",{"type":427,"tag":441,"props":2926,"children":2927},{},[2928],{"type":433,"value":2929},"使用 Object.getOwnPropertyNames 可以列举对象的内置属性，但是规范只是推荐性质地约定了其中部分属性名，所以具体实现依赖引擎。使用 for...in 可以列举对象的成员名，但是顺序不可控，而使用 for...of 列举对象的成员值其顺序是可控的，只是它是调用对象内置的迭代器。严谨一点可以说 for...of 是列举“集合成员”而不是“对象成员”，假设你给数组对象新增了 'test' 名字的属性，那么 for...of 是不会遍历其值的。",{"type":427,"tag":441,"props":2931,"children":2932},{},[2933],{"type":433,"value":2934},"总结一下遍历对象成员的方法：",{"type":427,"tag":1035,"props":2936,"children":2937},{},[2938,2962],{"type":427,"tag":1039,"props":2939,"children":2940},{},[2941],{"type":427,"tag":1043,"props":2942,"children":2943},{},[2944,2949,2954,2958],{"type":427,"tag":1047,"props":2945,"children":2946},{},[2947],{"type":433,"value":2948},"键名",{"type":427,"tag":1047,"props":2950,"children":2951},{},[2952],{"type":433,"value":2953},"显隐式",{"type":427,"tag":1047,"props":2955,"children":2956},{},[2957],{"type":433,"value":430},{"type":427,"tag":1047,"props":2959,"children":2960},{},[2961],{"type":433,"value":1056},{"type":427,"tag":1058,"props":2963,"children":2964},{},[2965,2988,3008,3030],{"type":427,"tag":1043,"props":2966,"children":2967},{},[2968,2973,2978,2983],{"type":427,"tag":1065,"props":2969,"children":2970},{},[2971],{"type":433,"value":2972},"一般键名",{"type":427,"tag":1065,"props":2974,"children":2975},{},[2976],{"type":433,"value":2977},"显式",{"type":427,"tag":1065,"props":2979,"children":2980},{},[2981],{"type":433,"value":2982},"for...in",{"type":427,"tag":1065,"props":2984,"children":2985},{},[2986],{"type":433,"value":2987},"可列举的成员名（包含原型链）",{"type":427,"tag":1043,"props":2989,"children":2990},{},[2991,2995,2999,3004],{"type":427,"tag":1065,"props":2992,"children":2993},{},[2994],{"type":433,"value":2972},{"type":427,"tag":1065,"props":2996,"children":2997},{},[2998],{"type":433,"value":2977},{"type":427,"tag":1065,"props":3000,"children":3001},{},[3002],{"type":433,"value":3003},"Object.prototype.map、Object.prototype.entries、...",{"type":427,"tag":1065,"props":3005,"children":3006},{},[3007],{"type":433,"value":1308},{"type":427,"tag":1043,"props":3009,"children":3010},{},[3011,3015,3020,3025],{"type":427,"tag":1065,"props":3012,"children":3013},{},[3014],{"type":433,"value":2972},{"type":427,"tag":1065,"props":3016,"children":3017},{},[3018],{"type":433,"value":3019},"显式 & 隐式",{"type":427,"tag":1065,"props":3021,"children":3022},{},[3023],{"type":433,"value":3024},"Object.getOwnPropertyNames()",{"type":427,"tag":1065,"props":3026,"children":3027},{},[3028],{"type":433,"value":3029},"所有非符号的自由属性名",{"type":427,"tag":1043,"props":3031,"children":3032},{},[3033,3038,3042,3047],{"type":427,"tag":1065,"props":3034,"children":3035},{},[3036],{"type":433,"value":3037},"符号键名键名",{"type":427,"tag":1065,"props":3039,"children":3040},{},[3041],{"type":433,"value":3019},{"type":427,"tag":1065,"props":3043,"children":3044},{},[3045],{"type":433,"value":3046},"Object.getOwnPropertySymbols()",{"type":427,"tag":1065,"props":3048,"children":3049},{},[3050],{"type":433,"value":3051},"所有符号键名的自有属性名",{"type":427,"tag":441,"props":3053,"children":3054},{},[3055,3057,3062,3064,3068],{"type":433,"value":3056},"非常老的引擎中可能不支持 in 运算符，一种比 obj",{"type":427,"tag":463,"props":3058,"children":3059},{},[3060],{"type":433,"value":3061},"prop",{"type":433,"value":3063}," 更好的替代方案是 typeof(obj",{"type":427,"tag":463,"props":3065,"children":3066},{},[3067],{"type":433,"value":3061},{"type":433,"value":3069},") !== 'undefined'，因为前者会因隐式转换检测不出来某些假值。",{"type":427,"tag":441,"props":3071,"children":3072},{},[3073],{"type":433,"value":3074},"delete 运算符有些特殊的地方：",{"type":427,"tag":541,"props":3076,"children":3077},{},[3078,3083],{"type":427,"tag":545,"props":3079,"children":3080},{},[3081],{"type":433,"value":3082},"可以删除某些全局属性，比如 window.isNaN，但是如果全局属性是通过 var 声明然后挂载到 window 上那就无法删除了",{"type":427,"tag":545,"props":3084,"children":3085},{},[3086],{"type":433,"value":3087},"只在尝试删除不能被删除的属性才返回 false，其他时候，删除一个不存在的属性（删除继承得来的属性）都会返回 true",{"type":427,"tag":435,"props":3089,"children":3091},{"id":3090},"原型继承",[3092],{"type":433,"value":3090},{"type":427,"tag":441,"props":3094,"children":3095},{},[3096],{"type":433,"value":3097},"一个对象的继承特性有三种实现方案，基于类、基于原型或是基于元类。JS 使用原型继承实现对象系统，并基于原型继承实现了具备类继承特征的对象系统。",{"type":427,"tag":441,"props":3099,"children":3100},{},[3101],{"type":433,"value":3102},"对象的构造过程可以简单地理解为“对原型的复制”，但是复制的时机是一个问题，可以在构造时就完整复制一个新对象，但这样内存消耗过大；类似操作系统动态链接库，它采用了写时复制，也就是在对象发生读操作时直接读原型，发生写操作时再完整复制出一个新对象来，以减轻内存消耗；JS 采用了更细粒度的方法，在每个对象中维护了一个成员表，表中只维护对象的“自有属性”。所以在 JS 的原型继承实现中必须保证：",{"type":427,"tag":541,"props":3104,"children":3105},{},[3106,3111],{"type":427,"tag":545,"props":3107,"children":3108},{},[3109],{"type":433,"value":3110},"读对象的属性时优先读取对象的自有属性表",{"type":427,"tag":545,"props":3112,"children":3113},{},[3114],{"type":433,"value":3115},"如果没有在自有属性表上找到指定属性，则尝试遍历对象原型，以及原型的原型，直到访问为空或是找到该属性。",{"type":427,"tag":441,"props":3117,"children":3118},{},[3119],{"type":433,"value":3120},"也由于自有属性表的存在，在实现原型继承中的属性继承时，子类的属性的元属性如读写性不会继承父类，而是在自有属性表中进行维护。",{"type":427,"tag":441,"props":3122,"children":3123},{},[3124],{"type":433,"value":3125},"函数与构造器之间没有明显的界限，唯一的区别只在于原型的 prototype 属性是不是一个有意义的值。ES6 之后的对象方法没有该属性，所以说对象方法也就不能被作为构造器调用。但是很遗憾，没复现，可能哪里理解有偏差：",{"type":427,"tag":452,"props":3127,"children":3129},{"className":685,"code":3128,"language":687,"meta":421,"style":421},"function test () {}\nvar a = { testb () {} }\na.testb.prototype = test.prototype\nnew a.testb() // TypeError\n",[3130],{"type":427,"tag":459,"props":3131,"children":3132},{"__ignoreMap":421},[3133,3153,3192,3233],{"type":427,"tag":463,"props":3134,"children":3135},{"class":465,"line":466},[3136,3140,3144,3148],{"type":427,"tag":463,"props":3137,"children":3138},{"style":1020},[3139],{"type":433,"value":1346},{"type":427,"tag":463,"props":3141,"children":3142},{"style":709},[3143],{"type":433,"value":2046},{"type":427,"tag":463,"props":3145,"children":3146},{"style":703},[3147],{"type":433,"value":1356},{"type":427,"tag":463,"props":3149,"children":3150},{"style":703},[3151],{"type":433,"value":3152}," {}\n",{"type":427,"tag":463,"props":3154,"children":3155},{"class":465,"line":756},[3156,3160,3165,3169,3173,3178,3182,3187],{"type":427,"tag":463,"props":3157,"children":3158},{"style":1020},[3159],{"type":433,"value":2656},{"type":427,"tag":463,"props":3161,"children":3162},{"style":697},[3163],{"type":433,"value":3164}," a ",{"type":427,"tag":463,"props":3166,"children":3167},{"style":493},[3168],{"type":433,"value":1895},{"type":427,"tag":463,"props":3170,"children":3171},{"style":703},[3172],{"type":433,"value":1732},{"type":427,"tag":463,"props":3174,"children":3175},{"style":2680},[3176],{"type":433,"value":3177}," testb",{"type":427,"tag":463,"props":3179,"children":3180},{"style":703},[3181],{"type":433,"value":1356},{"type":427,"tag":463,"props":3183,"children":3184},{"style":703},[3185],{"type":433,"value":3186}," {}",{"type":427,"tag":463,"props":3188,"children":3189},{"style":703},[3190],{"type":433,"value":3191}," }\n",{"type":427,"tag":463,"props":3193,"children":3194},{"class":465,"line":1400},[3195,3199,3203,3208,3212,3216,3220,3224,3228],{"type":427,"tag":463,"props":3196,"children":3197},{"style":697},[3198],{"type":433,"value":524},{"type":427,"tag":463,"props":3200,"children":3201},{"style":703},[3202],{"type":433,"value":706},{"type":427,"tag":463,"props":3204,"children":3205},{"style":697},[3206],{"type":433,"value":3207},"testb",{"type":427,"tag":463,"props":3209,"children":3210},{"style":703},[3211],{"type":433,"value":706},{"type":427,"tag":463,"props":3213,"children":3214},{"style":1454},[3215],{"type":433,"value":2854},{"type":427,"tag":463,"props":3217,"children":3218},{"style":493},[3219],{"type":433,"value":1384},{"type":427,"tag":463,"props":3221,"children":3222},{"style":2843},[3223],{"type":433,"value":2046},{"type":427,"tag":463,"props":3225,"children":3226},{"style":703},[3227],{"type":433,"value":706},{"type":427,"tag":463,"props":3229,"children":3230},{"style":1454},[3231],{"type":433,"value":3232},"prototype\n",{"type":427,"tag":463,"props":3234,"children":3235},{"class":465,"line":1441},[3236,3240,3245,3249,3253,3257],{"type":427,"tag":463,"props":3237,"children":3238},{"style":493},[3239],{"type":433,"value":1536},{"type":427,"tag":463,"props":3241,"children":3242},{"style":697},[3243],{"type":433,"value":3244}," a",{"type":427,"tag":463,"props":3246,"children":3247},{"style":703},[3248],{"type":433,"value":706},{"type":427,"tag":463,"props":3250,"children":3251},{"style":709},[3252],{"type":433,"value":3207},{"type":427,"tag":463,"props":3254,"children":3255},{"style":697},[3256],{"type":433,"value":851},{"type":427,"tag":463,"props":3258,"children":3259},{"style":750},[3260],{"type":433,"value":3261},"// TypeError\n",{"type":427,"tag":441,"props":3263,"children":3264},{},[3265,3267,3275],{"type":433,"value":3266},"在",{"type":427,"tag":524,"props":3268,"children":3272},{"href":3269,"rel":3270},"https://262.ecma-international.org/12.0/#table-additional-essential-internal-methods-of-function-objects",[3271],"nofollow",[3273],{"type":433,"value":3274},"规范",{"type":433,"value":3276},"里只中找到函数对象对内部方法 [[constructor]] 的描述：没有实现内部构造器方法的函数对象不能作为构造器。",{"type":427,"tag":441,"props":3278,"children":3279},{},[3280],{"type":433,"value":3281},"最简单和直观的实现继承的方法是修改构造器的 prototype 属性以维护一个显式的原型链，这种方法也被称为“构造器原型链”。",{"type":427,"tag":452,"props":3283,"children":3285},{"className":685,"code":3284,"language":687,"meta":421,"style":421},"function Parent () {}\nfunction Child () {}\nChild.prototype = new Parent()\n",[3286],{"type":427,"tag":459,"props":3287,"children":3288},{"__ignoreMap":421},[3289,3309,3329],{"type":427,"tag":463,"props":3290,"children":3291},{"class":465,"line":466},[3292,3296,3301,3305],{"type":427,"tag":463,"props":3293,"children":3294},{"style":1020},[3295],{"type":433,"value":1346},{"type":427,"tag":463,"props":3297,"children":3298},{"style":709},[3299],{"type":433,"value":3300}," Parent",{"type":427,"tag":463,"props":3302,"children":3303},{"style":703},[3304],{"type":433,"value":1356},{"type":427,"tag":463,"props":3306,"children":3307},{"style":703},[3308],{"type":433,"value":3152},{"type":427,"tag":463,"props":3310,"children":3311},{"class":465,"line":756},[3312,3316,3321,3325],{"type":427,"tag":463,"props":3313,"children":3314},{"style":1020},[3315],{"type":433,"value":1346},{"type":427,"tag":463,"props":3317,"children":3318},{"style":709},[3319],{"type":433,"value":3320}," Child",{"type":427,"tag":463,"props":3322,"children":3323},{"style":703},[3324],{"type":433,"value":1356},{"type":427,"tag":463,"props":3326,"children":3327},{"style":703},[3328],{"type":433,"value":3152},{"type":427,"tag":463,"props":3330,"children":3331},{"class":465,"line":1400},[3332,3337,3341,3345,3349,3353,3357],{"type":427,"tag":463,"props":3333,"children":3334},{"style":2843},[3335],{"type":433,"value":3336},"Child",{"type":427,"tag":463,"props":3338,"children":3339},{"style":703},[3340],{"type":433,"value":706},{"type":427,"tag":463,"props":3342,"children":3343},{"style":1454},[3344],{"type":433,"value":2854},{"type":427,"tag":463,"props":3346,"children":3347},{"style":493},[3348],{"type":433,"value":1384},{"type":427,"tag":463,"props":3350,"children":3351},{"style":493},[3352],{"type":433,"value":2863},{"type":427,"tag":463,"props":3354,"children":3355},{"style":709},[3356],{"type":433,"value":3300},{"type":427,"tag":463,"props":3358,"children":3359},{"style":697},[3360],{"type":433,"value":3361},"()\n",{"type":427,"tag":441,"props":3363,"children":3364},{},[3365],{"type":433,"value":3366},"不过，由于原型上的 constructor 属性会回指构造函数，所以这种方法暗示 Child 的实例是由 Parent 构造的，显然是错误的，需要进行修改。",{"type":427,"tag":452,"props":3368,"children":3370},{"className":685,"code":3369,"language":687,"meta":421,"style":421},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\nChild.prototype.constructor = Child\n",[3371],{"type":427,"tag":459,"props":3372,"children":3373},{"__ignoreMap":421},[3374,3382],{"type":427,"tag":463,"props":3375,"children":3376},{"class":465,"line":466},[3377],{"type":427,"tag":463,"props":3378,"children":3379},{"style":750},[3380],{"type":433,"value":3381},"// 这种方法动态地修改了原型（有点“野马脱缰”了）\n",{"type":427,"tag":463,"props":3383,"children":3384},{"class":465,"line":756},[3385,3389,3393,3397,3401,3405,3409],{"type":427,"tag":463,"props":3386,"children":3387},{"style":2843},[3388],{"type":433,"value":3336},{"type":427,"tag":463,"props":3390,"children":3391},{"style":703},[3392],{"type":433,"value":706},{"type":427,"tag":463,"props":3394,"children":3395},{"style":1454},[3396],{"type":433,"value":2854},{"type":427,"tag":463,"props":3398,"children":3399},{"style":703},[3400],{"type":433,"value":706},{"type":427,"tag":463,"props":3402,"children":3403},{"style":1454},[3404],{"type":433,"value":2905},{"type":427,"tag":463,"props":3406,"children":3407},{"style":493},[3408],{"type":433,"value":1384},{"type":427,"tag":463,"props":3410,"children":3411},{"style":697},[3412],{"type":433,"value":3413}," Child\n",{"type":427,"tag":452,"props":3415,"children":3417},{"className":685,"code":3416,"language":687,"meta":421,"style":421},"// 这种方法叫做圣杯模式\nfunction Parent () {}\nfunction Child () {\n  this.constructor = Child\n}\nChild.prototype = new Parent()\n",[3418],{"type":427,"tag":459,"props":3419,"children":3420},{"__ignoreMap":421},[3421,3429,3448,3467,3490,3497],{"type":427,"tag":463,"props":3422,"children":3423},{"class":465,"line":466},[3424],{"type":427,"tag":463,"props":3425,"children":3426},{"style":750},[3427],{"type":433,"value":3428},"// 这种方法叫做圣杯模式\n",{"type":427,"tag":463,"props":3430,"children":3431},{"class":465,"line":756},[3432,3436,3440,3444],{"type":427,"tag":463,"props":3433,"children":3434},{"style":1020},[3435],{"type":433,"value":1346},{"type":427,"tag":463,"props":3437,"children":3438},{"style":709},[3439],{"type":433,"value":3300},{"type":427,"tag":463,"props":3441,"children":3442},{"style":703},[3443],{"type":433,"value":1356},{"type":427,"tag":463,"props":3445,"children":3446},{"style":703},[3447],{"type":433,"value":3152},{"type":427,"tag":463,"props":3449,"children":3450},{"class":465,"line":1400},[3451,3455,3459,3463],{"type":427,"tag":463,"props":3452,"children":3453},{"style":1020},[3454],{"type":433,"value":1346},{"type":427,"tag":463,"props":3456,"children":3457},{"style":709},[3458],{"type":433,"value":3320},{"type":427,"tag":463,"props":3460,"children":3461},{"style":703},[3462],{"type":433,"value":1356},{"type":427,"tag":463,"props":3464,"children":3465},{"style":703},[3466],{"type":433,"value":1361},{"type":427,"tag":463,"props":3468,"children":3469},{"class":465,"line":1441},[3470,3474,3478,3482,3486],{"type":427,"tag":463,"props":3471,"children":3472},{"style":1367},[3473],{"type":433,"value":1370},{"type":427,"tag":463,"props":3475,"children":3476},{"style":703},[3477],{"type":433,"value":706},{"type":427,"tag":463,"props":3479,"children":3480},{"style":1454},[3481],{"type":433,"value":2905},{"type":427,"tag":463,"props":3483,"children":3484},{"style":493},[3485],{"type":433,"value":1384},{"type":427,"tag":463,"props":3487,"children":3488},{"style":697},[3489],{"type":433,"value":3413},{"type":427,"tag":463,"props":3491,"children":3492},{"class":465,"line":1450},[3493],{"type":427,"tag":463,"props":3494,"children":3495},{"style":703},[3496],{"type":433,"value":1447},{"type":427,"tag":463,"props":3498,"children":3499},{"class":465,"line":1485},[3500,3504,3508,3512,3516,3520,3524],{"type":427,"tag":463,"props":3501,"children":3502},{"style":2843},[3503],{"type":433,"value":3336},{"type":427,"tag":463,"props":3505,"children":3506},{"style":703},[3507],{"type":433,"value":706},{"type":427,"tag":463,"props":3509,"children":3510},{"style":1454},[3511],{"type":433,"value":2854},{"type":427,"tag":463,"props":3513,"children":3514},{"style":493},[3515],{"type":433,"value":1384},{"type":427,"tag":463,"props":3517,"children":3518},{"style":493},[3519],{"type":433,"value":2863},{"type":427,"tag":463,"props":3521,"children":3522},{"style":709},[3523],{"type":433,"value":3300},{"type":427,"tag":463,"props":3525,"children":3526},{"style":697},[3527],{"type":433,"value":3361},{"type":427,"tag":441,"props":3529,"children":3530},{},[3531],{"type":433,"value":3532},"修改原型是一种动态语言独有的特性，代表了继承层次可以“从无到有”的过程，理论上我们可以先构建一个没有任何成员的类属关系的继承系统，然后通过不断地修改原型，从而获得一个完整的对象系统。7",{"type":427,"tag":435,"props":3534,"children":3536},{"id":3535},"类继承",[3537],{"type":433,"value":3535},{"type":427,"tag":441,"props":3539,"children":3540},{},[3541],{"type":433,"value":3542},"JS 中的类继承本质上还是通过原型继承实现的。使用类继承时，不仅会维护类和类之间的层级关系，也会维护对象（类也是对象）原型之间的继承关系，后者是 JS 自带的语义。使用原型继承仿制类继承关系的代码类似：",{"type":427,"tag":452,"props":3544,"children":3546},{"className":685,"code":3545,"language":687,"meta":421,"style":421},"/* 类声明 */\nclass Parent {}\nclass Child extends Parent {}\n/* 仿制代码 */\nfunction Parent() {}\nfunction Child() {}\nObject.setPrototypeOf(Child, Parent)\nObject.setPrototypeOf(Child.prototype, Parent.prototype)\n",[3547],{"type":427,"tag":459,"props":3548,"children":3549},{"__ignoreMap":421},[3550,3558,3575,3601,3609,3628,3647,3677],{"type":427,"tag":463,"props":3551,"children":3552},{"class":465,"line":466},[3553],{"type":427,"tag":463,"props":3554,"children":3555},{"style":750},[3556],{"type":433,"value":3557},"/* 类声明 */\n",{"type":427,"tag":463,"props":3559,"children":3560},{"class":465,"line":756},[3561,3566,3571],{"type":427,"tag":463,"props":3562,"children":3563},{"style":1020},[3564],{"type":433,"value":3565},"class",{"type":427,"tag":463,"props":3567,"children":3569},{"style":3568},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[3570],{"type":433,"value":3300},{"type":427,"tag":463,"props":3572,"children":3573},{"style":703},[3574],{"type":433,"value":3152},{"type":427,"tag":463,"props":3576,"children":3577},{"class":465,"line":1400},[3578,3582,3586,3592,3597],{"type":427,"tag":463,"props":3579,"children":3580},{"style":1020},[3581],{"type":433,"value":3565},{"type":427,"tag":463,"props":3583,"children":3584},{"style":3568},[3585],{"type":433,"value":3320},{"type":427,"tag":463,"props":3587,"children":3589},{"style":3588},"--shiki-light:#9C3EDA;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[3590],{"type":433,"value":3591}," extends",{"type":427,"tag":463,"props":3593,"children":3595},{"style":3594},"--shiki-light:#E2931D;--shiki-light-font-style:inherit;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-font-style:inherit;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-font-style:inherit;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-font-style:italic;--shiki-sepia-text-decoration:underline",[3596],{"type":433,"value":3300},{"type":427,"tag":463,"props":3598,"children":3599},{"style":703},[3600],{"type":433,"value":3152},{"type":427,"tag":463,"props":3602,"children":3603},{"class":465,"line":1441},[3604],{"type":427,"tag":463,"props":3605,"children":3606},{"style":750},[3607],{"type":433,"value":3608},"/* 仿制代码 */\n",{"type":427,"tag":463,"props":3610,"children":3611},{"class":465,"line":1450},[3612,3616,3620,3624],{"type":427,"tag":463,"props":3613,"children":3614},{"style":1020},[3615],{"type":433,"value":1346},{"type":427,"tag":463,"props":3617,"children":3618},{"style":709},[3619],{"type":433,"value":3300},{"type":427,"tag":463,"props":3621,"children":3622},{"style":703},[3623],{"type":433,"value":1069},{"type":427,"tag":463,"props":3625,"children":3626},{"style":703},[3627],{"type":433,"value":3152},{"type":427,"tag":463,"props":3629,"children":3630},{"class":465,"line":1485},[3631,3635,3639,3643],{"type":427,"tag":463,"props":3632,"children":3633},{"style":1020},[3634],{"type":433,"value":1346},{"type":427,"tag":463,"props":3636,"children":3637},{"style":709},[3638],{"type":433,"value":3320},{"type":427,"tag":463,"props":3640,"children":3641},{"style":703},[3642],{"type":433,"value":1069},{"type":427,"tag":463,"props":3644,"children":3645},{"style":703},[3646],{"type":433,"value":3152},{"type":427,"tag":463,"props":3648,"children":3649},{"class":465,"line":1522},[3650,3654,3658,3663,3668,3672],{"type":427,"tag":463,"props":3651,"children":3652},{"style":697},[3653],{"type":433,"value":700},{"type":427,"tag":463,"props":3655,"children":3656},{"style":703},[3657],{"type":433,"value":706},{"type":427,"tag":463,"props":3659,"children":3660},{"style":709},[3661],{"type":433,"value":3662},"setPrototypeOf",{"type":427,"tag":463,"props":3664,"children":3665},{"style":697},[3666],{"type":433,"value":3667},"(Child",{"type":427,"tag":463,"props":3669,"children":3670},{"style":703},[3671],{"type":433,"value":733},{"type":427,"tag":463,"props":3673,"children":3674},{"style":697},[3675],{"type":433,"value":3676}," Parent)\n",{"type":427,"tag":463,"props":3678,"children":3679},{"class":465,"line":1530},[3680,3684,3688,3692,3696,3700,3704,3708,3712,3716,3720,3724],{"type":427,"tag":463,"props":3681,"children":3682},{"style":697},[3683],{"type":433,"value":700},{"type":427,"tag":463,"props":3685,"children":3686},{"style":703},[3687],{"type":433,"value":706},{"type":427,"tag":463,"props":3689,"children":3690},{"style":709},[3691],{"type":433,"value":3662},{"type":427,"tag":463,"props":3693,"children":3694},{"style":697},[3695],{"type":433,"value":717},{"type":427,"tag":463,"props":3697,"children":3698},{"style":2843},[3699],{"type":433,"value":3336},{"type":427,"tag":463,"props":3701,"children":3702},{"style":703},[3703],{"type":433,"value":706},{"type":427,"tag":463,"props":3705,"children":3706},{"style":1454},[3707],{"type":433,"value":2854},{"type":427,"tag":463,"props":3709,"children":3710},{"style":703},[3711],{"type":433,"value":733},{"type":427,"tag":463,"props":3713,"children":3714},{"style":2843},[3715],{"type":433,"value":3300},{"type":427,"tag":463,"props":3717,"children":3718},{"style":703},[3719],{"type":433,"value":706},{"type":427,"tag":463,"props":3721,"children":3722},{"style":1454},[3723],{"type":433,"value":2854},{"type":427,"tag":463,"props":3725,"children":3726},{"style":697},[3727],{"type":433,"value":1438},{"type":427,"tag":441,"props":3729,"children":3730},{},[3731],{"type":433,"value":3732},"类是静态声明，其内部的成员或方法也是声明，也因此不能直接在声明的方法内部直接引用其名字。",{"type":427,"tag":441,"props":3734,"children":3735},{},[3736],{"type":433,"value":3737},"super 并不是一个运算符，在规范中其只被称为关键字。另外，new 算然是运算符，但是 new.target 的出现打破了这个认知。",{"type":427,"tag":441,"props":3739,"children":3740},{},[3741],{"type":433,"value":3742},"super 有效地解决了调用父类方法的问题，如果不使用 super 关键字，那么只能：",{"type":427,"tag":452,"props":3744,"children":3746},{"className":685,"code":3745,"language":687,"meta":421,"style":421},"object.prototype.method = function () {\n  const thisClass = this.constructor\n  const parentClass = thisClass.prototype.constructor\n  const parentMethod = parentClass.method\n  parentMethod()\n}\n",[3747],{"type":427,"tag":459,"props":3748,"children":3749},{"__ignoreMap":421},[3750,3791,3822,3858,3887,3899],{"type":427,"tag":463,"props":3751,"children":3752},{"class":465,"line":466},[3753,3758,3762,3766,3770,3775,3779,3783,3787],{"type":427,"tag":463,"props":3754,"children":3755},{"style":2843},[3756],{"type":433,"value":3757},"object",{"type":427,"tag":463,"props":3759,"children":3760},{"style":703},[3761],{"type":433,"value":706},{"type":427,"tag":463,"props":3763,"children":3764},{"style":1454},[3765],{"type":433,"value":2854},{"type":427,"tag":463,"props":3767,"children":3768},{"style":703},[3769],{"type":433,"value":706},{"type":427,"tag":463,"props":3771,"children":3772},{"style":709},[3773],{"type":433,"value":3774},"method",{"type":427,"tag":463,"props":3776,"children":3777},{"style":493},[3778],{"type":433,"value":1384},{"type":427,"tag":463,"props":3780,"children":3781},{"style":1020},[3782],{"type":433,"value":1474},{"type":427,"tag":463,"props":3784,"children":3785},{"style":703},[3786],{"type":433,"value":1356},{"type":427,"tag":463,"props":3788,"children":3789},{"style":703},[3790],{"type":433,"value":1361},{"type":427,"tag":463,"props":3792,"children":3793},{"class":465,"line":756},[3794,3799,3804,3808,3813,3817],{"type":427,"tag":463,"props":3795,"children":3796},{"style":1020},[3797],{"type":433,"value":3798},"  const",{"type":427,"tag":463,"props":3800,"children":3801},{"style":1454},[3802],{"type":433,"value":3803}," thisClass",{"type":427,"tag":463,"props":3805,"children":3806},{"style":493},[3807],{"type":433,"value":1384},{"type":427,"tag":463,"props":3809,"children":3810},{"style":1367},[3811],{"type":433,"value":3812}," this",{"type":427,"tag":463,"props":3814,"children":3815},{"style":703},[3816],{"type":433,"value":706},{"type":427,"tag":463,"props":3818,"children":3819},{"style":1454},[3820],{"type":433,"value":3821},"constructor\n",{"type":427,"tag":463,"props":3823,"children":3824},{"class":465,"line":1400},[3825,3829,3834,3838,3842,3846,3850,3854],{"type":427,"tag":463,"props":3826,"children":3827},{"style":1020},[3828],{"type":433,"value":3798},{"type":427,"tag":463,"props":3830,"children":3831},{"style":1454},[3832],{"type":433,"value":3833}," parentClass",{"type":427,"tag":463,"props":3835,"children":3836},{"style":493},[3837],{"type":433,"value":1384},{"type":427,"tag":463,"props":3839,"children":3840},{"style":2843},[3841],{"type":433,"value":3803},{"type":427,"tag":463,"props":3843,"children":3844},{"style":703},[3845],{"type":433,"value":706},{"type":427,"tag":463,"props":3847,"children":3848},{"style":1454},[3849],{"type":433,"value":2854},{"type":427,"tag":463,"props":3851,"children":3852},{"style":703},[3853],{"type":433,"value":706},{"type":427,"tag":463,"props":3855,"children":3856},{"style":1454},[3857],{"type":433,"value":3821},{"type":427,"tag":463,"props":3859,"children":3860},{"class":465,"line":1441},[3861,3865,3870,3874,3878,3882],{"type":427,"tag":463,"props":3862,"children":3863},{"style":1020},[3864],{"type":433,"value":3798},{"type":427,"tag":463,"props":3866,"children":3867},{"style":1454},[3868],{"type":433,"value":3869}," parentMethod",{"type":427,"tag":463,"props":3871,"children":3872},{"style":493},[3873],{"type":433,"value":1384},{"type":427,"tag":463,"props":3875,"children":3876},{"style":697},[3877],{"type":433,"value":3833},{"type":427,"tag":463,"props":3879,"children":3880},{"style":703},[3881],{"type":433,"value":706},{"type":427,"tag":463,"props":3883,"children":3884},{"style":697},[3885],{"type":433,"value":3886},"method\n",{"type":427,"tag":463,"props":3888,"children":3889},{"class":465,"line":1450},[3890,3895],{"type":427,"tag":463,"props":3891,"children":3892},{"style":709},[3893],{"type":433,"value":3894},"  parentMethod",{"type":427,"tag":463,"props":3896,"children":3897},{"style":1418},[3898],{"type":433,"value":3361},{"type":427,"tag":463,"props":3900,"children":3901},{"class":465,"line":1485},[3902],{"type":427,"tag":463,"props":3903,"children":3904},{"style":703},[3905],{"type":433,"value":1447},{"type":427,"tag":441,"props":3907,"children":3908},{},[3909],{"type":433,"value":3910},"super 的指向由几个规则所限制：",{"type":427,"tag":541,"props":3912,"children":3913},{},[3914,3919,3924,3929,3934],{"type":427,"tag":545,"props":3915,"children":3916},{},[3917],{"type":433,"value":3918},"在类构造器中，super 指向父类构造器，this 指向 new 新创建的实例",{"type":427,"tag":545,"props":3920,"children":3921},{},[3922],{"type":433,"value":3923},"在类构造器中，super.xxx 指向父类原型方法 xxx，this 指向 new 新创建的实例",{"type":427,"tag":545,"props":3925,"children":3926},{},[3927],{"type":433,"value":3928},"在类方法中，super.xxx 指向父类原型方法 xxx，this 指向调用此方法的实例",{"type":427,"tag":545,"props":3930,"children":3931},{},[3932],{"type":433,"value":3933},"在静态类方法中，super.xxx 指向父类方法 xxx，this 指向调用此方法的类",{"type":427,"tag":545,"props":3935,"children":3936},{},[3937],{"type":433,"value":3938},"在字面量的方法中，super.xxx 指向字面量的原型方法 xxx，this 指向调用此方法时的 this",{"type":427,"tag":441,"props":3940,"children":3941},{},[3942],{"type":433,"value":3943},"总结可以得出规律：",{"type":427,"tag":541,"props":3945,"children":3946},{},[3947,3952],{"type":427,"tag":545,"props":3948,"children":3949},{},[3950],{"type":433,"value":3951},"super 和 super.xxx 都可以类构造器中使用，但其余情况只能使用 super.xxx",{"type":427,"tag":545,"props":3953,"children":3954},{},[3955],{"type":433,"value":3956},"调用 super.xxx 时，this 绑定的为调用方法时的 this 对象",{"type":427,"tag":441,"props":3958,"children":3959},{},[3960],{"type":433,"value":3961},"super 也是基于声明时所在的对象来进行计算的，就算把对象方法赋值给了其他方法，其绑定的语义也不会随着调用方不同而转移：",{"type":427,"tag":452,"props":3963,"children":3965},{"className":685,"code":3964,"language":687,"meta":421,"style":421},"proto = {data: 'test'}\nobj = { test() { console.log(super.data) } }\nObject.setPrototypeOf(obj, proto)\n\nobj2 = Object.create(null)\nobj2.test = obj.test\nobj2.test() // 'test'\n",[3966],{"type":427,"tag":459,"props":3967,"children":3968},{"__ignoreMap":421},[3969,4010,4080,4109,4117,4156,4190],{"type":427,"tag":463,"props":3970,"children":3971},{"class":465,"line":466},[3972,3977,3981,3985,3990,3994,3998,4002,4006],{"type":427,"tag":463,"props":3973,"children":3974},{"style":697},[3975],{"type":433,"value":3976},"proto ",{"type":427,"tag":463,"props":3978,"children":3979},{"style":493},[3980],{"type":433,"value":1895},{"type":427,"tag":463,"props":3982,"children":3983},{"style":703},[3984],{"type":433,"value":1732},{"type":427,"tag":463,"props":3986,"children":3987},{"style":1418},[3988],{"type":433,"value":3989},"data",{"type":427,"tag":463,"props":3991,"children":3992},{"style":703},[3993],{"type":433,"value":1880},{"type":427,"tag":463,"props":3995,"children":3996},{"style":476},[3997],{"type":433,"value":479},{"type":427,"tag":463,"props":3999,"children":4000},{"style":482},[4001],{"type":433,"value":1746},{"type":427,"tag":463,"props":4003,"children":4004},{"style":476},[4005],{"type":433,"value":490},{"type":427,"tag":463,"props":4007,"children":4008},{"style":703},[4009],{"type":433,"value":1447},{"type":427,"tag":463,"props":4011,"children":4012},{"class":465,"line":756},[4013,4018,4022,4026,4030,4034,4038,4042,4046,4050,4054,4060,4064,4068,4072,4076],{"type":427,"tag":463,"props":4014,"children":4015},{"style":697},[4016],{"type":433,"value":4017},"obj ",{"type":427,"tag":463,"props":4019,"children":4020},{"style":493},[4021],{"type":433,"value":1895},{"type":427,"tag":463,"props":4023,"children":4024},{"style":703},[4025],{"type":433,"value":1732},{"type":427,"tag":463,"props":4027,"children":4028},{"style":2680},[4029],{"type":433,"value":2046},{"type":427,"tag":463,"props":4031,"children":4032},{"style":703},[4033],{"type":433,"value":1069},{"type":427,"tag":463,"props":4035,"children":4036},{"style":703},[4037],{"type":433,"value":1732},{"type":427,"tag":463,"props":4039,"children":4040},{"style":697},[4041],{"type":433,"value":2063},{"type":427,"tag":463,"props":4043,"children":4044},{"style":703},[4045],{"type":433,"value":706},{"type":427,"tag":463,"props":4047,"children":4048},{"style":709},[4049],{"type":433,"value":1415},{"type":427,"tag":463,"props":4051,"children":4052},{"style":1418},[4053],{"type":433,"value":717},{"type":427,"tag":463,"props":4055,"children":4057},{"style":4056},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[4058],{"type":433,"value":4059},"super",{"type":427,"tag":463,"props":4061,"children":4062},{"style":703},[4063],{"type":433,"value":706},{"type":427,"tag":463,"props":4065,"children":4066},{"style":697},[4067],{"type":433,"value":3989},{"type":427,"tag":463,"props":4069,"children":4070},{"style":1418},[4071],{"type":433,"value":747},{"type":427,"tag":463,"props":4073,"children":4074},{"style":703},[4075],{"type":433,"value":1694},{"type":427,"tag":463,"props":4077,"children":4078},{"style":703},[4079],{"type":433,"value":3191},{"type":427,"tag":463,"props":4081,"children":4082},{"class":465,"line":1400},[4083,4087,4091,4095,4100,4104],{"type":427,"tag":463,"props":4084,"children":4085},{"style":697},[4086],{"type":433,"value":700},{"type":427,"tag":463,"props":4088,"children":4089},{"style":703},[4090],{"type":433,"value":706},{"type":427,"tag":463,"props":4092,"children":4093},{"style":709},[4094],{"type":433,"value":3662},{"type":427,"tag":463,"props":4096,"children":4097},{"style":697},[4098],{"type":433,"value":4099},"(obj",{"type":427,"tag":463,"props":4101,"children":4102},{"style":703},[4103],{"type":433,"value":733},{"type":427,"tag":463,"props":4105,"children":4106},{"style":697},[4107],{"type":433,"value":4108}," proto)\n",{"type":427,"tag":463,"props":4110,"children":4111},{"class":465,"line":1441},[4112],{"type":427,"tag":463,"props":4113,"children":4114},{"emptyLinePlaceholder":420},[4115],{"type":433,"value":4116},"\n",{"type":427,"tag":463,"props":4118,"children":4119},{"class":465,"line":1450},[4120,4125,4129,4134,4138,4143,4147,4152],{"type":427,"tag":463,"props":4121,"children":4122},{"style":697},[4123],{"type":433,"value":4124},"obj2 ",{"type":427,"tag":463,"props":4126,"children":4127},{"style":493},[4128],{"type":433,"value":1895},{"type":427,"tag":463,"props":4130,"children":4131},{"style":697},[4132],{"type":433,"value":4133}," Object",{"type":427,"tag":463,"props":4135,"children":4136},{"style":703},[4137],{"type":433,"value":706},{"type":427,"tag":463,"props":4139,"children":4140},{"style":709},[4141],{"type":433,"value":4142},"create",{"type":427,"tag":463,"props":4144,"children":4145},{"style":697},[4146],{"type":433,"value":717},{"type":427,"tag":463,"props":4148,"children":4149},{"style":776},[4150],{"type":433,"value":4151},"null",{"type":427,"tag":463,"props":4153,"children":4154},{"style":697},[4155],{"type":433,"value":1438},{"type":427,"tag":463,"props":4157,"children":4158},{"class":465,"line":1485},[4159,4164,4168,4173,4177,4181,4185],{"type":427,"tag":463,"props":4160,"children":4161},{"style":697},[4162],{"type":433,"value":4163},"obj2",{"type":427,"tag":463,"props":4165,"children":4166},{"style":703},[4167],{"type":433,"value":706},{"type":427,"tag":463,"props":4169,"children":4170},{"style":697},[4171],{"type":433,"value":4172},"test ",{"type":427,"tag":463,"props":4174,"children":4175},{"style":493},[4176],{"type":433,"value":1895},{"type":427,"tag":463,"props":4178,"children":4179},{"style":697},[4180],{"type":433,"value":2661},{"type":427,"tag":463,"props":4182,"children":4183},{"style":703},[4184],{"type":433,"value":706},{"type":427,"tag":463,"props":4186,"children":4187},{"style":697},[4188],{"type":433,"value":4189},"test\n",{"type":427,"tag":463,"props":4191,"children":4192},{"class":465,"line":1522},[4193,4197,4201,4205,4209],{"type":427,"tag":463,"props":4194,"children":4195},{"style":697},[4196],{"type":433,"value":4163},{"type":427,"tag":463,"props":4198,"children":4199},{"style":703},[4200],{"type":433,"value":706},{"type":427,"tag":463,"props":4202,"children":4203},{"style":709},[4204],{"type":433,"value":1746},{"type":427,"tag":463,"props":4206,"children":4207},{"style":697},[4208],{"type":433,"value":851},{"type":427,"tag":463,"props":4210,"children":4211},{"style":750},[4212],{"type":433,"value":4213},"// 'test'\n",{"type":427,"tag":441,"props":4215,"children":4216},{},[4217],{"type":433,"value":4218},"此外，super 在不同的语义下可能指向父类也可能指向父类原型，是为了在语义上同时支持类和原型继承，这也会带来一些困惑，比如想要在类方法中调用父类静态属性时，使用 super 还是做不到（只能使用 Object.getPrototypeOf(thisClass).constructor.xxx 替代），所以对象方法中缺乏一个重要的语法词汇“parent”来指示当前对象在它类继承链上的父类这种关系。",{"type":427,"tag":441,"props":4220,"children":4221},{},[4222],{"type":433,"value":4223},"类继承和原型继承还有一个很不一样的区别：实例生成的时机不一样。原型继承中，实例是由 new 运算符生成的，构造逻辑直接由 new 调用的构造器掌握，而在类继承中，this 实例由 Object 构造，再沿着继承链上的构造器自顶向下执行完成构造过程。所以这引出一条著名的限制：在构造器调用 super 之前，都不能访问 this 实例。",{"type":427,"tag":441,"props":4225,"children":4226},{},[4227],{"type":433,"value":4228},"类如果继承了 null，那么语义上来说，没有办法调用 super、super.xxx。如果不更改默认构造器，那么它就是一个“纯静态类”。",{"type":427,"tag":452,"props":4230,"children":4232},{"className":685,"code":4231,"language":687,"meta":421,"style":421},"class StaticClass extends null {\n  static pow () {}\n}\n",[4233],{"type":427,"tag":459,"props":4234,"children":4235},{"__ignoreMap":421},[4236,4261,4282],{"type":427,"tag":463,"props":4237,"children":4238},{"class":465,"line":466},[4239,4243,4248,4252,4257],{"type":427,"tag":463,"props":4240,"children":4241},{"style":1020},[4242],{"type":433,"value":3565},{"type":427,"tag":463,"props":4244,"children":4245},{"style":3568},[4246],{"type":433,"value":4247}," StaticClass",{"type":427,"tag":463,"props":4249,"children":4250},{"style":3588},[4251],{"type":433,"value":3591},{"type":427,"tag":463,"props":4253,"children":4254},{"style":776},[4255],{"type":433,"value":4256}," null",{"type":427,"tag":463,"props":4258,"children":4259},{"style":703},[4260],{"type":433,"value":1361},{"type":427,"tag":463,"props":4262,"children":4263},{"class":465,"line":756},[4264,4269,4274,4278],{"type":427,"tag":463,"props":4265,"children":4266},{"style":3588},[4267],{"type":433,"value":4268},"  static",{"type":427,"tag":463,"props":4270,"children":4271},{"style":2680},[4272],{"type":433,"value":4273}," pow",{"type":427,"tag":463,"props":4275,"children":4276},{"style":703},[4277],{"type":433,"value":1356},{"type":427,"tag":463,"props":4279,"children":4280},{"style":703},[4281],{"type":433,"value":3152},{"type":427,"tag":463,"props":4283,"children":4284},{"class":465,"line":1400},[4285],{"type":427,"tag":463,"props":4286,"children":4287},{"style":703},[4288],{"type":433,"value":1447},{"type":427,"tag":441,"props":4290,"children":4291},{},[4292],{"type":433,"value":4293},"P196，这个 new.target.prototype 没看懂。",{"type":427,"tag":435,"props":4295,"children":4297},{"id":4296},"对象系统",[4298],{"type":433,"value":4296},{"type":427,"tag":441,"props":4300,"children":4301},{},[4302],{"type":433,"value":4303},"对象系统面对的核心问题是“对象间应该如何组织”。如果有一种规则，能通过把对象之间的联系理清，把对象组织起来，演化为新系统，那么称这个系统是面向对象系统。",{"type":427,"tag":441,"props":4305,"children":4306},{},[4307],{"type":433,"value":4308},"JS 的封装能力很弱，在历史上，只能通过变量作用域来封装变化。其变量作用域只有表达式、函数作用域和全局作用域三种，所以只能模拟经典面向对象中的 public 和 private 两种封装状态。近几年来因讨论大热的类的私有属性，在提案中也有因现 JS 变量作用域太弱而提出新的作用域这种解决方案。",{"type":427,"tag":441,"props":4310,"children":4311},{},[4312],{"type":433,"value":4313},"多态意味着类型的模糊与类型的确认，在某些语言中，被表达为 as 和 is 两种运算。JS 是弱类型且无类型检测，这意味这类型的模糊是自然而然发生的，对象的多态性被转换为了执行时的动态性。类型的确认可以使用 instanceof 运算符，不过也有小小的缺陷，它无法确认类和类之间的继承关系，这种情况下 isPrototypeOf 方法更像 is 运算。",{"type":427,"tag":452,"props":4315,"children":4317},{"className":685,"code":4316,"language":687,"meta":421,"style":421},"class A {}\nclass B extends A {}\nB instanceof A // false\nA.isPrototypeOf(B) // true\n",[4318],{"type":427,"tag":459,"props":4319,"children":4320},{"__ignoreMap":421},[4321,4336,4359,4380],{"type":427,"tag":463,"props":4322,"children":4323},{"class":465,"line":466},[4324,4328,4332],{"type":427,"tag":463,"props":4325,"children":4326},{"style":1020},[4327],{"type":433,"value":3565},{"type":427,"tag":463,"props":4329,"children":4330},{"style":3568},[4331],{"type":433,"value":1351},{"type":427,"tag":463,"props":4333,"children":4334},{"style":703},[4335],{"type":433,"value":3152},{"type":427,"tag":463,"props":4337,"children":4338},{"class":465,"line":756},[4339,4343,4347,4351,4355],{"type":427,"tag":463,"props":4340,"children":4341},{"style":1020},[4342],{"type":433,"value":3565},{"type":427,"tag":463,"props":4344,"children":4345},{"style":3568},[4346],{"type":433,"value":2868},{"type":427,"tag":463,"props":4348,"children":4349},{"style":3588},[4350],{"type":433,"value":3591},{"type":427,"tag":463,"props":4352,"children":4353},{"style":3594},[4354],{"type":433,"value":1351},{"type":427,"tag":463,"props":4356,"children":4357},{"style":703},[4358],{"type":433,"value":3152},{"type":427,"tag":463,"props":4360,"children":4361},{"class":465,"line":1400},[4362,4367,4372,4376],{"type":427,"tag":463,"props":4363,"children":4364},{"style":1454},[4365],{"type":433,"value":4366},"B",{"type":427,"tag":463,"props":4368,"children":4369},{"style":493},[4370],{"type":433,"value":4371}," instanceof",{"type":427,"tag":463,"props":4373,"children":4374},{"style":3568},[4375],{"type":433,"value":1351},{"type":427,"tag":463,"props":4377,"children":4378},{"style":750},[4379],{"type":433,"value":867},{"type":427,"tag":463,"props":4381,"children":4382},{"class":465,"line":1441},[4383,4387,4391,4396,4400,4404,4408],{"type":427,"tag":463,"props":4384,"children":4385},{"style":1454},[4386],{"type":433,"value":1457},{"type":427,"tag":463,"props":4388,"children":4389},{"style":703},[4390],{"type":433,"value":706},{"type":427,"tag":463,"props":4392,"children":4393},{"style":709},[4394],{"type":433,"value":4395},"isPrototypeOf",{"type":427,"tag":463,"props":4397,"children":4398},{"style":697},[4399],{"type":433,"value":717},{"type":427,"tag":463,"props":4401,"children":4402},{"style":1454},[4403],{"type":433,"value":4366},{"type":427,"tag":463,"props":4405,"children":4406},{"style":697},[4407],{"type":433,"value":747},{"type":427,"tag":463,"props":4409,"children":4410},{"style":750},[4411],{"type":433,"value":797},{"type":427,"tag":441,"props":4413,"children":4414},{},[4415],{"type":433,"value":4416},"方法即函数类型的属性，根据其所在的属性表的位置，可以分为对象方法和原型方法两种。",{"type":427,"tag":441,"props":4418,"children":4419},{},[4420],{"type":433,"value":4421},"this 实在函数执行时动态传入的，规则有三：",{"type":427,"tag":541,"props":4423,"children":4424},{},[4425,4430,4435],{"type":427,"tag":545,"props":4426,"children":4427},{},[4428],{"type":433,"value":4429},"当前上下文中的 this（箭头函数和 super、super.xxx）",{"type":427,"tag":545,"props":4431,"children":4432},{},[4433],{"type":433,"value":4434},"根据存取运算符将左操作符作为 this 传入",{"type":427,"tag":545,"props":4436,"children":4437},{},[4438],{"type":433,"value":4439},"使用 call、apply、Reflect.apply、bind 等方法为函数指定 this",{"type":427,"tag":441,"props":4441,"children":4442},{},[4443],{"type":433,"value":4444},"如果函数在调用时得到的 this 值是 undefined 或 null，那么：",{"type":427,"tag":541,"props":4446,"children":4447},{},[4448,4453],{"type":427,"tag":545,"props":4449,"children":4450},{},[4451],{"type":433,"value":4452},"如果运行在严格模式中，不改变 this 的值，否则",{"type":427,"tag":545,"props":4454,"children":4455},{},[4456],{"type":433,"value":4457},"使用全局对象作为 this 值",{"type":427,"tag":441,"props":4459,"children":4460},{},[4461],{"type":433,"value":4462},"在早期对象系统中，所谓 Messages 是指对象的方法，而不是“事件”；在 JS 中，方法是属性存取与函数调用连续运算的效果。从语言层面扔掉“事件系统”的概念，有助于理解引擎实现方面的更多细节。",{"type":427,"tag":441,"props":4464,"children":4465},{},[4466],{"type":433,"value":4467},"类抄写和原型继承正好是互补的两种方案：类抄写的成员访问效率更高，内存占用也更高，而原型继承正好相反。JS 选择了原型继承，增加了 Object.assign 以及 JSON.stringify 等方法用来缩减原型继承链，在 ES6 中还新增了 Object.create、Object.setPrototypeOf 等方法开放应用层访问 JS 对象系统的核心结构，以支持灵活的继承关系，这体现了其函数式、动态性的语言特征。虽然 JS 中的类继承基于原型继承实现，但是其核心理念与其存在矛盾：类继承倾向于在基类中实现更基础、更稳定和更通用的对象性质，以减轻子类和最终实例在实现上的负担。面向更轻量的原型继承还是更深层次类继承，是 JS 语言设计摇摆不定的一个主要体现。在使用时具体选择哪一种对象系统风格，在此给出几点建议：",{"type":427,"tag":541,"props":4469,"children":4470},{},[4471,4476],{"type":427,"tag":545,"props":4472,"children":4473},{},[4474],{"type":433,"value":4475},"在大型系统中采用类继承，其静态的继承关系及支持静态语法检测等特性可以帮助开发者简化大型系统的开发和业务逻辑的实现",{"type":427,"tag":545,"props":4477,"children":4478},{},[4479],{"type":433,"value":4480},"在小型结构或体系的局部中采用原型继承，兼顾优美和灵活的实现",{"type":427,"tag":441,"props":4482,"children":4483},{},[4484],{"type":433,"value":4485},"标准规范下的 JS 拥有 38 个内置对象，再加上 Arguments 对象，一并称为原生对象。某些宿主环境会把自己自己提供的对象也叫做“原生对象”，这个“规范原生对象”不是一个东西，需要区分开来。",{"type":427,"tag":441,"props":4487,"children":4488},{},[4489],{"type":433,"value":4490},"在 JS 的对象系统中，所有对象同可以在某种程度上通过 global 访问得到，甚至 undefined 也是，仅有 Null 对象的实例 null 字面量不在 global 的范围内。",{"type":427,"tag":452,"props":4492,"children":4494},{"className":685,"code":4493,"language":687,"meta":421,"style":421},"// 获得所有原生对象、宿主对象等\nObject.getOwnPropertyNames(global)\n\n// 验证 undefined 是否存在 global 对象中\nObject.getOwnPropertyDescriptor(global, 'undefined') // {value: undefined /* ... */ }\n",[4495],{"type":427,"tag":459,"props":4496,"children":4497},{"__ignoreMap":421},[4498,4506,4527,4534,4542],{"type":427,"tag":463,"props":4499,"children":4500},{"class":465,"line":466},[4501],{"type":427,"tag":463,"props":4502,"children":4503},{"style":750},[4504],{"type":433,"value":4505},"// 获得所有原生对象、宿主对象等\n",{"type":427,"tag":463,"props":4507,"children":4508},{"class":465,"line":756},[4509,4513,4517,4522],{"type":427,"tag":463,"props":4510,"children":4511},{"style":697},[4512],{"type":433,"value":700},{"type":427,"tag":463,"props":4514,"children":4515},{"style":703},[4516],{"type":433,"value":706},{"type":427,"tag":463,"props":4518,"children":4519},{"style":709},[4520],{"type":433,"value":4521},"getOwnPropertyNames",{"type":427,"tag":463,"props":4523,"children":4524},{"style":697},[4525],{"type":433,"value":4526},"(global)\n",{"type":427,"tag":463,"props":4528,"children":4529},{"class":465,"line":1400},[4530],{"type":427,"tag":463,"props":4531,"children":4532},{"emptyLinePlaceholder":420},[4533],{"type":433,"value":4116},{"type":427,"tag":463,"props":4535,"children":4536},{"class":465,"line":1441},[4537],{"type":427,"tag":463,"props":4538,"children":4539},{"style":750},[4540],{"type":433,"value":4541},"// 验证 undefined 是否存在 global 对象中\n",{"type":427,"tag":463,"props":4543,"children":4544},{"class":465,"line":1450},[4545,4549,4553,4558,4563,4567,4571,4576,4580,4584],{"type":427,"tag":463,"props":4546,"children":4547},{"style":697},[4548],{"type":433,"value":700},{"type":427,"tag":463,"props":4550,"children":4551},{"style":703},[4552],{"type":433,"value":706},{"type":427,"tag":463,"props":4554,"children":4555},{"style":709},[4556],{"type":433,"value":4557},"getOwnPropertyDescriptor",{"type":427,"tag":463,"props":4559,"children":4560},{"style":697},[4561],{"type":433,"value":4562},"(global",{"type":427,"tag":463,"props":4564,"children":4565},{"style":703},[4566],{"type":433,"value":733},{"type":427,"tag":463,"props":4568,"children":4569},{"style":476},[4570],{"type":433,"value":479},{"type":427,"tag":463,"props":4572,"children":4573},{"style":482},[4574],{"type":433,"value":4575},"undefined",{"type":427,"tag":463,"props":4577,"children":4578},{"style":476},[4579],{"type":433,"value":490},{"type":427,"tag":463,"props":4581,"children":4582},{"style":697},[4583],{"type":433,"value":747},{"type":427,"tag":463,"props":4585,"children":4586},{"style":750},[4587],{"type":433,"value":4588},"// {value: undefined /* ... */ }\n",{"type":427,"tag":441,"props":4590,"children":4591},{},[4592],{"type":433,"value":4593},"数组本质上与对象没什么不同，处于概念的一致性，我们可以认为数组的实现在各引擎中也不一定是连续存储的。为了解决数组储存的不连续性及元素的不一致性带来性能问题，JS 提供了类型化数组这种集合。",{"type":427,"tag":441,"props":4595,"children":4596},{},[4597],{"type":433,"value":4598},"JS 中的结构化数据分两种，一种是类型化数组，通常使用 ArrayBuffer 以及其界面 DataView 来操作数据，另一种是 JSON，可以使用 JSON.parse、JSON.stringify 来操作。需要注意的是，由于 JSON 格式的数据不仅仅只是对象，它还可以包括 number、string、bollean 和 null，所以使用 JSON.parse 时需要判断数据类型。",{"type":427,"tag":441,"props":4600,"children":4601},{},[4602],{"type":433,"value":4603},"JS 中的内置对象除了具有在对象系统上的封装、继承、多态之外，还有一些额外的特殊效果。",{"type":427,"tag":1035,"props":4605,"children":4606},{},[4607,4628],{"type":427,"tag":1039,"props":4608,"children":4609},{},[4610],{"type":427,"tag":1043,"props":4611,"children":4612},{},[4613,4618,4623],{"type":427,"tag":1047,"props":4614,"children":4615},{},[4616],{"type":433,"value":4617},"对象",{"type":427,"tag":1047,"props":4619,"children":4620},{},[4621],{"type":433,"value":4622},"特殊效果",{"type":427,"tag":1047,"props":4624,"children":4625},{},[4626],{"type":433,"value":4627},"注",{"type":427,"tag":1058,"props":4629,"children":4630},{},[4631,4649,4666,4682,4698,4714,4732,4748,4764,4780],{"type":427,"tag":1043,"props":4632,"children":4633},{},[4634,4639,4644],{"type":427,"tag":1065,"props":4635,"children":4636},{},[4637],{"type":433,"value":4638},"Number、String、Boolean、Symbol",{"type":427,"tag":1065,"props":4640,"children":4641},{},[4642],{"type":433,"value":4643},"包装类",{"type":427,"tag":1065,"props":4645,"children":4646},{},[4647],{"type":433,"value":4648},"({}).toString()",{"type":427,"tag":1043,"props":4650,"children":4651},{},[4652,4656,4661],{"type":427,"tag":1065,"props":4653,"children":4654},{},[4655],{"type":433,"value":700},{"type":427,"tag":1065,"props":4657,"children":4658},{},[4659],{"type":433,"value":4660},"调用包装类",{"type":427,"tag":1065,"props":4662,"children":4663},{},[4664],{"type":433,"value":4665},"new Object(5) + new Object(3)",{"type":427,"tag":1043,"props":4667,"children":4668},{},[4669,4674,4679],{"type":427,"tag":1065,"props":4670,"children":4671},{},[4672],{"type":433,"value":4673},"Array",{"type":427,"tag":1065,"props":4675,"children":4676},{},[4677],{"type":433,"value":4678},"自动维护 length 属性",{"type":427,"tag":1065,"props":4680,"children":4681},{},[],{"type":427,"tag":1043,"props":4683,"children":4684},{},[4685,4690,4695],{"type":427,"tag":1065,"props":4686,"children":4687},{},[4688],{"type":433,"value":4689},"Date",{"type":427,"tag":1065,"props":4691,"children":4692},{},[4693],{"type":433,"value":4694},"日期对象相关的运算",{"type":427,"tag":1065,"props":4696,"children":4697},{},[],{"type":427,"tag":1043,"props":4699,"children":4700},{},[4701,4706,4711],{"type":427,"tag":1065,"props":4702,"children":4703},{},[4704],{"type":433,"value":4705},"Function",{"type":427,"tag":1065,"props":4707,"children":4708},{},[4709],{"type":433,"value":4710},"创建可执行的函数",{"type":427,"tag":1065,"props":4712,"children":4713},{},[],{"type":427,"tag":1043,"props":4715,"children":4716},{},[4717,4722,4727],{"type":427,"tag":1065,"props":4718,"children":4719},{},[4720],{"type":433,"value":4721},"RegExp",{"type":427,"tag":1065,"props":4723,"children":4724},{},[4725],{"type":433,"value":4726},"可执行",{"type":427,"tag":1065,"props":4728,"children":4729},{},[4730],{"type":433,"value":4731},"仅在某些宿主中",{"type":427,"tag":1043,"props":4733,"children":4734},{},[4735,4740,4745],{"type":427,"tag":1065,"props":4736,"children":4737},{},[4738],{"type":433,"value":4739},"Proxy",{"type":427,"tag":1065,"props":4741,"children":4742},{},[4743],{"type":433,"value":4744},"代理目标对象、回收代理",{"type":427,"tag":1065,"props":4746,"children":4747},{},[],{"type":427,"tag":1043,"props":4749,"children":4750},{},[4751,4756,4761],{"type":427,"tag":1065,"props":4752,"children":4753},{},[4754],{"type":433,"value":4755},"TypedArray、DataView",{"type":427,"tag":1065,"props":4757,"children":4758},{},[4759],{"type":433,"value":4760},"创建及绑定 buffer",{"type":427,"tag":1065,"props":4762,"children":4763},{},[],{"type":427,"tag":1043,"props":4765,"children":4766},{},[4767,4772,4777],{"type":427,"tag":1065,"props":4768,"children":4769},{},[4770],{"type":433,"value":4771},"ArrayBuffer、SharedArray、Buffer",{"type":427,"tag":1065,"props":4773,"children":4774},{},[4775],{"type":433,"value":4776},"初始化 buffer 并维护 byteLength 属性",{"type":427,"tag":1065,"props":4778,"children":4779},{},[],{"type":427,"tag":1043,"props":4781,"children":4782},{},[4783,4788,4793],{"type":427,"tag":1065,"props":4784,"children":4785},{},[4786],{"type":433,"value":4787},"WeakMap、WeakSet",{"type":427,"tag":1065,"props":4789,"children":4790},{},[4791],{"type":433,"value":4792},"不修改引用并自动回收对象",{"type":427,"tag":1065,"props":4794,"children":4795},{},[],{"type":427,"tag":441,"props":4797,"children":4798},{},[4799],{"type":433,"value":4800},"这些特殊效果被引擎绑定在特定的构造器上，其中大多数可以被类继承继承得到。所以，如果你使用原型继承的方式继承这些特殊效果，是无效的，归根到底是因为使用类创建新的实例时，实例是由基类构造的，所以特殊效果得以在实例中实现。当然，可以改写传统的原型继承代码，以仿制类继承中实例创建的逻辑：",{"type":427,"tag":452,"props":4802,"children":4804},{"className":685,"code":4803,"language":687,"meta":421,"style":421},"function MyDate(...args) {\n  const Base = Date.prototype.constructor\n  const instance = Object.setPrototypeOf(new Base(...args), MyDate.prototype)\n  return instance\n}\nObject.setPrototypeOf(MyDate.prototype, Date.prototype)\n\nconsole.log(new MyDate()) // 会隐式调用 Date.prototype.toISOString()\n",[4805],{"type":427,"tag":459,"props":4806,"children":4807},{"__ignoreMap":421},[4808,4841,4878,4954,4967,4974,5026,5033],{"type":427,"tag":463,"props":4809,"children":4810},{"class":465,"line":466},[4811,4815,4820,4824,4828,4833,4837],{"type":427,"tag":463,"props":4812,"children":4813},{"style":1020},[4814],{"type":433,"value":1346},{"type":427,"tag":463,"props":4816,"children":4817},{"style":709},[4818],{"type":433,"value":4819}," MyDate",{"type":427,"tag":463,"props":4821,"children":4822},{"style":703},[4823],{"type":433,"value":717},{"type":427,"tag":463,"props":4825,"children":4826},{"style":493},[4827],{"type":433,"value":1308},{"type":427,"tag":463,"props":4829,"children":4830},{"style":1647},[4831],{"type":433,"value":4832},"args",{"type":427,"tag":463,"props":4834,"children":4835},{"style":703},[4836],{"type":433,"value":1655},{"type":427,"tag":463,"props":4838,"children":4839},{"style":703},[4840],{"type":433,"value":1361},{"type":427,"tag":463,"props":4842,"children":4843},{"class":465,"line":756},[4844,4848,4853,4857,4862,4866,4870,4874],{"type":427,"tag":463,"props":4845,"children":4846},{"style":1020},[4847],{"type":433,"value":3798},{"type":427,"tag":463,"props":4849,"children":4850},{"style":1454},[4851],{"type":433,"value":4852}," Base",{"type":427,"tag":463,"props":4854,"children":4855},{"style":493},[4856],{"type":433,"value":1384},{"type":427,"tag":463,"props":4858,"children":4859},{"style":2843},[4860],{"type":433,"value":4861}," Date",{"type":427,"tag":463,"props":4863,"children":4864},{"style":703},[4865],{"type":433,"value":706},{"type":427,"tag":463,"props":4867,"children":4868},{"style":1454},[4869],{"type":433,"value":2854},{"type":427,"tag":463,"props":4871,"children":4872},{"style":703},[4873],{"type":433,"value":706},{"type":427,"tag":463,"props":4875,"children":4876},{"style":1454},[4877],{"type":433,"value":3821},{"type":427,"tag":463,"props":4879,"children":4880},{"class":465,"line":1400},[4881,4885,4890,4894,4898,4902,4906,4910,4914,4918,4922,4926,4930,4934,4938,4942,4946,4950],{"type":427,"tag":463,"props":4882,"children":4883},{"style":1020},[4884],{"type":433,"value":3798},{"type":427,"tag":463,"props":4886,"children":4887},{"style":1454},[4888],{"type":433,"value":4889}," instance",{"type":427,"tag":463,"props":4891,"children":4892},{"style":493},[4893],{"type":433,"value":1384},{"type":427,"tag":463,"props":4895,"children":4896},{"style":697},[4897],{"type":433,"value":4133},{"type":427,"tag":463,"props":4899,"children":4900},{"style":703},[4901],{"type":433,"value":706},{"type":427,"tag":463,"props":4903,"children":4904},{"style":709},[4905],{"type":433,"value":3662},{"type":427,"tag":463,"props":4907,"children":4908},{"style":1418},[4909],{"type":433,"value":717},{"type":427,"tag":463,"props":4911,"children":4912},{"style":493},[4913],{"type":433,"value":1536},{"type":427,"tag":463,"props":4915,"children":4916},{"style":709},[4917],{"type":433,"value":4852},{"type":427,"tag":463,"props":4919,"children":4920},{"style":1418},[4921],{"type":433,"value":717},{"type":427,"tag":463,"props":4923,"children":4924},{"style":493},[4925],{"type":433,"value":1308},{"type":427,"tag":463,"props":4927,"children":4928},{"style":697},[4929],{"type":433,"value":4832},{"type":427,"tag":463,"props":4931,"children":4932},{"style":1418},[4933],{"type":433,"value":1655},{"type":427,"tag":463,"props":4935,"children":4936},{"style":703},[4937],{"type":433,"value":733},{"type":427,"tag":463,"props":4939,"children":4940},{"style":2843},[4941],{"type":433,"value":4819},{"type":427,"tag":463,"props":4943,"children":4944},{"style":703},[4945],{"type":433,"value":706},{"type":427,"tag":463,"props":4947,"children":4948},{"style":1454},[4949],{"type":433,"value":2854},{"type":427,"tag":463,"props":4951,"children":4952},{"style":1418},[4953],{"type":433,"value":1438},{"type":427,"tag":463,"props":4955,"children":4956},{"class":465,"line":1441},[4957,4962],{"type":427,"tag":463,"props":4958,"children":4959},{"style":1724},[4960],{"type":433,"value":4961},"  return",{"type":427,"tag":463,"props":4963,"children":4964},{"style":697},[4965],{"type":433,"value":4966}," instance\n",{"type":427,"tag":463,"props":4968,"children":4969},{"class":465,"line":1450},[4970],{"type":427,"tag":463,"props":4971,"children":4972},{"style":703},[4973],{"type":433,"value":1447},{"type":427,"tag":463,"props":4975,"children":4976},{"class":465,"line":1485},[4977,4981,4985,4989,4993,4998,5002,5006,5010,5014,5018,5022],{"type":427,"tag":463,"props":4978,"children":4979},{"style":697},[4980],{"type":433,"value":700},{"type":427,"tag":463,"props":4982,"children":4983},{"style":703},[4984],{"type":433,"value":706},{"type":427,"tag":463,"props":4986,"children":4987},{"style":709},[4988],{"type":433,"value":3662},{"type":427,"tag":463,"props":4990,"children":4991},{"style":697},[4992],{"type":433,"value":717},{"type":427,"tag":463,"props":4994,"children":4995},{"style":2843},[4996],{"type":433,"value":4997},"MyDate",{"type":427,"tag":463,"props":4999,"children":5000},{"style":703},[5001],{"type":433,"value":706},{"type":427,"tag":463,"props":5003,"children":5004},{"style":1454},[5005],{"type":433,"value":2854},{"type":427,"tag":463,"props":5007,"children":5008},{"style":703},[5009],{"type":433,"value":733},{"type":427,"tag":463,"props":5011,"children":5012},{"style":2843},[5013],{"type":433,"value":4861},{"type":427,"tag":463,"props":5015,"children":5016},{"style":703},[5017],{"type":433,"value":706},{"type":427,"tag":463,"props":5019,"children":5020},{"style":1454},[5021],{"type":433,"value":2854},{"type":427,"tag":463,"props":5023,"children":5024},{"style":697},[5025],{"type":433,"value":1438},{"type":427,"tag":463,"props":5027,"children":5028},{"class":465,"line":1522},[5029],{"type":427,"tag":463,"props":5030,"children":5031},{"emptyLinePlaceholder":420},[5032],{"type":433,"value":4116},{"type":427,"tag":463,"props":5034,"children":5035},{"class":465,"line":1530},[5036,5041,5045,5049,5053,5057,5061,5065],{"type":427,"tag":463,"props":5037,"children":5038},{"style":697},[5039],{"type":433,"value":5040},"console",{"type":427,"tag":463,"props":5042,"children":5043},{"style":703},[5044],{"type":433,"value":706},{"type":427,"tag":463,"props":5046,"children":5047},{"style":709},[5048],{"type":433,"value":1415},{"type":427,"tag":463,"props":5050,"children":5051},{"style":697},[5052],{"type":433,"value":717},{"type":427,"tag":463,"props":5054,"children":5055},{"style":493},[5056],{"type":433,"value":1536},{"type":427,"tag":463,"props":5058,"children":5059},{"style":709},[5060],{"type":433,"value":4819},{"type":427,"tag":463,"props":5062,"children":5063},{"style":697},[5064],{"type":433,"value":835},{"type":427,"tag":463,"props":5066,"children":5067},{"style":750},[5068],{"type":433,"value":5069},"// 会隐式调用 Date.prototype.toISOString()\n",{"type":427,"tag":435,"props":5071,"children":5073},{"id":5072},"可定制的对象属性",[5074],{"type":433,"value":5072},{"type":427,"tag":441,"props":5076,"children":5077},{},[5078],{"type":433,"value":5079},"一般来说，对继承而来的属性赋值会导致对象在自身属性表中新创一个项，有几种情况例外：",{"type":427,"tag":541,"props":5081,"children":5082},{},[5083,5088,5093],{"type":427,"tag":545,"props":5084,"children":5085},{},[5086],{"type":433,"value":5087},"在继承来的属性是可配置的情况下，如果继承的属性是不可写属性，那么不会在对象自身新建属性，同时",{"type":427,"tag":545,"props":5089,"children":5090},{},[5091],{"type":433,"value":5092},"如果继承的属性不可枚举，那么新属性也不可枚举，同时",{"type":427,"tag":545,"props":5094,"children":5095},{},[5096],{"type":433,"value":5097},"如果继承的属性只存在存取描述符，那么无论其读写性，都不会创建新属性",{"type":427,"tag":441,"props":5099,"children":5100},{},[5101],{"type":433,"value":5102},"对象有一个内部属性[[Extensible]]用来描述是否可以在其属性表中添加和删除属性，默认是 true。JS 提供了一组方法用于属性表的维护：",{"type":427,"tag":1035,"props":5104,"children":5105},{},[5106,5132],{"type":427,"tag":1039,"props":5107,"children":5108},{},[5109],{"type":427,"tag":1043,"props":5110,"children":5111},{},[5112,5117,5122,5127],{"type":427,"tag":1047,"props":5113,"children":5114},{},[5115],{"type":433,"value":5116},"Object.xxx 方法",{"type":427,"tag":1047,"props":5118,"children":5119},{},[5120],{"type":433,"value":5121},"方法说明",{"type":427,"tag":1047,"props":5123,"children":5124},{},[5125],{"type":433,"value":5126},"对自有属性表的操作",{"type":427,"tag":1047,"props":5128,"children":5129},{},[5130],{"type":433,"value":5131},"检查方法",{"type":427,"tag":1058,"props":5133,"children":5134},{},[5135,5164,5192],{"type":427,"tag":1043,"props":5136,"children":5137},{},[5138,5143,5148,5159],{"type":427,"tag":1065,"props":5139,"children":5140},{},[5141],{"type":433,"value":5142},"preventExtensions(obj)",{"type":427,"tag":1065,"props":5144,"children":5145},{},[5146],{"type":433,"value":5147},"使实例不能添加新属性，也不可重置原型",{"type":427,"tag":1065,"props":5149,"children":5150},{},[5151,5157],{"type":427,"tag":5152,"props":5153,"children":5154},"del",{},[5155],{"type":433,"value":5156},"add",{"type":433,"value":5158},"、delete、update",{"type":427,"tag":1065,"props":5160,"children":5161},{},[5162],{"type":433,"value":5163},"isExtensible(obj)",{"type":427,"tag":1043,"props":5165,"children":5166},{},[5167,5172,5177,5187],{"type":427,"tag":1065,"props":5168,"children":5169},{},[5170],{"type":433,"value":5171},"seal(obj)",{"type":427,"tag":1065,"props":5173,"children":5174},{},[5175],{"type":433,"value":5176},"使实例不能新增新属性，也不能删除既有属性",{"type":427,"tag":1065,"props":5178,"children":5179},{},[5180,5185],{"type":427,"tag":5152,"props":5181,"children":5182},{},[5183],{"type":433,"value":5184},"add、delete",{"type":433,"value":5186},"、update",{"type":427,"tag":1065,"props":5188,"children":5189},{},[5190],{"type":433,"value":5191},"isSealed(obj)",{"type":427,"tag":1043,"props":5193,"children":5194},{},[5195,5200,5205,5213],{"type":427,"tag":1065,"props":5196,"children":5197},{},[5198],{"type":433,"value":5199},"freeze(obj)",{"type":427,"tag":1065,"props":5201,"children":5202},{},[5203],{"type":433,"value":5204},"使实例所有属性只读，且不能再添加、删除属性",{"type":427,"tag":1065,"props":5206,"children":5207},{},[5208],{"type":427,"tag":5152,"props":5209,"children":5210},{},[5211],{"type":433,"value":5212},"add、delete、update",{"type":427,"tag":1065,"props":5214,"children":5215},{},[5216],{"type":433,"value":5217},"isFrozen(obj)",{"type":427,"tag":441,"props":5219,"children":5220},{},[5221],{"type":433,"value":5222},"由于 isExtensible、isSealed、isFrozen 这几个方法都是动态计算返回的结果，在一些边界情况，结果可能和你想象的不同。isSealed 和 isFrozen 检查所有自有属性表中的属性，并分别确认所有属性的属性描述符 configurable 和 writable 都为 false。",{"type":427,"tag":541,"props":5224,"children":5225},{},[5226,5231,5236],{"type":427,"tag":545,"props":5227,"children":5228},{},[5229],{"type":433,"value":5230},"如果使用 preventExtensions 对空对象设置防止扩展，那么此对象同时是密封和冻结的，因为其自有属性表是空的。",{"type":427,"tag":545,"props":5232,"children":5233},{},[5234],{"type":433,"value":5235},"存取属性不受 freeze 状态影响，所以 freeze 可以设置属性描述符 writable 为 false，但是存取属性仍能正常运作。",{"type":427,"tag":545,"props":5237,"children":5238},{},[5239],{"type":433,"value":5240},"当原型冻结或指定属性只读时，复制运算就会失效，此时只能使用 Object.defineXXX 重新声明属性。",{"type":427,"tag":435,"props":5242,"children":5244},{"id":5243},"运行期侵入",[5245],{"type":433,"value":5243},{"type":427,"tag":441,"props":5247,"children":5248},{},[5249],{"type":433,"value":5250},"最早用于运行期侵入的语法元素是 __proto__，它可以让开发人员直接操作对象的原型；valueOf 以及 toString 等方法则被归类到动态语言的特性中去了。",{"type":427,"tag":441,"props":5252,"children":5253},{},[5254],{"type":433,"value":5255},"对象在 JS 的内部被描述为具有一些内部槽的结构体，比方说普通对象有 [[Prototype]] 以及 [[Extensible]] 两个槽位，而函数则会多出 [[Realm]] 和 [[ScriptOrModule]] 这两个。某些符号属性可以访问这些内部槽位的，但是限于符号属性总是在对象的自有属性表中维护，而不是作为语言机制（内部槽），所以影响力有限。",{"type":427,"tag":441,"props":5257,"children":5258},{},[5259],{"type":433,"value":5260},"对象可以用自己的处理过程来覆盖内部方法，这也就是 Proxy 起作用的原因。Proxy 和内部方法的对应关系如下：",{"type":427,"tag":1035,"props":5262,"children":5263},{},[5264,5280],{"type":427,"tag":1039,"props":5265,"children":5266},{},[5267],{"type":427,"tag":1043,"props":5268,"children":5269},{},[5270,5275],{"type":427,"tag":1047,"props":5271,"children":5272},{},[5273],{"type":433,"value":5274},"内部方法",{"type":427,"tag":1047,"props":5276,"children":5277},{},[5278],{"type":433,"value":5279},"handler.xxx",{"type":427,"tag":1058,"props":5281,"children":5282},{},[5283,5296,5309,5322,5335,5348,5361,5374,5387,5400,5413,5426,5439],{"type":427,"tag":1043,"props":5284,"children":5285},{},[5286,5291],{"type":427,"tag":1065,"props":5287,"children":5288},{},[5289],{"type":433,"value":5290},"[[GetPrototypeOf]]",{"type":427,"tag":1065,"props":5292,"children":5293},{},[5294],{"type":433,"value":5295},"getPrototypeOf()",{"type":427,"tag":1043,"props":5297,"children":5298},{},[5299,5304],{"type":427,"tag":1065,"props":5300,"children":5301},{},[5302],{"type":433,"value":5303},"[[SetPrototypeOf]]",{"type":427,"tag":1065,"props":5305,"children":5306},{},[5307],{"type":433,"value":5308},"setPrototypeOf()",{"type":427,"tag":1043,"props":5310,"children":5311},{},[5312,5317],{"type":427,"tag":1065,"props":5313,"children":5314},{},[5315],{"type":433,"value":5316},"[[IsExtensible]]",{"type":427,"tag":1065,"props":5318,"children":5319},{},[5320],{"type":433,"value":5321},"isExtensible()",{"type":427,"tag":1043,"props":5323,"children":5324},{},[5325,5330],{"type":427,"tag":1065,"props":5326,"children":5327},{},[5328],{"type":433,"value":5329},"[[PreventExtensions]]",{"type":427,"tag":1065,"props":5331,"children":5332},{},[5333],{"type":433,"value":5334},"preventExtensions()",{"type":427,"tag":1043,"props":5336,"children":5337},{},[5338,5343],{"type":427,"tag":1065,"props":5339,"children":5340},{},[5341],{"type":433,"value":5342},"[[GetOwnProperty]]",{"type":427,"tag":1065,"props":5344,"children":5345},{},[5346],{"type":433,"value":5347},"getOwnPropertyDescriptor()",{"type":427,"tag":1043,"props":5349,"children":5350},{},[5351,5356],{"type":427,"tag":1065,"props":5352,"children":5353},{},[5354],{"type":433,"value":5355},"[[HasProperty]]",{"type":427,"tag":1065,"props":5357,"children":5358},{},[5359],{"type":433,"value":5360},"has()",{"type":427,"tag":1043,"props":5362,"children":5363},{},[5364,5369],{"type":427,"tag":1065,"props":5365,"children":5366},{},[5367],{"type":433,"value":5368},"[[DefineOwnProperty]]",{"type":427,"tag":1065,"props":5370,"children":5371},{},[5372],{"type":433,"value":5373},"defineProperty()",{"type":427,"tag":1043,"props":5375,"children":5376},{},[5377,5382],{"type":427,"tag":1065,"props":5378,"children":5379},{},[5380],{"type":433,"value":5381},"[[Get]]",{"type":427,"tag":1065,"props":5383,"children":5384},{},[5385],{"type":433,"value":5386},"get()",{"type":427,"tag":1043,"props":5388,"children":5389},{},[5390,5395],{"type":427,"tag":1065,"props":5391,"children":5392},{},[5393],{"type":433,"value":5394},"[[Set]]",{"type":427,"tag":1065,"props":5396,"children":5397},{},[5398],{"type":433,"value":5399},"set()",{"type":427,"tag":1043,"props":5401,"children":5402},{},[5403,5408],{"type":427,"tag":1065,"props":5404,"children":5405},{},[5406],{"type":433,"value":5407},"[[Delete]]",{"type":427,"tag":1065,"props":5409,"children":5410},{},[5411],{"type":433,"value":5412},"deleteProperty()",{"type":427,"tag":1043,"props":5414,"children":5415},{},[5416,5421],{"type":427,"tag":1065,"props":5417,"children":5418},{},[5419],{"type":433,"value":5420},"[[OwnPropertyKeys]]",{"type":427,"tag":1065,"props":5422,"children":5423},{},[5424],{"type":433,"value":5425},"ownKeys()",{"type":427,"tag":1043,"props":5427,"children":5428},{},[5429,5434],{"type":427,"tag":1065,"props":5430,"children":5431},{},[5432],{"type":433,"value":5433},"[[Call]]",{"type":427,"tag":1065,"props":5435,"children":5436},{},[5437],{"type":433,"value":5438},"apply()",{"type":427,"tag":1043,"props":5440,"children":5441},{},[5442,5447],{"type":427,"tag":1065,"props":5443,"children":5444},{},[5445],{"type":433,"value":5446},"[[Construct]]",{"type":427,"tag":1065,"props":5448,"children":5449},{},[5450],{"type":433,"value":5451},"construct()",{"type":427,"tag":441,"props":5453,"children":5454},{},[5455],{"type":433,"value":5456},"使用 Proxy 看起来可以给对象建立一道完美的防火墙，但墙上其实还是有两道裂缝：",{"type":427,"tag":541,"props":5458,"children":5459},{},[5460,5465],{"type":427,"tag":545,"props":5461,"children":5462},{},[5463],{"type":433,"value":5464},"一些语言机制会绕过内部方法行动，比方说就算给箭头函数新增带构造器的陷阱，它仍然不能作为构造器使用。",{"type":427,"tag":545,"props":5466,"children":5467},{},[5468],{"type":433,"value":5469},"某些方法不具有原子性，比方说调用 [[Set]] 设置属性时实际上会调用 target 和 receiver 以及他们原型上的 [[GetOwnProperty]] 确认属性的描述符。",{"type":427,"tag":441,"props":5471,"children":5472},{},[5473],{"type":433,"value":5474},"使用代理替换某些内置对象的原型，可以无侵入式影响运行环境：",{"type":427,"tag":452,"props":5476,"children":5478},{"className":685,"code":5477,"language":687,"meta":421,"style":421},"function intrudeOnPrototype(Fn, handler) {\n  const originPrototype = Object.getPrototypeOf(Fn.prototype)\n  const target = Object.create(originPrototype)\n  const { proxy: newPrototype, revoke } = Proxy.revocable(target, handler)\n  Object.setPrototypeOf(Fn.prototype, newPrototype)\n  return () => revoke(Object.setPrototypeOf(Fn.prototype, originPrototype))\n}\nconst recovery = intrudeOnPrototype(String, {\n  get: function (target, prop) {\n    if (prop === 'test') {\n      return 'test'\n    } else {\n      return Reflect.get(...arguments)\n    }\n  }\n})\nconsole.log(''.test) // test\n",[5479],{"type":427,"tag":459,"props":5480,"children":5481},{"__ignoreMap":421},[5482,5520,5569,5610,5688,5732,5797,5804,5838,5878,5917,5937,5954,5992,5999,6006,6017],{"type":427,"tag":463,"props":5483,"children":5484},{"class":465,"line":466},[5485,5489,5494,5498,5503,5507,5512,5516],{"type":427,"tag":463,"props":5486,"children":5487},{"style":1020},[5488],{"type":433,"value":1346},{"type":427,"tag":463,"props":5490,"children":5491},{"style":709},[5492],{"type":433,"value":5493}," intrudeOnPrototype",{"type":427,"tag":463,"props":5495,"children":5496},{"style":703},[5497],{"type":433,"value":717},{"type":427,"tag":463,"props":5499,"children":5500},{"style":1647},[5501],{"type":433,"value":5502},"Fn",{"type":427,"tag":463,"props":5504,"children":5505},{"style":703},[5506],{"type":433,"value":733},{"type":427,"tag":463,"props":5508,"children":5509},{"style":1647},[5510],{"type":433,"value":5511}," handler",{"type":427,"tag":463,"props":5513,"children":5514},{"style":703},[5515],{"type":433,"value":1655},{"type":427,"tag":463,"props":5517,"children":5518},{"style":703},[5519],{"type":433,"value":1361},{"type":427,"tag":463,"props":5521,"children":5522},{"class":465,"line":756},[5523,5527,5532,5536,5540,5544,5549,5553,5557,5561,5565],{"type":427,"tag":463,"props":5524,"children":5525},{"style":1020},[5526],{"type":433,"value":3798},{"type":427,"tag":463,"props":5528,"children":5529},{"style":1454},[5530],{"type":433,"value":5531}," originPrototype",{"type":427,"tag":463,"props":5533,"children":5534},{"style":493},[5535],{"type":433,"value":1384},{"type":427,"tag":463,"props":5537,"children":5538},{"style":697},[5539],{"type":433,"value":4133},{"type":427,"tag":463,"props":5541,"children":5542},{"style":703},[5543],{"type":433,"value":706},{"type":427,"tag":463,"props":5545,"children":5546},{"style":709},[5547],{"type":433,"value":5548},"getPrototypeOf",{"type":427,"tag":463,"props":5550,"children":5551},{"style":1418},[5552],{"type":433,"value":717},{"type":427,"tag":463,"props":5554,"children":5555},{"style":2843},[5556],{"type":433,"value":5502},{"type":427,"tag":463,"props":5558,"children":5559},{"style":703},[5560],{"type":433,"value":706},{"type":427,"tag":463,"props":5562,"children":5563},{"style":1454},[5564],{"type":433,"value":2854},{"type":427,"tag":463,"props":5566,"children":5567},{"style":1418},[5568],{"type":433,"value":1438},{"type":427,"tag":463,"props":5570,"children":5571},{"class":465,"line":1400},[5572,5576,5581,5585,5589,5593,5597,5601,5606],{"type":427,"tag":463,"props":5573,"children":5574},{"style":1020},[5575],{"type":433,"value":3798},{"type":427,"tag":463,"props":5577,"children":5578},{"style":1454},[5579],{"type":433,"value":5580}," target",{"type":427,"tag":463,"props":5582,"children":5583},{"style":493},[5584],{"type":433,"value":1384},{"type":427,"tag":463,"props":5586,"children":5587},{"style":697},[5588],{"type":433,"value":4133},{"type":427,"tag":463,"props":5590,"children":5591},{"style":703},[5592],{"type":433,"value":706},{"type":427,"tag":463,"props":5594,"children":5595},{"style":709},[5596],{"type":433,"value":4142},{"type":427,"tag":463,"props":5598,"children":5599},{"style":1418},[5600],{"type":433,"value":717},{"type":427,"tag":463,"props":5602,"children":5603},{"style":697},[5604],{"type":433,"value":5605},"originPrototype",{"type":427,"tag":463,"props":5607,"children":5608},{"style":1418},[5609],{"type":433,"value":1438},{"type":427,"tag":463,"props":5611,"children":5612},{"class":465,"line":1441},[5613,5617,5621,5627,5631,5636,5640,5645,5649,5653,5658,5662,5667,5671,5676,5680,5684],{"type":427,"tag":463,"props":5614,"children":5615},{"style":1020},[5616],{"type":433,"value":3798},{"type":427,"tag":463,"props":5618,"children":5619},{"style":703},[5620],{"type":433,"value":1732},{"type":427,"tag":463,"props":5622,"children":5624},{"style":5623},"--shiki-light:#E53935;--shiki-default:#E36209;--shiki-dark:#FFAB70;--shiki-sepia:#F8F8F2",[5625],{"type":433,"value":5626}," proxy",{"type":427,"tag":463,"props":5628,"children":5629},{"style":703},[5630],{"type":433,"value":1880},{"type":427,"tag":463,"props":5632,"children":5633},{"style":1454},[5634],{"type":433,"value":5635}," newPrototype",{"type":427,"tag":463,"props":5637,"children":5638},{"style":703},[5639],{"type":433,"value":733},{"type":427,"tag":463,"props":5641,"children":5642},{"style":1454},[5643],{"type":433,"value":5644}," revoke",{"type":427,"tag":463,"props":5646,"children":5647},{"style":703},[5648],{"type":433,"value":1755},{"type":427,"tag":463,"props":5650,"children":5651},{"style":493},[5652],{"type":433,"value":1384},{"type":427,"tag":463,"props":5654,"children":5655},{"style":697},[5656],{"type":433,"value":5657}," Proxy",{"type":427,"tag":463,"props":5659,"children":5660},{"style":703},[5661],{"type":433,"value":706},{"type":427,"tag":463,"props":5663,"children":5664},{"style":709},[5665],{"type":433,"value":5666},"revocable",{"type":427,"tag":463,"props":5668,"children":5669},{"style":1418},[5670],{"type":433,"value":717},{"type":427,"tag":463,"props":5672,"children":5673},{"style":697},[5674],{"type":433,"value":5675},"target",{"type":427,"tag":463,"props":5677,"children":5678},{"style":703},[5679],{"type":433,"value":733},{"type":427,"tag":463,"props":5681,"children":5682},{"style":697},[5683],{"type":433,"value":5511},{"type":427,"tag":463,"props":5685,"children":5686},{"style":1418},[5687],{"type":433,"value":1438},{"type":427,"tag":463,"props":5689,"children":5690},{"class":465,"line":1450},[5691,5696,5700,5704,5708,5712,5716,5720,5724,5728],{"type":427,"tag":463,"props":5692,"children":5693},{"style":697},[5694],{"type":433,"value":5695},"  Object",{"type":427,"tag":463,"props":5697,"children":5698},{"style":703},[5699],{"type":433,"value":706},{"type":427,"tag":463,"props":5701,"children":5702},{"style":709},[5703],{"type":433,"value":3662},{"type":427,"tag":463,"props":5705,"children":5706},{"style":1418},[5707],{"type":433,"value":717},{"type":427,"tag":463,"props":5709,"children":5710},{"style":2843},[5711],{"type":433,"value":5502},{"type":427,"tag":463,"props":5713,"children":5714},{"style":703},[5715],{"type":433,"value":706},{"type":427,"tag":463,"props":5717,"children":5718},{"style":1454},[5719],{"type":433,"value":2854},{"type":427,"tag":463,"props":5721,"children":5722},{"style":703},[5723],{"type":433,"value":733},{"type":427,"tag":463,"props":5725,"children":5726},{"style":697},[5727],{"type":433,"value":5635},{"type":427,"tag":463,"props":5729,"children":5730},{"style":1418},[5731],{"type":433,"value":1438},{"type":427,"tag":463,"props":5733,"children":5734},{"class":465,"line":1485},[5735,5739,5743,5748,5752,5756,5760,5764,5768,5772,5776,5780,5784,5788,5792],{"type":427,"tag":463,"props":5736,"children":5737},{"style":1724},[5738],{"type":433,"value":4961},{"type":427,"tag":463,"props":5740,"children":5741},{"style":703},[5742],{"type":433,"value":1356},{"type":427,"tag":463,"props":5744,"children":5745},{"style":1020},[5746],{"type":433,"value":5747}," =>",{"type":427,"tag":463,"props":5749,"children":5750},{"style":709},[5751],{"type":433,"value":5644},{"type":427,"tag":463,"props":5753,"children":5754},{"style":1418},[5755],{"type":433,"value":717},{"type":427,"tag":463,"props":5757,"children":5758},{"style":697},[5759],{"type":433,"value":700},{"type":427,"tag":463,"props":5761,"children":5762},{"style":703},[5763],{"type":433,"value":706},{"type":427,"tag":463,"props":5765,"children":5766},{"style":709},[5767],{"type":433,"value":3662},{"type":427,"tag":463,"props":5769,"children":5770},{"style":1418},[5771],{"type":433,"value":717},{"type":427,"tag":463,"props":5773,"children":5774},{"style":2843},[5775],{"type":433,"value":5502},{"type":427,"tag":463,"props":5777,"children":5778},{"style":703},[5779],{"type":433,"value":706},{"type":427,"tag":463,"props":5781,"children":5782},{"style":1454},[5783],{"type":433,"value":2854},{"type":427,"tag":463,"props":5785,"children":5786},{"style":703},[5787],{"type":433,"value":733},{"type":427,"tag":463,"props":5789,"children":5790},{"style":697},[5791],{"type":433,"value":5531},{"type":427,"tag":463,"props":5793,"children":5794},{"style":1418},[5795],{"type":433,"value":5796},"))\n",{"type":427,"tag":463,"props":5798,"children":5799},{"class":465,"line":1522},[5800],{"type":427,"tag":463,"props":5801,"children":5802},{"style":703},[5803],{"type":433,"value":1447},{"type":427,"tag":463,"props":5805,"children":5806},{"class":465,"line":1530},[5807,5812,5817,5821,5825,5830,5834],{"type":427,"tag":463,"props":5808,"children":5809},{"style":1020},[5810],{"type":433,"value":5811},"const",{"type":427,"tag":463,"props":5813,"children":5814},{"style":1454},[5815],{"type":433,"value":5816}," recovery",{"type":427,"tag":463,"props":5818,"children":5819},{"style":493},[5820],{"type":433,"value":1384},{"type":427,"tag":463,"props":5822,"children":5823},{"style":709},[5824],{"type":433,"value":5493},{"type":427,"tag":463,"props":5826,"children":5827},{"style":697},[5828],{"type":433,"value":5829},"(String",{"type":427,"tag":463,"props":5831,"children":5832},{"style":703},[5833],{"type":433,"value":733},{"type":427,"tag":463,"props":5835,"children":5836},{"style":703},[5837],{"type":433,"value":1361},{"type":427,"tag":463,"props":5839,"children":5840},{"class":465,"line":1557},[5841,5845,5849,5853,5857,5861,5865,5870,5874],{"type":427,"tag":463,"props":5842,"children":5843},{"style":709},[5844],{"type":433,"value":2741},{"type":427,"tag":463,"props":5846,"children":5847},{"style":703},[5848],{"type":433,"value":1880},{"type":427,"tag":463,"props":5850,"children":5851},{"style":1020},[5852],{"type":433,"value":1474},{"type":427,"tag":463,"props":5854,"children":5855},{"style":703},[5856],{"type":433,"value":1953},{"type":427,"tag":463,"props":5858,"children":5859},{"style":1647},[5860],{"type":433,"value":5675},{"type":427,"tag":463,"props":5862,"children":5863},{"style":703},[5864],{"type":433,"value":733},{"type":427,"tag":463,"props":5866,"children":5867},{"style":1647},[5868],{"type":433,"value":5869}," prop",{"type":427,"tag":463,"props":5871,"children":5872},{"style":703},[5873],{"type":433,"value":1655},{"type":427,"tag":463,"props":5875,"children":5876},{"style":703},[5877],{"type":433,"value":1361},{"type":427,"tag":463,"props":5879,"children":5880},{"class":465,"line":2133},[5881,5885,5889,5893,5897,5901,5905,5909,5913],{"type":427,"tag":463,"props":5882,"children":5883},{"style":1724},[5884],{"type":433,"value":2014},{"type":427,"tag":463,"props":5886,"children":5887},{"style":1418},[5888],{"type":433,"value":1953},{"type":427,"tag":463,"props":5890,"children":5891},{"style":697},[5892],{"type":433,"value":3061},{"type":427,"tag":463,"props":5894,"children":5895},{"style":493},[5896],{"type":433,"value":2027},{"type":427,"tag":463,"props":5898,"children":5899},{"style":476},[5900],{"type":433,"value":479},{"type":427,"tag":463,"props":5902,"children":5903},{"style":482},[5904],{"type":433,"value":1746},{"type":427,"tag":463,"props":5906,"children":5907},{"style":476},[5908],{"type":433,"value":490},{"type":427,"tag":463,"props":5910,"children":5911},{"style":1418},[5912],{"type":433,"value":747},{"type":427,"tag":463,"props":5914,"children":5915},{"style":703},[5916],{"type":433,"value":1770},{"type":427,"tag":463,"props":5918,"children":5919},{"class":465,"line":2193},[5920,5925,5929,5933],{"type":427,"tag":463,"props":5921,"children":5922},{"style":1724},[5923],{"type":433,"value":5924},"      return",{"type":427,"tag":463,"props":5926,"children":5927},{"style":476},[5928],{"type":433,"value":479},{"type":427,"tag":463,"props":5930,"children":5931},{"style":482},[5932],{"type":433,"value":1746},{"type":427,"tag":463,"props":5934,"children":5935},{"style":476},[5936],{"type":433,"value":1397},{"type":427,"tag":463,"props":5938,"children":5939},{"class":465,"line":2254},[5940,5945,5950],{"type":427,"tag":463,"props":5941,"children":5942},{"style":703},[5943],{"type":433,"value":5944},"    }",{"type":427,"tag":463,"props":5946,"children":5947},{"style":1724},[5948],{"type":433,"value":5949}," else",{"type":427,"tag":463,"props":5951,"children":5952},{"style":703},[5953],{"type":433,"value":1361},{"type":427,"tag":463,"props":5955,"children":5956},{"class":465,"line":2295},[5957,5961,5966,5970,5975,5979,5983,5988],{"type":427,"tag":463,"props":5958,"children":5959},{"style":1724},[5960],{"type":433,"value":5924},{"type":427,"tag":463,"props":5962,"children":5963},{"style":697},[5964],{"type":433,"value":5965}," Reflect",{"type":427,"tag":463,"props":5967,"children":5968},{"style":703},[5969],{"type":433,"value":706},{"type":427,"tag":463,"props":5971,"children":5972},{"style":709},[5973],{"type":433,"value":5974},"get",{"type":427,"tag":463,"props":5976,"children":5977},{"style":1418},[5978],{"type":433,"value":717},{"type":427,"tag":463,"props":5980,"children":5981},{"style":493},[5982],{"type":433,"value":1308},{"type":427,"tag":463,"props":5984,"children":5985},{"style":4056},[5986],{"type":433,"value":5987},"arguments",{"type":427,"tag":463,"props":5989,"children":5990},{"style":1418},[5991],{"type":433,"value":1438},{"type":427,"tag":463,"props":5993,"children":5994},{"class":465,"line":2336},[5995],{"type":427,"tag":463,"props":5996,"children":5997},{"style":703},[5998],{"type":433,"value":2342},{"type":427,"tag":463,"props":6000,"children":6001},{"class":465,"line":2345},[6002],{"type":427,"tag":463,"props":6003,"children":6004},{"style":703},[6005],{"type":433,"value":2100},{"type":427,"tag":463,"props":6007,"children":6008},{"class":465,"line":2353},[6009,6013],{"type":427,"tag":463,"props":6010,"children":6011},{"style":703},[6012],{"type":433,"value":1694},{"type":427,"tag":463,"props":6014,"children":6015},{"style":697},[6016],{"type":433,"value":1438},{"type":427,"tag":463,"props":6018,"children":6020},{"class":465,"line":6019},17,[6021,6025,6029,6033,6037,6042,6046,6051],{"type":427,"tag":463,"props":6022,"children":6023},{"style":697},[6024],{"type":433,"value":5040},{"type":427,"tag":463,"props":6026,"children":6027},{"style":703},[6028],{"type":433,"value":706},{"type":427,"tag":463,"props":6030,"children":6031},{"style":709},[6032],{"type":433,"value":1415},{"type":427,"tag":463,"props":6034,"children":6035},{"style":697},[6036],{"type":433,"value":717},{"type":427,"tag":463,"props":6038,"children":6039},{"style":476},[6040],{"type":433,"value":6041},"''",{"type":427,"tag":463,"props":6043,"children":6044},{"style":703},[6045],{"type":433,"value":706},{"type":427,"tag":463,"props":6047,"children":6048},{"style":697},[6049],{"type":433,"value":6050},"test) ",{"type":427,"tag":463,"props":6052,"children":6053},{"style":750},[6054],{"type":433,"value":6055},"// test\n",{"type":427,"tag":435,"props":6057,"children":6059},{"id":6058},"元编程系统",[6060],{"type":433,"value":6058},{"type":427,"tag":441,"props":6062,"children":6063},{},[6064],{"type":433,"value":6065},"就看懂了类类型是怎么来的，其余的没看懂...",{"type":427,"tag":428,"props":6067,"children":6069},{"id":6068},"结构化",[6070],{"type":433,"value":6068},{"type":427,"tag":435,"props":6072,"children":6074},{"id":6073},"概述",[6075],{"type":433,"value":6073},{"type":427,"tag":441,"props":6077,"children":6078},{},[6079],{"type":433,"value":6080},"按照对计算过程不同的认识产生了不同的计算模型，计算机语言按照不同计算模型可分为：命令式、函数式、逻辑式和面向对象语言四种。",{"type":427,"tag":441,"props":6082,"children":6083},{},[6084],{"type":433,"value":6085},"整个命令式语言的发展过程，都与冯诺依曼计算机体系存在直接关系。这种计算机以“储存”和“处理”为核心，而在编程语言中，两者分别被抽象为“内存”和“运算”。所以命令式语言的核心在于“通过运算改变内存（中的数据）”。按照这种方法，我们可以把命令式、函数式、逻辑式和面向对象语言统一为命令式和说明式两种大类。其中，结构化编程和面向对象编程时命令式语言主要的实现手段，也是其演化中的两个阶段。",{"type":427,"tag":441,"props":6087,"children":6088},{},[6089],{"type":433,"value":6090},"对结构化的解释包含三个部分：控制结构、组织结构和数据结构，分别相关顺序分支循环，表达式、语句块、包和基本数据结构、复杂数据结构等概念。",{"type":427,"tag":441,"props":6092,"children":6093},{},[6094],{"type":433,"value":6095},"面向对象解决了结构化带来诸多问题的三点：",{"type":427,"tag":541,"props":6097,"children":6098},{},[6099,6104,6109],{"type":427,"tag":545,"props":6100,"children":6101},{},[6102],{"type":433,"value":6103},"使用更细化的可见性设定解决数据的具体含义和关系绑定问题。",{"type":427,"tag":545,"props":6105,"children":6106},{},[6107],{"type":433,"value":6108},"使用继承解决脱离使用环境和算法的结构缺乏通用性的问题。",{"type":427,"tag":545,"props":6110,"children":6111},{},[6112],{"type":433,"value":6113},"使用泛型解决类型与逻辑僵化影响了表达的问题。",{"type":427,"tag":441,"props":6115,"children":6116},{},[6117],{"type":433,"value":6118},"对象是比结构更高层次的抽象，它绑定了数据、关系以及运算，也潜在描述了它如何支撑整个体系架构与业务逻辑，仍未突破“结构影响算法”的边界。如果把面向对象系统理解为数据、行为和关系的复合体，那么再向上一层的抽象便是接口。接口只暴露数据体的逻辑行为能力，而不暴露这种能力的实现方法和基于的数据特性。",{"type":427,"tag":441,"props":6120,"children":6121},{},[6122],{"type":433,"value":6123},"据 Brendan Eich 解释，JS 的语源来自 AWK、C、HyperTalk 和 Self，分别借鉴了其使用关联数组、语法、事件控制页面的思想以及基于原型的对象系统。",{"type":427,"tag":435,"props":6125,"children":6127},{"id":6126},"基本的组织元素",[6128],{"type":433,"value":6126},{"type":427,"tag":441,"props":6130,"children":6131},{},[6132],{"type":433,"value":6133},"\"一个程序可以看成由一串珍珠组成的项链\"，如此看来，标识符就是一颗颗珍珠，而语句就是丝线。",{"type":427,"tag":1035,"props":6135,"children":6136},{},[6137,6163],{"type":427,"tag":1039,"props":6138,"children":6139},{},[6140],{"type":427,"tag":1043,"props":6141,"children":6142},{},[6143,6148,6153,6158],{"type":427,"tag":1047,"props":6144,"children":6145},{},[6146],{"type":433,"value":6147},"元素",{"type":427,"tag":1047,"props":6149,"children":6150},{},[6151],{"type":433,"value":6152},"物理形态",{"type":427,"tag":1047,"props":6154,"children":6155},{},[6156],{"type":433,"value":6157},"静态",{"type":427,"tag":1047,"props":6159,"children":6160},{},[6161],{"type":433,"value":6162},"动态",{"type":427,"tag":1058,"props":6164,"children":6165},{},[6166,6187,6210,6232],{"type":427,"tag":1043,"props":6167,"children":6168},{},[6169,6174,6177,6182],{"type":427,"tag":1065,"props":6170,"children":6171},{},[6172],{"type":433,"value":6173},"标识符",{"type":427,"tag":1065,"props":6175,"children":6176},{},[],{"type":427,"tag":1065,"props":6178,"children":6179},{},[6180],{"type":433,"value":6181},"变量声明、函数声明、类声明",{"type":427,"tag":1065,"props":6183,"children":6184},{},[6185],{"type":433,"value":6186},"非严格模式下的 var 声明、非严格模式下的函数声明",{"type":427,"tag":1043,"props":6188,"children":6189},{},[6190,6195,6200,6205],{"type":427,"tag":1065,"props":6191,"children":6192},{},[6193],{"type":433,"value":6194},"表达式",{"type":427,"tag":1065,"props":6196,"children":6197},{},[6198],{"type":433,"value":6199},"模板字符串",{"type":427,"tag":1065,"props":6201,"children":6202},{},[6203],{"type":433,"value":6204},"值、箭头函数体",{"type":427,"tag":1065,"props":6206,"children":6207},{},[6208],{"type":433,"value":6209},"通过 eval 执行表达式语句",{"type":427,"tag":1043,"props":6211,"children":6212},{},[6213,6217,6222,6227],{"type":427,"tag":1065,"props":6214,"children":6215},{},[6216],{"type":433,"value":1586},{"type":427,"tag":1065,"props":6218,"children":6219},{},[6220],{"type":433,"value":6221},".js 文件",{"type":427,"tag":1065,"props":6223,"children":6224},{},[6225],{"type":433,"value":6226},"块和块级作用域",{"type":427,"tag":1065,"props":6228,"children":6229},{},[6230],{"type":433,"value":6231},"eval()",{"type":427,"tag":1043,"props":6233,"children":6234},{},[6235,6239,6244,6249],{"type":427,"tag":1065,"props":6236,"children":6237},{},[6238],{"type":433,"value":2371},{"type":427,"tag":1065,"props":6240,"children":6241},{},[6242],{"type":433,"value":6243},".mjs 文件",{"type":427,"tag":1065,"props":6245,"children":6246},{},[6247],{"type":433,"value":6248},"import、export、require()",{"type":427,"tag":1065,"props":6250,"children":6251},{},[6252],{"type":433,"value":6253},"import().then()",{"type":427,"tag":441,"props":6255,"children":6256},{},[6257],{"type":433,"value":6258},"总是可以将源代码文本视为由空白字符等隔开的语法记号（Tokens）。Tokens 简单表明他们不存在语义上的假设，而如果要包含语义，则可进一步分为：标识符、标点符号、字面量、模板以及 Invalid Tokens（如保留字）。",{"type":427,"tag":441,"props":6260,"children":6261},{},[6262],{"type":433,"value":6263},"表达式由 0~1 个运算符以及至少一个操作数组成，其表达名字与值之间的运算，并返回名字与值。",{"type":427,"tag":441,"props":6265,"children":6266},{},[6267],{"type":433,"value":6268},"声明要么用于声明标识符的名字，要么用于声明名字与值的关系。",{"type":427,"tag":441,"props":6270,"children":6271},{},[6272,6274,6279],{"type":433,"value":6273},"字面量和初始化器该如何区分？规范希望字面量的表示中不包含运算过程，而 ",{"type":427,"tag":463,"props":6275,"children":6276},{},[6277],{"type":433,"value":6278},"1,2,3",{"type":433,"value":6280}," 这种语法在引擎看来可以包含运算过程，所以叫做初始化器，换种说法也可以叫做“字面量风格的（数组、对象、函数表达式等）”。",{"type":427,"tag":441,"props":6282,"children":6283},{},[6284],{"type":433,"value":6285},"语言的组织元素可以只包括三个基本部分：逻辑的、值的、形式结构的。前两者用于约束一个最小的可计算系统，最后一个用于让这个系统在形式上具有确定性。",{"type":427,"tag":441,"props":6287,"children":6288},{},[6289],{"type":433,"value":6290},"数据的可变性称为状态，编程的目的是使系统对外解释内部的状态集合。我们说编程的复杂度，也即该集合的解释成本。与此相关的，在结构化程序设计中提出的分支原则、自顶向下、单入口单出口（SESE）以及包括信息隐蔽在内的结构化基础理论，无一例外地是在控制数据的可变性，进而达到降低系统整体编程复杂性的目的。",{"type":427,"tag":441,"props":6292,"children":6293},{},[6294],{"type":433,"value":6295},"在串型编程的结构化理论下，一个基础的控制结构（顺序、分支、循环）只有一个入口和一个出口，无论其状态有多少，逻辑使用只存在一个确定的结果值。当状态和基于状态的正确性都不存在的时候，这意味着我们从系统中抽离了状态、循环以及但入口但出口等前置条件，整个系统从串型的结构化走向了并行的非结构化。",{"type":427,"tag":441,"props":6297,"children":6298},{},[6299],{"type":433,"value":6300},"Promise 的语法缺陷在于他让初学者认为 then 以及 catch 都是对源 promise 对象的状态进行处理，然而每个 promise 方法都会立即返回一个新的 promise。",{"type":427,"tag":435,"props":6302,"children":6304},{"id":6303},"声明",[6305],{"type":433,"value":6303},{"type":427,"tag":441,"props":6307,"children":6308},{},[6309,6311,6322],{"type":433,"value":6310},"除了 const 和 namespace",{"type":427,"tag":520,"props":6312,"children":6313},{},[6314],{"type":427,"tag":524,"props":6315,"children":6319},{"href":6316,"ariaDescribedBy":6317,"dataFootnoteRef":421,"id":6318},"#user-content-fn-namespace",[528],"user-content-fnref-namespace",[6320],{"type":433,"value":6321},"4",{"type":433,"value":6323}," 之外的所有语句声明的名字都是使用 MutableBinding 来创建的，字面量风格的值（比如函数表达式）以及严格模式下函数内的 arguments 是个例外。",{"type":427,"tag":452,"props":6325,"children":6327},{"className":685,"code":6326,"language":687,"meta":421,"style":421},"!(function test() {\n  test = 100\n  console.log(test) // [Function ...]\n  arguments = [] // Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n}())\n",[6328],{"type":427,"tag":459,"props":6329,"children":6330},{"__ignoreMap":421},[6331,6359,6375,6407,6429],{"type":427,"tag":463,"props":6332,"children":6333},{"class":465,"line":466},[6334,6339,6343,6347,6351,6355],{"type":427,"tag":463,"props":6335,"children":6336},{"style":493},[6337],{"type":433,"value":6338},"!",{"type":427,"tag":463,"props":6340,"children":6341},{"style":697},[6342],{"type":433,"value":717},{"type":427,"tag":463,"props":6344,"children":6345},{"style":1020},[6346],{"type":433,"value":1346},{"type":427,"tag":463,"props":6348,"children":6349},{"style":709},[6350],{"type":433,"value":2046},{"type":427,"tag":463,"props":6352,"children":6353},{"style":703},[6354],{"type":433,"value":1069},{"type":427,"tag":463,"props":6356,"children":6357},{"style":703},[6358],{"type":433,"value":1361},{"type":427,"tag":463,"props":6360,"children":6361},{"class":465,"line":756},[6362,6366,6370],{"type":427,"tag":463,"props":6363,"children":6364},{"style":697},[6365],{"type":433,"value":2794},{"type":427,"tag":463,"props":6367,"children":6368},{"style":493},[6369],{"type":433,"value":1384},{"type":427,"tag":463,"props":6371,"children":6372},{"style":725},[6373],{"type":433,"value":6374}," 100\n",{"type":427,"tag":463,"props":6376,"children":6377},{"class":465,"line":1400},[6378,6382,6386,6390,6394,6398,6402],{"type":427,"tag":463,"props":6379,"children":6380},{"style":697},[6381],{"type":433,"value":1406},{"type":427,"tag":463,"props":6383,"children":6384},{"style":703},[6385],{"type":433,"value":706},{"type":427,"tag":463,"props":6387,"children":6388},{"style":709},[6389],{"type":433,"value":1415},{"type":427,"tag":463,"props":6391,"children":6392},{"style":1418},[6393],{"type":433,"value":717},{"type":427,"tag":463,"props":6395,"children":6396},{"style":697},[6397],{"type":433,"value":1746},{"type":427,"tag":463,"props":6399,"children":6400},{"style":1418},[6401],{"type":433,"value":747},{"type":427,"tag":463,"props":6403,"children":6404},{"style":750},[6405],{"type":433,"value":6406},"// [Function ...]\n",{"type":427,"tag":463,"props":6408,"children":6409},{"class":465,"line":1441},[6410,6415,6419,6424],{"type":427,"tag":463,"props":6411,"children":6412},{"style":4056},[6413],{"type":433,"value":6414},"  arguments",{"type":427,"tag":463,"props":6416,"children":6417},{"style":493},[6418],{"type":433,"value":1384},{"type":427,"tag":463,"props":6420,"children":6421},{"style":1418},[6422],{"type":433,"value":6423}," [] ",{"type":427,"tag":463,"props":6425,"children":6426},{"style":750},[6427],{"type":433,"value":6428},"// Uncaught SyntaxError: Unexpected eval or arguments in strict mode\n",{"type":427,"tag":463,"props":6430,"children":6431},{"class":465,"line":1450},[6432,6436],{"type":427,"tag":463,"props":6433,"children":6434},{"style":703},[6435],{"type":433,"value":1694},{"type":427,"tag":463,"props":6437,"children":6438},{"style":697},[6439],{"type":433,"value":6440},"())\n",{"type":427,"tag":441,"props":6442,"children":6443},{},[6444],{"type":433,"value":6445},"函数声明的函数名和 var 声明采用的是同一作用域机制。规范对一些特殊情况下的函数声明做了补充，也认为它们是在“顶级作用域”做的声明：",{"type":427,"tag":452,"props":6447,"children":6449},{"className":685,"code":6448,"language":687,"meta":421,"style":421},"// 在 test 的作用域中，x、y、z 名字皆被初始化\nfunction test() {\n  {function x () {}};\n  test: function y () {}\n  if (true) function z () {}\n}\n",[6450],{"type":427,"tag":459,"props":6451,"children":6452},{"__ignoreMap":421},[6453,6461,6480,6506,6534,6572],{"type":427,"tag":463,"props":6454,"children":6455},{"class":465,"line":466},[6456],{"type":427,"tag":463,"props":6457,"children":6458},{"style":750},[6459],{"type":433,"value":6460},"// 在 test 的作用域中，x、y、z 名字皆被初始化\n",{"type":427,"tag":463,"props":6462,"children":6463},{"class":465,"line":756},[6464,6468,6472,6476],{"type":427,"tag":463,"props":6465,"children":6466},{"style":1020},[6467],{"type":433,"value":1346},{"type":427,"tag":463,"props":6469,"children":6470},{"style":709},[6471],{"type":433,"value":2046},{"type":427,"tag":463,"props":6473,"children":6474},{"style":703},[6475],{"type":433,"value":1069},{"type":427,"tag":463,"props":6477,"children":6478},{"style":703},[6479],{"type":433,"value":1361},{"type":427,"tag":463,"props":6481,"children":6482},{"class":465,"line":1400},[6483,6488,6492,6497,6501],{"type":427,"tag":463,"props":6484,"children":6485},{"style":703},[6486],{"type":433,"value":6487},"  {",{"type":427,"tag":463,"props":6489,"children":6490},{"style":1020},[6491],{"type":433,"value":1346},{"type":427,"tag":463,"props":6493,"children":6494},{"style":709},[6495],{"type":433,"value":6496}," x",{"type":427,"tag":463,"props":6498,"children":6499},{"style":703},[6500],{"type":433,"value":1356},{"type":427,"tag":463,"props":6502,"children":6503},{"style":703},[6504],{"type":433,"value":6505}," {}};\n",{"type":427,"tag":463,"props":6507,"children":6508},{"class":465,"line":1441},[6509,6513,6517,6521,6526,6530],{"type":427,"tag":463,"props":6510,"children":6511},{"style":1873},[6512],{"type":433,"value":2794},{"type":427,"tag":463,"props":6514,"children":6515},{"style":703},[6516],{"type":433,"value":1880},{"type":427,"tag":463,"props":6518,"children":6519},{"style":1020},[6520],{"type":433,"value":1474},{"type":427,"tag":463,"props":6522,"children":6523},{"style":709},[6524],{"type":433,"value":6525}," y",{"type":427,"tag":463,"props":6527,"children":6528},{"style":703},[6529],{"type":433,"value":1356},{"type":427,"tag":463,"props":6531,"children":6532},{"style":703},[6533],{"type":433,"value":3152},{"type":427,"tag":463,"props":6535,"children":6536},{"class":465,"line":1450},[6537,6542,6546,6551,6555,6559,6564,6568],{"type":427,"tag":463,"props":6538,"children":6539},{"style":1724},[6540],{"type":433,"value":6541},"  if",{"type":427,"tag":463,"props":6543,"children":6544},{"style":1418},[6545],{"type":433,"value":1953},{"type":427,"tag":463,"props":6547,"children":6548},{"style":859},[6549],{"type":433,"value":6550},"true",{"type":427,"tag":463,"props":6552,"children":6553},{"style":1418},[6554],{"type":433,"value":747},{"type":427,"tag":463,"props":6556,"children":6557},{"style":1020},[6558],{"type":433,"value":1346},{"type":427,"tag":463,"props":6560,"children":6561},{"style":709},[6562],{"type":433,"value":6563}," z",{"type":427,"tag":463,"props":6565,"children":6566},{"style":703},[6567],{"type":433,"value":1356},{"type":427,"tag":463,"props":6569,"children":6570},{"style":703},[6571],{"type":433,"value":3152},{"type":427,"tag":463,"props":6573,"children":6574},{"class":465,"line":1485},[6575],{"type":427,"tag":463,"props":6576,"children":6577},{"style":703},[6578],{"type":433,"value":1447},{"type":427,"tag":435,"props":6580,"children":6582},{"id":6581},"语句与代码分块",[6583],{"type":433,"value":6581},{"type":427,"tag":441,"props":6585,"children":6586},{},[6587],{"type":433,"value":6588},"代码除了声明语句，剩下的内容将用于陈述被组织的元素及其间的结构方法，又或是表达经过上述过程之后的结果值。元素间的结构方法，也被称为代码分块，一般简单语句以及子块组成。这也意味着形式分块是语句的唯一结构方法。被语句组织元素只有：标签声明、标识符声明、表达式和语句。",{"type":427,"tag":441,"props":6590,"children":6591},{},[6592],{"type":433,"value":6593},"多重分支语句（switch...）只有一个分块，所有分支都共享这个分块，所以 case 以后不能重复声明变量。",{"type":427,"tag":441,"props":6595,"children":6596},{},[6597,6599,6610],{"type":433,"value":6598},"包括 for...in、for...of 等在内的具有声明名字能力的语句，在使用 let、const 声明时，无论 forBody 是不是复合语句，它总会有一个自己的形式分块（loopEnv），声明存在与这个形式分块中；如果是 var 声明，那么声明存在于父作用域，for 语句只是引用它。由于循环会多次执行，但 let、const 无法多次声明，所以规范要求 for 语句为每次的循环创建一个新的环境，iterationEnv",{"type":427,"tag":520,"props":6600,"children":6601},{},[6602],{"type":427,"tag":524,"props":6603,"children":6607},{"href":6604,"ariaDescribedBy":6605,"dataFootnoteRef":421,"id":6606},"#user-content-fn-iterationenv",[528],"user-content-fnref-iterationenv",[6608],{"type":433,"value":6609},"5",{"type":433,"value":6611},"，每次创建时，从上一个环境中复制所有 let、const 神明的变量值到新环境（或者直接覆盖），因此能起到类似闭包的效果。",{"type":427,"tag":441,"props":6613,"children":6614},{},[6615],{"type":433,"value":6616},"JS 约定所有的声明必须在语法分析期处理，这意味着 JS 在语言设计的方向，尤其是在结构化的方向上更偏向于实现为静态语言。这方便为以后的类型化、类型推导、预编译、执行器优化等特性做准备。",{"type":427,"tag":441,"props":6618,"children":6619},{},[6620],{"type":433,"value":6621},"某些语句执行后无值，比如声明语句、空语句，其他语句按照规则返回特定的值，如果没有之从到任何产生值的语句，则返回 undefined，如：",{"type":427,"tag":452,"props":6623,"children":6625},{"className":685,"code":6624,"language":687,"meta":421,"style":421},"eval(`if (true) ; else ;`) // undefined\n",[6626],{"type":427,"tag":459,"props":6627,"children":6628},{"__ignoreMap":421},[6629],{"type":427,"tag":463,"props":6630,"children":6631},{"class":465,"line":466},[6632,6637,6641,6646,6651,6655,6659],{"type":427,"tag":463,"props":6633,"children":6634},{"style":709},[6635],{"type":433,"value":6636},"eval",{"type":427,"tag":463,"props":6638,"children":6639},{"style":697},[6640],{"type":433,"value":717},{"type":427,"tag":463,"props":6642,"children":6643},{"style":476},[6644],{"type":433,"value":6645},"`",{"type":427,"tag":463,"props":6647,"children":6648},{"style":482},[6649],{"type":433,"value":6650},"if (true) ; else ;",{"type":427,"tag":463,"props":6652,"children":6653},{"style":476},[6654],{"type":433,"value":6645},{"type":427,"tag":463,"props":6656,"children":6657},{"style":697},[6658],{"type":433,"value":747},{"type":427,"tag":463,"props":6660,"children":6661},{"style":750},[6662],{"type":433,"value":986},{"type":427,"tag":435,"props":6664,"children":6666},{"id":6665},"组织形式分块的方法",[6667],{"type":433,"value":6665},{"type":427,"tag":441,"props":6669,"children":6670},{},[6671],{"type":433,"value":6672},"变量或成员在代码中的可见性区间被称为“作用域”，当作用域是通过静态词法分析得出的时候，它就被称为词法作用域。词法环境是词法作用域的运行期实现。",{"type":427,"tag":441,"props":6674,"children":6675},{},[6676],{"type":433,"value":6677},"数据声明语句中存在块级作用域，如：",{"type":427,"tag":452,"props":6679,"children":6681},{"className":685,"code":6680,"language":687,"meta":421,"style":421},"const x = 1, y = x\nconsole.log(y) // 1\n",[6682],{"type":427,"tag":459,"props":6683,"children":6684},{"__ignoreMap":421},[6685,6720],{"type":427,"tag":463,"props":6686,"children":6687},{"class":465,"line":466},[6688,6692,6696,6700,6704,6708,6712,6716],{"type":427,"tag":463,"props":6689,"children":6690},{"style":1020},[6691],{"type":433,"value":5811},{"type":427,"tag":463,"props":6693,"children":6694},{"style":1454},[6695],{"type":433,"value":6496},{"type":427,"tag":463,"props":6697,"children":6698},{"style":493},[6699],{"type":433,"value":1384},{"type":427,"tag":463,"props":6701,"children":6702},{"style":725},[6703],{"type":433,"value":1830},{"type":427,"tag":463,"props":6705,"children":6706},{"style":703},[6707],{"type":433,"value":733},{"type":427,"tag":463,"props":6709,"children":6710},{"style":1454},[6711],{"type":433,"value":6525},{"type":427,"tag":463,"props":6713,"children":6714},{"style":493},[6715],{"type":433,"value":1384},{"type":427,"tag":463,"props":6717,"children":6718},{"style":697},[6719],{"type":433,"value":1028},{"type":427,"tag":463,"props":6721,"children":6722},{"class":465,"line":756},[6723,6727,6731,6735,6740],{"type":427,"tag":463,"props":6724,"children":6725},{"style":697},[6726],{"type":433,"value":5040},{"type":427,"tag":463,"props":6728,"children":6729},{"style":703},[6730],{"type":433,"value":706},{"type":427,"tag":463,"props":6732,"children":6733},{"style":709},[6734],{"type":433,"value":1415},{"type":427,"tag":463,"props":6736,"children":6737},{"style":697},[6738],{"type":433,"value":6739},"(y) ",{"type":427,"tag":463,"props":6741,"children":6742},{"style":750},[6743],{"type":433,"value":6744},"// 1\n",{"type":427,"tag":441,"props":6746,"children":6747},{},[6748],{"type":433,"value":6749},"表达式级别的作用域只存在于 eval 调用中。",{"type":427,"tag":441,"props":6751,"children":6752},{},[6753],{"type":433,"value":6754},"没有形式分块的单一语句（single-statement）是没有块级作用域的意义的，因此以下语句会报语法错误：",{"type":427,"tag":452,"props":6756,"children":6758},{"className":685,"code":6757,"language":687,"meta":421,"style":421},"if (1) let x = 1\n",[6759],{"type":427,"tag":459,"props":6760,"children":6761},{"__ignoreMap":421},[6762],{"type":427,"tag":463,"props":6763,"children":6764},{"class":465,"line":466},[6765,6770,6774,6778,6782,6786,6790,6794],{"type":427,"tag":463,"props":6766,"children":6767},{"style":1724},[6768],{"type":433,"value":6769},"if",{"type":427,"tag":463,"props":6771,"children":6772},{"style":697},[6773],{"type":433,"value":1953},{"type":427,"tag":463,"props":6775,"children":6776},{"style":725},[6777],{"type":433,"value":532},{"type":427,"tag":463,"props":6779,"children":6780},{"style":697},[6781],{"type":433,"value":747},{"type":427,"tag":463,"props":6783,"children":6784},{"style":1020},[6785],{"type":433,"value":1023},{"type":427,"tag":463,"props":6787,"children":6788},{"style":697},[6789],{"type":433,"value":981},{"type":427,"tag":463,"props":6791,"children":6792},{"style":493},[6793],{"type":433,"value":1895},{"type":427,"tag":463,"props":6795,"children":6796},{"style":725},[6797],{"type":433,"value":6798}," 1\n",{"type":427,"tag":441,"props":6800,"children":6801},{},[6802],{"type":433,"value":6803},"函数的名字是变量名（varNames）而不是词法名字（lexicalNames），所以在 if 等语句内声明的函数会被提升到外部。",{"type":427,"tag":441,"props":6805,"children":6806},{},[6807],{"type":433,"value":6808},"规范对全局对象的成员和操作等做了最基本的约定，但没有完全限制这个对象的创建和使用方法，所以不同宿主环境对全局对象的理解可能不同。例如，在浏览器中全局对象是指 window，而 nodejs 环境下则指 global 对象。",{"type":427,"tag":441,"props":6810,"children":6811},{},[6812],{"type":433,"value":6813},"在顺序执行的代码中，我们需要通过一些手段来获得变更程序执行流程的能力，这一能力本质上来说转义为了作用域的变更。一般来说，有以下规则：",{"type":427,"tag":541,"props":6815,"children":6816},{},[6817,6822,6827],{"type":427,"tag":545,"props":6818,"children":6819},{},[6820],{"type":433,"value":6821},"词法作用域互不相交。",{"type":427,"tag":545,"props":6823,"children":6824},{},[6825],{"type":433,"value":6826},"词法作用域间可以存在平行或包含关系。高级别可以包含低级别，反之则不成立。",{"type":427,"tag":545,"props":6828,"children":6829},{},[6830],{"type":433,"value":6831},"高级别流程变更语句可以跨越低级别的作用域。",{"type":427,"tag":441,"props":6833,"children":6834},{},[6835],{"type":433,"value":6836},"JS 可以使用 continue、break、return、throw 等语句跳出作用域，但没有实现平级作用域间来回跳转的能力（Pascal 的 goto）。比外，GOTO 语句已被证明是不必要的，且可能会带来危害。",{"type":427,"tag":435,"props":6838,"children":6840},{"id":6839},"层次结构程序设计",[6841],{"type":433,"value":6839},{"type":427,"tag":441,"props":6843,"children":6844},{},[6845],{"type":433,"value":6846},"符号有隐匿名字的特性，但它不能更改其可见性。",{"type":427,"tag":452,"props":6848,"children":6850},{"className":685,"code":6849,"language":687,"meta":421,"style":421},"const method = obj[Object.getPropertySymbols[0]]\nmethod.call(obj)\n",[6851],{"type":427,"tag":459,"props":6852,"children":6853},{"__ignoreMap":421},[6854,6893],{"type":427,"tag":463,"props":6855,"children":6856},{"class":465,"line":466},[6857,6861,6866,6870,6875,6879,6884,6888],{"type":427,"tag":463,"props":6858,"children":6859},{"style":1020},[6860],{"type":433,"value":5811},{"type":427,"tag":463,"props":6862,"children":6863},{"style":1454},[6864],{"type":433,"value":6865}," method",{"type":427,"tag":463,"props":6867,"children":6868},{"style":493},[6869],{"type":433,"value":1384},{"type":427,"tag":463,"props":6871,"children":6872},{"style":697},[6873],{"type":433,"value":6874}," obj[Object",{"type":427,"tag":463,"props":6876,"children":6877},{"style":703},[6878],{"type":433,"value":706},{"type":427,"tag":463,"props":6880,"children":6881},{"style":697},[6882],{"type":433,"value":6883},"getPropertySymbols[",{"type":427,"tag":463,"props":6885,"children":6886},{"style":725},[6887],{"type":433,"value":728},{"type":427,"tag":463,"props":6889,"children":6890},{"style":697},[6891],{"type":433,"value":6892},"]]\n",{"type":427,"tag":463,"props":6894,"children":6895},{"class":465,"line":756},[6896,6900,6904,6909],{"type":427,"tag":463,"props":6897,"children":6898},{"style":697},[6899],{"type":433,"value":3774},{"type":427,"tag":463,"props":6901,"children":6902},{"style":703},[6903],{"type":433,"value":706},{"type":427,"tag":463,"props":6905,"children":6906},{"style":709},[6907],{"type":433,"value":6908},"call",{"type":427,"tag":463,"props":6910,"children":6911},{"style":697},[6912],{"type":433,"value":6913},"(obj)\n",{"type":427,"tag":441,"props":6915,"children":6916},{},[6917],{"type":433,"value":6918},"super 绑定了一段“访问父类”的逻辑，由于父类可以重置，这段逻辑就是多态的。这与“由于子类可以覆盖方法，所以对象是多态的”的基本逻辑是一致的。",{"type":427,"tag":435,"props":6920,"children":6922},{"id":6921},"变量作用域",[6923],{"type":433,"value":6921},{"type":427,"tag":441,"props":6925,"children":6926},{},[6927],{"type":433,"value":6928},"变量作用域有三个特殊之处：",{"type":427,"tag":541,"props":6930,"children":6931},{},[6932,6937,6942],{"type":427,"tag":545,"props":6933,"children":6934},{},[6935],{"type":433,"value":6936},"严格模式下，eval 中会同时创建词法作用域和变量作用域。",{"type":427,"tag":545,"props":6938,"children":6939},{},[6940],{"type":433,"value":6941},"模块和严格模式下的函数一样，其变量作用域是作为词法作用域的一部分来实现的。",{"type":427,"tag":545,"props":6943,"children":6944},{},[6945],{"type":433,"value":6946},"全局的变量作用域被映射到了全局对象的属性上，并非一个独立的环境。",{"type":427,"tag":441,"props":6948,"children":6949},{},[6950],{"type":433,"value":6951},"和 var 声明的变量在初始化时被置为 undefined 不同，函数声明在初始化时就绑定了函数体。",{"type":427,"tag":441,"props":6953,"children":6954},{},[6955],{"type":433,"value":6956},"由 eval 动态创建的全局变量（全局属性）是允许动态删除的（delete）。",{"type":427,"tag":435,"props":6958,"children":6960},{"id":6959},"私有属性和私有字段的纷争",[6961],{"type":433,"value":6959},{"type":427,"tag":441,"props":6963,"children":6964},{},[6965],{"type":433,"value":6966},"(_　_)。゜zｚＺ",{"type":427,"tag":428,"props":6968,"children":6970},{"id":6969},"函数式语言特性",[6971],{"type":433,"value":6969},{"type":427,"tag":435,"props":6973,"children":6975},{"id":6974},"概述-1",[6976],{"type":433,"value":6073},{"type":427,"tag":441,"props":6978,"children":6979},{},[6980],{"type":433,"value":6981},"基于冯诺依曼体系架构设的程序设计语言，必然面对具有储存系统的计算机体系，并依赖储存（如内存）进行运算。这意味着在硬件层面上，冯诺依曼体系亲命令式的程序语言。这一方面产生了类似 JS 这种多范型语言，另一方面产生 JVM 这种能够进行某些函数式运算的虚拟机环境。",{"type":427,"tag":441,"props":6983,"children":6984},{},[6985],{"type":433,"value":6986},"函数式语言中的“函数”，应该理解为“Lambda（函数）”，它除了可以被调用之外，还需满足：可作为操作数、可保存数据（闭包）、无副作用这三个性质。",{"type":427,"tag":435,"props":6988,"children":6990},{"id":6989},"js中的函数",[6991],{"type":433,"value":6992},"JS中的函数",{"type":427,"tag":441,"props":6994,"children":6995},{},[6996],{"type":433,"value":6997},"默认参数、剩余参数和模板参数被统称为“非简单参数”。当函数参数声明中使用了非简单参数时，函数会进入一种特殊模式，带以下状态：",{"type":427,"tag":541,"props":6999,"children":7000},{},[7001,7006,7011],{"type":427,"tag":545,"props":7002,"children":7003},{},[7004],{"type":433,"value":7005},"无法显式使用“use strict”切换到严格模式。",{"type":427,"tag":545,"props":7007,"children":7008},{},[7009],{"type":433,"value":7010},"不接受重名参数。",{"type":427,"tag":545,"props":7012,"children":7013},{},[7014],{"type":433,"value":7015},"形参和 arguments 之间将解除绑定关系。",{"type":427,"tag":441,"props":7017,"children":7018},{},[7019],{"type":433,"value":7020},"函数的长度属性依赖参数的性质（简单参数还是非简单参数），而 arguments 只指代函数调用时传入的实参。",{"type":427,"tag":452,"props":7022,"children":7024},{"className":685,"code":7023,"language":687,"meta":421,"style":421},"function test(a, b = 1) {\n  console.log(test.length, arguments.length)\n}\ntest(1, 2) // 1，2\n",[7025],{"type":427,"tag":459,"props":7026,"children":7027},{"__ignoreMap":421},[7028,7072,7125,7132],{"type":427,"tag":463,"props":7029,"children":7030},{"class":465,"line":466},[7031,7035,7039,7043,7047,7051,7056,7060,7064,7068],{"type":427,"tag":463,"props":7032,"children":7033},{"style":1020},[7034],{"type":433,"value":1346},{"type":427,"tag":463,"props":7036,"children":7037},{"style":709},[7038],{"type":433,"value":2046},{"type":427,"tag":463,"props":7040,"children":7041},{"style":703},[7042],{"type":433,"value":717},{"type":427,"tag":463,"props":7044,"children":7045},{"style":1647},[7046],{"type":433,"value":524},{"type":427,"tag":463,"props":7048,"children":7049},{"style":703},[7050],{"type":433,"value":733},{"type":427,"tag":463,"props":7052,"children":7053},{"style":1647},[7054],{"type":433,"value":7055}," b",{"type":427,"tag":463,"props":7057,"children":7058},{"style":493},[7059],{"type":433,"value":1384},{"type":427,"tag":463,"props":7061,"children":7062},{"style":725},[7063],{"type":433,"value":1830},{"type":427,"tag":463,"props":7065,"children":7066},{"style":703},[7067],{"type":433,"value":1655},{"type":427,"tag":463,"props":7069,"children":7070},{"style":703},[7071],{"type":433,"value":1361},{"type":427,"tag":463,"props":7073,"children":7074},{"class":465,"line":756},[7075,7079,7083,7087,7091,7095,7099,7104,7108,7113,7117,7121],{"type":427,"tag":463,"props":7076,"children":7077},{"style":697},[7078],{"type":433,"value":1406},{"type":427,"tag":463,"props":7080,"children":7081},{"style":703},[7082],{"type":433,"value":706},{"type":427,"tag":463,"props":7084,"children":7085},{"style":709},[7086],{"type":433,"value":1415},{"type":427,"tag":463,"props":7088,"children":7089},{"style":1418},[7090],{"type":433,"value":717},{"type":427,"tag":463,"props":7092,"children":7093},{"style":697},[7094],{"type":433,"value":1746},{"type":427,"tag":463,"props":7096,"children":7097},{"style":703},[7098],{"type":433,"value":706},{"type":427,"tag":463,"props":7100,"children":7101},{"style":1454},[7102],{"type":433,"value":7103},"length",{"type":427,"tag":463,"props":7105,"children":7106},{"style":703},[7107],{"type":433,"value":733},{"type":427,"tag":463,"props":7109,"children":7110},{"style":4056},[7111],{"type":433,"value":7112}," arguments",{"type":427,"tag":463,"props":7114,"children":7115},{"style":703},[7116],{"type":433,"value":706},{"type":427,"tag":463,"props":7118,"children":7119},{"style":1454},[7120],{"type":433,"value":7103},{"type":427,"tag":463,"props":7122,"children":7123},{"style":1418},[7124],{"type":433,"value":1438},{"type":427,"tag":463,"props":7126,"children":7127},{"class":465,"line":1400},[7128],{"type":427,"tag":463,"props":7129,"children":7130},{"style":703},[7131],{"type":433,"value":1447},{"type":427,"tag":463,"props":7133,"children":7134},{"class":465,"line":1441},[7135,7139,7143,7147,7151,7156,7160],{"type":427,"tag":463,"props":7136,"children":7137},{"style":709},[7138],{"type":433,"value":1746},{"type":427,"tag":463,"props":7140,"children":7141},{"style":697},[7142],{"type":433,"value":717},{"type":427,"tag":463,"props":7144,"children":7145},{"style":725},[7146],{"type":433,"value":532},{"type":427,"tag":463,"props":7148,"children":7149},{"style":703},[7150],{"type":433,"value":733},{"type":427,"tag":463,"props":7152,"children":7153},{"style":725},[7154],{"type":433,"value":7155}," 2",{"type":427,"tag":463,"props":7157,"children":7158},{"style":697},[7159],{"type":433,"value":747},{"type":427,"tag":463,"props":7161,"children":7162},{"style":750},[7163],{"type":433,"value":7164},"// 1，2\n",{"type":427,"tag":441,"props":7166,"children":7167},{},[7168,7170,7181],{"type":433,"value":7169},"表达式最后返回的是值而不是引用",{"type":427,"tag":520,"props":7171,"children":7172},{},[7173],{"type":427,"tag":524,"props":7174,"children":7178},{"href":7175,"ariaDescribedBy":7176,"dataFootnoteRef":421,"id":7177},"#user-content-fn-reference",[528],"user-content-fnref-reference",[7179],{"type":433,"value":7180},"6",{"type":433,"value":7182},"，所以诸如 (0, a.b)() 这种调用会丢失 this 指向。与此同理，函数调用时传参也是传值，而不是引用，这也是作为非惰性求值的实现结果。",{"type":427,"tag":452,"props":7184,"children":7186},{"className":685,"code":7185,"language":687,"meta":421,"style":421},"window.x = 1\nconst a = {\n  x: 2,\n  b () {\n    console.log(this.x)\n  }\n}\nconsole.log(a.b()) // 2\nconsole.log((0, a.b)()) // 1\n",[7187],{"type":427,"tag":459,"props":7188,"children":7189},{"__ignoreMap":421},[7190,7215,7234,7255,7271,7308,7315,7322,7359],{"type":427,"tag":463,"props":7191,"children":7192},{"class":465,"line":466},[7193,7198,7202,7207,7211],{"type":427,"tag":463,"props":7194,"children":7195},{"style":697},[7196],{"type":433,"value":7197},"window",{"type":427,"tag":463,"props":7199,"children":7200},{"style":703},[7201],{"type":433,"value":706},{"type":427,"tag":463,"props":7203,"children":7204},{"style":697},[7205],{"type":433,"value":7206},"x ",{"type":427,"tag":463,"props":7208,"children":7209},{"style":493},[7210],{"type":433,"value":1895},{"type":427,"tag":463,"props":7212,"children":7213},{"style":725},[7214],{"type":433,"value":6798},{"type":427,"tag":463,"props":7216,"children":7217},{"class":465,"line":756},[7218,7222,7226,7230],{"type":427,"tag":463,"props":7219,"children":7220},{"style":1020},[7221],{"type":433,"value":5811},{"type":427,"tag":463,"props":7223,"children":7224},{"style":1454},[7225],{"type":433,"value":3244},{"type":427,"tag":463,"props":7227,"children":7228},{"style":493},[7229],{"type":433,"value":1384},{"type":427,"tag":463,"props":7231,"children":7232},{"style":703},[7233],{"type":433,"value":1361},{"type":427,"tag":463,"props":7235,"children":7236},{"class":465,"line":1400},[7237,7242,7246,7250],{"type":427,"tag":463,"props":7238,"children":7239},{"style":1418},[7240],{"type":433,"value":7241},"  x",{"type":427,"tag":463,"props":7243,"children":7244},{"style":703},[7245],{"type":433,"value":1880},{"type":427,"tag":463,"props":7247,"children":7248},{"style":725},[7249],{"type":433,"value":7155},{"type":427,"tag":463,"props":7251,"children":7252},{"style":703},[7253],{"type":433,"value":7254},",\n",{"type":427,"tag":463,"props":7256,"children":7257},{"class":465,"line":1441},[7258,7263,7267],{"type":427,"tag":463,"props":7259,"children":7260},{"style":2680},[7261],{"type":433,"value":7262},"  b",{"type":427,"tag":463,"props":7264,"children":7265},{"style":703},[7266],{"type":433,"value":1356},{"type":427,"tag":463,"props":7268,"children":7269},{"style":703},[7270],{"type":433,"value":1361},{"type":427,"tag":463,"props":7272,"children":7273},{"class":465,"line":1450},[7274,7279,7283,7287,7291,7296,7300,7304],{"type":427,"tag":463,"props":7275,"children":7276},{"style":697},[7277],{"type":433,"value":7278},"    console",{"type":427,"tag":463,"props":7280,"children":7281},{"style":703},[7282],{"type":433,"value":706},{"type":427,"tag":463,"props":7284,"children":7285},{"style":709},[7286],{"type":433,"value":1415},{"type":427,"tag":463,"props":7288,"children":7289},{"style":1418},[7290],{"type":433,"value":717},{"type":427,"tag":463,"props":7292,"children":7293},{"style":1367},[7294],{"type":433,"value":7295},"this",{"type":427,"tag":463,"props":7297,"children":7298},{"style":703},[7299],{"type":433,"value":706},{"type":427,"tag":463,"props":7301,"children":7302},{"style":697},[7303],{"type":433,"value":2691},{"type":427,"tag":463,"props":7305,"children":7306},{"style":1418},[7307],{"type":433,"value":1438},{"type":427,"tag":463,"props":7309,"children":7310},{"class":465,"line":1485},[7311],{"type":427,"tag":463,"props":7312,"children":7313},{"style":703},[7314],{"type":433,"value":2100},{"type":427,"tag":463,"props":7316,"children":7317},{"class":465,"line":1522},[7318],{"type":427,"tag":463,"props":7319,"children":7320},{"style":703},[7321],{"type":433,"value":1447},{"type":427,"tag":463,"props":7323,"children":7324},{"class":465,"line":1530},[7325,7329,7333,7337,7342,7346,7350,7354],{"type":427,"tag":463,"props":7326,"children":7327},{"style":697},[7328],{"type":433,"value":5040},{"type":427,"tag":463,"props":7330,"children":7331},{"style":703},[7332],{"type":433,"value":706},{"type":427,"tag":463,"props":7334,"children":7335},{"style":709},[7336],{"type":433,"value":1415},{"type":427,"tag":463,"props":7338,"children":7339},{"style":697},[7340],{"type":433,"value":7341},"(a",{"type":427,"tag":463,"props":7343,"children":7344},{"style":703},[7345],{"type":433,"value":706},{"type":427,"tag":463,"props":7347,"children":7348},{"style":709},[7349],{"type":433,"value":1379},{"type":427,"tag":463,"props":7351,"children":7352},{"style":697},[7353],{"type":433,"value":835},{"type":427,"tag":463,"props":7355,"children":7356},{"style":750},[7357],{"type":433,"value":7358},"// 2\n",{"type":427,"tag":463,"props":7360,"children":7361},{"class":465,"line":1557},[7362,7366,7370,7374,7379,7383,7387,7391,7395,7400],{"type":427,"tag":463,"props":7363,"children":7364},{"style":697},[7365],{"type":433,"value":5040},{"type":427,"tag":463,"props":7367,"children":7368},{"style":703},[7369],{"type":433,"value":706},{"type":427,"tag":463,"props":7371,"children":7372},{"style":709},[7373],{"type":433,"value":1415},{"type":427,"tag":463,"props":7375,"children":7376},{"style":697},[7377],{"type":433,"value":7378},"((",{"type":427,"tag":463,"props":7380,"children":7381},{"style":725},[7382],{"type":433,"value":728},{"type":427,"tag":463,"props":7384,"children":7385},{"style":703},[7386],{"type":433,"value":733},{"type":427,"tag":463,"props":7388,"children":7389},{"style":697},[7390],{"type":433,"value":3244},{"type":427,"tag":463,"props":7392,"children":7393},{"style":703},[7394],{"type":433,"value":706},{"type":427,"tag":463,"props":7396,"children":7397},{"style":697},[7398],{"type":433,"value":7399},"b)()) ",{"type":427,"tag":463,"props":7401,"children":7402},{"style":750},[7403],{"type":433,"value":6744},{"type":427,"tag":441,"props":7405,"children":7406},{},[7407],{"type":433,"value":7408},"具名函数在表达式中时不会声明标识符。",{"type":427,"tag":441,"props":7410,"children":7411},{},[7412],{"type":433,"value":7413},"要区分“方法”和“将函数作为对象的属性”。我们说方法因为没有初始化[[Constructor]]内部槽所以不能作为构造器并非指函数属性，比如：",{"type":427,"tag":452,"props":7415,"children":7417},{"className":685,"code":7416,"language":687,"meta":421,"style":421},"const a = {\n  b: function test() {},\n  test() {}\n}\nnew a.b() // {}\nnew a.test() // TypeError\n",[7418],{"type":427,"tag":459,"props":7419,"children":7420},{"__ignoreMap":421},[7421,7440,7468,7483,7490,7518],{"type":427,"tag":463,"props":7422,"children":7423},{"class":465,"line":466},[7424,7428,7432,7436],{"type":427,"tag":463,"props":7425,"children":7426},{"style":1020},[7427],{"type":433,"value":5811},{"type":427,"tag":463,"props":7429,"children":7430},{"style":1454},[7431],{"type":433,"value":3244},{"type":427,"tag":463,"props":7433,"children":7434},{"style":493},[7435],{"type":433,"value":1384},{"type":427,"tag":463,"props":7437,"children":7438},{"style":703},[7439],{"type":433,"value":1361},{"type":427,"tag":463,"props":7441,"children":7442},{"class":465,"line":756},[7443,7447,7451,7455,7459,7463],{"type":427,"tag":463,"props":7444,"children":7445},{"style":709},[7446],{"type":433,"value":7262},{"type":427,"tag":463,"props":7448,"children":7449},{"style":703},[7450],{"type":433,"value":1880},{"type":427,"tag":463,"props":7452,"children":7453},{"style":1020},[7454],{"type":433,"value":1474},{"type":427,"tag":463,"props":7456,"children":7457},{"style":709},[7458],{"type":433,"value":2046},{"type":427,"tag":463,"props":7460,"children":7461},{"style":703},[7462],{"type":433,"value":1069},{"type":427,"tag":463,"props":7464,"children":7465},{"style":703},[7466],{"type":433,"value":7467}," {},\n",{"type":427,"tag":463,"props":7469,"children":7470},{"class":465,"line":1400},[7471,7475,7479],{"type":427,"tag":463,"props":7472,"children":7473},{"style":2680},[7474],{"type":433,"value":2794},{"type":427,"tag":463,"props":7476,"children":7477},{"style":703},[7478],{"type":433,"value":1069},{"type":427,"tag":463,"props":7480,"children":7481},{"style":703},[7482],{"type":433,"value":3152},{"type":427,"tag":463,"props":7484,"children":7485},{"class":465,"line":1441},[7486],{"type":427,"tag":463,"props":7487,"children":7488},{"style":703},[7489],{"type":433,"value":1447},{"type":427,"tag":463,"props":7491,"children":7492},{"class":465,"line":1450},[7493,7497,7501,7505,7509,7513],{"type":427,"tag":463,"props":7494,"children":7495},{"style":493},[7496],{"type":433,"value":1536},{"type":427,"tag":463,"props":7498,"children":7499},{"style":697},[7500],{"type":433,"value":3244},{"type":427,"tag":463,"props":7502,"children":7503},{"style":703},[7504],{"type":433,"value":706},{"type":427,"tag":463,"props":7506,"children":7507},{"style":709},[7508],{"type":433,"value":1379},{"type":427,"tag":463,"props":7510,"children":7511},{"style":697},[7512],{"type":433,"value":851},{"type":427,"tag":463,"props":7514,"children":7515},{"style":750},[7516],{"type":433,"value":7517},"// {}\n",{"type":427,"tag":463,"props":7519,"children":7520},{"class":465,"line":1485},[7521,7525,7529,7533,7537,7541],{"type":427,"tag":463,"props":7522,"children":7523},{"style":493},[7524],{"type":433,"value":1536},{"type":427,"tag":463,"props":7526,"children":7527},{"style":697},[7528],{"type":433,"value":3244},{"type":427,"tag":463,"props":7530,"children":7531},{"style":703},[7532],{"type":433,"value":706},{"type":427,"tag":463,"props":7534,"children":7535},{"style":709},[7536],{"type":433,"value":1746},{"type":427,"tag":463,"props":7538,"children":7539},{"style":697},[7540],{"type":433,"value":851},{"type":427,"tag":463,"props":7542,"children":7543},{"style":750},[7544],{"type":433,"value":3261},{"type":427,"tag":441,"props":7546,"children":7547},{},[7548],{"type":433,"value":7549},"方法的特性总结以下三点：",{"type":427,"tag":541,"props":7551,"children":7552},{},[7553,7558,7563],{"type":427,"tag":545,"props":7554,"children":7555},{},[7556],{"type":433,"value":7557},"不能作为构造器。",{"type":427,"tag":545,"props":7559,"children":7560},{},[7561],{"type":433,"value":7562},"除了生成器方法，没有内部原型。",{"type":427,"tag":545,"props":7564,"children":7565},{},[7566],{"type":433,"value":7567},"方法不能具名。",{"type":427,"tag":441,"props":7569,"children":7570},{},[7571],{"type":433,"value":7572},"绑定函数的内部原型与原函数一致，类似于会执行以下代码。也因此如果访问绑定函数原型上的方法没啥问题，但是访问原函数的自有属性就会出错了。",{"type":427,"tag":452,"props":7574,"children":7576},{"className":685,"code":7575,"language":687,"meta":421,"style":421},"Object.setPrototypeOf(boundFn, Object.getPrototypeOf(targetFn))\n",[7577],{"type":427,"tag":459,"props":7578,"children":7579},{"__ignoreMap":421},[7580],{"type":427,"tag":463,"props":7581,"children":7582},{"class":465,"line":466},[7583,7587,7591,7595,7600,7604,7608,7612,7616],{"type":427,"tag":463,"props":7584,"children":7585},{"style":697},[7586],{"type":433,"value":700},{"type":427,"tag":463,"props":7588,"children":7589},{"style":703},[7590],{"type":433,"value":706},{"type":427,"tag":463,"props":7592,"children":7593},{"style":709},[7594],{"type":433,"value":3662},{"type":427,"tag":463,"props":7596,"children":7597},{"style":697},[7598],{"type":433,"value":7599},"(boundFn",{"type":427,"tag":463,"props":7601,"children":7602},{"style":703},[7603],{"type":433,"value":733},{"type":427,"tag":463,"props":7605,"children":7606},{"style":697},[7607],{"type":433,"value":4133},{"type":427,"tag":463,"props":7609,"children":7610},{"style":703},[7611],{"type":433,"value":706},{"type":427,"tag":463,"props":7613,"children":7614},{"style":709},[7615],{"type":433,"value":5548},{"type":427,"tag":463,"props":7617,"children":7618},{"style":697},[7619],{"type":433,"value":7620},"(targetFn))\n",{"type":427,"tag":441,"props":7622,"children":7623},{},[7624],{"type":433,"value":7625},"此外，绑定函数的 new.target 逻辑丢失，new.target 仍指向原函数。",{"type":427,"tag":452,"props":7627,"children":7629},{"className":685,"code":7628,"language":687,"meta":421,"style":421},"function a () {\n  console.log(new.target === a)\n}\nconsole.log(new (a.bind())) // true\n",[7630],{"type":427,"tag":459,"props":7631,"children":7632},{"__ignoreMap":421},[7633,7652,7695,7702],{"type":427,"tag":463,"props":7634,"children":7635},{"class":465,"line":466},[7636,7640,7644,7648],{"type":427,"tag":463,"props":7637,"children":7638},{"style":1020},[7639],{"type":433,"value":1346},{"type":427,"tag":463,"props":7641,"children":7642},{"style":709},[7643],{"type":433,"value":3244},{"type":427,"tag":463,"props":7645,"children":7646},{"style":703},[7647],{"type":433,"value":1356},{"type":427,"tag":463,"props":7649,"children":7650},{"style":703},[7651],{"type":433,"value":1361},{"type":427,"tag":463,"props":7653,"children":7654},{"class":465,"line":756},[7655,7659,7663,7667,7671,7675,7679,7683,7687,7691],{"type":427,"tag":463,"props":7656,"children":7657},{"style":697},[7658],{"type":433,"value":1406},{"type":427,"tag":463,"props":7660,"children":7661},{"style":703},[7662],{"type":433,"value":706},{"type":427,"tag":463,"props":7664,"children":7665},{"style":709},[7666],{"type":433,"value":1415},{"type":427,"tag":463,"props":7668,"children":7669},{"style":1418},[7670],{"type":433,"value":717},{"type":427,"tag":463,"props":7672,"children":7673},{"style":493},[7674],{"type":433,"value":1536},{"type":427,"tag":463,"props":7676,"children":7677},{"style":703},[7678],{"type":433,"value":706},{"type":427,"tag":463,"props":7680,"children":7681},{"style":1454},[7682],{"type":433,"value":5675},{"type":427,"tag":463,"props":7684,"children":7685},{"style":493},[7686],{"type":433,"value":2027},{"type":427,"tag":463,"props":7688,"children":7689},{"style":697},[7690],{"type":433,"value":3244},{"type":427,"tag":463,"props":7692,"children":7693},{"style":1418},[7694],{"type":433,"value":1438},{"type":427,"tag":463,"props":7696,"children":7697},{"class":465,"line":1400},[7698],{"type":427,"tag":463,"props":7699,"children":7700},{"style":703},[7701],{"type":433,"value":1447},{"type":427,"tag":463,"props":7703,"children":7704},{"class":465,"line":1441},[7705,7709,7713,7717,7721,7725,7730,7734,7739,7744],{"type":427,"tag":463,"props":7706,"children":7707},{"style":697},[7708],{"type":433,"value":5040},{"type":427,"tag":463,"props":7710,"children":7711},{"style":703},[7712],{"type":433,"value":706},{"type":427,"tag":463,"props":7714,"children":7715},{"style":709},[7716],{"type":433,"value":1415},{"type":427,"tag":463,"props":7718,"children":7719},{"style":697},[7720],{"type":433,"value":717},{"type":427,"tag":463,"props":7722,"children":7723},{"style":493},[7724],{"type":433,"value":1536},{"type":427,"tag":463,"props":7726,"children":7727},{"style":697},[7728],{"type":433,"value":7729}," (a",{"type":427,"tag":463,"props":7731,"children":7732},{"style":703},[7733],{"type":433,"value":706},{"type":427,"tag":463,"props":7735,"children":7736},{"style":709},[7737],{"type":433,"value":7738},"bind",{"type":427,"tag":463,"props":7740,"children":7741},{"style":697},[7742],{"type":433,"value":7743},"())) ",{"type":427,"tag":463,"props":7745,"children":7746},{"style":750},[7747],{"type":433,"value":797},{"type":427,"tag":441,"props":7749,"children":7750},{},[7751],{"type":433,"value":7752},"class 作为函数调用会抛出运行时错误，由于 class 是在 [[Call]] 内部槽中进行禁止调用处理的，所以 class 的代理对象可以设置 apply 陷阱以拦截并触发正常调用。",{"type":427,"tag":441,"props":7754,"children":7755},{},[7756],{"type":433,"value":7757},"如果需要在递归中保持 this 引用，可以使用方法声明加箭头函数的写法：",{"type":427,"tag":452,"props":7759,"children":7761},{"className":685,"code":7760,"language":687,"meta":421,"style":421},"const obj = {\n  step: 0,\n  run (init) {\n    const exec = x => {\n      if (x > 0) {\n        console.log(x)\n        this.step += 1\n        exec(x - 1)\n      } else {\n        console.log('steps: ', this.step)\n      }\n    }\n    return exec(init)\n  }\n}\nobj.run(10) // steps: 10\n",[7762],{"type":427,"tag":459,"props":7763,"children":7764},{"__ignoreMap":421},[7765,7784,7805,7830,7860,7892,7920,7946,7974,7990,8042,8050,8057,8080,8087,8094],{"type":427,"tag":463,"props":7766,"children":7767},{"class":465,"line":466},[7768,7772,7776,7780],{"type":427,"tag":463,"props":7769,"children":7770},{"style":1020},[7771],{"type":433,"value":5811},{"type":427,"tag":463,"props":7773,"children":7774},{"style":1454},[7775],{"type":433,"value":2661},{"type":427,"tag":463,"props":7777,"children":7778},{"style":493},[7779],{"type":433,"value":1384},{"type":427,"tag":463,"props":7781,"children":7782},{"style":703},[7783],{"type":433,"value":1361},{"type":427,"tag":463,"props":7785,"children":7786},{"class":465,"line":756},[7787,7792,7796,7801],{"type":427,"tag":463,"props":7788,"children":7789},{"style":1418},[7790],{"type":433,"value":7791},"  step",{"type":427,"tag":463,"props":7793,"children":7794},{"style":703},[7795],{"type":433,"value":1880},{"type":427,"tag":463,"props":7797,"children":7798},{"style":725},[7799],{"type":433,"value":7800}," 0",{"type":427,"tag":463,"props":7802,"children":7803},{"style":703},[7804],{"type":433,"value":7254},{"type":427,"tag":463,"props":7806,"children":7807},{"class":465,"line":1400},[7808,7813,7817,7822,7826],{"type":427,"tag":463,"props":7809,"children":7810},{"style":2680},[7811],{"type":433,"value":7812},"  run",{"type":427,"tag":463,"props":7814,"children":7815},{"style":703},[7816],{"type":433,"value":1953},{"type":427,"tag":463,"props":7818,"children":7819},{"style":1647},[7820],{"type":433,"value":7821},"init",{"type":427,"tag":463,"props":7823,"children":7824},{"style":703},[7825],{"type":433,"value":1655},{"type":427,"tag":463,"props":7827,"children":7828},{"style":703},[7829],{"type":433,"value":1361},{"type":427,"tag":463,"props":7831,"children":7832},{"class":465,"line":1441},[7833,7838,7844,7848,7852,7856],{"type":427,"tag":463,"props":7834,"children":7835},{"style":1020},[7836],{"type":433,"value":7837},"    const",{"type":427,"tag":463,"props":7839,"children":7841},{"style":7840},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[7842],{"type":433,"value":7843}," exec",{"type":427,"tag":463,"props":7845,"children":7846},{"style":493},[7847],{"type":433,"value":1384},{"type":427,"tag":463,"props":7849,"children":7850},{"style":1647},[7851],{"type":433,"value":6496},{"type":427,"tag":463,"props":7853,"children":7854},{"style":1020},[7855],{"type":433,"value":5747},{"type":427,"tag":463,"props":7857,"children":7858},{"style":703},[7859],{"type":433,"value":1361},{"type":427,"tag":463,"props":7861,"children":7862},{"class":465,"line":1450},[7863,7867,7871,7875,7880,7884,7888],{"type":427,"tag":463,"props":7864,"children":7865},{"style":1724},[7866],{"type":433,"value":2260},{"type":427,"tag":463,"props":7868,"children":7869},{"style":1418},[7870],{"type":433,"value":1953},{"type":427,"tag":463,"props":7872,"children":7873},{"style":697},[7874],{"type":433,"value":2691},{"type":427,"tag":463,"props":7876,"children":7877},{"style":493},[7878],{"type":433,"value":7879}," >",{"type":427,"tag":463,"props":7881,"children":7882},{"style":725},[7883],{"type":433,"value":7800},{"type":427,"tag":463,"props":7885,"children":7886},{"style":1418},[7887],{"type":433,"value":747},{"type":427,"tag":463,"props":7889,"children":7890},{"style":703},[7891],{"type":433,"value":1770},{"type":427,"tag":463,"props":7893,"children":7894},{"class":465,"line":1485},[7895,7900,7904,7908,7912,7916],{"type":427,"tag":463,"props":7896,"children":7897},{"style":697},[7898],{"type":433,"value":7899},"        console",{"type":427,"tag":463,"props":7901,"children":7902},{"style":703},[7903],{"type":433,"value":706},{"type":427,"tag":463,"props":7905,"children":7906},{"style":709},[7907],{"type":433,"value":1415},{"type":427,"tag":463,"props":7909,"children":7910},{"style":1418},[7911],{"type":433,"value":717},{"type":427,"tag":463,"props":7913,"children":7914},{"style":697},[7915],{"type":433,"value":2691},{"type":427,"tag":463,"props":7917,"children":7918},{"style":1418},[7919],{"type":433,"value":1438},{"type":427,"tag":463,"props":7921,"children":7922},{"class":465,"line":1522},[7923,7928,7932,7937,7942],{"type":427,"tag":463,"props":7924,"children":7925},{"style":1367},[7926],{"type":433,"value":7927},"        this",{"type":427,"tag":463,"props":7929,"children":7930},{"style":703},[7931],{"type":433,"value":706},{"type":427,"tag":463,"props":7933,"children":7934},{"style":697},[7935],{"type":433,"value":7936},"step",{"type":427,"tag":463,"props":7938,"children":7939},{"style":493},[7940],{"type":433,"value":7941}," +=",{"type":427,"tag":463,"props":7943,"children":7944},{"style":725},[7945],{"type":433,"value":6798},{"type":427,"tag":463,"props":7947,"children":7948},{"class":465,"line":1530},[7949,7954,7958,7962,7966,7970],{"type":427,"tag":463,"props":7950,"children":7951},{"style":709},[7952],{"type":433,"value":7953},"        exec",{"type":427,"tag":463,"props":7955,"children":7956},{"style":1418},[7957],{"type":433,"value":717},{"type":427,"tag":463,"props":7959,"children":7960},{"style":697},[7961],{"type":433,"value":2691},{"type":427,"tag":463,"props":7963,"children":7964},{"style":493},[7965],{"type":433,"value":738},{"type":427,"tag":463,"props":7967,"children":7968},{"style":725},[7969],{"type":433,"value":1830},{"type":427,"tag":463,"props":7971,"children":7972},{"style":1418},[7973],{"type":433,"value":1438},{"type":427,"tag":463,"props":7975,"children":7976},{"class":465,"line":1557},[7977,7982,7986],{"type":427,"tag":463,"props":7978,"children":7979},{"style":703},[7980],{"type":433,"value":7981},"      }",{"type":427,"tag":463,"props":7983,"children":7984},{"style":1724},[7985],{"type":433,"value":5949},{"type":427,"tag":463,"props":7987,"children":7988},{"style":703},[7989],{"type":433,"value":1361},{"type":427,"tag":463,"props":7991,"children":7992},{"class":465,"line":2133},[7993,7997,8001,8005,8009,8013,8018,8022,8026,8030,8034,8038],{"type":427,"tag":463,"props":7994,"children":7995},{"style":697},[7996],{"type":433,"value":7899},{"type":427,"tag":463,"props":7998,"children":7999},{"style":703},[8000],{"type":433,"value":706},{"type":427,"tag":463,"props":8002,"children":8003},{"style":709},[8004],{"type":433,"value":1415},{"type":427,"tag":463,"props":8006,"children":8007},{"style":1418},[8008],{"type":433,"value":717},{"type":427,"tag":463,"props":8010,"children":8011},{"style":476},[8012],{"type":433,"value":490},{"type":427,"tag":463,"props":8014,"children":8015},{"style":482},[8016],{"type":433,"value":8017},"steps: ",{"type":427,"tag":463,"props":8019,"children":8020},{"style":476},[8021],{"type":433,"value":490},{"type":427,"tag":463,"props":8023,"children":8024},{"style":703},[8025],{"type":433,"value":733},{"type":427,"tag":463,"props":8027,"children":8028},{"style":1367},[8029],{"type":433,"value":3812},{"type":427,"tag":463,"props":8031,"children":8032},{"style":703},[8033],{"type":433,"value":706},{"type":427,"tag":463,"props":8035,"children":8036},{"style":697},[8037],{"type":433,"value":7936},{"type":427,"tag":463,"props":8039,"children":8040},{"style":1418},[8041],{"type":433,"value":1438},{"type":427,"tag":463,"props":8043,"children":8044},{"class":465,"line":2193},[8045],{"type":427,"tag":463,"props":8046,"children":8047},{"style":703},[8048],{"type":433,"value":8049},"      }\n",{"type":427,"tag":463,"props":8051,"children":8052},{"class":465,"line":2254},[8053],{"type":427,"tag":463,"props":8054,"children":8055},{"style":703},[8056],{"type":433,"value":2342},{"type":427,"tag":463,"props":8058,"children":8059},{"class":465,"line":2295},[8060,8064,8068,8072,8076],{"type":427,"tag":463,"props":8061,"children":8062},{"style":1724},[8063],{"type":433,"value":2758},{"type":427,"tag":463,"props":8065,"children":8066},{"style":709},[8067],{"type":433,"value":7843},{"type":427,"tag":463,"props":8069,"children":8070},{"style":1418},[8071],{"type":433,"value":717},{"type":427,"tag":463,"props":8073,"children":8074},{"style":697},[8075],{"type":433,"value":7821},{"type":427,"tag":463,"props":8077,"children":8078},{"style":1418},[8079],{"type":433,"value":1438},{"type":427,"tag":463,"props":8081,"children":8082},{"class":465,"line":2336},[8083],{"type":427,"tag":463,"props":8084,"children":8085},{"style":703},[8086],{"type":433,"value":2100},{"type":427,"tag":463,"props":8088,"children":8089},{"class":465,"line":2345},[8090],{"type":427,"tag":463,"props":8091,"children":8092},{"style":703},[8093],{"type":433,"value":1447},{"type":427,"tag":463,"props":8095,"children":8096},{"class":465,"line":2353},[8097,8102,8106,8111,8115,8120,8124],{"type":427,"tag":463,"props":8098,"children":8099},{"style":697},[8100],{"type":433,"value":8101},"obj",{"type":427,"tag":463,"props":8103,"children":8104},{"style":703},[8105],{"type":433,"value":706},{"type":427,"tag":463,"props":8107,"children":8108},{"style":709},[8109],{"type":433,"value":8110},"run",{"type":427,"tag":463,"props":8112,"children":8113},{"style":697},[8114],{"type":433,"value":717},{"type":427,"tag":463,"props":8116,"children":8117},{"style":725},[8118],{"type":433,"value":8119},"10",{"type":427,"tag":463,"props":8121,"children":8122},{"style":697},[8123],{"type":433,"value":747},{"type":427,"tag":463,"props":8125,"children":8126},{"style":750},[8127],{"type":433,"value":8128},"// steps: 10\n",{"type":427,"tag":435,"props":8130,"children":8132},{"id":8131},"函数的行为",[8133],{"type":433,"value":8131},{"type":427,"tag":441,"props":8135,"children":8136},{},[8137],{"type":433,"value":8138},"诸如 arguments.callee、fn.caller、fn.arguments 等属性是早期规范用于访问执行上下文栈的一种手段，现规范已在严格模式下将其移除。",{"type":427,"tag":441,"props":8140,"children":8141},{},[8142],{"type":433,"value":8143},"将调用函数时“持有有效的 this 引用”叫做方法调用。",{"type":427,"tag":441,"props":8145,"children":8146},{},[8147],{"type":433,"value":8148},"规范中的引用类型（Ref）由三个部分构成：base、referencedName、strict，分别指代对象所在环境、引用该对象的名字、当前是否处于严格模式。",{"type":427,"tag":441,"props":8150,"children":8151},{},[8152],{"type":433,"value":8153},"迭代器界面中的 return 和 throw 需要外部代码负责，如：",{"type":427,"tag":452,"props":8155,"children":8157},{"className":685,"code":8156,"language":687,"meta":421,"style":421},"function* GetThisDone() {\n  try {\n    yield 1\n    yield 10\n    yield 1\n  } finally {\n    console.log('done')\n  }\n}\nconst get = GetThisDone()\nlet val\nwhile (val = get.next().value) {\n  if (val \u003C 10) {\n    console.log('right val:', val)\n  } else {\n    console.log('wrong val')\n    get.return()\n  }\n}\n// right val: 1\n// wrong val\n// done\n",[8158],{"type":427,"tag":459,"props":8159,"children":8160},{"__ignoreMap":421},[8161,8186,8198,8210,8222,8233,8250,8286,8293,8300,8324,8336,8383,8416,8461,8476,8512,8533,8541,8549,8558,8567],{"type":427,"tag":463,"props":8162,"children":8163},{"class":465,"line":466},[8164,8168,8173,8178,8182],{"type":427,"tag":463,"props":8165,"children":8166},{"style":1020},[8167],{"type":433,"value":1346},{"type":427,"tag":463,"props":8169,"children":8170},{"style":493},[8171],{"type":433,"value":8172},"*",{"type":427,"tag":463,"props":8174,"children":8175},{"style":709},[8176],{"type":433,"value":8177}," GetThisDone",{"type":427,"tag":463,"props":8179,"children":8180},{"style":703},[8181],{"type":433,"value":1069},{"type":427,"tag":463,"props":8183,"children":8184},{"style":703},[8185],{"type":433,"value":1361},{"type":427,"tag":463,"props":8187,"children":8188},{"class":465,"line":756},[8189,8194],{"type":427,"tag":463,"props":8190,"children":8191},{"style":1724},[8192],{"type":433,"value":8193},"  try",{"type":427,"tag":463,"props":8195,"children":8196},{"style":703},[8197],{"type":433,"value":1361},{"type":427,"tag":463,"props":8199,"children":8200},{"class":465,"line":1400},[8201,8206],{"type":427,"tag":463,"props":8202,"children":8203},{"style":1724},[8204],{"type":433,"value":8205},"    yield",{"type":427,"tag":463,"props":8207,"children":8208},{"style":725},[8209],{"type":433,"value":6798},{"type":427,"tag":463,"props":8211,"children":8212},{"class":465,"line":1441},[8213,8217],{"type":427,"tag":463,"props":8214,"children":8215},{"style":1724},[8216],{"type":433,"value":8205},{"type":427,"tag":463,"props":8218,"children":8219},{"style":725},[8220],{"type":433,"value":8221}," 10\n",{"type":427,"tag":463,"props":8223,"children":8224},{"class":465,"line":1450},[8225,8229],{"type":427,"tag":463,"props":8226,"children":8227},{"style":1724},[8228],{"type":433,"value":8205},{"type":427,"tag":463,"props":8230,"children":8231},{"style":725},[8232],{"type":433,"value":6798},{"type":427,"tag":463,"props":8234,"children":8235},{"class":465,"line":1485},[8236,8241,8246],{"type":427,"tag":463,"props":8237,"children":8238},{"style":703},[8239],{"type":433,"value":8240},"  }",{"type":427,"tag":463,"props":8242,"children":8243},{"style":1724},[8244],{"type":433,"value":8245}," finally",{"type":427,"tag":463,"props":8247,"children":8248},{"style":703},[8249],{"type":433,"value":1361},{"type":427,"tag":463,"props":8251,"children":8252},{"class":465,"line":1522},[8253,8257,8261,8265,8269,8273,8278,8282],{"type":427,"tag":463,"props":8254,"children":8255},{"style":697},[8256],{"type":433,"value":7278},{"type":427,"tag":463,"props":8258,"children":8259},{"style":703},[8260],{"type":433,"value":706},{"type":427,"tag":463,"props":8262,"children":8263},{"style":709},[8264],{"type":433,"value":1415},{"type":427,"tag":463,"props":8266,"children":8267},{"style":1418},[8268],{"type":433,"value":717},{"type":427,"tag":463,"props":8270,"children":8271},{"style":476},[8272],{"type":433,"value":490},{"type":427,"tag":463,"props":8274,"children":8275},{"style":482},[8276],{"type":433,"value":8277},"done",{"type":427,"tag":463,"props":8279,"children":8280},{"style":476},[8281],{"type":433,"value":490},{"type":427,"tag":463,"props":8283,"children":8284},{"style":1418},[8285],{"type":433,"value":1438},{"type":427,"tag":463,"props":8287,"children":8288},{"class":465,"line":1530},[8289],{"type":427,"tag":463,"props":8290,"children":8291},{"style":703},[8292],{"type":433,"value":2100},{"type":427,"tag":463,"props":8294,"children":8295},{"class":465,"line":1557},[8296],{"type":427,"tag":463,"props":8297,"children":8298},{"style":703},[8299],{"type":433,"value":1447},{"type":427,"tag":463,"props":8301,"children":8302},{"class":465,"line":2133},[8303,8307,8312,8316,8320],{"type":427,"tag":463,"props":8304,"children":8305},{"style":1020},[8306],{"type":433,"value":5811},{"type":427,"tag":463,"props":8308,"children":8309},{"style":1454},[8310],{"type":433,"value":8311}," get",{"type":427,"tag":463,"props":8313,"children":8314},{"style":493},[8315],{"type":433,"value":1384},{"type":427,"tag":463,"props":8317,"children":8318},{"style":709},[8319],{"type":433,"value":8177},{"type":427,"tag":463,"props":8321,"children":8322},{"style":697},[8323],{"type":433,"value":3361},{"type":427,"tag":463,"props":8325,"children":8326},{"class":465,"line":2193},[8327,8331],{"type":427,"tag":463,"props":8328,"children":8329},{"style":1020},[8330],{"type":433,"value":1023},{"type":427,"tag":463,"props":8332,"children":8333},{"style":697},[8334],{"type":433,"value":8335}," val\n",{"type":427,"tag":463,"props":8337,"children":8338},{"class":465,"line":2254},[8339,8344,8349,8353,8357,8361,8366,8370,8374,8379],{"type":427,"tag":463,"props":8340,"children":8341},{"style":1724},[8342],{"type":433,"value":8343},"while",{"type":427,"tag":463,"props":8345,"children":8346},{"style":697},[8347],{"type":433,"value":8348}," (val ",{"type":427,"tag":463,"props":8350,"children":8351},{"style":493},[8352],{"type":433,"value":1895},{"type":427,"tag":463,"props":8354,"children":8355},{"style":697},[8356],{"type":433,"value":8311},{"type":427,"tag":463,"props":8358,"children":8359},{"style":703},[8360],{"type":433,"value":706},{"type":427,"tag":463,"props":8362,"children":8363},{"style":709},[8364],{"type":433,"value":8365},"next",{"type":427,"tag":463,"props":8367,"children":8368},{"style":697},[8369],{"type":433,"value":1069},{"type":427,"tag":463,"props":8371,"children":8372},{"style":703},[8373],{"type":433,"value":706},{"type":427,"tag":463,"props":8375,"children":8376},{"style":697},[8377],{"type":433,"value":8378},"value) ",{"type":427,"tag":463,"props":8380,"children":8381},{"style":703},[8382],{"type":433,"value":1770},{"type":427,"tag":463,"props":8384,"children":8385},{"class":465,"line":2295},[8386,8390,8394,8399,8403,8408,8412],{"type":427,"tag":463,"props":8387,"children":8388},{"style":1724},[8389],{"type":433,"value":6541},{"type":427,"tag":463,"props":8391,"children":8392},{"style":1418},[8393],{"type":433,"value":1953},{"type":427,"tag":463,"props":8395,"children":8396},{"style":697},[8397],{"type":433,"value":8398},"val",{"type":427,"tag":463,"props":8400,"children":8401},{"style":493},[8402],{"type":433,"value":1981},{"type":427,"tag":463,"props":8404,"children":8405},{"style":725},[8406],{"type":433,"value":8407}," 10",{"type":427,"tag":463,"props":8409,"children":8410},{"style":1418},[8411],{"type":433,"value":747},{"type":427,"tag":463,"props":8413,"children":8414},{"style":703},[8415],{"type":433,"value":1770},{"type":427,"tag":463,"props":8417,"children":8418},{"class":465,"line":2336},[8419,8423,8427,8431,8435,8439,8444,8448,8452,8457],{"type":427,"tag":463,"props":8420,"children":8421},{"style":697},[8422],{"type":433,"value":7278},{"type":427,"tag":463,"props":8424,"children":8425},{"style":703},[8426],{"type":433,"value":706},{"type":427,"tag":463,"props":8428,"children":8429},{"style":709},[8430],{"type":433,"value":1415},{"type":427,"tag":463,"props":8432,"children":8433},{"style":1418},[8434],{"type":433,"value":717},{"type":427,"tag":463,"props":8436,"children":8437},{"style":476},[8438],{"type":433,"value":490},{"type":427,"tag":463,"props":8440,"children":8441},{"style":482},[8442],{"type":433,"value":8443},"right val:",{"type":427,"tag":463,"props":8445,"children":8446},{"style":476},[8447],{"type":433,"value":490},{"type":427,"tag":463,"props":8449,"children":8450},{"style":703},[8451],{"type":433,"value":733},{"type":427,"tag":463,"props":8453,"children":8454},{"style":697},[8455],{"type":433,"value":8456}," val",{"type":427,"tag":463,"props":8458,"children":8459},{"style":1418},[8460],{"type":433,"value":1438},{"type":427,"tag":463,"props":8462,"children":8463},{"class":465,"line":2345},[8464,8468,8472],{"type":427,"tag":463,"props":8465,"children":8466},{"style":703},[8467],{"type":433,"value":8240},{"type":427,"tag":463,"props":8469,"children":8470},{"style":1724},[8471],{"type":433,"value":5949},{"type":427,"tag":463,"props":8473,"children":8474},{"style":703},[8475],{"type":433,"value":1361},{"type":427,"tag":463,"props":8477,"children":8478},{"class":465,"line":2353},[8479,8483,8487,8491,8495,8499,8504,8508],{"type":427,"tag":463,"props":8480,"children":8481},{"style":697},[8482],{"type":433,"value":7278},{"type":427,"tag":463,"props":8484,"children":8485},{"style":703},[8486],{"type":433,"value":706},{"type":427,"tag":463,"props":8488,"children":8489},{"style":709},[8490],{"type":433,"value":1415},{"type":427,"tag":463,"props":8492,"children":8493},{"style":1418},[8494],{"type":433,"value":717},{"type":427,"tag":463,"props":8496,"children":8497},{"style":476},[8498],{"type":433,"value":490},{"type":427,"tag":463,"props":8500,"children":8501},{"style":482},[8502],{"type":433,"value":8503},"wrong val",{"type":427,"tag":463,"props":8505,"children":8506},{"style":476},[8507],{"type":433,"value":490},{"type":427,"tag":463,"props":8509,"children":8510},{"style":1418},[8511],{"type":433,"value":1438},{"type":427,"tag":463,"props":8513,"children":8514},{"class":465,"line":6019},[8515,8520,8524,8529],{"type":427,"tag":463,"props":8516,"children":8517},{"style":697},[8518],{"type":433,"value":8519},"    get",{"type":427,"tag":463,"props":8521,"children":8522},{"style":703},[8523],{"type":433,"value":706},{"type":427,"tag":463,"props":8525,"children":8526},{"style":709},[8527],{"type":433,"value":8528},"return",{"type":427,"tag":463,"props":8530,"children":8531},{"style":1418},[8532],{"type":433,"value":3361},{"type":427,"tag":463,"props":8534,"children":8536},{"class":465,"line":8535},18,[8537],{"type":427,"tag":463,"props":8538,"children":8539},{"style":703},[8540],{"type":433,"value":2100},{"type":427,"tag":463,"props":8542,"children":8544},{"class":465,"line":8543},19,[8545],{"type":427,"tag":463,"props":8546,"children":8547},{"style":703},[8548],{"type":433,"value":1447},{"type":427,"tag":463,"props":8550,"children":8552},{"class":465,"line":8551},20,[8553],{"type":427,"tag":463,"props":8554,"children":8555},{"style":750},[8556],{"type":433,"value":8557},"// right val: 1\n",{"type":427,"tag":463,"props":8559,"children":8561},{"class":465,"line":8560},21,[8562],{"type":427,"tag":463,"props":8563,"children":8564},{"style":750},[8565],{"type":433,"value":8566},"// wrong val\n",{"type":427,"tag":463,"props":8568,"children":8570},{"class":465,"line":8569},22,[8571],{"type":427,"tag":463,"props":8572,"children":8573},{"style":750},[8574],{"type":433,"value":8575},"// done\n",{"type":427,"tag":435,"props":8577,"children":8579},{"id":8578},"闭包",[8580],{"type":433,"value":8578},{"type":427,"tag":441,"props":8582,"children":8583},{},[8584],{"type":433,"value":8585},"模块和全局脚本不能被实例化，而函数可以。函数实例运行期间生成的词法环境结构，也就是闭包；它也可看作执行期的作用域链，因为其外部引用指向函数实例被调用时的作用域。",{"type":427,"tag":441,"props":8587,"children":8588},{},[8589],{"type":433,"value":8590},"函数执行的大致步骤是：用户代码调用 -> 创建环境（Environment） -> 绑定 this -> 执行代码（EvaluateBody = 初始化闭包 + 执行用户代码（Evaluating））。",{"type":427,"tag":541,"props":8592,"children":8593},{},[8594,8599,8604],{"type":427,"tag":545,"props":8595,"children":8596},{},[8597],{"type":433,"value":8598},"在创建环境时，会将标识符列表指向函数实例所在作用域。这在概念上而言就是初始化的闭包；闭包本质上是一个对作用域的引用。",{"type":427,"tag":545,"props":8600,"children":8601},{},[8602],{"type":433,"value":8603},"标识符列表包含变量环境以及词法环境，两者指向根据是否是严格模式有所不同。严格模式下的 eval 作用域块中有自己的 varDecls，所以严格模式下的函数内不需要同时维护变量环境和词法环境了，作用域引用指向词法环境，后者再包含指向变量环境的引用。",{"type":427,"tag":545,"props":8605,"children":8606},{},[8607],{"type":433,"value":8608},"除了绑定 this 以及处理标识符列表，执行代码时还会处理函数实例内的顶层函数列表、参数列表以及 arguments 参数。参数列表中的标识符优先级最高。",{"type":427,"tag":441,"props":8610,"children":8611},{},[8612],{"type":433,"value":8613},"由于闭包中不包含函数声明的名字，所以这个名字类似 var 声明是允许重绑定的：",{"type":427,"tag":452,"props":8615,"children":8617},{"className":685,"code":8616,"language":687,"meta":421,"style":421},"function test () {\n  test = 1\n}\ntest()\nconsole.log(typeof test) // number\n",[8618],{"type":427,"tag":459,"props":8619,"children":8620},{"__ignoreMap":421},[8621,8640,8655,8662,8673],{"type":427,"tag":463,"props":8622,"children":8623},{"class":465,"line":466},[8624,8628,8632,8636],{"type":427,"tag":463,"props":8625,"children":8626},{"style":1020},[8627],{"type":433,"value":1346},{"type":427,"tag":463,"props":8629,"children":8630},{"style":709},[8631],{"type":433,"value":2046},{"type":427,"tag":463,"props":8633,"children":8634},{"style":703},[8635],{"type":433,"value":1356},{"type":427,"tag":463,"props":8637,"children":8638},{"style":703},[8639],{"type":433,"value":1361},{"type":427,"tag":463,"props":8641,"children":8642},{"class":465,"line":756},[8643,8647,8651],{"type":427,"tag":463,"props":8644,"children":8645},{"style":697},[8646],{"type":433,"value":2794},{"type":427,"tag":463,"props":8648,"children":8649},{"style":493},[8650],{"type":433,"value":1384},{"type":427,"tag":463,"props":8652,"children":8653},{"style":725},[8654],{"type":433,"value":6798},{"type":427,"tag":463,"props":8656,"children":8657},{"class":465,"line":1400},[8658],{"type":427,"tag":463,"props":8659,"children":8660},{"style":703},[8661],{"type":433,"value":1447},{"type":427,"tag":463,"props":8663,"children":8664},{"class":465,"line":1441},[8665,8669],{"type":427,"tag":463,"props":8666,"children":8667},{"style":709},[8668],{"type":433,"value":1746},{"type":427,"tag":463,"props":8670,"children":8671},{"style":697},[8672],{"type":433,"value":3361},{"type":427,"tag":463,"props":8674,"children":8675},{"class":465,"line":1450},[8676,8680,8684,8688,8692,8696,8701],{"type":427,"tag":463,"props":8677,"children":8678},{"style":697},[8679],{"type":433,"value":5040},{"type":427,"tag":463,"props":8681,"children":8682},{"style":703},[8683],{"type":433,"value":706},{"type":427,"tag":463,"props":8685,"children":8686},{"style":709},[8687],{"type":433,"value":1415},{"type":427,"tag":463,"props":8689,"children":8690},{"style":697},[8691],{"type":433,"value":717},{"type":427,"tag":463,"props":8693,"children":8694},{"style":493},[8695],{"type":433,"value":976},{"type":427,"tag":463,"props":8697,"children":8698},{"style":697},[8699],{"type":433,"value":8700}," test) ",{"type":427,"tag":463,"props":8702,"children":8703},{"style":750},[8704],{"type":433,"value":8705},"// number\n",{"type":427,"tag":441,"props":8707,"children":8708},{},[8709],{"type":433,"value":8710},"全局环境中，使用 [[VarNames]] 内部列表来区分全局属性或全局 var 声明，不使用 eval 动态添加到全局的变量是不能被删除的。",{"type":427,"tag":441,"props":8712,"children":8713},{},[8714],{"type":433,"value":8715},"对象闭包（对象环境的运行时结构）所包含的只有对象的成员名，无论该成员名是否是动态加入的。",{"type":427,"tag":452,"props":8717,"children":8719},{"className":685,"code":8718,"language":687,"meta":421,"style":421},"let a = { value:1 }\nlet b = 1\nwith (a) {\n var value = 100\n a.b = 1\n b = 2\n}\nconsole.log(a, b, value) // { value:100, b:2 }, 1, undefined\n",[8720],{"type":427,"tag":459,"props":8721,"children":8722},{"__ignoreMap":421},[8723,8759,8779,8796,8816,8839,8855,8862],{"type":427,"tag":463,"props":8724,"children":8725},{"class":465,"line":466},[8726,8730,8734,8738,8742,8747,8751,8755],{"type":427,"tag":463,"props":8727,"children":8728},{"style":1020},[8729],{"type":433,"value":1023},{"type":427,"tag":463,"props":8731,"children":8732},{"style":697},[8733],{"type":433,"value":3164},{"type":427,"tag":463,"props":8735,"children":8736},{"style":493},[8737],{"type":433,"value":1895},{"type":427,"tag":463,"props":8739,"children":8740},{"style":703},[8741],{"type":433,"value":1732},{"type":427,"tag":463,"props":8743,"children":8744},{"style":1418},[8745],{"type":433,"value":8746}," value",{"type":427,"tag":463,"props":8748,"children":8749},{"style":703},[8750],{"type":433,"value":1880},{"type":427,"tag":463,"props":8752,"children":8753},{"style":725},[8754],{"type":433,"value":532},{"type":427,"tag":463,"props":8756,"children":8757},{"style":703},[8758],{"type":433,"value":3191},{"type":427,"tag":463,"props":8760,"children":8761},{"class":465,"line":756},[8762,8766,8771,8775],{"type":427,"tag":463,"props":8763,"children":8764},{"style":1020},[8765],{"type":433,"value":1023},{"type":427,"tag":463,"props":8767,"children":8768},{"style":697},[8769],{"type":433,"value":8770}," b ",{"type":427,"tag":463,"props":8772,"children":8773},{"style":493},[8774],{"type":433,"value":1895},{"type":427,"tag":463,"props":8776,"children":8777},{"style":725},[8778],{"type":433,"value":6798},{"type":427,"tag":463,"props":8780,"children":8781},{"class":465,"line":1400},[8782,8787,8792],{"type":427,"tag":463,"props":8783,"children":8784},{"style":1724},[8785],{"type":433,"value":8786},"with",{"type":427,"tag":463,"props":8788,"children":8789},{"style":697},[8790],{"type":433,"value":8791}," (a) ",{"type":427,"tag":463,"props":8793,"children":8794},{"style":703},[8795],{"type":433,"value":1770},{"type":427,"tag":463,"props":8797,"children":8798},{"class":465,"line":1441},[8799,8804,8808,8812],{"type":427,"tag":463,"props":8800,"children":8801},{"style":1020},[8802],{"type":433,"value":8803}," var",{"type":427,"tag":463,"props":8805,"children":8806},{"style":697},[8807],{"type":433,"value":8746},{"type":427,"tag":463,"props":8809,"children":8810},{"style":493},[8811],{"type":433,"value":1384},{"type":427,"tag":463,"props":8813,"children":8814},{"style":725},[8815],{"type":433,"value":6374},{"type":427,"tag":463,"props":8817,"children":8818},{"class":465,"line":1450},[8819,8823,8827,8831,8835],{"type":427,"tag":463,"props":8820,"children":8821},{"style":697},[8822],{"type":433,"value":3244},{"type":427,"tag":463,"props":8824,"children":8825},{"style":703},[8826],{"type":433,"value":706},{"type":427,"tag":463,"props":8828,"children":8829},{"style":697},[8830],{"type":433,"value":1379},{"type":427,"tag":463,"props":8832,"children":8833},{"style":493},[8834],{"type":433,"value":1384},{"type":427,"tag":463,"props":8836,"children":8837},{"style":725},[8838],{"type":433,"value":6798},{"type":427,"tag":463,"props":8840,"children":8841},{"class":465,"line":1485},[8842,8846,8850],{"type":427,"tag":463,"props":8843,"children":8844},{"style":697},[8845],{"type":433,"value":7055},{"type":427,"tag":463,"props":8847,"children":8848},{"style":493},[8849],{"type":433,"value":1384},{"type":427,"tag":463,"props":8851,"children":8852},{"style":725},[8853],{"type":433,"value":8854}," 2\n",{"type":427,"tag":463,"props":8856,"children":8857},{"class":465,"line":1522},[8858],{"type":427,"tag":463,"props":8859,"children":8860},{"style":703},[8861],{"type":433,"value":1447},{"type":427,"tag":463,"props":8863,"children":8864},{"class":465,"line":1530},[8865,8869,8873,8877,8881,8885,8889,8893,8898],{"type":427,"tag":463,"props":8866,"children":8867},{"style":697},[8868],{"type":433,"value":5040},{"type":427,"tag":463,"props":8870,"children":8871},{"style":703},[8872],{"type":433,"value":706},{"type":427,"tag":463,"props":8874,"children":8875},{"style":709},[8876],{"type":433,"value":1415},{"type":427,"tag":463,"props":8878,"children":8879},{"style":697},[8880],{"type":433,"value":7341},{"type":427,"tag":463,"props":8882,"children":8883},{"style":703},[8884],{"type":433,"value":733},{"type":427,"tag":463,"props":8886,"children":8887},{"style":697},[8888],{"type":433,"value":7055},{"type":427,"tag":463,"props":8890,"children":8891},{"style":703},[8892],{"type":433,"value":733},{"type":427,"tag":463,"props":8894,"children":8895},{"style":697},[8896],{"type":433,"value":8897}," value) ",{"type":427,"tag":463,"props":8899,"children":8900},{"style":750},[8901],{"type":433,"value":8902},"// { value:100, b:2 }, 1, undefined\n",{"type":427,"tag":441,"props":8904,"children":8905},{},[8906],{"type":433,"value":8907},"块级作用域所创建的环境在语句执行结束后被销毁。",{"type":427,"tag":441,"props":8909,"children":8910},{},[8911],{"type":433,"value":8912},"while、do...while 语句在部分引擎实现中会被转换为 for 语句，所以其环境会创建多次。",{"type":427,"tag":441,"props":8914,"children":8915},{},[8916],{"type":433,"value":8917},"在纯函数式语言中，一个比包内构造的对象只能被自己持有，或者通过函数返回一遍被其他闭包引用，也就是说函数和闭包因为总能在确知的情况下被销毁，这有利于内存回收。而 JS 的函数允许副作用，所以只能通过引用计数的形式回收内存。",{"type":427,"tag":441,"props":8919,"children":8920},{},[8921],{"type":433,"value":8922},"闭包内标识符系统的优先级规则：",{"type":427,"tag":541,"props":8924,"children":8925},{},[8926,8931,8936],{"type":427,"tag":545,"props":8927,"children":8928},{},[8929],{"type":433,"value":8930},"内部函数声明 > 函数参数名列表",{"type":427,"tag":545,"props":8932,"children":8933},{},[8934],{"type":433,"value":8935},"参数中的 arguments 名字 > 函数的 arguments",{"type":427,"tag":545,"props":8937,"children":8938},{},[8939],{"type":433,"value":8940},"var 声明的名字如果已存在，则不再创建新变量",{"type":427,"tag":441,"props":8942,"children":8943},{},[8944],{"type":433,"value":8945},"this 是作为关键字来识别和处理的，所以对象闭包中对象的 this 属性不会影响 this 的执行。",{"type":427,"tag":428,"props":8947,"children":8949},{"id":8948},"动态语言特性",[8950],{"type":433,"value":8948},{"type":427,"tag":435,"props":8952,"children":8954},{"id":8953},"概述-2",[8955],{"type":433,"value":6073},{"type":427,"tag":441,"props":8957,"children":8958},{},[8959],{"type":433,"value":8960},"如果在陈述时无法确定而必须在执行时才能确定语义，那么该语言是动态的，反之为静态的。列如，对于 a+b，在运行时才能确定他是字符串连接还是数值求和。",{"type":427,"tag":441,"props":8962,"children":8963},{},[8964],{"type":433,"value":8965},"JS 的动态语言特性概括为：动态类型、动态重写、动态存取的数据结构、动态的变量作用域、词法作用域以及动态执行能力。",{"type":427,"tag":435,"props":8967,"children":8969},{"id":8968},"对象与值类型之间的转换",[8970],{"type":433,"value":8968},{"type":427,"tag":441,"props":8972,"children":8973},{},[8974],{"type":433,"value":8975},"with 语句以及 for...in/of 语句会触发值类型的“包装”，可以理解为是语句的副作用。诸如此类的副作用还见 while、if 语句对表达式转换为布尔值的语义、对象声明时属性需要是字符串。",{"type":427,"tag":452,"props":8977,"children":8979},{"className":685,"code":8978,"language":687,"meta":421,"style":421},"var toString = () => console.log(1)\nwith (1) {\n  // equal to (1).toString = ...\n  toString = () => console.log(2)\n}\nconsole.log(toString()) // 1\n",[8980],{"type":427,"tag":459,"props":8981,"children":8982},{"__ignoreMap":421},[8983,9031,9054,9062,9106,9113],{"type":427,"tag":463,"props":8984,"children":8985},{"class":465,"line":466},[8986,8990,8995,8999,9003,9007,9011,9015,9019,9023,9027],{"type":427,"tag":463,"props":8987,"children":8988},{"style":1020},[8989],{"type":433,"value":2656},{"type":427,"tag":463,"props":8991,"children":8992},{"style":7840},[8993],{"type":433,"value":8994}," toString",{"type":427,"tag":463,"props":8996,"children":8997},{"style":493},[8998],{"type":433,"value":1384},{"type":427,"tag":463,"props":9000,"children":9001},{"style":703},[9002],{"type":433,"value":1356},{"type":427,"tag":463,"props":9004,"children":9005},{"style":1020},[9006],{"type":433,"value":5747},{"type":427,"tag":463,"props":9008,"children":9009},{"style":697},[9010],{"type":433,"value":2063},{"type":427,"tag":463,"props":9012,"children":9013},{"style":703},[9014],{"type":433,"value":706},{"type":427,"tag":463,"props":9016,"children":9017},{"style":709},[9018],{"type":433,"value":1415},{"type":427,"tag":463,"props":9020,"children":9021},{"style":697},[9022],{"type":433,"value":717},{"type":427,"tag":463,"props":9024,"children":9025},{"style":725},[9026],{"type":433,"value":532},{"type":427,"tag":463,"props":9028,"children":9029},{"style":697},[9030],{"type":433,"value":1438},{"type":427,"tag":463,"props":9032,"children":9033},{"class":465,"line":756},[9034,9038,9042,9046,9050],{"type":427,"tag":463,"props":9035,"children":9036},{"style":1724},[9037],{"type":433,"value":8786},{"type":427,"tag":463,"props":9039,"children":9040},{"style":697},[9041],{"type":433,"value":1953},{"type":427,"tag":463,"props":9043,"children":9044},{"style":725},[9045],{"type":433,"value":532},{"type":427,"tag":463,"props":9047,"children":9048},{"style":697},[9049],{"type":433,"value":747},{"type":427,"tag":463,"props":9051,"children":9052},{"style":703},[9053],{"type":433,"value":1770},{"type":427,"tag":463,"props":9055,"children":9056},{"class":465,"line":1400},[9057],{"type":427,"tag":463,"props":9058,"children":9059},{"style":750},[9060],{"type":433,"value":9061},"  // equal to (1).toString = ...\n",{"type":427,"tag":463,"props":9063,"children":9064},{"class":465,"line":1441},[9065,9070,9074,9078,9082,9086,9090,9094,9098,9102],{"type":427,"tag":463,"props":9066,"children":9067},{"style":709},[9068],{"type":433,"value":9069},"  toString",{"type":427,"tag":463,"props":9071,"children":9072},{"style":493},[9073],{"type":433,"value":1384},{"type":427,"tag":463,"props":9075,"children":9076},{"style":703},[9077],{"type":433,"value":1356},{"type":427,"tag":463,"props":9079,"children":9080},{"style":1020},[9081],{"type":433,"value":5747},{"type":427,"tag":463,"props":9083,"children":9084},{"style":697},[9085],{"type":433,"value":2063},{"type":427,"tag":463,"props":9087,"children":9088},{"style":703},[9089],{"type":433,"value":706},{"type":427,"tag":463,"props":9091,"children":9092},{"style":709},[9093],{"type":433,"value":1415},{"type":427,"tag":463,"props":9095,"children":9096},{"style":1418},[9097],{"type":433,"value":717},{"type":427,"tag":463,"props":9099,"children":9100},{"style":725},[9101],{"type":433,"value":560},{"type":427,"tag":463,"props":9103,"children":9104},{"style":1418},[9105],{"type":433,"value":1438},{"type":427,"tag":463,"props":9107,"children":9108},{"class":465,"line":1450},[9109],{"type":427,"tag":463,"props":9110,"children":9111},{"style":703},[9112],{"type":433,"value":1447},{"type":427,"tag":463,"props":9114,"children":9115},{"class":465,"line":1485},[9116,9120,9124,9128,9132,9137,9141],{"type":427,"tag":463,"props":9117,"children":9118},{"style":697},[9119],{"type":433,"value":5040},{"type":427,"tag":463,"props":9121,"children":9122},{"style":703},[9123],{"type":433,"value":706},{"type":427,"tag":463,"props":9125,"children":9126},{"style":709},[9127],{"type":433,"value":1415},{"type":427,"tag":463,"props":9129,"children":9130},{"style":697},[9131],{"type":433,"value":717},{"type":427,"tag":463,"props":9133,"children":9134},{"style":709},[9135],{"type":433,"value":9136},"toString",{"type":427,"tag":463,"props":9138,"children":9139},{"style":697},[9140],{"type":433,"value":835},{"type":427,"tag":463,"props":9142,"children":9143},{"style":750},[9144],{"type":433,"value":6744},{"type":427,"tag":441,"props":9146,"children":9147},{},[9148],{"type":433,"value":9149},"在其它场景下，值类型的隐式包装一般由成员存取符触发。",{"type":427,"tag":441,"props":9151,"children":9152},{},[9153],{"type":433,"value":9154},"在包装类原型上的 valueOf 和 toString 方法不影响值运算：",{"type":427,"tag":452,"props":9156,"children":9158},{"className":685,"code":9157,"language":687,"meta":421,"style":421},"String.prototype.valueOf = () => 0\nconsole.log(+'1') // 1\nconsole.log(+new Object('1')) // 0\n",[9159],{"type":427,"tag":459,"props":9160,"children":9161},{"__ignoreMap":421},[9162,9204,9247],{"type":427,"tag":463,"props":9163,"children":9164},{"class":465,"line":466},[9165,9170,9174,9178,9182,9187,9191,9195,9199],{"type":427,"tag":463,"props":9166,"children":9167},{"style":2843},[9168],{"type":433,"value":9169},"String",{"type":427,"tag":463,"props":9171,"children":9172},{"style":703},[9173],{"type":433,"value":706},{"type":427,"tag":463,"props":9175,"children":9176},{"style":1454},[9177],{"type":433,"value":2854},{"type":427,"tag":463,"props":9179,"children":9180},{"style":703},[9181],{"type":433,"value":706},{"type":427,"tag":463,"props":9183,"children":9184},{"style":709},[9185],{"type":433,"value":9186},"valueOf",{"type":427,"tag":463,"props":9188,"children":9189},{"style":493},[9190],{"type":433,"value":1384},{"type":427,"tag":463,"props":9192,"children":9193},{"style":703},[9194],{"type":433,"value":1356},{"type":427,"tag":463,"props":9196,"children":9197},{"style":1020},[9198],{"type":433,"value":5747},{"type":427,"tag":463,"props":9200,"children":9201},{"style":725},[9202],{"type":433,"value":9203}," 0\n",{"type":427,"tag":463,"props":9205,"children":9206},{"class":465,"line":756},[9207,9211,9215,9219,9223,9227,9231,9235,9239,9243],{"type":427,"tag":463,"props":9208,"children":9209},{"style":697},[9210],{"type":433,"value":5040},{"type":427,"tag":463,"props":9212,"children":9213},{"style":703},[9214],{"type":433,"value":706},{"type":427,"tag":463,"props":9216,"children":9217},{"style":709},[9218],{"type":433,"value":1415},{"type":427,"tag":463,"props":9220,"children":9221},{"style":697},[9222],{"type":433,"value":717},{"type":427,"tag":463,"props":9224,"children":9225},{"style":493},[9226],{"type":433,"value":722},{"type":427,"tag":463,"props":9228,"children":9229},{"style":476},[9230],{"type":433,"value":490},{"type":427,"tag":463,"props":9232,"children":9233},{"style":482},[9234],{"type":433,"value":532},{"type":427,"tag":463,"props":9236,"children":9237},{"style":476},[9238],{"type":433,"value":490},{"type":427,"tag":463,"props":9240,"children":9241},{"style":697},[9242],{"type":433,"value":747},{"type":427,"tag":463,"props":9244,"children":9245},{"style":750},[9246],{"type":433,"value":6744},{"type":427,"tag":463,"props":9248,"children":9249},{"class":465,"line":1400},[9250,9254,9258,9262,9266,9271,9275,9279,9283,9287,9291,9296],{"type":427,"tag":463,"props":9251,"children":9252},{"style":697},[9253],{"type":433,"value":5040},{"type":427,"tag":463,"props":9255,"children":9256},{"style":703},[9257],{"type":433,"value":706},{"type":427,"tag":463,"props":9259,"children":9260},{"style":709},[9261],{"type":433,"value":1415},{"type":427,"tag":463,"props":9263,"children":9264},{"style":697},[9265],{"type":433,"value":717},{"type":427,"tag":463,"props":9267,"children":9268},{"style":493},[9269],{"type":433,"value":9270},"+new",{"type":427,"tag":463,"props":9272,"children":9273},{"style":709},[9274],{"type":433,"value":4133},{"type":427,"tag":463,"props":9276,"children":9277},{"style":697},[9278],{"type":433,"value":717},{"type":427,"tag":463,"props":9280,"children":9281},{"style":476},[9282],{"type":433,"value":490},{"type":427,"tag":463,"props":9284,"children":9285},{"style":482},[9286],{"type":433,"value":532},{"type":427,"tag":463,"props":9288,"children":9289},{"style":476},[9290],{"type":433,"value":490},{"type":427,"tag":463,"props":9292,"children":9293},{"style":697},[9294],{"type":433,"value":9295},")) ",{"type":427,"tag":463,"props":9297,"children":9298},{"style":750},[9299],{"type":433,"value":9300},"// 0\n",{"type":427,"tag":441,"props":9302,"children":9303},{},[9304],{"type":433,"value":9305},"任何对象在布尔运算中（包括使用 Boolean 构造器强制类型0p转换）都被当成对象，只有在值运算中才会使用隐式转换的规则：",{"type":427,"tag":452,"props":9307,"children":9309},{"className":685,"code":9308,"language":687,"meta":421,"style":421},"const f = new Object(false)\nconsole.log(+f) // 0\nconsole.log(!!f) // true\nconsole.log(Boolean(f)) // true\n",[9310],{"type":427,"tag":459,"props":9311,"children":9312},{"__ignoreMap":421},[9313,9350,9382,9414],{"type":427,"tag":463,"props":9314,"children":9315},{"class":465,"line":466},[9316,9320,9325,9329,9333,9337,9341,9346],{"type":427,"tag":463,"props":9317,"children":9318},{"style":1020},[9319],{"type":433,"value":5811},{"type":427,"tag":463,"props":9321,"children":9322},{"style":1454},[9323],{"type":433,"value":9324}," f",{"type":427,"tag":463,"props":9326,"children":9327},{"style":493},[9328],{"type":433,"value":1384},{"type":427,"tag":463,"props":9330,"children":9331},{"style":493},[9332],{"type":433,"value":2863},{"type":427,"tag":463,"props":9334,"children":9335},{"style":709},[9336],{"type":433,"value":4133},{"type":427,"tag":463,"props":9338,"children":9339},{"style":697},[9340],{"type":433,"value":717},{"type":427,"tag":463,"props":9342,"children":9343},{"style":859},[9344],{"type":433,"value":9345},"false",{"type":427,"tag":463,"props":9347,"children":9348},{"style":697},[9349],{"type":433,"value":1438},{"type":427,"tag":463,"props":9351,"children":9352},{"class":465,"line":756},[9353,9357,9361,9365,9369,9373,9378],{"type":427,"tag":463,"props":9354,"children":9355},{"style":697},[9356],{"type":433,"value":5040},{"type":427,"tag":463,"props":9358,"children":9359},{"style":703},[9360],{"type":433,"value":706},{"type":427,"tag":463,"props":9362,"children":9363},{"style":709},[9364],{"type":433,"value":1415},{"type":427,"tag":463,"props":9366,"children":9367},{"style":697},[9368],{"type":433,"value":717},{"type":427,"tag":463,"props":9370,"children":9371},{"style":493},[9372],{"type":433,"value":722},{"type":427,"tag":463,"props":9374,"children":9375},{"style":697},[9376],{"type":433,"value":9377},"f) ",{"type":427,"tag":463,"props":9379,"children":9380},{"style":750},[9381],{"type":433,"value":9300},{"type":427,"tag":463,"props":9383,"children":9384},{"class":465,"line":1400},[9385,9389,9393,9397,9401,9406,9410],{"type":427,"tag":463,"props":9386,"children":9387},{"style":697},[9388],{"type":433,"value":5040},{"type":427,"tag":463,"props":9390,"children":9391},{"style":703},[9392],{"type":433,"value":706},{"type":427,"tag":463,"props":9394,"children":9395},{"style":709},[9396],{"type":433,"value":1415},{"type":427,"tag":463,"props":9398,"children":9399},{"style":697},[9400],{"type":433,"value":717},{"type":427,"tag":463,"props":9402,"children":9403},{"style":493},[9404],{"type":433,"value":9405},"!!",{"type":427,"tag":463,"props":9407,"children":9408},{"style":697},[9409],{"type":433,"value":9377},{"type":427,"tag":463,"props":9411,"children":9412},{"style":750},[9413],{"type":433,"value":797},{"type":427,"tag":463,"props":9415,"children":9416},{"class":465,"line":1441},[9417,9421,9425,9429,9433,9437,9442],{"type":427,"tag":463,"props":9418,"children":9419},{"style":697},[9420],{"type":433,"value":5040},{"type":427,"tag":463,"props":9422,"children":9423},{"style":703},[9424],{"type":433,"value":706},{"type":427,"tag":463,"props":9426,"children":9427},{"style":709},[9428],{"type":433,"value":1415},{"type":427,"tag":463,"props":9430,"children":9431},{"style":697},[9432],{"type":433,"value":717},{"type":427,"tag":463,"props":9434,"children":9435},{"style":709},[9436],{"type":433,"value":822},{"type":427,"tag":463,"props":9438,"children":9439},{"style":697},[9440],{"type":433,"value":9441},"(f)) ",{"type":427,"tag":463,"props":9443,"children":9444},{"style":750},[9445],{"type":433,"value":797},{"type":427,"tag":441,"props":9447,"children":9448},{},[9449],{"type":433,"value":9450},"使用 Symbol.toPrimitive 的优先级高于 valueOf 和 toString 方法，不过不影响后两种方法的直接调用，比如，NodeJS 的 console.log 会直接调用对象的 valueOf 方法。",{"type":427,"tag":435,"props":9452,"children":9454},{"id":9453},"值类型的转换",[9455],{"type":433,"value":9453},{"type":427,"tag":441,"props":9457,"children":9458},{},[9459],{"type":433,"value":9460},"引用类型自身并不参与值运算，它在运算中仅：标识值数据、提供存取值数据规则、传递标识，因此在运算系统中，引用到值以及从值到值的运算才是主要目标。",{"type":427,"tag":441,"props":9462,"children":9463},{},[9464],{"type":433,"value":9465},"switch 对表达式采用的比较算法是类似严格相等运算的算法，会优先进行类型检测而不会发生类型转换过程。",{"type":427,"tag":441,"props":9467,"children":9468},{},[9469],{"type":433,"value":9470},"使用 Number 构造器进行显式转换要比使用 parseInt、parseFloat 方法好，后两种方法预期传入的内容是字符串，无论参数类型都会先将其转换为字符串，这会导致某些问题：",{"type":427,"tag":452,"props":9472,"children":9474},{"className":685,"code":9473,"language":687,"meta":421,"style":421},"parseInt(1e35) // 1\n",[9475],{"type":427,"tag":459,"props":9476,"children":9477},{"__ignoreMap":421},[9478],{"type":427,"tag":463,"props":9479,"children":9480},{"class":465,"line":466},[9481,9486,9490,9495,9499],{"type":427,"tag":463,"props":9482,"children":9483},{"style":709},[9484],{"type":433,"value":9485},"parseInt",{"type":427,"tag":463,"props":9487,"children":9488},{"style":697},[9489],{"type":433,"value":717},{"type":427,"tag":463,"props":9491,"children":9492},{"style":725},[9493],{"type":433,"value":9494},"1e35",{"type":427,"tag":463,"props":9496,"children":9497},{"style":697},[9498],{"type":433,"value":747},{"type":427,"tag":463,"props":9500,"children":9501},{"style":750},[9502],{"type":433,"value":6744},{"type":427,"tag":441,"props":9504,"children":9505},{},[9506],{"type":433,"value":9507},"因为 undefined 意味着“缺失”，所以某些情况下将其转换为字符串的语义显得有些奇怪：",{"type":427,"tag":452,"props":9509,"children":9511},{"className":685,"code":9510,"language":687,"meta":421,"style":421},"String() // ''\nString(undefined) // undefined\n",[9512],{"type":427,"tag":459,"props":9513,"children":9514},{"__ignoreMap":421},[9515,9531],{"type":427,"tag":463,"props":9516,"children":9517},{"class":465,"line":466},[9518,9522,9526],{"type":427,"tag":463,"props":9519,"children":9520},{"style":709},[9521],{"type":433,"value":9169},{"type":427,"tag":463,"props":9523,"children":9524},{"style":697},[9525],{"type":433,"value":851},{"type":427,"tag":463,"props":9527,"children":9528},{"style":750},[9529],{"type":433,"value":9530},"// ''\n",{"type":427,"tag":463,"props":9532,"children":9533},{"class":465,"line":756},[9534,9538,9542,9546,9550],{"type":427,"tag":463,"props":9535,"children":9536},{"style":709},[9537],{"type":433,"value":9169},{"type":427,"tag":463,"props":9539,"children":9540},{"style":697},[9541],{"type":433,"value":717},{"type":427,"tag":463,"props":9543,"children":9544},{"style":776},[9545],{"type":433,"value":4575},{"type":427,"tag":463,"props":9547,"children":9548},{"style":697},[9549],{"type":433,"value":747},{"type":427,"tag":463,"props":9551,"children":9552},{"style":750},[9553],{"type":433,"value":986},{"type":427,"tag":435,"props":9555,"children":9557},{"id":9556},"对象与数组的动态特性",[9558],{"type":433,"value":9556},{"type":427,"tag":441,"props":9560,"children":9561},{},[9562],{"type":433,"value":9563},"JS 中的数组在实现上和对象是一致的，所以它表现出关联数组而不是索引数组的特征，并不是连续存储，而且下标可能出现空洞。访问空洞下标可以得到值 undefined，但空洞本身类似对象自有属性表中一个不存在的属性，只要数组对象原型上的属性表也不存在这个属性，空洞下标就不会被任何数组方法处理：",{"type":427,"tag":452,"props":9565,"children":9567},{"className":685,"code":9566,"language":687,"meta":421,"style":421},"const a = new Array(10)\na[1] = 1\na[4] = 1\na[7] = 1\na.sort(() => Math.random() - 0.5) // [1, 1, 1, empty x 7]\n",[9568],{"type":427,"tag":459,"props":9569,"children":9570},{"__ignoreMap":421},[9571,9607,9632,9655,9679],{"type":427,"tag":463,"props":9572,"children":9573},{"class":465,"line":466},[9574,9578,9582,9586,9590,9595,9599,9603],{"type":427,"tag":463,"props":9575,"children":9576},{"style":1020},[9577],{"type":433,"value":5811},{"type":427,"tag":463,"props":9579,"children":9580},{"style":1454},[9581],{"type":433,"value":3244},{"type":427,"tag":463,"props":9583,"children":9584},{"style":493},[9585],{"type":433,"value":1384},{"type":427,"tag":463,"props":9587,"children":9588},{"style":493},[9589],{"type":433,"value":2863},{"type":427,"tag":463,"props":9591,"children":9592},{"style":709},[9593],{"type":433,"value":9594}," Array",{"type":427,"tag":463,"props":9596,"children":9597},{"style":697},[9598],{"type":433,"value":717},{"type":427,"tag":463,"props":9600,"children":9601},{"style":725},[9602],{"type":433,"value":8119},{"type":427,"tag":463,"props":9604,"children":9605},{"style":697},[9606],{"type":433,"value":1438},{"type":427,"tag":463,"props":9608,"children":9609},{"class":465,"line":756},[9610,9615,9619,9624,9628],{"type":427,"tag":463,"props":9611,"children":9612},{"style":697},[9613],{"type":433,"value":9614},"a[",{"type":427,"tag":463,"props":9616,"children":9617},{"style":725},[9618],{"type":433,"value":532},{"type":427,"tag":463,"props":9620,"children":9621},{"style":697},[9622],{"type":433,"value":9623},"] ",{"type":427,"tag":463,"props":9625,"children":9626},{"style":493},[9627],{"type":433,"value":1895},{"type":427,"tag":463,"props":9629,"children":9630},{"style":725},[9631],{"type":433,"value":6798},{"type":427,"tag":463,"props":9633,"children":9634},{"class":465,"line":1400},[9635,9639,9643,9647,9651],{"type":427,"tag":463,"props":9636,"children":9637},{"style":697},[9638],{"type":433,"value":9614},{"type":427,"tag":463,"props":9640,"children":9641},{"style":725},[9642],{"type":433,"value":6321},{"type":427,"tag":463,"props":9644,"children":9645},{"style":697},[9646],{"type":433,"value":9623},{"type":427,"tag":463,"props":9648,"children":9649},{"style":493},[9650],{"type":433,"value":1895},{"type":427,"tag":463,"props":9652,"children":9653},{"style":725},[9654],{"type":433,"value":6798},{"type":427,"tag":463,"props":9656,"children":9657},{"class":465,"line":1441},[9658,9662,9667,9671,9675],{"type":427,"tag":463,"props":9659,"children":9660},{"style":697},[9661],{"type":433,"value":9614},{"type":427,"tag":463,"props":9663,"children":9664},{"style":725},[9665],{"type":433,"value":9666},"7",{"type":427,"tag":463,"props":9668,"children":9669},{"style":697},[9670],{"type":433,"value":9623},{"type":427,"tag":463,"props":9672,"children":9673},{"style":493},[9674],{"type":433,"value":1895},{"type":427,"tag":463,"props":9676,"children":9677},{"style":725},[9678],{"type":433,"value":6798},{"type":427,"tag":463,"props":9680,"children":9681},{"class":465,"line":1450},[9682,9686,9690,9695,9699,9703,9707,9712,9716,9721,9725,9730,9735,9739],{"type":427,"tag":463,"props":9683,"children":9684},{"style":697},[9685],{"type":433,"value":524},{"type":427,"tag":463,"props":9687,"children":9688},{"style":703},[9689],{"type":433,"value":706},{"type":427,"tag":463,"props":9691,"children":9692},{"style":709},[9693],{"type":433,"value":9694},"sort",{"type":427,"tag":463,"props":9696,"children":9697},{"style":697},[9698],{"type":433,"value":717},{"type":427,"tag":463,"props":9700,"children":9701},{"style":703},[9702],{"type":433,"value":1069},{"type":427,"tag":463,"props":9704,"children":9705},{"style":1020},[9706],{"type":433,"value":5747},{"type":427,"tag":463,"props":9708,"children":9709},{"style":697},[9710],{"type":433,"value":9711}," Math",{"type":427,"tag":463,"props":9713,"children":9714},{"style":703},[9715],{"type":433,"value":706},{"type":427,"tag":463,"props":9717,"children":9718},{"style":709},[9719],{"type":433,"value":9720},"random",{"type":427,"tag":463,"props":9722,"children":9723},{"style":697},[9724],{"type":433,"value":851},{"type":427,"tag":463,"props":9726,"children":9727},{"style":493},[9728],{"type":433,"value":9729},"-",{"type":427,"tag":463,"props":9731,"children":9732},{"style":725},[9733],{"type":433,"value":9734}," 0.5",{"type":427,"tag":463,"props":9736,"children":9737},{"style":697},[9738],{"type":433,"value":747},{"type":427,"tag":463,"props":9740,"children":9741},{"style":750},[9742],{"type":433,"value":9743},"// [1, 1, 1, empty x 7]\n",{"type":427,"tag":441,"props":9745,"children":9746},{},[9747],{"type":433,"value":9748},"视图是类型化数组绑定的数据的一组接口，类型化数组使用视图绕过了 JS 内置的数据类型转换规则，也绕过了对 length 和数组下标作为对象属性在 JS 中的一切限制。",{"type":427,"tag":441,"props":9750,"children":9751},{},[9752],{"type":433,"value":9753},"类数组对象最重要的两个属性是 length 和 Symbol.iterator，分别给与它被大部分 Array 原型方法（以及展开运算符）以及被当作集合对象操作的能力。",{"type":427,"tag":435,"props":9755,"children":9757},{"id":9756},"重写",[9758],{"type":433,"value":9756},{"type":427,"tag":441,"props":9760,"children":9761},{},[9762],{"type":433,"value":9763},"let 与 const 声明的标识符的延迟绑定，也就是说标识符在语法分析期是没有类型和值的，类型和值要推迟到运行期才能决定；而将值赋给标识符这个过程也就是绑定。规范中，在环境构建过程中，从“标识符名”到“环境中可访问的标识符”叫做创建绑定，let 和 const 分别对应可变绑定和不可变绑定。也就是说 const 的不可写性质是语义决定的。此外，var x = 0 和 const x = 0 中 x = 0 的语义分别是赋值表达式以及绑定也好理解了。",{"type":427,"tag":441,"props":9765,"children":9766},{},[9767],{"type":433,"value":9768},"因为历史原因，undefined 在非严格模式下是可写的，只是在新的浏览器中值不会改变。严格模式下，arguments 和 undefined 都是不可写的，但是前者是以“声明环境记录”登记到词法环境的，语义上的不可写，后者则是作为 global 对象上的属性，根据属性描述符决定的不可写性质。",{"type":427,"tag":441,"props":9770,"children":9771},{},[9772],{"type":433,"value":9773},"限制标识符动态重写的主要相关两个概念：引用类型以及绑定的不变性，通常分别对应运行时的引用错误与类型错误；限制对象属性重写主要是属性描述符，其内部使用内部方法[[Set]]来重写值，但是此内部方法用代理与反射跳过：",{"type":427,"tag":452,"props":9775,"children":9777},{"className":685,"code":9776,"language":687,"meta":421,"style":421},"const a = Object.defineProperties({}, {\n  test: {\n    value: 100,\n    configurable: true\n  }\n})\na.test = 1\nconsole.log(a.test) // 100\nconst b = new Proxy(a, {\n  set (target, key, value) {\n    if (key === 'test') {\n      // 仅当该属性的 configurable 为 true 才能成功\n      return Reflect.defineProperty(target, key, { value })\n    } else {\n      return Reflect.set(target, key, value)\n    }\n  }\n})\nb.test = 1\nconsole.log(b.test) // 1\n",[9778],{"type":427,"tag":459,"props":9779,"children":9780},{"__ignoreMap":421},[9781,9822,9837,9858,9875,9882,9893,9916,9948,9983,10023,10063,10071,10127,10142,10190,10197,10204,10215,10238],{"type":427,"tag":463,"props":9782,"children":9783},{"class":465,"line":466},[9784,9788,9792,9796,9800,9804,9809,9813,9818],{"type":427,"tag":463,"props":9785,"children":9786},{"style":1020},[9787],{"type":433,"value":5811},{"type":427,"tag":463,"props":9789,"children":9790},{"style":1454},[9791],{"type":433,"value":3244},{"type":427,"tag":463,"props":9793,"children":9794},{"style":493},[9795],{"type":433,"value":1384},{"type":427,"tag":463,"props":9797,"children":9798},{"style":697},[9799],{"type":433,"value":4133},{"type":427,"tag":463,"props":9801,"children":9802},{"style":703},[9803],{"type":433,"value":706},{"type":427,"tag":463,"props":9805,"children":9806},{"style":709},[9807],{"type":433,"value":9808},"defineProperties",{"type":427,"tag":463,"props":9810,"children":9811},{"style":697},[9812],{"type":433,"value":717},{"type":427,"tag":463,"props":9814,"children":9815},{"style":703},[9816],{"type":433,"value":9817},"{},",{"type":427,"tag":463,"props":9819,"children":9820},{"style":703},[9821],{"type":433,"value":1361},{"type":427,"tag":463,"props":9823,"children":9824},{"class":465,"line":756},[9825,9829,9833],{"type":427,"tag":463,"props":9826,"children":9827},{"style":1418},[9828],{"type":433,"value":2794},{"type":427,"tag":463,"props":9830,"children":9831},{"style":703},[9832],{"type":433,"value":1880},{"type":427,"tag":463,"props":9834,"children":9835},{"style":703},[9836],{"type":433,"value":1361},{"type":427,"tag":463,"props":9838,"children":9839},{"class":465,"line":1400},[9840,9845,9849,9854],{"type":427,"tag":463,"props":9841,"children":9842},{"style":1418},[9843],{"type":433,"value":9844},"    value",{"type":427,"tag":463,"props":9846,"children":9847},{"style":703},[9848],{"type":433,"value":1880},{"type":427,"tag":463,"props":9850,"children":9851},{"style":725},[9852],{"type":433,"value":9853}," 100",{"type":427,"tag":463,"props":9855,"children":9856},{"style":703},[9857],{"type":433,"value":7254},{"type":427,"tag":463,"props":9859,"children":9860},{"class":465,"line":1441},[9861,9866,9870],{"type":427,"tag":463,"props":9862,"children":9863},{"style":1418},[9864],{"type":433,"value":9865},"    configurable",{"type":427,"tag":463,"props":9867,"children":9868},{"style":703},[9869],{"type":433,"value":1880},{"type":427,"tag":463,"props":9871,"children":9872},{"style":859},[9873],{"type":433,"value":9874}," true\n",{"type":427,"tag":463,"props":9876,"children":9877},{"class":465,"line":1450},[9878],{"type":427,"tag":463,"props":9879,"children":9880},{"style":703},[9881],{"type":433,"value":2100},{"type":427,"tag":463,"props":9883,"children":9884},{"class":465,"line":1485},[9885,9889],{"type":427,"tag":463,"props":9886,"children":9887},{"style":703},[9888],{"type":433,"value":1694},{"type":427,"tag":463,"props":9890,"children":9891},{"style":697},[9892],{"type":433,"value":1438},{"type":427,"tag":463,"props":9894,"children":9895},{"class":465,"line":1522},[9896,9900,9904,9908,9912],{"type":427,"tag":463,"props":9897,"children":9898},{"style":697},[9899],{"type":433,"value":524},{"type":427,"tag":463,"props":9901,"children":9902},{"style":703},[9903],{"type":433,"value":706},{"type":427,"tag":463,"props":9905,"children":9906},{"style":697},[9907],{"type":433,"value":4172},{"type":427,"tag":463,"props":9909,"children":9910},{"style":493},[9911],{"type":433,"value":1895},{"type":427,"tag":463,"props":9913,"children":9914},{"style":725},[9915],{"type":433,"value":6798},{"type":427,"tag":463,"props":9917,"children":9918},{"class":465,"line":1530},[9919,9923,9927,9931,9935,9939,9943],{"type":427,"tag":463,"props":9920,"children":9921},{"style":697},[9922],{"type":433,"value":5040},{"type":427,"tag":463,"props":9924,"children":9925},{"style":703},[9926],{"type":433,"value":706},{"type":427,"tag":463,"props":9928,"children":9929},{"style":709},[9930],{"type":433,"value":1415},{"type":427,"tag":463,"props":9932,"children":9933},{"style":697},[9934],{"type":433,"value":7341},{"type":427,"tag":463,"props":9936,"children":9937},{"style":703},[9938],{"type":433,"value":706},{"type":427,"tag":463,"props":9940,"children":9941},{"style":697},[9942],{"type":433,"value":6050},{"type":427,"tag":463,"props":9944,"children":9945},{"style":750},[9946],{"type":433,"value":9947},"// 100\n",{"type":427,"tag":463,"props":9949,"children":9950},{"class":465,"line":1557},[9951,9955,9959,9963,9967,9971,9975,9979],{"type":427,"tag":463,"props":9952,"children":9953},{"style":1020},[9954],{"type":433,"value":5811},{"type":427,"tag":463,"props":9956,"children":9957},{"style":1454},[9958],{"type":433,"value":7055},{"type":427,"tag":463,"props":9960,"children":9961},{"style":493},[9962],{"type":433,"value":1384},{"type":427,"tag":463,"props":9964,"children":9965},{"style":493},[9966],{"type":433,"value":2863},{"type":427,"tag":463,"props":9968,"children":9969},{"style":709},[9970],{"type":433,"value":5657},{"type":427,"tag":463,"props":9972,"children":9973},{"style":697},[9974],{"type":433,"value":7341},{"type":427,"tag":463,"props":9976,"children":9977},{"style":703},[9978],{"type":433,"value":733},{"type":427,"tag":463,"props":9980,"children":9981},{"style":703},[9982],{"type":433,"value":1361},{"type":427,"tag":463,"props":9984,"children":9985},{"class":465,"line":2133},[9986,9990,9994,9998,10002,10007,10011,10015,10019],{"type":427,"tag":463,"props":9987,"children":9988},{"style":2680},[9989],{"type":433,"value":2677},{"type":427,"tag":463,"props":9991,"children":9992},{"style":703},[9993],{"type":433,"value":1953},{"type":427,"tag":463,"props":9995,"children":9996},{"style":1647},[9997],{"type":433,"value":5675},{"type":427,"tag":463,"props":9999,"children":10000},{"style":703},[10001],{"type":433,"value":733},{"type":427,"tag":463,"props":10003,"children":10004},{"style":1647},[10005],{"type":433,"value":10006}," key",{"type":427,"tag":463,"props":10008,"children":10009},{"style":703},[10010],{"type":433,"value":733},{"type":427,"tag":463,"props":10012,"children":10013},{"style":1647},[10014],{"type":433,"value":8746},{"type":427,"tag":463,"props":10016,"children":10017},{"style":703},[10018],{"type":433,"value":1655},{"type":427,"tag":463,"props":10020,"children":10021},{"style":703},[10022],{"type":433,"value":1361},{"type":427,"tag":463,"props":10024,"children":10025},{"class":465,"line":2193},[10026,10030,10034,10039,10043,10047,10051,10055,10059],{"type":427,"tag":463,"props":10027,"children":10028},{"style":1724},[10029],{"type":433,"value":2014},{"type":427,"tag":463,"props":10031,"children":10032},{"style":1418},[10033],{"type":433,"value":1953},{"type":427,"tag":463,"props":10035,"children":10036},{"style":697},[10037],{"type":433,"value":10038},"key",{"type":427,"tag":463,"props":10040,"children":10041},{"style":493},[10042],{"type":433,"value":2027},{"type":427,"tag":463,"props":10044,"children":10045},{"style":476},[10046],{"type":433,"value":479},{"type":427,"tag":463,"props":10048,"children":10049},{"style":482},[10050],{"type":433,"value":1746},{"type":427,"tag":463,"props":10052,"children":10053},{"style":476},[10054],{"type":433,"value":490},{"type":427,"tag":463,"props":10056,"children":10057},{"style":1418},[10058],{"type":433,"value":747},{"type":427,"tag":463,"props":10060,"children":10061},{"style":703},[10062],{"type":433,"value":1770},{"type":427,"tag":463,"props":10064,"children":10065},{"class":465,"line":2254},[10066],{"type":427,"tag":463,"props":10067,"children":10068},{"style":750},[10069],{"type":433,"value":10070},"      // 仅当该属性的 configurable 为 true 才能成功\n",{"type":427,"tag":463,"props":10072,"children":10073},{"class":465,"line":2295},[10074,10078,10082,10086,10091,10095,10099,10103,10107,10111,10115,10119,10123],{"type":427,"tag":463,"props":10075,"children":10076},{"style":1724},[10077],{"type":433,"value":5924},{"type":427,"tag":463,"props":10079,"children":10080},{"style":697},[10081],{"type":433,"value":5965},{"type":427,"tag":463,"props":10083,"children":10084},{"style":703},[10085],{"type":433,"value":706},{"type":427,"tag":463,"props":10087,"children":10088},{"style":709},[10089],{"type":433,"value":10090},"defineProperty",{"type":427,"tag":463,"props":10092,"children":10093},{"style":1418},[10094],{"type":433,"value":717},{"type":427,"tag":463,"props":10096,"children":10097},{"style":697},[10098],{"type":433,"value":5675},{"type":427,"tag":463,"props":10100,"children":10101},{"style":703},[10102],{"type":433,"value":733},{"type":427,"tag":463,"props":10104,"children":10105},{"style":697},[10106],{"type":433,"value":10006},{"type":427,"tag":463,"props":10108,"children":10109},{"style":703},[10110],{"type":433,"value":733},{"type":427,"tag":463,"props":10112,"children":10113},{"style":703},[10114],{"type":433,"value":1732},{"type":427,"tag":463,"props":10116,"children":10117},{"style":697},[10118],{"type":433,"value":8746},{"type":427,"tag":463,"props":10120,"children":10121},{"style":703},[10122],{"type":433,"value":1755},{"type":427,"tag":463,"props":10124,"children":10125},{"style":1418},[10126],{"type":433,"value":1438},{"type":427,"tag":463,"props":10128,"children":10129},{"class":465,"line":2336},[10130,10134,10138],{"type":427,"tag":463,"props":10131,"children":10132},{"style":703},[10133],{"type":433,"value":5944},{"type":427,"tag":463,"props":10135,"children":10136},{"style":1724},[10137],{"type":433,"value":5949},{"type":427,"tag":463,"props":10139,"children":10140},{"style":703},[10141],{"type":433,"value":1361},{"type":427,"tag":463,"props":10143,"children":10144},{"class":465,"line":2345},[10145,10149,10153,10157,10162,10166,10170,10174,10178,10182,10186],{"type":427,"tag":463,"props":10146,"children":10147},{"style":1724},[10148],{"type":433,"value":5924},{"type":427,"tag":463,"props":10150,"children":10151},{"style":697},[10152],{"type":433,"value":5965},{"type":427,"tag":463,"props":10154,"children":10155},{"style":703},[10156],{"type":433,"value":706},{"type":427,"tag":463,"props":10158,"children":10159},{"style":709},[10160],{"type":433,"value":10161},"set",{"type":427,"tag":463,"props":10163,"children":10164},{"style":1418},[10165],{"type":433,"value":717},{"type":427,"tag":463,"props":10167,"children":10168},{"style":697},[10169],{"type":433,"value":5675},{"type":427,"tag":463,"props":10171,"children":10172},{"style":703},[10173],{"type":433,"value":733},{"type":427,"tag":463,"props":10175,"children":10176},{"style":697},[10177],{"type":433,"value":10006},{"type":427,"tag":463,"props":10179,"children":10180},{"style":703},[10181],{"type":433,"value":733},{"type":427,"tag":463,"props":10183,"children":10184},{"style":697},[10185],{"type":433,"value":8746},{"type":427,"tag":463,"props":10187,"children":10188},{"style":1418},[10189],{"type":433,"value":1438},{"type":427,"tag":463,"props":10191,"children":10192},{"class":465,"line":2353},[10193],{"type":427,"tag":463,"props":10194,"children":10195},{"style":703},[10196],{"type":433,"value":2342},{"type":427,"tag":463,"props":10198,"children":10199},{"class":465,"line":6019},[10200],{"type":427,"tag":463,"props":10201,"children":10202},{"style":703},[10203],{"type":433,"value":2100},{"type":427,"tag":463,"props":10205,"children":10206},{"class":465,"line":8535},[10207,10211],{"type":427,"tag":463,"props":10208,"children":10209},{"style":703},[10210],{"type":433,"value":1694},{"type":427,"tag":463,"props":10212,"children":10213},{"style":697},[10214],{"type":433,"value":1438},{"type":427,"tag":463,"props":10216,"children":10217},{"class":465,"line":8543},[10218,10222,10226,10230,10234],{"type":427,"tag":463,"props":10219,"children":10220},{"style":697},[10221],{"type":433,"value":1379},{"type":427,"tag":463,"props":10223,"children":10224},{"style":703},[10225],{"type":433,"value":706},{"type":427,"tag":463,"props":10227,"children":10228},{"style":697},[10229],{"type":433,"value":4172},{"type":427,"tag":463,"props":10231,"children":10232},{"style":493},[10233],{"type":433,"value":1895},{"type":427,"tag":463,"props":10235,"children":10236},{"style":725},[10237],{"type":433,"value":6798},{"type":427,"tag":463,"props":10239,"children":10240},{"class":465,"line":8551},[10241,10245,10249,10253,10258,10262,10266],{"type":427,"tag":463,"props":10242,"children":10243},{"style":697},[10244],{"type":433,"value":5040},{"type":427,"tag":463,"props":10246,"children":10247},{"style":703},[10248],{"type":433,"value":706},{"type":427,"tag":463,"props":10250,"children":10251},{"style":709},[10252],{"type":433,"value":1415},{"type":427,"tag":463,"props":10254,"children":10255},{"style":697},[10256],{"type":433,"value":10257},"(b",{"type":427,"tag":463,"props":10259,"children":10260},{"style":703},[10261],{"type":433,"value":706},{"type":427,"tag":463,"props":10263,"children":10264},{"style":697},[10265],{"type":433,"value":6050},{"type":427,"tag":463,"props":10267,"children":10268},{"style":750},[10269],{"type":433,"value":6744},{"type":427,"tag":441,"props":10271,"children":10272},{},[10273],{"type":433,"value":10274},"自增自减运算符会隐式的转换操作数的类型。",{"type":427,"tag":441,"props":10276,"children":10277},{},[10278],{"type":433,"value":10279},"类声明的 extends 部分是执行时期的语义，而执行这段代码时类还未完成初始化，所以以下语句会报初始化错误：",{"type":427,"tag":452,"props":10281,"children":10283},{"className":685,"code":10282,"language":687,"meta":421,"style":421},"class a extends a {}\n",[10284],{"type":427,"tag":459,"props":10285,"children":10286},{"__ignoreMap":421},[10287],{"type":427,"tag":463,"props":10288,"children":10289},{"class":465,"line":466},[10290,10294,10298,10302,10306],{"type":427,"tag":463,"props":10291,"children":10292},{"style":1020},[10293],{"type":433,"value":3565},{"type":427,"tag":463,"props":10295,"children":10296},{"style":3568},[10297],{"type":433,"value":3244},{"type":427,"tag":463,"props":10299,"children":10300},{"style":3588},[10301],{"type":433,"value":3591},{"type":427,"tag":463,"props":10303,"children":10304},{"style":3594},[10305],{"type":433,"value":3244},{"type":427,"tag":463,"props":10307,"children":10308},{"style":703},[10309],{"type":433,"value":3152},{"type":427,"tag":441,"props":10311,"children":10312},{},[10313],{"type":433,"value":10314},"由于 global 对象可视为从 Object 构造器中构造出来的对象，所以修改 Object.prototype 也会带来变量声明之类的效果。",{"type":427,"tag":441,"props":10316,"children":10317},{},[10318],{"type":433,"value":10319},"for...of 和 for...in 的行为不一样，for...in 在执行时会一次性取出对象的属性表，所以对动态加入的属性不敏感；for...of 中，迭代器使用的是索引值，并且迭代次数动态根据 length 属性改变，所以能枚举到某些动态加入的值。",{"type":427,"tag":441,"props":10321,"children":10322},{},[10323],{"type":433,"value":10324},"类似 this、super 以及 new.target 虽然也能作为标识符或者对象属性中的某部分访问，但是在单独使用时，引擎会将它们作为特定的语法结构解析，也因此不能作为标识符使用。比如在 with 语句中，单独使用 this 并不能访问到对象的 this 属性。同理，delete、yield、void 会被解析为运算符；true、false、null 会被解析为操作数；但有特殊情况：",{"type":427,"tag":452,"props":10326,"children":10328},{"className":685,"code":10327,"language":687,"meta":421,"style":421},"with (a = { undefined: 'test' }) {\n  delete undefined\n}\nconsole.log(a) // {}\n",[10329],{"type":427,"tag":459,"props":10330,"children":10331},{"__ignoreMap":421},[10332,10385,10398,10405],{"type":427,"tag":463,"props":10333,"children":10334},{"class":465,"line":466},[10335,10339,10344,10348,10352,10357,10361,10365,10369,10373,10377,10381],{"type":427,"tag":463,"props":10336,"children":10337},{"style":1724},[10338],{"type":433,"value":8786},{"type":427,"tag":463,"props":10340,"children":10341},{"style":697},[10342],{"type":433,"value":10343}," (a ",{"type":427,"tag":463,"props":10345,"children":10346},{"style":493},[10347],{"type":433,"value":1895},{"type":427,"tag":463,"props":10349,"children":10350},{"style":703},[10351],{"type":433,"value":1732},{"type":427,"tag":463,"props":10353,"children":10354},{"style":1418},[10355],{"type":433,"value":10356}," undefined",{"type":427,"tag":463,"props":10358,"children":10359},{"style":703},[10360],{"type":433,"value":1880},{"type":427,"tag":463,"props":10362,"children":10363},{"style":476},[10364],{"type":433,"value":479},{"type":427,"tag":463,"props":10366,"children":10367},{"style":482},[10368],{"type":433,"value":1746},{"type":427,"tag":463,"props":10370,"children":10371},{"style":476},[10372],{"type":433,"value":490},{"type":427,"tag":463,"props":10374,"children":10375},{"style":703},[10376],{"type":433,"value":1755},{"type":427,"tag":463,"props":10378,"children":10379},{"style":697},[10380],{"type":433,"value":747},{"type":427,"tag":463,"props":10382,"children":10383},{"style":703},[10384],{"type":433,"value":1770},{"type":427,"tag":463,"props":10386,"children":10387},{"class":465,"line":756},[10388,10393],{"type":427,"tag":463,"props":10389,"children":10390},{"style":493},[10391],{"type":433,"value":10392},"  delete",{"type":427,"tag":463,"props":10394,"children":10395},{"style":776},[10396],{"type":433,"value":10397}," undefined\n",{"type":427,"tag":463,"props":10399,"children":10400},{"class":465,"line":1400},[10401],{"type":427,"tag":463,"props":10402,"children":10403},{"style":703},[10404],{"type":433,"value":1447},{"type":427,"tag":463,"props":10406,"children":10407},{"class":465,"line":1441},[10408,10412,10416,10420,10425],{"type":427,"tag":463,"props":10409,"children":10410},{"style":697},[10411],{"type":433,"value":5040},{"type":427,"tag":463,"props":10413,"children":10414},{"style":703},[10415],{"type":433,"value":706},{"type":427,"tag":463,"props":10417,"children":10418},{"style":709},[10419],{"type":433,"value":1415},{"type":427,"tag":463,"props":10421,"children":10422},{"style":697},[10423],{"type":433,"value":10424},"(a) ",{"type":427,"tag":463,"props":10426,"children":10427},{"style":750},[10428],{"type":433,"value":7517},{"type":427,"tag":435,"props":10430,"children":10432},{"id":10431},"动态绑定",[10433],{"type":433,"value":10431},{"type":427,"tag":441,"props":10435,"children":10436},{},[10437],{"type":433,"value":10438},"间接调用 eval 的 this 引用指向全局对象，同时还处于非严格模式。间接调用可能包括：",{"type":427,"tag":452,"props":10440,"children":10442},{"className":685,"code":10441,"language":687,"meta":421,"style":421},"function indirect() {\n  const exec = eval\n  const getEval = () => eval\n  // 单值表达式\n  exec('console.log(this === globalThis)')\n  // 函数返回\n  getEval()('console.log(this === globalThis)')\n  // 携带逗号运算符的分组运算符\n  ;(0, eval)('console.log(this === globalThis)')\n  // eval.call 等方法\n  eval.call((), 'console.log(this === globalThis)')\n}\nindirect.bind({})()\n",[10443],{"type":427,"tag":459,"props":10444,"children":10445},{"__ignoreMap":421},[10446,10466,10486,10514,10522,10551,10559,10588,10596,10642,10650,10691,10698],{"type":427,"tag":463,"props":10447,"children":10448},{"class":465,"line":466},[10449,10453,10458,10462],{"type":427,"tag":463,"props":10450,"children":10451},{"style":1020},[10452],{"type":433,"value":1346},{"type":427,"tag":463,"props":10454,"children":10455},{"style":709},[10456],{"type":433,"value":10457}," indirect",{"type":427,"tag":463,"props":10459,"children":10460},{"style":703},[10461],{"type":433,"value":1069},{"type":427,"tag":463,"props":10463,"children":10464},{"style":703},[10465],{"type":433,"value":1361},{"type":427,"tag":463,"props":10467,"children":10468},{"class":465,"line":756},[10469,10473,10477,10481],{"type":427,"tag":463,"props":10470,"children":10471},{"style":1020},[10472],{"type":433,"value":3798},{"type":427,"tag":463,"props":10474,"children":10475},{"style":1454},[10476],{"type":433,"value":7843},{"type":427,"tag":463,"props":10478,"children":10479},{"style":493},[10480],{"type":433,"value":1384},{"type":427,"tag":463,"props":10482,"children":10483},{"style":697},[10484],{"type":433,"value":10485}," eval\n",{"type":427,"tag":463,"props":10487,"children":10488},{"class":465,"line":1400},[10489,10493,10498,10502,10506,10510],{"type":427,"tag":463,"props":10490,"children":10491},{"style":1020},[10492],{"type":433,"value":3798},{"type":427,"tag":463,"props":10494,"children":10495},{"style":7840},[10496],{"type":433,"value":10497}," getEval",{"type":427,"tag":463,"props":10499,"children":10500},{"style":493},[10501],{"type":433,"value":1384},{"type":427,"tag":463,"props":10503,"children":10504},{"style":703},[10505],{"type":433,"value":1356},{"type":427,"tag":463,"props":10507,"children":10508},{"style":1020},[10509],{"type":433,"value":5747},{"type":427,"tag":463,"props":10511,"children":10512},{"style":697},[10513],{"type":433,"value":10485},{"type":427,"tag":463,"props":10515,"children":10516},{"class":465,"line":1441},[10517],{"type":427,"tag":463,"props":10518,"children":10519},{"style":750},[10520],{"type":433,"value":10521},"  // 单值表达式\n",{"type":427,"tag":463,"props":10523,"children":10524},{"class":465,"line":1450},[10525,10530,10534,10538,10543,10547],{"type":427,"tag":463,"props":10526,"children":10527},{"style":709},[10528],{"type":433,"value":10529},"  exec",{"type":427,"tag":463,"props":10531,"children":10532},{"style":1418},[10533],{"type":433,"value":717},{"type":427,"tag":463,"props":10535,"children":10536},{"style":476},[10537],{"type":433,"value":490},{"type":427,"tag":463,"props":10539,"children":10540},{"style":482},[10541],{"type":433,"value":10542},"console.log(this === globalThis)",{"type":427,"tag":463,"props":10544,"children":10545},{"style":476},[10546],{"type":433,"value":490},{"type":427,"tag":463,"props":10548,"children":10549},{"style":1418},[10550],{"type":433,"value":1438},{"type":427,"tag":463,"props":10552,"children":10553},{"class":465,"line":1485},[10554],{"type":427,"tag":463,"props":10555,"children":10556},{"style":750},[10557],{"type":433,"value":10558},"  // 函数返回\n",{"type":427,"tag":463,"props":10560,"children":10561},{"class":465,"line":1522},[10562,10567,10572,10576,10580,10584],{"type":427,"tag":463,"props":10563,"children":10564},{"style":709},[10565],{"type":433,"value":10566},"  getEval",{"type":427,"tag":463,"props":10568,"children":10569},{"style":1418},[10570],{"type":433,"value":10571},"()(",{"type":427,"tag":463,"props":10573,"children":10574},{"style":476},[10575],{"type":433,"value":490},{"type":427,"tag":463,"props":10577,"children":10578},{"style":482},[10579],{"type":433,"value":10542},{"type":427,"tag":463,"props":10581,"children":10582},{"style":476},[10583],{"type":433,"value":490},{"type":427,"tag":463,"props":10585,"children":10586},{"style":1418},[10587],{"type":433,"value":1438},{"type":427,"tag":463,"props":10589,"children":10590},{"class":465,"line":1530},[10591],{"type":427,"tag":463,"props":10592,"children":10593},{"style":750},[10594],{"type":433,"value":10595},"  // 携带逗号运算符的分组运算符\n",{"type":427,"tag":463,"props":10597,"children":10598},{"class":465,"line":1557},[10599,10604,10608,10612,10616,10621,10626,10630,10634,10638],{"type":427,"tag":463,"props":10600,"children":10601},{"style":703},[10602],{"type":433,"value":10603},"  ;",{"type":427,"tag":463,"props":10605,"children":10606},{"style":1418},[10607],{"type":433,"value":717},{"type":427,"tag":463,"props":10609,"children":10610},{"style":725},[10611],{"type":433,"value":728},{"type":427,"tag":463,"props":10613,"children":10614},{"style":703},[10615],{"type":433,"value":733},{"type":427,"tag":463,"props":10617,"children":10618},{"style":697},[10619],{"type":433,"value":10620}," eval",{"type":427,"tag":463,"props":10622,"children":10623},{"style":1418},[10624],{"type":433,"value":10625},")(",{"type":427,"tag":463,"props":10627,"children":10628},{"style":476},[10629],{"type":433,"value":490},{"type":427,"tag":463,"props":10631,"children":10632},{"style":482},[10633],{"type":433,"value":10542},{"type":427,"tag":463,"props":10635,"children":10636},{"style":476},[10637],{"type":433,"value":490},{"type":427,"tag":463,"props":10639,"children":10640},{"style":1418},[10641],{"type":433,"value":1438},{"type":427,"tag":463,"props":10643,"children":10644},{"class":465,"line":2133},[10645],{"type":427,"tag":463,"props":10646,"children":10647},{"style":750},[10648],{"type":433,"value":10649},"  // eval.call 等方法\n",{"type":427,"tag":463,"props":10651,"children":10652},{"class":465,"line":2193},[10653,10658,10662,10666,10671,10675,10679,10683,10687],{"type":427,"tag":463,"props":10654,"children":10655},{"style":697},[10656],{"type":433,"value":10657},"  eval",{"type":427,"tag":463,"props":10659,"children":10660},{"style":703},[10661],{"type":433,"value":706},{"type":427,"tag":463,"props":10663,"children":10664},{"style":709},[10665],{"type":433,"value":6908},{"type":427,"tag":463,"props":10667,"children":10668},{"style":1418},[10669],{"type":433,"value":10670},"(()",{"type":427,"tag":463,"props":10672,"children":10673},{"style":703},[10674],{"type":433,"value":733},{"type":427,"tag":463,"props":10676,"children":10677},{"style":476},[10678],{"type":433,"value":479},{"type":427,"tag":463,"props":10680,"children":10681},{"style":482},[10682],{"type":433,"value":10542},{"type":427,"tag":463,"props":10684,"children":10685},{"style":476},[10686],{"type":433,"value":490},{"type":427,"tag":463,"props":10688,"children":10689},{"style":1418},[10690],{"type":433,"value":1438},{"type":427,"tag":463,"props":10692,"children":10693},{"class":465,"line":2254},[10694],{"type":427,"tag":463,"props":10695,"children":10696},{"style":703},[10697],{"type":433,"value":1447},{"type":427,"tag":463,"props":10699,"children":10700},{"class":465,"line":2295},[10701,10706,10710,10714,10718,10723],{"type":427,"tag":463,"props":10702,"children":10703},{"style":697},[10704],{"type":433,"value":10705},"indirect",{"type":427,"tag":463,"props":10707,"children":10708},{"style":703},[10709],{"type":433,"value":706},{"type":427,"tag":463,"props":10711,"children":10712},{"style":709},[10713],{"type":433,"value":7738},{"type":427,"tag":463,"props":10715,"children":10716},{"style":697},[10717],{"type":433,"value":717},{"type":427,"tag":463,"props":10719,"children":10720},{"style":703},[10721],{"type":433,"value":10722},"{}",{"type":427,"tag":463,"props":10724,"children":10725},{"style":697},[10726],{"type":433,"value":10727},")()\n",{"type":427,"tag":441,"props":10729,"children":10730},{},[10731],{"type":433,"value":10732},"有个看起来比较像特殊情况的是分组运算符中不携带逗号运算符的例子，比如：(eval)('')。此时返回最后一个表达式的 Result。如果携带逗号运算符，表达式最终返回 Value，所以这时又类似间接调用。",{"type":427,"tag":441,"props":10734,"children":10735},{},[10736],{"type":433,"value":10737},"除了间接调用 eval 函数，在全局代码块顶层直接使用 eval 时，其 this 引用指向全局对象。",{"type":427,"tag":452,"props":10739,"children":10741},{"className":685,"code":10740,"language":687,"meta":421,"style":421},"x = 100\nconst obj = { x: 200 }\nwith (obj) { \n  eval(console.log(x, this.x)) // 200 100\n}\n",[10742],{"type":427,"tag":459,"props":10743,"children":10744},{"__ignoreMap":421},[10745,10760,10796,10818,10874],{"type":427,"tag":463,"props":10746,"children":10747},{"class":465,"line":466},[10748,10752,10756],{"type":427,"tag":463,"props":10749,"children":10750},{"style":697},[10751],{"type":433,"value":7206},{"type":427,"tag":463,"props":10753,"children":10754},{"style":493},[10755],{"type":433,"value":1895},{"type":427,"tag":463,"props":10757,"children":10758},{"style":725},[10759],{"type":433,"value":6374},{"type":427,"tag":463,"props":10761,"children":10762},{"class":465,"line":756},[10763,10767,10771,10775,10779,10783,10787,10792],{"type":427,"tag":463,"props":10764,"children":10765},{"style":1020},[10766],{"type":433,"value":5811},{"type":427,"tag":463,"props":10768,"children":10769},{"style":1454},[10770],{"type":433,"value":2661},{"type":427,"tag":463,"props":10772,"children":10773},{"style":493},[10774],{"type":433,"value":1384},{"type":427,"tag":463,"props":10776,"children":10777},{"style":703},[10778],{"type":433,"value":1732},{"type":427,"tag":463,"props":10780,"children":10781},{"style":1418},[10782],{"type":433,"value":6496},{"type":427,"tag":463,"props":10784,"children":10785},{"style":703},[10786],{"type":433,"value":1880},{"type":427,"tag":463,"props":10788,"children":10789},{"style":725},[10790],{"type":433,"value":10791}," 200",{"type":427,"tag":463,"props":10793,"children":10794},{"style":703},[10795],{"type":433,"value":3191},{"type":427,"tag":463,"props":10797,"children":10798},{"class":465,"line":1400},[10799,10803,10808,10813],{"type":427,"tag":463,"props":10800,"children":10801},{"style":1724},[10802],{"type":433,"value":8786},{"type":427,"tag":463,"props":10804,"children":10805},{"style":697},[10806],{"type":433,"value":10807}," (obj) ",{"type":427,"tag":463,"props":10809,"children":10810},{"style":703},[10811],{"type":433,"value":10812},"{",{"type":427,"tag":463,"props":10814,"children":10815},{"style":1418},[10816],{"type":433,"value":10817}," \n",{"type":427,"tag":463,"props":10819,"children":10820},{"class":465,"line":1441},[10821,10825,10829,10833,10837,10841,10845,10849,10853,10857,10861,10865,10869],{"type":427,"tag":463,"props":10822,"children":10823},{"style":709},[10824],{"type":433,"value":10657},{"type":427,"tag":463,"props":10826,"children":10827},{"style":1418},[10828],{"type":433,"value":717},{"type":427,"tag":463,"props":10830,"children":10831},{"style":697},[10832],{"type":433,"value":5040},{"type":427,"tag":463,"props":10834,"children":10835},{"style":703},[10836],{"type":433,"value":706},{"type":427,"tag":463,"props":10838,"children":10839},{"style":709},[10840],{"type":433,"value":1415},{"type":427,"tag":463,"props":10842,"children":10843},{"style":1418},[10844],{"type":433,"value":717},{"type":427,"tag":463,"props":10846,"children":10847},{"style":697},[10848],{"type":433,"value":2691},{"type":427,"tag":463,"props":10850,"children":10851},{"style":703},[10852],{"type":433,"value":733},{"type":427,"tag":463,"props":10854,"children":10855},{"style":1367},[10856],{"type":433,"value":3812},{"type":427,"tag":463,"props":10858,"children":10859},{"style":703},[10860],{"type":433,"value":706},{"type":427,"tag":463,"props":10862,"children":10863},{"style":697},[10864],{"type":433,"value":2691},{"type":427,"tag":463,"props":10866,"children":10867},{"style":1418},[10868],{"type":433,"value":9295},{"type":427,"tag":463,"props":10870,"children":10871},{"style":750},[10872],{"type":433,"value":10873},"// 200 100\n",{"type":427,"tag":463,"props":10875,"children":10876},{"class":465,"line":1450},[10877],{"type":427,"tag":463,"props":10878,"children":10879},{"style":703},[10880],{"type":433,"value":1447},{"type":427,"tag":441,"props":10882,"children":10883},{},[10884],{"type":433,"value":10885},"动态创建的函数作用域总是全局，且除非指定 “use strict”，不然它总是默认以非严格模式执行。",{"type":427,"tag":435,"props":10887,"children":10889},{"id":10888},"动态方法调用",[10890],{"type":433,"value":10888},{"type":427,"tag":441,"props":10892,"children":10893},{},[10894],{"type":433,"value":10895},"从 ES6 开始，函数和方法的一个显著区别在于有没有有效的 this。",{"type":427,"tag":441,"props":10897,"children":10898},{},[10899],{"type":433,"value":10900},"apply 函数的第二个参数可以使用数组或者类数组对象，所以在大多数引擎中他们的效率要比 call 方法稍高。",{"type":427,"tag":441,"props":10902,"children":10903},{},[10904],{"type":433,"value":10905},"早期的 NodeJS 中的 console.log 方法以及 Firefox 中的 document.writeLn 依赖隐式的 this，如果没有绑定到正确的 console 或 document 上就会报错。",{"type":427,"tag":441,"props":10907,"children":10908},{},[10909],{"type":433,"value":10910},"使用 bind 函数后得到结果的并不是新的函数，只是没有 prototype 属性（在部分版本的 V8 的是线上有 Bug），可以使用以下代码验证：",{"type":427,"tag":452,"props":10912,"children":10914},{"className":685,"code":10913,"language":687,"meta":421,"style":421},"function Test() {}\nTestAnother = Test.bind({})\nconsole.log(new Test() instanceof TestAnother) // true\nconsole.log(test2.prototype) // undefined\n",[10915],{"type":427,"tag":459,"props":10916,"children":10917},{"__ignoreMap":421},[10918,10938,10974,11023],{"type":427,"tag":463,"props":10919,"children":10920},{"class":465,"line":466},[10921,10925,10930,10934],{"type":427,"tag":463,"props":10922,"children":10923},{"style":1020},[10924],{"type":433,"value":1346},{"type":427,"tag":463,"props":10926,"children":10927},{"style":709},[10928],{"type":433,"value":10929}," Test",{"type":427,"tag":463,"props":10931,"children":10932},{"style":703},[10933],{"type":433,"value":1069},{"type":427,"tag":463,"props":10935,"children":10936},{"style":703},[10937],{"type":433,"value":3152},{"type":427,"tag":463,"props":10939,"children":10940},{"class":465,"line":756},[10941,10946,10950,10954,10958,10962,10966,10970],{"type":427,"tag":463,"props":10942,"children":10943},{"style":697},[10944],{"type":433,"value":10945},"TestAnother ",{"type":427,"tag":463,"props":10947,"children":10948},{"style":493},[10949],{"type":433,"value":1895},{"type":427,"tag":463,"props":10951,"children":10952},{"style":697},[10953],{"type":433,"value":10929},{"type":427,"tag":463,"props":10955,"children":10956},{"style":703},[10957],{"type":433,"value":706},{"type":427,"tag":463,"props":10959,"children":10960},{"style":709},[10961],{"type":433,"value":7738},{"type":427,"tag":463,"props":10963,"children":10964},{"style":697},[10965],{"type":433,"value":717},{"type":427,"tag":463,"props":10967,"children":10968},{"style":703},[10969],{"type":433,"value":10722},{"type":427,"tag":463,"props":10971,"children":10972},{"style":697},[10973],{"type":433,"value":1438},{"type":427,"tag":463,"props":10975,"children":10976},{"class":465,"line":1400},[10977,10981,10985,10989,10993,10997,11001,11005,11010,11015,11019],{"type":427,"tag":463,"props":10978,"children":10979},{"style":697},[10980],{"type":433,"value":5040},{"type":427,"tag":463,"props":10982,"children":10983},{"style":703},[10984],{"type":433,"value":706},{"type":427,"tag":463,"props":10986,"children":10987},{"style":709},[10988],{"type":433,"value":1415},{"type":427,"tag":463,"props":10990,"children":10991},{"style":697},[10992],{"type":433,"value":717},{"type":427,"tag":463,"props":10994,"children":10995},{"style":493},[10996],{"type":433,"value":1536},{"type":427,"tag":463,"props":10998,"children":10999},{"style":709},[11000],{"type":433,"value":10929},{"type":427,"tag":463,"props":11002,"children":11003},{"style":697},[11004],{"type":433,"value":851},{"type":427,"tag":463,"props":11006,"children":11007},{"style":493},[11008],{"type":433,"value":11009},"instanceof",{"type":427,"tag":463,"props":11011,"children":11012},{"style":3568},[11013],{"type":433,"value":11014}," TestAnother",{"type":427,"tag":463,"props":11016,"children":11017},{"style":697},[11018],{"type":433,"value":747},{"type":427,"tag":463,"props":11020,"children":11021},{"style":750},[11022],{"type":433,"value":797},{"type":427,"tag":463,"props":11024,"children":11025},{"class":465,"line":1441},[11026,11030,11034,11038,11042,11047,11051,11055,11059],{"type":427,"tag":463,"props":11027,"children":11028},{"style":697},[11029],{"type":433,"value":5040},{"type":427,"tag":463,"props":11031,"children":11032},{"style":703},[11033],{"type":433,"value":706},{"type":427,"tag":463,"props":11035,"children":11036},{"style":709},[11037],{"type":433,"value":1415},{"type":427,"tag":463,"props":11039,"children":11040},{"style":697},[11041],{"type":433,"value":717},{"type":427,"tag":463,"props":11043,"children":11044},{"style":2843},[11045],{"type":433,"value":11046},"test2",{"type":427,"tag":463,"props":11048,"children":11049},{"style":703},[11050],{"type":433,"value":706},{"type":427,"tag":463,"props":11052,"children":11053},{"style":1454},[11054],{"type":433,"value":2854},{"type":427,"tag":463,"props":11056,"children":11057},{"style":697},[11058],{"type":433,"value":747},{"type":427,"tag":463,"props":11060,"children":11061},{"style":750},[11062],{"type":433,"value":986},{"type":427,"tag":441,"props":11064,"children":11065},{},[11066],{"type":433,"value":11067},"严格模式禁用 arguments.callee.caller 和 fn.caller 的理由是通过函数的栈可以访问到上层函数并经由 arguments 的引用修改部分参数、改变参数长度，甚至使用 sort 方法重排序传入参数。",{"type":427,"tag":435,"props":11069,"children":11071},{"id":11070},"通用执行环境的实现",[11072],{"type":433,"value":11070},{"type":427,"tag":441,"props":11074,"children":11075},{},[11076],{"type":433,"value":11077},"跳过。",{"type":427,"tag":428,"props":11079,"children":11081},{"id":11080},"勘误",[11082],{"type":433,"value":11083},"勘误？",{"type":427,"tag":541,"props":11085,"children":11086},{},[11087,11092,11097,11102,11107,11112,11117,11122,11127,11132,11137,11142,11147],{"type":427,"tag":545,"props":11088,"children":11089},{},[11090],{"type":433,"value":11091},"P71，属性读取器",{"type":427,"tag":545,"props":11093,"children":11094},{},[11095],{"type":433,"value":11096},"P77，逻辑与、按位非",{"type":427,"tag":545,"props":11098,"children":11099},{},[11100],{"type":433,"value":11101},"P107，catch 子句隐式声明",{"type":427,"tag":545,"props":11103,"children":11104},{},[11105],{"type":433,"value":11106},"P134，第二段代码，computedName 括号",{"type":427,"tag":545,"props":11108,"children":11109},{},[11110],{"type":433,"value":11111},"P148，ES8",{"type":427,"tag":545,"props":11113,"children":11114},{},[11115],{"type":433,"value":11116},"P179，MyObject() 有没有必要用括号",{"type":427,"tag":545,"props":11118,"children":11119},{},[11120],{"type":433,"value":11121},"P206，语言仅提供了...能力而已",{"type":427,"tag":545,"props":11123,"children":11124},{},[11125],{"type":433,"value":11126},"P252，注2 的位置，以及应当标明加粗部分是 handler.xxx 和内部方法不同名的部分",{"type":427,"tag":545,"props":11128,"children":11129},{},[11130],{"type":433,"value":11131},"P258，setPrototype(..., atom)，同 P259 的 setPrototype，没看懂",{"type":427,"tag":545,"props":11133,"children":11134},{},[11135],{"type":433,"value":11136},"P424，最后一行，存取运算符（.）的优先级高于不带参数表的 new 运算符",{"type":427,"tag":545,"props":11138,"children":11139},{},[11140],{"type":433,"value":11141},"P536，表格最后一行 String",{"type":427,"tag":545,"props":11143,"children":11144},{},[11145],{"type":433,"value":11146},"P535，存取描述符",{"type":427,"tag":545,"props":11148,"children":11149},{},[11150],{"type":433,"value":11151},"P564，运算符",{"type":427,"tag":11153,"props":11154,"children":11157},"section",{"className":11155,"dataFootnotes":421},[11156],"footnotes",[11158,11165],{"type":427,"tag":428,"props":11159,"children":11162},{"className":11160,"id":528},[11161],"sr-only",[11163],{"type":433,"value":11164},"Footnotes",{"type":427,"tag":11166,"props":11167,"children":11168},"ol",{},[11169,11184,11197,11210,11223,11236],{"type":427,"tag":545,"props":11170,"children":11172},{"id":11171},"user-content-fn-first-class",[11173,11175],{"type":433,"value":11174},"“第一类”也就是 first-class，类似“一等公民”，意味有着不能分割、不能被重述的概念。 ",{"type":427,"tag":524,"props":11176,"children":11181},{"href":11177,"ariaLabel":11178,"className":11179,"dataFootnoteBackref":421},"#user-content-fnref-first-class","Back to reference 1",[11180],"data-footnote-backref",[11182],{"type":433,"value":11183},"↩",{"type":427,"tag":545,"props":11185,"children":11187},{"id":11186},"user-content-fn-oo",[11188,11190],{"type":433,"value":11189},"在 ES6 之前，JS 被称为“基于对象语言”，而当其支持 class、super 等关键字后，被称为“支持类继承的面向对象系统”。 ",{"type":427,"tag":524,"props":11191,"children":11195},{"href":11192,"ariaLabel":11193,"className":11194,"dataFootnoteBackref":421},"#user-content-fnref-oo","Back to reference 2",[11180],[11196],{"type":433,"value":11183},{"type":427,"tag":545,"props":11198,"children":11200},{"id":11199},"user-content-fn-string",[11201,11203],{"type":433,"value":11202},"在赋值语句中字符串是个例外，按照引用类型处理。 ",{"type":427,"tag":524,"props":11204,"children":11208},{"href":11205,"ariaLabel":11206,"className":11207,"dataFootnoteBackref":421},"#user-content-fnref-string","Back to reference 3",[11180],[11209],{"type":433,"value":11183},{"type":427,"tag":545,"props":11211,"children":11213},{"id":11212},"user-content-fn-namespace",[11214,11216],{"type":433,"value":11215},"namespace 用来记录一个引擎中所有导出的名字。 ",{"type":427,"tag":524,"props":11217,"children":11221},{"href":11218,"ariaLabel":11219,"className":11220,"dataFootnoteBackref":421},"#user-content-fnref-namespace","Back to reference 4",[11180],[11222],{"type":433,"value":11183},{"type":427,"tag":545,"props":11224,"children":11226},{"id":11225},"user-content-fn-iterationenv",[11227,11229],{"type":433,"value":11228},"for 语句中 iterationEnv 的父级指向 loopEnv，而 for...in、for...of 等语句的 iterationEnv 父级直接指向其所在的块。 ",{"type":427,"tag":524,"props":11230,"children":11234},{"href":11231,"ariaLabel":11232,"className":11233,"dataFootnoteBackref":421},"#user-content-fnref-iterationenv","Back to reference 5",[11180],[11235],{"type":433,"value":11183},{"type":427,"tag":545,"props":11237,"children":11239},{"id":11238},"user-content-fn-reference",[11240,11242],{"type":433,"value":11241},"引用是指规范中的 Reference，取值是指规范中的 getValue()。 ",{"type":427,"tag":524,"props":11243,"children":11247},{"href":11244,"ariaLabel":11245,"className":11246,"dataFootnoteBackref":421},"#user-content-fnref-reference","Back to reference 6",[11180],[11248],{"type":433,"value":11183},{"type":427,"tag":11250,"props":11251,"children":11252},"style",{},[11253],{"type":433,"value":11254},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":421,"searchDepth":756,"depth":756,"links":11256},[11257,11266,11275,11285,11291,11301,11302],{"id":430,"depth":756,"text":430,"children":11258},[11259,11260,11261,11262,11263,11264,11265],{"id":437,"depth":1400,"text":437},{"id":511,"depth":1400,"text":511},{"id":637,"depth":1400,"text":637},{"id":1586,"depth":1400,"text":1586},{"id":2371,"depth":1400,"text":2371},{"id":2498,"depth":1400,"text":2498},{"id":2589,"depth":1400,"text":2589},{"id":2614,"depth":756,"text":2614,"children":11267},[11268,11269,11270,11271,11272,11273,11274],{"id":2619,"depth":1400,"text":437},{"id":3090,"depth":1400,"text":3090},{"id":3535,"depth":1400,"text":3535},{"id":4296,"depth":1400,"text":4296},{"id":5072,"depth":1400,"text":5072},{"id":5243,"depth":1400,"text":5243},{"id":6058,"depth":1400,"text":6058},{"id":6068,"depth":756,"text":6068,"children":11276},[11277,11278,11279,11280,11281,11282,11283,11284],{"id":6073,"depth":1400,"text":6073},{"id":6126,"depth":1400,"text":6126},{"id":6303,"depth":1400,"text":6303},{"id":6581,"depth":1400,"text":6581},{"id":6665,"depth":1400,"text":6665},{"id":6839,"depth":1400,"text":6839},{"id":6921,"depth":1400,"text":6921},{"id":6959,"depth":1400,"text":6959},{"id":6969,"depth":756,"text":6969,"children":11286},[11287,11288,11289,11290],{"id":6974,"depth":1400,"text":6073},{"id":6989,"depth":1400,"text":6992},{"id":8131,"depth":1400,"text":8131},{"id":8578,"depth":1400,"text":8578},{"id":8948,"depth":756,"text":8948,"children":11292},[11293,11294,11295,11296,11297,11298,11299,11300],{"id":8953,"depth":1400,"text":6073},{"id":8968,"depth":1400,"text":8968},{"id":9453,"depth":1400,"text":9453},{"id":9556,"depth":1400,"text":9556},{"id":9756,"depth":1400,"text":9756},{"id":10431,"depth":1400,"text":10431},{"id":10888,"depth":1400,"text":10888},{"id":11070,"depth":1400,"text":11070},{"id":11080,"depth":756,"text":11083},{"id":528,"depth":756,"text":11164},"markdown","content:_books:9787121386695.md","content","_books/9787121386695.md","_books/9787121386695","md",[11310,11314],{"_path":11311,"title":11312,"description":11313},"/_books/9787121331725","深入浅出 Webpack","这本书有点老了，仅支持到 Webpack 3.8。",{"_path":11315,"title":11316,"description":421},"/_books/9787301135907","日常生活中的自我呈现",1735922174826]