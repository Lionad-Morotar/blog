[{"data":1,"prerenderedAt":1531},["ShallowReactive",2],{"navigation":3,"/_books/ecma-262":389,"/_books/ecma-262-surround":1524},[4,32,83,99,126,132,138,372,378,384],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96],{"title":88,"_path":89},"🌐 AnySort","/tools/anysort",{"title":91,"_path":92},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":94,"_path":95},"👓 Crapto","/tools/crypto-inline",{"title":97,"_path":98},"🖨️ any-to-base64","/tools/any-to-base64",{"title":100,"_path":101,"children":102},"吉他剧场 / Music","/music",[103,105,108,111,114,117,120,123],{"title":104,"_path":101},"🎸 FingerStyle！",{"title":106,"_path":107},"🌬️ 等待的风","/music/wind",{"title":109,"_path":110},"💕 约定的海洋","/music/ocean",{"title":112,"_path":113},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":115,"_path":116},"🌏 残酷天使的行动纲领","/music/eva",{"title":118,"_path":119},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":121,"_path":122},"🍷 Wu Wei","/music/wu-wei",{"title":124,"_path":125},"🌅 无题","/music/untitled",{"title":127,"_path":128,"children":129},"画点什么 / Paint","/paint",[130],{"title":131,"_path":128},"🚧 正在施工",{"title":133,"_path":134,"children":135},"知识地图 / Maps","/maps",[136],{"title":137,"_path":134},"🏁 知识地图",{"title":139,"_path":140,"children":141},"零散的笔记 / Gists","/gists",[142,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369],{"title":143,"_path":140},"🧊 Gists",{"title":145,"_path":146},"网站的可访问性","/gists/accessibility",{"title":148,"_path":149},"Bit","/gists/bit",{"title":151,"_path":152},"图片模糊","/gists/blur",{"title":154,"_path":155},"渲染相关笔记","/gists/c4d",{"title":157,"_path":158},"CDN 问题记录","/gists/cdn",{"title":160,"_path":161},"消毒剂","/gists/cleaner",{"title":163,"_path":164},"Windows Command","/gists/cmd",{"title":166,"_path":167},"Command","/gists/command",{"title":169,"_path":170},"复杂科学","/gists/complexity-science",{"title":172,"_path":173},"宇宙","/gists/cosmos",{"title":175,"_path":176},"C++","/gists/cpp",{"title":178,"_path":179},"Data Structure","/gists/data-structure",{"title":181,"_path":182},"DEPRESSION","/gists/depression",{"title":184,"_path":185},"设计模式","/gists/design-patterns",{"title":187,"_path":188},"Developer Experience","/gists/developer-experience",{"title":190,"_path":191},"Device Metrics","/gists/device-metrix",{"title":193,"_path":194},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":196,"_path":197},"正则表达式","/gists/eegex",{"title":199,"_path":200},"Emoji","/gists/emoji",{"title":202,"_path":203},"工程","/gists/engineering",{"title":205,"_path":206},"熵","/gists/entropy",{"title":208,"_path":209},"Environment","/gists/environment",{"title":211,"_path":212},"Erlang","/gists/erlang",{"title":214,"_path":215},"逃离塔克夫","/gists/escape-from-tarkov",{"title":217,"_path":218},"ESNext (ES6-ES11)","/gists/esnext",{"title":220,"_path":221},"Eval！","/gists/eval",{"title":223,"_path":224},"Flutter","/gists/flutter",{"title":226,"_path":227},"字体","/gists/font",{"title":229,"_path":230},"JS 函数式编程","/gists/functional",{"title":232,"_path":233},"Google C++ Standard","/gists/google-cpp-standard",{"title":235,"_path":236},"双向链接完全体","/gists/graph",{"title":238,"_path":239},"Hardwares","/gists/hardwares",{"title":241,"_path":242},"哈希冲突","/gists/hash-collision",{"title":244,"_path":245},"信息设计","/gists/information-design",{"title":247,"_path":248},"InstantPage","/gists/instant.page",{"title":250,"_path":251},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":253,"_path":254},"KVStore","/gists/key-value-db",{"title":256,"_path":257},"Kubernetes","/gists/kubernetes",{"title":259,"_path":260},"Makefile","/gists/makefile",{"title":262,"_path":263},"Markdown Inline Style","/gists/markdown-nice",{"title":265,"_path":266},"小程序","/gists/miniapp",{"title":268,"_path":269},"减小页面快照体积","/gists/minify-html",{"title":271,"_path":272},"mklink","/gists/mklink",{"title":274,"_path":275},"Mock","/gists/mock",{"title":277,"_path":278},"多端应用","/gists/multy-end-app",{"title":280,"_path":281},"神经科学","/gists/neuroscience",{"title":283,"_path":284},"OO","/gists/oo",{"title":286,"_path":287},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":289,"_path":290},"人物","/gists/person",{"title":292,"_path":293},"PInvoke","/gists/pinvoke",{"title":295,"_path":296},"像素","/gists/pixel",{"title":298,"_path":299},"PowerShell","/gists/powershell",{"title":301,"_path":302},"量子","/gists/quantum",{"title":304,"_path":305},"保持好奇心","/gists/questions",{"title":307,"_path":308},"React Native","/gists/react-native",{"title":310,"_path":311},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":313,"_path":314},"SEO","/gists/seo",{"title":316,"_path":317},"Shader","/gists/shader",{"title":319,"_path":320},"Shape Up","/gists/shape-up",{"title":322,"_path":323},"睡觉","/gists/sleep",{"title":325,"_path":326},"States","/gists/states",{"title":328,"_path":329},"Storage","/gists/storage",{"title":331,"_path":332},"音视频流处理","/gists/stream-cli",{"title":334,"_path":335},"Symbol","/gists/symbol",{"title":337,"_path":338},"系统论","/gists/systems-theory",{"title":340,"_path":341},"Taro","/gists/taro",{"title":343,"_path":344},"任务切片","/gists/task-slice",{"title":346,"_path":347},"技术偏好","/gists/tech-dudge",{"title":349,"_path":350},"Untitled","/gists/untitled",{"title":352,"_path":353},"可变字体","/gists/variable-font",{"title":355,"_path":356},"视觉错觉","/gists/visual-illusion",{"title":358,"_path":359},"SS(SSR)","/gists/vpn",{"title":361,"_path":362},"VS Code 插件开发","/gists/vscode-plugin",{"title":364,"_path":365},"Web Components","/gists/web-components",{"title":367,"_path":368},"Windows","/gists/windows",{"title":370,"_path":371},"查缺补漏","/gists/wrong",{"title":373,"_path":374,"children":375},"代码笔记 / Gists","/source-code",[376],{"title":377,"_path":374},"🚄 代码笔记",{"title":379,"_path":380,"children":381},"我 / Abount","/hire",[382],{"title":383,"_path":380},"📬 技术简历",{"title":385,"_path":386,"children":387},"todo","/todo",[388],{"title":385,"_path":386},{"_path":390,"_dir":391,"_draft":392,"_partial":393,"_locale":394,"title":395,"description":394,"body":396,"_type":1519,"_id":1520,"_source":1521,"_file":1522,"_extension":1523},"/_books/ecma-262","_books",false,true,"","ECMAScript Standard",{"type":397,"children":398,"toc":1503},"root",[399,407,413,482,488,494,506,608,618,733,738,743,748,757,777,782,810,815,820,825,830,835,840,853,857,862,898,903,908,926,931,936,941,946,951,953,1434,1497],{"type":400,"tag":401,"props":402,"children":404},"element","h2",{"id":403},"资料",[405],{"type":406,"value":403},"text",{"type":400,"tag":408,"props":409,"children":410},"p",{},[411],{"type":406,"value":412},"一些极其有用的前置参考资料，有助于甄别与理解规范里各种概念，不至于被绕晕。",{"type":400,"tag":414,"props":415,"children":416},"ul",{},[417,436,451,469],{"type":400,"tag":418,"props":419,"children":420},"li",{},[421,434],{"type":400,"tag":422,"props":423,"children":427},"a",{"href":424,"rel":425},"https://timothygu.me/es-howto/",[426],"nofollow",[428],{"type":400,"tag":429,"props":430,"children":431},"i",{},[432],{"type":406,"value":433},"How to Read the ECMAScript Specification",{"type":406,"value":435},"，这个资料简要介绍了一些阅读规范时需要知悉且有助于你理解规范的前置概念并予例说明，比如说抽象操作、内部槽以及内部方法、完成记录、变异对象等。",{"type":400,"tag":418,"props":437,"children":438},{},[439,449],{"type":400,"tag":422,"props":440,"children":443},{"href":441,"rel":442},"https://v8.dev/blog/tags/understanding-ecmascript",[426],[444],{"type":400,"tag":429,"props":445,"children":446},{},[447],{"type":406,"value":448},"Understanding ECMAScript",{"type":406,"value":450},"，V8 团队写的 ECMAScript 阅读指南文章系列，一共四篇，很有参考价值。",{"type":400,"tag":418,"props":452,"children":453},{},[454,461,463,467],{"type":400,"tag":422,"props":455,"children":458},{"href":456,"rel":457},"https://juejin.cn/post/6944587399418609701",[426],[459],{"type":406,"value":460},"《ECMAScript 阅读指南》",{"type":406,"value":462},"，",{"type":400,"tag":429,"props":464,"children":465},{},[466],{"type":406,"value":448},{"type":406,"value":468}," 的翻译版本。",{"type":400,"tag":418,"props":470,"children":471},{},[472],{"type":400,"tag":422,"props":473,"children":476},{"href":474,"rel":475},"https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript",[426],[477],{"type":400,"tag":429,"props":478,"children":479},{},[480],{"type":406,"value":481},"What is the difference between JavaScript and ECMAScript?",{"type":400,"tag":483,"props":484,"children":486},"h3",{"id":485},"快速入门",[487],{"type":406,"value":485},{"type":400,"tag":489,"props":490,"children":492},"h4",{"id":491},"问号和感叹号简写标记",[493],{"type":406,"value":491},{"type":400,"tag":408,"props":495,"children":496},{},[497,504],{"type":400,"tag":498,"props":499,"children":501},"code",{"className":500},[],[502],{"type":406,"value":503},"Let val be ! Foo()",{"type":406,"value":505}," 等同于：",{"type":400,"tag":507,"props":508,"children":512},"pre",{"className":509,"code":510,"language":511,"meta":394,"style":394},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","1. Let val be Foo().\n2. Assert: val is not an abrupt completion.\n3. Set val to val.[[Value]].\n","js",[513],{"type":400,"tag":498,"props":514,"children":515},{"__ignoreMap":394},[516,551,580],{"type":400,"tag":517,"props":518,"children":521},"span",{"class":519,"line":520},"line",1,[522,528,534,540,545],{"type":400,"tag":517,"props":523,"children":525},{"style":524},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[526],{"type":406,"value":527},"1.",{"type":400,"tag":517,"props":529,"children":531},{"style":530},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[532],{"type":406,"value":533}," Let val be ",{"type":400,"tag":517,"props":535,"children":537},{"style":536},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[538],{"type":406,"value":539},"Foo",{"type":400,"tag":517,"props":541,"children":542},{"style":530},[543],{"type":406,"value":544},"()",{"type":400,"tag":517,"props":546,"children":548},{"style":547},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[549],{"type":406,"value":550},".\n",{"type":400,"tag":517,"props":552,"children":554},{"class":519,"line":553},2,[555,560,566,571,576],{"type":400,"tag":517,"props":556,"children":557},{"style":524},[558],{"type":406,"value":559},"2.",{"type":400,"tag":517,"props":561,"children":563},{"style":562},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[564],{"type":406,"value":565}," Assert",{"type":400,"tag":517,"props":567,"children":568},{"style":547},[569],{"type":406,"value":570},":",{"type":400,"tag":517,"props":572,"children":573},{"style":530},[574],{"type":406,"value":575}," val is not an abrupt completion",{"type":400,"tag":517,"props":577,"children":578},{"style":547},[579],{"type":406,"value":550},{"type":400,"tag":517,"props":581,"children":583},{"class":519,"line":582},3,[584,589,594,599,604],{"type":400,"tag":517,"props":585,"children":586},{"style":524},[587],{"type":406,"value":588},"3.",{"type":400,"tag":517,"props":590,"children":591},{"style":530},[592],{"type":406,"value":593}," Set val to val",{"type":400,"tag":517,"props":595,"children":596},{"style":547},[597],{"type":406,"value":598},".",{"type":400,"tag":517,"props":600,"children":601},{"style":530},[602],{"type":406,"value":603},"[[Value]]",{"type":400,"tag":517,"props":605,"children":606},{"style":547},[607],{"type":406,"value":550},{"type":400,"tag":408,"props":609,"children":610},{},[611,617],{"type":400,"tag":498,"props":612,"children":614},{"className":613},[],[615],{"type":406,"value":616},"Return ? Foo()",{"type":406,"value":505},{"type":400,"tag":507,"props":619,"children":621},{"className":509,"code":620,"language":511,"meta":394,"style":394},"1. Let temp be Foo().\n2. If temp is an abrupt completion, return temp.\n3. Set temp to temp.[[Value]].\n4. Return NormalCompletion(temp).\n",[622],{"type":400,"tag":498,"props":623,"children":624},{"__ignoreMap":394},[625,649,681,705],{"type":400,"tag":517,"props":626,"children":627},{"class":519,"line":520},[628,632,637,641,645],{"type":400,"tag":517,"props":629,"children":630},{"style":524},[631],{"type":406,"value":527},{"type":400,"tag":517,"props":633,"children":634},{"style":530},[635],{"type":406,"value":636}," Let temp be ",{"type":400,"tag":517,"props":638,"children":639},{"style":536},[640],{"type":406,"value":539},{"type":400,"tag":517,"props":642,"children":643},{"style":530},[644],{"type":406,"value":544},{"type":400,"tag":517,"props":646,"children":647},{"style":547},[648],{"type":406,"value":550},{"type":400,"tag":517,"props":650,"children":651},{"class":519,"line":553},[652,656,661,666,672,677],{"type":400,"tag":517,"props":653,"children":654},{"style":524},[655],{"type":406,"value":559},{"type":400,"tag":517,"props":657,"children":658},{"style":530},[659],{"type":406,"value":660}," If temp is an abrupt completion",{"type":400,"tag":517,"props":662,"children":663},{"style":547},[664],{"type":406,"value":665},",",{"type":400,"tag":517,"props":667,"children":669},{"style":668},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672;--shiki-light-font-style:italic;--shiki-default-font-style:inherit;--shiki-dark-font-style:inherit;--shiki-sepia-font-style:inherit",[670],{"type":406,"value":671}," return",{"type":400,"tag":517,"props":673,"children":674},{"style":530},[675],{"type":406,"value":676}," temp",{"type":400,"tag":517,"props":678,"children":679},{"style":547},[680],{"type":406,"value":550},{"type":400,"tag":517,"props":682,"children":683},{"class":519,"line":582},[684,688,693,697,701],{"type":400,"tag":517,"props":685,"children":686},{"style":524},[687],{"type":406,"value":588},{"type":400,"tag":517,"props":689,"children":690},{"style":530},[691],{"type":406,"value":692}," Set temp to temp",{"type":400,"tag":517,"props":694,"children":695},{"style":547},[696],{"type":406,"value":598},{"type":400,"tag":517,"props":698,"children":699},{"style":530},[700],{"type":406,"value":603},{"type":400,"tag":517,"props":702,"children":703},{"style":547},[704],{"type":406,"value":550},{"type":400,"tag":517,"props":706,"children":708},{"class":519,"line":707},4,[709,714,719,724,729],{"type":400,"tag":517,"props":710,"children":711},{"style":524},[712],{"type":406,"value":713},"4.",{"type":400,"tag":517,"props":715,"children":716},{"style":530},[717],{"type":406,"value":718}," Return ",{"type":400,"tag":517,"props":720,"children":721},{"style":536},[722],{"type":406,"value":723},"NormalCompletion",{"type":400,"tag":517,"props":725,"children":726},{"style":530},[727],{"type":406,"value":728},"(temp)",{"type":400,"tag":517,"props":730,"children":731},{"style":547},[732],{"type":406,"value":550},{"type":400,"tag":401,"props":734,"children":736},{"id":735},"规范综述",[737],{"type":406,"value":735},{"type":400,"tag":483,"props":739,"children":741},{"id":740},"语言组成",[742],{"type":406,"value":740},{"type":400,"tag":408,"props":744,"children":745},{},[746],{"type":406,"value":747},"常常能听到：“对象的本质就是实现了规范所要求的内部插槽的结构”，其实该观点源于这张图：",{"type":400,"tag":408,"props":749,"children":750},{},[751],{"type":400,"tag":752,"props":753,"children":756},"img",{"alt":754,"src":755},"对象的本质","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/timothygu.me_es-howto_object-uml.svg.png",[],{"type":400,"tag":408,"props":758,"children":759},{},[760,762,775],{"type":406,"value":761},"ECMAScript 是一种基于对象的基本语言，其基础设置主要依赖宿主提供的对象。基于此概念，可以把 ECMAScript 程序看作一组相互通讯的对象集合。按照规范，对象的精确描述其实应该是：“一个具有零或多个被属性描述符决定的属性的集合",{"type":400,"tag":763,"props":764,"children":765},"sup",{},[766],{"type":400,"tag":422,"props":767,"children":772},{"href":768,"ariaDescribedBy":769,"dataFootnoteRef":394,"id":771},"#user-content-fn-object-definition",[770],"footnote-label","user-content-fnref-object-definition",[773],{"type":406,"value":774},"1",{"type":406,"value":776},"”。对象的属性能持有其它值，包括规范定义的原始值：Undefined、Null、Boolean、Number、BigInt、String、Symbol 和 Object。这里说的 Object 还包括可执行对象，callable object，也就是函数。而由对象内属性持有的函数，叫做方法。",{"type":400,"tag":408,"props":778,"children":779},{},[780],{"type":406,"value":781},"按照上图，规范定义了包括全局对象、Object、Function 等对象以及操作这些对象所需要用到的操作符。除此之外，还定义了用于组织程序的模块，以及行文所需要用到的静态语法。组织方式如下：",{"type":400,"tag":414,"props":783,"children":784},{},[785,790,795,800,805],{"type":400,"tag":418,"props":786,"children":787},{},[788],{"type":406,"value":789},"章节 5 定义了规范所使用的符号约定。",{"type":400,"tag":418,"props":791,"children":792},{},[793],{"type":406,"value":794},"章节 6 至章节 10 定义了语言的运行环境。",{"type":400,"tag":418,"props":796,"children":797},{},[798],{"type":406,"value":799},"章节 11 至章节 17 定义了包括语法、语义在内的所有语言功能。",{"type":400,"tag":418,"props":801,"children":802},{},[803],{"type":406,"value":804},"章节 18 至章节 28 定义了语言依赖的标准库。",{"type":400,"tag":418,"props":806,"children":807},{},[808],{"type":406,"value":809},"章节 29 描述了支持 SharedArrayBuffer 以及 Atomics 对象方法访问的内存一致性模型。",{"type":400,"tag":483,"props":811,"children":813},{"id":812},"语言风格",[814],{"type":406,"value":812},{"type":400,"tag":408,"props":816,"children":817},{},[818],{"type":406,"value":819},"ECMAScript 基于对象，这和 C++、Java 不同的本质区别在于创建对象的方式以及属性共享思路的不同：ECMAScript 支持多种方式创建对象：构造器、字面量或 Object.create，而属性共享则是使用原型。使用原型意味着尽管 ECMAScript 支持类继承，但是是通过原型继承隐式实现的：每一个构造器函数都有一个原型属性，属性名为 prototype。以该构造器创建的实例会携带一个隐式的指向其构造器的原型的引用（称为实例的原型）。而构造器函数也是一个对象实例，所以也会有对应的原型。ECMAScript 依赖这条由对象原型组成的链条式的关系，即原型链，来共享属性。而在经典面向对象语言中，总的来说，属性（也就是状态）是直接挂载在实例上的，只有方法挂载在类上，这也就意味着类继承只约束了继承结构和对象的行为，没有约束对象的状态。此外，由于 ECMAScript 支持动态重写对象，这使得你可以在运行时去创建一个动态的继承结构。",{"type":400,"tag":408,"props":821,"children":822},{},[823],{"type":406,"value":824},"ECMAScript 被故意地设计成类 Java 的语法，这是历史原因。另一方面，其语法被考虑设计成尽可能简单的。规范对语言的具体描述是一种“通用编程语言”，并不是指代语言性质，如“脚本语言”，或是具体实现，如“JavaScript”。有不少其它语言也完整实现了规范，如微软早期的 JScript 和用于 Flash 的 ActionScript。从这个角度来看，JavaScript 应该看作 ECMAScript 的一种方言。",{"type":400,"tag":408,"props":826,"children":827},{},[828],{"type":406,"value":829},"如果从历史的角度来看，ECAMAScript 和 JavaScript 的关系会发生变化。JavaScript 是网景公司在宣发时使用的名称，这个语言一开始叫做 Mocha，而后又叫做 LiveScript。微软在 IE 中也做了一种实现，但由于版权问题卡喉咙，不能叫做 JavaScript，所以改为了 JScript。在网景公司没落前，他们起草了 ECMAScript 标准，用来规划 JavaScript 的发展路线。尽管网景没了，但规范则一直在更新，比如被人们熟知的 ES6，指代 ECMAScript 2015 6th Edition。ECMAScript 和 JavaScript 也就不仅仅应当被理解成标准和实现，它们还属于共生共荣的关系。",{"type":400,"tag":483,"props":831,"children":833},{"id":832},"宿主系统",[834],{"type":406,"value":832},{"type":400,"tag":408,"props":836,"children":837},{},[838],{"type":406,"value":839},"脚本语言是设计给包括非职业开发人员使用的语言，没有必要拥有主程序入口。所以脚本语言通常寄生于特定系统，依赖宿主提供的设施以完善语言功能，使用终端进行操作，以便人员操控程序或自动化流程。规范原本想设计一款 Web 脚本语言，用于客户端以响应用户在界面上的操作，使 Web 页面能够执行逻辑。但随着越来越广泛的使用，功能逐渐完善，ECMAScript 演变成为了通用程序语言。",{"type":400,"tag":408,"props":841,"children":842},{},[843,845,851],{"type":406,"value":844},"每一个支持 ECMAScript 的浏览器或者服务器端都拥有一个对应的宿主系统用于执行脚本。宿主系统的实现需要按照规范，不过规范对某些特征只描述了特定行为而没有给出具体算法。这些具体算法通常会由其它规范来实现，比如说 HTML 规范中定义的宏任务和微任务或 Math.exp 这种特定算法。总而言之，只要宿主系统和规范是一致的（见",{"type":400,"tag":422,"props":846,"children":848},{"href":847},"#%E4%B8%80%E8%87%B4%E6%80%A7",[849],{"type":406,"value":850},"一致性",{"type":406,"value":852},"）并实现了特定的行为如 Host Hooks、Host-defined Fileds、Host-defined Objects、Running Jobs、Internal Methods of Exotic Objects 和 Built-in Objects and Methods，就算是一个完整的 ECMAScript 宿主系统，就能正确地和规范进行交互。",{"type":400,"tag":483,"props":854,"children":855},{"id":850},[856],{"type":406,"value":850},{"type":400,"tag":408,"props":858,"children":859},{},[860],{"type":406,"value":861},"一致性是指，实现了 ECMAScript 规范（以下简称规范）的语言必须满足以下标准：",{"type":400,"tag":414,"props":863,"children":864},{},[865,883,888,893],{"type":400,"tag":418,"props":866,"children":867},{},[868,870,881],{"type":406,"value":869},"规范描述：类型系统、值、对象、属性、函数、语法、语义、严格模式",{"type":400,"tag":763,"props":871,"children":872},{},[873],{"type":400,"tag":422,"props":874,"children":878},{"href":875,"ariaDescribedBy":876,"dataFootnoteRef":394,"id":877},"#user-content-fn-strict-mode",[770],"user-content-fnref-strict-mode",[879],{"type":406,"value":880},"2",{"type":406,"value":882},"。",{"type":400,"tag":418,"props":884,"children":885},{},[886],{"type":406,"value":887},"编码标准：最新的 Unicode 标准以及 USC 标准。",{"type":400,"tag":418,"props":889,"children":890},{},[891],{"type":406,"value":892},"ECMA-402：ECMAScript 的国际化接口标准，即 Intl 相关规范。",{"type":400,"tag":418,"props":894,"children":895},{},[896],{"type":406,"value":897},"可选规范：可选规范要么全部不实现，要么全部都实现。目前在文档中只找到相关 WeakRef.prototype.constructor 初始值必须为 %WeakRef% 的可选规范。",{"type":400,"tag":408,"props":899,"children":900},{},[901],{"type":406,"value":902},"规范允许某些实现了规范的具体语言可以提供超出规范描述的内容，包括类型、值、对象...语法或是保留字的实现。",{"type":400,"tag":408,"props":904,"children":905},{},[906],{"type":406,"value":907},"另外，以下规范和 ECMAScript 相关，但不要求 ECMAScript 的宿主系统实现：",{"type":400,"tag":414,"props":909,"children":910},{},[911,916,921],{"type":400,"tag":418,"props":912,"children":913},{},[914],{"type":406,"value":915},"ISO/IEC 10646：UCS 规范。",{"type":400,"tag":418,"props":917,"children":918},{},[919],{"type":406,"value":920},"ECMA-402：国际化接口规范。",{"type":400,"tag":418,"props":922,"children":923},{},[924],{"type":406,"value":925},"ECMA-404：JSON 规范。",{"type":400,"tag":401,"props":927,"children":929},{"id":928},"规范类型和语言类型",[930],{"type":406,"value":928},{"type":400,"tag":408,"props":932,"children":933},{},[934],{"type":406,"value":935},"为什么要区分语言类型和规范类型呢？顾名思义，语言类型是 JavaScript 所使用的一种类型系统，包含比如 Null、Undefined、Object 等类型，但由于 JavaScript 需要由其它引擎实现，也就是说规范所描述的算法逻辑中携带的基本类型不是 JavaScript 语言中的基本类型，而更可能是诸如 C++ 中的数据类型。",{"type":400,"tag":401,"props":937,"children":939},{"id":938},"其它",[940],{"type":406,"value":938},{"type":400,"tag":483,"props":942,"children":944},{"id":943},"词汇表",[945],{"type":406,"value":943},{"type":400,"tag":408,"props":947,"children":948},{},[949],{"type":406,"value":950},"术语表及本文中相关中英翻译的集合。",{"type":406,"value":952},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":400,"tag":954,"props":955,"children":956},"table",{},[957,981],{"type":400,"tag":958,"props":959,"children":960},"thead",{},[961],{"type":400,"tag":962,"props":963,"children":964},"tr",{},[965,971,976],{"type":400,"tag":966,"props":967,"children":968},"th",{},[969],{"type":406,"value":970},"Source",{"type":400,"tag":966,"props":972,"children":973},{},[974],{"type":406,"value":975},"Chinese",{"type":400,"tag":966,"props":977,"children":978},{},[979],{"type":406,"value":980},"Meaning",{"type":400,"tag":982,"props":983,"children":984},"tbody",{},[985,1004,1022,1040,1058,1075,1096,1114,1139,1157,1175,1193,1211,1229,1246,1270,1287,1305,1323,1341,1359,1376,1398,1416],{"type":400,"tag":962,"props":986,"children":987},{},[988,994,999],{"type":400,"tag":989,"props":990,"children":991},"td",{},[992],{"type":406,"value":993},"attribute",{"type":400,"tag":989,"props":995,"children":996},{},[997],{"type":406,"value":998},"属性",{"type":400,"tag":989,"props":1000,"children":1001},{},[1002],{"type":406,"value":1003},"用来定义属性特性的内部值，比方说 [[Writable]]",{"type":400,"tag":962,"props":1005,"children":1006},{},[1007,1012,1017],{"type":400,"tag":989,"props":1008,"children":1009},{},[1010],{"type":406,"value":1011},"arbitrary-precision",{"type":400,"tag":989,"props":1013,"children":1014},{},[1015],{"type":406,"value":1016},"任意精度的",{"type":400,"tag":989,"props":1018,"children":1019},{},[1020],{"type":406,"value":1021},"略",{"type":400,"tag":962,"props":1023,"children":1024},{},[1025,1030,1035],{"type":400,"tag":989,"props":1026,"children":1027},{},[1028],{"type":406,"value":1029},"built-in function",{"type":400,"tag":989,"props":1031,"children":1032},{},[1033],{"type":406,"value":1034},"内置对象",{"type":400,"tag":989,"props":1036,"children":1037},{},[1038],{"type":406,"value":1039},"作为函数的内置对象",{"type":400,"tag":962,"props":1041,"children":1042},{},[1043,1048,1053],{"type":400,"tag":989,"props":1044,"children":1045},{},[1046],{"type":406,"value":1047},"built-in method",{"type":400,"tag":989,"props":1049,"children":1050},{},[1051],{"type":406,"value":1052},"内置方法",{"type":400,"tag":989,"props":1054,"children":1055},{},[1056],{"type":406,"value":1057},"作为方法的内置函数",{"type":400,"tag":962,"props":1059,"children":1060},{},[1061,1066,1070],{"type":400,"tag":989,"props":1062,"children":1063},{},[1064],{"type":406,"value":1065},"built-in object",{"type":400,"tag":989,"props":1067,"children":1068},{},[1069],{"type":406,"value":1034},{"type":400,"tag":989,"props":1071,"children":1072},{},[1073],{"type":406,"value":1074},"由规范定义（定义了具体实现）的对象",{"type":400,"tag":962,"props":1076,"children":1077},{},[1078,1083,1087],{"type":400,"tag":989,"props":1079,"children":1080},{},[1081],{"type":406,"value":1082},"conformance",{"type":400,"tag":989,"props":1084,"children":1085},{},[1086],{"type":406,"value":850},{"type":400,"tag":989,"props":1088,"children":1089},{},[1090,1092],{"type":406,"value":1091},"见",{"type":400,"tag":422,"props":1093,"children":1094},{"href":847},[1095],{"type":406,"value":850},{"type":400,"tag":962,"props":1097,"children":1098},{},[1099,1104,1109],{"type":400,"tag":989,"props":1100,"children":1101},{},[1102],{"type":406,"value":1103},"constructor",{"type":400,"tag":989,"props":1105,"children":1106},{},[1107],{"type":406,"value":1108},"构造函数",{"type":400,"tag":989,"props":1110,"children":1111},{},[1112],{"type":406,"value":1113},"用于创建和初始化对象用的函数",{"type":400,"tag":962,"props":1115,"children":1116},{},[1117,1122,1127],{"type":400,"tag":989,"props":1118,"children":1119},{},[1120],{"type":406,"value":1121},"general-purpose programming language",{"type":400,"tag":989,"props":1123,"children":1124},{},[1125],{"type":406,"value":1126},"通用编程语言",{"type":400,"tag":989,"props":1128,"children":1129},{},[1130,1132],{"type":406,"value":1131},"被设计为可在各个应用领域使用的语言，见 ",{"type":400,"tag":422,"props":1133,"children":1136},{"href":1134,"rel":1135},"https://en.wikipedia.org/wiki/Special:Search/General-purpose_programming_language",[426],[1137],{"type":406,"value":1138},"General-purpose programming language",{"type":400,"tag":962,"props":1140,"children":1141},{},[1142,1147,1152],{"type":400,"tag":989,"props":1143,"children":1144},{},[1145],{"type":406,"value":1146},"host-defined",{"type":400,"tag":989,"props":1148,"children":1149},{},[1150],{"type":406,"value":1151},"宿主实现",{"type":400,"tag":989,"props":1153,"children":1154},{},[1155],{"type":406,"value":1156},"同 implementation-defined",{"type":400,"tag":962,"props":1158,"children":1159},{},[1160,1165,1170],{"type":400,"tag":989,"props":1161,"children":1162},{},[1163],{"type":406,"value":1164},"implementation-approximated",{"type":400,"tag":989,"props":1166,"children":1167},{},[1168],{"type":406,"value":1169},"近似实现",{"type":400,"tag":989,"props":1171,"children":1172},{},[1173],{"type":406,"value":1174},"规范依赖某些外部实现，而在规范内假设这种实现是“完美的”",{"type":400,"tag":962,"props":1176,"children":1177},{},[1178,1183,1188],{"type":400,"tag":989,"props":1179,"children":1180},{},[1181],{"type":406,"value":1182},"implementation-defined",{"type":400,"tag":989,"props":1184,"children":1185},{},[1186],{"type":406,"value":1187},"定义实现",{"type":400,"tag":989,"props":1189,"children":1190},{},[1191],{"type":406,"value":1192},"规范依赖某些外部实现，外部实现的行为需要与规范描述的一致",{"type":400,"tag":962,"props":1194,"children":1195},{},[1196,1201,1206],{"type":400,"tag":989,"props":1197,"children":1198},{},[1199],{"type":406,"value":1200},"inherited property",{"type":400,"tag":989,"props":1202,"children":1203},{},[1204],{"type":406,"value":1205},"继承属性",{"type":400,"tag":989,"props":1207,"children":1208},{},[1209],{"type":406,"value":1210},"对象内由原型继承的来的属性",{"type":400,"tag":962,"props":1212,"children":1213},{},[1214,1219,1224],{"type":400,"tag":989,"props":1215,"children":1216},{},[1217],{"type":406,"value":1218},"method",{"type":400,"tag":989,"props":1220,"children":1221},{},[1222],{"type":406,"value":1223},"方法",{"type":400,"tag":989,"props":1225,"children":1226},{},[1227],{"type":406,"value":1228},"作为属性值的函数",{"type":400,"tag":962,"props":1230,"children":1231},{},[1232,1237,1242],{"type":400,"tag":989,"props":1233,"children":1234},{},[1235],{"type":406,"value":1236},"module",{"type":400,"tag":989,"props":1238,"children":1239},{},[1240],{"type":406,"value":1241},"模块",{"type":400,"tag":989,"props":1243,"children":1244},{},[1245],{"type":406,"value":1021},{"type":400,"tag":962,"props":1247,"children":1248},{},[1249,1254,1258],{"type":400,"tag":989,"props":1250,"children":1251},{},[1252],{"type":406,"value":1253},"NaN",{"type":400,"tag":989,"props":1255,"children":1256},{},[1257],{"type":406,"value":1253},{"type":400,"tag":989,"props":1259,"children":1260},{},[1261,1268],{"type":400,"tag":422,"props":1262,"children":1265},{"href":1263,"rel":1264},"https://ieeexplore.ieee.org/document/8766229",[426],[1266],{"type":406,"value":1267},"IEEE 754-2019",{"type":406,"value":1269}," 标准定义的“不是一个数字”的数值",{"type":400,"tag":962,"props":1271,"children":1272},{},[1273,1278,1283],{"type":400,"tag":989,"props":1274,"children":1275},{},[1276],{"type":406,"value":1277},"normative optional",{"type":400,"tag":989,"props":1279,"children":1280},{},[1281],{"type":406,"value":1282},"可选规范",{"type":400,"tag":989,"props":1284,"children":1285},{},[1286],{"type":406,"value":1021},{"type":400,"tag":962,"props":1288,"children":1289},{},[1290,1295,1300],{"type":400,"tag":989,"props":1291,"children":1292},{},[1293],{"type":406,"value":1294},"null value",{"type":400,"tag":989,"props":1296,"children":1297},{},[1298],{"type":406,"value":1299},"空值",{"type":400,"tag":989,"props":1301,"children":1302},{},[1303],{"type":406,"value":1304},"表示对象的值的某种刻意缺失",{"type":400,"tag":962,"props":1306,"children":1307},{},[1308,1313,1318],{"type":400,"tag":989,"props":1309,"children":1310},{},[1311],{"type":406,"value":1312},"ordinary object",{"type":400,"tag":989,"props":1314,"children":1315},{},[1316],{"type":406,"value":1317},"普通对象",{"type":400,"tag":989,"props":1319,"children":1320},{},[1321],{"type":406,"value":1322},"实现了所有基本内部槽的默认功能的对象",{"type":400,"tag":962,"props":1324,"children":1325},{},[1326,1331,1336],{"type":400,"tag":989,"props":1327,"children":1328},{},[1329],{"type":406,"value":1330},"own property",{"type":400,"tag":989,"props":1332,"children":1333},{},[1334],{"type":406,"value":1335},"自有属性",{"type":400,"tag":989,"props":1337,"children":1338},{},[1339],{"type":406,"value":1340},"作为该对象拥有的而不是通过原型继承获得的属性就叫该对象的自有属性",{"type":400,"tag":962,"props":1342,"children":1343},{},[1344,1349,1354],{"type":400,"tag":989,"props":1345,"children":1346},{},[1347],{"type":406,"value":1348},"primitive value",{"type":400,"tag":989,"props":1350,"children":1351},{},[1352],{"type":406,"value":1353},"原始值",{"type":400,"tag":989,"props":1355,"children":1356},{},[1357],{"type":406,"value":1358},"不可再分的数据，Undefined, Null, Boolean, Number, BigInt, Symbol, String 中的一种",{"type":400,"tag":962,"props":1360,"children":1361},{},[1362,1367,1371],{"type":400,"tag":989,"props":1363,"children":1364},{},[1365],{"type":406,"value":1366},"property",{"type":400,"tag":989,"props":1368,"children":1369},{},[1370],{"type":406,"value":998},{"type":400,"tag":989,"props":1372,"children":1373},{},[1374],{"type":406,"value":1375},"组成对象的基本部分，包含键和对应的值",{"type":400,"tag":962,"props":1377,"children":1378},{},[1379,1384,1389],{"type":400,"tag":989,"props":1380,"children":1381},{},[1382],{"type":406,"value":1383},"prototype",{"type":400,"tag":989,"props":1385,"children":1386},{},[1387],{"type":406,"value":1388},"原型",{"type":400,"tag":989,"props":1390,"children":1391},{},[1392,1393],{"type":406,"value":1091},{"type":400,"tag":422,"props":1394,"children":1396},{"href":1395},"#%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC",[1397],{"type":406,"value":812},{"type":400,"tag":962,"props":1399,"children":1400},{},[1401,1406,1411],{"type":400,"tag":989,"props":1402,"children":1403},{},[1404],{"type":406,"value":1405},"standard object",{"type":400,"tag":989,"props":1407,"children":1408},{},[1409],{"type":406,"value":1410},"标准对象",{"type":400,"tag":989,"props":1412,"children":1413},{},[1414],{"type":406,"value":1415},"行为（语义）和规范一致的对象",{"type":400,"tag":962,"props":1417,"children":1418},{},[1419,1424,1429],{"type":400,"tag":989,"props":1420,"children":1421},{},[1422],{"type":406,"value":1423},"undefined value",{"type":400,"tag":989,"props":1425,"children":1426},{},[1427],{"type":406,"value":1428},"未定义值",{"type":400,"tag":989,"props":1430,"children":1431},{},[1432],{"type":406,"value":1433},"表示变量初始化成功但未赋值",{"type":400,"tag":1435,"props":1436,"children":1439},"section",{"className":1437,"dataFootnotes":394},[1438],"footnotes",[1440,1447],{"type":400,"tag":401,"props":1441,"children":1444},{"className":1442,"id":770},[1443],"sr-only",[1445],{"type":406,"value":1446},"Footnotes",{"type":400,"tag":1448,"props":1449,"children":1450},"ol",{},[1451,1475],{"type":400,"tag":418,"props":1452,"children":1454},{"id":1453},"user-content-fn-object-definition",[1455,1457,1464,1466],{"type":406,"value":1456},"定义见 ",{"type":400,"tag":422,"props":1458,"children":1461},{"href":1459,"rel":1460},"https://262.ecma-international.org/12.0/#sec-terms-and-definitions-object",[426],[1462],{"type":406,"value":1463}," Terms and Definitions - object",{"type":406,"value":1465}," ",{"type":400,"tag":422,"props":1467,"children":1472},{"href":1468,"ariaLabel":1469,"className":1470,"dataFootnoteBackref":394},"#user-content-fnref-object-definition","Back to reference 1",[1471],"data-footnote-backref",[1473],{"type":406,"value":1474},"↩",{"type":400,"tag":418,"props":1476,"children":1478},{"id":1477},"user-content-fn-strict-mode",[1479,1481,1488,1490],{"type":406,"value":1480},"必须支持严格模式和非严格模式，并且能在一个符合程序中同时运行严格模式和非严格模式的代码，见 ",{"type":400,"tag":422,"props":1482,"children":1485},{"href":1483,"rel":1484},"https://262.ecma-international.org/12.0/#sec-strict-variant-of-ecmascript",[426],[1486],{"type":406,"value":1487},"The Strict Variant of ECMAScript",{"type":406,"value":1489},"。 ",{"type":400,"tag":422,"props":1491,"children":1495},{"href":1492,"ariaLabel":1493,"className":1494,"dataFootnoteBackref":394},"#user-content-fnref-strict-mode","Back to reference 2",[1471],[1496],{"type":406,"value":1474},{"type":400,"tag":1498,"props":1499,"children":1500},"style",{},[1501],{"type":406,"value":1502},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":394,"searchDepth":553,"depth":553,"links":1504},[1505,1508,1514,1515,1518],{"id":403,"depth":553,"text":403,"children":1506},[1507],{"id":485,"depth":582,"text":485},{"id":735,"depth":553,"text":735,"children":1509},[1510,1511,1512,1513],{"id":740,"depth":582,"text":740},{"id":812,"depth":582,"text":812},{"id":832,"depth":582,"text":832},{"id":850,"depth":582,"text":850},{"id":928,"depth":553,"text":928},{"id":938,"depth":553,"text":938,"children":1516},[1517],{"id":943,"depth":582,"text":943},{"id":770,"depth":553,"text":1446},"markdown","content:_books:ecma-262.md","content","_books/ecma-262.md","md",[1525,1528],{"_path":1526,"title":1527,"description":394},"/_books/dear-ui","亲爱的界面",{"_path":1529,"title":1530,"description":394},"/_books","图书分类参考",1718618895592]