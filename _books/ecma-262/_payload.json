[{"data":1,"prerenderedAt":1534},["ShallowReactive",2],{"navigation":3,"/_books/ecma-262":393,"/_books/ecma-262-surround":1527},[4,35,86,105,132,138,144,150,387],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"造物 / Make","/tools",[90,93,96,99,102],{"title":91,"_path":92},"🥥 Coconut","/tools/coconut",{"title":94,"_path":95},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":97,"_path":98},"🌐 AnySort","/tools/anysort",{"title":100,"_path":101},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":103,"_path":104},"👓 Crapto","/tools/crypto-inline",{"title":106,"_path":107,"children":108},"吉他剧场 / Music","/music",[109,111,114,117,120,123,126,129],{"title":110,"_path":107},"🎸 FingerStyle！",{"title":112,"_path":113},"🌬️ 等待的风","/music/wind",{"title":115,"_path":116},"💕 约定的海洋","/music/ocean",{"title":118,"_path":119},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":121,"_path":122},"🌏 残酷天使的行动纲领","/music/eva",{"title":124,"_path":125},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":127,"_path":128},"🍷 Wu Wei","/music/wu-wei",{"title":130,"_path":131},"🌅 无题","/music/untitled",{"title":133,"_path":134,"children":135},"画点什么 / Paint","/paint",[136],{"title":137,"_path":134},"🚧 正在施工",{"title":139,"_path":140,"children":141},"读书笔记 / Notes","/books",[142],{"title":143,"_path":140},"📕 读书笔记",{"title":145,"_path":146,"children":147},"知识地图 / Maps","/maps",[148],{"title":149,"_path":146},"🏁 知识地图",{"title":151,"_path":152,"children":153},"零散的笔记 / Gists","/gists",[154,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384],{"title":155,"_path":152},"🧊 Gists",{"title":157,"_path":158},"网站的可访问性","/gists/accessibility",{"title":160,"_path":161},"Bit","/gists/bit",{"title":163,"_path":164},"图片模糊","/gists/blur",{"title":166,"_path":167},"渲染相关笔记","/gists/c4d",{"title":169,"_path":170},"CDN 问题记录","/gists/cdn",{"title":172,"_path":173},"消毒剂","/gists/cleaner",{"title":175,"_path":176},"Windows Command","/gists/cmd",{"title":178,"_path":179},"Command","/gists/command",{"title":181,"_path":182},"复杂科学","/gists/complexity-science",{"title":184,"_path":185},"GitHub Copilot","/gists/copilot",{"title":187,"_path":188},"宇宙","/gists/cosmos",{"title":190,"_path":191},"C++","/gists/cpp",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"Developer Experience","/gists/developer-experience",{"title":199,"_path":200},"Device Metrics","/gists/device-metrix",{"title":202,"_path":203},"数字化转型","/gists/digital-transformation",{"title":205,"_path":206},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":208,"_path":209},"正则表达式","/gists/eegex",{"title":211,"_path":212},"Emoji","/gists/emoji",{"title":214,"_path":215},"工程","/gists/engineering",{"title":217,"_path":218},"熵","/gists/entropy",{"title":220,"_path":221},"Environment","/gists/environment",{"title":223,"_path":224},"Erlang","/gists/erlang",{"title":226,"_path":227},"逃离塔克夫","/gists/escape-from-tarkov",{"title":229,"_path":230},"ESNext (ES6-ES11)","/gists/esnext",{"title":232,"_path":233},"Eval！","/gists/eval",{"title":235,"_path":236},"Flutter","/gists/flutter",{"title":238,"_path":239},"字体","/gists/font",{"title":241,"_path":242},"JS 函数式编程","/gists/functional",{"title":244,"_path":245},"游戏化","/gists/gamification",{"title":247,"_path":248},"Google C++ Standard","/gists/google-cpp-standard",{"title":250,"_path":251},"双向链接完全体","/gists/graph",{"title":253,"_path":254},"Hardwares","/gists/hardwares",{"title":256,"_path":257},"哈希冲突","/gists/hash-collision",{"title":259,"_path":260},"信息设计","/gists/information-design",{"title":262,"_path":263},"InstantPage","/gists/instant.page",{"title":265,"_path":266},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":268,"_path":269},"KVStore","/gists/key-value-db",{"title":271,"_path":272},"Kubernetes","/gists/kubernetes",{"title":274,"_path":275},"Makefile","/gists/makefile",{"title":277,"_path":278},"Markdown Inline Style","/gists/markdown-nice",{"title":280,"_path":281},"小程序","/gists/miniapp",{"title":283,"_path":284},"减小页面快照体积","/gists/minify-html",{"title":286,"_path":287},"mklink","/gists/mklink",{"title":289,"_path":290},"Mock","/gists/mock",{"title":292,"_path":293},"多人协作系统","/gists/multiplayer",{"title":295,"_path":296},"多端应用","/gists/multy-end-app",{"title":298,"_path":299},"神经科学","/gists/neuroscience",{"title":301,"_path":302},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":304,"_path":305},"PInvoke","/gists/pinvoke",{"title":307,"_path":308},"像素","/gists/pixel",{"title":310,"_path":311},"PowerShell","/gists/powershell",{"title":313,"_path":314},"量子","/gists/quantum",{"title":316,"_path":317},"保持好奇心","/gists/questions",{"title":319,"_path":320},"React Native","/gists/react-native",{"title":322,"_path":323},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":325,"_path":326},"SEO","/gists/seo",{"title":328,"_path":329},"Shader","/gists/shader",{"title":331,"_path":332},"Shape Up","/gists/shape-up",{"title":334,"_path":335},"睡觉","/gists/sleep",{"title":337,"_path":338},"记录奇怪的问题","/gists/solved",{"title":340,"_path":341},"States","/gists/states",{"title":343,"_path":344},"Storage","/gists/storage",{"title":346,"_path":347},"音视频流处理","/gists/stream-cli",{"title":349,"_path":350},"Symbol","/gists/symbol",{"title":352,"_path":353},"系统论","/gists/systems-theory",{"title":355,"_path":356},"Taro","/gists/taro",{"title":358,"_path":359},"任务切片","/gists/task-slice",{"title":361,"_path":362},"技术偏好","/gists/tech-dudge",{"title":364,"_path":365},"Untitled","/gists/untitled",{"title":367,"_path":368},"可变字体","/gists/variable-font",{"title":370,"_path":371},"视觉错觉","/gists/visual-illusion",{"title":373,"_path":374},"SS(SSR)","/gists/vpn",{"title":376,"_path":377},"VS Code 插件开发","/gists/vscode-plugin",{"title":379,"_path":380},"Web Components","/gists/web-components",{"title":382,"_path":383},"Windows","/gists/windows",{"title":385,"_path":386},"查缺补漏","/gists/wrong",{"title":388,"_path":389,"children":390},"我 / About","/hire",[391],{"title":392,"_path":389},"📬 技术简历",{"_path":394,"_dir":395,"_draft":396,"_partial":397,"_locale":398,"title":399,"description":398,"body":400,"_type":1521,"_id":1522,"_source":1523,"_file":1524,"_stem":1525,"_extension":1526},"/_books/ecma-262","_books",false,true,"","ECMAScript Standard",{"type":401,"children":402,"toc":1505},"root",[403,411,417,486,492,498,510,612,622,737,742,747,752,761,781,786,814,819,824,829,834,839,844,857,861,866,902,907,912,930,935,940,945,950,955,1436,1499],{"type":404,"tag":405,"props":406,"children":408},"element","h2",{"id":407},"资料",[409],{"type":410,"value":407},"text",{"type":404,"tag":412,"props":413,"children":414},"p",{},[415],{"type":410,"value":416},"一些极其有用的前置参考资料，有助于甄别与理解规范里各种概念，不至于被绕晕。",{"type":404,"tag":418,"props":419,"children":420},"ul",{},[421,440,455,473],{"type":404,"tag":422,"props":423,"children":424},"li",{},[425,438],{"type":404,"tag":426,"props":427,"children":431},"a",{"href":428,"rel":429},"https://timothygu.me/es-howto/",[430],"nofollow",[432],{"type":404,"tag":433,"props":434,"children":435},"i",{},[436],{"type":410,"value":437},"How to Read the ECMAScript Specification",{"type":410,"value":439},"，这个资料简要介绍了一些阅读规范时需要知悉且有助于你理解规范的前置概念并予例说明，比如说抽象操作、内部槽以及内部方法、完成记录、变异对象等。",{"type":404,"tag":422,"props":441,"children":442},{},[443,453],{"type":404,"tag":426,"props":444,"children":447},{"href":445,"rel":446},"https://v8.dev/blog/tags/understanding-ecmascript",[430],[448],{"type":404,"tag":433,"props":449,"children":450},{},[451],{"type":410,"value":452},"Understanding ECMAScript",{"type":410,"value":454},"，V8 团队写的 ECMAScript 阅读指南文章系列，一共四篇，很有参考价值。",{"type":404,"tag":422,"props":456,"children":457},{},[458,465,467,471],{"type":404,"tag":426,"props":459,"children":462},{"href":460,"rel":461},"https://juejin.cn/post/6944587399418609701",[430],[463],{"type":410,"value":464},"《ECMAScript 阅读指南》",{"type":410,"value":466},"，",{"type":404,"tag":433,"props":468,"children":469},{},[470],{"type":410,"value":452},{"type":410,"value":472}," 的翻译版本。",{"type":404,"tag":422,"props":474,"children":475},{},[476],{"type":404,"tag":426,"props":477,"children":480},{"href":478,"rel":479},"https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript",[430],[481],{"type":404,"tag":433,"props":482,"children":483},{},[484],{"type":410,"value":485},"What is the difference between JavaScript and ECMAScript?",{"type":404,"tag":487,"props":488,"children":490},"h3",{"id":489},"快速入门",[491],{"type":410,"value":489},{"type":404,"tag":493,"props":494,"children":496},"h4",{"id":495},"问号和感叹号简写标记",[497],{"type":410,"value":495},{"type":404,"tag":412,"props":499,"children":500},{},[501,508],{"type":404,"tag":502,"props":503,"children":505},"code",{"className":504},[],[506],{"type":410,"value":507},"Let val be ! Foo()",{"type":410,"value":509}," 等同于：",{"type":404,"tag":511,"props":512,"children":516},"pre",{"className":513,"code":514,"language":515,"meta":398,"style":398},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","1. Let val be Foo().\n2. Assert: val is not an abrupt completion.\n3. Set val to val.[[Value]].\n","js",[517],{"type":404,"tag":502,"props":518,"children":519},{"__ignoreMap":398},[520,555,584],{"type":404,"tag":521,"props":522,"children":525},"span",{"class":523,"line":524},"line",1,[526,532,538,544,549],{"type":404,"tag":521,"props":527,"children":529},{"style":528},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[530],{"type":410,"value":531},"1.",{"type":404,"tag":521,"props":533,"children":535},{"style":534},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[536],{"type":410,"value":537}," Let val be ",{"type":404,"tag":521,"props":539,"children":541},{"style":540},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[542],{"type":410,"value":543},"Foo",{"type":404,"tag":521,"props":545,"children":546},{"style":534},[547],{"type":410,"value":548},"()",{"type":404,"tag":521,"props":550,"children":552},{"style":551},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[553],{"type":410,"value":554},".\n",{"type":404,"tag":521,"props":556,"children":558},{"class":523,"line":557},2,[559,564,570,575,580],{"type":404,"tag":521,"props":560,"children":561},{"style":528},[562],{"type":410,"value":563},"2.",{"type":404,"tag":521,"props":565,"children":567},{"style":566},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[568],{"type":410,"value":569}," Assert",{"type":404,"tag":521,"props":571,"children":572},{"style":551},[573],{"type":410,"value":574},":",{"type":404,"tag":521,"props":576,"children":577},{"style":534},[578],{"type":410,"value":579}," val is not an abrupt completion",{"type":404,"tag":521,"props":581,"children":582},{"style":551},[583],{"type":410,"value":554},{"type":404,"tag":521,"props":585,"children":587},{"class":523,"line":586},3,[588,593,598,603,608],{"type":404,"tag":521,"props":589,"children":590},{"style":528},[591],{"type":410,"value":592},"3.",{"type":404,"tag":521,"props":594,"children":595},{"style":534},[596],{"type":410,"value":597}," Set val to val",{"type":404,"tag":521,"props":599,"children":600},{"style":551},[601],{"type":410,"value":602},".",{"type":404,"tag":521,"props":604,"children":605},{"style":534},[606],{"type":410,"value":607},"[[Value]]",{"type":404,"tag":521,"props":609,"children":610},{"style":551},[611],{"type":410,"value":554},{"type":404,"tag":412,"props":613,"children":614},{},[615,621],{"type":404,"tag":502,"props":616,"children":618},{"className":617},[],[619],{"type":410,"value":620},"Return ? Foo()",{"type":410,"value":509},{"type":404,"tag":511,"props":623,"children":625},{"className":513,"code":624,"language":515,"meta":398,"style":398},"1. Let temp be Foo().\n2. If temp is an abrupt completion, return temp.\n3. Set temp to temp.[[Value]].\n4. Return NormalCompletion(temp).\n",[626],{"type":404,"tag":502,"props":627,"children":628},{"__ignoreMap":398},[629,653,685,709],{"type":404,"tag":521,"props":630,"children":631},{"class":523,"line":524},[632,636,641,645,649],{"type":404,"tag":521,"props":633,"children":634},{"style":528},[635],{"type":410,"value":531},{"type":404,"tag":521,"props":637,"children":638},{"style":534},[639],{"type":410,"value":640}," Let temp be ",{"type":404,"tag":521,"props":642,"children":643},{"style":540},[644],{"type":410,"value":543},{"type":404,"tag":521,"props":646,"children":647},{"style":534},[648],{"type":410,"value":548},{"type":404,"tag":521,"props":650,"children":651},{"style":551},[652],{"type":410,"value":554},{"type":404,"tag":521,"props":654,"children":655},{"class":523,"line":557},[656,660,665,670,676,681],{"type":404,"tag":521,"props":657,"children":658},{"style":528},[659],{"type":410,"value":563},{"type":404,"tag":521,"props":661,"children":662},{"style":534},[663],{"type":410,"value":664}," If temp is an abrupt completion",{"type":404,"tag":521,"props":666,"children":667},{"style":551},[668],{"type":410,"value":669},",",{"type":404,"tag":521,"props":671,"children":673},{"style":672},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[674],{"type":410,"value":675}," return",{"type":404,"tag":521,"props":677,"children":678},{"style":534},[679],{"type":410,"value":680}," temp",{"type":404,"tag":521,"props":682,"children":683},{"style":551},[684],{"type":410,"value":554},{"type":404,"tag":521,"props":686,"children":687},{"class":523,"line":586},[688,692,697,701,705],{"type":404,"tag":521,"props":689,"children":690},{"style":528},[691],{"type":410,"value":592},{"type":404,"tag":521,"props":693,"children":694},{"style":534},[695],{"type":410,"value":696}," Set temp to temp",{"type":404,"tag":521,"props":698,"children":699},{"style":551},[700],{"type":410,"value":602},{"type":404,"tag":521,"props":702,"children":703},{"style":534},[704],{"type":410,"value":607},{"type":404,"tag":521,"props":706,"children":707},{"style":551},[708],{"type":410,"value":554},{"type":404,"tag":521,"props":710,"children":712},{"class":523,"line":711},4,[713,718,723,728,733],{"type":404,"tag":521,"props":714,"children":715},{"style":528},[716],{"type":410,"value":717},"4.",{"type":404,"tag":521,"props":719,"children":720},{"style":534},[721],{"type":410,"value":722}," Return ",{"type":404,"tag":521,"props":724,"children":725},{"style":540},[726],{"type":410,"value":727},"NormalCompletion",{"type":404,"tag":521,"props":729,"children":730},{"style":534},[731],{"type":410,"value":732},"(temp)",{"type":404,"tag":521,"props":734,"children":735},{"style":551},[736],{"type":410,"value":554},{"type":404,"tag":405,"props":738,"children":740},{"id":739},"规范综述",[741],{"type":410,"value":739},{"type":404,"tag":487,"props":743,"children":745},{"id":744},"语言组成",[746],{"type":410,"value":744},{"type":404,"tag":412,"props":748,"children":749},{},[750],{"type":410,"value":751},"常常能听到：“对象的本质就是实现了规范所要求的内部插槽的结构”，其实该观点源于这张图：",{"type":404,"tag":412,"props":753,"children":754},{},[755],{"type":404,"tag":756,"props":757,"children":760},"img",{"alt":758,"src":759},"对象的本质","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/timothygu.me_es-howto_object-uml.svg.png",[],{"type":404,"tag":412,"props":762,"children":763},{},[764,766,779],{"type":410,"value":765},"ECMAScript 是一种基于对象的基本语言，其基础设置主要依赖宿主提供的对象。基于此概念，可以把 ECMAScript 程序看作一组相互通讯的对象集合。按照规范，对象的精确描述其实应该是：“一个具有零或多个被属性描述符决定的属性的集合",{"type":404,"tag":767,"props":768,"children":769},"sup",{},[770],{"type":404,"tag":426,"props":771,"children":776},{"href":772,"ariaDescribedBy":773,"dataFootnoteRef":398,"id":775},"#user-content-fn-object-definition",[774],"footnote-label","user-content-fnref-object-definition",[777],{"type":410,"value":778},"1",{"type":410,"value":780},"”。对象的属性能持有其它值，包括规范定义的原始值：Undefined、Null、Boolean、Number、BigInt、String、Symbol 和 Object。这里说的 Object 还包括可执行对象，callable object，也就是函数。而由对象内属性持有的函数，叫做方法。",{"type":404,"tag":412,"props":782,"children":783},{},[784],{"type":410,"value":785},"按照上图，规范定义了包括全局对象、Object、Function 等对象以及操作这些对象所需要用到的操作符。除此之外，还定义了用于组织程序的模块，以及行文所需要用到的静态语法。组织方式如下：",{"type":404,"tag":418,"props":787,"children":788},{},[789,794,799,804,809],{"type":404,"tag":422,"props":790,"children":791},{},[792],{"type":410,"value":793},"章节 5 定义了规范所使用的符号约定。",{"type":404,"tag":422,"props":795,"children":796},{},[797],{"type":410,"value":798},"章节 6 至章节 10 定义了语言的运行环境。",{"type":404,"tag":422,"props":800,"children":801},{},[802],{"type":410,"value":803},"章节 11 至章节 17 定义了包括语法、语义在内的所有语言功能。",{"type":404,"tag":422,"props":805,"children":806},{},[807],{"type":410,"value":808},"章节 18 至章节 28 定义了语言依赖的标准库。",{"type":404,"tag":422,"props":810,"children":811},{},[812],{"type":410,"value":813},"章节 29 描述了支持 SharedArrayBuffer 以及 Atomics 对象方法访问的内存一致性模型。",{"type":404,"tag":487,"props":815,"children":817},{"id":816},"语言风格",[818],{"type":410,"value":816},{"type":404,"tag":412,"props":820,"children":821},{},[822],{"type":410,"value":823},"ECMAScript 基于对象，这和 C++、Java 不同的本质区别在于创建对象的方式以及属性共享思路的不同：ECMAScript 支持多种方式创建对象：构造器、字面量或 Object.create，而属性共享则是使用原型。使用原型意味着尽管 ECMAScript 支持类继承，但是是通过原型继承隐式实现的：每一个构造器函数都有一个原型属性，属性名为 prototype。以该构造器创建的实例会携带一个隐式的指向其构造器的原型的引用（称为实例的原型）。而构造器函数也是一个对象实例，所以也会有对应的原型。ECMAScript 依赖这条由对象原型组成的链条式的关系，即原型链，来共享属性。而在经典面向对象语言中，总的来说，属性（也就是状态）是直接挂载在实例上的，只有方法挂载在类上，这也就意味着类继承只约束了继承结构和对象的行为，没有约束对象的状态。此外，由于 ECMAScript 支持动态重写对象，这使得你可以在运行时去创建一个动态的继承结构。",{"type":404,"tag":412,"props":825,"children":826},{},[827],{"type":410,"value":828},"ECMAScript 被故意地设计成类 Java 的语法，这是历史原因。另一方面，其语法被考虑设计成尽可能简单的。规范对语言的具体描述是一种“通用编程语言”，并不是指代语言性质，如“脚本语言”，或是具体实现，如“JavaScript”。有不少其它语言也完整实现了规范，如微软早期的 JScript 和用于 Flash 的 ActionScript。从这个角度来看，JavaScript 应该看作 ECMAScript 的一种方言。",{"type":404,"tag":412,"props":830,"children":831},{},[832],{"type":410,"value":833},"如果从历史的角度来看，ECAMAScript 和 JavaScript 的关系会发生变化。JavaScript 是网景公司在宣发时使用的名称，这个语言一开始叫做 Mocha，而后又叫做 LiveScript。微软在 IE 中也做了一种实现，但由于版权问题卡喉咙，不能叫做 JavaScript，所以改为了 JScript。在网景公司没落前，他们起草了 ECMAScript 标准，用来规划 JavaScript 的发展路线。尽管网景没了，但规范则一直在更新，比如被人们熟知的 ES6，指代 ECMAScript 2015 6th Edition。ECMAScript 和 JavaScript 也就不仅仅应当被理解成标准和实现，它们还属于共生共荣的关系。",{"type":404,"tag":487,"props":835,"children":837},{"id":836},"宿主系统",[838],{"type":410,"value":836},{"type":404,"tag":412,"props":840,"children":841},{},[842],{"type":410,"value":843},"脚本语言是设计给包括非职业开发人员使用的语言，没有必要拥有主程序入口。所以脚本语言通常寄生于特定系统，依赖宿主提供的设施以完善语言功能，使用终端进行操作，以便人员操控程序或自动化流程。规范原本想设计一款 Web 脚本语言，用于客户端以响应用户在界面上的操作，使 Web 页面能够执行逻辑。但随着越来越广泛的使用，功能逐渐完善，ECMAScript 演变成为了通用程序语言。",{"type":404,"tag":412,"props":845,"children":846},{},[847,849,855],{"type":410,"value":848},"每一个支持 ECMAScript 的浏览器或者服务器端都拥有一个对应的宿主系统用于执行脚本。宿主系统的实现需要按照规范，不过规范对某些特征只描述了特定行为而没有给出具体算法。这些具体算法通常会由其它规范来实现，比如说 HTML 规范中定义的宏任务和微任务或 Math.exp 这种特定算法。总而言之，只要宿主系统和规范是一致的（见",{"type":404,"tag":426,"props":850,"children":852},{"href":851},"#%E4%B8%80%E8%87%B4%E6%80%A7",[853],{"type":410,"value":854},"一致性",{"type":410,"value":856},"）并实现了特定的行为如 Host Hooks、Host-defined Fileds、Host-defined Objects、Running Jobs、Internal Methods of Exotic Objects 和 Built-in Objects and Methods，就算是一个完整的 ECMAScript 宿主系统，就能正确地和规范进行交互。",{"type":404,"tag":487,"props":858,"children":859},{"id":854},[860],{"type":410,"value":854},{"type":404,"tag":412,"props":862,"children":863},{},[864],{"type":410,"value":865},"一致性是指，实现了 ECMAScript 规范（以下简称规范）的语言必须满足以下标准：",{"type":404,"tag":418,"props":867,"children":868},{},[869,887,892,897],{"type":404,"tag":422,"props":870,"children":871},{},[872,874,885],{"type":410,"value":873},"规范描述：类型系统、值、对象、属性、函数、语法、语义、严格模式",{"type":404,"tag":767,"props":875,"children":876},{},[877],{"type":404,"tag":426,"props":878,"children":882},{"href":879,"ariaDescribedBy":880,"dataFootnoteRef":398,"id":881},"#user-content-fn-strict-mode",[774],"user-content-fnref-strict-mode",[883],{"type":410,"value":884},"2",{"type":410,"value":886},"。",{"type":404,"tag":422,"props":888,"children":889},{},[890],{"type":410,"value":891},"编码标准：最新的 Unicode 标准以及 USC 标准。",{"type":404,"tag":422,"props":893,"children":894},{},[895],{"type":410,"value":896},"ECMA-402：ECMAScript 的国际化接口标准，即 Intl 相关规范。",{"type":404,"tag":422,"props":898,"children":899},{},[900],{"type":410,"value":901},"可选规范：可选规范要么全部不实现，要么全部都实现。目前在文档中只找到相关 WeakRef.prototype.constructor 初始值必须为 %WeakRef% 的可选规范。",{"type":404,"tag":412,"props":903,"children":904},{},[905],{"type":410,"value":906},"规范允许某些实现了规范的具体语言可以提供超出规范描述的内容，包括类型、值、对象...语法或是保留字的实现。",{"type":404,"tag":412,"props":908,"children":909},{},[910],{"type":410,"value":911},"另外，以下规范和 ECMAScript 相关，但不要求 ECMAScript 的宿主系统实现：",{"type":404,"tag":418,"props":913,"children":914},{},[915,920,925],{"type":404,"tag":422,"props":916,"children":917},{},[918],{"type":410,"value":919},"ISO/IEC 10646：UCS 规范。",{"type":404,"tag":422,"props":921,"children":922},{},[923],{"type":410,"value":924},"ECMA-402：国际化接口规范。",{"type":404,"tag":422,"props":926,"children":927},{},[928],{"type":410,"value":929},"ECMA-404：JSON 规范。",{"type":404,"tag":405,"props":931,"children":933},{"id":932},"规范类型和语言类型",[934],{"type":410,"value":932},{"type":404,"tag":412,"props":936,"children":937},{},[938],{"type":410,"value":939},"为什么要区分语言类型和规范类型呢？顾名思义，语言类型是 JavaScript 所使用的一种类型系统，包含比如 Null、Undefined、Object 等类型，但由于 JavaScript 需要由其它引擎实现，也就是说规范所描述的算法逻辑中携带的基本类型不是 JavaScript 语言中的基本类型，而更可能是诸如 C++ 中的数据类型。",{"type":404,"tag":405,"props":941,"children":943},{"id":942},"其它",[944],{"type":410,"value":942},{"type":404,"tag":487,"props":946,"children":948},{"id":947},"词汇表",[949],{"type":410,"value":947},{"type":404,"tag":412,"props":951,"children":952},{},[953],{"type":410,"value":954},"术语表及本文中相关中英翻译的集合。",{"type":404,"tag":956,"props":957,"children":958},"table",{},[959,983],{"type":404,"tag":960,"props":961,"children":962},"thead",{},[963],{"type":404,"tag":964,"props":965,"children":966},"tr",{},[967,973,978],{"type":404,"tag":968,"props":969,"children":970},"th",{},[971],{"type":410,"value":972},"Source",{"type":404,"tag":968,"props":974,"children":975},{},[976],{"type":410,"value":977},"Chinese",{"type":404,"tag":968,"props":979,"children":980},{},[981],{"type":410,"value":982},"Meaning",{"type":404,"tag":984,"props":985,"children":986},"tbody",{},[987,1006,1024,1042,1060,1077,1098,1116,1141,1159,1177,1195,1213,1231,1248,1272,1289,1307,1325,1343,1361,1378,1400,1418],{"type":404,"tag":964,"props":988,"children":989},{},[990,996,1001],{"type":404,"tag":991,"props":992,"children":993},"td",{},[994],{"type":410,"value":995},"attribute",{"type":404,"tag":991,"props":997,"children":998},{},[999],{"type":410,"value":1000},"属性",{"type":404,"tag":991,"props":1002,"children":1003},{},[1004],{"type":410,"value":1005},"用来定义属性特性的内部值，比方说 [[Writable]]",{"type":404,"tag":964,"props":1007,"children":1008},{},[1009,1014,1019],{"type":404,"tag":991,"props":1010,"children":1011},{},[1012],{"type":410,"value":1013},"arbitrary-precision",{"type":404,"tag":991,"props":1015,"children":1016},{},[1017],{"type":410,"value":1018},"任意精度的",{"type":404,"tag":991,"props":1020,"children":1021},{},[1022],{"type":410,"value":1023},"略",{"type":404,"tag":964,"props":1025,"children":1026},{},[1027,1032,1037],{"type":404,"tag":991,"props":1028,"children":1029},{},[1030],{"type":410,"value":1031},"built-in function",{"type":404,"tag":991,"props":1033,"children":1034},{},[1035],{"type":410,"value":1036},"内置对象",{"type":404,"tag":991,"props":1038,"children":1039},{},[1040],{"type":410,"value":1041},"作为函数的内置对象",{"type":404,"tag":964,"props":1043,"children":1044},{},[1045,1050,1055],{"type":404,"tag":991,"props":1046,"children":1047},{},[1048],{"type":410,"value":1049},"built-in method",{"type":404,"tag":991,"props":1051,"children":1052},{},[1053],{"type":410,"value":1054},"内置方法",{"type":404,"tag":991,"props":1056,"children":1057},{},[1058],{"type":410,"value":1059},"作为方法的内置函数",{"type":404,"tag":964,"props":1061,"children":1062},{},[1063,1068,1072],{"type":404,"tag":991,"props":1064,"children":1065},{},[1066],{"type":410,"value":1067},"built-in object",{"type":404,"tag":991,"props":1069,"children":1070},{},[1071],{"type":410,"value":1036},{"type":404,"tag":991,"props":1073,"children":1074},{},[1075],{"type":410,"value":1076},"由规范定义（定义了具体实现）的对象",{"type":404,"tag":964,"props":1078,"children":1079},{},[1080,1085,1089],{"type":404,"tag":991,"props":1081,"children":1082},{},[1083],{"type":410,"value":1084},"conformance",{"type":404,"tag":991,"props":1086,"children":1087},{},[1088],{"type":410,"value":854},{"type":404,"tag":991,"props":1090,"children":1091},{},[1092,1094],{"type":410,"value":1093},"见",{"type":404,"tag":426,"props":1095,"children":1096},{"href":851},[1097],{"type":410,"value":854},{"type":404,"tag":964,"props":1099,"children":1100},{},[1101,1106,1111],{"type":404,"tag":991,"props":1102,"children":1103},{},[1104],{"type":410,"value":1105},"constructor",{"type":404,"tag":991,"props":1107,"children":1108},{},[1109],{"type":410,"value":1110},"构造函数",{"type":404,"tag":991,"props":1112,"children":1113},{},[1114],{"type":410,"value":1115},"用于创建和初始化对象用的函数",{"type":404,"tag":964,"props":1117,"children":1118},{},[1119,1124,1129],{"type":404,"tag":991,"props":1120,"children":1121},{},[1122],{"type":410,"value":1123},"general-purpose programming language",{"type":404,"tag":991,"props":1125,"children":1126},{},[1127],{"type":410,"value":1128},"通用编程语言",{"type":404,"tag":991,"props":1130,"children":1131},{},[1132,1134],{"type":410,"value":1133},"被设计为可在各个应用领域使用的语言，见 ",{"type":404,"tag":426,"props":1135,"children":1138},{"href":1136,"rel":1137},"https://en.wikipedia.org/wiki/Special:Search/General-purpose_programming_language",[430],[1139],{"type":410,"value":1140},"General-purpose programming language",{"type":404,"tag":964,"props":1142,"children":1143},{},[1144,1149,1154],{"type":404,"tag":991,"props":1145,"children":1146},{},[1147],{"type":410,"value":1148},"host-defined",{"type":404,"tag":991,"props":1150,"children":1151},{},[1152],{"type":410,"value":1153},"宿主实现",{"type":404,"tag":991,"props":1155,"children":1156},{},[1157],{"type":410,"value":1158},"同 implementation-defined",{"type":404,"tag":964,"props":1160,"children":1161},{},[1162,1167,1172],{"type":404,"tag":991,"props":1163,"children":1164},{},[1165],{"type":410,"value":1166},"implementation-approximated",{"type":404,"tag":991,"props":1168,"children":1169},{},[1170],{"type":410,"value":1171},"近似实现",{"type":404,"tag":991,"props":1173,"children":1174},{},[1175],{"type":410,"value":1176},"规范依赖某些外部实现，而在规范内假设这种实现是“完美的”",{"type":404,"tag":964,"props":1178,"children":1179},{},[1180,1185,1190],{"type":404,"tag":991,"props":1181,"children":1182},{},[1183],{"type":410,"value":1184},"implementation-defined",{"type":404,"tag":991,"props":1186,"children":1187},{},[1188],{"type":410,"value":1189},"定义实现",{"type":404,"tag":991,"props":1191,"children":1192},{},[1193],{"type":410,"value":1194},"规范依赖某些外部实现，外部实现的行为需要与规范描述的一致",{"type":404,"tag":964,"props":1196,"children":1197},{},[1198,1203,1208],{"type":404,"tag":991,"props":1199,"children":1200},{},[1201],{"type":410,"value":1202},"inherited property",{"type":404,"tag":991,"props":1204,"children":1205},{},[1206],{"type":410,"value":1207},"继承属性",{"type":404,"tag":991,"props":1209,"children":1210},{},[1211],{"type":410,"value":1212},"对象内由原型继承的来的属性",{"type":404,"tag":964,"props":1214,"children":1215},{},[1216,1221,1226],{"type":404,"tag":991,"props":1217,"children":1218},{},[1219],{"type":410,"value":1220},"method",{"type":404,"tag":991,"props":1222,"children":1223},{},[1224],{"type":410,"value":1225},"方法",{"type":404,"tag":991,"props":1227,"children":1228},{},[1229],{"type":410,"value":1230},"作为属性值的函数",{"type":404,"tag":964,"props":1232,"children":1233},{},[1234,1239,1244],{"type":404,"tag":991,"props":1235,"children":1236},{},[1237],{"type":410,"value":1238},"module",{"type":404,"tag":991,"props":1240,"children":1241},{},[1242],{"type":410,"value":1243},"模块",{"type":404,"tag":991,"props":1245,"children":1246},{},[1247],{"type":410,"value":1023},{"type":404,"tag":964,"props":1249,"children":1250},{},[1251,1256,1260],{"type":404,"tag":991,"props":1252,"children":1253},{},[1254],{"type":410,"value":1255},"NaN",{"type":404,"tag":991,"props":1257,"children":1258},{},[1259],{"type":410,"value":1255},{"type":404,"tag":991,"props":1261,"children":1262},{},[1263,1270],{"type":404,"tag":426,"props":1264,"children":1267},{"href":1265,"rel":1266},"https://ieeexplore.ieee.org/document/8766229",[430],[1268],{"type":410,"value":1269},"IEEE 754-2019",{"type":410,"value":1271}," 标准定义的“不是一个数字”的数值",{"type":404,"tag":964,"props":1273,"children":1274},{},[1275,1280,1285],{"type":404,"tag":991,"props":1276,"children":1277},{},[1278],{"type":410,"value":1279},"normative optional",{"type":404,"tag":991,"props":1281,"children":1282},{},[1283],{"type":410,"value":1284},"可选规范",{"type":404,"tag":991,"props":1286,"children":1287},{},[1288],{"type":410,"value":1023},{"type":404,"tag":964,"props":1290,"children":1291},{},[1292,1297,1302],{"type":404,"tag":991,"props":1293,"children":1294},{},[1295],{"type":410,"value":1296},"null value",{"type":404,"tag":991,"props":1298,"children":1299},{},[1300],{"type":410,"value":1301},"空值",{"type":404,"tag":991,"props":1303,"children":1304},{},[1305],{"type":410,"value":1306},"表示对象的值的某种刻意缺失",{"type":404,"tag":964,"props":1308,"children":1309},{},[1310,1315,1320],{"type":404,"tag":991,"props":1311,"children":1312},{},[1313],{"type":410,"value":1314},"ordinary object",{"type":404,"tag":991,"props":1316,"children":1317},{},[1318],{"type":410,"value":1319},"普通对象",{"type":404,"tag":991,"props":1321,"children":1322},{},[1323],{"type":410,"value":1324},"实现了所有基本内部槽的默认功能的对象",{"type":404,"tag":964,"props":1326,"children":1327},{},[1328,1333,1338],{"type":404,"tag":991,"props":1329,"children":1330},{},[1331],{"type":410,"value":1332},"own property",{"type":404,"tag":991,"props":1334,"children":1335},{},[1336],{"type":410,"value":1337},"自有属性",{"type":404,"tag":991,"props":1339,"children":1340},{},[1341],{"type":410,"value":1342},"作为该对象拥有的而不是通过原型继承获得的属性就叫该对象的自有属性",{"type":404,"tag":964,"props":1344,"children":1345},{},[1346,1351,1356],{"type":404,"tag":991,"props":1347,"children":1348},{},[1349],{"type":410,"value":1350},"primitive value",{"type":404,"tag":991,"props":1352,"children":1353},{},[1354],{"type":410,"value":1355},"原始值",{"type":404,"tag":991,"props":1357,"children":1358},{},[1359],{"type":410,"value":1360},"不可再分的数据，Undefined, Null, Boolean, Number, BigInt, Symbol, String 中的一种",{"type":404,"tag":964,"props":1362,"children":1363},{},[1364,1369,1373],{"type":404,"tag":991,"props":1365,"children":1366},{},[1367],{"type":410,"value":1368},"property",{"type":404,"tag":991,"props":1370,"children":1371},{},[1372],{"type":410,"value":1000},{"type":404,"tag":991,"props":1374,"children":1375},{},[1376],{"type":410,"value":1377},"组成对象的基本部分，包含键和对应的值",{"type":404,"tag":964,"props":1379,"children":1380},{},[1381,1386,1391],{"type":404,"tag":991,"props":1382,"children":1383},{},[1384],{"type":410,"value":1385},"prototype",{"type":404,"tag":991,"props":1387,"children":1388},{},[1389],{"type":410,"value":1390},"原型",{"type":404,"tag":991,"props":1392,"children":1393},{},[1394,1395],{"type":410,"value":1093},{"type":404,"tag":426,"props":1396,"children":1398},{"href":1397},"#%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC",[1399],{"type":410,"value":816},{"type":404,"tag":964,"props":1401,"children":1402},{},[1403,1408,1413],{"type":404,"tag":991,"props":1404,"children":1405},{},[1406],{"type":410,"value":1407},"standard object",{"type":404,"tag":991,"props":1409,"children":1410},{},[1411],{"type":410,"value":1412},"标准对象",{"type":404,"tag":991,"props":1414,"children":1415},{},[1416],{"type":410,"value":1417},"行为（语义）和规范一致的对象",{"type":404,"tag":964,"props":1419,"children":1420},{},[1421,1426,1431],{"type":404,"tag":991,"props":1422,"children":1423},{},[1424],{"type":410,"value":1425},"undefined value",{"type":404,"tag":991,"props":1427,"children":1428},{},[1429],{"type":410,"value":1430},"未定义值",{"type":404,"tag":991,"props":1432,"children":1433},{},[1434],{"type":410,"value":1435},"表示变量初始化成功但未赋值",{"type":404,"tag":1437,"props":1438,"children":1441},"section",{"className":1439,"dataFootnotes":398},[1440],"footnotes",[1442,1449],{"type":404,"tag":405,"props":1443,"children":1446},{"className":1444,"id":774},[1445],"sr-only",[1447],{"type":410,"value":1448},"Footnotes",{"type":404,"tag":1450,"props":1451,"children":1452},"ol",{},[1453,1477],{"type":404,"tag":422,"props":1454,"children":1456},{"id":1455},"user-content-fn-object-definition",[1457,1459,1466,1468],{"type":410,"value":1458},"定义见 ",{"type":404,"tag":426,"props":1460,"children":1463},{"href":1461,"rel":1462},"https://262.ecma-international.org/12.0/#sec-terms-and-definitions-object",[430],[1464],{"type":410,"value":1465}," Terms and Definitions - object",{"type":410,"value":1467}," ",{"type":404,"tag":426,"props":1469,"children":1474},{"href":1470,"ariaLabel":1471,"className":1472,"dataFootnoteBackref":398},"#user-content-fnref-object-definition","Back to reference 1",[1473],"data-footnote-backref",[1475],{"type":410,"value":1476},"↩",{"type":404,"tag":422,"props":1478,"children":1480},{"id":1479},"user-content-fn-strict-mode",[1481,1483,1490,1492],{"type":410,"value":1482},"必须支持严格模式和非严格模式，并且能在一个符合程序中同时运行严格模式和非严格模式的代码，见 ",{"type":404,"tag":426,"props":1484,"children":1487},{"href":1485,"rel":1486},"https://262.ecma-international.org/12.0/#sec-strict-variant-of-ecmascript",[430],[1488],{"type":410,"value":1489},"The Strict Variant of ECMAScript",{"type":410,"value":1491},"。 ",{"type":404,"tag":426,"props":1493,"children":1497},{"href":1494,"ariaLabel":1495,"className":1496,"dataFootnoteBackref":398},"#user-content-fnref-strict-mode","Back to reference 2",[1473],[1498],{"type":410,"value":1476},{"type":404,"tag":1500,"props":1501,"children":1502},"style",{},[1503],{"type":410,"value":1504},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":398,"searchDepth":557,"depth":557,"links":1506},[1507,1510,1516,1517,1520],{"id":407,"depth":557,"text":407,"children":1508},[1509],{"id":489,"depth":586,"text":489},{"id":739,"depth":557,"text":739,"children":1511},[1512,1513,1514,1515],{"id":744,"depth":586,"text":744},{"id":816,"depth":586,"text":816},{"id":836,"depth":586,"text":836},{"id":854,"depth":586,"text":854},{"id":932,"depth":557,"text":932},{"id":942,"depth":557,"text":942,"children":1518},[1519],{"id":947,"depth":586,"text":947},{"id":774,"depth":557,"text":1448},"markdown","content:_books:ecma-262.md","content","_books/ecma-262.md","_books/ecma-262","md",[1528,1531],{"_path":1529,"title":1530,"description":398},"/_books/dear-ui","亲爱的界面",{"_path":1532,"title":1533,"description":398},"/_books","图书分类参考",1741604959422]