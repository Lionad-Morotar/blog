[{"data":1,"prerenderedAt":1364},["ShallowReactive",2],{"navigation":3,"/_books/ecma-262":158,"/_books/ecma-262-surround":1357},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":159,"_dir":160,"_draft":161,"_partial":162,"_locale":163,"title":164,"description":163,"body":165,"_type":1351,"_id":1352,"_source":1353,"_file":1354,"_stem":1355,"_extension":1356},"/_books/ecma-262","_books",false,true,"","ECMAScript Standard",{"type":166,"children":167,"toc":1332},"root",[168,176,181,187,192,197,207,212,237,242,247,312,318,324,336,438,448,563,568,573,578,587,607,612,640,645,650,655,660,665,670,683,687,692,728,733,738,756,761,766,771,776,781,1263,1326],{"type":169,"tag":170,"props":171,"children":173},"element","h2",{"id":172},"其他",[174],{"type":175,"value":172},"text",{"type":169,"tag":170,"props":177,"children":179},{"id":178},"执行上下文",[180],{"type":175,"value":178},{"type":169,"tag":182,"props":183,"children":184},"p",{},[185],{"type":175,"value":186},"JS 中有三种不同的代码，全局代码（Global Code）、函数代码（Function Code）和求值代码（Eval Code）。",{"type":169,"tag":182,"props":188,"children":189},{},[190],{"type":175,"value":191},"无论哪一种类型的代码的执行，引擎总是提供了一个执行上下文（Execution Context）用来保存代码执行时相关的信息。",{"type":169,"tag":182,"props":193,"children":194},{},[195],{"type":175,"value":196},"执行上下文由以下几个部分组成：",{"type":169,"tag":198,"props":199,"children":200},"ul",{},[201],{"type":169,"tag":202,"props":203,"children":204},"li",{},[205],{"type":175,"value":206},"变量对象（Variable Object）：用来保存变量声明，比如通过 var a 声明的 a 变量，就会作为变量对象上的一个 a 属性保存下来。",{"type":169,"tag":170,"props":208,"children":210},{"id":209},"阅读更多",[211],{"type":175,"value":209},{"type":169,"tag":198,"props":213,"children":214},{},[215,227],{"type":169,"tag":202,"props":216,"children":217},{},[218],{"type":169,"tag":219,"props":220,"children":224},"a",{"href":221,"rel":222},"https://zhuanlan.zhihu.com/p/27875462",[223],"nofollow",[225],{"type":175,"value":226},"JS 规范中的 IsValidSimpleAssignmentTarget",{"type":169,"tag":202,"props":228,"children":229},{},[230],{"type":169,"tag":219,"props":231,"children":234},{"href":232,"rel":233},"https://stackoverflow.com/questions/15675427/what-is-a-primary-expression",[223],[235],{"type":175,"value":236},"What is a “primary expression”?",{"type":169,"tag":170,"props":238,"children":240},{"id":239},"资料",[241],{"type":175,"value":239},{"type":169,"tag":182,"props":243,"children":244},{},[245],{"type":175,"value":246},"一些极其有用的前置参考资料，有助于甄别与理解规范里各种概念，不至于被绕晕。",{"type":169,"tag":198,"props":248,"children":249},{},[250,266,281,299],{"type":169,"tag":202,"props":251,"children":252},{},[253,264],{"type":169,"tag":219,"props":254,"children":257},{"href":255,"rel":256},"https://timothygu.me/es-howto/",[223],[258],{"type":169,"tag":259,"props":260,"children":261},"i",{},[262],{"type":175,"value":263},"How to Read the ECMAScript Specification",{"type":175,"value":265},"，这个资料简要介绍了一些阅读规范时需要知悉且有助于你理解规范的前置概念并予例说明，比如说抽象操作、内部槽以及内部方法、完成记录、变异对象等。",{"type":169,"tag":202,"props":267,"children":268},{},[269,279],{"type":169,"tag":219,"props":270,"children":273},{"href":271,"rel":272},"https://v8.dev/blog/tags/understanding-ecmascript",[223],[274],{"type":169,"tag":259,"props":275,"children":276},{},[277],{"type":175,"value":278},"Understanding ECMAScript",{"type":175,"value":280},"，V8 团队写的 ECMAScript 阅读指南文章系列，一共四篇，很有参考价值。",{"type":169,"tag":202,"props":282,"children":283},{},[284,291,293,297],{"type":169,"tag":219,"props":285,"children":288},{"href":286,"rel":287},"https://juejin.cn/post/6944587399418609701",[223],[289],{"type":175,"value":290},"《ECMAScript 阅读指南》",{"type":175,"value":292},"，",{"type":169,"tag":259,"props":294,"children":295},{},[296],{"type":175,"value":278},{"type":175,"value":298}," 的翻译版本。",{"type":169,"tag":202,"props":300,"children":301},{},[302],{"type":169,"tag":219,"props":303,"children":306},{"href":304,"rel":305},"https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript",[223],[307],{"type":169,"tag":259,"props":308,"children":309},{},[310],{"type":175,"value":311},"What is the difference between JavaScript and ECMAScript?",{"type":169,"tag":313,"props":314,"children":316},"h3",{"id":315},"快速入门",[317],{"type":175,"value":315},{"type":169,"tag":319,"props":320,"children":322},"h4",{"id":321},"问号和感叹号简写标记",[323],{"type":175,"value":321},{"type":169,"tag":182,"props":325,"children":326},{},[327,334],{"type":169,"tag":328,"props":329,"children":331},"code",{"className":330},[],[332],{"type":175,"value":333},"Let val be ! Foo()",{"type":175,"value":335}," 等同于：",{"type":169,"tag":337,"props":338,"children":342},"pre",{"className":339,"code":340,"language":341,"meta":163,"style":163},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","1. Let val be Foo().\n2. Assert: val is not an abrupt completion.\n3. Set val to val.[[Value]].\n","js",[343],{"type":169,"tag":328,"props":344,"children":345},{"__ignoreMap":163},[346,381,410],{"type":169,"tag":347,"props":348,"children":351},"span",{"class":349,"line":350},"line",1,[352,358,364,370,375],{"type":169,"tag":347,"props":353,"children":355},{"style":354},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[356],{"type":175,"value":357},"1.",{"type":169,"tag":347,"props":359,"children":361},{"style":360},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[362],{"type":175,"value":363}," Let val be ",{"type":169,"tag":347,"props":365,"children":367},{"style":366},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[368],{"type":175,"value":369},"Foo",{"type":169,"tag":347,"props":371,"children":372},{"style":360},[373],{"type":175,"value":374},"()",{"type":169,"tag":347,"props":376,"children":378},{"style":377},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[379],{"type":175,"value":380},".\n",{"type":169,"tag":347,"props":382,"children":384},{"class":349,"line":383},2,[385,390,396,401,406],{"type":169,"tag":347,"props":386,"children":387},{"style":354},[388],{"type":175,"value":389},"2.",{"type":169,"tag":347,"props":391,"children":393},{"style":392},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[394],{"type":175,"value":395}," Assert",{"type":169,"tag":347,"props":397,"children":398},{"style":377},[399],{"type":175,"value":400},":",{"type":169,"tag":347,"props":402,"children":403},{"style":360},[404],{"type":175,"value":405}," val is not an abrupt completion",{"type":169,"tag":347,"props":407,"children":408},{"style":377},[409],{"type":175,"value":380},{"type":169,"tag":347,"props":411,"children":413},{"class":349,"line":412},3,[414,419,424,429,434],{"type":169,"tag":347,"props":415,"children":416},{"style":354},[417],{"type":175,"value":418},"3.",{"type":169,"tag":347,"props":420,"children":421},{"style":360},[422],{"type":175,"value":423}," Set val to val",{"type":169,"tag":347,"props":425,"children":426},{"style":377},[427],{"type":175,"value":428},".",{"type":169,"tag":347,"props":430,"children":431},{"style":360},[432],{"type":175,"value":433},"[[Value]]",{"type":169,"tag":347,"props":435,"children":436},{"style":377},[437],{"type":175,"value":380},{"type":169,"tag":182,"props":439,"children":440},{},[441,447],{"type":169,"tag":328,"props":442,"children":444},{"className":443},[],[445],{"type":175,"value":446},"Return ? Foo()",{"type":175,"value":335},{"type":169,"tag":337,"props":449,"children":451},{"className":339,"code":450,"language":341,"meta":163,"style":163},"1. Let temp be Foo().\n2. If temp is an abrupt completion, return temp.\n3. Set temp to temp.[[Value]].\n4. Return NormalCompletion(temp).\n",[452],{"type":169,"tag":328,"props":453,"children":454},{"__ignoreMap":163},[455,479,511,535],{"type":169,"tag":347,"props":456,"children":457},{"class":349,"line":350},[458,462,467,471,475],{"type":169,"tag":347,"props":459,"children":460},{"style":354},[461],{"type":175,"value":357},{"type":169,"tag":347,"props":463,"children":464},{"style":360},[465],{"type":175,"value":466}," Let temp be ",{"type":169,"tag":347,"props":468,"children":469},{"style":366},[470],{"type":175,"value":369},{"type":169,"tag":347,"props":472,"children":473},{"style":360},[474],{"type":175,"value":374},{"type":169,"tag":347,"props":476,"children":477},{"style":377},[478],{"type":175,"value":380},{"type":169,"tag":347,"props":480,"children":481},{"class":349,"line":383},[482,486,491,496,502,507],{"type":169,"tag":347,"props":483,"children":484},{"style":354},[485],{"type":175,"value":389},{"type":169,"tag":347,"props":487,"children":488},{"style":360},[489],{"type":175,"value":490}," If temp is an abrupt completion",{"type":169,"tag":347,"props":492,"children":493},{"style":377},[494],{"type":175,"value":495},",",{"type":169,"tag":347,"props":497,"children":499},{"style":498},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[500],{"type":175,"value":501}," return",{"type":169,"tag":347,"props":503,"children":504},{"style":360},[505],{"type":175,"value":506}," temp",{"type":169,"tag":347,"props":508,"children":509},{"style":377},[510],{"type":175,"value":380},{"type":169,"tag":347,"props":512,"children":513},{"class":349,"line":412},[514,518,523,527,531],{"type":169,"tag":347,"props":515,"children":516},{"style":354},[517],{"type":175,"value":418},{"type":169,"tag":347,"props":519,"children":520},{"style":360},[521],{"type":175,"value":522}," Set temp to temp",{"type":169,"tag":347,"props":524,"children":525},{"style":377},[526],{"type":175,"value":428},{"type":169,"tag":347,"props":528,"children":529},{"style":360},[530],{"type":175,"value":433},{"type":169,"tag":347,"props":532,"children":533},{"style":377},[534],{"type":175,"value":380},{"type":169,"tag":347,"props":536,"children":538},{"class":349,"line":537},4,[539,544,549,554,559],{"type":169,"tag":347,"props":540,"children":541},{"style":354},[542],{"type":175,"value":543},"4.",{"type":169,"tag":347,"props":545,"children":546},{"style":360},[547],{"type":175,"value":548}," Return ",{"type":169,"tag":347,"props":550,"children":551},{"style":366},[552],{"type":175,"value":553},"NormalCompletion",{"type":169,"tag":347,"props":555,"children":556},{"style":360},[557],{"type":175,"value":558},"(temp)",{"type":169,"tag":347,"props":560,"children":561},{"style":377},[562],{"type":175,"value":380},{"type":169,"tag":170,"props":564,"children":566},{"id":565},"规范综述",[567],{"type":175,"value":565},{"type":169,"tag":313,"props":569,"children":571},{"id":570},"语言组成",[572],{"type":175,"value":570},{"type":169,"tag":182,"props":574,"children":575},{},[576],{"type":175,"value":577},"常常能听到：“对象的本质就是实现了规范所要求的内部插槽的结构”，其实该观点源于这张图：",{"type":169,"tag":182,"props":579,"children":580},{},[581],{"type":169,"tag":582,"props":583,"children":586},"img",{"alt":584,"src":585},"对象的本质","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/timothygu.me_es-howto_object-uml.svg.png",[],{"type":169,"tag":182,"props":588,"children":589},{},[590,592,605],{"type":175,"value":591},"ECMAScript 是一种基于对象的基本语言，其基础设置主要依赖宿主提供的对象。基于此概念，可以把 ECMAScript 程序看作一组相互通讯的对象集合。按照规范，对象的精确描述其实应该是：“一个具有零或多个被属性描述符决定的属性的集合 ",{"type":169,"tag":593,"props":594,"children":595},"sup",{},[596],{"type":169,"tag":219,"props":597,"children":602},{"href":598,"ariaDescribedBy":599,"dataFootnoteRef":163,"id":601},"#user-content-fn-object-definition",[600],"footnote-label","user-content-fnref-object-definition",[603],{"type":175,"value":604},"1",{"type":175,"value":606},"”。对象的属性能持有其它值，包括规范定义的原始值：Undefined、Null、Boolean、Number、BigInt、String、Symbol 和 Object。这里说的 Object 还包括可执行对象，callable object，也就是函数。而由对象内属性持有的函数，叫做方法。",{"type":169,"tag":182,"props":608,"children":609},{},[610],{"type":175,"value":611},"按照上图，规范定义了包括全局对象、Object、Function 等对象以及操作这些对象所需要用到的操作符。除此之外，还定义了用于组织程序的模块，以及行文所需要用到的静态语法。组织方式如下：",{"type":169,"tag":198,"props":613,"children":614},{},[615,620,625,630,635],{"type":169,"tag":202,"props":616,"children":617},{},[618],{"type":175,"value":619},"章节 5 定义了规范所使用的符号约定。",{"type":169,"tag":202,"props":621,"children":622},{},[623],{"type":175,"value":624},"章节 6 至章节 10 定义了语言的运行环境。",{"type":169,"tag":202,"props":626,"children":627},{},[628],{"type":175,"value":629},"章节 11 至章节 17 定义了包括语法、语义在内的所有语言功能。",{"type":169,"tag":202,"props":631,"children":632},{},[633],{"type":175,"value":634},"章节 18 至章节 28 定义了语言依赖的标准库。",{"type":169,"tag":202,"props":636,"children":637},{},[638],{"type":175,"value":639},"章节 29 描述了支持 SharedArrayBuffer 以及 Atomics 对象方法访问的内存一致性模型。",{"type":169,"tag":313,"props":641,"children":643},{"id":642},"语言风格",[644],{"type":175,"value":642},{"type":169,"tag":182,"props":646,"children":647},{},[648],{"type":175,"value":649},"ECMAScript 基于对象，这和 C++、Java 不同的本质区别在于创建对象的方式以及属性共享思路的不同：ECMAScript 支持多种方式创建对象：构造器、字面量或 Object.create，而属性共享则是使用原型。使用原型意味着尽管 ECMAScript 支持类继承，但是是通过原型继承隐式实现的：每一个构造器函数都有一个原型属性，属性名为 prototype。以该构造器创建的实例会携带一个隐式的指向其构造器的原型的引用（称为实例的原型）。而构造器函数也是一个对象实例，所以也会有对应的原型。ECMAScript 依赖这条由对象原型组成的链条式的关系，即原型链，来共享属性。而在经典面向对象语言中，总的来说，属性（也就是状态）是直接挂载在实例上的，只有方法挂载在类上，这也就意味着类继承只约束了继承结构和对象的行为，没有约束对象的状态。此外，由于 ECMAScript 支持动态重写对象，这使得你可以在运行时去创建一个动态的继承结构。",{"type":169,"tag":182,"props":651,"children":652},{},[653],{"type":175,"value":654},"ECMAScript 被故意地设计成类 Java 的语法，这是历史原因。另一方面，其语法被考虑设计成尽可能简单的。规范对语言的具体描述是一种“通用编程语言”，并不是指代语言性质，如“脚本语言”，或是具体实现，如“JavaScript”。有不少其它语言也完整实现了规范，如微软早期的 JScript 和用于 Flash 的 ActionScript。从这个角度来看，JavaScript 应该看作 ECMAScript 的一种方言。",{"type":169,"tag":182,"props":656,"children":657},{},[658],{"type":175,"value":659},"如果从历史的角度来看，ECAMAScript 和 JavaScript 的关系会发生变化。JavaScript 是网景公司在宣发时使用的名称，这个语言一开始叫做 Mocha，而后又叫做 LiveScript。微软在 IE 中也做了一种实现，但由于版权问题卡喉咙，不能叫做 JavaScript，所以改为了 JScript。在网景公司没落前，他们起草了 ECMAScript 标准，用来规划 JavaScript 的发展路线。尽管网景没了，但规范则一直在更新，比如被人们熟知的 ES6，指代 ECMAScript 2015 6th Edition。ECMAScript 和 JavaScript 也就不仅仅应当被理解成标准和实现，它们还属于共生共荣的关系。",{"type":169,"tag":313,"props":661,"children":663},{"id":662},"宿主系统",[664],{"type":175,"value":662},{"type":169,"tag":182,"props":666,"children":667},{},[668],{"type":175,"value":669},"脚本语言是设计给包括非职业开发人员使用的语言，没有必要拥有主程序入口。所以脚本语言通常寄生于特定系统，依赖宿主提供的设施以完善语言功能，使用终端进行操作，以便人员操控程序或自动化流程。规范原本想设计一款 Web 脚本语言，用于客户端以响应用户在界面上的操作，使 Web 页面能够执行逻辑。但随着越来越广泛的使用，功能逐渐完善，ECMAScript 演变成为了通用程序语言。",{"type":169,"tag":182,"props":671,"children":672},{},[673,675,681],{"type":175,"value":674},"每一个支持 ECMAScript 的浏览器或者服务器端都拥有一个对应的宿主系统用于执行脚本。宿主系统的实现需要按照规范，不过规范对某些特征只描述了特定行为而没有给出具体算法。这些具体算法通常会由其它规范来实现，比如说 HTML 规范中定义的宏任务和微任务或 Math.exp 这种特定算法。总而言之，只要宿主系统和规范是一致的（见 ",{"type":169,"tag":219,"props":676,"children":678},{"href":677},"#%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%89",[679],{"type":175,"value":680},"一致性",{"type":175,"value":682},"并实现了特定的行为如 Host Hooks、Host-defined Fileds、Host-defined Objects、Running Jobs、Internal Methods of Exotic Objects 和 Built-in Objects and Methods，就算是一个完整的 ECMAScript 宿主系统，就能正确地和规范进行交互。",{"type":169,"tag":313,"props":684,"children":685},{"id":680},[686],{"type":175,"value":680},{"type":169,"tag":182,"props":688,"children":689},{},[690],{"type":175,"value":691},"一致性是指，实现了 ECMAScript 规范（以下简称规范）的语言必须满足以下标准：",{"type":169,"tag":198,"props":693,"children":694},{},[695,713,718,723],{"type":169,"tag":202,"props":696,"children":697},{},[698,700,711],{"type":175,"value":699},"规范描述：类型系统、值、对象、属性、函数、语法、语义、严格模式 ",{"type":169,"tag":593,"props":701,"children":702},{},[703],{"type":169,"tag":219,"props":704,"children":708},{"href":705,"ariaDescribedBy":706,"dataFootnoteRef":163,"id":707},"#user-content-fn-strict-mode",[600],"user-content-fnref-strict-mode",[709],{"type":175,"value":710},"2",{"type":175,"value":712},"。",{"type":169,"tag":202,"props":714,"children":715},{},[716],{"type":175,"value":717},"编码标准：最新的 Unicode 标准以及 USC 标准。",{"type":169,"tag":202,"props":719,"children":720},{},[721],{"type":175,"value":722},"ECMA-402：ECMAScript 的国际化接口标准，即 Intl 相关规范。",{"type":169,"tag":202,"props":724,"children":725},{},[726],{"type":175,"value":727},"可选规范：可选规范要么全部不实现，要么全部都实现。目前在文档中只找到相关 WeakRef.prototype.constructor 初始值必须为 %WeakRef% 的可选规范。",{"type":169,"tag":182,"props":729,"children":730},{},[731],{"type":175,"value":732},"规范允许某些实现了规范的具体语言可以提供超出规范描述的内容，包括类型、值、对象。.. 语法或是保留字的实现。",{"type":169,"tag":182,"props":734,"children":735},{},[736],{"type":175,"value":737},"另外，以下规范和 ECMAScript 相关，但不要求 ECMAScript 的宿主系统实现：",{"type":169,"tag":198,"props":739,"children":740},{},[741,746,751],{"type":169,"tag":202,"props":742,"children":743},{},[744],{"type":175,"value":745},"ISO/IEC 10646：UCS 规范。",{"type":169,"tag":202,"props":747,"children":748},{},[749],{"type":175,"value":750},"ECMA-402：国际化接口规范。",{"type":169,"tag":202,"props":752,"children":753},{},[754],{"type":175,"value":755},"ECMA-404：JSON 规范。",{"type":169,"tag":170,"props":757,"children":759},{"id":758},"规范类型和语言类型",[760],{"type":175,"value":758},{"type":169,"tag":182,"props":762,"children":763},{},[764],{"type":175,"value":765},"为什么要区分语言类型和规范类型呢？顾名思义，语言类型是 JavaScript 所使用的一种类型系统，包含比如 Null、Undefined、Object 等类型，但由于 JavaScript 需要由其它引擎实现，也就是说规范所描述的算法逻辑中携带的基本类型不是 JavaScript 语言中的基本类型，而更可能是诸如 C++ 中的数据类型。",{"type":169,"tag":170,"props":767,"children":769},{"id":768},"其它",[770],{"type":175,"value":768},{"type":169,"tag":313,"props":772,"children":774},{"id":773},"词汇表",[775],{"type":175,"value":773},{"type":169,"tag":182,"props":777,"children":778},{},[779],{"type":175,"value":780},"术语表及本文中相关中英翻译的集合。",{"type":169,"tag":782,"props":783,"children":784},"table",{},[785,809],{"type":169,"tag":786,"props":787,"children":788},"thead",{},[789],{"type":169,"tag":790,"props":791,"children":792},"tr",{},[793,799,804],{"type":169,"tag":794,"props":795,"children":796},"th",{},[797],{"type":175,"value":798},"Source",{"type":169,"tag":794,"props":800,"children":801},{},[802],{"type":175,"value":803},"Chinese",{"type":169,"tag":794,"props":805,"children":806},{},[807],{"type":175,"value":808},"Meaning",{"type":169,"tag":810,"props":811,"children":812},"tbody",{},[813,832,850,868,886,903,925,943,968,986,1004,1022,1040,1058,1075,1099,1116,1134,1152,1170,1188,1205,1227,1245],{"type":169,"tag":790,"props":814,"children":815},{},[816,822,827],{"type":169,"tag":817,"props":818,"children":819},"td",{},[820],{"type":175,"value":821},"attribute",{"type":169,"tag":817,"props":823,"children":824},{},[825],{"type":175,"value":826},"属性",{"type":169,"tag":817,"props":828,"children":829},{},[830],{"type":175,"value":831},"用来定义属性特性的内部值，比方说 [[Writable]]",{"type":169,"tag":790,"props":833,"children":834},{},[835,840,845],{"type":169,"tag":817,"props":836,"children":837},{},[838],{"type":175,"value":839},"arbitrary-precision",{"type":169,"tag":817,"props":841,"children":842},{},[843],{"type":175,"value":844},"任意精度的",{"type":169,"tag":817,"props":846,"children":847},{},[848],{"type":175,"value":849},"略",{"type":169,"tag":790,"props":851,"children":852},{},[853,858,863],{"type":169,"tag":817,"props":854,"children":855},{},[856],{"type":175,"value":857},"built-in function",{"type":169,"tag":817,"props":859,"children":860},{},[861],{"type":175,"value":862},"内置对象",{"type":169,"tag":817,"props":864,"children":865},{},[866],{"type":175,"value":867},"作为函数的内置对象",{"type":169,"tag":790,"props":869,"children":870},{},[871,876,881],{"type":169,"tag":817,"props":872,"children":873},{},[874],{"type":175,"value":875},"built-in method",{"type":169,"tag":817,"props":877,"children":878},{},[879],{"type":175,"value":880},"内置方法",{"type":169,"tag":817,"props":882,"children":883},{},[884],{"type":175,"value":885},"作为方法的内置函数",{"type":169,"tag":790,"props":887,"children":888},{},[889,894,898],{"type":169,"tag":817,"props":890,"children":891},{},[892],{"type":175,"value":893},"built-in object",{"type":169,"tag":817,"props":895,"children":896},{},[897],{"type":175,"value":862},{"type":169,"tag":817,"props":899,"children":900},{},[901],{"type":175,"value":902},"由规范定义（定义了具体实现）的对象",{"type":169,"tag":790,"props":904,"children":905},{},[906,911,915],{"type":169,"tag":817,"props":907,"children":908},{},[909],{"type":175,"value":910},"conformance",{"type":169,"tag":817,"props":912,"children":913},{},[914],{"type":175,"value":680},{"type":169,"tag":817,"props":916,"children":917},{},[918,920],{"type":175,"value":919},"见 ",{"type":169,"tag":219,"props":921,"children":923},{"href":922},"#%E4%B8%80%E8%87%B4%E6%80%A7",[924],{"type":175,"value":680},{"type":169,"tag":790,"props":926,"children":927},{},[928,933,938],{"type":169,"tag":817,"props":929,"children":930},{},[931],{"type":175,"value":932},"constructor",{"type":169,"tag":817,"props":934,"children":935},{},[936],{"type":175,"value":937},"构造函数",{"type":169,"tag":817,"props":939,"children":940},{},[941],{"type":175,"value":942},"用于创建和初始化对象用的函数",{"type":169,"tag":790,"props":944,"children":945},{},[946,951,956],{"type":169,"tag":817,"props":947,"children":948},{},[949],{"type":175,"value":950},"general-purpose programming language",{"type":169,"tag":817,"props":952,"children":953},{},[954],{"type":175,"value":955},"通用编程语言",{"type":169,"tag":817,"props":957,"children":958},{},[959,961],{"type":175,"value":960},"被设计为可在各个应用领域使用的语言，见 ",{"type":169,"tag":219,"props":962,"children":965},{"href":963,"rel":964},"https://en.wikipedia.org/wiki/Special:Search/General-purpose_programming_language",[223],[966],{"type":175,"value":967},"General-purpose programming language",{"type":169,"tag":790,"props":969,"children":970},{},[971,976,981],{"type":169,"tag":817,"props":972,"children":973},{},[974],{"type":175,"value":975},"host-defined",{"type":169,"tag":817,"props":977,"children":978},{},[979],{"type":175,"value":980},"宿主实现",{"type":169,"tag":817,"props":982,"children":983},{},[984],{"type":175,"value":985},"同 implementation-defined",{"type":169,"tag":790,"props":987,"children":988},{},[989,994,999],{"type":169,"tag":817,"props":990,"children":991},{},[992],{"type":175,"value":993},"implementation-approximated",{"type":169,"tag":817,"props":995,"children":996},{},[997],{"type":175,"value":998},"近似实现",{"type":169,"tag":817,"props":1000,"children":1001},{},[1002],{"type":175,"value":1003},"规范依赖某些外部实现，而在规范内假设这种实现是“完美的”",{"type":169,"tag":790,"props":1005,"children":1006},{},[1007,1012,1017],{"type":169,"tag":817,"props":1008,"children":1009},{},[1010],{"type":175,"value":1011},"implementation-defined",{"type":169,"tag":817,"props":1013,"children":1014},{},[1015],{"type":175,"value":1016},"定义实现",{"type":169,"tag":817,"props":1018,"children":1019},{},[1020],{"type":175,"value":1021},"规范依赖某些外部实现，外部实现的行为需要与规范描述的一致",{"type":169,"tag":790,"props":1023,"children":1024},{},[1025,1030,1035],{"type":169,"tag":817,"props":1026,"children":1027},{},[1028],{"type":175,"value":1029},"inherited property",{"type":169,"tag":817,"props":1031,"children":1032},{},[1033],{"type":175,"value":1034},"继承属性",{"type":169,"tag":817,"props":1036,"children":1037},{},[1038],{"type":175,"value":1039},"对象内由原型继承的来的属性",{"type":169,"tag":790,"props":1041,"children":1042},{},[1043,1048,1053],{"type":169,"tag":817,"props":1044,"children":1045},{},[1046],{"type":175,"value":1047},"method",{"type":169,"tag":817,"props":1049,"children":1050},{},[1051],{"type":175,"value":1052},"方法",{"type":169,"tag":817,"props":1054,"children":1055},{},[1056],{"type":175,"value":1057},"作为属性值的函数",{"type":169,"tag":790,"props":1059,"children":1060},{},[1061,1066,1071],{"type":169,"tag":817,"props":1062,"children":1063},{},[1064],{"type":175,"value":1065},"module",{"type":169,"tag":817,"props":1067,"children":1068},{},[1069],{"type":175,"value":1070},"模块",{"type":169,"tag":817,"props":1072,"children":1073},{},[1074],{"type":175,"value":849},{"type":169,"tag":790,"props":1076,"children":1077},{},[1078,1083,1087],{"type":169,"tag":817,"props":1079,"children":1080},{},[1081],{"type":175,"value":1082},"NaN",{"type":169,"tag":817,"props":1084,"children":1085},{},[1086],{"type":175,"value":1082},{"type":169,"tag":817,"props":1088,"children":1089},{},[1090,1097],{"type":169,"tag":219,"props":1091,"children":1094},{"href":1092,"rel":1093},"https://ieeexplore.ieee.org/document/8766229",[223],[1095],{"type":175,"value":1096},"IEEE 754-2019",{"type":175,"value":1098}," 标准定义的“不是一个数字”的数值",{"type":169,"tag":790,"props":1100,"children":1101},{},[1102,1107,1112],{"type":169,"tag":817,"props":1103,"children":1104},{},[1105],{"type":175,"value":1106},"normative optional",{"type":169,"tag":817,"props":1108,"children":1109},{},[1110],{"type":175,"value":1111},"可选规范",{"type":169,"tag":817,"props":1113,"children":1114},{},[1115],{"type":175,"value":849},{"type":169,"tag":790,"props":1117,"children":1118},{},[1119,1124,1129],{"type":169,"tag":817,"props":1120,"children":1121},{},[1122],{"type":175,"value":1123},"null value",{"type":169,"tag":817,"props":1125,"children":1126},{},[1127],{"type":175,"value":1128},"空值",{"type":169,"tag":817,"props":1130,"children":1131},{},[1132],{"type":175,"value":1133},"表示对象的值的某种刻意缺失",{"type":169,"tag":790,"props":1135,"children":1136},{},[1137,1142,1147],{"type":169,"tag":817,"props":1138,"children":1139},{},[1140],{"type":175,"value":1141},"ordinary object",{"type":169,"tag":817,"props":1143,"children":1144},{},[1145],{"type":175,"value":1146},"普通对象",{"type":169,"tag":817,"props":1148,"children":1149},{},[1150],{"type":175,"value":1151},"实现了所有基本内部槽的默认功能的对象",{"type":169,"tag":790,"props":1153,"children":1154},{},[1155,1160,1165],{"type":169,"tag":817,"props":1156,"children":1157},{},[1158],{"type":175,"value":1159},"own property",{"type":169,"tag":817,"props":1161,"children":1162},{},[1163],{"type":175,"value":1164},"自有属性",{"type":169,"tag":817,"props":1166,"children":1167},{},[1168],{"type":175,"value":1169},"作为该对象拥有的而不是通过原型继承获得的属性就叫该对象的自有属性",{"type":169,"tag":790,"props":1171,"children":1172},{},[1173,1178,1183],{"type":169,"tag":817,"props":1174,"children":1175},{},[1176],{"type":175,"value":1177},"primitive value",{"type":169,"tag":817,"props":1179,"children":1180},{},[1181],{"type":175,"value":1182},"原始值",{"type":169,"tag":817,"props":1184,"children":1185},{},[1186],{"type":175,"value":1187},"不可再分的数据，Undefined, Null, Boolean, Number, BigInt, Symbol, String 中的一种",{"type":169,"tag":790,"props":1189,"children":1190},{},[1191,1196,1200],{"type":169,"tag":817,"props":1192,"children":1193},{},[1194],{"type":175,"value":1195},"property",{"type":169,"tag":817,"props":1197,"children":1198},{},[1199],{"type":175,"value":826},{"type":169,"tag":817,"props":1201,"children":1202},{},[1203],{"type":175,"value":1204},"组成对象的基本部分，包含键和对应的值",{"type":169,"tag":790,"props":1206,"children":1207},{},[1208,1213,1218],{"type":169,"tag":817,"props":1209,"children":1210},{},[1211],{"type":175,"value":1212},"prototype",{"type":169,"tag":817,"props":1214,"children":1215},{},[1216],{"type":175,"value":1217},"原型",{"type":169,"tag":817,"props":1219,"children":1220},{},[1221,1222],{"type":175,"value":919},{"type":169,"tag":219,"props":1223,"children":1225},{"href":1224},"#%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC",[1226],{"type":175,"value":642},{"type":169,"tag":790,"props":1228,"children":1229},{},[1230,1235,1240],{"type":169,"tag":817,"props":1231,"children":1232},{},[1233],{"type":175,"value":1234},"standard object",{"type":169,"tag":817,"props":1236,"children":1237},{},[1238],{"type":175,"value":1239},"标准对象",{"type":169,"tag":817,"props":1241,"children":1242},{},[1243],{"type":175,"value":1244},"行为（语义）和规范一致的对象",{"type":169,"tag":790,"props":1246,"children":1247},{},[1248,1253,1258],{"type":169,"tag":817,"props":1249,"children":1250},{},[1251],{"type":175,"value":1252},"undefined value",{"type":169,"tag":817,"props":1254,"children":1255},{},[1256],{"type":175,"value":1257},"未定义值",{"type":169,"tag":817,"props":1259,"children":1260},{},[1261],{"type":175,"value":1262},"表示变量初始化成功但未赋值",{"type":169,"tag":1264,"props":1265,"children":1268},"section",{"className":1266,"dataFootnotes":163},[1267],"footnotes",[1269,1276],{"type":169,"tag":170,"props":1270,"children":1273},{"className":1271,"id":600},[1272],"sr-only",[1274],{"type":175,"value":1275},"Footnotes",{"type":169,"tag":1277,"props":1278,"children":1279},"ol",{},[1280,1304],{"type":169,"tag":202,"props":1281,"children":1283},{"id":1282},"user-content-fn-object-definition",[1284,1286,1293,1295],{"type":175,"value":1285},"定义见 ",{"type":169,"tag":219,"props":1287,"children":1290},{"href":1288,"rel":1289},"https://262.ecma-international.org/12.0/#sec-terms-and-definitions-object",[223],[1291],{"type":175,"value":1292}," Terms and Definitions - object",{"type":175,"value":1294}," ",{"type":169,"tag":219,"props":1296,"children":1301},{"href":1297,"ariaLabel":1298,"className":1299,"dataFootnoteBackref":163},"#user-content-fnref-object-definition","Back to reference 1",[1300],"data-footnote-backref",[1302],{"type":175,"value":1303},"↩",{"type":169,"tag":202,"props":1305,"children":1307},{"id":1306},"user-content-fn-strict-mode",[1308,1310,1317,1319],{"type":175,"value":1309},"必须支持严格模式和非严格模式，并且能在一个符合程序中同时运行严格模式和非严格模式的代码，见 ",{"type":169,"tag":219,"props":1311,"children":1314},{"href":1312,"rel":1313},"https://262.ecma-international.org/12.0/#sec-strict-variant-of-ecmascript",[223],[1315],{"type":175,"value":1316},"The Strict Variant of ECMAScript",{"type":175,"value":1318},"。 ",{"type":169,"tag":219,"props":1320,"children":1324},{"href":1321,"ariaLabel":1322,"className":1323,"dataFootnoteBackref":163},"#user-content-fnref-strict-mode","Back to reference 2",[1300],[1325],{"type":175,"value":1303},{"type":169,"tag":1327,"props":1328,"children":1329},"style",{},[1330],{"type":175,"value":1331},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":163,"searchDepth":383,"depth":383,"links":1333},[1334,1335,1336,1337,1340,1346,1347,1350],{"id":172,"depth":383,"text":172},{"id":178,"depth":383,"text":178},{"id":209,"depth":383,"text":209},{"id":239,"depth":383,"text":239,"children":1338},[1339],{"id":315,"depth":412,"text":315},{"id":565,"depth":383,"text":565,"children":1341},[1342,1343,1344,1345],{"id":570,"depth":412,"text":570},{"id":642,"depth":412,"text":642},{"id":662,"depth":412,"text":662},{"id":680,"depth":412,"text":680},{"id":758,"depth":383,"text":758},{"id":768,"depth":383,"text":768,"children":1348},[1349],{"id":773,"depth":412,"text":773},{"id":600,"depth":383,"text":1275},"markdown","content:_books:ecma-262.md","content","_books/ecma-262.md","_books/ecma-262","md",[1358,1361],{"_path":1359,"title":1360,"description":163},"/_books/dear-ui","亲爱的界面",{"_path":1362,"title":1363,"description":163},"/_books","图书分类参考",1748756317470]