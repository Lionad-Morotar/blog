[{"data":1,"prerenderedAt":1361},["ShallowReactive",2],{"navigation":3,"/_books/ecma-262":155,"/_books/ecma-262-surround":1354},[4,35,86,92,119,125,149],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":45,"_path":46},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":48,"_path":49},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":51,"_path":52},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":54,"_path":55},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":57,"_path":58},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":60,"_path":61},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":63,"_path":64},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":66,"_path":67},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":69,"_path":70},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":72,"_path":73},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":75,"_path":76},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":78,"_path":79},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":81,"_path":82},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":84,"_path":85},"📝 技术博客归档","/articles/archive",{"title":87,"_path":88,"children":89},"读书笔记 / Notes","/books",[90],{"title":91,"_path":88},"📕 读书笔记",{"title":93,"_path":94,"children":95},"吉他剧场 / Music","/music",[96,98,101,104,107,110,113,116],{"title":97,"_path":94},"🎸 FingerStyle！",{"title":99,"_path":100},"🌬️ 等待的风","/music/wind",{"title":102,"_path":103},"💕 约定的海洋","/music/ocean",{"title":105,"_path":106},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":108,"_path":109},"🌏 残酷天使的行动纲领","/music/eva",{"title":111,"_path":112},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":114,"_path":115},"🍷 Wu Wei","/music/wu-wei",{"title":117,"_path":118},"🌅 无题","/music/untitled",{"title":120,"_path":121,"children":122},"知识地图 / Maps","/maps",[123],{"title":124,"_path":121},"🏁 知识地图",{"title":126,"_path":127,"children":128},"造物 / Make","/tools",[129,131,134,137,140,143,146],{"title":130,"_path":127},"🧰 工具收集",{"title":132,"_path":133},"📕 博客","/tools/blog",{"title":135,"_path":136},"🥥 Coconut","/tools/coconut",{"title":138,"_path":139},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":141,"_path":142},"🌐 AnySort","/tools/anysort",{"title":144,"_path":145},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":147,"_path":148},"👓 Crapto","/tools/crypto-inline",{"title":150,"_path":151,"children":152},"我 / About","/hire",[153],{"title":154,"_path":151},"📬 技术简历",{"_path":156,"_dir":157,"_draft":158,"_partial":159,"_locale":160,"title":161,"description":160,"body":162,"_type":1348,"_id":1349,"_source":1350,"_file":1351,"_stem":1352,"_extension":1353},"/_books/ecma-262","_books",false,true,"","ECMAScript Standard",{"type":163,"children":164,"toc":1329},"root",[165,173,178,184,189,194,204,209,234,239,244,309,315,321,333,435,445,560,565,570,575,584,604,609,637,642,647,652,657,662,667,680,684,689,725,730,735,753,758,763,768,773,778,1260,1323],{"type":166,"tag":167,"props":168,"children":170},"element","h2",{"id":169},"其他",[171],{"type":172,"value":169},"text",{"type":166,"tag":167,"props":174,"children":176},{"id":175},"执行上下文",[177],{"type":172,"value":175},{"type":166,"tag":179,"props":180,"children":181},"p",{},[182],{"type":172,"value":183},"JS 中有三种不同的代码，全局代码（Global Code）、函数代码（Function Code）和求值代码（Eval Code）。",{"type":166,"tag":179,"props":185,"children":186},{},[187],{"type":172,"value":188},"无论哪一种类型的代码的执行，引擎总是提供了一个执行上下文（Execution Context）用来保存代码执行时相关的信息。",{"type":166,"tag":179,"props":190,"children":191},{},[192],{"type":172,"value":193},"执行上下文由以下几个部分组成：",{"type":166,"tag":195,"props":196,"children":197},"ul",{},[198],{"type":166,"tag":199,"props":200,"children":201},"li",{},[202],{"type":172,"value":203},"变量对象（Variable Object）：用来保存变量声明，比如通过 var a 声明的 a 变量，就会作为变量对象上的一个 a 属性保存下来。",{"type":166,"tag":167,"props":205,"children":207},{"id":206},"阅读更多",[208],{"type":172,"value":206},{"type":166,"tag":195,"props":210,"children":211},{},[212,224],{"type":166,"tag":199,"props":213,"children":214},{},[215],{"type":166,"tag":216,"props":217,"children":221},"a",{"href":218,"rel":219},"https://zhuanlan.zhihu.com/p/27875462",[220],"nofollow",[222],{"type":172,"value":223},"JS 规范中的 IsValidSimpleAssignmentTarget",{"type":166,"tag":199,"props":225,"children":226},{},[227],{"type":166,"tag":216,"props":228,"children":231},{"href":229,"rel":230},"https://stackoverflow.com/questions/15675427/what-is-a-primary-expression",[220],[232],{"type":172,"value":233},"What is a “primary expression”?",{"type":166,"tag":167,"props":235,"children":237},{"id":236},"资料",[238],{"type":172,"value":236},{"type":166,"tag":179,"props":240,"children":241},{},[242],{"type":172,"value":243},"一些极其有用的前置参考资料，有助于甄别与理解规范里各种概念，不至于被绕晕。",{"type":166,"tag":195,"props":245,"children":246},{},[247,263,278,296],{"type":166,"tag":199,"props":248,"children":249},{},[250,261],{"type":166,"tag":216,"props":251,"children":254},{"href":252,"rel":253},"https://timothygu.me/es-howto/",[220],[255],{"type":166,"tag":256,"props":257,"children":258},"i",{},[259],{"type":172,"value":260},"How to Read the ECMAScript Specification",{"type":172,"value":262},"，这个资料简要介绍了一些阅读规范时需要知悉且有助于你理解规范的前置概念并予例说明，比如说抽象操作、内部槽以及内部方法、完成记录、变异对象等。",{"type":166,"tag":199,"props":264,"children":265},{},[266,276],{"type":166,"tag":216,"props":267,"children":270},{"href":268,"rel":269},"https://v8.dev/blog/tags/understanding-ecmascript",[220],[271],{"type":166,"tag":256,"props":272,"children":273},{},[274],{"type":172,"value":275},"Understanding ECMAScript",{"type":172,"value":277},"，V8 团队写的 ECMAScript 阅读指南文章系列，一共四篇，很有参考价值。",{"type":166,"tag":199,"props":279,"children":280},{},[281,288,290,294],{"type":166,"tag":216,"props":282,"children":285},{"href":283,"rel":284},"https://juejin.cn/post/6944587399418609701",[220],[286],{"type":172,"value":287},"《ECMAScript 阅读指南》",{"type":172,"value":289},"，",{"type":166,"tag":256,"props":291,"children":292},{},[293],{"type":172,"value":275},{"type":172,"value":295}," 的翻译版本。",{"type":166,"tag":199,"props":297,"children":298},{},[299],{"type":166,"tag":216,"props":300,"children":303},{"href":301,"rel":302},"https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript",[220],[304],{"type":166,"tag":256,"props":305,"children":306},{},[307],{"type":172,"value":308},"What is the difference between JavaScript and ECMAScript?",{"type":166,"tag":310,"props":311,"children":313},"h3",{"id":312},"快速入门",[314],{"type":172,"value":312},{"type":166,"tag":316,"props":317,"children":319},"h4",{"id":318},"问号和感叹号简写标记",[320],{"type":172,"value":318},{"type":166,"tag":179,"props":322,"children":323},{},[324,331],{"type":166,"tag":325,"props":326,"children":328},"code",{"className":327},[],[329],{"type":172,"value":330},"Let val be ! Foo()",{"type":172,"value":332}," 等同于：",{"type":166,"tag":334,"props":335,"children":339},"pre",{"className":336,"code":337,"language":338,"meta":160,"style":160},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","1. Let val be Foo().\n2. Assert: val is not an abrupt completion.\n3. Set val to val.[[Value]].\n","js",[340],{"type":166,"tag":325,"props":341,"children":342},{"__ignoreMap":160},[343,378,407],{"type":166,"tag":344,"props":345,"children":348},"span",{"class":346,"line":347},"line",1,[349,355,361,367,372],{"type":166,"tag":344,"props":350,"children":352},{"style":351},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[353],{"type":172,"value":354},"1.",{"type":166,"tag":344,"props":356,"children":358},{"style":357},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[359],{"type":172,"value":360}," Let val be ",{"type":166,"tag":344,"props":362,"children":364},{"style":363},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[365],{"type":172,"value":366},"Foo",{"type":166,"tag":344,"props":368,"children":369},{"style":357},[370],{"type":172,"value":371},"()",{"type":166,"tag":344,"props":373,"children":375},{"style":374},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[376],{"type":172,"value":377},".\n",{"type":166,"tag":344,"props":379,"children":381},{"class":346,"line":380},2,[382,387,393,398,403],{"type":166,"tag":344,"props":383,"children":384},{"style":351},[385],{"type":172,"value":386},"2.",{"type":166,"tag":344,"props":388,"children":390},{"style":389},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[391],{"type":172,"value":392}," Assert",{"type":166,"tag":344,"props":394,"children":395},{"style":374},[396],{"type":172,"value":397},":",{"type":166,"tag":344,"props":399,"children":400},{"style":357},[401],{"type":172,"value":402}," val is not an abrupt completion",{"type":166,"tag":344,"props":404,"children":405},{"style":374},[406],{"type":172,"value":377},{"type":166,"tag":344,"props":408,"children":410},{"class":346,"line":409},3,[411,416,421,426,431],{"type":166,"tag":344,"props":412,"children":413},{"style":351},[414],{"type":172,"value":415},"3.",{"type":166,"tag":344,"props":417,"children":418},{"style":357},[419],{"type":172,"value":420}," Set val to val",{"type":166,"tag":344,"props":422,"children":423},{"style":374},[424],{"type":172,"value":425},".",{"type":166,"tag":344,"props":427,"children":428},{"style":357},[429],{"type":172,"value":430},"[[Value]]",{"type":166,"tag":344,"props":432,"children":433},{"style":374},[434],{"type":172,"value":377},{"type":166,"tag":179,"props":436,"children":437},{},[438,444],{"type":166,"tag":325,"props":439,"children":441},{"className":440},[],[442],{"type":172,"value":443},"Return ? Foo()",{"type":172,"value":332},{"type":166,"tag":334,"props":446,"children":448},{"className":336,"code":447,"language":338,"meta":160,"style":160},"1. Let temp be Foo().\n2. If temp is an abrupt completion, return temp.\n3. Set temp to temp.[[Value]].\n4. Return NormalCompletion(temp).\n",[449],{"type":166,"tag":325,"props":450,"children":451},{"__ignoreMap":160},[452,476,508,532],{"type":166,"tag":344,"props":453,"children":454},{"class":346,"line":347},[455,459,464,468,472],{"type":166,"tag":344,"props":456,"children":457},{"style":351},[458],{"type":172,"value":354},{"type":166,"tag":344,"props":460,"children":461},{"style":357},[462],{"type":172,"value":463}," Let temp be ",{"type":166,"tag":344,"props":465,"children":466},{"style":363},[467],{"type":172,"value":366},{"type":166,"tag":344,"props":469,"children":470},{"style":357},[471],{"type":172,"value":371},{"type":166,"tag":344,"props":473,"children":474},{"style":374},[475],{"type":172,"value":377},{"type":166,"tag":344,"props":477,"children":478},{"class":346,"line":380},[479,483,488,493,499,504],{"type":166,"tag":344,"props":480,"children":481},{"style":351},[482],{"type":172,"value":386},{"type":166,"tag":344,"props":484,"children":485},{"style":357},[486],{"type":172,"value":487}," If temp is an abrupt completion",{"type":166,"tag":344,"props":489,"children":490},{"style":374},[491],{"type":172,"value":492},",",{"type":166,"tag":344,"props":494,"children":496},{"style":495},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[497],{"type":172,"value":498}," return",{"type":166,"tag":344,"props":500,"children":501},{"style":357},[502],{"type":172,"value":503}," temp",{"type":166,"tag":344,"props":505,"children":506},{"style":374},[507],{"type":172,"value":377},{"type":166,"tag":344,"props":509,"children":510},{"class":346,"line":409},[511,515,520,524,528],{"type":166,"tag":344,"props":512,"children":513},{"style":351},[514],{"type":172,"value":415},{"type":166,"tag":344,"props":516,"children":517},{"style":357},[518],{"type":172,"value":519}," Set temp to temp",{"type":166,"tag":344,"props":521,"children":522},{"style":374},[523],{"type":172,"value":425},{"type":166,"tag":344,"props":525,"children":526},{"style":357},[527],{"type":172,"value":430},{"type":166,"tag":344,"props":529,"children":530},{"style":374},[531],{"type":172,"value":377},{"type":166,"tag":344,"props":533,"children":535},{"class":346,"line":534},4,[536,541,546,551,556],{"type":166,"tag":344,"props":537,"children":538},{"style":351},[539],{"type":172,"value":540},"4.",{"type":166,"tag":344,"props":542,"children":543},{"style":357},[544],{"type":172,"value":545}," Return ",{"type":166,"tag":344,"props":547,"children":548},{"style":363},[549],{"type":172,"value":550},"NormalCompletion",{"type":166,"tag":344,"props":552,"children":553},{"style":357},[554],{"type":172,"value":555},"(temp)",{"type":166,"tag":344,"props":557,"children":558},{"style":374},[559],{"type":172,"value":377},{"type":166,"tag":167,"props":561,"children":563},{"id":562},"规范综述",[564],{"type":172,"value":562},{"type":166,"tag":310,"props":566,"children":568},{"id":567},"语言组成",[569],{"type":172,"value":567},{"type":166,"tag":179,"props":571,"children":572},{},[573],{"type":172,"value":574},"常常能听到：“对象的本质就是实现了规范所要求的内部插槽的结构”，其实该观点源于这张图：",{"type":166,"tag":179,"props":576,"children":577},{},[578],{"type":166,"tag":579,"props":580,"children":583},"img",{"alt":581,"src":582},"对象的本质","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/timothygu.me_es-howto_object-uml.svg.png",[],{"type":166,"tag":179,"props":585,"children":586},{},[587,589,602],{"type":172,"value":588},"ECMAScript 是一种基于对象的基本语言，其基础设置主要依赖宿主提供的对象。基于此概念，可以把 ECMAScript 程序看作一组相互通讯的对象集合。按照规范，对象的精确描述其实应该是：“一个具有零或多个被属性描述符决定的属性的集合 ",{"type":166,"tag":590,"props":591,"children":592},"sup",{},[593],{"type":166,"tag":216,"props":594,"children":599},{"href":595,"ariaDescribedBy":596,"dataFootnoteRef":160,"id":598},"#user-content-fn-object-definition",[597],"footnote-label","user-content-fnref-object-definition",[600],{"type":172,"value":601},"1",{"type":172,"value":603},"”。对象的属性能持有其它值，包括规范定义的原始值：Undefined、Null、Boolean、Number、BigInt、String、Symbol 和 Object。这里说的 Object 还包括可执行对象，callable object，也就是函数。而由对象内属性持有的函数，叫做方法。",{"type":166,"tag":179,"props":605,"children":606},{},[607],{"type":172,"value":608},"按照上图，规范定义了包括全局对象、Object、Function 等对象以及操作这些对象所需要用到的操作符。除此之外，还定义了用于组织程序的模块，以及行文所需要用到的静态语法。组织方式如下：",{"type":166,"tag":195,"props":610,"children":611},{},[612,617,622,627,632],{"type":166,"tag":199,"props":613,"children":614},{},[615],{"type":172,"value":616},"章节 5 定义了规范所使用的符号约定。",{"type":166,"tag":199,"props":618,"children":619},{},[620],{"type":172,"value":621},"章节 6 至章节 10 定义了语言的运行环境。",{"type":166,"tag":199,"props":623,"children":624},{},[625],{"type":172,"value":626},"章节 11 至章节 17 定义了包括语法、语义在内的所有语言功能。",{"type":166,"tag":199,"props":628,"children":629},{},[630],{"type":172,"value":631},"章节 18 至章节 28 定义了语言依赖的标准库。",{"type":166,"tag":199,"props":633,"children":634},{},[635],{"type":172,"value":636},"章节 29 描述了支持 SharedArrayBuffer 以及 Atomics 对象方法访问的内存一致性模型。",{"type":166,"tag":310,"props":638,"children":640},{"id":639},"语言风格",[641],{"type":172,"value":639},{"type":166,"tag":179,"props":643,"children":644},{},[645],{"type":172,"value":646},"ECMAScript 基于对象，这和 C++、Java 不同的本质区别在于创建对象的方式以及属性共享思路的不同：ECMAScript 支持多种方式创建对象：构造器、字面量或 Object.create，而属性共享则是使用原型。使用原型意味着尽管 ECMAScript 支持类继承，但是是通过原型继承隐式实现的：每一个构造器函数都有一个原型属性，属性名为 prototype。以该构造器创建的实例会携带一个隐式的指向其构造器的原型的引用（称为实例的原型）。而构造器函数也是一个对象实例，所以也会有对应的原型。ECMAScript 依赖这条由对象原型组成的链条式的关系，即原型链，来共享属性。而在经典面向对象语言中，总的来说，属性（也就是状态）是直接挂载在实例上的，只有方法挂载在类上，这也就意味着类继承只约束了继承结构和对象的行为，没有约束对象的状态。此外，由于 ECMAScript 支持动态重写对象，这使得你可以在运行时去创建一个动态的继承结构。",{"type":166,"tag":179,"props":648,"children":649},{},[650],{"type":172,"value":651},"ECMAScript 被故意地设计成类 Java 的语法，这是历史原因。另一方面，其语法被考虑设计成尽可能简单的。规范对语言的具体描述是一种“通用编程语言”，并不是指代语言性质，如“脚本语言”，或是具体实现，如“JavaScript”。有不少其它语言也完整实现了规范，如微软早期的 JScript 和用于 Flash 的 ActionScript。从这个角度来看，JavaScript 应该看作 ECMAScript 的一种方言。",{"type":166,"tag":179,"props":653,"children":654},{},[655],{"type":172,"value":656},"如果从历史的角度来看，ECAMAScript 和 JavaScript 的关系会发生变化。JavaScript 是网景公司在宣发时使用的名称，这个语言一开始叫做 Mocha，而后又叫做 LiveScript。微软在 IE 中也做了一种实现，但由于版权问题卡喉咙，不能叫做 JavaScript，所以改为了 JScript。在网景公司没落前，他们起草了 ECMAScript 标准，用来规划 JavaScript 的发展路线。尽管网景没了，但规范则一直在更新，比如被人们熟知的 ES6，指代 ECMAScript 2015 6th Edition。ECMAScript 和 JavaScript 也就不仅仅应当被理解成标准和实现，它们还属于共生共荣的关系。",{"type":166,"tag":310,"props":658,"children":660},{"id":659},"宿主系统",[661],{"type":172,"value":659},{"type":166,"tag":179,"props":663,"children":664},{},[665],{"type":172,"value":666},"脚本语言是设计给包括非职业开发人员使用的语言，没有必要拥有主程序入口。所以脚本语言通常寄生于特定系统，依赖宿主提供的设施以完善语言功能，使用终端进行操作，以便人员操控程序或自动化流程。规范原本想设计一款 Web 脚本语言，用于客户端以响应用户在界面上的操作，使 Web 页面能够执行逻辑。但随着越来越广泛的使用，功能逐渐完善，ECMAScript 演变成为了通用程序语言。",{"type":166,"tag":179,"props":668,"children":669},{},[670,672,678],{"type":172,"value":671},"每一个支持 ECMAScript 的浏览器或者服务器端都拥有一个对应的宿主系统用于执行脚本。宿主系统的实现需要按照规范，不过规范对某些特征只描述了特定行为而没有给出具体算法。这些具体算法通常会由其它规范来实现，比如说 HTML 规范中定义的宏任务和微任务或 Math.exp 这种特定算法。总而言之，只要宿主系统和规范是一致的（见 ",{"type":166,"tag":216,"props":673,"children":675},{"href":674},"#%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%89",[676],{"type":172,"value":677},"一致性",{"type":172,"value":679},"并实现了特定的行为如 Host Hooks、Host-defined Fileds、Host-defined Objects、Running Jobs、Internal Methods of Exotic Objects 和 Built-in Objects and Methods，就算是一个完整的 ECMAScript 宿主系统，就能正确地和规范进行交互。",{"type":166,"tag":310,"props":681,"children":682},{"id":677},[683],{"type":172,"value":677},{"type":166,"tag":179,"props":685,"children":686},{},[687],{"type":172,"value":688},"一致性是指，实现了 ECMAScript 规范（以下简称规范）的语言必须满足以下标准：",{"type":166,"tag":195,"props":690,"children":691},{},[692,710,715,720],{"type":166,"tag":199,"props":693,"children":694},{},[695,697,708],{"type":172,"value":696},"规范描述：类型系统、值、对象、属性、函数、语法、语义、严格模式 ",{"type":166,"tag":590,"props":698,"children":699},{},[700],{"type":166,"tag":216,"props":701,"children":705},{"href":702,"ariaDescribedBy":703,"dataFootnoteRef":160,"id":704},"#user-content-fn-strict-mode",[597],"user-content-fnref-strict-mode",[706],{"type":172,"value":707},"2",{"type":172,"value":709},"。",{"type":166,"tag":199,"props":711,"children":712},{},[713],{"type":172,"value":714},"编码标准：最新的 Unicode 标准以及 USC 标准。",{"type":166,"tag":199,"props":716,"children":717},{},[718],{"type":172,"value":719},"ECMA-402：ECMAScript 的国际化接口标准，即 Intl 相关规范。",{"type":166,"tag":199,"props":721,"children":722},{},[723],{"type":172,"value":724},"可选规范：可选规范要么全部不实现，要么全部都实现。目前在文档中只找到相关 WeakRef.prototype.constructor 初始值必须为 %WeakRef% 的可选规范。",{"type":166,"tag":179,"props":726,"children":727},{},[728],{"type":172,"value":729},"规范允许某些实现了规范的具体语言可以提供超出规范描述的内容，包括类型、值、对象。.. 语法或是保留字的实现。",{"type":166,"tag":179,"props":731,"children":732},{},[733],{"type":172,"value":734},"另外，以下规范和 ECMAScript 相关，但不要求 ECMAScript 的宿主系统实现：",{"type":166,"tag":195,"props":736,"children":737},{},[738,743,748],{"type":166,"tag":199,"props":739,"children":740},{},[741],{"type":172,"value":742},"ISO/IEC 10646：UCS 规范。",{"type":166,"tag":199,"props":744,"children":745},{},[746],{"type":172,"value":747},"ECMA-402：国际化接口规范。",{"type":166,"tag":199,"props":749,"children":750},{},[751],{"type":172,"value":752},"ECMA-404：JSON 规范。",{"type":166,"tag":167,"props":754,"children":756},{"id":755},"规范类型和语言类型",[757],{"type":172,"value":755},{"type":166,"tag":179,"props":759,"children":760},{},[761],{"type":172,"value":762},"为什么要区分语言类型和规范类型呢？顾名思义，语言类型是 JavaScript 所使用的一种类型系统，包含比如 Null、Undefined、Object 等类型，但由于 JavaScript 需要由其它引擎实现，也就是说规范所描述的算法逻辑中携带的基本类型不是 JavaScript 语言中的基本类型，而更可能是诸如 C++ 中的数据类型。",{"type":166,"tag":167,"props":764,"children":766},{"id":765},"其它",[767],{"type":172,"value":765},{"type":166,"tag":310,"props":769,"children":771},{"id":770},"词汇表",[772],{"type":172,"value":770},{"type":166,"tag":179,"props":774,"children":775},{},[776],{"type":172,"value":777},"术语表及本文中相关中英翻译的集合。",{"type":166,"tag":779,"props":780,"children":781},"table",{},[782,806],{"type":166,"tag":783,"props":784,"children":785},"thead",{},[786],{"type":166,"tag":787,"props":788,"children":789},"tr",{},[790,796,801],{"type":166,"tag":791,"props":792,"children":793},"th",{},[794],{"type":172,"value":795},"Source",{"type":166,"tag":791,"props":797,"children":798},{},[799],{"type":172,"value":800},"Chinese",{"type":166,"tag":791,"props":802,"children":803},{},[804],{"type":172,"value":805},"Meaning",{"type":166,"tag":807,"props":808,"children":809},"tbody",{},[810,829,847,865,883,900,922,940,965,983,1001,1019,1037,1055,1072,1096,1113,1131,1149,1167,1185,1202,1224,1242],{"type":166,"tag":787,"props":811,"children":812},{},[813,819,824],{"type":166,"tag":814,"props":815,"children":816},"td",{},[817],{"type":172,"value":818},"attribute",{"type":166,"tag":814,"props":820,"children":821},{},[822],{"type":172,"value":823},"属性",{"type":166,"tag":814,"props":825,"children":826},{},[827],{"type":172,"value":828},"用来定义属性特性的内部值，比方说 [[Writable]]",{"type":166,"tag":787,"props":830,"children":831},{},[832,837,842],{"type":166,"tag":814,"props":833,"children":834},{},[835],{"type":172,"value":836},"arbitrary-precision",{"type":166,"tag":814,"props":838,"children":839},{},[840],{"type":172,"value":841},"任意精度的",{"type":166,"tag":814,"props":843,"children":844},{},[845],{"type":172,"value":846},"略",{"type":166,"tag":787,"props":848,"children":849},{},[850,855,860],{"type":166,"tag":814,"props":851,"children":852},{},[853],{"type":172,"value":854},"built-in function",{"type":166,"tag":814,"props":856,"children":857},{},[858],{"type":172,"value":859},"内置对象",{"type":166,"tag":814,"props":861,"children":862},{},[863],{"type":172,"value":864},"作为函数的内置对象",{"type":166,"tag":787,"props":866,"children":867},{},[868,873,878],{"type":166,"tag":814,"props":869,"children":870},{},[871],{"type":172,"value":872},"built-in method",{"type":166,"tag":814,"props":874,"children":875},{},[876],{"type":172,"value":877},"内置方法",{"type":166,"tag":814,"props":879,"children":880},{},[881],{"type":172,"value":882},"作为方法的内置函数",{"type":166,"tag":787,"props":884,"children":885},{},[886,891,895],{"type":166,"tag":814,"props":887,"children":888},{},[889],{"type":172,"value":890},"built-in object",{"type":166,"tag":814,"props":892,"children":893},{},[894],{"type":172,"value":859},{"type":166,"tag":814,"props":896,"children":897},{},[898],{"type":172,"value":899},"由规范定义（定义了具体实现）的对象",{"type":166,"tag":787,"props":901,"children":902},{},[903,908,912],{"type":166,"tag":814,"props":904,"children":905},{},[906],{"type":172,"value":907},"conformance",{"type":166,"tag":814,"props":909,"children":910},{},[911],{"type":172,"value":677},{"type":166,"tag":814,"props":913,"children":914},{},[915,917],{"type":172,"value":916},"见 ",{"type":166,"tag":216,"props":918,"children":920},{"href":919},"#%E4%B8%80%E8%87%B4%E6%80%A7",[921],{"type":172,"value":677},{"type":166,"tag":787,"props":923,"children":924},{},[925,930,935],{"type":166,"tag":814,"props":926,"children":927},{},[928],{"type":172,"value":929},"constructor",{"type":166,"tag":814,"props":931,"children":932},{},[933],{"type":172,"value":934},"构造函数",{"type":166,"tag":814,"props":936,"children":937},{},[938],{"type":172,"value":939},"用于创建和初始化对象用的函数",{"type":166,"tag":787,"props":941,"children":942},{},[943,948,953],{"type":166,"tag":814,"props":944,"children":945},{},[946],{"type":172,"value":947},"general-purpose programming language",{"type":166,"tag":814,"props":949,"children":950},{},[951],{"type":172,"value":952},"通用编程语言",{"type":166,"tag":814,"props":954,"children":955},{},[956,958],{"type":172,"value":957},"被设计为可在各个应用领域使用的语言，见 ",{"type":166,"tag":216,"props":959,"children":962},{"href":960,"rel":961},"https://en.wikipedia.org/wiki/Special:Search/General-purpose_programming_language",[220],[963],{"type":172,"value":964},"General-purpose programming language",{"type":166,"tag":787,"props":966,"children":967},{},[968,973,978],{"type":166,"tag":814,"props":969,"children":970},{},[971],{"type":172,"value":972},"host-defined",{"type":166,"tag":814,"props":974,"children":975},{},[976],{"type":172,"value":977},"宿主实现",{"type":166,"tag":814,"props":979,"children":980},{},[981],{"type":172,"value":982},"同 implementation-defined",{"type":166,"tag":787,"props":984,"children":985},{},[986,991,996],{"type":166,"tag":814,"props":987,"children":988},{},[989],{"type":172,"value":990},"implementation-approximated",{"type":166,"tag":814,"props":992,"children":993},{},[994],{"type":172,"value":995},"近似实现",{"type":166,"tag":814,"props":997,"children":998},{},[999],{"type":172,"value":1000},"规范依赖某些外部实现，而在规范内假设这种实现是“完美的”",{"type":166,"tag":787,"props":1002,"children":1003},{},[1004,1009,1014],{"type":166,"tag":814,"props":1005,"children":1006},{},[1007],{"type":172,"value":1008},"implementation-defined",{"type":166,"tag":814,"props":1010,"children":1011},{},[1012],{"type":172,"value":1013},"定义实现",{"type":166,"tag":814,"props":1015,"children":1016},{},[1017],{"type":172,"value":1018},"规范依赖某些外部实现，外部实现的行为需要与规范描述的一致",{"type":166,"tag":787,"props":1020,"children":1021},{},[1022,1027,1032],{"type":166,"tag":814,"props":1023,"children":1024},{},[1025],{"type":172,"value":1026},"inherited property",{"type":166,"tag":814,"props":1028,"children":1029},{},[1030],{"type":172,"value":1031},"继承属性",{"type":166,"tag":814,"props":1033,"children":1034},{},[1035],{"type":172,"value":1036},"对象内由原型继承的来的属性",{"type":166,"tag":787,"props":1038,"children":1039},{},[1040,1045,1050],{"type":166,"tag":814,"props":1041,"children":1042},{},[1043],{"type":172,"value":1044},"method",{"type":166,"tag":814,"props":1046,"children":1047},{},[1048],{"type":172,"value":1049},"方法",{"type":166,"tag":814,"props":1051,"children":1052},{},[1053],{"type":172,"value":1054},"作为属性值的函数",{"type":166,"tag":787,"props":1056,"children":1057},{},[1058,1063,1068],{"type":166,"tag":814,"props":1059,"children":1060},{},[1061],{"type":172,"value":1062},"module",{"type":166,"tag":814,"props":1064,"children":1065},{},[1066],{"type":172,"value":1067},"模块",{"type":166,"tag":814,"props":1069,"children":1070},{},[1071],{"type":172,"value":846},{"type":166,"tag":787,"props":1073,"children":1074},{},[1075,1080,1084],{"type":166,"tag":814,"props":1076,"children":1077},{},[1078],{"type":172,"value":1079},"NaN",{"type":166,"tag":814,"props":1081,"children":1082},{},[1083],{"type":172,"value":1079},{"type":166,"tag":814,"props":1085,"children":1086},{},[1087,1094],{"type":166,"tag":216,"props":1088,"children":1091},{"href":1089,"rel":1090},"https://ieeexplore.ieee.org/document/8766229",[220],[1092],{"type":172,"value":1093},"IEEE 754-2019",{"type":172,"value":1095}," 标准定义的“不是一个数字”的数值",{"type":166,"tag":787,"props":1097,"children":1098},{},[1099,1104,1109],{"type":166,"tag":814,"props":1100,"children":1101},{},[1102],{"type":172,"value":1103},"normative optional",{"type":166,"tag":814,"props":1105,"children":1106},{},[1107],{"type":172,"value":1108},"可选规范",{"type":166,"tag":814,"props":1110,"children":1111},{},[1112],{"type":172,"value":846},{"type":166,"tag":787,"props":1114,"children":1115},{},[1116,1121,1126],{"type":166,"tag":814,"props":1117,"children":1118},{},[1119],{"type":172,"value":1120},"null value",{"type":166,"tag":814,"props":1122,"children":1123},{},[1124],{"type":172,"value":1125},"空值",{"type":166,"tag":814,"props":1127,"children":1128},{},[1129],{"type":172,"value":1130},"表示对象的值的某种刻意缺失",{"type":166,"tag":787,"props":1132,"children":1133},{},[1134,1139,1144],{"type":166,"tag":814,"props":1135,"children":1136},{},[1137],{"type":172,"value":1138},"ordinary object",{"type":166,"tag":814,"props":1140,"children":1141},{},[1142],{"type":172,"value":1143},"普通对象",{"type":166,"tag":814,"props":1145,"children":1146},{},[1147],{"type":172,"value":1148},"实现了所有基本内部槽的默认功能的对象",{"type":166,"tag":787,"props":1150,"children":1151},{},[1152,1157,1162],{"type":166,"tag":814,"props":1153,"children":1154},{},[1155],{"type":172,"value":1156},"own property",{"type":166,"tag":814,"props":1158,"children":1159},{},[1160],{"type":172,"value":1161},"自有属性",{"type":166,"tag":814,"props":1163,"children":1164},{},[1165],{"type":172,"value":1166},"作为该对象拥有的而不是通过原型继承获得的属性就叫该对象的自有属性",{"type":166,"tag":787,"props":1168,"children":1169},{},[1170,1175,1180],{"type":166,"tag":814,"props":1171,"children":1172},{},[1173],{"type":172,"value":1174},"primitive value",{"type":166,"tag":814,"props":1176,"children":1177},{},[1178],{"type":172,"value":1179},"原始值",{"type":166,"tag":814,"props":1181,"children":1182},{},[1183],{"type":172,"value":1184},"不可再分的数据，Undefined, Null, Boolean, Number, BigInt, Symbol, String 中的一种",{"type":166,"tag":787,"props":1186,"children":1187},{},[1188,1193,1197],{"type":166,"tag":814,"props":1189,"children":1190},{},[1191],{"type":172,"value":1192},"property",{"type":166,"tag":814,"props":1194,"children":1195},{},[1196],{"type":172,"value":823},{"type":166,"tag":814,"props":1198,"children":1199},{},[1200],{"type":172,"value":1201},"组成对象的基本部分，包含键和对应的值",{"type":166,"tag":787,"props":1203,"children":1204},{},[1205,1210,1215],{"type":166,"tag":814,"props":1206,"children":1207},{},[1208],{"type":172,"value":1209},"prototype",{"type":166,"tag":814,"props":1211,"children":1212},{},[1213],{"type":172,"value":1214},"原型",{"type":166,"tag":814,"props":1216,"children":1217},{},[1218,1219],{"type":172,"value":916},{"type":166,"tag":216,"props":1220,"children":1222},{"href":1221},"#%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC",[1223],{"type":172,"value":639},{"type":166,"tag":787,"props":1225,"children":1226},{},[1227,1232,1237],{"type":166,"tag":814,"props":1228,"children":1229},{},[1230],{"type":172,"value":1231},"standard object",{"type":166,"tag":814,"props":1233,"children":1234},{},[1235],{"type":172,"value":1236},"标准对象",{"type":166,"tag":814,"props":1238,"children":1239},{},[1240],{"type":172,"value":1241},"行为（语义）和规范一致的对象",{"type":166,"tag":787,"props":1243,"children":1244},{},[1245,1250,1255],{"type":166,"tag":814,"props":1246,"children":1247},{},[1248],{"type":172,"value":1249},"undefined value",{"type":166,"tag":814,"props":1251,"children":1252},{},[1253],{"type":172,"value":1254},"未定义值",{"type":166,"tag":814,"props":1256,"children":1257},{},[1258],{"type":172,"value":1259},"表示变量初始化成功但未赋值",{"type":166,"tag":1261,"props":1262,"children":1265},"section",{"className":1263,"dataFootnotes":160},[1264],"footnotes",[1266,1273],{"type":166,"tag":167,"props":1267,"children":1270},{"className":1268,"id":597},[1269],"sr-only",[1271],{"type":172,"value":1272},"Footnotes",{"type":166,"tag":1274,"props":1275,"children":1276},"ol",{},[1277,1301],{"type":166,"tag":199,"props":1278,"children":1280},{"id":1279},"user-content-fn-object-definition",[1281,1283,1290,1292],{"type":172,"value":1282},"定义见 ",{"type":166,"tag":216,"props":1284,"children":1287},{"href":1285,"rel":1286},"https://262.ecma-international.org/12.0/#sec-terms-and-definitions-object",[220],[1288],{"type":172,"value":1289}," Terms and Definitions - object",{"type":172,"value":1291}," ",{"type":166,"tag":216,"props":1293,"children":1298},{"href":1294,"ariaLabel":1295,"className":1296,"dataFootnoteBackref":160},"#user-content-fnref-object-definition","Back to reference 1",[1297],"data-footnote-backref",[1299],{"type":172,"value":1300},"↩",{"type":166,"tag":199,"props":1302,"children":1304},{"id":1303},"user-content-fn-strict-mode",[1305,1307,1314,1316],{"type":172,"value":1306},"必须支持严格模式和非严格模式，并且能在一个符合程序中同时运行严格模式和非严格模式的代码，见 ",{"type":166,"tag":216,"props":1308,"children":1311},{"href":1309,"rel":1310},"https://262.ecma-international.org/12.0/#sec-strict-variant-of-ecmascript",[220],[1312],{"type":172,"value":1313},"The Strict Variant of ECMAScript",{"type":172,"value":1315},"。 ",{"type":166,"tag":216,"props":1317,"children":1321},{"href":1318,"ariaLabel":1319,"className":1320,"dataFootnoteBackref":160},"#user-content-fnref-strict-mode","Back to reference 2",[1297],[1322],{"type":172,"value":1300},{"type":166,"tag":1324,"props":1325,"children":1326},"style",{},[1327],{"type":172,"value":1328},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":160,"searchDepth":380,"depth":380,"links":1330},[1331,1332,1333,1334,1337,1343,1344,1347],{"id":169,"depth":380,"text":169},{"id":175,"depth":380,"text":175},{"id":206,"depth":380,"text":206},{"id":236,"depth":380,"text":236,"children":1335},[1336],{"id":312,"depth":409,"text":312},{"id":562,"depth":380,"text":562,"children":1338},[1339,1340,1341,1342],{"id":567,"depth":409,"text":567},{"id":639,"depth":409,"text":639},{"id":659,"depth":409,"text":659},{"id":677,"depth":409,"text":677},{"id":755,"depth":380,"text":755},{"id":765,"depth":380,"text":765,"children":1345},[1346],{"id":770,"depth":409,"text":770},{"id":597,"depth":380,"text":1272},"markdown","content:_books:ecma-262.md","content","_books/ecma-262.md","_books/ecma-262","md",[1355,1358],{"_path":1356,"title":1357,"description":160},"/_books/dear-ui","亲爱的界面",{"_path":1359,"title":1360,"description":160},"/_books","图书分类参考",1742348689409]