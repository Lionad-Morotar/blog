[{"data":1,"prerenderedAt":1551},["ShallowReactive",2],{"navigation":3,"/_books/ecma-262":410,"/_books/ecma-262-surround":1544},[4,32,83,102,129,135,141,147,393,399,405],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77,80],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":42,"_path":43},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":45,"_path":46},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":48,"_path":49},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":51,"_path":52},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":54,"_path":55},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":57,"_path":58},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":60,"_path":61},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":63,"_path":64},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":66,"_path":67},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":69,"_path":70},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":72,"_path":73},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":75,"_path":76},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":78,"_path":79},"🚝 四十二篇系列","/articles/fourty-two",{"title":81,"_path":82},"📝 技术博客归档","/articles/fold",{"title":84,"_path":85,"children":86},"造物 / Make","/tools",[87,90,93,96,99],{"title":88,"_path":89},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":91,"_path":92},"🌐 AnySort","/tools/anysort",{"title":94,"_path":95},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":97,"_path":98},"👓 Crapto","/tools/crypto-inline",{"title":100,"_path":101},"🖨️ any-to-base64","/tools/any-to-base64",{"title":103,"_path":104,"children":105},"吉他剧场 / Music","/music",[106,108,111,114,117,120,123,126],{"title":107,"_path":104},"🎸 FingerStyle！",{"title":109,"_path":110},"🌬️ 等待的风","/music/wind",{"title":112,"_path":113},"💕 约定的海洋","/music/ocean",{"title":115,"_path":116},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":118,"_path":119},"🌏 残酷天使的行动纲领","/music/eva",{"title":121,"_path":122},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":124,"_path":125},"🍷 Wu Wei","/music/wu-wei",{"title":127,"_path":128},"🌅 无题","/music/untitled",{"title":130,"_path":131,"children":132},"画点什么 / Paint","/paint",[133],{"title":134,"_path":131},"🚧 正在施工",{"title":136,"_path":137,"children":138},"读书笔记 / Notes","/books",[139],{"title":140,"_path":137},"📕 读书笔记",{"title":142,"_path":143,"children":144},"知识地图 / Maps","/maps",[145],{"title":146,"_path":143},"🏁 知识地图",{"title":148,"_path":149,"children":150},"零散的笔记 / Gists","/gists",[151,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390],{"title":152,"_path":149},"🧊 Gists",{"title":154,"_path":155},"网站的可访问性","/gists/accessibility",{"title":157,"_path":158},"Bit","/gists/bit",{"title":160,"_path":161},"图片模糊","/gists/blur",{"title":163,"_path":164},"渲染相关笔记","/gists/c4d",{"title":166,"_path":167},"CDN 问题记录","/gists/cdn",{"title":169,"_path":170},"消毒剂","/gists/cleaner",{"title":172,"_path":173},"Windows Command","/gists/cmd",{"title":175,"_path":176},"Command","/gists/command",{"title":178,"_path":179},"复杂科学","/gists/complexity-science",{"title":181,"_path":182},"GitHub Copilot","/gists/copilot",{"title":184,"_path":185},"宇宙","/gists/cosmos",{"title":187,"_path":188},"C++","/gists/cpp",{"title":190,"_path":191},"Data Structure","/gists/data-structure",{"title":193,"_path":194},"DEPRESSION","/gists/depression",{"title":196,"_path":197},"设计模式","/gists/design-patterns",{"title":199,"_path":200},"Developer Experience","/gists/developer-experience",{"title":202,"_path":203},"Device Metrics","/gists/device-metrix",{"title":205,"_path":206},"数字化转型","/gists/digital-transformation",{"title":208,"_path":209},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":211,"_path":212},"正则表达式","/gists/eegex",{"title":214,"_path":215},"Emoji","/gists/emoji",{"title":217,"_path":218},"工程","/gists/engineering",{"title":220,"_path":221},"熵","/gists/entropy",{"title":223,"_path":224},"Environment","/gists/environment",{"title":226,"_path":227},"Erlang","/gists/erlang",{"title":229,"_path":230},"逃离塔克夫","/gists/escape-from-tarkov",{"title":232,"_path":233},"ESNext (ES6-ES11)","/gists/esnext",{"title":235,"_path":236},"Eval！","/gists/eval",{"title":238,"_path":239},"Flutter","/gists/flutter",{"title":241,"_path":242},"字体","/gists/font",{"title":244,"_path":245},"JS 函数式编程","/gists/functional",{"title":247,"_path":248},"游戏化","/gists/gamification",{"title":250,"_path":251},"Google C++ Standard","/gists/google-cpp-standard",{"title":253,"_path":254},"双向链接完全体","/gists/graph",{"title":256,"_path":257},"Hardwares","/gists/hardwares",{"title":259,"_path":260},"哈希冲突","/gists/hash-collision",{"title":262,"_path":263},"信息设计","/gists/information-design",{"title":265,"_path":266},"InstantPage","/gists/instant.page",{"title":268,"_path":269},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":271,"_path":272},"KVStore","/gists/key-value-db",{"title":274,"_path":275},"Kubernetes","/gists/kubernetes",{"title":277,"_path":278},"Makefile","/gists/makefile",{"title":280,"_path":281},"Markdown Inline Style","/gists/markdown-nice",{"title":283,"_path":284},"小程序","/gists/miniapp",{"title":286,"_path":287},"减小页面快照体积","/gists/minify-html",{"title":289,"_path":290},"mklink","/gists/mklink",{"title":292,"_path":293},"Mock","/gists/mock",{"title":295,"_path":296},"多人协作系统","/gists/multiplayer",{"title":298,"_path":299},"多端应用","/gists/multy-end-app",{"title":301,"_path":302},"神经科学","/gists/neuroscience",{"title":304,"_path":305},"OO","/gists/oo",{"title":307,"_path":308},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":310,"_path":311},"PInvoke","/gists/pinvoke",{"title":313,"_path":314},"像素","/gists/pixel",{"title":316,"_path":317},"PowerShell","/gists/powershell",{"title":319,"_path":320},"量子","/gists/quantum",{"title":322,"_path":323},"保持好奇心","/gists/questions",{"title":325,"_path":326},"React Native","/gists/react-native",{"title":328,"_path":329},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":331,"_path":332},"SEO","/gists/seo",{"title":334,"_path":335},"Shader","/gists/shader",{"title":337,"_path":338},"Shape Up","/gists/shape-up",{"title":340,"_path":341},"睡觉","/gists/sleep",{"title":343,"_path":344},"记录奇怪的问题","/gists/solved",{"title":346,"_path":347},"States","/gists/states",{"title":349,"_path":350},"Storage","/gists/storage",{"title":352,"_path":353},"音视频流处理","/gists/stream-cli",{"title":355,"_path":356},"Symbol","/gists/symbol",{"title":358,"_path":359},"系统论","/gists/systems-theory",{"title":361,"_path":362},"Taro","/gists/taro",{"title":364,"_path":365},"任务切片","/gists/task-slice",{"title":367,"_path":368},"技术偏好","/gists/tech-dudge",{"title":370,"_path":371},"Untitled","/gists/untitled",{"title":373,"_path":374},"可变字体","/gists/variable-font",{"title":376,"_path":377},"视觉错觉","/gists/visual-illusion",{"title":379,"_path":380},"SS(SSR)","/gists/vpn",{"title":382,"_path":383},"VS Code 插件开发","/gists/vscode-plugin",{"title":385,"_path":386},"Web Components","/gists/web-components",{"title":388,"_path":389},"Windows","/gists/windows",{"title":391,"_path":392},"查缺补漏","/gists/wrong",{"title":394,"_path":395,"children":396},"代码笔记 / Gists","/source-code",[397],{"title":398,"_path":395},"🚄 代码笔记",{"title":400,"_path":401,"children":402},"我 / Abount","/hire",[403],{"title":404,"_path":401},"📬 技术简历",{"title":406,"_path":407,"children":408},"todo","/todo",[409],{"title":406,"_path":407},{"_path":411,"_dir":412,"_draft":413,"_partial":414,"_locale":415,"title":416,"description":415,"body":417,"_type":1538,"_id":1539,"_source":1540,"_file":1541,"_stem":1542,"_extension":1543},"/_books/ecma-262","_books",false,true,"","ECMAScript Standard",{"type":418,"children":419,"toc":1522},"root",[420,428,434,503,509,515,527,629,639,754,759,764,769,778,798,803,831,836,841,846,851,856,861,874,878,883,919,924,929,947,952,957,962,967,972,1453,1516],{"type":421,"tag":422,"props":423,"children":425},"element","h2",{"id":424},"资料",[426],{"type":427,"value":424},"text",{"type":421,"tag":429,"props":430,"children":431},"p",{},[432],{"type":427,"value":433},"一些极其有用的前置参考资料，有助于甄别与理解规范里各种概念，不至于被绕晕。",{"type":421,"tag":435,"props":436,"children":437},"ul",{},[438,457,472,490],{"type":421,"tag":439,"props":440,"children":441},"li",{},[442,455],{"type":421,"tag":443,"props":444,"children":448},"a",{"href":445,"rel":446},"https://timothygu.me/es-howto/",[447],"nofollow",[449],{"type":421,"tag":450,"props":451,"children":452},"i",{},[453],{"type":427,"value":454},"How to Read the ECMAScript Specification",{"type":427,"value":456},"，这个资料简要介绍了一些阅读规范时需要知悉且有助于你理解规范的前置概念并予例说明，比如说抽象操作、内部槽以及内部方法、完成记录、变异对象等。",{"type":421,"tag":439,"props":458,"children":459},{},[460,470],{"type":421,"tag":443,"props":461,"children":464},{"href":462,"rel":463},"https://v8.dev/blog/tags/understanding-ecmascript",[447],[465],{"type":421,"tag":450,"props":466,"children":467},{},[468],{"type":427,"value":469},"Understanding ECMAScript",{"type":427,"value":471},"，V8 团队写的 ECMAScript 阅读指南文章系列，一共四篇，很有参考价值。",{"type":421,"tag":439,"props":473,"children":474},{},[475,482,484,488],{"type":421,"tag":443,"props":476,"children":479},{"href":477,"rel":478},"https://juejin.cn/post/6944587399418609701",[447],[480],{"type":427,"value":481},"《ECMAScript 阅读指南》",{"type":427,"value":483},"，",{"type":421,"tag":450,"props":485,"children":486},{},[487],{"type":427,"value":469},{"type":427,"value":489}," 的翻译版本。",{"type":421,"tag":439,"props":491,"children":492},{},[493],{"type":421,"tag":443,"props":494,"children":497},{"href":495,"rel":496},"https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript",[447],[498],{"type":421,"tag":450,"props":499,"children":500},{},[501],{"type":427,"value":502},"What is the difference between JavaScript and ECMAScript?",{"type":421,"tag":504,"props":505,"children":507},"h3",{"id":506},"快速入门",[508],{"type":427,"value":506},{"type":421,"tag":510,"props":511,"children":513},"h4",{"id":512},"问号和感叹号简写标记",[514],{"type":427,"value":512},{"type":421,"tag":429,"props":516,"children":517},{},[518,525],{"type":421,"tag":519,"props":520,"children":522},"code",{"className":521},[],[523],{"type":427,"value":524},"Let val be ! Foo()",{"type":427,"value":526}," 等同于：",{"type":421,"tag":528,"props":529,"children":533},"pre",{"className":530,"code":531,"language":532,"meta":415,"style":415},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","1. Let val be Foo().\n2. Assert: val is not an abrupt completion.\n3. Set val to val.[[Value]].\n","js",[534],{"type":421,"tag":519,"props":535,"children":536},{"__ignoreMap":415},[537,572,601],{"type":421,"tag":538,"props":539,"children":542},"span",{"class":540,"line":541},"line",1,[543,549,555,561,566],{"type":421,"tag":538,"props":544,"children":546},{"style":545},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[547],{"type":427,"value":548},"1.",{"type":421,"tag":538,"props":550,"children":552},{"style":551},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[553],{"type":427,"value":554}," Let val be ",{"type":421,"tag":538,"props":556,"children":558},{"style":557},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[559],{"type":427,"value":560},"Foo",{"type":421,"tag":538,"props":562,"children":563},{"style":551},[564],{"type":427,"value":565},"()",{"type":421,"tag":538,"props":567,"children":569},{"style":568},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[570],{"type":427,"value":571},".\n",{"type":421,"tag":538,"props":573,"children":575},{"class":540,"line":574},2,[576,581,587,592,597],{"type":421,"tag":538,"props":577,"children":578},{"style":545},[579],{"type":427,"value":580},"2.",{"type":421,"tag":538,"props":582,"children":584},{"style":583},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[585],{"type":427,"value":586}," Assert",{"type":421,"tag":538,"props":588,"children":589},{"style":568},[590],{"type":427,"value":591},":",{"type":421,"tag":538,"props":593,"children":594},{"style":551},[595],{"type":427,"value":596}," val is not an abrupt completion",{"type":421,"tag":538,"props":598,"children":599},{"style":568},[600],{"type":427,"value":571},{"type":421,"tag":538,"props":602,"children":604},{"class":540,"line":603},3,[605,610,615,620,625],{"type":421,"tag":538,"props":606,"children":607},{"style":545},[608],{"type":427,"value":609},"3.",{"type":421,"tag":538,"props":611,"children":612},{"style":551},[613],{"type":427,"value":614}," Set val to val",{"type":421,"tag":538,"props":616,"children":617},{"style":568},[618],{"type":427,"value":619},".",{"type":421,"tag":538,"props":621,"children":622},{"style":551},[623],{"type":427,"value":624},"[[Value]]",{"type":421,"tag":538,"props":626,"children":627},{"style":568},[628],{"type":427,"value":571},{"type":421,"tag":429,"props":630,"children":631},{},[632,638],{"type":421,"tag":519,"props":633,"children":635},{"className":634},[],[636],{"type":427,"value":637},"Return ? Foo()",{"type":427,"value":526},{"type":421,"tag":528,"props":640,"children":642},{"className":530,"code":641,"language":532,"meta":415,"style":415},"1. Let temp be Foo().\n2. If temp is an abrupt completion, return temp.\n3. Set temp to temp.[[Value]].\n4. Return NormalCompletion(temp).\n",[643],{"type":421,"tag":519,"props":644,"children":645},{"__ignoreMap":415},[646,670,702,726],{"type":421,"tag":538,"props":647,"children":648},{"class":540,"line":541},[649,653,658,662,666],{"type":421,"tag":538,"props":650,"children":651},{"style":545},[652],{"type":427,"value":548},{"type":421,"tag":538,"props":654,"children":655},{"style":551},[656],{"type":427,"value":657}," Let temp be ",{"type":421,"tag":538,"props":659,"children":660},{"style":557},[661],{"type":427,"value":560},{"type":421,"tag":538,"props":663,"children":664},{"style":551},[665],{"type":427,"value":565},{"type":421,"tag":538,"props":667,"children":668},{"style":568},[669],{"type":427,"value":571},{"type":421,"tag":538,"props":671,"children":672},{"class":540,"line":574},[673,677,682,687,693,698],{"type":421,"tag":538,"props":674,"children":675},{"style":545},[676],{"type":427,"value":580},{"type":421,"tag":538,"props":678,"children":679},{"style":551},[680],{"type":427,"value":681}," If temp is an abrupt completion",{"type":421,"tag":538,"props":683,"children":684},{"style":568},[685],{"type":427,"value":686},",",{"type":421,"tag":538,"props":688,"children":690},{"style":689},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[691],{"type":427,"value":692}," return",{"type":421,"tag":538,"props":694,"children":695},{"style":551},[696],{"type":427,"value":697}," temp",{"type":421,"tag":538,"props":699,"children":700},{"style":568},[701],{"type":427,"value":571},{"type":421,"tag":538,"props":703,"children":704},{"class":540,"line":603},[705,709,714,718,722],{"type":421,"tag":538,"props":706,"children":707},{"style":545},[708],{"type":427,"value":609},{"type":421,"tag":538,"props":710,"children":711},{"style":551},[712],{"type":427,"value":713}," Set temp to temp",{"type":421,"tag":538,"props":715,"children":716},{"style":568},[717],{"type":427,"value":619},{"type":421,"tag":538,"props":719,"children":720},{"style":551},[721],{"type":427,"value":624},{"type":421,"tag":538,"props":723,"children":724},{"style":568},[725],{"type":427,"value":571},{"type":421,"tag":538,"props":727,"children":729},{"class":540,"line":728},4,[730,735,740,745,750],{"type":421,"tag":538,"props":731,"children":732},{"style":545},[733],{"type":427,"value":734},"4.",{"type":421,"tag":538,"props":736,"children":737},{"style":551},[738],{"type":427,"value":739}," Return ",{"type":421,"tag":538,"props":741,"children":742},{"style":557},[743],{"type":427,"value":744},"NormalCompletion",{"type":421,"tag":538,"props":746,"children":747},{"style":551},[748],{"type":427,"value":749},"(temp)",{"type":421,"tag":538,"props":751,"children":752},{"style":568},[753],{"type":427,"value":571},{"type":421,"tag":422,"props":755,"children":757},{"id":756},"规范综述",[758],{"type":427,"value":756},{"type":421,"tag":504,"props":760,"children":762},{"id":761},"语言组成",[763],{"type":427,"value":761},{"type":421,"tag":429,"props":765,"children":766},{},[767],{"type":427,"value":768},"常常能听到：“对象的本质就是实现了规范所要求的内部插槽的结构”，其实该观点源于这张图：",{"type":421,"tag":429,"props":770,"children":771},{},[772],{"type":421,"tag":773,"props":774,"children":777},"img",{"alt":775,"src":776},"对象的本质","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/timothygu.me_es-howto_object-uml.svg.png",[],{"type":421,"tag":429,"props":779,"children":780},{},[781,783,796],{"type":427,"value":782},"ECMAScript 是一种基于对象的基本语言，其基础设置主要依赖宿主提供的对象。基于此概念，可以把 ECMAScript 程序看作一组相互通讯的对象集合。按照规范，对象的精确描述其实应该是：“一个具有零或多个被属性描述符决定的属性的集合",{"type":421,"tag":784,"props":785,"children":786},"sup",{},[787],{"type":421,"tag":443,"props":788,"children":793},{"href":789,"ariaDescribedBy":790,"dataFootnoteRef":415,"id":792},"#user-content-fn-object-definition",[791],"footnote-label","user-content-fnref-object-definition",[794],{"type":427,"value":795},"1",{"type":427,"value":797},"”。对象的属性能持有其它值，包括规范定义的原始值：Undefined、Null、Boolean、Number、BigInt、String、Symbol 和 Object。这里说的 Object 还包括可执行对象，callable object，也就是函数。而由对象内属性持有的函数，叫做方法。",{"type":421,"tag":429,"props":799,"children":800},{},[801],{"type":427,"value":802},"按照上图，规范定义了包括全局对象、Object、Function 等对象以及操作这些对象所需要用到的操作符。除此之外，还定义了用于组织程序的模块，以及行文所需要用到的静态语法。组织方式如下：",{"type":421,"tag":435,"props":804,"children":805},{},[806,811,816,821,826],{"type":421,"tag":439,"props":807,"children":808},{},[809],{"type":427,"value":810},"章节 5 定义了规范所使用的符号约定。",{"type":421,"tag":439,"props":812,"children":813},{},[814],{"type":427,"value":815},"章节 6 至章节 10 定义了语言的运行环境。",{"type":421,"tag":439,"props":817,"children":818},{},[819],{"type":427,"value":820},"章节 11 至章节 17 定义了包括语法、语义在内的所有语言功能。",{"type":421,"tag":439,"props":822,"children":823},{},[824],{"type":427,"value":825},"章节 18 至章节 28 定义了语言依赖的标准库。",{"type":421,"tag":439,"props":827,"children":828},{},[829],{"type":427,"value":830},"章节 29 描述了支持 SharedArrayBuffer 以及 Atomics 对象方法访问的内存一致性模型。",{"type":421,"tag":504,"props":832,"children":834},{"id":833},"语言风格",[835],{"type":427,"value":833},{"type":421,"tag":429,"props":837,"children":838},{},[839],{"type":427,"value":840},"ECMAScript 基于对象，这和 C++、Java 不同的本质区别在于创建对象的方式以及属性共享思路的不同：ECMAScript 支持多种方式创建对象：构造器、字面量或 Object.create，而属性共享则是使用原型。使用原型意味着尽管 ECMAScript 支持类继承，但是是通过原型继承隐式实现的：每一个构造器函数都有一个原型属性，属性名为 prototype。以该构造器创建的实例会携带一个隐式的指向其构造器的原型的引用（称为实例的原型）。而构造器函数也是一个对象实例，所以也会有对应的原型。ECMAScript 依赖这条由对象原型组成的链条式的关系，即原型链，来共享属性。而在经典面向对象语言中，总的来说，属性（也就是状态）是直接挂载在实例上的，只有方法挂载在类上，这也就意味着类继承只约束了继承结构和对象的行为，没有约束对象的状态。此外，由于 ECMAScript 支持动态重写对象，这使得你可以在运行时去创建一个动态的继承结构。",{"type":421,"tag":429,"props":842,"children":843},{},[844],{"type":427,"value":845},"ECMAScript 被故意地设计成类 Java 的语法，这是历史原因。另一方面，其语法被考虑设计成尽可能简单的。规范对语言的具体描述是一种“通用编程语言”，并不是指代语言性质，如“脚本语言”，或是具体实现，如“JavaScript”。有不少其它语言也完整实现了规范，如微软早期的 JScript 和用于 Flash 的 ActionScript。从这个角度来看，JavaScript 应该看作 ECMAScript 的一种方言。",{"type":421,"tag":429,"props":847,"children":848},{},[849],{"type":427,"value":850},"如果从历史的角度来看，ECAMAScript 和 JavaScript 的关系会发生变化。JavaScript 是网景公司在宣发时使用的名称，这个语言一开始叫做 Mocha，而后又叫做 LiveScript。微软在 IE 中也做了一种实现，但由于版权问题卡喉咙，不能叫做 JavaScript，所以改为了 JScript。在网景公司没落前，他们起草了 ECMAScript 标准，用来规划 JavaScript 的发展路线。尽管网景没了，但规范则一直在更新，比如被人们熟知的 ES6，指代 ECMAScript 2015 6th Edition。ECMAScript 和 JavaScript 也就不仅仅应当被理解成标准和实现，它们还属于共生共荣的关系。",{"type":421,"tag":504,"props":852,"children":854},{"id":853},"宿主系统",[855],{"type":427,"value":853},{"type":421,"tag":429,"props":857,"children":858},{},[859],{"type":427,"value":860},"脚本语言是设计给包括非职业开发人员使用的语言，没有必要拥有主程序入口。所以脚本语言通常寄生于特定系统，依赖宿主提供的设施以完善语言功能，使用终端进行操作，以便人员操控程序或自动化流程。规范原本想设计一款 Web 脚本语言，用于客户端以响应用户在界面上的操作，使 Web 页面能够执行逻辑。但随着越来越广泛的使用，功能逐渐完善，ECMAScript 演变成为了通用程序语言。",{"type":421,"tag":429,"props":862,"children":863},{},[864,866,872],{"type":427,"value":865},"每一个支持 ECMAScript 的浏览器或者服务器端都拥有一个对应的宿主系统用于执行脚本。宿主系统的实现需要按照规范，不过规范对某些特征只描述了特定行为而没有给出具体算法。这些具体算法通常会由其它规范来实现，比如说 HTML 规范中定义的宏任务和微任务或 Math.exp 这种特定算法。总而言之，只要宿主系统和规范是一致的（见",{"type":421,"tag":443,"props":867,"children":869},{"href":868},"#%E4%B8%80%E8%87%B4%E6%80%A7",[870],{"type":427,"value":871},"一致性",{"type":427,"value":873},"）并实现了特定的行为如 Host Hooks、Host-defined Fileds、Host-defined Objects、Running Jobs、Internal Methods of Exotic Objects 和 Built-in Objects and Methods，就算是一个完整的 ECMAScript 宿主系统，就能正确地和规范进行交互。",{"type":421,"tag":504,"props":875,"children":876},{"id":871},[877],{"type":427,"value":871},{"type":421,"tag":429,"props":879,"children":880},{},[881],{"type":427,"value":882},"一致性是指，实现了 ECMAScript 规范（以下简称规范）的语言必须满足以下标准：",{"type":421,"tag":435,"props":884,"children":885},{},[886,904,909,914],{"type":421,"tag":439,"props":887,"children":888},{},[889,891,902],{"type":427,"value":890},"规范描述：类型系统、值、对象、属性、函数、语法、语义、严格模式",{"type":421,"tag":784,"props":892,"children":893},{},[894],{"type":421,"tag":443,"props":895,"children":899},{"href":896,"ariaDescribedBy":897,"dataFootnoteRef":415,"id":898},"#user-content-fn-strict-mode",[791],"user-content-fnref-strict-mode",[900],{"type":427,"value":901},"2",{"type":427,"value":903},"。",{"type":421,"tag":439,"props":905,"children":906},{},[907],{"type":427,"value":908},"编码标准：最新的 Unicode 标准以及 USC 标准。",{"type":421,"tag":439,"props":910,"children":911},{},[912],{"type":427,"value":913},"ECMA-402：ECMAScript 的国际化接口标准，即 Intl 相关规范。",{"type":421,"tag":439,"props":915,"children":916},{},[917],{"type":427,"value":918},"可选规范：可选规范要么全部不实现，要么全部都实现。目前在文档中只找到相关 WeakRef.prototype.constructor 初始值必须为 %WeakRef% 的可选规范。",{"type":421,"tag":429,"props":920,"children":921},{},[922],{"type":427,"value":923},"规范允许某些实现了规范的具体语言可以提供超出规范描述的内容，包括类型、值、对象...语法或是保留字的实现。",{"type":421,"tag":429,"props":925,"children":926},{},[927],{"type":427,"value":928},"另外，以下规范和 ECMAScript 相关，但不要求 ECMAScript 的宿主系统实现：",{"type":421,"tag":435,"props":930,"children":931},{},[932,937,942],{"type":421,"tag":439,"props":933,"children":934},{},[935],{"type":427,"value":936},"ISO/IEC 10646：UCS 规范。",{"type":421,"tag":439,"props":938,"children":939},{},[940],{"type":427,"value":941},"ECMA-402：国际化接口规范。",{"type":421,"tag":439,"props":943,"children":944},{},[945],{"type":427,"value":946},"ECMA-404：JSON 规范。",{"type":421,"tag":422,"props":948,"children":950},{"id":949},"规范类型和语言类型",[951],{"type":427,"value":949},{"type":421,"tag":429,"props":953,"children":954},{},[955],{"type":427,"value":956},"为什么要区分语言类型和规范类型呢？顾名思义，语言类型是 JavaScript 所使用的一种类型系统，包含比如 Null、Undefined、Object 等类型，但由于 JavaScript 需要由其它引擎实现，也就是说规范所描述的算法逻辑中携带的基本类型不是 JavaScript 语言中的基本类型，而更可能是诸如 C++ 中的数据类型。",{"type":421,"tag":422,"props":958,"children":960},{"id":959},"其它",[961],{"type":427,"value":959},{"type":421,"tag":504,"props":963,"children":965},{"id":964},"词汇表",[966],{"type":427,"value":964},{"type":421,"tag":429,"props":968,"children":969},{},[970],{"type":427,"value":971},"术语表及本文中相关中英翻译的集合。",{"type":421,"tag":973,"props":974,"children":975},"table",{},[976,1000],{"type":421,"tag":977,"props":978,"children":979},"thead",{},[980],{"type":421,"tag":981,"props":982,"children":983},"tr",{},[984,990,995],{"type":421,"tag":985,"props":986,"children":987},"th",{},[988],{"type":427,"value":989},"Source",{"type":421,"tag":985,"props":991,"children":992},{},[993],{"type":427,"value":994},"Chinese",{"type":421,"tag":985,"props":996,"children":997},{},[998],{"type":427,"value":999},"Meaning",{"type":421,"tag":1001,"props":1002,"children":1003},"tbody",{},[1004,1023,1041,1059,1077,1094,1115,1133,1158,1176,1194,1212,1230,1248,1265,1289,1306,1324,1342,1360,1378,1395,1417,1435],{"type":421,"tag":981,"props":1005,"children":1006},{},[1007,1013,1018],{"type":421,"tag":1008,"props":1009,"children":1010},"td",{},[1011],{"type":427,"value":1012},"attribute",{"type":421,"tag":1008,"props":1014,"children":1015},{},[1016],{"type":427,"value":1017},"属性",{"type":421,"tag":1008,"props":1019,"children":1020},{},[1021],{"type":427,"value":1022},"用来定义属性特性的内部值，比方说 [[Writable]]",{"type":421,"tag":981,"props":1024,"children":1025},{},[1026,1031,1036],{"type":421,"tag":1008,"props":1027,"children":1028},{},[1029],{"type":427,"value":1030},"arbitrary-precision",{"type":421,"tag":1008,"props":1032,"children":1033},{},[1034],{"type":427,"value":1035},"任意精度的",{"type":421,"tag":1008,"props":1037,"children":1038},{},[1039],{"type":427,"value":1040},"略",{"type":421,"tag":981,"props":1042,"children":1043},{},[1044,1049,1054],{"type":421,"tag":1008,"props":1045,"children":1046},{},[1047],{"type":427,"value":1048},"built-in function",{"type":421,"tag":1008,"props":1050,"children":1051},{},[1052],{"type":427,"value":1053},"内置对象",{"type":421,"tag":1008,"props":1055,"children":1056},{},[1057],{"type":427,"value":1058},"作为函数的内置对象",{"type":421,"tag":981,"props":1060,"children":1061},{},[1062,1067,1072],{"type":421,"tag":1008,"props":1063,"children":1064},{},[1065],{"type":427,"value":1066},"built-in method",{"type":421,"tag":1008,"props":1068,"children":1069},{},[1070],{"type":427,"value":1071},"内置方法",{"type":421,"tag":1008,"props":1073,"children":1074},{},[1075],{"type":427,"value":1076},"作为方法的内置函数",{"type":421,"tag":981,"props":1078,"children":1079},{},[1080,1085,1089],{"type":421,"tag":1008,"props":1081,"children":1082},{},[1083],{"type":427,"value":1084},"built-in object",{"type":421,"tag":1008,"props":1086,"children":1087},{},[1088],{"type":427,"value":1053},{"type":421,"tag":1008,"props":1090,"children":1091},{},[1092],{"type":427,"value":1093},"由规范定义（定义了具体实现）的对象",{"type":421,"tag":981,"props":1095,"children":1096},{},[1097,1102,1106],{"type":421,"tag":1008,"props":1098,"children":1099},{},[1100],{"type":427,"value":1101},"conformance",{"type":421,"tag":1008,"props":1103,"children":1104},{},[1105],{"type":427,"value":871},{"type":421,"tag":1008,"props":1107,"children":1108},{},[1109,1111],{"type":427,"value":1110},"见",{"type":421,"tag":443,"props":1112,"children":1113},{"href":868},[1114],{"type":427,"value":871},{"type":421,"tag":981,"props":1116,"children":1117},{},[1118,1123,1128],{"type":421,"tag":1008,"props":1119,"children":1120},{},[1121],{"type":427,"value":1122},"constructor",{"type":421,"tag":1008,"props":1124,"children":1125},{},[1126],{"type":427,"value":1127},"构造函数",{"type":421,"tag":1008,"props":1129,"children":1130},{},[1131],{"type":427,"value":1132},"用于创建和初始化对象用的函数",{"type":421,"tag":981,"props":1134,"children":1135},{},[1136,1141,1146],{"type":421,"tag":1008,"props":1137,"children":1138},{},[1139],{"type":427,"value":1140},"general-purpose programming language",{"type":421,"tag":1008,"props":1142,"children":1143},{},[1144],{"type":427,"value":1145},"通用编程语言",{"type":421,"tag":1008,"props":1147,"children":1148},{},[1149,1151],{"type":427,"value":1150},"被设计为可在各个应用领域使用的语言，见 ",{"type":421,"tag":443,"props":1152,"children":1155},{"href":1153,"rel":1154},"https://en.wikipedia.org/wiki/Special:Search/General-purpose_programming_language",[447],[1156],{"type":427,"value":1157},"General-purpose programming language",{"type":421,"tag":981,"props":1159,"children":1160},{},[1161,1166,1171],{"type":421,"tag":1008,"props":1162,"children":1163},{},[1164],{"type":427,"value":1165},"host-defined",{"type":421,"tag":1008,"props":1167,"children":1168},{},[1169],{"type":427,"value":1170},"宿主实现",{"type":421,"tag":1008,"props":1172,"children":1173},{},[1174],{"type":427,"value":1175},"同 implementation-defined",{"type":421,"tag":981,"props":1177,"children":1178},{},[1179,1184,1189],{"type":421,"tag":1008,"props":1180,"children":1181},{},[1182],{"type":427,"value":1183},"implementation-approximated",{"type":421,"tag":1008,"props":1185,"children":1186},{},[1187],{"type":427,"value":1188},"近似实现",{"type":421,"tag":1008,"props":1190,"children":1191},{},[1192],{"type":427,"value":1193},"规范依赖某些外部实现，而在规范内假设这种实现是“完美的”",{"type":421,"tag":981,"props":1195,"children":1196},{},[1197,1202,1207],{"type":421,"tag":1008,"props":1198,"children":1199},{},[1200],{"type":427,"value":1201},"implementation-defined",{"type":421,"tag":1008,"props":1203,"children":1204},{},[1205],{"type":427,"value":1206},"定义实现",{"type":421,"tag":1008,"props":1208,"children":1209},{},[1210],{"type":427,"value":1211},"规范依赖某些外部实现，外部实现的行为需要与规范描述的一致",{"type":421,"tag":981,"props":1213,"children":1214},{},[1215,1220,1225],{"type":421,"tag":1008,"props":1216,"children":1217},{},[1218],{"type":427,"value":1219},"inherited property",{"type":421,"tag":1008,"props":1221,"children":1222},{},[1223],{"type":427,"value":1224},"继承属性",{"type":421,"tag":1008,"props":1226,"children":1227},{},[1228],{"type":427,"value":1229},"对象内由原型继承的来的属性",{"type":421,"tag":981,"props":1231,"children":1232},{},[1233,1238,1243],{"type":421,"tag":1008,"props":1234,"children":1235},{},[1236],{"type":427,"value":1237},"method",{"type":421,"tag":1008,"props":1239,"children":1240},{},[1241],{"type":427,"value":1242},"方法",{"type":421,"tag":1008,"props":1244,"children":1245},{},[1246],{"type":427,"value":1247},"作为属性值的函数",{"type":421,"tag":981,"props":1249,"children":1250},{},[1251,1256,1261],{"type":421,"tag":1008,"props":1252,"children":1253},{},[1254],{"type":427,"value":1255},"module",{"type":421,"tag":1008,"props":1257,"children":1258},{},[1259],{"type":427,"value":1260},"模块",{"type":421,"tag":1008,"props":1262,"children":1263},{},[1264],{"type":427,"value":1040},{"type":421,"tag":981,"props":1266,"children":1267},{},[1268,1273,1277],{"type":421,"tag":1008,"props":1269,"children":1270},{},[1271],{"type":427,"value":1272},"NaN",{"type":421,"tag":1008,"props":1274,"children":1275},{},[1276],{"type":427,"value":1272},{"type":421,"tag":1008,"props":1278,"children":1279},{},[1280,1287],{"type":421,"tag":443,"props":1281,"children":1284},{"href":1282,"rel":1283},"https://ieeexplore.ieee.org/document/8766229",[447],[1285],{"type":427,"value":1286},"IEEE 754-2019",{"type":427,"value":1288}," 标准定义的“不是一个数字”的数值",{"type":421,"tag":981,"props":1290,"children":1291},{},[1292,1297,1302],{"type":421,"tag":1008,"props":1293,"children":1294},{},[1295],{"type":427,"value":1296},"normative optional",{"type":421,"tag":1008,"props":1298,"children":1299},{},[1300],{"type":427,"value":1301},"可选规范",{"type":421,"tag":1008,"props":1303,"children":1304},{},[1305],{"type":427,"value":1040},{"type":421,"tag":981,"props":1307,"children":1308},{},[1309,1314,1319],{"type":421,"tag":1008,"props":1310,"children":1311},{},[1312],{"type":427,"value":1313},"null value",{"type":421,"tag":1008,"props":1315,"children":1316},{},[1317],{"type":427,"value":1318},"空值",{"type":421,"tag":1008,"props":1320,"children":1321},{},[1322],{"type":427,"value":1323},"表示对象的值的某种刻意缺失",{"type":421,"tag":981,"props":1325,"children":1326},{},[1327,1332,1337],{"type":421,"tag":1008,"props":1328,"children":1329},{},[1330],{"type":427,"value":1331},"ordinary object",{"type":421,"tag":1008,"props":1333,"children":1334},{},[1335],{"type":427,"value":1336},"普通对象",{"type":421,"tag":1008,"props":1338,"children":1339},{},[1340],{"type":427,"value":1341},"实现了所有基本内部槽的默认功能的对象",{"type":421,"tag":981,"props":1343,"children":1344},{},[1345,1350,1355],{"type":421,"tag":1008,"props":1346,"children":1347},{},[1348],{"type":427,"value":1349},"own property",{"type":421,"tag":1008,"props":1351,"children":1352},{},[1353],{"type":427,"value":1354},"自有属性",{"type":421,"tag":1008,"props":1356,"children":1357},{},[1358],{"type":427,"value":1359},"作为该对象拥有的而不是通过原型继承获得的属性就叫该对象的自有属性",{"type":421,"tag":981,"props":1361,"children":1362},{},[1363,1368,1373],{"type":421,"tag":1008,"props":1364,"children":1365},{},[1366],{"type":427,"value":1367},"primitive value",{"type":421,"tag":1008,"props":1369,"children":1370},{},[1371],{"type":427,"value":1372},"原始值",{"type":421,"tag":1008,"props":1374,"children":1375},{},[1376],{"type":427,"value":1377},"不可再分的数据，Undefined, Null, Boolean, Number, BigInt, Symbol, String 中的一种",{"type":421,"tag":981,"props":1379,"children":1380},{},[1381,1386,1390],{"type":421,"tag":1008,"props":1382,"children":1383},{},[1384],{"type":427,"value":1385},"property",{"type":421,"tag":1008,"props":1387,"children":1388},{},[1389],{"type":427,"value":1017},{"type":421,"tag":1008,"props":1391,"children":1392},{},[1393],{"type":427,"value":1394},"组成对象的基本部分，包含键和对应的值",{"type":421,"tag":981,"props":1396,"children":1397},{},[1398,1403,1408],{"type":421,"tag":1008,"props":1399,"children":1400},{},[1401],{"type":427,"value":1402},"prototype",{"type":421,"tag":1008,"props":1404,"children":1405},{},[1406],{"type":427,"value":1407},"原型",{"type":421,"tag":1008,"props":1409,"children":1410},{},[1411,1412],{"type":427,"value":1110},{"type":421,"tag":443,"props":1413,"children":1415},{"href":1414},"#%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC",[1416],{"type":427,"value":833},{"type":421,"tag":981,"props":1418,"children":1419},{},[1420,1425,1430],{"type":421,"tag":1008,"props":1421,"children":1422},{},[1423],{"type":427,"value":1424},"standard object",{"type":421,"tag":1008,"props":1426,"children":1427},{},[1428],{"type":427,"value":1429},"标准对象",{"type":421,"tag":1008,"props":1431,"children":1432},{},[1433],{"type":427,"value":1434},"行为（语义）和规范一致的对象",{"type":421,"tag":981,"props":1436,"children":1437},{},[1438,1443,1448],{"type":421,"tag":1008,"props":1439,"children":1440},{},[1441],{"type":427,"value":1442},"undefined value",{"type":421,"tag":1008,"props":1444,"children":1445},{},[1446],{"type":427,"value":1447},"未定义值",{"type":421,"tag":1008,"props":1449,"children":1450},{},[1451],{"type":427,"value":1452},"表示变量初始化成功但未赋值",{"type":421,"tag":1454,"props":1455,"children":1458},"section",{"className":1456,"dataFootnotes":415},[1457],"footnotes",[1459,1466],{"type":421,"tag":422,"props":1460,"children":1463},{"className":1461,"id":791},[1462],"sr-only",[1464],{"type":427,"value":1465},"Footnotes",{"type":421,"tag":1467,"props":1468,"children":1469},"ol",{},[1470,1494],{"type":421,"tag":439,"props":1471,"children":1473},{"id":1472},"user-content-fn-object-definition",[1474,1476,1483,1485],{"type":427,"value":1475},"定义见 ",{"type":421,"tag":443,"props":1477,"children":1480},{"href":1478,"rel":1479},"https://262.ecma-international.org/12.0/#sec-terms-and-definitions-object",[447],[1481],{"type":427,"value":1482}," Terms and Definitions - object",{"type":427,"value":1484}," ",{"type":421,"tag":443,"props":1486,"children":1491},{"href":1487,"ariaLabel":1488,"className":1489,"dataFootnoteBackref":415},"#user-content-fnref-object-definition","Back to reference 1",[1490],"data-footnote-backref",[1492],{"type":427,"value":1493},"↩",{"type":421,"tag":439,"props":1495,"children":1497},{"id":1496},"user-content-fn-strict-mode",[1498,1500,1507,1509],{"type":427,"value":1499},"必须支持严格模式和非严格模式，并且能在一个符合程序中同时运行严格模式和非严格模式的代码，见 ",{"type":421,"tag":443,"props":1501,"children":1504},{"href":1502,"rel":1503},"https://262.ecma-international.org/12.0/#sec-strict-variant-of-ecmascript",[447],[1505],{"type":427,"value":1506},"The Strict Variant of ECMAScript",{"type":427,"value":1508},"。 ",{"type":421,"tag":443,"props":1510,"children":1514},{"href":1511,"ariaLabel":1512,"className":1513,"dataFootnoteBackref":415},"#user-content-fnref-strict-mode","Back to reference 2",[1490],[1515],{"type":427,"value":1493},{"type":421,"tag":1517,"props":1518,"children":1519},"style",{},[1520],{"type":427,"value":1521},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":415,"searchDepth":574,"depth":574,"links":1523},[1524,1527,1533,1534,1537],{"id":424,"depth":574,"text":424,"children":1525},[1526],{"id":506,"depth":603,"text":506},{"id":756,"depth":574,"text":756,"children":1528},[1529,1530,1531,1532],{"id":761,"depth":603,"text":761},{"id":833,"depth":603,"text":833},{"id":853,"depth":603,"text":853},{"id":871,"depth":603,"text":871},{"id":949,"depth":574,"text":949},{"id":959,"depth":574,"text":959,"children":1535},[1536],{"id":964,"depth":603,"text":964},{"id":791,"depth":574,"text":1465},"markdown","content:_books:ecma-262.md","content","_books/ecma-262.md","_books/ecma-262","md",[1545,1548],{"_path":1546,"title":1547,"description":415},"/_books/dear-ui","亲爱的界面",{"_path":1549,"title":1550,"description":415},"/_books","图书分类参考",1732808715884]