[{"data":1,"prerenderedAt":1367},["ShallowReactive",2],{"navigation":3,"/_books/ecma-262":161,"/_books/ecma-262-surround":1360},[4,35,92,98,125,131,155],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🖌️ Blockies Animation","/maps/_fe-framework/motion/blockies-animation",{"title":45,"_path":46},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":48,"_path":49},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":51,"_path":52},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":54,"_path":55},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":57,"_path":58},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":60,"_path":61},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":63,"_path":64},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":66,"_path":67},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":69,"_path":70},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":72,"_path":73},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":75,"_path":76},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":78,"_path":79},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":81,"_path":82},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":84,"_path":85},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":87,"_path":88},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":90,"_path":91},"📝 技术博客归档","/articles/archive",{"title":93,"_path":94,"children":95},"读书笔记 / Notes","/books",[96],{"title":97,"_path":94},"📕 读书笔记",{"title":99,"_path":100,"children":101},"吉他剧场 / Music","/music",[102,104,107,110,113,116,119,122],{"title":103,"_path":100},"🎸 FingerStyle！",{"title":105,"_path":106},"🌬️ 等待的风","/music/wind",{"title":108,"_path":109},"💕 约定的海洋","/music/ocean",{"title":111,"_path":112},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":114,"_path":115},"🌏 残酷天使的行动纲领","/music/eva",{"title":117,"_path":118},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":120,"_path":121},"🍷 Wu Wei","/music/wu-wei",{"title":123,"_path":124},"🌅 无题","/music/untitled",{"title":126,"_path":127,"children":128},"知识地图 / Maps","/maps",[129],{"title":130,"_path":127},"🏁 知识地图",{"title":132,"_path":133,"children":134},"造物 / Make","/tools",[135,137,140,143,146,149,152],{"title":136,"_path":133},"🧰 工具收集",{"title":138,"_path":139},"📕 博客","/tools/blog",{"title":141,"_path":142},"🥥 Coconut","/tools/coconut",{"title":144,"_path":145},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":147,"_path":148},"🌐 AnySort","/tools/anysort",{"title":150,"_path":151},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":153,"_path":154},"👓 Crapto","/tools/crypto-inline",{"title":156,"_path":157,"children":158},"我 / About","/hire",[159],{"title":160,"_path":157},"📬 技术简历",{"_path":162,"_dir":163,"_draft":164,"_partial":165,"_locale":166,"title":167,"description":166,"body":168,"_type":1354,"_id":1355,"_source":1356,"_file":1357,"_stem":1358,"_extension":1359},"/_books/ecma-262","_books",false,true,"","ECMAScript Standard",{"type":169,"children":170,"toc":1335},"root",[171,179,184,190,195,200,210,215,240,245,250,315,321,327,339,441,451,566,571,576,581,590,610,615,643,648,653,658,663,668,673,686,690,695,731,736,741,759,764,769,774,779,784,1266,1329],{"type":172,"tag":173,"props":174,"children":176},"element","h2",{"id":175},"其他",[177],{"type":178,"value":175},"text",{"type":172,"tag":173,"props":180,"children":182},{"id":181},"执行上下文",[183],{"type":178,"value":181},{"type":172,"tag":185,"props":186,"children":187},"p",{},[188],{"type":178,"value":189},"JS 中有三种不同的代码，全局代码（Global Code）、函数代码（Function Code）和求值代码（Eval Code）。",{"type":172,"tag":185,"props":191,"children":192},{},[193],{"type":178,"value":194},"无论哪一种类型的代码的执行，引擎总是提供了一个执行上下文（Execution Context）用来保存代码执行时相关的信息。",{"type":172,"tag":185,"props":196,"children":197},{},[198],{"type":178,"value":199},"执行上下文由以下几个部分组成：",{"type":172,"tag":201,"props":202,"children":203},"ul",{},[204],{"type":172,"tag":205,"props":206,"children":207},"li",{},[208],{"type":178,"value":209},"变量对象（Variable Object）：用来保存变量声明，比如通过 var a 声明的 a 变量，就会作为变量对象上的一个 a 属性保存下来。",{"type":172,"tag":173,"props":211,"children":213},{"id":212},"阅读更多",[214],{"type":178,"value":212},{"type":172,"tag":201,"props":216,"children":217},{},[218,230],{"type":172,"tag":205,"props":219,"children":220},{},[221],{"type":172,"tag":222,"props":223,"children":227},"a",{"href":224,"rel":225},"https://zhuanlan.zhihu.com/p/27875462",[226],"nofollow",[228],{"type":178,"value":229},"JS 规范中的 IsValidSimpleAssignmentTarget",{"type":172,"tag":205,"props":231,"children":232},{},[233],{"type":172,"tag":222,"props":234,"children":237},{"href":235,"rel":236},"https://stackoverflow.com/questions/15675427/what-is-a-primary-expression",[226],[238],{"type":178,"value":239},"What is a “primary expression”?",{"type":172,"tag":173,"props":241,"children":243},{"id":242},"资料",[244],{"type":178,"value":242},{"type":172,"tag":185,"props":246,"children":247},{},[248],{"type":178,"value":249},"一些极其有用的前置参考资料，有助于甄别与理解规范里各种概念，不至于被绕晕。",{"type":172,"tag":201,"props":251,"children":252},{},[253,269,284,302],{"type":172,"tag":205,"props":254,"children":255},{},[256,267],{"type":172,"tag":222,"props":257,"children":260},{"href":258,"rel":259},"https://timothygu.me/es-howto/",[226],[261],{"type":172,"tag":262,"props":263,"children":264},"i",{},[265],{"type":178,"value":266},"How to Read the ECMAScript Specification",{"type":178,"value":268},"，这个资料简要介绍了一些阅读规范时需要知悉且有助于你理解规范的前置概念并予例说明，比如说抽象操作、内部槽以及内部方法、完成记录、变异对象等。",{"type":172,"tag":205,"props":270,"children":271},{},[272,282],{"type":172,"tag":222,"props":273,"children":276},{"href":274,"rel":275},"https://v8.dev/blog/tags/understanding-ecmascript",[226],[277],{"type":172,"tag":262,"props":278,"children":279},{},[280],{"type":178,"value":281},"Understanding ECMAScript",{"type":178,"value":283},"，V8 团队写的 ECMAScript 阅读指南文章系列，一共四篇，很有参考价值。",{"type":172,"tag":205,"props":285,"children":286},{},[287,294,296,300],{"type":172,"tag":222,"props":288,"children":291},{"href":289,"rel":290},"https://juejin.cn/post/6944587399418609701",[226],[292],{"type":178,"value":293},"《ECMAScript 阅读指南》",{"type":178,"value":295},"，",{"type":172,"tag":262,"props":297,"children":298},{},[299],{"type":178,"value":281},{"type":178,"value":301}," 的翻译版本。",{"type":172,"tag":205,"props":303,"children":304},{},[305],{"type":172,"tag":222,"props":306,"children":309},{"href":307,"rel":308},"https://stackoverflow.com/questions/912479/what-is-the-difference-between-javascript-and-ecmascript",[226],[310],{"type":172,"tag":262,"props":311,"children":312},{},[313],{"type":178,"value":314},"What is the difference between JavaScript and ECMAScript?",{"type":172,"tag":316,"props":317,"children":319},"h3",{"id":318},"快速入门",[320],{"type":178,"value":318},{"type":172,"tag":322,"props":323,"children":325},"h4",{"id":324},"问号和感叹号简写标记",[326],{"type":178,"value":324},{"type":172,"tag":185,"props":328,"children":329},{},[330,337],{"type":172,"tag":331,"props":332,"children":334},"code",{"className":333},[],[335],{"type":178,"value":336},"Let val be ! Foo()",{"type":178,"value":338}," 等同于：",{"type":172,"tag":340,"props":341,"children":345},"pre",{"className":342,"code":343,"language":344,"meta":166,"style":166},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","1. Let val be Foo().\n2. Assert: val is not an abrupt completion.\n3. Set val to val.[[Value]].\n","js",[346],{"type":172,"tag":331,"props":347,"children":348},{"__ignoreMap":166},[349,384,413],{"type":172,"tag":350,"props":351,"children":354},"span",{"class":352,"line":353},"line",1,[355,361,367,373,378],{"type":172,"tag":350,"props":356,"children":358},{"style":357},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[359],{"type":178,"value":360},"1.",{"type":172,"tag":350,"props":362,"children":364},{"style":363},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[365],{"type":178,"value":366}," Let val be ",{"type":172,"tag":350,"props":368,"children":370},{"style":369},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[371],{"type":178,"value":372},"Foo",{"type":172,"tag":350,"props":374,"children":375},{"style":363},[376],{"type":178,"value":377},"()",{"type":172,"tag":350,"props":379,"children":381},{"style":380},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[382],{"type":178,"value":383},".\n",{"type":172,"tag":350,"props":385,"children":387},{"class":352,"line":386},2,[388,393,399,404,409],{"type":172,"tag":350,"props":389,"children":390},{"style":357},[391],{"type":178,"value":392},"2.",{"type":172,"tag":350,"props":394,"children":396},{"style":395},"--shiki-light:#E2931D;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#F8F8F2",[397],{"type":178,"value":398}," Assert",{"type":172,"tag":350,"props":400,"children":401},{"style":380},[402],{"type":178,"value":403},":",{"type":172,"tag":350,"props":405,"children":406},{"style":363},[407],{"type":178,"value":408}," val is not an abrupt completion",{"type":172,"tag":350,"props":410,"children":411},{"style":380},[412],{"type":178,"value":383},{"type":172,"tag":350,"props":414,"children":416},{"class":352,"line":415},3,[417,422,427,432,437],{"type":172,"tag":350,"props":418,"children":419},{"style":357},[420],{"type":178,"value":421},"3.",{"type":172,"tag":350,"props":423,"children":424},{"style":363},[425],{"type":178,"value":426}," Set val to val",{"type":172,"tag":350,"props":428,"children":429},{"style":380},[430],{"type":178,"value":431},".",{"type":172,"tag":350,"props":433,"children":434},{"style":363},[435],{"type":178,"value":436},"[[Value]]",{"type":172,"tag":350,"props":438,"children":439},{"style":380},[440],{"type":178,"value":383},{"type":172,"tag":185,"props":442,"children":443},{},[444,450],{"type":172,"tag":331,"props":445,"children":447},{"className":446},[],[448],{"type":178,"value":449},"Return ? Foo()",{"type":178,"value":338},{"type":172,"tag":340,"props":452,"children":454},{"className":342,"code":453,"language":344,"meta":166,"style":166},"1. Let temp be Foo().\n2. If temp is an abrupt completion, return temp.\n3. Set temp to temp.[[Value]].\n4. Return NormalCompletion(temp).\n",[455],{"type":172,"tag":331,"props":456,"children":457},{"__ignoreMap":166},[458,482,514,538],{"type":172,"tag":350,"props":459,"children":460},{"class":352,"line":353},[461,465,470,474,478],{"type":172,"tag":350,"props":462,"children":463},{"style":357},[464],{"type":178,"value":360},{"type":172,"tag":350,"props":466,"children":467},{"style":363},[468],{"type":178,"value":469}," Let temp be ",{"type":172,"tag":350,"props":471,"children":472},{"style":369},[473],{"type":178,"value":372},{"type":172,"tag":350,"props":475,"children":476},{"style":363},[477],{"type":178,"value":377},{"type":172,"tag":350,"props":479,"children":480},{"style":380},[481],{"type":178,"value":383},{"type":172,"tag":350,"props":483,"children":484},{"class":352,"line":386},[485,489,494,499,505,510],{"type":172,"tag":350,"props":486,"children":487},{"style":357},[488],{"type":178,"value":392},{"type":172,"tag":350,"props":490,"children":491},{"style":363},[492],{"type":178,"value":493}," If temp is an abrupt completion",{"type":172,"tag":350,"props":495,"children":496},{"style":380},[497],{"type":178,"value":498},",",{"type":172,"tag":350,"props":500,"children":502},{"style":501},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[503],{"type":178,"value":504}," return",{"type":172,"tag":350,"props":506,"children":507},{"style":363},[508],{"type":178,"value":509}," temp",{"type":172,"tag":350,"props":511,"children":512},{"style":380},[513],{"type":178,"value":383},{"type":172,"tag":350,"props":515,"children":516},{"class":352,"line":415},[517,521,526,530,534],{"type":172,"tag":350,"props":518,"children":519},{"style":357},[520],{"type":178,"value":421},{"type":172,"tag":350,"props":522,"children":523},{"style":363},[524],{"type":178,"value":525}," Set temp to temp",{"type":172,"tag":350,"props":527,"children":528},{"style":380},[529],{"type":178,"value":431},{"type":172,"tag":350,"props":531,"children":532},{"style":363},[533],{"type":178,"value":436},{"type":172,"tag":350,"props":535,"children":536},{"style":380},[537],{"type":178,"value":383},{"type":172,"tag":350,"props":539,"children":541},{"class":352,"line":540},4,[542,547,552,557,562],{"type":172,"tag":350,"props":543,"children":544},{"style":357},[545],{"type":178,"value":546},"4.",{"type":172,"tag":350,"props":548,"children":549},{"style":363},[550],{"type":178,"value":551}," Return ",{"type":172,"tag":350,"props":553,"children":554},{"style":369},[555],{"type":178,"value":556},"NormalCompletion",{"type":172,"tag":350,"props":558,"children":559},{"style":363},[560],{"type":178,"value":561},"(temp)",{"type":172,"tag":350,"props":563,"children":564},{"style":380},[565],{"type":178,"value":383},{"type":172,"tag":173,"props":567,"children":569},{"id":568},"规范综述",[570],{"type":178,"value":568},{"type":172,"tag":316,"props":572,"children":574},{"id":573},"语言组成",[575],{"type":178,"value":573},{"type":172,"tag":185,"props":577,"children":578},{},[579],{"type":178,"value":580},"常常能听到：“对象的本质就是实现了规范所要求的内部插槽的结构”，其实该观点源于这张图：",{"type":172,"tag":185,"props":582,"children":583},{},[584],{"type":172,"tag":585,"props":586,"children":589},"img",{"alt":587,"src":588},"对象的本质","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/timothygu.me_es-howto_object-uml.svg.png",[],{"type":172,"tag":185,"props":591,"children":592},{},[593,595,608],{"type":178,"value":594},"ECMAScript 是一种基于对象的基本语言，其基础设置主要依赖宿主提供的对象。基于此概念，可以把 ECMAScript 程序看作一组相互通讯的对象集合。按照规范，对象的精确描述其实应该是：“一个具有零或多个被属性描述符决定的属性的集合 ",{"type":172,"tag":596,"props":597,"children":598},"sup",{},[599],{"type":172,"tag":222,"props":600,"children":605},{"href":601,"ariaDescribedBy":602,"dataFootnoteRef":166,"id":604},"#user-content-fn-object-definition",[603],"footnote-label","user-content-fnref-object-definition",[606],{"type":178,"value":607},"1",{"type":178,"value":609},"”。对象的属性能持有其它值，包括规范定义的原始值：Undefined、Null、Boolean、Number、BigInt、String、Symbol 和 Object。这里说的 Object 还包括可执行对象，callable object，也就是函数。而由对象内属性持有的函数，叫做方法。",{"type":172,"tag":185,"props":611,"children":612},{},[613],{"type":178,"value":614},"按照上图，规范定义了包括全局对象、Object、Function 等对象以及操作这些对象所需要用到的操作符。除此之外，还定义了用于组织程序的模块，以及行文所需要用到的静态语法。组织方式如下：",{"type":172,"tag":201,"props":616,"children":617},{},[618,623,628,633,638],{"type":172,"tag":205,"props":619,"children":620},{},[621],{"type":178,"value":622},"章节 5 定义了规范所使用的符号约定。",{"type":172,"tag":205,"props":624,"children":625},{},[626],{"type":178,"value":627},"章节 6 至章节 10 定义了语言的运行环境。",{"type":172,"tag":205,"props":629,"children":630},{},[631],{"type":178,"value":632},"章节 11 至章节 17 定义了包括语法、语义在内的所有语言功能。",{"type":172,"tag":205,"props":634,"children":635},{},[636],{"type":178,"value":637},"章节 18 至章节 28 定义了语言依赖的标准库。",{"type":172,"tag":205,"props":639,"children":640},{},[641],{"type":178,"value":642},"章节 29 描述了支持 SharedArrayBuffer 以及 Atomics 对象方法访问的内存一致性模型。",{"type":172,"tag":316,"props":644,"children":646},{"id":645},"语言风格",[647],{"type":178,"value":645},{"type":172,"tag":185,"props":649,"children":650},{},[651],{"type":178,"value":652},"ECMAScript 基于对象，这和 C++、Java 不同的本质区别在于创建对象的方式以及属性共享思路的不同：ECMAScript 支持多种方式创建对象：构造器、字面量或 Object.create，而属性共享则是使用原型。使用原型意味着尽管 ECMAScript 支持类继承，但是是通过原型继承隐式实现的：每一个构造器函数都有一个原型属性，属性名为 prototype。以该构造器创建的实例会携带一个隐式的指向其构造器的原型的引用（称为实例的原型）。而构造器函数也是一个对象实例，所以也会有对应的原型。ECMAScript 依赖这条由对象原型组成的链条式的关系，即原型链，来共享属性。而在经典面向对象语言中，总的来说，属性（也就是状态）是直接挂载在实例上的，只有方法挂载在类上，这也就意味着类继承只约束了继承结构和对象的行为，没有约束对象的状态。此外，由于 ECMAScript 支持动态重写对象，这使得你可以在运行时去创建一个动态的继承结构。",{"type":172,"tag":185,"props":654,"children":655},{},[656],{"type":178,"value":657},"ECMAScript 被故意地设计成类 Java 的语法，这是历史原因。另一方面，其语法被考虑设计成尽可能简单的。规范对语言的具体描述是一种“通用编程语言”，并不是指代语言性质，如“脚本语言”，或是具体实现，如“JavaScript”。有不少其它语言也完整实现了规范，如微软早期的 JScript 和用于 Flash 的 ActionScript。从这个角度来看，JavaScript 应该看作 ECMAScript 的一种方言。",{"type":172,"tag":185,"props":659,"children":660},{},[661],{"type":178,"value":662},"如果从历史的角度来看，ECAMAScript 和 JavaScript 的关系会发生变化。JavaScript 是网景公司在宣发时使用的名称，这个语言一开始叫做 Mocha，而后又叫做 LiveScript。微软在 IE 中也做了一种实现，但由于版权问题卡喉咙，不能叫做 JavaScript，所以改为了 JScript。在网景公司没落前，他们起草了 ECMAScript 标准，用来规划 JavaScript 的发展路线。尽管网景没了，但规范则一直在更新，比如被人们熟知的 ES6，指代 ECMAScript 2015 6th Edition。ECMAScript 和 JavaScript 也就不仅仅应当被理解成标准和实现，它们还属于共生共荣的关系。",{"type":172,"tag":316,"props":664,"children":666},{"id":665},"宿主系统",[667],{"type":178,"value":665},{"type":172,"tag":185,"props":669,"children":670},{},[671],{"type":178,"value":672},"脚本语言是设计给包括非职业开发人员使用的语言，没有必要拥有主程序入口。所以脚本语言通常寄生于特定系统，依赖宿主提供的设施以完善语言功能，使用终端进行操作，以便人员操控程序或自动化流程。规范原本想设计一款 Web 脚本语言，用于客户端以响应用户在界面上的操作，使 Web 页面能够执行逻辑。但随着越来越广泛的使用，功能逐渐完善，ECMAScript 演变成为了通用程序语言。",{"type":172,"tag":185,"props":674,"children":675},{},[676,678,684],{"type":178,"value":677},"每一个支持 ECMAScript 的浏览器或者服务器端都拥有一个对应的宿主系统用于执行脚本。宿主系统的实现需要按照规范，不过规范对某些特征只描述了特定行为而没有给出具体算法。这些具体算法通常会由其它规范来实现，比如说 HTML 规范中定义的宏任务和微任务或 Math.exp 这种特定算法。总而言之，只要宿主系统和规范是一致的（见 ",{"type":172,"tag":222,"props":679,"children":681},{"href":680},"#%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%89",[682],{"type":178,"value":683},"一致性",{"type":178,"value":685},"并实现了特定的行为如 Host Hooks、Host-defined Fileds、Host-defined Objects、Running Jobs、Internal Methods of Exotic Objects 和 Built-in Objects and Methods，就算是一个完整的 ECMAScript 宿主系统，就能正确地和规范进行交互。",{"type":172,"tag":316,"props":687,"children":688},{"id":683},[689],{"type":178,"value":683},{"type":172,"tag":185,"props":691,"children":692},{},[693],{"type":178,"value":694},"一致性是指，实现了 ECMAScript 规范（以下简称规范）的语言必须满足以下标准：",{"type":172,"tag":201,"props":696,"children":697},{},[698,716,721,726],{"type":172,"tag":205,"props":699,"children":700},{},[701,703,714],{"type":178,"value":702},"规范描述：类型系统、值、对象、属性、函数、语法、语义、严格模式 ",{"type":172,"tag":596,"props":704,"children":705},{},[706],{"type":172,"tag":222,"props":707,"children":711},{"href":708,"ariaDescribedBy":709,"dataFootnoteRef":166,"id":710},"#user-content-fn-strict-mode",[603],"user-content-fnref-strict-mode",[712],{"type":178,"value":713},"2",{"type":178,"value":715},"。",{"type":172,"tag":205,"props":717,"children":718},{},[719],{"type":178,"value":720},"编码标准：最新的 Unicode 标准以及 USC 标准。",{"type":172,"tag":205,"props":722,"children":723},{},[724],{"type":178,"value":725},"ECMA-402：ECMAScript 的国际化接口标准，即 Intl 相关规范。",{"type":172,"tag":205,"props":727,"children":728},{},[729],{"type":178,"value":730},"可选规范：可选规范要么全部不实现，要么全部都实现。目前在文档中只找到相关 WeakRef.prototype.constructor 初始值必须为 %WeakRef% 的可选规范。",{"type":172,"tag":185,"props":732,"children":733},{},[734],{"type":178,"value":735},"规范允许某些实现了规范的具体语言可以提供超出规范描述的内容，包括类型、值、对象。.. 语法或是保留字的实现。",{"type":172,"tag":185,"props":737,"children":738},{},[739],{"type":178,"value":740},"另外，以下规范和 ECMAScript 相关，但不要求 ECMAScript 的宿主系统实现：",{"type":172,"tag":201,"props":742,"children":743},{},[744,749,754],{"type":172,"tag":205,"props":745,"children":746},{},[747],{"type":178,"value":748},"ISO/IEC 10646：UCS 规范。",{"type":172,"tag":205,"props":750,"children":751},{},[752],{"type":178,"value":753},"ECMA-402：国际化接口规范。",{"type":172,"tag":205,"props":755,"children":756},{},[757],{"type":178,"value":758},"ECMA-404：JSON 规范。",{"type":172,"tag":173,"props":760,"children":762},{"id":761},"规范类型和语言类型",[763],{"type":178,"value":761},{"type":172,"tag":185,"props":765,"children":766},{},[767],{"type":178,"value":768},"为什么要区分语言类型和规范类型呢？顾名思义，语言类型是 JavaScript 所使用的一种类型系统，包含比如 Null、Undefined、Object 等类型，但由于 JavaScript 需要由其它引擎实现，也就是说规范所描述的算法逻辑中携带的基本类型不是 JavaScript 语言中的基本类型，而更可能是诸如 C++ 中的数据类型。",{"type":172,"tag":173,"props":770,"children":772},{"id":771},"其它",[773],{"type":178,"value":771},{"type":172,"tag":316,"props":775,"children":777},{"id":776},"词汇表",[778],{"type":178,"value":776},{"type":172,"tag":185,"props":780,"children":781},{},[782],{"type":178,"value":783},"术语表及本文中相关中英翻译的集合。",{"type":172,"tag":785,"props":786,"children":787},"table",{},[788,812],{"type":172,"tag":789,"props":790,"children":791},"thead",{},[792],{"type":172,"tag":793,"props":794,"children":795},"tr",{},[796,802,807],{"type":172,"tag":797,"props":798,"children":799},"th",{},[800],{"type":178,"value":801},"Source",{"type":172,"tag":797,"props":803,"children":804},{},[805],{"type":178,"value":806},"Chinese",{"type":172,"tag":797,"props":808,"children":809},{},[810],{"type":178,"value":811},"Meaning",{"type":172,"tag":813,"props":814,"children":815},"tbody",{},[816,835,853,871,889,906,928,946,971,989,1007,1025,1043,1061,1078,1102,1119,1137,1155,1173,1191,1208,1230,1248],{"type":172,"tag":793,"props":817,"children":818},{},[819,825,830],{"type":172,"tag":820,"props":821,"children":822},"td",{},[823],{"type":178,"value":824},"attribute",{"type":172,"tag":820,"props":826,"children":827},{},[828],{"type":178,"value":829},"属性",{"type":172,"tag":820,"props":831,"children":832},{},[833],{"type":178,"value":834},"用来定义属性特性的内部值，比方说 [[Writable]]",{"type":172,"tag":793,"props":836,"children":837},{},[838,843,848],{"type":172,"tag":820,"props":839,"children":840},{},[841],{"type":178,"value":842},"arbitrary-precision",{"type":172,"tag":820,"props":844,"children":845},{},[846],{"type":178,"value":847},"任意精度的",{"type":172,"tag":820,"props":849,"children":850},{},[851],{"type":178,"value":852},"略",{"type":172,"tag":793,"props":854,"children":855},{},[856,861,866],{"type":172,"tag":820,"props":857,"children":858},{},[859],{"type":178,"value":860},"built-in function",{"type":172,"tag":820,"props":862,"children":863},{},[864],{"type":178,"value":865},"内置对象",{"type":172,"tag":820,"props":867,"children":868},{},[869],{"type":178,"value":870},"作为函数的内置对象",{"type":172,"tag":793,"props":872,"children":873},{},[874,879,884],{"type":172,"tag":820,"props":875,"children":876},{},[877],{"type":178,"value":878},"built-in method",{"type":172,"tag":820,"props":880,"children":881},{},[882],{"type":178,"value":883},"内置方法",{"type":172,"tag":820,"props":885,"children":886},{},[887],{"type":178,"value":888},"作为方法的内置函数",{"type":172,"tag":793,"props":890,"children":891},{},[892,897,901],{"type":172,"tag":820,"props":893,"children":894},{},[895],{"type":178,"value":896},"built-in object",{"type":172,"tag":820,"props":898,"children":899},{},[900],{"type":178,"value":865},{"type":172,"tag":820,"props":902,"children":903},{},[904],{"type":178,"value":905},"由规范定义（定义了具体实现）的对象",{"type":172,"tag":793,"props":907,"children":908},{},[909,914,918],{"type":172,"tag":820,"props":910,"children":911},{},[912],{"type":178,"value":913},"conformance",{"type":172,"tag":820,"props":915,"children":916},{},[917],{"type":178,"value":683},{"type":172,"tag":820,"props":919,"children":920},{},[921,923],{"type":178,"value":922},"见 ",{"type":172,"tag":222,"props":924,"children":926},{"href":925},"#%E4%B8%80%E8%87%B4%E6%80%A7",[927],{"type":178,"value":683},{"type":172,"tag":793,"props":929,"children":930},{},[931,936,941],{"type":172,"tag":820,"props":932,"children":933},{},[934],{"type":178,"value":935},"constructor",{"type":172,"tag":820,"props":937,"children":938},{},[939],{"type":178,"value":940},"构造函数",{"type":172,"tag":820,"props":942,"children":943},{},[944],{"type":178,"value":945},"用于创建和初始化对象用的函数",{"type":172,"tag":793,"props":947,"children":948},{},[949,954,959],{"type":172,"tag":820,"props":950,"children":951},{},[952],{"type":178,"value":953},"general-purpose programming language",{"type":172,"tag":820,"props":955,"children":956},{},[957],{"type":178,"value":958},"通用编程语言",{"type":172,"tag":820,"props":960,"children":961},{},[962,964],{"type":178,"value":963},"被设计为可在各个应用领域使用的语言，见 ",{"type":172,"tag":222,"props":965,"children":968},{"href":966,"rel":967},"https://en.wikipedia.org/wiki/Special:Search/General-purpose_programming_language",[226],[969],{"type":178,"value":970},"General-purpose programming language",{"type":172,"tag":793,"props":972,"children":973},{},[974,979,984],{"type":172,"tag":820,"props":975,"children":976},{},[977],{"type":178,"value":978},"host-defined",{"type":172,"tag":820,"props":980,"children":981},{},[982],{"type":178,"value":983},"宿主实现",{"type":172,"tag":820,"props":985,"children":986},{},[987],{"type":178,"value":988},"同 implementation-defined",{"type":172,"tag":793,"props":990,"children":991},{},[992,997,1002],{"type":172,"tag":820,"props":993,"children":994},{},[995],{"type":178,"value":996},"implementation-approximated",{"type":172,"tag":820,"props":998,"children":999},{},[1000],{"type":178,"value":1001},"近似实现",{"type":172,"tag":820,"props":1003,"children":1004},{},[1005],{"type":178,"value":1006},"规范依赖某些外部实现，而在规范内假设这种实现是“完美的”",{"type":172,"tag":793,"props":1008,"children":1009},{},[1010,1015,1020],{"type":172,"tag":820,"props":1011,"children":1012},{},[1013],{"type":178,"value":1014},"implementation-defined",{"type":172,"tag":820,"props":1016,"children":1017},{},[1018],{"type":178,"value":1019},"定义实现",{"type":172,"tag":820,"props":1021,"children":1022},{},[1023],{"type":178,"value":1024},"规范依赖某些外部实现，外部实现的行为需要与规范描述的一致",{"type":172,"tag":793,"props":1026,"children":1027},{},[1028,1033,1038],{"type":172,"tag":820,"props":1029,"children":1030},{},[1031],{"type":178,"value":1032},"inherited property",{"type":172,"tag":820,"props":1034,"children":1035},{},[1036],{"type":178,"value":1037},"继承属性",{"type":172,"tag":820,"props":1039,"children":1040},{},[1041],{"type":178,"value":1042},"对象内由原型继承的来的属性",{"type":172,"tag":793,"props":1044,"children":1045},{},[1046,1051,1056],{"type":172,"tag":820,"props":1047,"children":1048},{},[1049],{"type":178,"value":1050},"method",{"type":172,"tag":820,"props":1052,"children":1053},{},[1054],{"type":178,"value":1055},"方法",{"type":172,"tag":820,"props":1057,"children":1058},{},[1059],{"type":178,"value":1060},"作为属性值的函数",{"type":172,"tag":793,"props":1062,"children":1063},{},[1064,1069,1074],{"type":172,"tag":820,"props":1065,"children":1066},{},[1067],{"type":178,"value":1068},"module",{"type":172,"tag":820,"props":1070,"children":1071},{},[1072],{"type":178,"value":1073},"模块",{"type":172,"tag":820,"props":1075,"children":1076},{},[1077],{"type":178,"value":852},{"type":172,"tag":793,"props":1079,"children":1080},{},[1081,1086,1090],{"type":172,"tag":820,"props":1082,"children":1083},{},[1084],{"type":178,"value":1085},"NaN",{"type":172,"tag":820,"props":1087,"children":1088},{},[1089],{"type":178,"value":1085},{"type":172,"tag":820,"props":1091,"children":1092},{},[1093,1100],{"type":172,"tag":222,"props":1094,"children":1097},{"href":1095,"rel":1096},"https://ieeexplore.ieee.org/document/8766229",[226],[1098],{"type":178,"value":1099},"IEEE 754-2019",{"type":178,"value":1101}," 标准定义的“不是一个数字”的数值",{"type":172,"tag":793,"props":1103,"children":1104},{},[1105,1110,1115],{"type":172,"tag":820,"props":1106,"children":1107},{},[1108],{"type":178,"value":1109},"normative optional",{"type":172,"tag":820,"props":1111,"children":1112},{},[1113],{"type":178,"value":1114},"可选规范",{"type":172,"tag":820,"props":1116,"children":1117},{},[1118],{"type":178,"value":852},{"type":172,"tag":793,"props":1120,"children":1121},{},[1122,1127,1132],{"type":172,"tag":820,"props":1123,"children":1124},{},[1125],{"type":178,"value":1126},"null value",{"type":172,"tag":820,"props":1128,"children":1129},{},[1130],{"type":178,"value":1131},"空值",{"type":172,"tag":820,"props":1133,"children":1134},{},[1135],{"type":178,"value":1136},"表示对象的值的某种刻意缺失",{"type":172,"tag":793,"props":1138,"children":1139},{},[1140,1145,1150],{"type":172,"tag":820,"props":1141,"children":1142},{},[1143],{"type":178,"value":1144},"ordinary object",{"type":172,"tag":820,"props":1146,"children":1147},{},[1148],{"type":178,"value":1149},"普通对象",{"type":172,"tag":820,"props":1151,"children":1152},{},[1153],{"type":178,"value":1154},"实现了所有基本内部槽的默认功能的对象",{"type":172,"tag":793,"props":1156,"children":1157},{},[1158,1163,1168],{"type":172,"tag":820,"props":1159,"children":1160},{},[1161],{"type":178,"value":1162},"own property",{"type":172,"tag":820,"props":1164,"children":1165},{},[1166],{"type":178,"value":1167},"自有属性",{"type":172,"tag":820,"props":1169,"children":1170},{},[1171],{"type":178,"value":1172},"作为该对象拥有的而不是通过原型继承获得的属性就叫该对象的自有属性",{"type":172,"tag":793,"props":1174,"children":1175},{},[1176,1181,1186],{"type":172,"tag":820,"props":1177,"children":1178},{},[1179],{"type":178,"value":1180},"primitive value",{"type":172,"tag":820,"props":1182,"children":1183},{},[1184],{"type":178,"value":1185},"原始值",{"type":172,"tag":820,"props":1187,"children":1188},{},[1189],{"type":178,"value":1190},"不可再分的数据，Undefined, Null, Boolean, Number, BigInt, Symbol, String 中的一种",{"type":172,"tag":793,"props":1192,"children":1193},{},[1194,1199,1203],{"type":172,"tag":820,"props":1195,"children":1196},{},[1197],{"type":178,"value":1198},"property",{"type":172,"tag":820,"props":1200,"children":1201},{},[1202],{"type":178,"value":829},{"type":172,"tag":820,"props":1204,"children":1205},{},[1206],{"type":178,"value":1207},"组成对象的基本部分，包含键和对应的值",{"type":172,"tag":793,"props":1209,"children":1210},{},[1211,1216,1221],{"type":172,"tag":820,"props":1212,"children":1213},{},[1214],{"type":178,"value":1215},"prototype",{"type":172,"tag":820,"props":1217,"children":1218},{},[1219],{"type":178,"value":1220},"原型",{"type":172,"tag":820,"props":1222,"children":1223},{},[1224,1225],{"type":178,"value":922},{"type":172,"tag":222,"props":1226,"children":1228},{"href":1227},"#%E8%AF%AD%E8%A8%80%E9%A3%8E%E6%A0%BC",[1229],{"type":178,"value":645},{"type":172,"tag":793,"props":1231,"children":1232},{},[1233,1238,1243],{"type":172,"tag":820,"props":1234,"children":1235},{},[1236],{"type":178,"value":1237},"standard object",{"type":172,"tag":820,"props":1239,"children":1240},{},[1241],{"type":178,"value":1242},"标准对象",{"type":172,"tag":820,"props":1244,"children":1245},{},[1246],{"type":178,"value":1247},"行为（语义）和规范一致的对象",{"type":172,"tag":793,"props":1249,"children":1250},{},[1251,1256,1261],{"type":172,"tag":820,"props":1252,"children":1253},{},[1254],{"type":178,"value":1255},"undefined value",{"type":172,"tag":820,"props":1257,"children":1258},{},[1259],{"type":178,"value":1260},"未定义值",{"type":172,"tag":820,"props":1262,"children":1263},{},[1264],{"type":178,"value":1265},"表示变量初始化成功但未赋值",{"type":172,"tag":1267,"props":1268,"children":1271},"section",{"className":1269,"dataFootnotes":166},[1270],"footnotes",[1272,1279],{"type":172,"tag":173,"props":1273,"children":1276},{"className":1274,"id":603},[1275],"sr-only",[1277],{"type":178,"value":1278},"Footnotes",{"type":172,"tag":1280,"props":1281,"children":1282},"ol",{},[1283,1307],{"type":172,"tag":205,"props":1284,"children":1286},{"id":1285},"user-content-fn-object-definition",[1287,1289,1296,1298],{"type":178,"value":1288},"定义见 ",{"type":172,"tag":222,"props":1290,"children":1293},{"href":1291,"rel":1292},"https://262.ecma-international.org/12.0/#sec-terms-and-definitions-object",[226],[1294],{"type":178,"value":1295}," Terms and Definitions - object",{"type":178,"value":1297}," ",{"type":172,"tag":222,"props":1299,"children":1304},{"href":1300,"ariaLabel":1301,"className":1302,"dataFootnoteBackref":166},"#user-content-fnref-object-definition","Back to reference 1",[1303],"data-footnote-backref",[1305],{"type":178,"value":1306},"↩",{"type":172,"tag":205,"props":1308,"children":1310},{"id":1309},"user-content-fn-strict-mode",[1311,1313,1320,1322],{"type":178,"value":1312},"必须支持严格模式和非严格模式，并且能在一个符合程序中同时运行严格模式和非严格模式的代码，见 ",{"type":172,"tag":222,"props":1314,"children":1317},{"href":1315,"rel":1316},"https://262.ecma-international.org/12.0/#sec-strict-variant-of-ecmascript",[226],[1318],{"type":178,"value":1319},"The Strict Variant of ECMAScript",{"type":178,"value":1321},"。 ",{"type":172,"tag":222,"props":1323,"children":1327},{"href":1324,"ariaLabel":1325,"className":1326,"dataFootnoteBackref":166},"#user-content-fnref-strict-mode","Back to reference 2",[1303],[1328],{"type":178,"value":1306},{"type":172,"tag":1330,"props":1331,"children":1332},"style",{},[1333],{"type":178,"value":1334},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":166,"searchDepth":386,"depth":386,"links":1336},[1337,1338,1339,1340,1343,1349,1350,1353],{"id":175,"depth":386,"text":175},{"id":181,"depth":386,"text":181},{"id":212,"depth":386,"text":212},{"id":242,"depth":386,"text":242,"children":1341},[1342],{"id":318,"depth":415,"text":318},{"id":568,"depth":386,"text":568,"children":1344},[1345,1346,1347,1348],{"id":573,"depth":415,"text":573},{"id":645,"depth":415,"text":645},{"id":665,"depth":415,"text":665},{"id":683,"depth":415,"text":683},{"id":761,"depth":386,"text":761},{"id":771,"depth":386,"text":771,"children":1351},[1352],{"id":776,"depth":415,"text":776},{"id":603,"depth":386,"text":1278},"markdown","content:_books:ecma-262.md","content","_books/ecma-262.md","_books/ecma-262","md",[1361,1364],{"_path":1362,"title":1363,"description":166},"/_books/dear-ui","亲爱的界面",{"_path":1365,"title":1366,"description":166},"/_books","图书分类参考",1750854374423]