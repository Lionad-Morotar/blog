(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{988:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"包管理器"}},[t._v("包管理器")]),t._v(" "),e("nav",{staticClass:"table-of-contents"},[e("ol",[e("li",[e("a",{attrs:{href:"#包管理器"}},[t._v("包管理器")]),e("ol",[e("li",[e("a",{attrs:{href:"#常用的包管理器"}},[t._v("常用的包管理器")])]),e("li",[e("a",{attrs:{href:"#发展历程"}},[t._v("发展历程")]),e("ol",[e("li",[e("a",{attrs:{href:"#古早的-npm-是怎么管理依赖的"}},[t._v("古早的 NPM 是怎么管理依赖的？")])]),e("li",[e("a",{attrs:{href:"#npm-v3-带来了哪些改进"}},[t._v("NPM V3 带来了哪些改进？")])]),e("li",[e("a",{attrs:{href:"#lockfiles-解决了什么问题"}},[t._v("lockfiles 解决了什么问题？")])]),e("li",[e("a",{attrs:{href:"#为什么用了-lockfiles-还是不能保证环境统一"}},[t._v("为什么用了 lockfiles 还是不能保证环境统一？")])]),e("li",[e("a",{attrs:{href:"#yarn-的-pnp-模式是什么"}},[t._v("yarn 的 PnP 模式是什么？")])]),e("li",[e("a",{attrs:{href:"#pnpm-解决了什么问题"}},[t._v("pnpm 解决了什么问题？")])]),e("li",[e("a",{attrs:{href:"#tnpm-的主要思路是什么"}},[t._v("tnpm 的主要思路是什么？")])])])]),e("li",[e("a",{attrs:{href:"#常见问题"}},[t._v("常见问题")]),e("ol",[e("li",[e("a",{attrs:{href:"#如何锁定包管理器"}},[t._v("如何锁定包管理器？")])]),e("li",[e("a",{attrs:{href:"#如何锁定-nodejs-版本"}},[t._v("如何锁定 NodeJS 版本？")])]),e("li",[e("a",{attrs:{href:"#为什么-package-json-scripts-中路径宜用引号包裹起来"}},[t._v("为什么 package.json scripts 中路径宜用引号包裹起来？")])])])])])])])]),e("h2",{attrs:{id:"常用的包管理器"}},[t._v("常用的包管理器")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/maps/workflow/package-manager/npm.html"}},[t._v("npm")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/maps/workflow/package-manager/pnpm.html"}},[t._v("pnpm")])],1)]),t._v(" "),e("h2",{attrs:{id:"发展历程"}},[t._v("发展历程")]),t._v(" "),e("p",[t._v("推荐阅读：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/137535779",target:"_blank",rel:"noopener noreferrer"}},[t._v("node_modules 困境")]),t._v("，除了 NodeJS 生态，文章还介绍了 Rust 是如何进行包管理的。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/t6RZAKb6mXTfXl7XbpZ_vw",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于依赖管理的真相—前端包管理器探究")]),t._v("，文章对 NodeJS 中各新老包管理器逐个点了名，还简单提及了 Deno 中的包管理。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/455809528",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出 tnpm rapid 模式-如何比 pnpm 快 10 秒")]),t._v("，大综述。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.zhihu.com/zvideo/1467489669319036928",target:"_blank",rel:"noopener noreferrer"}},[t._v("一种秒级安装 npm 的方式")]),t._v("，更详细地介绍了 tnpm Rapid 的工作原理。")])]),t._v(" "),e("h4",{attrs:{id:"古早的-npm-是怎么管理依赖的"}},[t._v("古早的 NPM 是怎么管理依赖的？")]),t._v(" "),e("p",[t._v("早期 NPM（V1、V2） 使用原始的嵌套模式来管理依赖，没有使用优化策略，所以带来了依赖地狱和多版本共存的问题。")]),t._v(" "),e("ul",[e("li",[t._v("依赖地狱：依赖路径过长、占用空间过大、安装缓慢。")])]),t._v(" "),e("h4",{attrs:{id:"npm-v3-带来了哪些改进"}},[t._v("NPM V3 带来了哪些改进？")]),t._v(" "),e("p",[t._v("NPM V3 开始，使用扁平模式管理依赖，把重复依赖提升到 node_modules 一级目录，缓解了依赖地狱的问题，但却引入了幽灵依赖、多重依赖和不确定性等问题。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("幽灵依赖")]),t._v("：如果某依赖不是包本身的依赖但是被提升到了一级目录，那么就能在代码中引入。")]),t._v(" "),e("li",[e("strong",[t._v("多重依赖")]),t._v("：首先，依赖的某版本已经提升了，却不会影响其它依赖共同依赖它的其它版本，所以还是存在多重依赖的问题；其次，由于 NodeJS 的 require 的缓存规则是按照文件名及路径而不是模块名，此时对依赖进行有副作用的修改会破环单例模式；再者不同版本依赖的 types 可能会冲突。")]),t._v(" "),e("li",[e("strong",[t._v("不确定性")]),t._v("：手动安装依赖可能会带来和 npm install 安装后不同的结构。")])]),t._v(" "),e("h4",{attrs:{id:"lockfiles-解决了什么问题"}},[t._v("lockfiles 解决了什么问题？")]),t._v(" "),e("p",[t._v("lockfiles 主要解决包管理的不确定性问题，此外可以通过共享 lockfiles 使团队的 node_modules 保持一致。")]),t._v(" "),e("p",[t._v("Yarn V1 在 NPM V3 时发布了，引入了 lockfiles。但由于不能完整记录依赖之间的依赖结构，所以不如 NPM V5 的 lockfiles 好，后者将依赖的元信息及结构完整记录在文件中。")]),t._v(" "),e("h4",{attrs:{id:"为什么用了-lockfiles-还是不能保证环境统一"}},[t._v("为什么用了 lockfiles 还是不能保证环境统一？")]),t._v(" "),e("p",[t._v("因为 npm install 时可能会根据 Semver 自动更新依赖的版本。Semver 被设计用来解决模块不同版本的兼容性问题，但是并不完美，因为在实际的代码开发中，所有代码更改都没用绝对的 no breaking change 一说。也就是说，尽管是小版本改动，也可能带来问题。")]),t._v(" "),e("Frame",{attrs:{src:"/maps/devops/version-control.html"}}),t._v(" "),e("h4",{attrs:{id:"yarn-的-pnp-模式是什么"}},[t._v("yarn 的 PnP 模式是什么？")]),t._v(" "),e("p",[t._v("Yarn（V2）带来一种独特的依赖安装模式："),e("a",{attrs:{href:"https://yarnpkg.com/features/pnp",target:"_blank",rel:"noopener noreferrer"}},[t._v("PnP（Plug'n'Play）")]),t._v("，它在项目中使用 .pnp.cjs 文件来缓存各模块及其位置的关系。这样一来，所有依赖都可以被统一管理，极大减少了安装依赖时 IO 操作。")]),t._v(" "),e("h4",{attrs:{id:"pnpm-解决了什么问题"}},[t._v("pnpm 解决了什么问题？")]),t._v(" "),e("p",[t._v("2017 年，pnpm V1 通过统一依赖管理以及创建系统链接的方法一举解决了幽灵依赖和多重依赖的问题。所有项目的依赖都被统一安装到了磁盘特定位置。即使多个项目中用到相同的依赖也只会安装一次。此外，项目中的 node_modules 文件夹仍然是"),e("a",{attrs:{href:"https://www.pnpm.cn/blog/2020/05/27/flat-node-modules-is-not-the-only-way",target:"_blank",rel:"noopener noreferrer"}},[t._v("结构化的")]),t._v("，所以比 PnP 有更好的兼容性。")]),t._v(" "),e("h4",{attrs:{id:"tnpm-的主要思路是什么"}},[t._v("tnpm 的主要思路是什么？")]),t._v(" "),e("p",[t._v("tnpm 想给包管理工具提供一套方案，以解决所有恼人的问题。在网络端，使用服务器来生成依赖树，节约请求；在表示层，将 tgz 文件合并写入 tar，节约写入次数；在 IO 层，使用 Rust 完成 IO 操作性优于 NodeJS；在系统层，使用 FUSE 文件系统，省去文件解压操作。")]),t._v(" "),e("figure",{attrs:{"data-type":"image"}},[e("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220318001222.png",alt:"",loading:"lazy"}}),e("figcaption",[t._v("tnpm")])]),t._v(" "),e("h2",{attrs:{id:"常见问题"}},[t._v("常见问题")]),t._v(" "),e("h4",{attrs:{id:"如何锁定包管理器"}},[t._v("如何锁定包管理器？")]),t._v(" "),e("p",[t._v("可以使用环境变量中的 npm_execpath 或者 npm_config_user_agent，分别根据执行指令的包管理器具体路径、执行指令的包管理器具体版本及环境做判断。Vue3 和 Vite 分别使用了这两种办法限制特定的包管理器（Vite 实际使用了 only-allow 这个包）。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("npm_execpath\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> /usr/lib/node_modules/npm/bin/npm-cli.js")]),t._v("\nprocess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("npm_config_user_agent\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> npm/8.1.2 node/v16.13.2 linux x64 workspaces/false")]),t._v("\n")])])]),e("p",[t._v("见："),e("a",{attrs:{href:"https://blog.csdn.net/Android062005/article/details/124794071",target:"_blank",rel:"noopener noreferrer"}},[t._v("preinstall 钩子和 only-allow")])]),t._v(" "),e("h4",{attrs:{id:"如何锁定-nodejs-版本"}},[t._v("如何锁定 NodeJS 版本？")]),t._v(" "),e("p",[t._v("在 package.json 中新增 engine 字段，并在 .npmrc 文件中开启 engine-strict 配置。如果只改了 engines 字段，npm 是不会生效的。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// package.json")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"engines"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"node"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"14.x || 16.x"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .npmrc")]),t._v("\nengine-strict = "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),e("h4",{attrs:{id:"为什么-package-json-scripts-中路径宜用引号包裹起来"}},[t._v("为什么 package.json scripts 中路径宜用引号包裹起来？")]),t._v(" "),e("p",[t._v("因为 glob patterns 有兼容性问题，NPM 在 Linux 平台使用 sh -s 指令运行脚本，在 Windows 上使用 cmd /d /s /c。如果是编写应用代码，则可以使用 node-glob 等工具处理路径以解决跨平台的兼容性问题。")]),t._v(" "),e("p",[t._v("见："),e("a",{attrs:{href:"https://medium.com/@jakubsynowiec/you-should-always-quote-your-globs-in-npm-scripts-621887a2a784",target:"_blank",rel:"noopener noreferrer"}},[e("i",[t._v("Why you should always quote your globs in NPM scripts")])])])],1)}),[],!1,null,null,null);e.default=s.exports}}]);