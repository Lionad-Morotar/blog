(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{985:function(t,e,i){"use strict";i.r(e);var r=i(0),n=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"linter"}},[t._v("Linter")]),t._v(" "),e("nav",{staticClass:"table-of-contents"},[e("ol",[e("li",[e("a",{attrs:{href:"#linter"}},[t._v("Linter")]),e("ol",[e("li",[e("a",{attrs:{href:"#eslint"}},[t._v("ESLint")]),e("ol",[e("li",[e("a",{attrs:{href:"#prettier-和-eslint-的区别是"}},[t._v("Prettier 和 ESLint 的区别是？")])])])])])])])]),e("h2",{attrs:{id:"eslint"}},[t._v("ESLint")]),t._v(" "),e("p",[t._v("TODO")]),t._v(" "),e("p",[t._v("https://github.com/sudongyuer/learn-eslint")]),t._v(" "),e("h4",{attrs:{id:"prettier-和-eslint-的区别是"}},[t._v("Prettier 和 ESLint 的区别是？")]),t._v(" "),e("p",[t._v("Prettier 是代码格式化工具，而 ESLint 则是 JS/TS 等代码的校验工具，只不过也有格式化这个功能。通过安装 ESLint 插件，可以使项目中的 ESLint 兼容 Prettier 的规则。再配置好 husky，就可以很方便的给暂存区代码进行格式化校验了。")])])}),[],!1,null,null,null);e.default=n.exports}}]);