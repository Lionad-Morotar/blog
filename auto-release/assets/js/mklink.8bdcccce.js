(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{865:function(s,t,e){"use strict";e.r(t);var a=e(0),n=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mklink"}},[s._v("mklink")]),s._v(" "),t("nav",{staticClass:"table-of-contents"},[t("ol",[t("li",[t("a",{attrs:{href:"#mklink"}},[s._v("mklink")]),t("ol",[t("li",[t("a",{attrs:{href:"#creating-a-symbolic-link-using-powershell"}},[s._v("Creating a Symbolic Link using PowerShell")])])])])])]),t("h5",{attrs:{id:"creating-a-symbolic-link-using-powershell"}},[t("Link",{attrs:{type:"h5",to:"https://mgear-file.oss-cn-shanghai.aliyuncs.com/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0PInvoke_%E9%BB%84%E8%85%BE%E9%9C%84%E7%9A%84%E5%8D%9A%E5%AE%A2_CSDN%E5%8D%9A%E5%AE%A2.html",source:"https://blog.csdn.net/htxhtx123/article/details/104323450"}},[t("i",[s._v("Creating a Symbolic Link using PowerShell")])])],1),s._v(" "),t("p",[s._v("在 cmd.exe 中可以直接调用 mklink.exe，但在某些情况下你想和 cmd 撇清关系，一种取巧的办法是在 powershell 中先调用 cmd.exe。")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[s._v("cmd "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("c mklink\n")])])]),t("p",[s._v("cmd /c 和 cmd /k 的区别在于 Close 和 Keep，前者执行完后会退出 cmd 窗口而后者不会，所以在这里 /c 和 /k 看你的具体需要使用了。")]),s._v(" "),t("p",[s._v("除了 cmd，你还可以使用 PInvoke 技术。")]),s._v(" "),t("ul",[t("li",[s._v("在 C# 函数调用 Win32 API 中的 CreateSymbolicLink 函数；")]),s._v(" "),t("li",[s._v("在 powershell 中使用 Add-Type 声明这段 C# 代码；")]),s._v(" "),t("li",[s._v("调用，就是这么简单；")])]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Add-Type")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nusing System;\nusing System.Runtime.InteropServices;\n \nnamespace mklink\n{\n    public class symlink\n    {\n        [DllImport("')]),s._v("kernel32"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dll"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('")]\n        public static extern bool CreateSymbolicLink(string lpSymlinkFileName, string lpTargetFileName, int dwFlags);\n    }\n}\n"')]),s._v("@\n\n"),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[mklink.symlink]")]),s._v("::CreateSymbolicLink"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'source-path'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"target path"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("文章还封装了一个完整的 New-SymLink 函数，校验并清洗了参数，更方便调用了。")]),s._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("New-SymLink")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Path "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C:\\Users"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("SymName "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C:\\Another"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Directory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Verbose\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);