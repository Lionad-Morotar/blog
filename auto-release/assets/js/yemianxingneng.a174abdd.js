(window.webpackJsonp=window.webpackJsonp||[]).push([[262],{983:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"页面性能"}},[t._v("页面性能")]),t._v(" "),a("nav",{staticClass:"table-of-contents"},[a("ol",[a("li",[a("a",{attrs:{href:"#页面性能"}},[t._v("页面性能")]),a("ol",[a("li",[a("a",{attrs:{href:"#指标与模型"}},[t._v("指标与模型")]),a("ol",[a("li",[a("a",{attrs:{href:"#网页性能的上下游"}},[t._v("网页性能的上下游？")])]),a("li",[a("a",{attrs:{href:"#性能指标和性能模型的不同"}},[t._v("性能指标和性能模型的不同？")])]),a("li",[a("a",{attrs:{href:"#为什么需要性能模型"}},[t._v("为什么需要性能模型？")])]),a("li",[a("a",{attrs:{href:"#合成监控和真实用户监控是什么"}},[t._v("合成监控和真实用户监控是什么？")])]),a("li",[a("a",{attrs:{href:"#web-vitals-有哪些指标"}},[t._v("Web Vitals 有哪些指标？")])]),a("li",[a("a",{attrs:{href:"#有哪些开发工具"}},[t._v("有哪些开发工具？")])])])]),a("li",[a("a",{attrs:{href:"#如何测量性能指标"}},[t._v("如何测量性能指标")]),a("ol",[a("li",[a("a",{attrs:{href:"#怎么测定页面帧率"}},[t._v("怎么测定页面帧率？")])]),a("li",[a("a",{attrs:{href:"#可以使用哪些-api-测量性能"}},[t._v("可以使用哪些 API 测量性能？")])]),a("li",[a("a",{attrs:{href:"#performance-timing-被弃用了"}},[t._v("Performance Timing 被弃用了？")])]),a("li",[a("a",{attrs:{href:"#navigation-timing-中不同的阶段是连续的吗"}},[t._v("Navigation Timing 中不同的阶段是连续的吗？")])]),a("li",[a("a",{attrs:{href:"#performanceobserver-是什么"}},[t._v("PerformanceObserver 是什么？")])]),a("li",[a("a",{attrs:{href:"#long-tasks-api-是什么"}},[t._v("Long Tasks API 是什么？")])]),a("li",[a("a",{attrs:{href:"#如何测量函数执行的时长"}},[t._v("如何测量函数执行的时长？")])]),a("li",[a("a",{attrs:{href:"#如何测量元素的渲染时间"}},[t._v("如何测量元素的渲染时间？")])]),a("li",[a("a",{attrs:{href:"#event-timing-api-是什么"}},[t._v("Event Timing API 是什么？")])]),a("li",[a("a",{attrs:{href:"#resource-timing-api-是什么"}},[t._v("Resource Timing API 是什么？")])]),a("li",[a("a",{attrs:{href:"#navigation-timing-api-是什么"}},[t._v("Navigation Timing API 是什么？")])]),a("li",[a("a",{attrs:{href:"#除了规范定义数据-还可以上报哪些"}},[t._v("除了规范定义数据，还可以上报哪些？")])]),a("li",[a("a",{attrs:{href:"#links"}},[t._v("Links")])])])]),a("li",[a("a",{attrs:{href:"#性能优化"}},[t._v("性能优化")]),a("ol",[a("li",[a("a",{attrs:{href:"#做性能优化的基本法则是什么"}},[t._v("做性能优化的基本法则是什么？")])])])]),a("li",[a("a",{attrs:{href:"#ssr-及混合应用优化"}},[t._v("SSR 及混合应用优化")]),a("ol",[a("li",[a("a",{attrs:{href:"#csr-是什么"}},[t._v("CSR 是什么？")])]),a("li",[a("a",{attrs:{href:"#从-csr-到-ssr-有哪些过渡方案"}},[t._v("从 CSR 到 SSR 有哪些过渡方案？")])]),a("li",[a("a",{attrs:{href:"#esr-是什么"}},[t._v("ESR 是什么？")])]),a("li",[a("a",{attrs:{href:"#经典直出方案是什么"}},[t._v("经典直出方案是什么？")])]),a("li",[a("a",{attrs:{href:"#离线包缓存是什么"}},[t._v("离线包缓存是什么？")])]),a("li",[a("a",{attrs:{href:"#容器化方案是什么"}},[t._v("容器化方案是什么？")])]),a("li",[a("a",{attrs:{href:"#pwa-怎么配合-ssr-做优化"}},[t._v("PWA 怎么配合 SSR 做优化？")])]),a("li",[a("a",{attrs:{href:"#nsr-是什么"}},[t._v("NSR 是什么？")])]),a("li",[a("a",{attrs:{href:"#links-1"}},[t._v("Links")])])])]),a("li",[a("a",{attrs:{href:"#阅读更多"}},[t._v("阅读更多")]),a("ol",[a("li",[a("a",{attrs:{href:"#react-16-加载性能优化指南"}},[t._v("《React 16 加载性能优化指南》")])]),a("li",[a("a",{attrs:{href:"#关于性能优化的9大策略和6大指标"}},[t._v("关于性能优化的9大策略和6大指标")])])])])])])])]),a("h2",{attrs:{id:"指标与模型"}},[t._v("指标与模型")]),t._v(" "),a("h4",{attrs:{id:"网页性能的上下游"}},[t._v("网页性能的上下游？")]),t._v(" "),a("p",[t._v("选定合适的 API 收集数据，进行简单预处理后，通过 SDK 上报到后端或者云服务。为了展示收集到的数据，可以设置 99 线等图表，在某些特定的业务场景，还可以设置 A/B 图和告警。")]),t._v(" "),a("h4",{attrs:{id:"性能指标和性能模型的不同"}},[t._v("性能指标和性能模型的不同？")]),t._v(" "),a("p",[t._v("两个立场不同，性能指标如 Navigation Timing 使用绝对的量来衡量页面各项性能参数，性能模型如 Web Vitals 使用算法定性分析页面加载时的用户体验。")]),t._v(" "),a("h4",{attrs:{id:"为什么需要性能模型"}},[t._v("为什么需要性能模型？")]),t._v(" "),a("p",[t._v("用户体验很难用具体或者绝对的量来衡定，比如说在渐进式加载中，只对比白屏时间和 onload 时间只能说明用户提早看到了内容，却不能说明渐进式加载好在哪里，好了多少。")]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/progressive-rendering.png",alt:"",loading:"lazy"}}),a("figcaption",[t._v("页面渐进式加载示例")])]),t._v(" "),a("h4",{attrs:{id:"合成监控和真实用户监控是什么"}},[t._v("合成监控和真实用户监控是什么？")]),t._v(" "),a("p",[t._v("从技术上来说，可以把监控分为合成监控（Synthetic Monitoring，SYN）和真实用户监控（Real User Monitoring，RUM）。合成监控是在一个模拟的场景中，使用 Lighthouse 等工具，提取出性能指标并获得审计报告。真实用户监控是在真实用户访问时，通过数据源获取数据，再上报到日志服务器，以用来展示和分析这么一流程。")]),t._v(" "),a("h4",{attrs:{id:"web-vitals-有哪些指标"}},[t._v("Web Vitals 有哪些指标？")]),t._v(" "),a("p",[t._v("Web Vitals 关注 "),a("abbr",{attrs:{title:"Largest Contentful Paint"}},[t._v("LCP")]),t._v("、"),a("abbr",{attrs:{title:"First Input Delay"}},[t._v("FID")]),t._v("、"),a("abbr",{attrs:{title:"Cumulative Layout Shift"}},[t._v("CLS")]),t._v(" 的测量，分别描述最大内容渲染时间评分、页面可交互时间评分和布局偏移评分。")]),t._v(" "),a("div",{staticStyle:{display:"flex","justify-content":"space-evenly"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/lcp_ux.svg",width:"33%",alt:"Largest Contentful Paint threshold recommendations"}}),t._v(" "),a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/fid_ux.svg",width:"33%",alt:"First Input Delay threshold recommendations"}}),t._v(" "),a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/cls_ux.svg",width:"33%",alt:"Cumulative Layout Shift threshold recommendations"}})]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://github.com/GoogleChrome/web-vitals",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Vitals")])]),t._v(" "),a("h4",{attrs:{id:"有哪些开发工具"}},[t._v("有哪些开发工具？")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/GoogleChrome/web-vitals",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web Vitals")]),t._v("，获取 Web Vitals 评分。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/cssmagic/simple-web-perf",target:"_blank",rel:"noopener noreferrer"}},[t._v("simple-web-perf")]),t._v("，Navigation Timing 数据上报封装。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Lionad-Morotar/webpack-lighthouse-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack-lighthouse-plugin")]),t._v("，在打包结束后自动运行 Lighthouse 并输出报告。")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/cloudfour/lighthouse-parade",target:"_blank",rel:"noopener noreferrer"}},[t._v("lighthouse-parade")]),t._v("，递归抓取页面并评分，输出关于网站的完整报告。")])]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://github.com/Lionad-Morotar/webpack-lighthouse-plugin/blob/main/assets/example.gif?raw=true",alt:"",loading:"lazy"}}),a("figcaption",[t._v("webpack-lighthouse-plugin")])]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Performance",target:"_blank",rel:"noopener noreferrer"}},[t._v("TODO，Web Performance @MDN")])])]),t._v(" "),a("h2",{attrs:{id:"如何测量性能指标"}},[t._v("如何测量性能指标")]),t._v(" "),a("h4",{attrs:{id:"怎么测定页面帧率"}},[t._v("怎么测定页面帧率？")]),t._v(" "),a("p",[t._v("可以使用 requestAnimationFrame，但是不推荐，因为脚本本身就会对性能造成影响。")]),t._v(" "),a("h4",{attrs:{id:"可以使用哪些-api-测量性能"}},[t._v("可以使用哪些 API 测量性能？")]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220630135906.png",alt:"",loading:"lazy"}}),a("figcaption",[t._v("Web Performance Related Specs")])]),t._v(" "),a("h4",{attrs:{id:"performance-timing-被弃用了"}},[t._v("Performance Timing 被弃用了？")]),t._v(" "),a("p",[t._v("Performance Timing 被弃用了，取而代之的是 Performance Navigation Timing。不应该再使用 performance.navigation、performance.getEntries 等 API，这些旧的 API 没有办法肩检测如加载新脚本等情况，不支持新的性能指标如 Long Tasks API，此外可能干扰页面性能，所以推荐使用 Navigation Timing API 获取数据，并使用 Performance Observer 进行侦测。")]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628165411.png",alt:"",loading:"lazy"}}),a("figcaption",[t._v("Navigation Timing Level 2")])]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://www.w3.org/TR/navigation-timing-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Navigation Timing Level 2")])]),t._v(" "),a("h4",{attrs:{id:"navigation-timing-中不同的阶段是连续的吗"}},[t._v("Navigation Timing 中不同的阶段是连续的吗？")]),t._v(" "),a("p",[t._v("可能不是。如浏览器有同域下最多 6 个请求并行的限制，那么 domainLoopupEnd 到 requestStart 之间可能会出现较长的等待时间（Stalled Time）。此外，不一定每个阶段都会有数据，如：未发生跳转时，redirectCount 为 0；如果页面没有 service worker，那么 workerStart 为 0；DNS 从缓存中获取时，domainLoopupStart 和 domainLoopupEnd 可能相等。")]),t._v(" "),a("h4",{attrs:{id:"performanceobserver-是什么"}},[t._v("PerformanceObserver 是什么？")]),t._v(" "),a("p",[t._v("“有效的性能测量的第一条规则是确保性能测量技术本身不会导致性能问题”，使用 Performance Observer 可以获取某个具体类型的指标的同时不会干扰或影响页面性能，因为它会在浏览器空闲时期执行。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "element"、"event"、"first-input"、')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "largest-contentful-paint"、"layout-shift"、')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "longtask"、"mark"、"measure"、')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "navigation"、"paint"、"resource"')]),t._v("\n\tPerformanceObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("supportedEntryTypes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PerformanceObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEntries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toJSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 buffered 可以在第一次回调时获取缓存区中的历史记录")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("buffered")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nothing\t")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#",target:"_blank",rel:"noopener noreferrer"}},[t._v("Performance Observer")])]),t._v(" "),a("h4",{attrs:{id:"long-tasks-api-是什么"}},[t._v("Long Tasks API 是什么？")]),t._v(" "),a("p",[t._v("Long Tasks API 将会汇报使主线程阻塞超过 50ms 的任何任务。通过观测阻塞时长，可以获得诸如 TTI（Time To Interactive）、TBT（Total Blocking Time）等数据。")]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#long-tasks-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("Long Tasks API")])]),t._v(" "),a("h4",{attrs:{id:"如何测量函数执行的时长"}},[t._v("如何测量函数执行的时长？")]),t._v(" "),a("p",[t._v("可以使用 Date.now()、performance.now()，但是如果不考虑兼容性的话，使用 User Timing API 要更好一些，它可以和相关套件很好的结合：比如说在 Performance 面板中可视化，或通过 Performance Observer 进行观测。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("performance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myTask:start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("task")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nperformance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myTask:end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nperformance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("measure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myTask'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myTask:start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myTask:end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#user-timing-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("User Timing API")])]),t._v(" "),a("h4",{attrs:{id:"如何测量元素的渲染时间"}},[t._v("如何测量元素的渲染时间？")]),t._v(" "),a("p",[t._v("可以使用 Element Timing API。通过给 element 增加 elementtiming 属性，可以在注册 Performance Observer 后监听 element 类型的事件并获得元素渲染时间。LCP 指标就是建立在 ET API 基础上的，只是汇报的是最大内容元素的渲染时间。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("elementtiming")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hero-image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PerformanceObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'element'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("buffered")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#element-timing-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("Element Timing API")])]),t._v(" "),a("h4",{attrs:{id:"event-timing-api-是什么"}},[t._v("Event Timing API 是什么？")]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#event-timing-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("Event Timing API")])]),t._v(" "),a("h4",{attrs:{id:"resource-timing-api-是什么"}},[t._v("Resource Timing API 是什么？")]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#resource-timing-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("Resource Timing API")])]),t._v(" "),a("h4",{attrs:{id:"navigation-timing-api-是什么"}},[t._v("Navigation Timing API 是什么？")]),t._v(" "),a("p",[t._v("类似于 Resource Timing API，但不同的地方在于它会在导航时被触发，还附带了 DOMContentLoaded 和 load 事件的触发事件。")]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/custom-metrics/#navigation-timing-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("Navigation Timing API")])]),t._v(" "),a("h4",{attrs:{id:"除了规范定义数据-还可以上报哪些"}},[t._v("除了规范定义数据，还可以上报哪些？")]),t._v(" "),a("p",[a("strong",[t._v("5W")]),t._v("：时间、地理位置、页面 URL、浏览器、系统、账号 ID、现场还原。"),a("strong",[t._v("网络")]),t._v("：页面加载方式、Service Worker、HTTP 协议版本、资源压缩方式。"),a("strong",[t._v("其它")]),t._v("：页面在前台还是后台。")]),t._v(" "),a("h3",{attrs:{id:"links"}},[t._v("Links")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/pqFhhb5u6w7gmUutilH5xQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("蚂蚁金服如何把前端性能监控做到极致?")])])]),t._v(" "),a("h2",{attrs:{id:"性能优化"}},[t._v("性能优化")]),t._v(" "),a("h4",{attrs:{id:"做性能优化的基本法则是什么"}},[t._v("做性能优化的基本法则是什么？")]),t._v(" "),a("p",[t._v("编译层参见 webpack 优化；网络层减少请求；客户端预加载、预渲染、预执行。以及两句名言：“空间换时间”、“串行改并行”。")]),t._v(" "),a("h2",{attrs:{id:"ssr-及混合应用优化"}},[t._v("SSR 及混合应用优化")]),t._v(" "),a("h4",{attrs:{id:"csr-是什么"}},[t._v("CSR 是什么？")]),t._v(" "),a("p",[t._v("Client Side Rendering，和 SSR 相对应，指页面渲染、逻辑、路由、请求都是在浏览器发生的。想要提高 CSR 项目的用户体验，可以考虑在编译时通过预渲染首屏、骨架屏等形式对性能指标进行优化，或者，上 SSR。")]),t._v(" "),a("h4",{attrs:{id:"从-csr-到-ssr-有哪些过渡方案"}},[t._v("从 CSR 到 SSR 有哪些过渡方案？")]),t._v(" "),a("p",[t._v("CSP -> CSP with prerender -> SSR with hydration -> static SSR -> SSR")]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220629020645.png",alt:"",loading:"lazy"}}),a("figcaption",[t._v("From CSP to SSR")])]),t._v(" "),a("p",[t._v("见："),a("a",{attrs:{href:"https://web.dev/rendering-on-the-web/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TODO，Rendering on the Web")]),t._v("、"),a("a",{attrs:{href:"https://blog.csdn.net/m0_37411791/article/details/106513195?utm_source=blogxgwz7",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSR、SSR、NSR、ESR傻傻分不清楚")])]),t._v(" "),a("h4",{attrs:{id:"esr-是什么"}},[t._v("ESR 是什么？")]),t._v(" "),a("p",[t._v("TODO，"),a("a",{attrs:{href:"https://juejin.im/post/5ecf90b7f265da76e7651a96",target:"_blank",rel:"noopener noreferrer"}},[t._v("边缘计算听说过吗？淘宝用它提升了69%的首屏性能")])]),t._v(" "),a("h4",{attrs:{id:"经典直出方案是什么"}},[t._v("经典直出方案是什么？")]),t._v(" "),a("p",[t._v("直出指在后端渲染好 HTML 后再回传给客户端这种方式，直出可以节约许多 HTML 渲染及 AJAX 请求的时间，对 Web 前端的侵入性最小。")]),t._v(" "),a("h4",{attrs:{id:"离线包缓存是什么"}},[t._v("离线包缓存是什么？")]),t._v(" "),a("p",[t._v("直出方案仍需要把时间花在请求、加载 HTML 上，离线包缓存意味着把 HTML、CSS、JS、数据提前缓存在本地，只有部分需要异步更新的页面才通过请求的方式加载新数据并重新渲染页面。")]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628233615.png",alt:"",loading:"lazy"}}),a("figcaption",[t._v("直出 VS 离线包缓存")])]),t._v(" "),a("h4",{attrs:{id:"容器化方案是什么"}},[t._v("容器化方案是什么？")]),t._v(" "),a("p",[t._v("TODO，http://www.alloyteam.com/2020/06/fast-open-h5/")]),t._v(" "),a("h4",{attrs:{id:"pwa-怎么配合-ssr-做优化"}},[t._v("PWA 怎么配合 SSR 做优化？")]),t._v(" "),a("p",[t._v("PWA 能够通过 Service Worker 对缓存进行精细化控制，在客户端使用无头浏览器提前加载 HTML，等到实际加载时请求的就是由 Service Worker 缓存下来的资源了。")]),t._v(" "),a("figure",{attrs:{"data-type":"image"}},[a("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20220628235637.png?w=30",alt:"",loading:"lazy"}}),a("figcaption",[t._v("PWA + Headless Webview")])]),t._v(" "),a("h4",{attrs:{id:"nsr-是什么"}},[t._v("NSR 是什么？")]),t._v(" "),a("p",[t._v("Native Side Render，GMTC 2019 UC 团队提到的一种“前端 SSR”方案，它借助浏览器启动一个额外的 JS Runtime，将提前下载好的 HTML 模板和数据预渲染出来。这种方案的瓶颈在于他会带来额外的流量和性能开销，所以如何预测用户行为，提高命中率是非常重要的事。")]),t._v(" "),a("h3",{attrs:{id:"links-2"}},[t._v("Links")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.alloyteam.com/2019/10/h5-performance-optimize",target:"_blank",rel:"noopener noreferrer"}},[t._v("H5 秒开方案大全")])])]),t._v(" "),a("h2",{attrs:{id:"阅读更多"}},[t._v("阅读更多")]),t._v(" "),a("h5",{attrs:{id:"《react-16-加载性能优化指南》"}},[a("Link",{attrs:{type:"h5",to:"https://mgear-file.oss-cn-shanghai.aliyuncs.com/React%2016%20%E5%8A%A0%E8%BD%BD%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97.html",source:"https://zhuanlan.zhihu.com/p/37148975"}},[t._v("《React 16 加载性能优化指南》")])],1),t._v(" "),a("p",[t._v("作者把页面加载状态划分了四个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("打开页面到首屏渲染（浏览器首次渲染可见的内容）")]),t._v(" "),a("li",[t._v("首屏渲染到首次内容渲染（相关业务的内容）")]),t._v(" "),a("li",[t._v("内容渲染到页面可交互")]),t._v(" "),a("li",[t._v("页面逐渐加载（诸如图片等元素）直到页面内容加载完毕")])]),t._v(" "),a("p",[t._v("在很多应用中，首屏渲染约等于首次内容渲染，这是因为加载 HTML 和 CSS 之后，要等待业务 JS 加载完毕才能看到有意义的内容。其实可以通过几种方法完善首屏加载的 HTML 和 CSS，增加加载状态，减少用户等待焦虑。")]),t._v(" "),a("ul",[a("li",[t._v("在 HTML 模板中使用 SVG 图案（比如通过 html-webpack-plugin 自动插入）")]),t._v(" "),a("li",[t._v("使用 pupeteer 等工具预渲染首屏")])]),t._v(" "),a("p",[t._v("业务内容加载的过程中，JS 的影响最大。业务 JS 代码可以大致划分为：基础框架、垫片、业务基础库、业务代码这四大类，所以讲到优化 JS 其实是说如何通过分缓存去优化几种不同类型的 JS。")]),t._v(" "),a("ul",[a("li",[t._v("基础框架需要长时间缓存，适合强缓存")]),t._v(" "),a("li",[t._v("使用 polyfill.io，根据 UA 自动垫片")]),t._v(" "),a("li",[t._v("使用 SplitChunksPlugin 替代 CommonChunksPlugin")]),t._v(" "),a("li",[t._v("使用 TreeShaking")]),t._v(" "),a("li",[t._v("如果打包出来的 Bundle 体积巨大，可以考虑使用代码分割功能，比如 React Loadable 动态载入代码。")]),t._v(" "),a("li",[t._v("为绝大多数用户提供 ES6+ 的代码，使用 nomodule 标志为老的浏览器保留 ES5 版本代码")])]),t._v(" "),a("p",[t._v("最后，在页面可交互到页面加载完毕这个阶段，可以使用图片懒加载或者骨架屏等形式提高体验。")]),t._v(" "),a("h5",{attrs:{id:"关于性能优化的9大策略和6大指标"}},[a("a",{attrs:{href:"https://juejin.cn/post/6981673766178783262",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于性能优化的9大策略和6大指标")])]),t._v(" "),a("ul",[a("li",[t._v("网络层面\n"),a("ul",[a("li",[t._v("构建工具优化\n"),a("ul",[a("li",[t._v("include/exclude 避免不必要的查找，比如用在 bable-loader 可以避免不必要的转译")]),t._v(" "),a("li",[t._v("bable-loader 可配置 cache，只编译修改过的文件")]),t._v(" "),a("li",[t._v("alias 优化文件查找性能")]),t._v(" "),a("li",[t._v("thread-loader 多进程编译")]),t._v(" "),a("li",[t._v("BundleAnalyzer 分析文件体积")]),t._v(" "),a("li",[t._v("SplitChunks 替换 CommonChunks，渐进式加载")]),t._v(" "),a("li",[t._v("摇树优化")]),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/articles/source-code/vuejs/element-ui.html#如何按需载入组件"}},[t._v("按需加载")])],1),t._v(" "),a("li",[t._v("动态垫片")]),t._v(" "),a("li",[t._v("变量提升")]),t._v(" "),a("li",[t._v("压缩，比如 "),a("a",{attrs:{href:"https://webpack.docschina.org/plugins/terser-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("terser")])])])]),t._v(" "),a("li",[t._v("图像策略")]),t._v(" "),a("li",[t._v("内容分发\n"),a("ul",[a("li",[t._v("域名分开，避免 Cookie")]),t._v(" "),a("li",[t._v("静态资源走 CDN")])])])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);