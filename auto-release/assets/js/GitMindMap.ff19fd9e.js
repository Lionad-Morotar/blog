(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{950:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"git-mind-map"}},[a._v("Git Mind Map")]),a._v(" "),t("nav",{staticClass:"table-of-contents"},[t("ol",[t("li",[t("a",{attrs:{href:"#git-mind-map"}},[a._v("Git Mind Map")]),t("ol",[t("li",[t("a",{attrs:{href:"#简介"}},[a._v("简介")]),t("ol",[t("li",[t("a",{attrs:{href:"#git-是什么-有什么优势"}},[a._v("Git 是什么，有什么优势？")])]),t("li",[t("a",{attrs:{href:"#使用-git-时数据流是怎样的"}},[a._v("使用 Git 时数据流是怎样的？")])])])]),t("li",[t("a",{attrs:{href:"#配置相关"}},[a._v("配置相关")]),t("ol",[t("li",[t("a",{attrs:{href:"#如何配置用户名和邮箱"}},[a._v("如何配置用户名和邮箱？")])]),t("li",[t("a",{attrs:{href:"#如何把-vim-编辑器换掉"}},[a._v("如何把 VIM 编辑器换掉？")])]),t("li",[t("a",{attrs:{href:"#怎么配置代理"}},[a._v("怎么配置代理？")])])])]),t("li",[t("a",{attrs:{href:"#分支操作"}},[a._v("分支操作")]),t("ol",[t("li",[t("a",{attrs:{href:"#如何添加远端仓库"}},[a._v("如何添加远端仓库？")])]),t("li",[t("a",{attrs:{href:"#如何拷贝仓库代码"}},[a._v("如何拷贝仓库代码？")])]),t("li",[t("a",{attrs:{href:"#怎么初始化项目的子模块"}},[a._v("怎么初始化项目的子模块？")])]),t("li",[t("a",{attrs:{href:"#怎么快速创建新分支"}},[a._v("怎么快速创建新分支？")])]),t("li",[t("a",{attrs:{href:"#如何查看所有分支"}},[a._v("如何查看所有分支？")])]),t("li",[t("a",{attrs:{href:"#如何拣选提交"}},[a._v("如何拣选提交？")])]),t("li",[t("a",{attrs:{href:"#如何关联远程分支"}},[a._v("如何关联远程分支？")])])])]),t("li",[t("a",{attrs:{href:"#常见功能"}},[a._v("常见功能")]),t("ol",[t("li",[t("a",{attrs:{href:"#草稿功能应该怎么使用"}},[a._v("草稿功能应该怎么使用？")])]),t("li",[t("a",{attrs:{href:"#如何快速拷贝仓库代码"}},[a._v("如何快速拷贝仓库代码？")])]),t("li",[t("a",{attrs:{href:"#怎么在命令行提交多行消息"}},[a._v("怎么在命令行提交多行消息？")])]),t("li",[t("a",{attrs:{href:"#怎么快速修正上一次提交"}},[a._v("怎么快速修正上一次提交？")])]),t("li",[t("a",{attrs:{href:"#reset-hard-有几种模式"}},[a._v("reset --hard 有几种模式？")])]),t("li",[t("a",{attrs:{href:"#如何拯救因删除或还原造成丢失的信息"}},[a._v("如何拯救因删除或还原造成丢失的信息？")])]),t("li",[t("a",{attrs:{href:"#如何清理最近几次提交"}},[a._v("如何清理最近几次提交？")])]),t("li",[t("a",{attrs:{href:"#怎么对比文件历史"}},[a._v("怎么对比文件历史？")])]),t("li",[t("a",{attrs:{href:"#如何合并两个不相关分支"}},[a._v("如何合并两个不相关分支？")])]),t("li",[t("a",{attrs:{href:"#如何忽略特定提交"}},[a._v("如何忽略特定提交？")])]),t("li",[t("a",{attrs:{href:"#如何本地同步代码"}},[a._v("如何本地同步代码？")])])])]),t("li",[t("a",{attrs:{href:"#工程化实践"}},[a._v("工程化实践")]),t("ol",[t("li",[t("a",{attrs:{href:"#提交规范有什么用"}},[a._v("提交规范有什么用？")])]),t("li",[t("a",{attrs:{href:"#一个简单的提交规范示例"}},[a._v("一个简单的提交规范示例？")])]),t("li",[t("a",{attrs:{href:"#如何跳过钩子"}},[a._v("如何跳过钩子？")])])])]),t("li",[t("a",{attrs:{href:"#常见问题"}},[a._v("常见问题")]),t("ol",[t("li",[t("a",{attrs:{href:"#ssh-链接超时问题怎么解决"}},[a._v("SSH 链接超时问题怎么解决？")])]),t("li",[t("a",{attrs:{href:"#reference-broken-问题"}},[a._v("Reference Broken 问题？")])])])])])])])]),t("h2",{attrs:{id:"简介"}},[a._v("简介")]),a._v(" "),t("h4",{attrs:{id:"git-是什么-有什么优势"}},[a._v("Git 是什么，有什么优势？")]),a._v(" "),t("p",[a._v("Git 是一种版本控制工具，用来追踪代码在开发进程中发生的变化。它的关键字是“分支策略”以及“变化追踪”，前者保证了在不同大小的团队中，代码的变化都可以相对保持独立，并可以通过合并策略融合；后者保证了变化都会被记录下来，使其可管理。")]),a._v(" "),t("p",[a._v("见："),t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/what-is-version-control",target:"_blank",rel:"noopener noreferrer"}},[a._v("What is version control")])]),a._v(" "),t("h4",{attrs:{id:"使用-git-时数据流是怎样的"}},[a._v("使用 Git 时数据流是怎样的？")]),a._v(" "),t("p",[a._v("Git 有工作区、索引、本地仓库和远端仓库几个概念。在各个数据中心，可以使用咱词条、提交、推送、拉取、rebase、fetch、checkout 等方法对数据进行操作。")]),a._v(" "),t("figure",{attrs:{"data-type":"image"}},[t("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20210615024010.png",alt:"",loading:"lazy"}}),t("figcaption",[a._v("Git Data Transport Commands")])]),a._v(" "),t("h2",{attrs:{id:"配置相关"}},[a._v("配置相关")]),a._v(" "),t("h4",{attrs:{id:"如何配置用户名和邮箱"}},[a._v("如何配置用户名和邮箱？")]),a._v(" "),t("p",[a._v("去掉 --global 参数可以给单个项目进行配置，对某些项目有用。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" user.name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("username"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" user.email "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("email"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何把-vim-编辑器换掉"}},[a._v("如何把 VIM 编辑器换掉？")]),a._v(" "),t("p",[a._v("Git 用 vim 作为默认的文本编辑器，好在可以在配置中进行替换。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在确保 Code.exe 所在目录在环境变量中后，")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置 Code 为默认编辑器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" core.editor Code\n")])])]),t("h4",{attrs:{id:"怎么配置代理"}},[a._v("怎么配置代理？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" http.proxy "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("your-proxy-url"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h2",{attrs:{id:"分支操作"}},[a._v("分支操作")]),a._v(" "),t("h4",{attrs:{id:"如何添加远端仓库"}},[a._v("如何添加远端仓库？")]),a._v(" "),t("p",[a._v("GitHub 流行从主仓库 fork 代码到自己的域下本地开发，再通过 PR 把代码提交回主仓库的模式。这个时候，远端仓库相关操作就比较有用了。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 添加远端仓库")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo-url"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 合并分支到远端仓库")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" feat-xxx。\n")])])]),t("h4",{attrs:{id:"如何拷贝仓库代码"}},[a._v("如何拷贝仓库代码？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo-url"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("local-directory-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"怎么初始化项目的子模块"}},[a._v("怎么初始化项目的子模块？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在项目根目录执行，递归地初始化子模块")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule update "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--init")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--recursive")]),a._v("\n")])])]),t("h4",{attrs:{id:"怎么快速创建新分支"}},[a._v("怎么快速创建新分支？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 切换到本地的 main")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout main\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建并跳转到 feat-xxx 分支（新的 feat-xxx 从当前分支 main 打出）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" feat-xxx\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建并跳转到 feat-xxx 分支（新的分支从 main 打出）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" feat-xxx main\n")])])]),t("h4",{attrs:{id:"如何查看所有分支"}},[a._v("如何查看所有分支？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看所有分支（包括远端分支）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何拣选提交"}},[a._v("如何拣选提交？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从 main 打出一个干净的功能分支 feat-xxx")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" feat-xxx main\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看 dev 分支的提交记录（推荐使用可视化工具）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log dev\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拣选一些功能并提交到 feat-xxx")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cherry-pick "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("commit-hash"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("commit-hash"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何关联远程分支"}},[a._v("如何关联远程分支？")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("git branch "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("set"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("upstream"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("to"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("origin"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("branch"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" branch"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),t("h2",{attrs:{id:"常见功能"}},[a._v("常见功能")]),a._v(" "),t("h4",{attrs:{id:"草稿功能应该怎么使用"}},[a._v("草稿功能应该怎么使用？")]),a._v(" "),t("p",[a._v("如果你写代码时突然来了一个紧急线上 bug 要处理，而手头的改动又没写完，不适合直接提交，你可以将手头写好的代码存为草稿。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将所有改动保存到本分支下名为 <stash-description> 的草稿中，")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 加上 -u 参数后，文件的新增或删除操作也能一并存为草稿")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" stash save "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("stash-description"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("p",[a._v("哼哧哼哧改为 bug 之后，找到并应用相应的草稿就可以回到初始状态了。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用 list 指令查看有哪些草稿")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" stash list\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 应用某草稿")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" stash pop "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("stash-hash"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何快速拷贝仓库代码"}},[a._v("如何快速拷贝仓库代码？")]),a._v(" "),t("p",[a._v("有两种优化手段：仅拷贝某个分支或者拷贝前 n 次提交记录。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 仅拷贝单分支")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone --single-branch "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("branch-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo-url"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 下载 <branch-name> 分支前 n 个提交记录")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone --single-branch "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("branch-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--depth")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" git@github.com:vuejs/vue.git\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 下载仓库默认分支前 n 个提交记录")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--depth")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" git@github.com:vuejs/vue.git\n")])])]),t("p",[a._v("见："),t("a",{attrs:{href:"https://juejin.cn/post/6969206858179411982",target:"_blank",rel:"noopener noreferrer"}},[a._v("《Git clone 原理》")])]),a._v(" "),t("h4",{attrs:{id:"怎么在命令行提交多行消息"}},[a._v("怎么在命令行提交多行消息？")]),a._v(" "),t("p",[a._v("commit -m 是可以换行的！只要结尾不用引号，就不会中断输入。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'feat: brief message\n\ndetailed message'")]),a._v("\n")])])]),t("h4",{attrs:{id:"怎么快速修正上一次提交"}},[a._v("怎么快速修正上一次提交？")]),a._v(" "),t("p",[a._v("如果涉及到文件的修改，需要使用 reset 重置提交。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 撤销上一个提交，把所有修改都放到暂存区中（也就是还原回 git add . 后的状态）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--soft")]),a._v(" HEAD~\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 再次提交")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("message"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("p",[a._v("如果只是修改提交信息，用 --amend 指令覆盖就好了。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 把上个提交的提交信息修正为 <message>")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--amend")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("message"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"reset-hard-有几种模式"}},[a._v("reset --hard 有几种模式？")]),a._v(" "),t("p",[a._v("可以撤销 n 次提交，或者还原到具体的哈希标记的提交上，也可以还原为远端的某个提交。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 撤销上一个提交（并丢弃所有修改）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hard")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 把分支还原到某个提交（并丢弃所有修改）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hard")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hashname"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 把分支还原设为远端的某个提交（并丢弃本地所有修改）")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hard")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("repo-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("/"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("branch-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何拯救因删除或还原造成丢失的信息"}},[a._v("如何拯救因删除或还原造成丢失的信息？")]),a._v(" "),t("p",[a._v("git reflog 指令可以恢复已经被 reset 或删除的 commit 记录，但是并不保证一定成功，因为 git 有定期清理的策略。")]),a._v(" "),t("h4",{attrs:{id:"如何清理最近几次提交"}},[a._v("如何清理最近几次提交？")]),a._v(" "),t("p",[a._v("可以使用 reset --soft 或者 rebase。使用 rebase 可以对前几次提交进行重新排序、修改提交消息或者进行压缩提交等操作。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改近 <number> 次提交")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" HEAD~"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("number"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("figure",{attrs:{"data-type":"image"}},[t("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20210615022038.png",alt:"",loading:"lazy"}}),t("figcaption",[a._v("rebase -i")])]),a._v(" "),t("h4",{attrs:{id:"怎么对比文件历史"}},[a._v("怎么对比文件历史？")]),a._v(" "),t("p",[a._v("推荐使用 "),t("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory",target:"_blank",rel:"noopener noreferrer"}},[a._v("VS Code Git History 插件")]),a._v("，如果没条件的话，可以使用命令行。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hash-"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("1")]),a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hash-"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" blame "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-L")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("line-start"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(","),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("line-end"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何合并两个不相关分支"}},[a._v("如何合并两个不相关分支？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull origin master --allow-unrelated-histories\n")])])]),t("h4",{attrs:{id:"如何忽略特定提交"}},[a._v("如何忽略特定提交？")]),a._v(" "),t("ol",[t("li",[a._v("gitignore")])]),a._v(" "),t("p",[a._v("设置好 "),t("code",[a._v(".gitignore")]),a._v(" 文件后，所有匹配的文件都不会被继续追踪（已经追踪的不会被影响，除非先把它删掉）。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("update-index")])]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("git update"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("skip"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("worktree filename"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("js\ngit update"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("assume"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("unchanged "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("json\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[a._v("git filter")])]),a._v(" "),t("li",[t("p",[a._v("rm")])])]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("git rm "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("cached file1\ngit rm "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("r "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("cached "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("folder"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h4",{attrs:{id:"如何本地同步代码"}},[a._v("如何本地同步代码？")]),a._v(" "),t("p",[a._v("将 diff 文件输出，之后就可使用 apply 指令应用更改。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" diff.patch\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" apply diff.patch\n")])])]),t("h2",{attrs:{id:"工程化实践"}},[a._v("工程化实践")]),a._v(" "),t("h4",{attrs:{id:"提交规范有什么用"}},[a._v("提交规范有什么用？")]),a._v(" "),t("p",[a._v("业界有许多成熟的 Git Commit Message 规范，主要目的是使“代码提交变得有意义”，这样一来，方便成员协作，有利于工程化实践以及提高美观度。")]),a._v(" "),t("figure",{attrs:{"data-type":"image"}},[t("img",{attrs:{src:"https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20201127180816.png",alt:"",loading:"lazy"}}),t("figcaption",[a._v("方便协作：Inline Git Commit Log")])]),a._v(" "),t("h4",{attrs:{id:"一个简单的提交规范示例"}},[a._v("一个简单的提交规范示例？")]),a._v(" "),t("p",[a._v("以下在 LeanCloud CM Guide 的基础上，我们整理了一份尽量简单且能记录代码提交意义的约定。")]),a._v(" "),t("p",[a._v("【主要格式】")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("提交类型：变动内容，简短描述，50 个字符\n\n提交描述，可选，72 字符内，说明该提交的原因，或是提交的副作用。与第一行之间存在空行\n\n注释及其它，可选\n")])])]),t("p",[a._v("【简单示例】")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("fix: 更改 VuePress 版本，修复布局错乱问题\n\nhttps://github.com/vuejs/vuepress/issues/1321\n")])])]),t("p",[a._v("上面这个示例是一种“修复类型（fix）”示例，其描述链接了一个 GitHub Issue。")]),a._v(" "),t("p",[a._v("【类型说明】")]),a._v(" "),t("p",[a._v("类型有多种可能，以下几种是必须遵守的约定：")]),a._v(" "),t("ul",[t("li",[a._v("fix：错误修复")]),a._v(" "),t("li",[a._v("feat：新功能")]),a._v(" "),t("li",[a._v("chore：其它修改，如项目配置变动，构建任务变动")]),a._v(" "),t("li",[a._v("doc：注释或文档")]),a._v(" "),t("li",[a._v("format：代码改动（仅代码样式变更，如换行、分号）")]),a._v(" "),t("li",[a._v("css：前端界面样式变更")])]),a._v(" "),t("p",[a._v("此外，还有一些类型可供参考及选用：")]),a._v(" "),t("ul",[t("li",[a._v("refactor：代码重构")]),a._v(" "),t("li",[a._v("perf：代码重构（仅性能改进）")]),a._v(" "),t("li",[a._v("test：与测试相关的改动")])]),a._v(" "),t("p",[a._v("原则来说，依据不同项目，CM 规范可以做适当调整。以上只展现了一种通用的基础约定，具体项目可以在此基础上自行增添规则。如我的个人博客项目 CM 中，有一种“blogs”类型专门用作记录博客文字内容的修改。")]),a._v(" "),t("p",[a._v("特殊标记")]),a._v(" "),t("p",[a._v("特殊标记用作标注注意事项，如“BREAKING”、“close”标记的使用。特殊标记通常与项目工程化实践中其它工具配合使用，如用于关闭 GitLab Issues，后续有需要再展开约定。")]),a._v(" "),t("p",[a._v("完整示例")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("feat: 大盘中国地图增加地图下钻功能\n\n引入中国的省市映射文件，以通过选取的省找到省下所有城市内的店铺。\n\nBREAKING: 下钻功能导致了地图缩放时错位的问题，所以暂时禁用了地图的拖拽能力\n")])])]),t("h4",{attrs:{id:"如何跳过钩子"}},[a._v("如何跳过钩子？")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit --no-verify "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-am")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'bad commit message'")]),a._v("\n")])])]),t("h2",{attrs:{id:"常见问题"}},[a._v("常见问题")]),a._v(" "),t("h4",{attrs:{id:"ssh-链接超时问题怎么解决"}},[a._v("SSH 链接超时问题怎么解决？")]),a._v(" "),t("p",[a._v("可以使用以下指令来测试是否是 ssh 连接超时：")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("ssh "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("T")]),a._v(" git@github"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com\n")])])]),t("p",[a._v("如果提示超时，则到 ~/.ssh/ 文件夹下创建一个 config 文件，内容如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Host github.com\nUser lionad-trident\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile C:\\Users\\18062\\.ssh\\id_rsa\nPort 443\n")])])]),t("p",[a._v("再次输入测试指令，会提示是否记录指纹，选择“yes”就好。")]),a._v(" "),t("h4",{attrs:{id:"reference-broken-问题"}},[a._v("Reference Broken 问题？")]),a._v(" "),t("p",[a._v("好像是因为断电，我本地或者线上的仓库记录坏掉了，无法拉或推送代码。按照以下 Issue 设置后也没能解决。")]),a._v(" "),t("p",[a._v("见："),t("a",{attrs:{href:"https://github.com/desktop/desktop/issues/3838",target:"_blank",rel:"noopener noreferrer"}},[a._v("Reference Broken")])])])}),[],!1,null,null,null);t.default=r.exports}}]);