[{"data":1,"prerenderedAt":2349},["ShallowReactive",2],{"navigation":3,"/articles/design-patterns-and-js-magic-pot":158,"/articles/design-patterns-and-js-magic-pot-surround":2344},[4,35,89,95,122,128,152],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29,32],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🚝 四十二篇系列","/flows/fourty-two",{"title":15,"_path":16},"🌃 长夜梦","/flows/long-night-dream",{"title":18,"_path":19},"🌌 万物联结与幸福感","/flows/everything",{"title":21,"_path":22},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":24,"_path":25},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":27,"_path":28},"🌧️ 我的腼腆","/flows/shy",{"title":30,"_path":31},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":33,"_path":34},"📝 心流归档","/flows/archive",{"title":36,"_path":37,"children":38},"技术博客 / Coder","/articles",[39,41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86],{"title":40,"_path":37},"🦁 欢迎",{"title":42,"_path":43},"🌪️ Tailwind v4 如何兼容预处理器","/articles/tailwind4-with-sass",{"title":45,"_path":46},"🥞 在 tailwind 中使用现代化 CSS Layers","/articles/tailwind-sass-and-css-layer",{"title":48,"_path":49},"💻 本地部署 Qwen 翻译网页","/articles/local-translator",{"title":51,"_path":52},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":54,"_path":55},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":57,"_path":58},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":60,"_path":61},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":63,"_path":64},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":66,"_path":67},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":69,"_path":70},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":72,"_path":73},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":75,"_path":76},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":78,"_path":79},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":81,"_path":82},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":84,"_path":85},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":87,"_path":88},"📝 技术博客归档","/articles/archive",{"title":90,"_path":91,"children":92},"读书笔记 / Notes","/books",[93],{"title":94,"_path":91},"📕 读书笔记",{"title":96,"_path":97,"children":98},"吉他剧场 / Music","/music",[99,101,104,107,110,113,116,119],{"title":100,"_path":97},"🎸 FingerStyle！",{"title":102,"_path":103},"🌬️ 等待的风","/music/wind",{"title":105,"_path":106},"💕 约定的海洋","/music/ocean",{"title":108,"_path":109},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":111,"_path":112},"🌏 残酷天使的行动纲领","/music/eva",{"title":114,"_path":115},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":117,"_path":118},"🍷 Wu Wei","/music/wu-wei",{"title":120,"_path":121},"🌅 无题","/music/untitled",{"title":123,"_path":124,"children":125},"知识地图 / Maps","/maps",[126],{"title":127,"_path":124},"🏁 知识地图",{"title":129,"_path":130,"children":131},"造物 / Make","/tools",[132,134,137,140,143,146,149],{"title":133,"_path":130},"🧰 工具收集",{"title":135,"_path":136},"📕 博客","/tools/blog",{"title":138,"_path":139},"🥥 Coconut","/tools/coconut",{"title":141,"_path":142},"🧶 网易云音乐歌单排序","/tools/netease-sorter",{"title":144,"_path":145},"🌐 AnySort","/tools/anysort",{"title":147,"_path":148},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":150,"_path":151},"👓 Crapto","/tools/crypto-inline",{"title":153,"_path":154,"children":155},"我 / About","/hire",[156],{"title":157,"_path":154},"📬 技术简历",{"_path":73,"_dir":159,"_draft":160,"_partial":160,"_locale":161,"title":72,"description":162,"body":163,"_type":2338,"_id":2339,"_source":2340,"_file":2341,"_stem":2342,"_extension":2343},"articles",false,"","排除人的因素，设计模式的本质只是相关代码复用。本文通过使用JS仿制并简化了几种OOL中经典设计模式，以探讨经典设计模式和代码模板的区别主要在于代码复用的层次不同，以及粗浅聊了聊设计模式与语言特征之间此强彼弱的关系。",{"type":164,"children":165,"toc":2328},"root",[166,178,184,205,210,219,231,236,241,246,255,280,285,339,344,371,381,386,391,396,401,406,414,419,424,436,441,446,469,477,482,734,752,1001,1006,1011,1016,1112,1127,1405,1410,1428,1442,1457,1488,1493,1498,1900,1905,1910,1915,1925,1930,1945,1950,1984,1989,1994,1999,2009,2014,2027,2076,2081,2089,2094,2099,2104,2109,2119,2124,2129,2134,2167,2172,2195,2322],{"type":167,"tag":168,"props":169,"children":170},"element","blockquote",{},[171],{"type":167,"tag":172,"props":173,"children":174},"p",{},[175],{"type":176,"value":177},"text","设计模式最终要融入任何语言。",{"type":167,"tag":179,"props":180,"children":182},"h2",{"id":181},"设计模式是什么",[183],{"type":176,"value":181},{"type":167,"tag":172,"props":185,"children":186},{},[187,189,203],{"type":176,"value":188},"从《人月神话》到《大教堂与集市》，许多闻名业界的作品都“低代码、高文化",{"type":167,"tag":190,"props":191,"children":192},"sup",{},[193],{"type":167,"tag":194,"props":195,"children":200},"a",{"href":196,"ariaDescribedBy":197,"dataFootnoteRef":161,"id":199},"#user-content-fn-%E6%96%87%E5%8C%96",[198],"footnote-label","user-content-fnref-%E6%96%87%E5%8C%96",[201],{"type":176,"value":202},"1",{"type":176,"value":204},"”；各种代码文化运动可以看作“造神运动”此类周日剧场。许多大佬在向人们传授代码经验之余，都喜欢尝试用文化手段（不论是哲学思想还是艺术内涵），来统一人与代码的关系。这种跨界思考的过程通常比较晦涩，诸如“面向对象”、“设计模式”这些放到现在来说我们耳熟能详的词，在过去几十年都是由行业顶尖大佬们牵头搞研究，再经过不断地实践，逐渐沉淀下来形成的标准。",{"type":167,"tag":172,"props":206,"children":207},{},[208],{"type":176,"value":209},"设计模式是什么？",{"type":167,"tag":172,"props":211,"children":212},{},[213],{"type":167,"tag":214,"props":215,"children":216},"strong",{},[217],{"type":176,"value":218},"设计模式是一种标准，它描述了使用面向对象编程语言解决问题的方式。",{"type":167,"tag":172,"props":220,"children":221},{},[222,224,229],{"type":176,"value":223},"设计模式一词发源于建筑学作品《建筑模式语言》，后被一个人们称为“四人帮”（GoF）的小组种出它在软件界开的新花。无论是建筑学还是软件学中的设计模式，相同的地方是，它们都想解决“人”和“物”的关系相关问题，并且形成了一套特定的方法论。",{"type":167,"tag":214,"props":225,"children":226},{},[227],{"type":176,"value":228},"好比人们有了灶就可以长久保存火种，用名词把晦涩难懂的抽象定义为标准，这样有利于思想传播",{"type":176,"value":230},"。只要人们普遍接纳并熟知设计模式，便能畅通无阻地沟通代码的实现。当然，现实很丰满，畅快沟通有个大前提：程序设计时，大家需要使用面向对象编程语言来合作。",{"type":167,"tag":179,"props":232,"children":234},{"id":233},"为什么非面向对象不可",[235],{"type":176,"value":233},{"type":167,"tag":172,"props":237,"children":238},{},[239],{"type":176,"value":240},"构建大型软件不止面向对象这一条路，与面向对象相对应的还有结构化、形式化等程序设计方法。任意一种有自有优劣。面对日益复杂的软件，人们关心的重心逐步转移到软件的可重用性方面。面向对象凭借着分类、封装等天然符合人们认知规律的优势，得到快速发展，终打通需求分析、程序设计到编程语言等开发上下游工作，赢得了业界青睐。",{"type":167,"tag":172,"props":242,"children":243},{},[244],{"type":176,"value":245},"面向对象把功能作为节点，组合为功能网格，节点间通过消息通讯以及做对应的响应。这样一来，开发在编程时不再需要直面输入输出这种数据流动的思考方式，只需要按照指令维护各个对象内部的状态即可，节点对应的代码片段也就能得到重用。",{"type":167,"tag":172,"props":247,"children":248},{},[249],{"type":167,"tag":250,"props":251,"children":254},"img",{"alt":252,"src":253},"Message Passing In OO","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20210511174933.png?w=40",[],{"type":167,"tag":172,"props":256,"children":257},{},[258,260,271,273,278],{"type":176,"value":259},"相比子程序复用，函数复用已经是巨大的进步",{"type":167,"tag":190,"props":261,"children":262},{},[263],{"type":167,"tag":194,"props":264,"children":268},{"href":265,"ariaDescribedBy":266,"dataFootnoteRef":161,"id":267},"#user-content-fn-fn-call",[198],"user-content-fnref-fn-call",[269],{"type":176,"value":270},"2",{"type":176,"value":272},"。类复用相比函数复用要更加抽象，因为它保存了函数和状态的集合；而设计模式比类复用在抽象上更胜一筹：设计模式不单单直接复用某个类，而是复用整个“功能网格”，把特定问题的解决方案相关的所有节点和通讯机制全部拷贝，固化下来，命名并形成标准。",{"type":167,"tag":214,"props":274,"children":275},{},[276],{"type":176,"value":277},"设计模式其实是使用面向对象编程语言时代码复用的高级形式，是面向对象发展壮大之路的必然的产物",{"type":176,"value":279},"。只要写代码，就会碰到复用性问题，四人帮偏好面向对象，所以“设计模式”只是他们用来传授的面向对象编程中的代码复用性经验的概括。换句话说，大部分情况下我们讨论的“设计模式”和“面向对象设计模式”完全等同。这也就解释了为什么非面向对象不可了。",{"type":167,"tag":172,"props":281,"children":282},{},[283],{"type":176,"value":284},"我们讨论一个新的问题，如果过滤掉设计模式中的面向对象成分，剩下的是些啥呢？",{"type":167,"tag":286,"props":287,"children":291},"pre",{"className":288,"code":289,"language":290,"meta":161,"style":161},"language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai","console.log(DesignPatterns.filter(removeOO))\n","js",[292],{"type":167,"tag":293,"props":294,"children":295},"code",{"__ignoreMap":161},[296],{"type":167,"tag":297,"props":298,"children":301},"span",{"class":299,"line":300},"line",1,[302,308,314,320,325,329,334],{"type":167,"tag":297,"props":303,"children":305},{"style":304},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[306],{"type":176,"value":307},"console",{"type":167,"tag":297,"props":309,"children":311},{"style":310},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[312],{"type":176,"value":313},".",{"type":167,"tag":297,"props":315,"children":317},{"style":316},"--shiki-light:#6182B8;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[318],{"type":176,"value":319},"log",{"type":167,"tag":297,"props":321,"children":322},{"style":304},[323],{"type":176,"value":324},"(DesignPatterns",{"type":167,"tag":297,"props":326,"children":327},{"style":310},[328],{"type":176,"value":313},{"type":167,"tag":297,"props":330,"children":331},{"style":316},[332],{"type":176,"value":333},"filter",{"type":167,"tag":297,"props":335,"children":336},{"style":304},[337],{"type":176,"value":338},"(removeOO))\n",{"type":167,"tag":179,"props":340,"children":342},{"id":341},"设计模式的本质",[343],{"type":176,"value":341},{"type":167,"tag":172,"props":345,"children":346},{},[347,349,355,357,362,364,369],{"type":176,"value":348},"我们先直接删除上文关于设计模式的定义中的“面向对象”几个字，看看剩下些什么：设计模式是一种标准，它描述了",{"type":167,"tag":350,"props":351,"children":352},"del",{},[353],{"type":176,"value":354},"使用面向对象编程语言",{"type":176,"value":356},"解决问题的方式，是",{"type":167,"tag":350,"props":358,"children":359},{},[360],{"type":176,"value":361},"使用面向对象编程语言时",{"type":176,"value":363},"代码复用性的高级形式，是",{"type":167,"tag":350,"props":365,"children":366},{},[367],{"type":176,"value":368},"面向对象",{"type":176,"value":370},"发展壮大之路的必然的产物。",{"type":167,"tag":172,"props":372,"children":373},{},[374,376],{"type":176,"value":375},"句子有些不通顺，修补之后变成了：",{"type":167,"tag":214,"props":377,"children":378},{},[379],{"type":176,"value":380},"设计模式是一种标准，它描述了编程时解决问题的特定方式，是代码复用的高级形式及发展代码复用必然的产物。",{"type":167,"tag":172,"props":382,"children":383},{},[384],{"type":176,"value":385},"设计模式本质是什么？不言自明，它只是相关代码复用的一种抽象概念。",{"type":167,"tag":172,"props":387,"children":388},{},[389],{"type":176,"value":390},"说到代码复用，主要关系到代码组织。从函数复用，到使用设计模式，再到使用库、框架，三种代码复用方式的主要区别在于代码组织的粒度不同。",{"type":167,"tag":172,"props":392,"children":393},{},[394],{"type":176,"value":395},"函数复用比较简单，你可以写一个叫做 Add 的函数给两数相加，然后 Copy&Paste 到其他地方复用，或是把函数存放到 Utils.js 文件中，通过模块机制复用。为了了解如何使用某个函数，需要在使用前阅读注释。",{"type":167,"tag":172,"props":397,"children":398},{},[399],{"type":176,"value":400},"库和框架最为复杂，它们是组织了大量函数及实体形成的巨型代码片段。开发新项目时很少会花精力自研框架，一般都引现成的轮子直接开造。使用某库或框架前，必须详细阅读文档。",{"type":167,"tag":172,"props":402,"children":403},{},[404],{"type":176,"value":405},"设计模式则是单个或多个函数的组合（在 Java 中不是函数而是类），既可以在新项目里现写一个模式供使用，也可以引入社区现有的模块来复用。为了了解如何使用某个设计模式，需要提前了解该模式定义的实体以及实体是通讯机制。",{"type":167,"tag":172,"props":407,"children":408},{},[409],{"type":167,"tag":250,"props":410,"children":413},{"alt":411,"src":412},"函数、设计模式、框架间的升级关系","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/other/20210513145630.png?w=70",[],{"type":167,"tag":172,"props":415,"children":416},{},[417],{"type":176,"value":418},"设计模式作为最简单的实体和函数的组合，可看作函数的升级版或是框架的缩水版；去掉设计模式中的面向对象相关内容，就只剩下了函数。",{"type":167,"tag":172,"props":420,"children":421},{},[422],{"type":176,"value":423},"等等，“实体和实体间通讯机制”凭空消失了？",{"type":167,"tag":172,"props":425,"children":426},{},[427,429,434],{"type":176,"value":428},"并没有。但我想让他消失。下文将从 JavaScript 入手，介绍如何把设计模式的概念映射到语言特征中。语言特征可是个好东西呀！如果你同意抽象也像复用一样有函数复用、库和框架等不同复杂度的层次的话，那我认为",{"type":167,"tag":214,"props":430,"children":431},{},[432],{"type":176,"value":433},"语言特征就是抽象的基础了。除了语言本身以外，所有抽象的建立都依赖于语言特征",{"type":176,"value":435},"。把设计模式映射成语言特征后，我们就能跳出面向对象的禁锢，从新的、更高层的角度重新思考代码复用问题。",{"type":167,"tag":172,"props":437,"children":438},{},[439],{"type":176,"value":440},"回到正题，我们从 JS 开始说起。",{"type":167,"tag":179,"props":442,"children":444},{"id":443},"仿制设计模式",[445],{"type":176,"value":443},{"type":167,"tag":172,"props":447,"children":448},{},[449,451,456,467],{"type":176,"value":450},"编程语言并不是万能的。",{"type":167,"tag":214,"props":452,"children":453},{},[454],{"type":176,"value":455},"特定语言适合用来解决特定问题",{"type":167,"tag":190,"props":457,"children":458},{},[459],{"type":167,"tag":194,"props":460,"children":464},{"href":461,"ariaDescribedBy":462,"dataFootnoteRef":161,"id":463},"#user-content-fn-css",[198],"user-content-fnref-css",[465],{"type":176,"value":466},"3",{"type":176,"value":468},"。提到 JavaScript 诸多语言特征，其优点可以用寥寥三个词概括：“原型”、“对象”、“函数”。熟练掌握了这些内容，就能在 JS 的世界中游刃有余。",{"type":167,"tag":172,"props":470,"children":471},{},[472],{"type":167,"tag":250,"props":473,"children":476},{"alt":474,"src":475},"《JavaScript 精粹》VS《JavaScript 权威指南》","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/200704/20200709104930.png",[],{"type":167,"tag":172,"props":478,"children":479},{},[480],{"type":176,"value":481},"传统面向对象语言以类封装状态，并向外暴露改变状态的方法。以下代码中的书本类为例：Book Class 保持有 name 状态，可以使用 getPrintName 方法返回包装后的 name 或使用 rename 修改 name 。",{"type":167,"tag":286,"props":483,"children":485},{"className":288,"code":484,"language":290,"meta":161,"style":161},"class Book {\n  constructor () {\n    this.name = '设计模式与JS魔法锅'\n  }\n  getPrintName () {\n    return '《' + this.name + '》'\n  }\n  rename (newName) {\n    this.name = newName\n  }\n}\n",[486],{"type":167,"tag":293,"props":487,"children":488},{"__ignoreMap":161},[489,509,527,569,578,596,655,663,692,717,725],{"type":167,"tag":297,"props":490,"children":491},{"class":299,"line":300},[492,498,504],{"type":167,"tag":297,"props":493,"children":495},{"style":494},"--shiki-light:#9C3EDA;--shiki-light-font-style:inherit;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#66D9EF;--shiki-sepia-font-style:italic",[496],{"type":176,"value":497},"class",{"type":167,"tag":297,"props":499,"children":501},{"style":500},"--shiki-light:#E2931D;--shiki-light-text-decoration:inherit;--shiki-default:#6F42C1;--shiki-default-text-decoration:inherit;--shiki-dark:#B392F0;--shiki-dark-text-decoration:inherit;--shiki-sepia:#A6E22E;--shiki-sepia-text-decoration:underline",[502],{"type":176,"value":503}," Book",{"type":167,"tag":297,"props":505,"children":506},{"style":310},[507],{"type":176,"value":508}," {\n",{"type":167,"tag":297,"props":510,"children":512},{"class":299,"line":511},2,[513,518,523],{"type":167,"tag":297,"props":514,"children":515},{"style":494},[516],{"type":176,"value":517},"  constructor",{"type":167,"tag":297,"props":519,"children":520},{"style":310},[521],{"type":176,"value":522}," ()",{"type":167,"tag":297,"props":524,"children":525},{"style":310},[526],{"type":176,"value":508},{"type":167,"tag":297,"props":528,"children":530},{"class":299,"line":529},3,[531,537,541,546,552,558,564],{"type":167,"tag":297,"props":532,"children":534},{"style":533},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#FD971F",[535],{"type":176,"value":536},"    this",{"type":167,"tag":297,"props":538,"children":539},{"style":310},[540],{"type":176,"value":313},{"type":167,"tag":297,"props":542,"children":543},{"style":304},[544],{"type":176,"value":545},"name",{"type":167,"tag":297,"props":547,"children":549},{"style":548},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[550],{"type":176,"value":551}," =",{"type":167,"tag":297,"props":553,"children":555},{"style":554},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[556],{"type":176,"value":557}," '",{"type":167,"tag":297,"props":559,"children":561},{"style":560},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[562],{"type":176,"value":563},"设计模式与JS魔法锅",{"type":167,"tag":297,"props":565,"children":566},{"style":554},[567],{"type":176,"value":568},"'\n",{"type":167,"tag":297,"props":570,"children":572},{"class":299,"line":571},4,[573],{"type":167,"tag":297,"props":574,"children":575},{"style":310},[576],{"type":176,"value":577},"  }\n",{"type":167,"tag":297,"props":579,"children":581},{"class":299,"line":580},5,[582,588,592],{"type":167,"tag":297,"props":583,"children":585},{"style":584},"--shiki-light:#E53935;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[586],{"type":176,"value":587},"  getPrintName",{"type":167,"tag":297,"props":589,"children":590},{"style":310},[591],{"type":176,"value":522},{"type":167,"tag":297,"props":593,"children":594},{"style":310},[595],{"type":176,"value":508},{"type":167,"tag":297,"props":597,"children":599},{"class":299,"line":598},6,[600,606,610,615,620,625,630,634,638,642,646,651],{"type":167,"tag":297,"props":601,"children":603},{"style":602},"--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#D73A49;--shiki-default-font-style:inherit;--shiki-dark:#F97583;--shiki-dark-font-style:inherit;--shiki-sepia:#F92672;--shiki-sepia-font-style:inherit",[604],{"type":176,"value":605},"    return",{"type":167,"tag":297,"props":607,"children":608},{"style":554},[609],{"type":176,"value":557},{"type":167,"tag":297,"props":611,"children":612},{"style":560},[613],{"type":176,"value":614},"《",{"type":167,"tag":297,"props":616,"children":617},{"style":554},[618],{"type":176,"value":619},"'",{"type":167,"tag":297,"props":621,"children":622},{"style":548},[623],{"type":176,"value":624}," +",{"type":167,"tag":297,"props":626,"children":627},{"style":533},[628],{"type":176,"value":629}," this",{"type":167,"tag":297,"props":631,"children":632},{"style":310},[633],{"type":176,"value":313},{"type":167,"tag":297,"props":635,"children":636},{"style":304},[637],{"type":176,"value":545},{"type":167,"tag":297,"props":639,"children":640},{"style":548},[641],{"type":176,"value":624},{"type":167,"tag":297,"props":643,"children":644},{"style":554},[645],{"type":176,"value":557},{"type":167,"tag":297,"props":647,"children":648},{"style":560},[649],{"type":176,"value":650},"》",{"type":167,"tag":297,"props":652,"children":653},{"style":554},[654],{"type":176,"value":568},{"type":167,"tag":297,"props":656,"children":658},{"class":299,"line":657},7,[659],{"type":167,"tag":297,"props":660,"children":661},{"style":310},[662],{"type":176,"value":577},{"type":167,"tag":297,"props":664,"children":666},{"class":299,"line":665},8,[667,672,677,683,688],{"type":167,"tag":297,"props":668,"children":669},{"style":584},[670],{"type":176,"value":671},"  rename",{"type":167,"tag":297,"props":673,"children":674},{"style":310},[675],{"type":176,"value":676}," (",{"type":167,"tag":297,"props":678,"children":680},{"style":679},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#E36209;--shiki-default-font-style:inherit;--shiki-dark:#FFAB70;--shiki-dark-font-style:inherit;--shiki-sepia:#FD971F;--shiki-sepia-font-style:italic",[681],{"type":176,"value":682},"newName",{"type":167,"tag":297,"props":684,"children":685},{"style":310},[686],{"type":176,"value":687},")",{"type":167,"tag":297,"props":689,"children":690},{"style":310},[691],{"type":176,"value":508},{"type":167,"tag":297,"props":693,"children":695},{"class":299,"line":694},9,[696,700,704,708,712],{"type":167,"tag":297,"props":697,"children":698},{"style":533},[699],{"type":176,"value":536},{"type":167,"tag":297,"props":701,"children":702},{"style":310},[703],{"type":176,"value":313},{"type":167,"tag":297,"props":705,"children":706},{"style":304},[707],{"type":176,"value":545},{"type":167,"tag":297,"props":709,"children":710},{"style":548},[711],{"type":176,"value":551},{"type":167,"tag":297,"props":713,"children":714},{"style":304},[715],{"type":176,"value":716}," newName\n",{"type":167,"tag":297,"props":718,"children":720},{"class":299,"line":719},10,[721],{"type":167,"tag":297,"props":722,"children":723},{"style":310},[724],{"type":176,"value":577},{"type":167,"tag":297,"props":726,"children":728},{"class":299,"line":727},11,[729],{"type":167,"tag":297,"props":730,"children":731},{"style":310},[732],{"type":176,"value":733},"}\n",{"type":167,"tag":172,"props":735,"children":736},{},[737,739,750],{"type":176,"value":738},"放到早期版本 JS 中，想要封装变量，这不好办。早期版本的 JS 没有块级作用域，所以声明的变量会在整个代码或函数作用域中生效。为了仿制类的状态封装能力，知名布道者道格拉斯发明了一种“模块模式”",{"type":167,"tag":190,"props":740,"children":741},{},[742],{"type":167,"tag":194,"props":743,"children":747},{"href":744,"ariaDescribedBy":745,"dataFootnoteRef":161,"id":746},"#user-content-fn-module-pattern",[198],"user-content-fnref-module-pattern",[748],{"type":176,"value":749},"4",{"type":176,"value":751},"，即通过闭包来控制变量的访问权，代码如下：",{"type":167,"tag":286,"props":753,"children":755},{"className":288,"code":754,"language":290,"meta":161,"style":161},"const aBook = (() => {\n  var name = '设计模式与JS魔法锅'\n  function getPrintName () {\n    return '《' + name + '》'\n  }\n  function rename (newName) {\n    name = newName\n  }\n  return {\n    getPrintName,\n    rename\n  }\n})()\n",[756],{"type":167,"tag":293,"props":757,"children":758},{"__ignoreMap":161},[759,795,824,845,888,895,923,939,946,958,971,979,987],{"type":167,"tag":297,"props":760,"children":761},{"class":299,"line":300},[762,767,773,777,781,786,791],{"type":167,"tag":297,"props":763,"children":764},{"style":494},[765],{"type":176,"value":766},"const",{"type":167,"tag":297,"props":768,"children":770},{"style":769},"--shiki-light:#90A4AE;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#F8F8F2",[771],{"type":176,"value":772}," aBook",{"type":167,"tag":297,"props":774,"children":775},{"style":548},[776],{"type":176,"value":551},{"type":167,"tag":297,"props":778,"children":779},{"style":304},[780],{"type":176,"value":676},{"type":167,"tag":297,"props":782,"children":783},{"style":310},[784],{"type":176,"value":785},"()",{"type":167,"tag":297,"props":787,"children":788},{"style":494},[789],{"type":176,"value":790}," =>",{"type":167,"tag":297,"props":792,"children":793},{"style":310},[794],{"type":176,"value":508},{"type":167,"tag":297,"props":796,"children":797},{"class":299,"line":511},[798,803,808,812,816,820],{"type":167,"tag":297,"props":799,"children":800},{"style":494},[801],{"type":176,"value":802},"  var",{"type":167,"tag":297,"props":804,"children":805},{"style":304},[806],{"type":176,"value":807}," name",{"type":167,"tag":297,"props":809,"children":810},{"style":548},[811],{"type":176,"value":551},{"type":167,"tag":297,"props":813,"children":814},{"style":554},[815],{"type":176,"value":557},{"type":167,"tag":297,"props":817,"children":818},{"style":560},[819],{"type":176,"value":563},{"type":167,"tag":297,"props":821,"children":822},{"style":554},[823],{"type":176,"value":568},{"type":167,"tag":297,"props":825,"children":826},{"class":299,"line":529},[827,832,837,841],{"type":167,"tag":297,"props":828,"children":829},{"style":494},[830],{"type":176,"value":831},"  function",{"type":167,"tag":297,"props":833,"children":834},{"style":316},[835],{"type":176,"value":836}," getPrintName",{"type":167,"tag":297,"props":838,"children":839},{"style":310},[840],{"type":176,"value":522},{"type":167,"tag":297,"props":842,"children":843},{"style":310},[844],{"type":176,"value":508},{"type":167,"tag":297,"props":846,"children":847},{"class":299,"line":571},[848,852,856,860,864,868,872,876,880,884],{"type":167,"tag":297,"props":849,"children":850},{"style":602},[851],{"type":176,"value":605},{"type":167,"tag":297,"props":853,"children":854},{"style":554},[855],{"type":176,"value":557},{"type":167,"tag":297,"props":857,"children":858},{"style":560},[859],{"type":176,"value":614},{"type":167,"tag":297,"props":861,"children":862},{"style":554},[863],{"type":176,"value":619},{"type":167,"tag":297,"props":865,"children":866},{"style":548},[867],{"type":176,"value":624},{"type":167,"tag":297,"props":869,"children":870},{"style":304},[871],{"type":176,"value":807},{"type":167,"tag":297,"props":873,"children":874},{"style":548},[875],{"type":176,"value":624},{"type":167,"tag":297,"props":877,"children":878},{"style":554},[879],{"type":176,"value":557},{"type":167,"tag":297,"props":881,"children":882},{"style":560},[883],{"type":176,"value":650},{"type":167,"tag":297,"props":885,"children":886},{"style":554},[887],{"type":176,"value":568},{"type":167,"tag":297,"props":889,"children":890},{"class":299,"line":580},[891],{"type":167,"tag":297,"props":892,"children":893},{"style":310},[894],{"type":176,"value":577},{"type":167,"tag":297,"props":896,"children":897},{"class":299,"line":598},[898,902,907,911,915,919],{"type":167,"tag":297,"props":899,"children":900},{"style":494},[901],{"type":176,"value":831},{"type":167,"tag":297,"props":903,"children":904},{"style":316},[905],{"type":176,"value":906}," rename",{"type":167,"tag":297,"props":908,"children":909},{"style":310},[910],{"type":176,"value":676},{"type":167,"tag":297,"props":912,"children":913},{"style":679},[914],{"type":176,"value":682},{"type":167,"tag":297,"props":916,"children":917},{"style":310},[918],{"type":176,"value":687},{"type":167,"tag":297,"props":920,"children":921},{"style":310},[922],{"type":176,"value":508},{"type":167,"tag":297,"props":924,"children":925},{"class":299,"line":657},[926,931,935],{"type":167,"tag":297,"props":927,"children":928},{"style":304},[929],{"type":176,"value":930},"    name",{"type":167,"tag":297,"props":932,"children":933},{"style":548},[934],{"type":176,"value":551},{"type":167,"tag":297,"props":936,"children":937},{"style":304},[938],{"type":176,"value":716},{"type":167,"tag":297,"props":940,"children":941},{"class":299,"line":665},[942],{"type":167,"tag":297,"props":943,"children":944},{"style":310},[945],{"type":176,"value":577},{"type":167,"tag":297,"props":947,"children":948},{"class":299,"line":694},[949,954],{"type":167,"tag":297,"props":950,"children":951},{"style":602},[952],{"type":176,"value":953},"  return",{"type":167,"tag":297,"props":955,"children":956},{"style":310},[957],{"type":176,"value":508},{"type":167,"tag":297,"props":959,"children":960},{"class":299,"line":719},[961,966],{"type":167,"tag":297,"props":962,"children":963},{"style":304},[964],{"type":176,"value":965},"    getPrintName",{"type":167,"tag":297,"props":967,"children":968},{"style":310},[969],{"type":176,"value":970},",\n",{"type":167,"tag":297,"props":972,"children":973},{"class":299,"line":727},[974],{"type":167,"tag":297,"props":975,"children":976},{"style":304},[977],{"type":176,"value":978},"    rename\n",{"type":167,"tag":297,"props":980,"children":982},{"class":299,"line":981},12,[983],{"type":167,"tag":297,"props":984,"children":985},{"style":310},[986],{"type":176,"value":577},{"type":167,"tag":297,"props":988,"children":990},{"class":299,"line":989},13,[991,996],{"type":167,"tag":297,"props":992,"children":993},{"style":310},[994],{"type":176,"value":995},"}",{"type":167,"tag":297,"props":997,"children":998},{"style":304},[999],{"type":176,"value":1000},")()\n",{"type":167,"tag":172,"props":1002,"children":1003},{},[1004],{"type":176,"value":1005},"看起来，模块模式就像是语言能力不足的补充。把目光从遥远的模块模式收回到 2015 年 ES6 发布之后，JavaScript 语言特征得到增强，曾风靡一时的潮词模块模式几乎从网络中销声匿迹了。现在我们可以自由地使用类封装状态，不必再写因缺乏语义显得蹩脚的 IIFE 。",{"type":167,"tag":172,"props":1007,"children":1008},{},[1009],{"type":176,"value":1010},"我们再来看看面向对象中的常见的装饰器模式。",{"type":167,"tag":172,"props":1012,"children":1013},{},[1014],{"type":176,"value":1015},"假设你在维护一个开源项目，项目中有些过时的 API，你想在别人调用该 API 时提示一句“你好，此 API 将在下个版本移除”。这段代码可以这样写：",{"type":167,"tag":286,"props":1017,"children":1019},{"className":288,"code":1018,"language":290,"meta":161,"style":161},"// 目前不支持给对象属性使用装饰器，所以这是一段伪代码\nconst myAPI = {\n  @deprecate('WARN: oldAPI is decrapted, please use oldAPI_v2')\n  oldAPI() {}\n}\n",[1020],{"type":167,"tag":293,"props":1021,"children":1022},{"__ignoreMap":161},[1023,1032,1052,1088,1105],{"type":167,"tag":297,"props":1024,"children":1025},{"class":299,"line":300},[1026],{"type":167,"tag":297,"props":1027,"children":1029},{"style":1028},"--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#6A737D;--shiki-default-font-style:inherit;--shiki-dark:#6A737D;--shiki-dark-font-style:inherit;--shiki-sepia:#88846F;--shiki-sepia-font-style:inherit",[1030],{"type":176,"value":1031},"// 目前不支持给对象属性使用装饰器，所以这是一段伪代码\n",{"type":167,"tag":297,"props":1033,"children":1034},{"class":299,"line":511},[1035,1039,1044,1048],{"type":167,"tag":297,"props":1036,"children":1037},{"style":494},[1038],{"type":176,"value":766},{"type":167,"tag":297,"props":1040,"children":1041},{"style":769},[1042],{"type":176,"value":1043}," myAPI",{"type":167,"tag":297,"props":1045,"children":1046},{"style":548},[1047],{"type":176,"value":551},{"type":167,"tag":297,"props":1049,"children":1050},{"style":310},[1051],{"type":176,"value":508},{"type":167,"tag":297,"props":1053,"children":1054},{"class":299,"line":529},[1055,1060,1065,1070,1074,1079,1083],{"type":167,"tag":297,"props":1056,"children":1057},{"style":304},[1058],{"type":176,"value":1059},"  @",{"type":167,"tag":297,"props":1061,"children":1062},{"style":584},[1063],{"type":176,"value":1064},"deprecate",{"type":167,"tag":297,"props":1066,"children":1067},{"style":310},[1068],{"type":176,"value":1069},"(",{"type":167,"tag":297,"props":1071,"children":1072},{"style":554},[1073],{"type":176,"value":619},{"type":167,"tag":297,"props":1075,"children":1076},{"style":560},[1077],{"type":176,"value":1078},"WARN: oldAPI is decrapted, please use oldAPI_v2",{"type":167,"tag":297,"props":1080,"children":1081},{"style":554},[1082],{"type":176,"value":619},{"type":167,"tag":297,"props":1084,"children":1085},{"style":310},[1086],{"type":176,"value":1087},")\n",{"type":167,"tag":297,"props":1089,"children":1090},{"class":299,"line":571},[1091,1096,1100],{"type":167,"tag":297,"props":1092,"children":1093},{"style":584},[1094],{"type":176,"value":1095},"  oldAPI",{"type":167,"tag":297,"props":1097,"children":1098},{"style":310},[1099],{"type":176,"value":785},{"type":167,"tag":297,"props":1101,"children":1102},{"style":310},[1103],{"type":176,"value":1104}," {}\n",{"type":167,"tag":297,"props":1106,"children":1107},{"class":299,"line":580},[1108],{"type":167,"tag":297,"props":1109,"children":1110},{"style":310},[1111],{"type":176,"value":733},{"type":167,"tag":172,"props":1113,"children":1114},{},[1115,1117,1125],{"type":176,"value":1116},"若不是",{"type":167,"tag":194,"props":1118,"children":1122},{"href":1119,"rel":1120},"https://github.com/tc39/proposal-decorators",[1121],"nofollow",[1123],{"type":176,"value":1124},"装饰器提案",{"type":176,"value":1126},"的出现，我赌五毛，社区里不会有太多讨论装饰器模式的文章。不过大家若有留意过平常的代码，肯定会注意到其实高阶函数就是装饰器的具体实现。函数在 JS 中是一等公民，通过函数组合可以极其方便地仿制某些设计模式。比如，下代码中，使用“局部应用”函数仿制了一个工厂模式：",{"type":167,"tag":286,"props":1128,"children":1130},{"className":288,"code":1129,"language":290,"meta":161,"style":161},"const Partial = (fn, ...args) => (...rest) => fn(...args, ...rest)\n\nconst Adder = (a, b) => a + b\n\nconst add5 = Partial(Adder, 5)\n\nadd5(5) // >>> 10\nadd5(10) // >>> 15\n",[1131],{"type":167,"tag":293,"props":1132,"children":1133},{"__ignoreMap":161},[1134,1235,1244,1300,1307,1346,1353,1380],{"type":167,"tag":297,"props":1135,"children":1136},{"class":299,"line":300},[1137,1141,1147,1151,1155,1160,1165,1170,1175,1179,1183,1187,1192,1197,1201,1205,1210,1214,1218,1222,1226,1230],{"type":167,"tag":297,"props":1138,"children":1139},{"style":494},[1140],{"type":176,"value":766},{"type":167,"tag":297,"props":1142,"children":1144},{"style":1143},"--shiki-light:#90A4AE;--shiki-default:#6F42C1;--shiki-dark:#B392F0;--shiki-sepia:#A6E22E",[1145],{"type":176,"value":1146}," Partial",{"type":167,"tag":297,"props":1148,"children":1149},{"style":548},[1150],{"type":176,"value":551},{"type":167,"tag":297,"props":1152,"children":1153},{"style":310},[1154],{"type":176,"value":676},{"type":167,"tag":297,"props":1156,"children":1157},{"style":679},[1158],{"type":176,"value":1159},"fn",{"type":167,"tag":297,"props":1161,"children":1162},{"style":310},[1163],{"type":176,"value":1164},",",{"type":167,"tag":297,"props":1166,"children":1167},{"style":548},[1168],{"type":176,"value":1169}," ...",{"type":167,"tag":297,"props":1171,"children":1172},{"style":679},[1173],{"type":176,"value":1174},"args",{"type":167,"tag":297,"props":1176,"children":1177},{"style":310},[1178],{"type":176,"value":687},{"type":167,"tag":297,"props":1180,"children":1181},{"style":494},[1182],{"type":176,"value":790},{"type":167,"tag":297,"props":1184,"children":1185},{"style":310},[1186],{"type":176,"value":676},{"type":167,"tag":297,"props":1188,"children":1189},{"style":548},[1190],{"type":176,"value":1191},"...",{"type":167,"tag":297,"props":1193,"children":1194},{"style":679},[1195],{"type":176,"value":1196},"rest",{"type":167,"tag":297,"props":1198,"children":1199},{"style":310},[1200],{"type":176,"value":687},{"type":167,"tag":297,"props":1202,"children":1203},{"style":494},[1204],{"type":176,"value":790},{"type":167,"tag":297,"props":1206,"children":1207},{"style":316},[1208],{"type":176,"value":1209}," fn",{"type":167,"tag":297,"props":1211,"children":1212},{"style":304},[1213],{"type":176,"value":1069},{"type":167,"tag":297,"props":1215,"children":1216},{"style":548},[1217],{"type":176,"value":1191},{"type":167,"tag":297,"props":1219,"children":1220},{"style":304},[1221],{"type":176,"value":1174},{"type":167,"tag":297,"props":1223,"children":1224},{"style":310},[1225],{"type":176,"value":1164},{"type":167,"tag":297,"props":1227,"children":1228},{"style":548},[1229],{"type":176,"value":1169},{"type":167,"tag":297,"props":1231,"children":1232},{"style":304},[1233],{"type":176,"value":1234},"rest)\n",{"type":167,"tag":297,"props":1236,"children":1237},{"class":299,"line":511},[1238],{"type":167,"tag":297,"props":1239,"children":1241},{"emptyLinePlaceholder":1240},true,[1242],{"type":176,"value":1243},"\n",{"type":167,"tag":297,"props":1245,"children":1246},{"class":299,"line":529},[1247,1251,1256,1260,1264,1268,1272,1277,1281,1285,1290,1295],{"type":167,"tag":297,"props":1248,"children":1249},{"style":494},[1250],{"type":176,"value":766},{"type":167,"tag":297,"props":1252,"children":1253},{"style":1143},[1254],{"type":176,"value":1255}," Adder",{"type":167,"tag":297,"props":1257,"children":1258},{"style":548},[1259],{"type":176,"value":551},{"type":167,"tag":297,"props":1261,"children":1262},{"style":310},[1263],{"type":176,"value":676},{"type":167,"tag":297,"props":1265,"children":1266},{"style":679},[1267],{"type":176,"value":194},{"type":167,"tag":297,"props":1269,"children":1270},{"style":310},[1271],{"type":176,"value":1164},{"type":167,"tag":297,"props":1273,"children":1274},{"style":679},[1275],{"type":176,"value":1276}," b",{"type":167,"tag":297,"props":1278,"children":1279},{"style":310},[1280],{"type":176,"value":687},{"type":167,"tag":297,"props":1282,"children":1283},{"style":494},[1284],{"type":176,"value":790},{"type":167,"tag":297,"props":1286,"children":1287},{"style":304},[1288],{"type":176,"value":1289}," a ",{"type":167,"tag":297,"props":1291,"children":1292},{"style":548},[1293],{"type":176,"value":1294},"+",{"type":167,"tag":297,"props":1296,"children":1297},{"style":304},[1298],{"type":176,"value":1299}," b\n",{"type":167,"tag":297,"props":1301,"children":1302},{"class":299,"line":571},[1303],{"type":167,"tag":297,"props":1304,"children":1305},{"emptyLinePlaceholder":1240},[1306],{"type":176,"value":1243},{"type":167,"tag":297,"props":1308,"children":1309},{"class":299,"line":580},[1310,1314,1319,1323,1327,1332,1336,1342],{"type":167,"tag":297,"props":1311,"children":1312},{"style":494},[1313],{"type":176,"value":766},{"type":167,"tag":297,"props":1315,"children":1316},{"style":769},[1317],{"type":176,"value":1318}," add5",{"type":167,"tag":297,"props":1320,"children":1321},{"style":548},[1322],{"type":176,"value":551},{"type":167,"tag":297,"props":1324,"children":1325},{"style":316},[1326],{"type":176,"value":1146},{"type":167,"tag":297,"props":1328,"children":1329},{"style":304},[1330],{"type":176,"value":1331},"(Adder",{"type":167,"tag":297,"props":1333,"children":1334},{"style":310},[1335],{"type":176,"value":1164},{"type":167,"tag":297,"props":1337,"children":1339},{"style":1338},"--shiki-light:#F76D47;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1340],{"type":176,"value":1341}," 5",{"type":167,"tag":297,"props":1343,"children":1344},{"style":304},[1345],{"type":176,"value":1087},{"type":167,"tag":297,"props":1347,"children":1348},{"class":299,"line":598},[1349],{"type":167,"tag":297,"props":1350,"children":1351},{"emptyLinePlaceholder":1240},[1352],{"type":176,"value":1243},{"type":167,"tag":297,"props":1354,"children":1355},{"class":299,"line":657},[1356,1361,1365,1370,1375],{"type":167,"tag":297,"props":1357,"children":1358},{"style":316},[1359],{"type":176,"value":1360},"add5",{"type":167,"tag":297,"props":1362,"children":1363},{"style":304},[1364],{"type":176,"value":1069},{"type":167,"tag":297,"props":1366,"children":1367},{"style":1338},[1368],{"type":176,"value":1369},"5",{"type":167,"tag":297,"props":1371,"children":1372},{"style":304},[1373],{"type":176,"value":1374},") ",{"type":167,"tag":297,"props":1376,"children":1377},{"style":1028},[1378],{"type":176,"value":1379},"// >>> 10\n",{"type":167,"tag":297,"props":1381,"children":1382},{"class":299,"line":665},[1383,1387,1391,1396,1400],{"type":167,"tag":297,"props":1384,"children":1385},{"style":316},[1386],{"type":176,"value":1360},{"type":167,"tag":297,"props":1388,"children":1389},{"style":304},[1390],{"type":176,"value":1069},{"type":167,"tag":297,"props":1392,"children":1393},{"style":1338},[1394],{"type":176,"value":1395},"10",{"type":167,"tag":297,"props":1397,"children":1398},{"style":304},[1399],{"type":176,"value":1374},{"type":167,"tag":297,"props":1401,"children":1402},{"style":1028},[1403],{"type":176,"value":1404},"// >>> 15\n",{"type":167,"tag":172,"props":1406,"children":1407},{},[1408],{"type":176,"value":1409},"我猜你想咆哮：“工厂模式根本就不是这样写的！”。哈哈，别那么固执，变通一些嘛。我们现在讨论的设计模式是去除了面向对象之后的余留物，几乎只保留了设计模式的本质，复用。换句话说，Partial 是“函数工厂”，是“生成器”，“产出”了仍能接受一个参数的函数。",{"type":167,"tag":1411,"props":1412,"children":1413},"details",{},[1414,1416,1422,1423],{"type":176,"value":1415},"\n    ",{"type":167,"tag":1417,"props":1418,"children":1419},"summary",{},[1420],{"type":176,"value":1421},"我用到了类吗？",{"type":176,"value":1415},{"type":167,"tag":172,"props":1424,"children":1425},{},[1426],{"type":176,"value":1427},"没有。",{"type":167,"tag":1411,"props":1429,"children":1430},{},[1431,1432,1437,1438],{"type":176,"value":1415},{"type":167,"tag":1417,"props":1433,"children":1434},{},[1435],{"type":176,"value":1436},"用到了原型吗？",{"type":176,"value":1415},{"type":167,"tag":172,"props":1439,"children":1440},{},[1441],{"type":176,"value":1427},{"type":167,"tag":1411,"props":1443,"children":1444},{},[1445,1446,1451,1452],{"type":176,"value":1415},{"type":167,"tag":1417,"props":1447,"children":1448},{},[1449],{"type":176,"value":1450},"那我在写什么？",{"type":176,"value":1415},{"type":167,"tag":172,"props":1453,"children":1454},{},[1455],{"type":176,"value":1456},"函数。",{"type":167,"tag":172,"props":1458,"children":1459},{},[1460,1462,1479,1481,1486],{"type":176,"value":1461},"函数，函数而已！",{"type":167,"tag":214,"props":1463,"children":1464},{},[1465,1467,1477],{"type":176,"value":1466},"“函数是一等公民",{"type":167,"tag":190,"props":1468,"children":1469},{},[1470],{"type":167,"tag":194,"props":1471,"children":1475},{"href":1472,"ariaDescribedBy":1473,"dataFootnoteRef":161,"id":1474},"#user-content-fn-firstclass",[198],"user-content-fnref-firstclass",[1476],{"type":176,"value":1369},{"type":176,"value":1478},"”",{"type":176,"value":1480},"，这句话得背熟了，因为诸如“闭包”、“回调”等概念都和函数有关，",{"type":167,"tag":350,"props":1482,"children":1483},{},[1484],{"type":176,"value":1485},"面试经常会问道",{"type":176,"value":1487},"你迟早会用上的。若谈论设计模式脱离不开语言特征的话，那扯上函数绝对不会有任何问题。",{"type":167,"tag":172,"props":1489,"children":1490},{},[1491],{"type":176,"value":1492},"亲函数而远类的写法可以帮助我们消化许多种类的设计模式，我们再来看最后一种，代理模式。",{"type":167,"tag":172,"props":1494,"children":1495},{},[1496],{"type":176,"value":1497},"ES6 原生支持代理模式。对，就是 Vue3 里的那个“Proxy”，直译为“代理器”。社区有很多讲 Vue3 原理分析的文章，肯定绕不开 Proxy，这里不再赘述了。以下展示一个使用 Proxy 拦截对象操作的小例子。",{"type":167,"tag":286,"props":1499,"children":1501},{"className":288,"code":1500,"language":290,"meta":161,"style":161},"/* 使用 Proxy 代理对象，禁用对象中下划线开头的属性的访问 */\nconst proxy = new Proxy({}, {\n  set(target, key, value) {\n    invariant(key, 'set')\n    target[key] = value\n    return true\n  }\n})\n\nfunction invariant(key, action) {\n  if (key.startsWith('_')) {\n    throw new Error(`Invalid Key`)\n  }\n}\n\nproxy._prop = 'somevalue'\n// Error: Invalid Key\n",[1502],{"type":167,"tag":293,"props":1503,"children":1504},{"__ignoreMap":161},[1505,1513,1552,1595,1634,1666,1679,1686,1697,1704,1742,1794,1833,1840,1848,1856,1891],{"type":167,"tag":297,"props":1506,"children":1507},{"class":299,"line":300},[1508],{"type":167,"tag":297,"props":1509,"children":1510},{"style":1028},[1511],{"type":176,"value":1512},"/* 使用 Proxy 代理对象，禁用对象中下划线开头的属性的访问 */\n",{"type":167,"tag":297,"props":1514,"children":1515},{"class":299,"line":511},[1516,1520,1525,1529,1534,1539,1543,1548],{"type":167,"tag":297,"props":1517,"children":1518},{"style":494},[1519],{"type":176,"value":766},{"type":167,"tag":297,"props":1521,"children":1522},{"style":769},[1523],{"type":176,"value":1524}," proxy",{"type":167,"tag":297,"props":1526,"children":1527},{"style":548},[1528],{"type":176,"value":551},{"type":167,"tag":297,"props":1530,"children":1531},{"style":548},[1532],{"type":176,"value":1533}," new",{"type":167,"tag":297,"props":1535,"children":1536},{"style":316},[1537],{"type":176,"value":1538}," Proxy",{"type":167,"tag":297,"props":1540,"children":1541},{"style":304},[1542],{"type":176,"value":1069},{"type":167,"tag":297,"props":1544,"children":1545},{"style":310},[1546],{"type":176,"value":1547},"{},",{"type":167,"tag":297,"props":1549,"children":1550},{"style":310},[1551],{"type":176,"value":508},{"type":167,"tag":297,"props":1553,"children":1554},{"class":299,"line":529},[1555,1560,1564,1569,1573,1578,1582,1587,1591],{"type":167,"tag":297,"props":1556,"children":1557},{"style":584},[1558],{"type":176,"value":1559},"  set",{"type":167,"tag":297,"props":1561,"children":1562},{"style":310},[1563],{"type":176,"value":1069},{"type":167,"tag":297,"props":1565,"children":1566},{"style":679},[1567],{"type":176,"value":1568},"target",{"type":167,"tag":297,"props":1570,"children":1571},{"style":310},[1572],{"type":176,"value":1164},{"type":167,"tag":297,"props":1574,"children":1575},{"style":679},[1576],{"type":176,"value":1577}," key",{"type":167,"tag":297,"props":1579,"children":1580},{"style":310},[1581],{"type":176,"value":1164},{"type":167,"tag":297,"props":1583,"children":1584},{"style":679},[1585],{"type":176,"value":1586}," value",{"type":167,"tag":297,"props":1588,"children":1589},{"style":310},[1590],{"type":176,"value":687},{"type":167,"tag":297,"props":1592,"children":1593},{"style":310},[1594],{"type":176,"value":508},{"type":167,"tag":297,"props":1596,"children":1597},{"class":299,"line":571},[1598,1603,1608,1613,1617,1621,1626,1630],{"type":167,"tag":297,"props":1599,"children":1600},{"style":316},[1601],{"type":176,"value":1602},"    invariant",{"type":167,"tag":297,"props":1604,"children":1606},{"style":1605},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[1607],{"type":176,"value":1069},{"type":167,"tag":297,"props":1609,"children":1610},{"style":304},[1611],{"type":176,"value":1612},"key",{"type":167,"tag":297,"props":1614,"children":1615},{"style":310},[1616],{"type":176,"value":1164},{"type":167,"tag":297,"props":1618,"children":1619},{"style":554},[1620],{"type":176,"value":557},{"type":167,"tag":297,"props":1622,"children":1623},{"style":560},[1624],{"type":176,"value":1625},"set",{"type":167,"tag":297,"props":1627,"children":1628},{"style":554},[1629],{"type":176,"value":619},{"type":167,"tag":297,"props":1631,"children":1632},{"style":1605},[1633],{"type":176,"value":1087},{"type":167,"tag":297,"props":1635,"children":1636},{"class":299,"line":580},[1637,1642,1647,1651,1656,1661],{"type":167,"tag":297,"props":1638,"children":1639},{"style":304},[1640],{"type":176,"value":1641},"    target",{"type":167,"tag":297,"props":1643,"children":1644},{"style":1605},[1645],{"type":176,"value":1646},"[",{"type":167,"tag":297,"props":1648,"children":1649},{"style":304},[1650],{"type":176,"value":1612},{"type":167,"tag":297,"props":1652,"children":1653},{"style":1605},[1654],{"type":176,"value":1655},"] ",{"type":167,"tag":297,"props":1657,"children":1658},{"style":548},[1659],{"type":176,"value":1660},"=",{"type":167,"tag":297,"props":1662,"children":1663},{"style":304},[1664],{"type":176,"value":1665}," value\n",{"type":167,"tag":297,"props":1667,"children":1668},{"class":299,"line":598},[1669,1673],{"type":167,"tag":297,"props":1670,"children":1671},{"style":602},[1672],{"type":176,"value":605},{"type":167,"tag":297,"props":1674,"children":1676},{"style":1675},"--shiki-light:#FF5370;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#AE81FF",[1677],{"type":176,"value":1678}," true\n",{"type":167,"tag":297,"props":1680,"children":1681},{"class":299,"line":657},[1682],{"type":167,"tag":297,"props":1683,"children":1684},{"style":310},[1685],{"type":176,"value":577},{"type":167,"tag":297,"props":1687,"children":1688},{"class":299,"line":665},[1689,1693],{"type":167,"tag":297,"props":1690,"children":1691},{"style":310},[1692],{"type":176,"value":995},{"type":167,"tag":297,"props":1694,"children":1695},{"style":304},[1696],{"type":176,"value":1087},{"type":167,"tag":297,"props":1698,"children":1699},{"class":299,"line":694},[1700],{"type":167,"tag":297,"props":1701,"children":1702},{"emptyLinePlaceholder":1240},[1703],{"type":176,"value":1243},{"type":167,"tag":297,"props":1705,"children":1706},{"class":299,"line":719},[1707,1712,1717,1721,1725,1729,1734,1738],{"type":167,"tag":297,"props":1708,"children":1709},{"style":494},[1710],{"type":176,"value":1711},"function",{"type":167,"tag":297,"props":1713,"children":1714},{"style":316},[1715],{"type":176,"value":1716}," invariant",{"type":167,"tag":297,"props":1718,"children":1719},{"style":310},[1720],{"type":176,"value":1069},{"type":167,"tag":297,"props":1722,"children":1723},{"style":679},[1724],{"type":176,"value":1612},{"type":167,"tag":297,"props":1726,"children":1727},{"style":310},[1728],{"type":176,"value":1164},{"type":167,"tag":297,"props":1730,"children":1731},{"style":679},[1732],{"type":176,"value":1733}," action",{"type":167,"tag":297,"props":1735,"children":1736},{"style":310},[1737],{"type":176,"value":687},{"type":167,"tag":297,"props":1739,"children":1740},{"style":310},[1741],{"type":176,"value":508},{"type":167,"tag":297,"props":1743,"children":1744},{"class":299,"line":727},[1745,1750,1754,1758,1762,1767,1771,1775,1780,1784,1789],{"type":167,"tag":297,"props":1746,"children":1747},{"style":602},[1748],{"type":176,"value":1749},"  if",{"type":167,"tag":297,"props":1751,"children":1752},{"style":1605},[1753],{"type":176,"value":676},{"type":167,"tag":297,"props":1755,"children":1756},{"style":304},[1757],{"type":176,"value":1612},{"type":167,"tag":297,"props":1759,"children":1760},{"style":310},[1761],{"type":176,"value":313},{"type":167,"tag":297,"props":1763,"children":1764},{"style":316},[1765],{"type":176,"value":1766},"startsWith",{"type":167,"tag":297,"props":1768,"children":1769},{"style":1605},[1770],{"type":176,"value":1069},{"type":167,"tag":297,"props":1772,"children":1773},{"style":554},[1774],{"type":176,"value":619},{"type":167,"tag":297,"props":1776,"children":1777},{"style":560},[1778],{"type":176,"value":1779},"_",{"type":167,"tag":297,"props":1781,"children":1782},{"style":554},[1783],{"type":176,"value":619},{"type":167,"tag":297,"props":1785,"children":1786},{"style":1605},[1787],{"type":176,"value":1788},")) ",{"type":167,"tag":297,"props":1790,"children":1791},{"style":310},[1792],{"type":176,"value":1793},"{\n",{"type":167,"tag":297,"props":1795,"children":1796},{"class":299,"line":981},[1797,1802,1806,1811,1815,1820,1825,1829],{"type":167,"tag":297,"props":1798,"children":1799},{"style":602},[1800],{"type":176,"value":1801},"    throw",{"type":167,"tag":297,"props":1803,"children":1804},{"style":548},[1805],{"type":176,"value":1533},{"type":167,"tag":297,"props":1807,"children":1808},{"style":316},[1809],{"type":176,"value":1810}," Error",{"type":167,"tag":297,"props":1812,"children":1813},{"style":1605},[1814],{"type":176,"value":1069},{"type":167,"tag":297,"props":1816,"children":1817},{"style":554},[1818],{"type":176,"value":1819},"`",{"type":167,"tag":297,"props":1821,"children":1822},{"style":560},[1823],{"type":176,"value":1824},"Invalid Key",{"type":167,"tag":297,"props":1826,"children":1827},{"style":554},[1828],{"type":176,"value":1819},{"type":167,"tag":297,"props":1830,"children":1831},{"style":1605},[1832],{"type":176,"value":1087},{"type":167,"tag":297,"props":1834,"children":1835},{"class":299,"line":989},[1836],{"type":167,"tag":297,"props":1837,"children":1838},{"style":310},[1839],{"type":176,"value":577},{"type":167,"tag":297,"props":1841,"children":1843},{"class":299,"line":1842},14,[1844],{"type":167,"tag":297,"props":1845,"children":1846},{"style":310},[1847],{"type":176,"value":733},{"type":167,"tag":297,"props":1849,"children":1851},{"class":299,"line":1850},15,[1852],{"type":167,"tag":297,"props":1853,"children":1854},{"emptyLinePlaceholder":1240},[1855],{"type":176,"value":1243},{"type":167,"tag":297,"props":1857,"children":1859},{"class":299,"line":1858},16,[1860,1865,1869,1874,1878,1882,1887],{"type":167,"tag":297,"props":1861,"children":1862},{"style":304},[1863],{"type":176,"value":1864},"proxy",{"type":167,"tag":297,"props":1866,"children":1867},{"style":310},[1868],{"type":176,"value":313},{"type":167,"tag":297,"props":1870,"children":1871},{"style":304},[1872],{"type":176,"value":1873},"_prop ",{"type":167,"tag":297,"props":1875,"children":1876},{"style":548},[1877],{"type":176,"value":1660},{"type":167,"tag":297,"props":1879,"children":1880},{"style":554},[1881],{"type":176,"value":557},{"type":167,"tag":297,"props":1883,"children":1884},{"style":560},[1885],{"type":176,"value":1886},"somevalue",{"type":167,"tag":297,"props":1888,"children":1889},{"style":554},[1890],{"type":176,"value":568},{"type":167,"tag":297,"props":1892,"children":1894},{"class":299,"line":1893},17,[1895],{"type":167,"tag":297,"props":1896,"children":1897},{"style":1028},[1898],{"type":176,"value":1899},"// Error: Invalid Key\n",{"type":167,"tag":172,"props":1901,"children":1902},{},[1903],{"type":176,"value":1904},"若脱离 ES 6，代理模式会变成什么？",{"type":167,"tag":172,"props":1906,"children":1907},{},[1908],{"type":176,"value":1909},"会变成一团带有 Proxy Patterns 注释的函数，会被某个 GitHub 上的库吸收下放到 Readme 中亦或是变成社区中新增的几篇“JS 中的代理模式”的博客... 害，无所谓了。",{"type":167,"tag":179,"props":1911,"children":1913},{"id":1912},"设计模式的消融",[1914],{"type":176,"value":1912},{"type":167,"tag":172,"props":1916,"children":1917},{},[1918,1923],{"type":167,"tag":214,"props":1919,"children":1920},{},[1921],{"type":176,"value":1922},"总的来说，设计模式无非有三种作用：创建对象、组合对象以及处理对象的依赖",{"type":176,"value":1924},"。面向对象设计模式所代表的复用性，只能在面向对象的上下文中使用。跳出面向对象，你会发现代码复用的层次可以更加开放，下至语言特征，上至框架。",{"type":167,"tag":172,"props":1926,"children":1927},{},[1928],{"type":176,"value":1929},"作为抽象的最低层级，JS 语言特征，离不开日益见新的语言规范。上文总结的设计模式与语言特征的重叠之处，可以概括为以下两点：",{"type":167,"tag":1931,"props":1932,"children":1933},"ul",{},[1934,1940],{"type":167,"tag":1935,"props":1936,"children":1937},"li",{},[1938],{"type":176,"value":1939},"若语言本身孱弱时，可通过语言特征的再上层抽象，如函数，来提高复用的层次（即发明一种新的设计模式）；",{"type":167,"tag":1935,"props":1941,"children":1942},{},[1943],{"type":176,"value":1944},"当语言逐渐强大时，设计模式的概念也随之弱化；",{"type":167,"tag":172,"props":1946,"children":1947},{},[1948],{"type":176,"value":1949},"听起来颇有些“设计模式是对语言能力不足的补充”的味道，难道说我们要开始编程语言的圣战？这让我回想起 Paul Graham 在《黑客与画家》中描写到他对“强大语言”的赤裸裸的崇拜:",{"type":167,"tag":168,"props":1951,"children":1952},{},[1953],{"type":167,"tag":172,"props":1954,"children":1955},{},[1956,1958,1962,1964,1967,1969,1972,1974,1977,1979],{"type":176,"value":1957},"如果你想解决一个困难的问题，",{"type":167,"tag":1959,"props":1960,"children":1961},"br",{},[],{"type":176,"value":1963},"\n关键不是你使用的语言是否强大，而是好几个因素同时发挥作用：",{"type":167,"tag":1959,"props":1965,"children":1966},{},[],{"type":176,"value":1968},"\n（a）使用一种强大的语言；",{"type":167,"tag":1959,"props":1970,"children":1971},{},[],{"type":176,"value":1973},"\n（b）为这个难题写一个真实世界中的编译器；",{"type":167,"tag":1959,"props":1975,"children":1976},{},[],{"type":176,"value":1978},"\n（c）或者... 你把自己变成这个难题的人肉编译器。\n",{"type":167,"tag":545,"props":1980,"children":1981},{},[1982],{"type":176,"value":1983},"Paul Graham",{"type":167,"tag":172,"props":1985,"children":1986},{},[1987],{"type":176,"value":1988},"Paul Graham 就觉得设计模式就是一种对语言能力不足的妥协，“语言的编程能力越强大，写出来的程序就越短”。当然，就算有一种语言可以强大到和破除面向对象设计模式的神话，关于语言的表达能力强弱的争论也不会停止。不过好消息是，脱离场景谈语言一定是错误的，正如没有人会指望用汇编来编写 Web 程序。",{"type":167,"tag":172,"props":1990,"children":1991},{},[1992],{"type":176,"value":1993},"我们没必要去追求极致的编程语言表达力，表达力和复杂度往往是正相关的，就像世界上所有的语言的法阵都会伴随着词语的演进、读音的兴替以及对错误语法的包容，但很少有人说（或敢说）“你看，白话文比起文言文来说真是不够格啊”。",{"type":167,"tag":172,"props":1995,"children":1996},{},[1997],{"type":176,"value":1998},"脱离面向对象，我们也可以谈论设计模式，因为我们聊的就是代码复用。就算使用函数式、声明式的语言解决问题，也许有特定范式可遵循。请想象一下 CSS 中的设计模式。嗯？CSS 有设计模式么？私以为有。特异性、继承和层叠这三种语言特征就是 CSS 的设计模式；在这三种基础特性之上建立起来的各种代码组织方案/命名方案（如 OOCSS、Atomic CSS），也算。",{"type":167,"tag":172,"props":2000,"children":2001},{},[2002,2007],{"type":167,"tag":214,"props":2003,"children":2004},{},[2005],{"type":176,"value":2006},"唯一不变的，只有抽象的复用",{"type":176,"value":2008},"。我们做的一切工作，只是在抽象出不同层次的代码复用的同时，尽可能把代码组织成容易理解的形式。重要的不是记住某个设计模式中的实体以及实体是如何通讯的，而是要理解该设计模式所代表的抽象的体量适合的场景。",{"type":167,"tag":179,"props":2010,"children":2012},{"id":2011},"语言的魔法锅",[2013],{"type":176,"value":2011},{"type":167,"tag":168,"props":2015,"children":2016},{},[2017],{"type":167,"tag":172,"props":2018,"children":2019},{},[2020,2022],{"type":176,"value":2021},"在威尔士神话中，有一口神奇的大锅，加入特定配方熬制上一年零一天后，便能萃取出三滴解决任何难题的灵药。\n",{"type":167,"tag":545,"props":2023,"children":2024},{},[2025],{"type":176,"value":2026},"《塔列辛传奇》",{"type":167,"tag":172,"props":2028,"children":2029},{},[2030,2032,2039,2041,2048,2050,2061,2063,2074],{"type":176,"value":2031},"JavaScript 的火热日益见长，前端社区",{"type":167,"tag":194,"props":2033,"children":2036},{"href":2034,"rel":2035},"https://githut.info/",[1121],[2037],{"type":176,"value":2038},"越加活跃",{"type":176,"value":2040},"，规范也",{"type":167,"tag":194,"props":2042,"children":2045},{"href":2043,"rel":2044},"https://tc39.es/ecma262/",[1121],[2046],{"type":176,"value":2047},"日益见新",{"type":176,"value":2049},"。ESNeeext 已经往魔法锅中加了许多新材料，这是好事（其实我满心期待它直接把锅塞满）。新的语言特征能带来了更多的可能性，就目前而言，新特征大概率能增加语义，增强表达力、降低思维负担",{"type":167,"tag":190,"props":2051,"children":2052},{},[2053],{"type":167,"tag":194,"props":2054,"children":2058},{"href":2055,"ariaDescribedBy":2056,"dataFootnoteRef":161,"id":2057},"#user-content-fn-if-one-word",[198],"user-content-fnref-if-one-word",[2059],{"type":176,"value":2060},"6",{"type":176,"value":2062},"。尽管把材料往大锅中塞吧",{"type":167,"tag":190,"props":2064,"children":2065},{},[2066],{"type":167,"tag":194,"props":2067,"children":2071},{"href":2068,"ariaDescribedBy":2069,"dataFootnoteRef":161,"id":2070},"#user-content-fn-how-js-works",[198],"user-content-fnref-how-js-works",[2072],{"type":176,"value":2073},"7",{"type":176,"value":2075},"！让我们一同祈祷萃取出灵药的一天早日到来！",{"type":167,"tag":172,"props":2077,"children":2078},{},[2079],{"type":176,"value":2080},"以下就用魔法锅的故事作为文章结尾，这是一个颇有意思的传奇故事。",{"type":167,"tag":172,"props":2082,"children":2083},{},[2084],{"type":167,"tag":250,"props":2085,"children":2088},{"alt":2086,"src":2087},"炼金术 | 维基百科","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/200704/20200713074400.png",[],{"type":167,"tag":172,"props":2090,"children":2091},{},[2092],{"type":176,"value":2093},"在爱尔兰一个隐秘的角落，住着一个精通智慧与魔法的巫师，凯丽杜恩（Ceridwen）。她能力超凡，偏偏却生了一个丑陋的儿子。所以这位母亲竭尽所能想将智慧传授给他，以弥补其外表的丑陋。她辗转于各种巫术与秘仪，最后，总算在一本隐秘的魔书中找到了灵感。",{"type":167,"tag":172,"props":2095,"children":2096},{},[2097],{"type":176,"value":2098},"魔书将秘密告诉凯丽杜恩：她需要使用一口大的魔法锅，填满红山花、小麦、火盐、精灵耳、直立根和灵尘，用大火熬制上一年零一天。最终会生成一锅致命毒物，但溅出的前三滴汁液却是充满“预言之灵”的智慧灵药。",{"type":167,"tag":172,"props":2100,"children":2101},{},[2102],{"type":176,"value":2103},"很快，熬制魔法锅的工作在凯丽杜恩的安排下有条不紊地进行，一个名字未知的盲人被派来搅拌大锅，年轻人巴赫则负责烧它下面的火。",{"type":167,"tag":172,"props":2105,"children":2106},{},[2107],{"type":176,"value":2108},"星象在天空中咯咯响地平移着，太阳和月亮绕着地球转了一轮又一轮... 随着时间推移，锅中的草药效力变得越来越强。看着咕嘟嘟冒着气泡的大锅，凯丽杜恩觉得很是满意，她便躺在温暖的锅边睡着了。",{"type":167,"tag":172,"props":2110,"children":2111},{},[2112,2114],{"type":176,"value":2113},"就在此时，意外发生了。翻腾着热气的大锅，意外地溅出了几点液体在年轻人巴赫的手指上，而巴赫居然不假思索地将手指吮吸地干干净净。和魔书的预言一样，巴赫立马就获得了智慧。他瞬间通晓了火焰的舞蹈和水的诉说，山的尊严和风的呢喃... 他知晓了无数秘密，以及... ",{"type":167,"tag":214,"props":2115,"children":2116},{},[2117],{"type":176,"value":2118},"凯丽杜恩肯定会杀了他！",{"type":167,"tag":172,"props":2120,"children":2121},{},[2122],{"type":176,"value":2123},"慌乱中，巴赫变成一只野兔夺路而逃，而凯丽杜恩惊醒后赶忙变成猎犬一路追踪过去。巴赫变成天空中的鸽子，她就变成一只鹰；他变成一头奔跑的鹿，她就变成一只草原上的狼；他化身为谷仓中的一粒麦粒，她就变成一只啄个不停老母鸡...",{"type":167,"tag":172,"props":2125,"children":2126},{},[2127],{"type":176,"value":2128},"这两人也许一直较量着，直到今天。",{"type":167,"tag":179,"props":2130,"children":2132},{"id":2131},"阅读更多",[2133],{"type":176,"value":2131},{"type":167,"tag":1931,"props":2135,"children":2136},{},[2137,2147,2157],{"type":167,"tag":1935,"props":2138,"children":2139},{},[2140],{"type":167,"tag":194,"props":2141,"children":2144},{"href":2142,"rel":2143},"https://www.jdon.com/37356",[1121],[2145],{"type":176,"value":2146},"15 年后 GoF 设计模式作者再谈设计模式",{"type":167,"tag":1935,"props":2148,"children":2149},{},[2150],{"type":167,"tag":194,"props":2151,"children":2154},{"href":2152,"rel":2153},"https://www.zhihu.com/question/37009570",[1121],[2155],{"type":176,"value":2156},"为什么不能乱点技能树",{"type":167,"tag":1935,"props":2158,"children":2159},{},[2160],{"type":167,"tag":194,"props":2161,"children":2164},{"href":2162,"rel":2163},"https://mp.weixin.qq.com/s?src=11&timestamp=1651051411&ver=3764&signature=AiaMcpc*LLVNlmVWIHaOvu4sThNq8OFp8ckqlVllLSohG8dWn**P3unuBhRwZAEND0uJdnurJtHvE6IKlBYAUUwuvRYknXkKje6CzOZaQBxRPIlnN4kwtzYsfa8fxKSM&new=1",[1121],[2165],{"type":176,"value":2166},"超越库和框架的技术创新",{"type":167,"tag":172,"props":2168,"children":2169},{},[2170],{"type":176,"value":2171},"希望本文能对你有所帮助，也欢迎各位批评文中观点或指出错误。",{"type":167,"tag":172,"props":2173,"children":2174},{},[2175,2177,2184,2186,2193],{"type":176,"value":2176},"想看看这篇文章是如何被创造的？你能从我的",{"type":167,"tag":194,"props":2178,"children":2181},{"href":2179,"rel":2180},"https://github.com/Lionad-Morotar/blogs",[1121],[2182],{"type":176,"value":2183},"博客项目",{"type":176,"value":2185},"中找到答案~ 欢迎 Star & Follow~ 也请大家多来我的",{"type":167,"tag":194,"props":2187,"children":2190},{"href":2188,"rel":2189},"https://www.lionad.art",[1121],[2191],{"type":176,"value":2192},"线上博客逛逛",{"type":176,"value":2194},"，排版超 Nice 哦~",{"type":167,"tag":2196,"props":2197,"children":2200},"section",{"className":2198,"dataFootnotes":161},[2199],"footnotes",[2201,2208],{"type":167,"tag":179,"props":2202,"children":2205},{"className":2203,"id":198},[2204],"sr-only",[2206],{"type":176,"value":2207},"Footnotes",{"type":167,"tag":2209,"props":2210,"children":2211},"ol",{},[2212,2227,2249,2262,2283,2296,2309],{"type":167,"tag":1935,"props":2213,"children":2215},{"id":2214},"user-content-fn-%E6%96%87%E5%8C%96",[2216,2218],{"type":176,"value":2217},"非贬义。 ",{"type":167,"tag":194,"props":2219,"children":2224},{"href":2220,"ariaLabel":2221,"className":2222,"dataFootnoteBackref":161},"#user-content-fnref-%E6%96%87%E5%8C%96","Back to reference 1",[2223],"data-footnote-backref",[2225],{"type":176,"value":2226},"↩",{"type":167,"tag":1935,"props":2228,"children":2230},{"id":2229},"user-content-fn-fn-call",[2231,2233,2240,2242],{"type":176,"value":2232},"见：",{"type":167,"tag":194,"props":2234,"children":2237},{"href":2235,"rel":2236},"https://zhuanlan.zhihu.com/p/95741316",[1121],[2238],{"type":176,"value":2239},"子程序（函数）考古学",{"type":176,"value":2241}," ",{"type":167,"tag":194,"props":2243,"children":2247},{"href":2244,"ariaLabel":2245,"className":2246,"dataFootnoteBackref":161},"#user-content-fnref-fn-call","Back to reference 2",[2223],[2248],{"type":176,"value":2226},{"type":167,"tag":1935,"props":2250,"children":2252},{"id":2251},"user-content-fn-css",[2253,2255],{"type":176,"value":2254},"试试使用 CSS 去写游戏？即便可行，但过程也会让人无比沮丧。 ",{"type":167,"tag":194,"props":2256,"children":2260},{"href":2257,"ariaLabel":2258,"className":2259,"dataFootnoteBackref":161},"#user-content-fnref-css","Back to reference 3",[2223],[2261],{"type":176,"value":2226},{"type":167,"tag":1935,"props":2263,"children":2265},{"id":2264},"user-content-fn-module-pattern",[2266,2268,2274,2276],{"type":176,"value":2267},"此模块模式并非传统面向对象中的模块模式，后者的定义见：",{"type":167,"tag":194,"props":2269,"children":2272},{"href":2270,"rel":2271},"https://www.jdon.com/52843",[1121],[2273],{"type":176,"value":2270},{"type":176,"value":2275},"。 ",{"type":167,"tag":194,"props":2277,"children":2281},{"href":2278,"ariaLabel":2279,"className":2280,"dataFootnoteBackref":161},"#user-content-fnref-module-pattern","Back to reference 4",[2223],[2282],{"type":176,"value":2226},{"type":167,"tag":1935,"props":2284,"children":2286},{"id":2285},"user-content-fn-firstclass",[2287,2289],{"type":176,"value":2288},"且叫且珍惜，说不定以后就听不到“一等公民”这种叫法啦。 ",{"type":167,"tag":194,"props":2290,"children":2294},{"href":2291,"ariaLabel":2292,"className":2293,"dataFootnoteBackref":161},"#user-content-fnref-firstclass","Back to reference 5",[2223],[2295],{"type":176,"value":2226},{"type":167,"tag":1935,"props":2297,"children":2299},{"id":2298},"user-content-fn-if-one-word",[2300,2302],{"type":176,"value":2301},"用一个单词就能达意时就不需要用一个句子。 ",{"type":167,"tag":194,"props":2303,"children":2307},{"href":2304,"ariaLabel":2305,"className":2306,"dataFootnoteBackref":161},"#user-content-fnref-if-one-word","Back to reference 6",[2223],[2308],{"type":176,"value":2226},{"type":167,"tag":1935,"props":2310,"children":2312},{"id":2311},"user-content-fn-how-js-works",[2313,2315],{"type":176,"value":2314},"语言特征并不总是银弹，类似观点见道格拉斯的《How JS Works》 ",{"type":167,"tag":194,"props":2316,"children":2320},{"href":2317,"ariaLabel":2318,"className":2319,"dataFootnoteBackref":161},"#user-content-fnref-how-js-works","Back to reference 7",[2223],[2321],{"type":176,"value":2226},{"type":167,"tag":2323,"props":2324,"children":2325},"style",{},[2326],{"type":176,"value":2327},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":161,"searchDepth":511,"depth":511,"links":2329},[2330,2331,2332,2333,2334,2335,2336,2337],{"id":181,"depth":511,"text":181},{"id":233,"depth":511,"text":233},{"id":341,"depth":511,"text":341},{"id":443,"depth":511,"text":443},{"id":1912,"depth":511,"text":1912},{"id":2011,"depth":511,"text":2011},{"id":2131,"depth":511,"text":2131},{"id":198,"depth":511,"text":2207},"markdown","content:2.articles:1107.design-patterns-and-js-magic-pot.md","content","2.articles/1107.design-patterns-and-js-magic-pot.md","2.articles/1107.design-patterns-and-js-magic-pot","md",[2345,2347],{"_path":70,"title":69,"description":2346},"本文介绍了几种通过CSS实现的常见阴影效果如单侧投影、空心投影、投影动画、彩色阴影、长投影和倒影，以及尝试使用SVG模拟材质特性如粗糙度及光学效应如菲尼尔效应生成了几种特殊的纹理，最后通过一个CSS绘制真实书本案例介绍了实战中的一些细节。",{"_path":76,"title":75,"description":2348},"上一篇讲 anysort 的文章说到因网易云音乐的歌单排序功能较弱，我们自己实现的用来给歌单自定义排序的排序库的思路。这篇文章在排序库的基础上，介绍了其 TypeScript 类型实现。",1748756306275]