[{"data":1,"prerenderedAt":2325},["Reactive",2],{"navigation":3,"/_archieved/2019-06/teditor":383,"/_archieved/2019-06/teditor-surround":2317},[4,32,80,96,123,129,135,366,372,378],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"图片模糊","/gists/blur",{"title":148,"_path":149},"渲染相关笔记","/gists/c4d",{"title":151,"_path":152},"CDN 问题记录","/gists/cdn",{"title":154,"_path":155},"消毒剂","/gists/cleaner",{"title":157,"_path":158},"Windows Command","/gists/cmd",{"title":160,"_path":161},"Command","/gists/command",{"title":163,"_path":164},"复杂科学","/gists/complexity-science",{"title":166,"_path":167},"宇宙","/gists/cosmos",{"title":169,"_path":170},"C++","/gists/cpp",{"title":172,"_path":173},"Data Structure","/gists/data-structure",{"title":175,"_path":176},"DEPRESSION","/gists/depression",{"title":178,"_path":179},"设计模式","/gists/design-patterns",{"title":181,"_path":182},"Developer Experience","/gists/developer-experience",{"title":184,"_path":185},"Device Metrics","/gists/device-metrix",{"title":187,"_path":188},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":190,"_path":191},"正则表达式","/gists/eegex",{"title":193,"_path":194},"Emoji","/gists/emoji",{"title":196,"_path":197},"工程","/gists/engineering",{"title":199,"_path":200},"熵","/gists/entropy",{"title":202,"_path":203},"Environment","/gists/environment",{"title":205,"_path":206},"Erlang","/gists/erlang",{"title":208,"_path":209},"逃离塔克夫","/gists/escape-from-tarkov",{"title":211,"_path":212},"ESNext (ES6-ES11)","/gists/esnext",{"title":214,"_path":215},"Eval！","/gists/eval",{"title":217,"_path":218},"Flutter","/gists/flutter",{"title":220,"_path":221},"字体","/gists/font",{"title":223,"_path":224},"JS 函数式编程","/gists/functional",{"title":226,"_path":227},"Google C++ Standard","/gists/google-cpp-standard",{"title":229,"_path":230},"双向链接完全体","/gists/graph",{"title":232,"_path":233},"Hardwares","/gists/hardwares",{"title":235,"_path":236},"哈希冲突","/gists/hash-collision",{"title":238,"_path":239},"信息设计","/gists/information-design",{"title":241,"_path":242},"InstantPage","/gists/instant.page",{"title":244,"_path":245},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":247,"_path":248},"KVStore","/gists/key-value-db",{"title":250,"_path":251},"Kubernetes","/gists/kubernetes",{"title":253,"_path":254},"Makefile","/gists/makefile",{"title":256,"_path":257},"Markdown Inline Style","/gists/markdown-nice",{"title":259,"_path":260},"小程序","/gists/miniapp",{"title":262,"_path":263},"减小页面快照体积","/gists/minify-html",{"title":265,"_path":266},"mklink","/gists/mklink",{"title":268,"_path":269},"Mock","/gists/mock",{"title":271,"_path":272},"多端应用","/gists/multy-end-app",{"title":274,"_path":275},"神经科学","/gists/neuroscience",{"title":277,"_path":278},"OO","/gists/oo",{"title":280,"_path":281},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":283,"_path":284},"人物","/gists/person",{"title":286,"_path":287},"PInvoke","/gists/pinvoke",{"title":289,"_path":290},"像素","/gists/pixel",{"title":292,"_path":293},"PowerShell","/gists/powershell",{"title":295,"_path":296},"量子","/gists/quantum",{"title":298,"_path":299},"保持好奇心","/gists/questions",{"title":301,"_path":302},"React Native","/gists/react-native",{"title":304,"_path":305},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":307,"_path":308},"SEO","/gists/seo",{"title":310,"_path":311},"Shader","/gists/shader",{"title":313,"_path":314},"Shape Up","/gists/shape-up",{"title":316,"_path":317},"睡觉","/gists/sleep",{"title":319,"_path":320},"States","/gists/states",{"title":322,"_path":323},"Storage","/gists/storage",{"title":325,"_path":326},"音视频流处理","/gists/stream-cli",{"title":328,"_path":329},"Symbol","/gists/symbol",{"title":331,"_path":332},"系统论","/gists/systems-theory",{"title":334,"_path":335},"Taro","/gists/taro",{"title":337,"_path":338},"任务切片","/gists/task-slice",{"title":340,"_path":341},"技术偏好","/gists/tech-dudge",{"title":343,"_path":344},"Untitled","/gists/untitled",{"title":346,"_path":347},"可变字体","/gists/variable-font",{"title":349,"_path":350},"视觉错觉","/gists/visual-illusion",{"title":352,"_path":353},"SS(SSR)","/gists/vpn",{"title":355,"_path":356},"VS Code 插件开发","/gists/vscode-plugin",{"title":358,"_path":359},"Web Components","/gists/web-components",{"title":361,"_path":362},"Windows","/gists/windows",{"title":364,"_path":365},"查缺补漏","/gists/wrong",{"title":367,"_path":368,"children":369},"代码笔记 / Gists","/source-code",[370],{"title":371,"_path":368},"🚄 代码笔记",{"title":373,"_path":374,"children":375},"我 / Abount","/hire",[376],{"title":377,"_path":374},"📬 技术简历",{"title":379,"_path":380,"children":381},"todo","/todo",[382],{"title":379,"_path":380},{"_path":384,"_dir":385,"_draft":386,"_partial":387,"_locale":388,"title":389,"description":388,"body":390,"_type":529,"_id":2313,"_source":2314,"_file":2315,"_extension":2316},"/_archieved/2019-06/teditor","2019-06",false,true,"","从一个越写越慢的编辑器中聊聊优化思路",{"type":391,"children":392,"toc":2300},"root",[393,402,408,413,428,444,449,463,476,485,490,495,500,520,525,574,585,595,600,650,655,660,665,670,683,688,724,730,735,868,873,878,891,896,974,979,984,989,994,999,1005,1018,1023,1028,1041,1046,1052,1057,1070,1336,1341,1346,1354,1974,1979,2220,2225,2230,2235,2240,2245,2250,2255,2260,2294],{"type":394,"tag":395,"props":396,"children":398},"element","h2",{"id":397},"增订-2020年8月9日",[399],{"type":400,"value":401},"text","增订 | 2020年8月9日",{"type":394,"tag":403,"props":404,"children":405},"p",{},[406],{"type":400,"value":407},"TEditor 维护了一个解析状态栈。逐个读入字符，结合当前解析状态进行状态转换，将旧状态推入栈中，以模仿解析 HTML 的层级结构。状态栈的入栈、出栈过程，通过 DIG_IN、DIG_OUT 来维护，这两个函数会触发更新标签流的副作用。",{"type":394,"tag":403,"props":409,"children":410},{},[411],{"type":400,"value":412},"因为处理整段字符也只需要一次循环；要维护的状态大体上来说只有零散的几个变量和一个状态栈；没有用正则匹配；再加上每解析过程和正常的 Markdown 解析器不一样，TEditor 最大段落只支持到行，再加上每行都做了 LFU 缓存。所以理论上来说 TEditor 应该相当快... 不过，随着解析器的功能增强，状态维护变得有点困难，特别乱。反正我现在是很难看懂我以前写了啥玩意儿...",{"type":394,"tag":414,"props":415,"children":416},"blockquote",{},[417],{"type":394,"tag":403,"props":418,"children":419},{},[420,422],{"type":400,"value":421},"整个系统的状态转变则是发生在许许多多小的、细微的状态变化混合来形成的。这些相互关联的状态变化形成了一个概念上的“状态网”，我们时不时会因它而感到困惑。\n",{"type":394,"tag":423,"props":424,"children":425},"name",{},[426],{"type":400,"value":427},"《JavaScript 函数式编程》",{"type":394,"tag":403,"props":429,"children":430},{},[431,433,442],{"type":400,"value":432},"经过一年的 JS 学习，我的 JS 水平提高了不少。近期我重写了这个 Markdown 解析器，",{"type":394,"tag":434,"props":435,"children":439},"a",{"href":436,"rel":437},"https://github.com/Lionad-Morotar/read-source-code/tree/master/module/markdown-parser",[438],"nofollow",[440],{"type":400,"value":441},"Markdown Parser",{"type":400,"value":443},"，舍弃了“状态转换”的概念，用回了正则匹配 + AST。虽然说速度可能变慢了一个量级，不过可扩展性还是非常强的，比如说可自定义解析插件，介入解析过程。有空还是得学习 Markdown-It 的源码，那玩意儿是我的目标...",{"type":394,"tag":395,"props":445,"children":447},{"id":446},"原文",[448],{"type":400,"value":446},{"type":394,"tag":403,"props":450,"children":451},{},[452,454,461],{"type":400,"value":453},"你用过一个",{"type":394,"tag":455,"props":456,"children":458},"code",{"className":457},[],[459],{"type":400,"value":460},"越写越慢的编辑器",{"type":400,"value":462},"么？",{"type":394,"tag":403,"props":464,"children":465},{},[466,468,474],{"type":400,"value":467},"我曾在项目中实现了一个 MD 编辑器，用来解析简单的 MD 文本，不过它的性能令我捉急。初期基本没有做任何性能优化相关的内容，导致每当我正在写的文章变长之后，编辑器会变得非常",{"type":394,"tag":469,"props":470,"children":471},"del",{},[472],{"type":400,"value":473},"非常",{"type":400,"value":475},"卡，所以说是越写越慢的编辑器( ╯□╰ ) 这期文章主要针对这个编辑器聊聊我实践以及思考总结的一些性能优化方法，肯定还有文中没有总结到的一些方法，欢迎各位看官不舍赐教，留言评论。",{"type":394,"tag":403,"props":477,"children":478},{},[479],{"type":394,"tag":480,"props":481,"children":484},"img",{"alt":482,"src":483},"TEditor","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/teditor/2019-05-06-01-10-43.png",[],{"type":394,"tag":395,"props":486,"children":488},{"id":487},"解析过程简述",[489],{"type":400,"value":487},{"type":394,"tag":403,"props":491,"children":492},{},[493],{"type":400,"value":494},"文中 MD 编辑器可以在左侧窗口输入 MD 格式文本，然后通过调用解析函数将文本解析转换为 HTML 代码，放到右侧 v-html 窗口中直接渲染。",{"type":394,"tag":403,"props":496,"children":497},{},[498],{"type":400,"value":499},"一般来说 MD 解析不需要经过词法语法分析，而且标点符号几乎没有二义性，解析起来比较简单。对于一段简单的 MD 文本，我们大可从一个正则表达式的角度入手。思考从以下 4 点开始匹配：",{"type":394,"tag":501,"props":502,"children":503},"ol",{},[504,510,515],{"type":394,"tag":505,"props":506,"children":507},"li",{},[508],{"type":400,"value":509},"解析块状元素，分割线，引用块，代码段等",{"type":394,"tag":505,"props":511,"children":512},{},[513],{"type":400,"value":514},"解析文本元素，标题，列表，以及普通文本内容",{"type":394,"tag":505,"props":516,"children":517},{},[518],{"type":400,"value":519},"解析行内元素，角标，加粗，斜体等",{"type":394,"tag":403,"props":521,"children":522},{},[523],{"type":400,"value":524},"我们以以下文本为例进行解析：",{"type":394,"tag":526,"props":527,"children":531},"pre",{"code":528,"language":529,"meta":388,"className":530,"style":388},"### 一个*斜体*标题\n","markdown","language-markdown shiki shiki-themes material-theme-lighter github-light github-dark monokai",[532],{"type":394,"tag":455,"props":533,"children":534},{"__ignoreMap":388},[535],{"type":394,"tag":536,"props":537,"children":540},"span",{"class":538,"line":539},"line",1,[541,547,553,559,565,569],{"type":394,"tag":536,"props":542,"children":544},{"style":543},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold",[545],{"type":400,"value":546},"### ",{"type":394,"tag":536,"props":548,"children":550},{"style":549},"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold",[551],{"type":400,"value":552},"一个",{"type":394,"tag":536,"props":554,"children":556},{"style":555},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic",[557],{"type":400,"value":558},"*",{"type":394,"tag":536,"props":560,"children":562},{"style":561},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic",[563],{"type":400,"value":564},"斜体",{"type":394,"tag":536,"props":566,"children":567},{"style":555},[568],{"type":400,"value":558},{"type":394,"tag":536,"props":570,"children":571},{"style":549},[572],{"type":400,"value":573},"标题\n",{"type":394,"tag":403,"props":575,"children":576},{},[577,579],{"type":400,"value":578},"首先命中文本元素标题，内容为",{"type":394,"tag":455,"props":580,"children":582},{"className":581},[],[583],{"type":400,"value":584},"一个*斜体*标题",{"type":394,"tag":403,"props":586,"children":587},{},[588,590],{"type":400,"value":589},"紧接着，继续解析比文本元素优先级更低的行内元素，这次命中行内元素斜体，内容为",{"type":394,"tag":455,"props":591,"children":593},{"className":592},[],[594],{"type":400,"value":564},{"type":394,"tag":403,"props":596,"children":597},{},[598],{"type":400,"value":599},"至此，我们将解析完的内容推入结果数组，结果形如：",{"type":394,"tag":526,"props":601,"children":605},{"code":602,"language":603,"meta":388,"className":604,"style":388},"parsedContent = [`\u003Ch3>一个\u003Ci>斜体\u003C/i>标题\u003C/h3>`]\n","js","language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai",[606],{"type":394,"tag":455,"props":607,"children":608},{"__ignoreMap":388},[609],{"type":394,"tag":536,"props":610,"children":611},{"class":538,"line":539},[612,618,624,629,635,641,645],{"type":394,"tag":536,"props":613,"children":615},{"style":614},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[616],{"type":400,"value":617},"parsedContent ",{"type":394,"tag":536,"props":619,"children":621},{"style":620},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[622],{"type":400,"value":623},"=",{"type":394,"tag":536,"props":625,"children":626},{"style":614},[627],{"type":400,"value":628}," [",{"type":394,"tag":536,"props":630,"children":632},{"style":631},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[633],{"type":400,"value":634},"`",{"type":394,"tag":536,"props":636,"children":638},{"style":637},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[639],{"type":400,"value":640},"\u003Ch3>一个\u003Ci>斜体\u003C/i>标题\u003C/h3>",{"type":394,"tag":536,"props":642,"children":643},{"style":631},[644],{"type":400,"value":634},{"type":394,"tag":536,"props":646,"children":647},{"style":614},[648],{"type":400,"value":649},"]\n",{"type":394,"tag":403,"props":651,"children":652},{},[653],{"type":400,"value":654},"如果文本不是一行，再继续之前的思路继续解析，直到原始内容为空，得到最终的解析结果。",{"type":394,"tag":395,"props":656,"children":658},{"id":657},"解析函数节流",[659],{"type":400,"value":657},{"type":394,"tag":403,"props":661,"children":662},{},[663],{"type":400,"value":664},"函数节流是老生常谈的话题了，当然不能当左侧内容一有变动就立即更新。在一些极端的场合，比如长按删除或是长按空格回车等情况下，连续执行解析函数硬件会造成沉重的负担。所以我们优化思路首先要求尽量在不太影响视觉效果的情况下，尽可能少地执行解析函数。",{"type":394,"tag":403,"props":666,"children":667},{},[668],{"type":400,"value":669},"目标有了，那么对应的解决方案手到擒来：",{"type":394,"tag":501,"props":671,"children":672},{},[673,678],{"type":394,"tag":505,"props":674,"children":675},{},[676],{"type":400,"value":677},"对特定类型按键，我们将不调用解析函数，如多个连续的空格回车或是某些行内符号。因为这些内容的解析结果对之后预览结果没有影响",{"type":394,"tag":505,"props":679,"children":680},{},[681],{"type":400,"value":682},"对解析函数节流，将调用频率控制在 0.3 秒 1 次，具体的数值可根据个人需求调整，比如我常常在回车后习惯性扫一眼预览，那么按回车后可以跳过节流立即执行一次解析",{"type":394,"tag":395,"props":684,"children":686},{"id":685},"缓存解析结果",[687],{"type":400,"value":685},{"type":394,"tag":403,"props":689,"children":690},{},[691,693,699,701,707,709,715,717,722],{"type":400,"value":692},"缓存解析结果方案，类似于算法题中常见的缓存对象。比如我们要实现一个斐波那契数列递归函数，计算",{"type":394,"tag":455,"props":694,"children":696},{"className":695},[],[697],{"type":400,"value":698},"fabi(5)",{"type":400,"value":700},"时需要用到",{"type":394,"tag":455,"props":702,"children":704},{"className":703},[],[705],{"type":400,"value":706},"fabi(3)",{"type":400,"value":708},"和",{"type":394,"tag":455,"props":710,"children":712},{"className":711},[],[713],{"type":400,"value":714},"fabi(4)",{"type":400,"value":716},"的结果，如果我们有缓存，我们可以直接从缓存中获取",{"type":394,"tag":455,"props":718,"children":720},{"className":719},[],[721],{"type":400,"value":706},{"type":400,"value":723},"的结果。将这一概念推导到解析器，我们可以创建一个对象去缓存解析结果。",{"type":394,"tag":725,"props":726,"children":728},"h3",{"id":727},"备忘录实现",[729],{"type":400,"value":727},{"type":394,"tag":403,"props":731,"children":732},{},[733],{"type":400,"value":734},"一开始写解析结果缓存的时候，我犯了一个很严重的错误，那就是想尝试将所有内容以及其解析值缓存到备忘录对象，代码形如：",{"type":394,"tag":526,"props":736,"children":740},{"code":737,"language":738,"meta":388,"className":739,"style":388},"data: {\n  // 缓存对象\n  memo: {}\n}\nwatch： {\n  // 当编辑器的value变动时将尝试直接获取缓存，如果没有缓存才解析内容\n  value (n，o) {\n    if (this.memo[n]) {\n      this.parsedValue = this.memo[n]\n    } else {\n      this.memo[n] = this.parsedValue = parseMDToHTML(n)\n    }\n  }\n}\n","JS","language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai",[741],{"type":394,"tag":455,"props":742,"children":743},{"__ignoreMap":388},[744,752,761,770,779,788,797,806,815,824,833,842,851,860],{"type":394,"tag":536,"props":745,"children":746},{"class":538,"line":539},[747],{"type":394,"tag":536,"props":748,"children":749},{},[750],{"type":400,"value":751},"data: {\n",{"type":394,"tag":536,"props":753,"children":755},{"class":538,"line":754},2,[756],{"type":394,"tag":536,"props":757,"children":758},{},[759],{"type":400,"value":760},"  // 缓存对象\n",{"type":394,"tag":536,"props":762,"children":764},{"class":538,"line":763},3,[765],{"type":394,"tag":536,"props":766,"children":767},{},[768],{"type":400,"value":769},"  memo: {}\n",{"type":394,"tag":536,"props":771,"children":773},{"class":538,"line":772},4,[774],{"type":394,"tag":536,"props":775,"children":776},{},[777],{"type":400,"value":778},"}\n",{"type":394,"tag":536,"props":780,"children":782},{"class":538,"line":781},5,[783],{"type":394,"tag":536,"props":784,"children":785},{},[786],{"type":400,"value":787},"watch： {\n",{"type":394,"tag":536,"props":789,"children":791},{"class":538,"line":790},6,[792],{"type":394,"tag":536,"props":793,"children":794},{},[795],{"type":400,"value":796},"  // 当编辑器的value变动时将尝试直接获取缓存，如果没有缓存才解析内容\n",{"type":394,"tag":536,"props":798,"children":800},{"class":538,"line":799},7,[801],{"type":394,"tag":536,"props":802,"children":803},{},[804],{"type":400,"value":805},"  value (n，o) {\n",{"type":394,"tag":536,"props":807,"children":809},{"class":538,"line":808},8,[810],{"type":394,"tag":536,"props":811,"children":812},{},[813],{"type":400,"value":814},"    if (this.memo[n]) {\n",{"type":394,"tag":536,"props":816,"children":818},{"class":538,"line":817},9,[819],{"type":394,"tag":536,"props":820,"children":821},{},[822],{"type":400,"value":823},"      this.parsedValue = this.memo[n]\n",{"type":394,"tag":536,"props":825,"children":827},{"class":538,"line":826},10,[828],{"type":394,"tag":536,"props":829,"children":830},{},[831],{"type":400,"value":832},"    } else {\n",{"type":394,"tag":536,"props":834,"children":836},{"class":538,"line":835},11,[837],{"type":394,"tag":536,"props":838,"children":839},{},[840],{"type":400,"value":841},"      this.memo[n] = this.parsedValue = parseMDToHTML(n)\n",{"type":394,"tag":536,"props":843,"children":845},{"class":538,"line":844},12,[846],{"type":394,"tag":536,"props":847,"children":848},{},[849],{"type":400,"value":850},"    }\n",{"type":394,"tag":536,"props":852,"children":854},{"class":538,"line":853},13,[855],{"type":394,"tag":536,"props":856,"children":857},{},[858],{"type":400,"value":859},"  }\n",{"type":394,"tag":536,"props":861,"children":863},{"class":538,"line":862},14,[864],{"type":394,"tag":536,"props":865,"children":866},{},[867],{"type":400,"value":778},{"type":394,"tag":403,"props":869,"children":870},{},[871],{"type":400,"value":872},"代码看起来没什么问题，因为问题不在代码。",{"type":394,"tag":403,"props":874,"children":875},{},[876],{"type":400,"value":877},"问题在内存容量上。",{"type":394,"tag":403,"props":879,"children":880},{},[881,883,889],{"type":400,"value":882},"代码运行在浏览器中，一般情况下，内存相对于代码执行速度而言是比较廉价的，所以我经常使用到用对象进行缓存这种",{"type":394,"tag":455,"props":884,"children":886},{"className":885},[],[887],{"type":400,"value":888},"以空间换时间",{"type":400,"value":890},"的代码模式。一般情况下它非常好用，但它可能带来一个问题。这种代码模式进一步限制了前端对内存的感知——我将整个编辑区域的原始值作为对象的键，将其解析结果作为值缓存下来——一旦文章长度开始增长，缓存对象占用的内存容量将急剧增大。",{"type":394,"tag":403,"props":892,"children":893},{},[894],{"type":400,"value":895},"假设我们有某文章字符长度总量为 n，那么备忘录模型将生长成这个样子：",{"type":394,"tag":526,"props":897,"children":899},{"code":898,"language":738,"meta":388,"className":739,"style":388},"value = [1，2，3，...，n-1，n].join('')\nmemo == {\n  '1': '1',\n  '12': '12',\n  '123': '123',\n  // ...\n  '12345...n-1': '12345...n-1',\n  '12345...n': '12345...n',\n}\n",[900],{"type":394,"tag":455,"props":901,"children":902},{"__ignoreMap":388},[903,911,919,927,935,943,951,959,967],{"type":394,"tag":536,"props":904,"children":905},{"class":538,"line":539},[906],{"type":394,"tag":536,"props":907,"children":908},{},[909],{"type":400,"value":910},"value = [1，2，3，...，n-1，n].join('')\n",{"type":394,"tag":536,"props":912,"children":913},{"class":538,"line":754},[914],{"type":394,"tag":536,"props":915,"children":916},{},[917],{"type":400,"value":918},"memo == {\n",{"type":394,"tag":536,"props":920,"children":921},{"class":538,"line":763},[922],{"type":394,"tag":536,"props":923,"children":924},{},[925],{"type":400,"value":926},"  '1': '1',\n",{"type":394,"tag":536,"props":928,"children":929},{"class":538,"line":772},[930],{"type":394,"tag":536,"props":931,"children":932},{},[933],{"type":400,"value":934},"  '12': '12',\n",{"type":394,"tag":536,"props":936,"children":937},{"class":538,"line":781},[938],{"type":394,"tag":536,"props":939,"children":940},{},[941],{"type":400,"value":942},"  '123': '123',\n",{"type":394,"tag":536,"props":944,"children":945},{"class":538,"line":790},[946],{"type":394,"tag":536,"props":947,"children":948},{},[949],{"type":400,"value":950},"  // ...\n",{"type":394,"tag":536,"props":952,"children":953},{"class":538,"line":799},[954],{"type":394,"tag":536,"props":955,"children":956},{},[957],{"type":400,"value":958},"  '12345...n-1': '12345...n-1',\n",{"type":394,"tag":536,"props":960,"children":961},{"class":538,"line":808},[962],{"type":394,"tag":536,"props":963,"children":964},{},[965],{"type":400,"value":966},"  '12345...n': '12345...n',\n",{"type":394,"tag":536,"props":968,"children":969},{"class":538,"line":817},[970],{"type":394,"tag":536,"props":971,"children":972},{},[973],{"type":400,"value":778},{"type":394,"tag":403,"props":975,"children":976},{},[977],{"type":400,"value":978},"那么可以轻易得出，文章字符长度(N)和内存消耗量(O)的关系，形如：",{"type":394,"tag":403,"props":980,"children":981},{},[982],{"type":400,"value":983},"$$O = N(N+1)/2 ≈ N^2$$",{"type":394,"tag":403,"props":985,"children":986},{},[987],{"type":400,"value":988},"和你想的一样，我浏览器内存爆了 😅",{"type":394,"tag":403,"props":990,"children":991},{},[992],{"type":400,"value":993},"不仅如此，文章不断地增长，不仅带来内存压力，解析函数每次要处理地内容也变多，浏览器响应速度也越来越慢。",{"type":394,"tag":403,"props":995,"children":996},{},[997],{"type":400,"value":998},"我们亟需更好的缓存方案。",{"type":394,"tag":725,"props":1000,"children":1002},{"id":1001},"lru-以及-lfu-策略",[1003],{"type":400,"value":1004},"LRU 以及 LFU 策略",{"type":394,"tag":403,"props":1006,"children":1007},{},[1008,1010,1016],{"type":400,"value":1009},"在解析过程简述小节，我们提到解析器在解析时，会将 MD 文本分为块状内容进行解析。由此我们可以尝试缓存块状内容的解析结果，而不是去缓存全文。为了在这次优化不爆内存，我们引入",{"type":394,"tag":455,"props":1011,"children":1013},{"className":1012},[],[1014],{"type":400,"value":1015},"有限空间概念",{"type":400,"value":1017},"——设想编辑器内含一个数组，用来存放 MD 文本中块状内容以及其解析结果，同时数组有最大长度限制，限制为 1000，假设我们的每一个元素占 5kb 的内存，那么这个数组将只占浏览器约 5MB 的内存，无论我们怎么折腾，至少不至于爆内存了~",{"type":394,"tag":403,"props":1019,"children":1020},{},[1021],{"type":400,"value":1022},"不过我们需要先考虑这样一种情况，假使我们的文章有超过 1001 个块状内容，那么多出的这一个块状内容进行解析后得到的结果很显然不能直接存入长度限制为 1000 数组中。所以我们需要一种算法去计算应该舍弃数组中哪一个元素，将该元素舍弃后，再把我们手中结果存入数组。",{"type":394,"tag":403,"props":1024,"children":1025},{},[1026],{"type":400,"value":1027},"用过 Redis 的朋友应该了解，Redis 作为一种使用内存作缓存的缓存系统，它有多种缓存策略：",{"type":394,"tag":501,"props":1029,"children":1030},{},[1031,1036],{"type":394,"tag":505,"props":1032,"children":1033},{},[1034],{"type":400,"value":1035},"基于数据访问时间进行淘汰(LRU : Least Recently Used 淘汰最近时间最少使用到的内容)",{"type":394,"tag":505,"props":1037,"children":1038},{},[1039],{"type":400,"value":1040},"基于访问频率进行淘汰(LFU : Least Frequently Used 淘汰访问频次最低的内容)",{"type":394,"tag":403,"props":1042,"children":1043},{},[1044],{"type":400,"value":1045},"下文将仿照 Redis 的缓存淘汰策略手动造一个使用 LFU 策略进行缓存淘汰的缓存类。",{"type":394,"tag":1047,"props":1048,"children":1050},"h4",{"id":1049},"简单的链表实现",[1051],{"type":400,"value":1049},{"type":394,"tag":403,"props":1053,"children":1054},{},[1055],{"type":400,"value":1056},"实际的代码并未采用数组充当缓存元素，实际选择了双向链表，使用双向列表可以抹除使用出租移除元素添加元素带来的性能成本。",{"type":394,"tag":403,"props":1058,"children":1059},{},[1060,1062,1068],{"type":400,"value":1061},"我们需要提前定义好节点类",{"type":394,"tag":455,"props":1063,"children":1065},{"className":1064},[],[1066],{"type":400,"value":1067},"Node",{"type":400,"value":1069},"：",{"type":394,"tag":526,"props":1071,"children":1073},{"code":1072,"language":738,"meta":388,"className":739,"style":388},"function Node (config) {\n  this.key = config.key\n  this.prev = null\n  this.next = null\n  this.data = config.data || {\n    val: null,\n    weight: 1\n  }\n}\n// 将当前节点的next指向另一节点\nNode.prototype.linkNextTo = function (nextNode) {\n  this.next = nextNode\n  nextNode.prev = this\n}\n// 将当前节点插入某一结点后\nNode.prototype.insertAfterNode = function (prevNode) {\n  const prevNextNode = prevNode.next\n  prevNode.linkNext(this)\n  this.linkNext(prevNextNode)\n}\n// 删除当前节点，除非节点是头节点/尾节点\nNode.prototype.unLink = function () {\n  const prev = this.prev\n  const next = this.next\n\n  if (!prev || !next) {\n    console.log(`Node : ${this.key} cant unlink`)\n    return false\n  }\n  prev.linkNext(next)\n}\n",[1074],{"type":394,"tag":455,"props":1075,"children":1076},{"__ignoreMap":388},[1077,1085,1093,1101,1109,1117,1125,1133,1140,1147,1155,1163,1171,1179,1186,1195,1204,1213,1222,1231,1239,1248,1257,1266,1275,1284,1293,1302,1311,1319,1328],{"type":394,"tag":536,"props":1078,"children":1079},{"class":538,"line":539},[1080],{"type":394,"tag":536,"props":1081,"children":1082},{},[1083],{"type":400,"value":1084},"function Node (config) {\n",{"type":394,"tag":536,"props":1086,"children":1087},{"class":538,"line":754},[1088],{"type":394,"tag":536,"props":1089,"children":1090},{},[1091],{"type":400,"value":1092},"  this.key = config.key\n",{"type":394,"tag":536,"props":1094,"children":1095},{"class":538,"line":763},[1096],{"type":394,"tag":536,"props":1097,"children":1098},{},[1099],{"type":400,"value":1100},"  this.prev = null\n",{"type":394,"tag":536,"props":1102,"children":1103},{"class":538,"line":772},[1104],{"type":394,"tag":536,"props":1105,"children":1106},{},[1107],{"type":400,"value":1108},"  this.next = null\n",{"type":394,"tag":536,"props":1110,"children":1111},{"class":538,"line":781},[1112],{"type":394,"tag":536,"props":1113,"children":1114},{},[1115],{"type":400,"value":1116},"  this.data = config.data || {\n",{"type":394,"tag":536,"props":1118,"children":1119},{"class":538,"line":790},[1120],{"type":394,"tag":536,"props":1121,"children":1122},{},[1123],{"type":400,"value":1124},"    val: null,\n",{"type":394,"tag":536,"props":1126,"children":1127},{"class":538,"line":799},[1128],{"type":394,"tag":536,"props":1129,"children":1130},{},[1131],{"type":400,"value":1132},"    weight: 1\n",{"type":394,"tag":536,"props":1134,"children":1135},{"class":538,"line":808},[1136],{"type":394,"tag":536,"props":1137,"children":1138},{},[1139],{"type":400,"value":859},{"type":394,"tag":536,"props":1141,"children":1142},{"class":538,"line":817},[1143],{"type":394,"tag":536,"props":1144,"children":1145},{},[1146],{"type":400,"value":778},{"type":394,"tag":536,"props":1148,"children":1149},{"class":538,"line":826},[1150],{"type":394,"tag":536,"props":1151,"children":1152},{},[1153],{"type":400,"value":1154},"// 将当前节点的next指向另一节点\n",{"type":394,"tag":536,"props":1156,"children":1157},{"class":538,"line":835},[1158],{"type":394,"tag":536,"props":1159,"children":1160},{},[1161],{"type":400,"value":1162},"Node.prototype.linkNextTo = function (nextNode) {\n",{"type":394,"tag":536,"props":1164,"children":1165},{"class":538,"line":844},[1166],{"type":394,"tag":536,"props":1167,"children":1168},{},[1169],{"type":400,"value":1170},"  this.next = nextNode\n",{"type":394,"tag":536,"props":1172,"children":1173},{"class":538,"line":853},[1174],{"type":394,"tag":536,"props":1175,"children":1176},{},[1177],{"type":400,"value":1178},"  nextNode.prev = this\n",{"type":394,"tag":536,"props":1180,"children":1181},{"class":538,"line":862},[1182],{"type":394,"tag":536,"props":1183,"children":1184},{},[1185],{"type":400,"value":778},{"type":394,"tag":536,"props":1187,"children":1189},{"class":538,"line":1188},15,[1190],{"type":394,"tag":536,"props":1191,"children":1192},{},[1193],{"type":400,"value":1194},"// 将当前节点插入某一结点后\n",{"type":394,"tag":536,"props":1196,"children":1198},{"class":538,"line":1197},16,[1199],{"type":394,"tag":536,"props":1200,"children":1201},{},[1202],{"type":400,"value":1203},"Node.prototype.insertAfterNode = function (prevNode) {\n",{"type":394,"tag":536,"props":1205,"children":1207},{"class":538,"line":1206},17,[1208],{"type":394,"tag":536,"props":1209,"children":1210},{},[1211],{"type":400,"value":1212},"  const prevNextNode = prevNode.next\n",{"type":394,"tag":536,"props":1214,"children":1216},{"class":538,"line":1215},18,[1217],{"type":394,"tag":536,"props":1218,"children":1219},{},[1220],{"type":400,"value":1221},"  prevNode.linkNext(this)\n",{"type":394,"tag":536,"props":1223,"children":1225},{"class":538,"line":1224},19,[1226],{"type":394,"tag":536,"props":1227,"children":1228},{},[1229],{"type":400,"value":1230},"  this.linkNext(prevNextNode)\n",{"type":394,"tag":536,"props":1232,"children":1234},{"class":538,"line":1233},20,[1235],{"type":394,"tag":536,"props":1236,"children":1237},{},[1238],{"type":400,"value":778},{"type":394,"tag":536,"props":1240,"children":1242},{"class":538,"line":1241},21,[1243],{"type":394,"tag":536,"props":1244,"children":1245},{},[1246],{"type":400,"value":1247},"// 删除当前节点，除非节点是头节点/尾节点\n",{"type":394,"tag":536,"props":1249,"children":1251},{"class":538,"line":1250},22,[1252],{"type":394,"tag":536,"props":1253,"children":1254},{},[1255],{"type":400,"value":1256},"Node.prototype.unLink = function () {\n",{"type":394,"tag":536,"props":1258,"children":1260},{"class":538,"line":1259},23,[1261],{"type":394,"tag":536,"props":1262,"children":1263},{},[1264],{"type":400,"value":1265},"  const prev = this.prev\n",{"type":394,"tag":536,"props":1267,"children":1269},{"class":538,"line":1268},24,[1270],{"type":394,"tag":536,"props":1271,"children":1272},{},[1273],{"type":400,"value":1274},"  const next = this.next\n",{"type":394,"tag":536,"props":1276,"children":1278},{"class":538,"line":1277},25,[1279],{"type":394,"tag":536,"props":1280,"children":1281},{"emptyLinePlaceholder":387},[1282],{"type":400,"value":1283},"\n",{"type":394,"tag":536,"props":1285,"children":1287},{"class":538,"line":1286},26,[1288],{"type":394,"tag":536,"props":1289,"children":1290},{},[1291],{"type":400,"value":1292},"  if (!prev || !next) {\n",{"type":394,"tag":536,"props":1294,"children":1296},{"class":538,"line":1295},27,[1297],{"type":394,"tag":536,"props":1298,"children":1299},{},[1300],{"type":400,"value":1301},"    console.log(`Node : ${this.key} cant unlink`)\n",{"type":394,"tag":536,"props":1303,"children":1305},{"class":538,"line":1304},28,[1306],{"type":394,"tag":536,"props":1307,"children":1308},{},[1309],{"type":400,"value":1310},"    return false\n",{"type":394,"tag":536,"props":1312,"children":1314},{"class":538,"line":1313},29,[1315],{"type":394,"tag":536,"props":1316,"children":1317},{},[1318],{"type":400,"value":859},{"type":394,"tag":536,"props":1320,"children":1322},{"class":538,"line":1321},30,[1323],{"type":394,"tag":536,"props":1324,"children":1325},{},[1326],{"type":400,"value":1327},"  prev.linkNext(next)\n",{"type":394,"tag":536,"props":1329,"children":1331},{"class":538,"line":1330},31,[1332],{"type":394,"tag":536,"props":1333,"children":1334},{},[1335],{"type":400,"value":778},{"type":394,"tag":1047,"props":1337,"children":1339},{"id":1338},"缓存类",[1340],{"type":400,"value":1338},{"type":394,"tag":403,"props":1342,"children":1343},{},[1344],{"type":400,"value":1345},"缓存类将内含一个双向链表，同时还包含最大链表节点数，当前链表长度这些属性：",{"type":394,"tag":526,"props":1347,"children":1349},{"code":1348},"数组可以直接通过下标去获取某个特定的元素，而链表不行，在缓存类中我使用一个备忘录对象去记录每一个节点的访问地址，充当数组下标的作用，详见下代码中`nodeMemo`的使用\n",[1350],{"type":394,"tag":455,"props":1351,"children":1352},{"__ignoreMap":388},[1353],{"type":400,"value":1348},{"type":394,"tag":526,"props":1355,"children":1357},{"code":1356,"language":738,"meta":388,"className":739,"style":388},"function LFU (limit) {\n  this.headNode = new Node({ key: '__head__'，data: { val: null，weight: Number.MAX_VALUE } })\n  this.tailNode = new Node({ key: '__tail__'，data: { val: null，weight: Number.MIN_VALUE } })\n  this.headNode.linkNext(this.tailNode)\n  this.nodeMemo = {}\n  this.nodeLength = 0\n  this.nodeLengthLimit = limit || 999\n}\n// 通过key判断缓存中是否有某元素\nLFU.prototype.has = function (key) {\n  return !!this.nodeMemo[key]\n}\n// 通过key获取缓存中某一元素值\nLFU.prototype.get = function (key) {\n  let handle = this.nodeMemo[key]\n  if (handle) {\n    this.addNodeWeight(handle)\n    return handle.data.val\n  } else {\n    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n  }\n}\n// 通过key获取缓存中某一元素权重\nLFU.prototype.getNodeWeight = function (key) {\n  let handle = this.nodeMemo[key]\n  if (handle) {\n    return handle.data.weight\n  } else {\n    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n  }\n}\n// 添加新的缓存元素\nLFU.prototype.set = function (key，val) {\n  const handleNode = this.nodeMemo[key]\n  if (handleNode) {\n    this.addNodeWeight(handleNode，10)\n    handleNode.data.val = val\n  } else {\n    if (this.nodeLength \u003C this.nodeLengthLimit) {\n      this.nodeLength++\n    } else {\n      const deleteNode = this.tailNode.prev\n      deleteNode.unLink()\n      delete this.nodeMemo[deleteNode.key]\n    }\n    const newNode = new Node({ key，data: { val，weight: 1 } })\n    this.nodeMemo[key] = newNode\n    newNode.insertAfter(this.tailNode.prev)\n  }\n}\n// 打印缓存中全部节点\nLFU.prototype.showAllNodes = function () {\n  let next = this.headNode.next\n  while (next && next.next) {\n    console.log(`Node : ${next.key} has data ${next.data.val} and weight ${next.data.weight}`)\n    next = next.next\n  }\n}\n// 对某一元素进行加权操作\nLFU.prototype.addNodeWeight = function (node，w = 1) {\n  const handle = node\n  let prev = handle.prev\n\n  handle.unLink()\n  handle.data.weight += w\n  while (prev) {\n    if (prev.data.weight \u003C= handle.data.weight) {\n      prev = prev.prev\n    } else {\n      handle.insertAfter(prev)\n      prev = null\n    }\n  }\n}\n",[1358],{"type":394,"tag":455,"props":1359,"children":1360},{"__ignoreMap":388},[1361,1369,1377,1385,1393,1401,1409,1417,1424,1432,1440,1448,1455,1463,1471,1479,1487,1495,1503,1511,1519,1526,1533,1541,1549,1556,1563,1571,1578,1585,1592,1599,1608,1617,1626,1635,1644,1653,1661,1670,1679,1687,1696,1705,1714,1722,1731,1740,1749,1757,1765,1774,1783,1792,1801,1810,1819,1827,1835,1844,1853,1862,1871,1879,1888,1897,1906,1915,1924,1932,1941,1950,1958,1966],{"type":394,"tag":536,"props":1362,"children":1363},{"class":538,"line":539},[1364],{"type":394,"tag":536,"props":1365,"children":1366},{},[1367],{"type":400,"value":1368},"function LFU (limit) {\n",{"type":394,"tag":536,"props":1370,"children":1371},{"class":538,"line":754},[1372],{"type":394,"tag":536,"props":1373,"children":1374},{},[1375],{"type":400,"value":1376},"  this.headNode = new Node({ key: '__head__'，data: { val: null，weight: Number.MAX_VALUE } })\n",{"type":394,"tag":536,"props":1378,"children":1379},{"class":538,"line":763},[1380],{"type":394,"tag":536,"props":1381,"children":1382},{},[1383],{"type":400,"value":1384},"  this.tailNode = new Node({ key: '__tail__'，data: { val: null，weight: Number.MIN_VALUE } })\n",{"type":394,"tag":536,"props":1386,"children":1387},{"class":538,"line":772},[1388],{"type":394,"tag":536,"props":1389,"children":1390},{},[1391],{"type":400,"value":1392},"  this.headNode.linkNext(this.tailNode)\n",{"type":394,"tag":536,"props":1394,"children":1395},{"class":538,"line":781},[1396],{"type":394,"tag":536,"props":1397,"children":1398},{},[1399],{"type":400,"value":1400},"  this.nodeMemo = {}\n",{"type":394,"tag":536,"props":1402,"children":1403},{"class":538,"line":790},[1404],{"type":394,"tag":536,"props":1405,"children":1406},{},[1407],{"type":400,"value":1408},"  this.nodeLength = 0\n",{"type":394,"tag":536,"props":1410,"children":1411},{"class":538,"line":799},[1412],{"type":394,"tag":536,"props":1413,"children":1414},{},[1415],{"type":400,"value":1416},"  this.nodeLengthLimit = limit || 999\n",{"type":394,"tag":536,"props":1418,"children":1419},{"class":538,"line":808},[1420],{"type":394,"tag":536,"props":1421,"children":1422},{},[1423],{"type":400,"value":778},{"type":394,"tag":536,"props":1425,"children":1426},{"class":538,"line":817},[1427],{"type":394,"tag":536,"props":1428,"children":1429},{},[1430],{"type":400,"value":1431},"// 通过key判断缓存中是否有某元素\n",{"type":394,"tag":536,"props":1433,"children":1434},{"class":538,"line":826},[1435],{"type":394,"tag":536,"props":1436,"children":1437},{},[1438],{"type":400,"value":1439},"LFU.prototype.has = function (key) {\n",{"type":394,"tag":536,"props":1441,"children":1442},{"class":538,"line":835},[1443],{"type":394,"tag":536,"props":1444,"children":1445},{},[1446],{"type":400,"value":1447},"  return !!this.nodeMemo[key]\n",{"type":394,"tag":536,"props":1449,"children":1450},{"class":538,"line":844},[1451],{"type":394,"tag":536,"props":1452,"children":1453},{},[1454],{"type":400,"value":778},{"type":394,"tag":536,"props":1456,"children":1457},{"class":538,"line":853},[1458],{"type":394,"tag":536,"props":1459,"children":1460},{},[1461],{"type":400,"value":1462},"// 通过key获取缓存中某一元素值\n",{"type":394,"tag":536,"props":1464,"children":1465},{"class":538,"line":862},[1466],{"type":394,"tag":536,"props":1467,"children":1468},{},[1469],{"type":400,"value":1470},"LFU.prototype.get = function (key) {\n",{"type":394,"tag":536,"props":1472,"children":1473},{"class":538,"line":1188},[1474],{"type":394,"tag":536,"props":1475,"children":1476},{},[1477],{"type":400,"value":1478},"  let handle = this.nodeMemo[key]\n",{"type":394,"tag":536,"props":1480,"children":1481},{"class":538,"line":1197},[1482],{"type":394,"tag":536,"props":1483,"children":1484},{},[1485],{"type":400,"value":1486},"  if (handle) {\n",{"type":394,"tag":536,"props":1488,"children":1489},{"class":538,"line":1206},[1490],{"type":394,"tag":536,"props":1491,"children":1492},{},[1493],{"type":400,"value":1494},"    this.addNodeWeight(handle)\n",{"type":394,"tag":536,"props":1496,"children":1497},{"class":538,"line":1215},[1498],{"type":394,"tag":536,"props":1499,"children":1500},{},[1501],{"type":400,"value":1502},"    return handle.data.val\n",{"type":394,"tag":536,"props":1504,"children":1505},{"class":538,"line":1224},[1506],{"type":394,"tag":536,"props":1507,"children":1508},{},[1509],{"type":400,"value":1510},"  } else {\n",{"type":394,"tag":536,"props":1512,"children":1513},{"class":538,"line":1233},[1514],{"type":394,"tag":536,"props":1515,"children":1516},{},[1517],{"type":400,"value":1518},"    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n",{"type":394,"tag":536,"props":1520,"children":1521},{"class":538,"line":1241},[1522],{"type":394,"tag":536,"props":1523,"children":1524},{},[1525],{"type":400,"value":859},{"type":394,"tag":536,"props":1527,"children":1528},{"class":538,"line":1250},[1529],{"type":394,"tag":536,"props":1530,"children":1531},{},[1532],{"type":400,"value":778},{"type":394,"tag":536,"props":1534,"children":1535},{"class":538,"line":1259},[1536],{"type":394,"tag":536,"props":1537,"children":1538},{},[1539],{"type":400,"value":1540},"// 通过key获取缓存中某一元素权重\n",{"type":394,"tag":536,"props":1542,"children":1543},{"class":538,"line":1268},[1544],{"type":394,"tag":536,"props":1545,"children":1546},{},[1547],{"type":400,"value":1548},"LFU.prototype.getNodeWeight = function (key) {\n",{"type":394,"tag":536,"props":1550,"children":1551},{"class":538,"line":1277},[1552],{"type":394,"tag":536,"props":1553,"children":1554},{},[1555],{"type":400,"value":1478},{"type":394,"tag":536,"props":1557,"children":1558},{"class":538,"line":1286},[1559],{"type":394,"tag":536,"props":1560,"children":1561},{},[1562],{"type":400,"value":1486},{"type":394,"tag":536,"props":1564,"children":1565},{"class":538,"line":1295},[1566],{"type":394,"tag":536,"props":1567,"children":1568},{},[1569],{"type":400,"value":1570},"    return handle.data.weight\n",{"type":394,"tag":536,"props":1572,"children":1573},{"class":538,"line":1304},[1574],{"type":394,"tag":536,"props":1575,"children":1576},{},[1577],{"type":400,"value":1510},{"type":394,"tag":536,"props":1579,"children":1580},{"class":538,"line":1313},[1581],{"type":394,"tag":536,"props":1582,"children":1583},{},[1584],{"type":400,"value":1518},{"type":394,"tag":536,"props":1586,"children":1587},{"class":538,"line":1321},[1588],{"type":394,"tag":536,"props":1589,"children":1590},{},[1591],{"type":400,"value":859},{"type":394,"tag":536,"props":1593,"children":1594},{"class":538,"line":1330},[1595],{"type":394,"tag":536,"props":1596,"children":1597},{},[1598],{"type":400,"value":778},{"type":394,"tag":536,"props":1600,"children":1602},{"class":538,"line":1601},32,[1603],{"type":394,"tag":536,"props":1604,"children":1605},{},[1606],{"type":400,"value":1607},"// 添加新的缓存元素\n",{"type":394,"tag":536,"props":1609,"children":1611},{"class":538,"line":1610},33,[1612],{"type":394,"tag":536,"props":1613,"children":1614},{},[1615],{"type":400,"value":1616},"LFU.prototype.set = function (key，val) {\n",{"type":394,"tag":536,"props":1618,"children":1620},{"class":538,"line":1619},34,[1621],{"type":394,"tag":536,"props":1622,"children":1623},{},[1624],{"type":400,"value":1625},"  const handleNode = this.nodeMemo[key]\n",{"type":394,"tag":536,"props":1627,"children":1629},{"class":538,"line":1628},35,[1630],{"type":394,"tag":536,"props":1631,"children":1632},{},[1633],{"type":400,"value":1634},"  if (handleNode) {\n",{"type":394,"tag":536,"props":1636,"children":1638},{"class":538,"line":1637},36,[1639],{"type":394,"tag":536,"props":1640,"children":1641},{},[1642],{"type":400,"value":1643},"    this.addNodeWeight(handleNode，10)\n",{"type":394,"tag":536,"props":1645,"children":1647},{"class":538,"line":1646},37,[1648],{"type":394,"tag":536,"props":1649,"children":1650},{},[1651],{"type":400,"value":1652},"    handleNode.data.val = val\n",{"type":394,"tag":536,"props":1654,"children":1656},{"class":538,"line":1655},38,[1657],{"type":394,"tag":536,"props":1658,"children":1659},{},[1660],{"type":400,"value":1510},{"type":394,"tag":536,"props":1662,"children":1664},{"class":538,"line":1663},39,[1665],{"type":394,"tag":536,"props":1666,"children":1667},{},[1668],{"type":400,"value":1669},"    if (this.nodeLength \u003C this.nodeLengthLimit) {\n",{"type":394,"tag":536,"props":1671,"children":1673},{"class":538,"line":1672},40,[1674],{"type":394,"tag":536,"props":1675,"children":1676},{},[1677],{"type":400,"value":1678},"      this.nodeLength++\n",{"type":394,"tag":536,"props":1680,"children":1682},{"class":538,"line":1681},41,[1683],{"type":394,"tag":536,"props":1684,"children":1685},{},[1686],{"type":400,"value":832},{"type":394,"tag":536,"props":1688,"children":1690},{"class":538,"line":1689},42,[1691],{"type":394,"tag":536,"props":1692,"children":1693},{},[1694],{"type":400,"value":1695},"      const deleteNode = this.tailNode.prev\n",{"type":394,"tag":536,"props":1697,"children":1699},{"class":538,"line":1698},43,[1700],{"type":394,"tag":536,"props":1701,"children":1702},{},[1703],{"type":400,"value":1704},"      deleteNode.unLink()\n",{"type":394,"tag":536,"props":1706,"children":1708},{"class":538,"line":1707},44,[1709],{"type":394,"tag":536,"props":1710,"children":1711},{},[1712],{"type":400,"value":1713},"      delete this.nodeMemo[deleteNode.key]\n",{"type":394,"tag":536,"props":1715,"children":1717},{"class":538,"line":1716},45,[1718],{"type":394,"tag":536,"props":1719,"children":1720},{},[1721],{"type":400,"value":850},{"type":394,"tag":536,"props":1723,"children":1725},{"class":538,"line":1724},46,[1726],{"type":394,"tag":536,"props":1727,"children":1728},{},[1729],{"type":400,"value":1730},"    const newNode = new Node({ key，data: { val，weight: 1 } })\n",{"type":394,"tag":536,"props":1732,"children":1734},{"class":538,"line":1733},47,[1735],{"type":394,"tag":536,"props":1736,"children":1737},{},[1738],{"type":400,"value":1739},"    this.nodeMemo[key] = newNode\n",{"type":394,"tag":536,"props":1741,"children":1743},{"class":538,"line":1742},48,[1744],{"type":394,"tag":536,"props":1745,"children":1746},{},[1747],{"type":400,"value":1748},"    newNode.insertAfter(this.tailNode.prev)\n",{"type":394,"tag":536,"props":1750,"children":1752},{"class":538,"line":1751},49,[1753],{"type":394,"tag":536,"props":1754,"children":1755},{},[1756],{"type":400,"value":859},{"type":394,"tag":536,"props":1758,"children":1760},{"class":538,"line":1759},50,[1761],{"type":394,"tag":536,"props":1762,"children":1763},{},[1764],{"type":400,"value":778},{"type":394,"tag":536,"props":1766,"children":1768},{"class":538,"line":1767},51,[1769],{"type":394,"tag":536,"props":1770,"children":1771},{},[1772],{"type":400,"value":1773},"// 打印缓存中全部节点\n",{"type":394,"tag":536,"props":1775,"children":1777},{"class":538,"line":1776},52,[1778],{"type":394,"tag":536,"props":1779,"children":1780},{},[1781],{"type":400,"value":1782},"LFU.prototype.showAllNodes = function () {\n",{"type":394,"tag":536,"props":1784,"children":1786},{"class":538,"line":1785},53,[1787],{"type":394,"tag":536,"props":1788,"children":1789},{},[1790],{"type":400,"value":1791},"  let next = this.headNode.next\n",{"type":394,"tag":536,"props":1793,"children":1795},{"class":538,"line":1794},54,[1796],{"type":394,"tag":536,"props":1797,"children":1798},{},[1799],{"type":400,"value":1800},"  while (next && next.next) {\n",{"type":394,"tag":536,"props":1802,"children":1804},{"class":538,"line":1803},55,[1805],{"type":394,"tag":536,"props":1806,"children":1807},{},[1808],{"type":400,"value":1809},"    console.log(`Node : ${next.key} has data ${next.data.val} and weight ${next.data.weight}`)\n",{"type":394,"tag":536,"props":1811,"children":1813},{"class":538,"line":1812},56,[1814],{"type":394,"tag":536,"props":1815,"children":1816},{},[1817],{"type":400,"value":1818},"    next = next.next\n",{"type":394,"tag":536,"props":1820,"children":1822},{"class":538,"line":1821},57,[1823],{"type":394,"tag":536,"props":1824,"children":1825},{},[1826],{"type":400,"value":859},{"type":394,"tag":536,"props":1828,"children":1830},{"class":538,"line":1829},58,[1831],{"type":394,"tag":536,"props":1832,"children":1833},{},[1834],{"type":400,"value":778},{"type":394,"tag":536,"props":1836,"children":1838},{"class":538,"line":1837},59,[1839],{"type":394,"tag":536,"props":1840,"children":1841},{},[1842],{"type":400,"value":1843},"// 对某一元素进行加权操作\n",{"type":394,"tag":536,"props":1845,"children":1847},{"class":538,"line":1846},60,[1848],{"type":394,"tag":536,"props":1849,"children":1850},{},[1851],{"type":400,"value":1852},"LFU.prototype.addNodeWeight = function (node，w = 1) {\n",{"type":394,"tag":536,"props":1854,"children":1856},{"class":538,"line":1855},61,[1857],{"type":394,"tag":536,"props":1858,"children":1859},{},[1860],{"type":400,"value":1861},"  const handle = node\n",{"type":394,"tag":536,"props":1863,"children":1865},{"class":538,"line":1864},62,[1866],{"type":394,"tag":536,"props":1867,"children":1868},{},[1869],{"type":400,"value":1870},"  let prev = handle.prev\n",{"type":394,"tag":536,"props":1872,"children":1874},{"class":538,"line":1873},63,[1875],{"type":394,"tag":536,"props":1876,"children":1877},{"emptyLinePlaceholder":387},[1878],{"type":400,"value":1283},{"type":394,"tag":536,"props":1880,"children":1882},{"class":538,"line":1881},64,[1883],{"type":394,"tag":536,"props":1884,"children":1885},{},[1886],{"type":400,"value":1887},"  handle.unLink()\n",{"type":394,"tag":536,"props":1889,"children":1891},{"class":538,"line":1890},65,[1892],{"type":394,"tag":536,"props":1893,"children":1894},{},[1895],{"type":400,"value":1896},"  handle.data.weight += w\n",{"type":394,"tag":536,"props":1898,"children":1900},{"class":538,"line":1899},66,[1901],{"type":394,"tag":536,"props":1902,"children":1903},{},[1904],{"type":400,"value":1905},"  while (prev) {\n",{"type":394,"tag":536,"props":1907,"children":1909},{"class":538,"line":1908},67,[1910],{"type":394,"tag":536,"props":1911,"children":1912},{},[1913],{"type":400,"value":1914},"    if (prev.data.weight \u003C= handle.data.weight) {\n",{"type":394,"tag":536,"props":1916,"children":1918},{"class":538,"line":1917},68,[1919],{"type":394,"tag":536,"props":1920,"children":1921},{},[1922],{"type":400,"value":1923},"      prev = prev.prev\n",{"type":394,"tag":536,"props":1925,"children":1927},{"class":538,"line":1926},69,[1928],{"type":394,"tag":536,"props":1929,"children":1930},{},[1931],{"type":400,"value":832},{"type":394,"tag":536,"props":1933,"children":1935},{"class":538,"line":1934},70,[1936],{"type":394,"tag":536,"props":1937,"children":1938},{},[1939],{"type":400,"value":1940},"      handle.insertAfter(prev)\n",{"type":394,"tag":536,"props":1942,"children":1944},{"class":538,"line":1943},71,[1945],{"type":394,"tag":536,"props":1946,"children":1947},{},[1948],{"type":400,"value":1949},"      prev = null\n",{"type":394,"tag":536,"props":1951,"children":1953},{"class":538,"line":1952},72,[1954],{"type":394,"tag":536,"props":1955,"children":1956},{},[1957],{"type":400,"value":850},{"type":394,"tag":536,"props":1959,"children":1961},{"class":538,"line":1960},73,[1962],{"type":394,"tag":536,"props":1963,"children":1964},{},[1965],{"type":400,"value":859},{"type":394,"tag":536,"props":1967,"children":1969},{"class":538,"line":1968},74,[1970],{"type":394,"tag":536,"props":1971,"children":1972},{},[1973],{"type":400,"value":778},{"type":394,"tag":1047,"props":1975,"children":1977},{"id":1976},"另附测试用例",[1978],{"type":400,"value":1976},{"type":394,"tag":526,"props":1980,"children":1982},{"code":1981,"language":738,"meta":388,"className":739,"style":388},"import LFU from '@/utils/suites/teditor/LFU'\n\ndescribe('LFU测试'，() => {\n  const LFU = new LFU(4)\n  it('能够正确维护链表长度'，() => {\n    LFU.set('1'，1)\n    LFU.set('2'，2)\n    LFU.set('3'，3)\n    LFU.set('4'，4)\n    LFU.set('5'，5)\n    expect(LFU.has('4')).to.equal(false)\n  })\n  it('节点的数据应该正确'，() => {\n    expect(LFU.get('1')).to.equal(1)\n    expect(LFU.get('2')).to.equal(2)\n    expect(LFU.get('3')).to.equal(3)\n    expect(LFU.get('5')).to.equal(5)\n    LFU.get('5')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.set('5'，6)\n    expect(LFU.get('5')).to.equal(6)\n  })\n  it('节点的权重应该正确'，() => {\n    expect(LFU.getNodeWeight('5')).to.equal(14)\n    expect(LFU.getNodeWeight('3')).to.equal(6)\n  })\n})\n\n",[1983],{"type":394,"tag":455,"props":1984,"children":1985},{"__ignoreMap":388},[1986,1994,2001,2009,2017,2025,2033,2041,2049,2057,2065,2073,2081,2089,2097,2105,2113,2121,2129,2137,2144,2151,2158,2166,2174,2181,2189,2197,2205,2212],{"type":394,"tag":536,"props":1987,"children":1988},{"class":538,"line":539},[1989],{"type":394,"tag":536,"props":1990,"children":1991},{},[1992],{"type":400,"value":1993},"import LFU from '@/utils/suites/teditor/LFU'\n",{"type":394,"tag":536,"props":1995,"children":1996},{"class":538,"line":754},[1997],{"type":394,"tag":536,"props":1998,"children":1999},{"emptyLinePlaceholder":387},[2000],{"type":400,"value":1283},{"type":394,"tag":536,"props":2002,"children":2003},{"class":538,"line":763},[2004],{"type":394,"tag":536,"props":2005,"children":2006},{},[2007],{"type":400,"value":2008},"describe('LFU测试'，() => {\n",{"type":394,"tag":536,"props":2010,"children":2011},{"class":538,"line":772},[2012],{"type":394,"tag":536,"props":2013,"children":2014},{},[2015],{"type":400,"value":2016},"  const LFU = new LFU(4)\n",{"type":394,"tag":536,"props":2018,"children":2019},{"class":538,"line":781},[2020],{"type":394,"tag":536,"props":2021,"children":2022},{},[2023],{"type":400,"value":2024},"  it('能够正确维护链表长度'，() => {\n",{"type":394,"tag":536,"props":2026,"children":2027},{"class":538,"line":790},[2028],{"type":394,"tag":536,"props":2029,"children":2030},{},[2031],{"type":400,"value":2032},"    LFU.set('1'，1)\n",{"type":394,"tag":536,"props":2034,"children":2035},{"class":538,"line":799},[2036],{"type":394,"tag":536,"props":2037,"children":2038},{},[2039],{"type":400,"value":2040},"    LFU.set('2'，2)\n",{"type":394,"tag":536,"props":2042,"children":2043},{"class":538,"line":808},[2044],{"type":394,"tag":536,"props":2045,"children":2046},{},[2047],{"type":400,"value":2048},"    LFU.set('3'，3)\n",{"type":394,"tag":536,"props":2050,"children":2051},{"class":538,"line":817},[2052],{"type":394,"tag":536,"props":2053,"children":2054},{},[2055],{"type":400,"value":2056},"    LFU.set('4'，4)\n",{"type":394,"tag":536,"props":2058,"children":2059},{"class":538,"line":826},[2060],{"type":394,"tag":536,"props":2061,"children":2062},{},[2063],{"type":400,"value":2064},"    LFU.set('5'，5)\n",{"type":394,"tag":536,"props":2066,"children":2067},{"class":538,"line":835},[2068],{"type":394,"tag":536,"props":2069,"children":2070},{},[2071],{"type":400,"value":2072},"    expect(LFU.has('4')).to.equal(false)\n",{"type":394,"tag":536,"props":2074,"children":2075},{"class":538,"line":844},[2076],{"type":394,"tag":536,"props":2077,"children":2078},{},[2079],{"type":400,"value":2080},"  })\n",{"type":394,"tag":536,"props":2082,"children":2083},{"class":538,"line":853},[2084],{"type":394,"tag":536,"props":2085,"children":2086},{},[2087],{"type":400,"value":2088},"  it('节点的数据应该正确'，() => {\n",{"type":394,"tag":536,"props":2090,"children":2091},{"class":538,"line":862},[2092],{"type":394,"tag":536,"props":2093,"children":2094},{},[2095],{"type":400,"value":2096},"    expect(LFU.get('1')).to.equal(1)\n",{"type":394,"tag":536,"props":2098,"children":2099},{"class":538,"line":1188},[2100],{"type":394,"tag":536,"props":2101,"children":2102},{},[2103],{"type":400,"value":2104},"    expect(LFU.get('2')).to.equal(2)\n",{"type":394,"tag":536,"props":2106,"children":2107},{"class":538,"line":1197},[2108],{"type":394,"tag":536,"props":2109,"children":2110},{},[2111],{"type":400,"value":2112},"    expect(LFU.get('3')).to.equal(3)\n",{"type":394,"tag":536,"props":2114,"children":2115},{"class":538,"line":1206},[2116],{"type":394,"tag":536,"props":2117,"children":2118},{},[2119],{"type":400,"value":2120},"    expect(LFU.get('5')).to.equal(5)\n",{"type":394,"tag":536,"props":2122,"children":2123},{"class":538,"line":1215},[2124],{"type":394,"tag":536,"props":2125,"children":2126},{},[2127],{"type":400,"value":2128},"    LFU.get('5')\n",{"type":394,"tag":536,"props":2130,"children":2131},{"class":538,"line":1224},[2132],{"type":394,"tag":536,"props":2133,"children":2134},{},[2135],{"type":400,"value":2136},"    LFU.get('3')\n",{"type":394,"tag":536,"props":2138,"children":2139},{"class":538,"line":1233},[2140],{"type":394,"tag":536,"props":2141,"children":2142},{},[2143],{"type":400,"value":2136},{"type":394,"tag":536,"props":2145,"children":2146},{"class":538,"line":1241},[2147],{"type":394,"tag":536,"props":2148,"children":2149},{},[2150],{"type":400,"value":2136},{"type":394,"tag":536,"props":2152,"children":2153},{"class":538,"line":1250},[2154],{"type":394,"tag":536,"props":2155,"children":2156},{},[2157],{"type":400,"value":2136},{"type":394,"tag":536,"props":2159,"children":2160},{"class":538,"line":1259},[2161],{"type":394,"tag":536,"props":2162,"children":2163},{},[2164],{"type":400,"value":2165},"    LFU.set('5'，6)\n",{"type":394,"tag":536,"props":2167,"children":2168},{"class":538,"line":1268},[2169],{"type":394,"tag":536,"props":2170,"children":2171},{},[2172],{"type":400,"value":2173},"    expect(LFU.get('5')).to.equal(6)\n",{"type":394,"tag":536,"props":2175,"children":2176},{"class":538,"line":1277},[2177],{"type":394,"tag":536,"props":2178,"children":2179},{},[2180],{"type":400,"value":2080},{"type":394,"tag":536,"props":2182,"children":2183},{"class":538,"line":1286},[2184],{"type":394,"tag":536,"props":2185,"children":2186},{},[2187],{"type":400,"value":2188},"  it('节点的权重应该正确'，() => {\n",{"type":394,"tag":536,"props":2190,"children":2191},{"class":538,"line":1295},[2192],{"type":394,"tag":536,"props":2193,"children":2194},{},[2195],{"type":400,"value":2196},"    expect(LFU.getNodeWeight('5')).to.equal(14)\n",{"type":394,"tag":536,"props":2198,"children":2199},{"class":538,"line":1304},[2200],{"type":394,"tag":536,"props":2201,"children":2202},{},[2203],{"type":400,"value":2204},"    expect(LFU.getNodeWeight('3')).to.equal(6)\n",{"type":394,"tag":536,"props":2206,"children":2207},{"class":538,"line":1313},[2208],{"type":394,"tag":536,"props":2209,"children":2210},{},[2211],{"type":400,"value":2080},{"type":394,"tag":536,"props":2213,"children":2214},{"class":538,"line":1321},[2215],{"type":394,"tag":536,"props":2216,"children":2217},{},[2218],{"type":400,"value":2219},"})\n",{"type":394,"tag":395,"props":2221,"children":2223},{"id":2222},"拆分渲染内容",[2224],{"type":400,"value":2222},{"type":394,"tag":403,"props":2226,"children":2227},{},[2228],{"type":400,"value":2229},"拆分渲染内容和通过节流解析函数想要达到的目的类似——通过限制浏览器的重绘回流次数以减轻硬件负担。",{"type":394,"tag":403,"props":2231,"children":2232},{},[2233],{"type":400,"value":2234},"我的解析函数会将传入的 MD 文本解析为 HTML 片段，然后通过 v-html 将片段放到浏览器右侧窗口进行渲染，虽然我们在解析函数中做了缓存，使得解析速度增加，但是每一次的解析都会使浏览器重新绘制整一个右侧窗口，这里有一个优化点。",{"type":394,"tag":403,"props":2236,"children":2237},{},[2238],{"type":400,"value":2239},"拆分渲染内容就是要解决这样一个问题。我们把右侧窗口一整块 v-html 区域以 MD 块状元素拆分为多个小的 v-html 区域，当编辑器某一行的文本数据有变动时，只通知右侧窗口更新对应区域的内容，这样一来，浏览器性能可以得到进一步提升。",{"type":394,"tag":395,"props":2241,"children":2243},{"id":2242},"总结",[2244],{"type":400,"value":2242},{"type":394,"tag":403,"props":2246,"children":2247},{},[2248],{"type":400,"value":2249},"前端做页面性能优化时，除了网络层面的优化，剩下很大一块内容都落在 JS 和浏览器的头上，考虑 JS，主要是如何减少重复计算，至于浏览器，则主要会想到重绘回流这块。依靠这两大山头，相信你也能写出运行速度飞快的代码！",{"type":394,"tag":403,"props":2251,"children":2252},{},[2253],{"type":400,"value":2254},"本文只对代码做了概括性说明，具体的代码细节还需要待我使劲整理再发一篇新文章，比如\u003C动手撸一个简单的 LFU 缓存类>之类的 😀，敬请期待~",{"type":394,"tag":395,"props":2256,"children":2258},{"id":2257},"更多",[2259],{"type":400,"value":2257},{"type":394,"tag":2261,"props":2262,"children":2263},"ul",{},[2264,2274,2284],{"type":394,"tag":505,"props":2265,"children":2266},{},[2267],{"type":394,"tag":434,"props":2268,"children":2271},{"href":2269,"rel":2270},"https://juejin.im/post/5a9923e9518825558251c96a",[438],[2272],{"type":400,"value":2273},"浏览器的回流与重绘 (Reflow & Repaint)",{"type":394,"tag":505,"props":2275,"children":2276},{},[2277],{"type":394,"tag":434,"props":2278,"children":2281},{"href":2279,"rel":2280},"https://www.jianshu.com/p/c8aeb3eee6bc",[438],[2282],{"type":400,"value":2283},"Redis 的缓存淘汰策略 LFU 与 LFU",{"type":394,"tag":505,"props":2285,"children":2286},{},[2287],{"type":394,"tag":434,"props":2288,"children":2291},{"href":2289,"rel":2290},"https://blog.csdn.net/elricboa/article/details/78847305",[438],[2292],{"type":400,"value":2293},"LFU 算法四种实现方式介绍",{"type":394,"tag":2295,"props":2296,"children":2297},"style",{},[2298],{"type":400,"value":2299},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":388,"searchDepth":754,"depth":754,"links":2301},[2302,2303,2304,2305,2306,2310,2311,2312],{"id":397,"depth":754,"text":401},{"id":446,"depth":754,"text":446},{"id":487,"depth":754,"text":487},{"id":657,"depth":754,"text":657},{"id":685,"depth":754,"text":685,"children":2307},[2308,2309],{"id":727,"depth":763,"text":727},{"id":1001,"depth":763,"text":1004},{"id":2222,"depth":754,"text":2222},{"id":2242,"depth":754,"text":2242},{"id":2257,"depth":754,"text":2257},"content:_archieved:2019-06:teditor.md","content","_archieved/2019-06/teditor.md","md",[2318,2321],{"_path":2319,"title":2320,"description":388},"/_archieved/2019-06/messy-in-two-years","💖 聊聊此次离职，毕业，及其它杂乱的事情",{"_path":2322,"title":2323,"description":2324},"/_archieved/2019-07/chrome-image-lazyload","听说你还在手写懒加载?","过去, 我们对含有大量图片的网站进行优化无外乎要依靠 JS 逻辑或是相关插件来完成, 比如懒加载技术. 而现在(至少在不久的将来), Chrome 75 版本将增加原生懒加载功能.",1708107572900]