[{"data":1,"prerenderedAt":2328},["Reactive",2],{"navigation":3,"/_archieved/2019-06/teditor":386,"/_archieved/2019-06/teditor-surround":2320},[4,32,80,96,123,129,135,369,375,381],{"title":5,"_path":6,"children":7},"心流思绪 / Heart Flows","/flows",[8,11,14,17,20,23,26,29],{"title":9,"_path":10},"📕 狮子的书单推荐","/flows/books",{"title":12,"_path":13},"🌃 长夜梦","/flows/long-night-dream",{"title":15,"_path":16},"🌌 万物联结与幸福感","/flows/everything",{"title":18,"_path":19},"⌛ 偷取时间","/flows/stealing-time-from-god",{"title":21,"_path":22},"🌆 表达和孤独","/flows/expression-and-loneliness",{"title":24,"_path":25},"🌧️ 我的腼腆","/flows/shy",{"title":27,"_path":28},"🥛 新工作，喝新饮料","/flows/drinking-while-thinking",{"title":30,"_path":31},"📝 心流归档","/flows/fold",{"title":33,"_path":34,"children":35},"技术博客 / Coder","/articles",[36,38,41,44,47,50,53,56,59,62,65,68,71,74,77],{"title":37,"_path":34},"🦁 为什么我要写博客",{"title":39,"_path":40},"🧊 模板解析器轻考古","/articles/micro-templating",{"title":42,"_path":43},"Ⓜ️ Mini CSS Parser","/articles/mini-css-parser",{"title":45,"_path":46},"🚩 向AI咨询前端问题","/articles/use-gpt-learn-complex-frontend",{"title":48,"_path":49},"⛸️ 怎样定制复杂组件的自定义滚动条？","/articles/use-scrollbars",{"title":51,"_path":52},"⚖️ 统一多组件库的层叠顺序","/articles/zindex-manager",{"title":54,"_path":55},"🕷️ 滑动验证码破解思路","/articles/crack-the-slider",{"title":57,"_path":58},"🌟 探秘 CSS 光影效果","/articles/css-light-travel",{"title":60,"_path":61},"🍲 设计模式与 JS 魔法锅","/articles/design-patterns-and-js-magic-pot",{"title":63,"_path":64},"🌐 Anysort：灵活、优雅的多属性排序","/articles/anysort-2th",{"title":66,"_path":67},"💫 CSS 幻术 | 抗锯齿","/articles/css-poaa",{"title":69,"_path":70},"❓ 用纯CSS判断鼠标进入的方向","/articles/css-judge-direction",{"title":72,"_path":73},"📝 你本可以少写些 if-else","/articles/no-more-if-else",{"title":75,"_path":76},"🚝 四十二篇系列","/articles/fourty-two",{"title":78,"_path":79},"📝 技术博客归档","/articles/fold",{"title":81,"_path":82,"children":83},"造物 / Make","/tools",[84,87,90,93],{"title":85,"_path":86},"🌐 AnySort","/tools/anysort",{"title":88,"_path":89},"⛸️ UseScrollbar","/tools/use-scrollbar",{"title":91,"_path":92},"👓 Crapto","/tools/crypto-inline",{"title":94,"_path":95},"🖨️ any-to-base64","/tools/any-to-base64",{"title":97,"_path":98,"children":99},"吉他剧场 / Music","/music",[100,102,105,108,111,114,117,120],{"title":101,"_path":98},"🎸 FingerStyle！",{"title":103,"_path":104},"🌬️ 等待的风","/music/wind",{"title":106,"_path":107},"💕 约定的海洋","/music/ocean",{"title":109,"_path":110},"🎼 Wings~You are the Hero！","/music/wings-you-are-the-hero",{"title":112,"_path":113},"🌏 残酷天使的行动纲领","/music/eva",{"title":115,"_path":116},"🏔️ 奇跡の山","/music/miracle-mountain",{"title":118,"_path":119},"🍷 Wu Wei","/music/wu-wei",{"title":121,"_path":122},"🌅 无题","/music/untitled",{"title":124,"_path":125,"children":126},"画点什么 / Paint","/paint",[127],{"title":128,"_path":125},"🚧 正在施工",{"title":130,"_path":131,"children":132},"知识地图 / Maps","/maps",[133],{"title":134,"_path":131},"🏁 知识地图",{"title":136,"_path":137,"children":138},"零散的笔记 / Gists","/gists",[139,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366],{"title":140,"_path":137},"🧊 Gists",{"title":142,"_path":143},"网站的可访问性","/gists/accessibility",{"title":145,"_path":146},"Bit","/gists/bit",{"title":148,"_path":149},"图片模糊","/gists/blur",{"title":151,"_path":152},"渲染相关笔记","/gists/c4d",{"title":154,"_path":155},"CDN 问题记录","/gists/cdn",{"title":157,"_path":158},"消毒剂","/gists/cleaner",{"title":160,"_path":161},"Windows Command","/gists/cmd",{"title":163,"_path":164},"Command","/gists/command",{"title":166,"_path":167},"复杂科学","/gists/complexity-science",{"title":169,"_path":170},"宇宙","/gists/cosmos",{"title":172,"_path":173},"C++","/gists/cpp",{"title":175,"_path":176},"Data Structure","/gists/data-structure",{"title":178,"_path":179},"DEPRESSION","/gists/depression",{"title":181,"_path":182},"设计模式","/gists/design-patterns",{"title":184,"_path":185},"Developer Experience","/gists/developer-experience",{"title":187,"_path":188},"Device Metrics","/gists/device-metrix",{"title":190,"_path":191},"ECMAScript Language Specification","/gists/ecmascript-specification",{"title":193,"_path":194},"正则表达式","/gists/eegex",{"title":196,"_path":197},"Emoji","/gists/emoji",{"title":199,"_path":200},"工程","/gists/engineering",{"title":202,"_path":203},"熵","/gists/entropy",{"title":205,"_path":206},"Environment","/gists/environment",{"title":208,"_path":209},"Erlang","/gists/erlang",{"title":211,"_path":212},"逃离塔克夫","/gists/escape-from-tarkov",{"title":214,"_path":215},"ESNext (ES6-ES11)","/gists/esnext",{"title":217,"_path":218},"Eval！","/gists/eval",{"title":220,"_path":221},"Flutter","/gists/flutter",{"title":223,"_path":224},"字体","/gists/font",{"title":226,"_path":227},"JS 函数式编程","/gists/functional",{"title":229,"_path":230},"Google C++ Standard","/gists/google-cpp-standard",{"title":232,"_path":233},"双向链接完全体","/gists/graph",{"title":235,"_path":236},"Hardwares","/gists/hardwares",{"title":238,"_path":239},"哈希冲突","/gists/hash-collision",{"title":241,"_path":242},"信息设计","/gists/information-design",{"title":244,"_path":245},"InstantPage","/gists/instant.page",{"title":247,"_path":248},"ISUX 遇见大数据可视化系列","/gists/isux-data-visualization",{"title":250,"_path":251},"KVStore","/gists/key-value-db",{"title":253,"_path":254},"Kubernetes","/gists/kubernetes",{"title":256,"_path":257},"Makefile","/gists/makefile",{"title":259,"_path":260},"Markdown Inline Style","/gists/markdown-nice",{"title":262,"_path":263},"小程序","/gists/miniapp",{"title":265,"_path":266},"减小页面快照体积","/gists/minify-html",{"title":268,"_path":269},"mklink","/gists/mklink",{"title":271,"_path":272},"Mock","/gists/mock",{"title":274,"_path":275},"多端应用","/gists/multy-end-app",{"title":277,"_path":278},"神经科学","/gists/neuroscience",{"title":280,"_path":281},"OO","/gists/oo",{"title":283,"_path":284},"Opinioned Personal Folder","/gists/opinioned-personal-folder",{"title":286,"_path":287},"人物","/gists/person",{"title":289,"_path":290},"PInvoke","/gists/pinvoke",{"title":292,"_path":293},"像素","/gists/pixel",{"title":295,"_path":296},"PowerShell","/gists/powershell",{"title":298,"_path":299},"量子","/gists/quantum",{"title":301,"_path":302},"保持好奇心","/gists/questions",{"title":304,"_path":305},"React Native","/gists/react-native",{"title":307,"_path":308},"博客改版碰到的浏览器平滑滚动问题","/gists/scroll",{"title":310,"_path":311},"SEO","/gists/seo",{"title":313,"_path":314},"Shader","/gists/shader",{"title":316,"_path":317},"Shape Up","/gists/shape-up",{"title":319,"_path":320},"睡觉","/gists/sleep",{"title":322,"_path":323},"States","/gists/states",{"title":325,"_path":326},"Storage","/gists/storage",{"title":328,"_path":329},"音视频流处理","/gists/stream-cli",{"title":331,"_path":332},"Symbol","/gists/symbol",{"title":334,"_path":335},"系统论","/gists/systems-theory",{"title":337,"_path":338},"Taro","/gists/taro",{"title":340,"_path":341},"任务切片","/gists/task-slice",{"title":343,"_path":344},"技术偏好","/gists/tech-dudge",{"title":346,"_path":347},"Untitled","/gists/untitled",{"title":349,"_path":350},"可变字体","/gists/variable-font",{"title":352,"_path":353},"视觉错觉","/gists/visual-illusion",{"title":355,"_path":356},"SS(SSR)","/gists/vpn",{"title":358,"_path":359},"VS Code 插件开发","/gists/vscode-plugin",{"title":361,"_path":362},"Web Components","/gists/web-components",{"title":364,"_path":365},"Windows","/gists/windows",{"title":367,"_path":368},"查缺补漏","/gists/wrong",{"title":370,"_path":371,"children":372},"代码笔记 / Gists","/source-code",[373],{"title":374,"_path":371},"🚄 代码笔记",{"title":376,"_path":377,"children":378},"我 / Abount","/hire",[379],{"title":380,"_path":377},"📬 技术简历",{"title":382,"_path":383,"children":384},"todo","/todo",[385],{"title":382,"_path":383},{"_path":387,"_dir":388,"_draft":389,"_partial":390,"_locale":391,"title":392,"description":391,"body":393,"_type":532,"_id":2316,"_source":2317,"_file":2318,"_extension":2319},"/_archieved/2019-06/teditor","2019-06",false,true,"","从一个越写越慢的编辑器中聊聊优化思路",{"type":394,"children":395,"toc":2303},"root",[396,405,411,416,431,447,452,466,479,488,493,498,503,523,528,577,588,598,603,653,658,663,668,673,686,691,727,733,738,871,876,881,894,899,977,982,987,992,997,1002,1008,1021,1026,1031,1044,1049,1055,1060,1073,1339,1344,1349,1357,1977,1982,2223,2228,2233,2238,2243,2248,2253,2258,2263,2297],{"type":397,"tag":398,"props":399,"children":401},"element","h2",{"id":400},"增订-2020年8月9日",[402],{"type":403,"value":404},"text","增订 | 2020年8月9日",{"type":397,"tag":406,"props":407,"children":408},"p",{},[409],{"type":403,"value":410},"TEditor 维护了一个解析状态栈。逐个读入字符，结合当前解析状态进行状态转换，将旧状态推入栈中，以模仿解析 HTML 的层级结构。状态栈的入栈、出栈过程，通过 DIG_IN、DIG_OUT 来维护，这两个函数会触发更新标签流的副作用。",{"type":397,"tag":406,"props":412,"children":413},{},[414],{"type":403,"value":415},"因为处理整段字符也只需要一次循环；要维护的状态大体上来说只有零散的几个变量和一个状态栈；没有用正则匹配；再加上每解析过程和正常的 Markdown 解析器不一样，TEditor 最大段落只支持到行，再加上每行都做了 LFU 缓存。所以理论上来说 TEditor 应该相当快... 不过，随着解析器的功能增强，状态维护变得有点困难，特别乱。反正我现在是很难看懂我以前写了啥玩意儿...",{"type":397,"tag":417,"props":418,"children":419},"blockquote",{},[420],{"type":397,"tag":406,"props":421,"children":422},{},[423,425],{"type":403,"value":424},"整个系统的状态转变则是发生在许许多多小的、细微的状态变化混合来形成的。这些相互关联的状态变化形成了一个概念上的“状态网”，我们时不时会因它而感到困惑。\n",{"type":397,"tag":426,"props":427,"children":428},"name",{},[429],{"type":403,"value":430},"《JavaScript 函数式编程》",{"type":397,"tag":406,"props":432,"children":433},{},[434,436,445],{"type":403,"value":435},"经过一年的 JS 学习，我的 JS 水平提高了不少。近期我重写了这个 Markdown 解析器，",{"type":397,"tag":437,"props":438,"children":442},"a",{"href":439,"rel":440},"https://github.com/Lionad-Morotar/read-source-code/tree/master/module/markdown-parser",[441],"nofollow",[443],{"type":403,"value":444},"Markdown Parser",{"type":403,"value":446},"，舍弃了“状态转换”的概念，用回了正则匹配 + AST。虽然说速度可能变慢了一个量级，不过可扩展性还是非常强的，比如说可自定义解析插件，介入解析过程。有空还是得学习 Markdown-It 的源码，那玩意儿是我的目标...",{"type":397,"tag":398,"props":448,"children":450},{"id":449},"原文",[451],{"type":403,"value":449},{"type":397,"tag":406,"props":453,"children":454},{},[455,457,464],{"type":403,"value":456},"你用过一个",{"type":397,"tag":458,"props":459,"children":461},"code",{"className":460},[],[462],{"type":403,"value":463},"越写越慢的编辑器",{"type":403,"value":465},"么？",{"type":397,"tag":406,"props":467,"children":468},{},[469,471,477],{"type":403,"value":470},"我曾在项目中实现了一个 MD 编辑器，用来解析简单的 MD 文本，不过它的性能令我捉急。初期基本没有做任何性能优化相关的内容，导致每当我正在写的文章变长之后，编辑器会变得非常",{"type":397,"tag":472,"props":473,"children":474},"del",{},[475],{"type":403,"value":476},"非常",{"type":403,"value":478},"卡，所以说是越写越慢的编辑器( ╯□╰ ) 这期文章主要针对这个编辑器聊聊我实践以及思考总结的一些性能优化方法，肯定还有文中没有总结到的一些方法，欢迎各位看官不舍赐教，留言评论。",{"type":397,"tag":406,"props":480,"children":481},{},[482],{"type":397,"tag":483,"props":484,"children":487},"img",{"alt":485,"src":486},"TEditor","https://mgear-image.oss-cn-shanghai.aliyuncs.com/image/teditor/2019-05-06-01-10-43.png",[],{"type":397,"tag":398,"props":489,"children":491},{"id":490},"解析过程简述",[492],{"type":403,"value":490},{"type":397,"tag":406,"props":494,"children":495},{},[496],{"type":403,"value":497},"文中 MD 编辑器可以在左侧窗口输入 MD 格式文本，然后通过调用解析函数将文本解析转换为 HTML 代码，放到右侧 v-html 窗口中直接渲染。",{"type":397,"tag":406,"props":499,"children":500},{},[501],{"type":403,"value":502},"一般来说 MD 解析不需要经过词法语法分析，而且标点符号几乎没有二义性，解析起来比较简单。对于一段简单的 MD 文本，我们大可从一个正则表达式的角度入手。思考从以下 4 点开始匹配：",{"type":397,"tag":504,"props":505,"children":506},"ol",{},[507,513,518],{"type":397,"tag":508,"props":509,"children":510},"li",{},[511],{"type":403,"value":512},"解析块状元素，分割线，引用块，代码段等",{"type":397,"tag":508,"props":514,"children":515},{},[516],{"type":403,"value":517},"解析文本元素，标题，列表，以及普通文本内容",{"type":397,"tag":508,"props":519,"children":520},{},[521],{"type":403,"value":522},"解析行内元素，角标，加粗，斜体等",{"type":397,"tag":406,"props":524,"children":525},{},[526],{"type":403,"value":527},"我们以以下文本为例进行解析：",{"type":397,"tag":529,"props":530,"children":534},"pre",{"code":531,"language":532,"meta":391,"className":533,"style":391},"### 一个*斜体*标题\n","markdown","language-markdown shiki shiki-themes material-theme-lighter github-light github-dark monokai",[535],{"type":397,"tag":458,"props":536,"children":537},{"__ignoreMap":391},[538],{"type":397,"tag":539,"props":540,"children":543},"span",{"class":541,"line":542},"line",1,[544,550,556,562,568,572],{"type":397,"tag":539,"props":545,"children":547},{"style":546},"--shiki-light:#39ADB5;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold",[548],{"type":403,"value":549},"### ",{"type":397,"tag":539,"props":551,"children":553},{"style":552},"--shiki-light:#E2931D;--shiki-default:#005CC5;--shiki-dark:#79B8FF;--shiki-sepia:#A6E22E;--shiki-light-font-weight:inherit;--shiki-default-font-weight:bold;--shiki-dark-font-weight:bold;--shiki-sepia-font-weight:bold",[554],{"type":403,"value":555},"一个",{"type":397,"tag":539,"props":557,"children":559},{"style":558},"--shiki-light:#39ADB5;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic",[560],{"type":403,"value":561},"*",{"type":397,"tag":539,"props":563,"children":565},{"style":564},"--shiki-light:#E53935;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#66D9EF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic;--shiki-sepia-font-style:italic",[566],{"type":403,"value":567},"斜体",{"type":397,"tag":539,"props":569,"children":570},{"style":558},[571],{"type":403,"value":561},{"type":397,"tag":539,"props":573,"children":574},{"style":552},[575],{"type":403,"value":576},"标题\n",{"type":397,"tag":406,"props":578,"children":579},{},[580,582],{"type":403,"value":581},"首先命中文本元素标题，内容为",{"type":397,"tag":458,"props":583,"children":585},{"className":584},[],[586],{"type":403,"value":587},"一个*斜体*标题",{"type":397,"tag":406,"props":589,"children":590},{},[591,593],{"type":403,"value":592},"紧接着，继续解析比文本元素优先级更低的行内元素，这次命中行内元素斜体，内容为",{"type":397,"tag":458,"props":594,"children":596},{"className":595},[],[597],{"type":403,"value":567},{"type":397,"tag":406,"props":599,"children":600},{},[601],{"type":403,"value":602},"至此，我们将解析完的内容推入结果数组，结果形如：",{"type":397,"tag":529,"props":604,"children":608},{"code":605,"language":606,"meta":391,"className":607,"style":391},"parsedContent = [`\u003Ch3>一个\u003Ci>斜体\u003C/i>标题\u003C/h3>`]\n","js","language-js shiki shiki-themes material-theme-lighter github-light github-dark monokai",[609],{"type":397,"tag":458,"props":610,"children":611},{"__ignoreMap":391},[612],{"type":397,"tag":539,"props":613,"children":614},{"class":541,"line":542},[615,621,627,632,638,644,648],{"type":397,"tag":539,"props":616,"children":618},{"style":617},"--shiki-light:#90A4AE;--shiki-default:#24292E;--shiki-dark:#E1E4E8;--shiki-sepia:#F8F8F2",[619],{"type":403,"value":620},"parsedContent ",{"type":397,"tag":539,"props":622,"children":624},{"style":623},"--shiki-light:#39ADB5;--shiki-default:#D73A49;--shiki-dark:#F97583;--shiki-sepia:#F92672",[625],{"type":403,"value":626},"=",{"type":397,"tag":539,"props":628,"children":629},{"style":617},[630],{"type":403,"value":631}," [",{"type":397,"tag":539,"props":633,"children":635},{"style":634},"--shiki-light:#39ADB5;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[636],{"type":403,"value":637},"`",{"type":397,"tag":539,"props":639,"children":641},{"style":640},"--shiki-light:#91B859;--shiki-default:#032F62;--shiki-dark:#9ECBFF;--shiki-sepia:#E6DB74",[642],{"type":403,"value":643},"\u003Ch3>一个\u003Ci>斜体\u003C/i>标题\u003C/h3>",{"type":397,"tag":539,"props":645,"children":646},{"style":634},[647],{"type":403,"value":637},{"type":397,"tag":539,"props":649,"children":650},{"style":617},[651],{"type":403,"value":652},"]\n",{"type":397,"tag":406,"props":654,"children":655},{},[656],{"type":403,"value":657},"如果文本不是一行，再继续之前的思路继续解析，直到原始内容为空，得到最终的解析结果。",{"type":397,"tag":398,"props":659,"children":661},{"id":660},"解析函数节流",[662],{"type":403,"value":660},{"type":397,"tag":406,"props":664,"children":665},{},[666],{"type":403,"value":667},"函数节流是老生常谈的话题了，当然不能当左侧内容一有变动就立即更新。在一些极端的场合，比如长按删除或是长按空格回车等情况下，连续执行解析函数硬件会造成沉重的负担。所以我们优化思路首先要求尽量在不太影响视觉效果的情况下，尽可能少地执行解析函数。",{"type":397,"tag":406,"props":669,"children":670},{},[671],{"type":403,"value":672},"目标有了，那么对应的解决方案手到擒来：",{"type":397,"tag":504,"props":674,"children":675},{},[676,681],{"type":397,"tag":508,"props":677,"children":678},{},[679],{"type":403,"value":680},"对特定类型按键，我们将不调用解析函数，如多个连续的空格回车或是某些行内符号。因为这些内容的解析结果对之后预览结果没有影响",{"type":397,"tag":508,"props":682,"children":683},{},[684],{"type":403,"value":685},"对解析函数节流，将调用频率控制在 0.3 秒 1 次，具体的数值可根据个人需求调整，比如我常常在回车后习惯性扫一眼预览，那么按回车后可以跳过节流立即执行一次解析",{"type":397,"tag":398,"props":687,"children":689},{"id":688},"缓存解析结果",[690],{"type":403,"value":688},{"type":397,"tag":406,"props":692,"children":693},{},[694,696,702,704,710,712,718,720,725],{"type":403,"value":695},"缓存解析结果方案，类似于算法题中常见的缓存对象。比如我们要实现一个斐波那契数列递归函数，计算",{"type":397,"tag":458,"props":697,"children":699},{"className":698},[],[700],{"type":403,"value":701},"fabi(5)",{"type":403,"value":703},"时需要用到",{"type":397,"tag":458,"props":705,"children":707},{"className":706},[],[708],{"type":403,"value":709},"fabi(3)",{"type":403,"value":711},"和",{"type":397,"tag":458,"props":713,"children":715},{"className":714},[],[716],{"type":403,"value":717},"fabi(4)",{"type":403,"value":719},"的结果，如果我们有缓存，我们可以直接从缓存中获取",{"type":397,"tag":458,"props":721,"children":723},{"className":722},[],[724],{"type":403,"value":709},{"type":403,"value":726},"的结果。将这一概念推导到解析器，我们可以创建一个对象去缓存解析结果。",{"type":397,"tag":728,"props":729,"children":731},"h3",{"id":730},"备忘录实现",[732],{"type":403,"value":730},{"type":397,"tag":406,"props":734,"children":735},{},[736],{"type":403,"value":737},"一开始写解析结果缓存的时候，我犯了一个很严重的错误，那就是想尝试将所有内容以及其解析值缓存到备忘录对象，代码形如：",{"type":397,"tag":529,"props":739,"children":743},{"code":740,"language":741,"meta":391,"className":742,"style":391},"data: {\n  // 缓存对象\n  memo: {}\n}\nwatch： {\n  // 当编辑器的value变动时将尝试直接获取缓存，如果没有缓存才解析内容\n  value (n，o) {\n    if (this.memo[n]) {\n      this.parsedValue = this.memo[n]\n    } else {\n      this.memo[n] = this.parsedValue = parseMDToHTML(n)\n    }\n  }\n}\n","JS","language-JS shiki shiki-themes material-theme-lighter github-light github-dark monokai",[744],{"type":397,"tag":458,"props":745,"children":746},{"__ignoreMap":391},[747,755,764,773,782,791,800,809,818,827,836,845,854,863],{"type":397,"tag":539,"props":748,"children":749},{"class":541,"line":542},[750],{"type":397,"tag":539,"props":751,"children":752},{},[753],{"type":403,"value":754},"data: {\n",{"type":397,"tag":539,"props":756,"children":758},{"class":541,"line":757},2,[759],{"type":397,"tag":539,"props":760,"children":761},{},[762],{"type":403,"value":763},"  // 缓存对象\n",{"type":397,"tag":539,"props":765,"children":767},{"class":541,"line":766},3,[768],{"type":397,"tag":539,"props":769,"children":770},{},[771],{"type":403,"value":772},"  memo: {}\n",{"type":397,"tag":539,"props":774,"children":776},{"class":541,"line":775},4,[777],{"type":397,"tag":539,"props":778,"children":779},{},[780],{"type":403,"value":781},"}\n",{"type":397,"tag":539,"props":783,"children":785},{"class":541,"line":784},5,[786],{"type":397,"tag":539,"props":787,"children":788},{},[789],{"type":403,"value":790},"watch： {\n",{"type":397,"tag":539,"props":792,"children":794},{"class":541,"line":793},6,[795],{"type":397,"tag":539,"props":796,"children":797},{},[798],{"type":403,"value":799},"  // 当编辑器的value变动时将尝试直接获取缓存，如果没有缓存才解析内容\n",{"type":397,"tag":539,"props":801,"children":803},{"class":541,"line":802},7,[804],{"type":397,"tag":539,"props":805,"children":806},{},[807],{"type":403,"value":808},"  value (n，o) {\n",{"type":397,"tag":539,"props":810,"children":812},{"class":541,"line":811},8,[813],{"type":397,"tag":539,"props":814,"children":815},{},[816],{"type":403,"value":817},"    if (this.memo[n]) {\n",{"type":397,"tag":539,"props":819,"children":821},{"class":541,"line":820},9,[822],{"type":397,"tag":539,"props":823,"children":824},{},[825],{"type":403,"value":826},"      this.parsedValue = this.memo[n]\n",{"type":397,"tag":539,"props":828,"children":830},{"class":541,"line":829},10,[831],{"type":397,"tag":539,"props":832,"children":833},{},[834],{"type":403,"value":835},"    } else {\n",{"type":397,"tag":539,"props":837,"children":839},{"class":541,"line":838},11,[840],{"type":397,"tag":539,"props":841,"children":842},{},[843],{"type":403,"value":844},"      this.memo[n] = this.parsedValue = parseMDToHTML(n)\n",{"type":397,"tag":539,"props":846,"children":848},{"class":541,"line":847},12,[849],{"type":397,"tag":539,"props":850,"children":851},{},[852],{"type":403,"value":853},"    }\n",{"type":397,"tag":539,"props":855,"children":857},{"class":541,"line":856},13,[858],{"type":397,"tag":539,"props":859,"children":860},{},[861],{"type":403,"value":862},"  }\n",{"type":397,"tag":539,"props":864,"children":866},{"class":541,"line":865},14,[867],{"type":397,"tag":539,"props":868,"children":869},{},[870],{"type":403,"value":781},{"type":397,"tag":406,"props":872,"children":873},{},[874],{"type":403,"value":875},"代码看起来没什么问题，因为问题不在代码。",{"type":397,"tag":406,"props":877,"children":878},{},[879],{"type":403,"value":880},"问题在内存容量上。",{"type":397,"tag":406,"props":882,"children":883},{},[884,886,892],{"type":403,"value":885},"代码运行在浏览器中，一般情况下，内存相对于代码执行速度而言是比较廉价的，所以我经常使用到用对象进行缓存这种",{"type":397,"tag":458,"props":887,"children":889},{"className":888},[],[890],{"type":403,"value":891},"以空间换时间",{"type":403,"value":893},"的代码模式。一般情况下它非常好用，但它可能带来一个问题。这种代码模式进一步限制了前端对内存的感知——我将整个编辑区域的原始值作为对象的键，将其解析结果作为值缓存下来——一旦文章长度开始增长，缓存对象占用的内存容量将急剧增大。",{"type":397,"tag":406,"props":895,"children":896},{},[897],{"type":403,"value":898},"假设我们有某文章字符长度总量为 n，那么备忘录模型将生长成这个样子：",{"type":397,"tag":529,"props":900,"children":902},{"code":901,"language":741,"meta":391,"className":742,"style":391},"value = [1，2，3，...，n-1，n].join('')\nmemo == {\n  '1': '1',\n  '12': '12',\n  '123': '123',\n  // ...\n  '12345...n-1': '12345...n-1',\n  '12345...n': '12345...n',\n}\n",[903],{"type":397,"tag":458,"props":904,"children":905},{"__ignoreMap":391},[906,914,922,930,938,946,954,962,970],{"type":397,"tag":539,"props":907,"children":908},{"class":541,"line":542},[909],{"type":397,"tag":539,"props":910,"children":911},{},[912],{"type":403,"value":913},"value = [1，2，3，...，n-1，n].join('')\n",{"type":397,"tag":539,"props":915,"children":916},{"class":541,"line":757},[917],{"type":397,"tag":539,"props":918,"children":919},{},[920],{"type":403,"value":921},"memo == {\n",{"type":397,"tag":539,"props":923,"children":924},{"class":541,"line":766},[925],{"type":397,"tag":539,"props":926,"children":927},{},[928],{"type":403,"value":929},"  '1': '1',\n",{"type":397,"tag":539,"props":931,"children":932},{"class":541,"line":775},[933],{"type":397,"tag":539,"props":934,"children":935},{},[936],{"type":403,"value":937},"  '12': '12',\n",{"type":397,"tag":539,"props":939,"children":940},{"class":541,"line":784},[941],{"type":397,"tag":539,"props":942,"children":943},{},[944],{"type":403,"value":945},"  '123': '123',\n",{"type":397,"tag":539,"props":947,"children":948},{"class":541,"line":793},[949],{"type":397,"tag":539,"props":950,"children":951},{},[952],{"type":403,"value":953},"  // ...\n",{"type":397,"tag":539,"props":955,"children":956},{"class":541,"line":802},[957],{"type":397,"tag":539,"props":958,"children":959},{},[960],{"type":403,"value":961},"  '12345...n-1': '12345...n-1',\n",{"type":397,"tag":539,"props":963,"children":964},{"class":541,"line":811},[965],{"type":397,"tag":539,"props":966,"children":967},{},[968],{"type":403,"value":969},"  '12345...n': '12345...n',\n",{"type":397,"tag":539,"props":971,"children":972},{"class":541,"line":820},[973],{"type":397,"tag":539,"props":974,"children":975},{},[976],{"type":403,"value":781},{"type":397,"tag":406,"props":978,"children":979},{},[980],{"type":403,"value":981},"那么可以轻易得出，文章字符长度(N)和内存消耗量(O)的关系，形如：",{"type":397,"tag":406,"props":983,"children":984},{},[985],{"type":403,"value":986},"$$O = N(N+1)/2 ≈ N^2$$",{"type":397,"tag":406,"props":988,"children":989},{},[990],{"type":403,"value":991},"和你想的一样，我浏览器内存爆了 😅",{"type":397,"tag":406,"props":993,"children":994},{},[995],{"type":403,"value":996},"不仅如此，文章不断地增长，不仅带来内存压力，解析函数每次要处理地内容也变多，浏览器响应速度也越来越慢。",{"type":397,"tag":406,"props":998,"children":999},{},[1000],{"type":403,"value":1001},"我们亟需更好的缓存方案。",{"type":397,"tag":728,"props":1003,"children":1005},{"id":1004},"lru-以及-lfu-策略",[1006],{"type":403,"value":1007},"LRU 以及 LFU 策略",{"type":397,"tag":406,"props":1009,"children":1010},{},[1011,1013,1019],{"type":403,"value":1012},"在解析过程简述小节，我们提到解析器在解析时，会将 MD 文本分为块状内容进行解析。由此我们可以尝试缓存块状内容的解析结果，而不是去缓存全文。为了在这次优化不爆内存，我们引入",{"type":397,"tag":458,"props":1014,"children":1016},{"className":1015},[],[1017],{"type":403,"value":1018},"有限空间概念",{"type":403,"value":1020},"——设想编辑器内含一个数组，用来存放 MD 文本中块状内容以及其解析结果，同时数组有最大长度限制，限制为 1000，假设我们的每一个元素占 5kb 的内存，那么这个数组将只占浏览器约 5MB 的内存，无论我们怎么折腾，至少不至于爆内存了~",{"type":397,"tag":406,"props":1022,"children":1023},{},[1024],{"type":403,"value":1025},"不过我们需要先考虑这样一种情况，假使我们的文章有超过 1001 个块状内容，那么多出的这一个块状内容进行解析后得到的结果很显然不能直接存入长度限制为 1000 数组中。所以我们需要一种算法去计算应该舍弃数组中哪一个元素，将该元素舍弃后，再把我们手中结果存入数组。",{"type":397,"tag":406,"props":1027,"children":1028},{},[1029],{"type":403,"value":1030},"用过 Redis 的朋友应该了解，Redis 作为一种使用内存作缓存的缓存系统，它有多种缓存策略：",{"type":397,"tag":504,"props":1032,"children":1033},{},[1034,1039],{"type":397,"tag":508,"props":1035,"children":1036},{},[1037],{"type":403,"value":1038},"基于数据访问时间进行淘汰(LRU : Least Recently Used 淘汰最近时间最少使用到的内容)",{"type":397,"tag":508,"props":1040,"children":1041},{},[1042],{"type":403,"value":1043},"基于访问频率进行淘汰(LFU : Least Frequently Used 淘汰访问频次最低的内容)",{"type":397,"tag":406,"props":1045,"children":1046},{},[1047],{"type":403,"value":1048},"下文将仿照 Redis 的缓存淘汰策略手动造一个使用 LFU 策略进行缓存淘汰的缓存类。",{"type":397,"tag":1050,"props":1051,"children":1053},"h4",{"id":1052},"简单的链表实现",[1054],{"type":403,"value":1052},{"type":397,"tag":406,"props":1056,"children":1057},{},[1058],{"type":403,"value":1059},"实际的代码并未采用数组充当缓存元素，实际选择了双向链表，使用双向列表可以抹除使用出租移除元素添加元素带来的性能成本。",{"type":397,"tag":406,"props":1061,"children":1062},{},[1063,1065,1071],{"type":403,"value":1064},"我们需要提前定义好节点类",{"type":397,"tag":458,"props":1066,"children":1068},{"className":1067},[],[1069],{"type":403,"value":1070},"Node",{"type":403,"value":1072},"：",{"type":397,"tag":529,"props":1074,"children":1076},{"code":1075,"language":741,"meta":391,"className":742,"style":391},"function Node (config) {\n  this.key = config.key\n  this.prev = null\n  this.next = null\n  this.data = config.data || {\n    val: null,\n    weight: 1\n  }\n}\n// 将当前节点的next指向另一节点\nNode.prototype.linkNextTo = function (nextNode) {\n  this.next = nextNode\n  nextNode.prev = this\n}\n// 将当前节点插入某一结点后\nNode.prototype.insertAfterNode = function (prevNode) {\n  const prevNextNode = prevNode.next\n  prevNode.linkNext(this)\n  this.linkNext(prevNextNode)\n}\n// 删除当前节点，除非节点是头节点/尾节点\nNode.prototype.unLink = function () {\n  const prev = this.prev\n  const next = this.next\n\n  if (!prev || !next) {\n    console.log(`Node : ${this.key} cant unlink`)\n    return false\n  }\n  prev.linkNext(next)\n}\n",[1077],{"type":397,"tag":458,"props":1078,"children":1079},{"__ignoreMap":391},[1080,1088,1096,1104,1112,1120,1128,1136,1143,1150,1158,1166,1174,1182,1189,1198,1207,1216,1225,1234,1242,1251,1260,1269,1278,1287,1296,1305,1314,1322,1331],{"type":397,"tag":539,"props":1081,"children":1082},{"class":541,"line":542},[1083],{"type":397,"tag":539,"props":1084,"children":1085},{},[1086],{"type":403,"value":1087},"function Node (config) {\n",{"type":397,"tag":539,"props":1089,"children":1090},{"class":541,"line":757},[1091],{"type":397,"tag":539,"props":1092,"children":1093},{},[1094],{"type":403,"value":1095},"  this.key = config.key\n",{"type":397,"tag":539,"props":1097,"children":1098},{"class":541,"line":766},[1099],{"type":397,"tag":539,"props":1100,"children":1101},{},[1102],{"type":403,"value":1103},"  this.prev = null\n",{"type":397,"tag":539,"props":1105,"children":1106},{"class":541,"line":775},[1107],{"type":397,"tag":539,"props":1108,"children":1109},{},[1110],{"type":403,"value":1111},"  this.next = null\n",{"type":397,"tag":539,"props":1113,"children":1114},{"class":541,"line":784},[1115],{"type":397,"tag":539,"props":1116,"children":1117},{},[1118],{"type":403,"value":1119},"  this.data = config.data || {\n",{"type":397,"tag":539,"props":1121,"children":1122},{"class":541,"line":793},[1123],{"type":397,"tag":539,"props":1124,"children":1125},{},[1126],{"type":403,"value":1127},"    val: null,\n",{"type":397,"tag":539,"props":1129,"children":1130},{"class":541,"line":802},[1131],{"type":397,"tag":539,"props":1132,"children":1133},{},[1134],{"type":403,"value":1135},"    weight: 1\n",{"type":397,"tag":539,"props":1137,"children":1138},{"class":541,"line":811},[1139],{"type":397,"tag":539,"props":1140,"children":1141},{},[1142],{"type":403,"value":862},{"type":397,"tag":539,"props":1144,"children":1145},{"class":541,"line":820},[1146],{"type":397,"tag":539,"props":1147,"children":1148},{},[1149],{"type":403,"value":781},{"type":397,"tag":539,"props":1151,"children":1152},{"class":541,"line":829},[1153],{"type":397,"tag":539,"props":1154,"children":1155},{},[1156],{"type":403,"value":1157},"// 将当前节点的next指向另一节点\n",{"type":397,"tag":539,"props":1159,"children":1160},{"class":541,"line":838},[1161],{"type":397,"tag":539,"props":1162,"children":1163},{},[1164],{"type":403,"value":1165},"Node.prototype.linkNextTo = function (nextNode) {\n",{"type":397,"tag":539,"props":1167,"children":1168},{"class":541,"line":847},[1169],{"type":397,"tag":539,"props":1170,"children":1171},{},[1172],{"type":403,"value":1173},"  this.next = nextNode\n",{"type":397,"tag":539,"props":1175,"children":1176},{"class":541,"line":856},[1177],{"type":397,"tag":539,"props":1178,"children":1179},{},[1180],{"type":403,"value":1181},"  nextNode.prev = this\n",{"type":397,"tag":539,"props":1183,"children":1184},{"class":541,"line":865},[1185],{"type":397,"tag":539,"props":1186,"children":1187},{},[1188],{"type":403,"value":781},{"type":397,"tag":539,"props":1190,"children":1192},{"class":541,"line":1191},15,[1193],{"type":397,"tag":539,"props":1194,"children":1195},{},[1196],{"type":403,"value":1197},"// 将当前节点插入某一结点后\n",{"type":397,"tag":539,"props":1199,"children":1201},{"class":541,"line":1200},16,[1202],{"type":397,"tag":539,"props":1203,"children":1204},{},[1205],{"type":403,"value":1206},"Node.prototype.insertAfterNode = function (prevNode) {\n",{"type":397,"tag":539,"props":1208,"children":1210},{"class":541,"line":1209},17,[1211],{"type":397,"tag":539,"props":1212,"children":1213},{},[1214],{"type":403,"value":1215},"  const prevNextNode = prevNode.next\n",{"type":397,"tag":539,"props":1217,"children":1219},{"class":541,"line":1218},18,[1220],{"type":397,"tag":539,"props":1221,"children":1222},{},[1223],{"type":403,"value":1224},"  prevNode.linkNext(this)\n",{"type":397,"tag":539,"props":1226,"children":1228},{"class":541,"line":1227},19,[1229],{"type":397,"tag":539,"props":1230,"children":1231},{},[1232],{"type":403,"value":1233},"  this.linkNext(prevNextNode)\n",{"type":397,"tag":539,"props":1235,"children":1237},{"class":541,"line":1236},20,[1238],{"type":397,"tag":539,"props":1239,"children":1240},{},[1241],{"type":403,"value":781},{"type":397,"tag":539,"props":1243,"children":1245},{"class":541,"line":1244},21,[1246],{"type":397,"tag":539,"props":1247,"children":1248},{},[1249],{"type":403,"value":1250},"// 删除当前节点，除非节点是头节点/尾节点\n",{"type":397,"tag":539,"props":1252,"children":1254},{"class":541,"line":1253},22,[1255],{"type":397,"tag":539,"props":1256,"children":1257},{},[1258],{"type":403,"value":1259},"Node.prototype.unLink = function () {\n",{"type":397,"tag":539,"props":1261,"children":1263},{"class":541,"line":1262},23,[1264],{"type":397,"tag":539,"props":1265,"children":1266},{},[1267],{"type":403,"value":1268},"  const prev = this.prev\n",{"type":397,"tag":539,"props":1270,"children":1272},{"class":541,"line":1271},24,[1273],{"type":397,"tag":539,"props":1274,"children":1275},{},[1276],{"type":403,"value":1277},"  const next = this.next\n",{"type":397,"tag":539,"props":1279,"children":1281},{"class":541,"line":1280},25,[1282],{"type":397,"tag":539,"props":1283,"children":1284},{"emptyLinePlaceholder":390},[1285],{"type":403,"value":1286},"\n",{"type":397,"tag":539,"props":1288,"children":1290},{"class":541,"line":1289},26,[1291],{"type":397,"tag":539,"props":1292,"children":1293},{},[1294],{"type":403,"value":1295},"  if (!prev || !next) {\n",{"type":397,"tag":539,"props":1297,"children":1299},{"class":541,"line":1298},27,[1300],{"type":397,"tag":539,"props":1301,"children":1302},{},[1303],{"type":403,"value":1304},"    console.log(`Node : ${this.key} cant unlink`)\n",{"type":397,"tag":539,"props":1306,"children":1308},{"class":541,"line":1307},28,[1309],{"type":397,"tag":539,"props":1310,"children":1311},{},[1312],{"type":403,"value":1313},"    return false\n",{"type":397,"tag":539,"props":1315,"children":1317},{"class":541,"line":1316},29,[1318],{"type":397,"tag":539,"props":1319,"children":1320},{},[1321],{"type":403,"value":862},{"type":397,"tag":539,"props":1323,"children":1325},{"class":541,"line":1324},30,[1326],{"type":397,"tag":539,"props":1327,"children":1328},{},[1329],{"type":403,"value":1330},"  prev.linkNext(next)\n",{"type":397,"tag":539,"props":1332,"children":1334},{"class":541,"line":1333},31,[1335],{"type":397,"tag":539,"props":1336,"children":1337},{},[1338],{"type":403,"value":781},{"type":397,"tag":1050,"props":1340,"children":1342},{"id":1341},"缓存类",[1343],{"type":403,"value":1341},{"type":397,"tag":406,"props":1345,"children":1346},{},[1347],{"type":403,"value":1348},"缓存类将内含一个双向链表，同时还包含最大链表节点数，当前链表长度这些属性：",{"type":397,"tag":529,"props":1350,"children":1352},{"code":1351},"数组可以直接通过下标去获取某个特定的元素，而链表不行，在缓存类中我使用一个备忘录对象去记录每一个节点的访问地址，充当数组下标的作用，详见下代码中`nodeMemo`的使用\n",[1353],{"type":397,"tag":458,"props":1354,"children":1355},{"__ignoreMap":391},[1356],{"type":403,"value":1351},{"type":397,"tag":529,"props":1358,"children":1360},{"code":1359,"language":741,"meta":391,"className":742,"style":391},"function LFU (limit) {\n  this.headNode = new Node({ key: '__head__'，data: { val: null，weight: Number.MAX_VALUE } })\n  this.tailNode = new Node({ key: '__tail__'，data: { val: null，weight: Number.MIN_VALUE } })\n  this.headNode.linkNext(this.tailNode)\n  this.nodeMemo = {}\n  this.nodeLength = 0\n  this.nodeLengthLimit = limit || 999\n}\n// 通过key判断缓存中是否有某元素\nLFU.prototype.has = function (key) {\n  return !!this.nodeMemo[key]\n}\n// 通过key获取缓存中某一元素值\nLFU.prototype.get = function (key) {\n  let handle = this.nodeMemo[key]\n  if (handle) {\n    this.addNodeWeight(handle)\n    return handle.data.val\n  } else {\n    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n  }\n}\n// 通过key获取缓存中某一元素权重\nLFU.prototype.getNodeWeight = function (key) {\n  let handle = this.nodeMemo[key]\n  if (handle) {\n    return handle.data.weight\n  } else {\n    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n  }\n}\n// 添加新的缓存元素\nLFU.prototype.set = function (key，val) {\n  const handleNode = this.nodeMemo[key]\n  if (handleNode) {\n    this.addNodeWeight(handleNode，10)\n    handleNode.data.val = val\n  } else {\n    if (this.nodeLength \u003C this.nodeLengthLimit) {\n      this.nodeLength++\n    } else {\n      const deleteNode = this.tailNode.prev\n      deleteNode.unLink()\n      delete this.nodeMemo[deleteNode.key]\n    }\n    const newNode = new Node({ key，data: { val，weight: 1 } })\n    this.nodeMemo[key] = newNode\n    newNode.insertAfter(this.tailNode.prev)\n  }\n}\n// 打印缓存中全部节点\nLFU.prototype.showAllNodes = function () {\n  let next = this.headNode.next\n  while (next && next.next) {\n    console.log(`Node : ${next.key} has data ${next.data.val} and weight ${next.data.weight}`)\n    next = next.next\n  }\n}\n// 对某一元素进行加权操作\nLFU.prototype.addNodeWeight = function (node，w = 1) {\n  const handle = node\n  let prev = handle.prev\n\n  handle.unLink()\n  handle.data.weight += w\n  while (prev) {\n    if (prev.data.weight \u003C= handle.data.weight) {\n      prev = prev.prev\n    } else {\n      handle.insertAfter(prev)\n      prev = null\n    }\n  }\n}\n",[1361],{"type":397,"tag":458,"props":1362,"children":1363},{"__ignoreMap":391},[1364,1372,1380,1388,1396,1404,1412,1420,1427,1435,1443,1451,1458,1466,1474,1482,1490,1498,1506,1514,1522,1529,1536,1544,1552,1559,1566,1574,1581,1588,1595,1602,1611,1620,1629,1638,1647,1656,1664,1673,1682,1690,1699,1708,1717,1725,1734,1743,1752,1760,1768,1777,1786,1795,1804,1813,1822,1830,1838,1847,1856,1865,1874,1882,1891,1900,1909,1918,1927,1935,1944,1953,1961,1969],{"type":397,"tag":539,"props":1365,"children":1366},{"class":541,"line":542},[1367],{"type":397,"tag":539,"props":1368,"children":1369},{},[1370],{"type":403,"value":1371},"function LFU (limit) {\n",{"type":397,"tag":539,"props":1373,"children":1374},{"class":541,"line":757},[1375],{"type":397,"tag":539,"props":1376,"children":1377},{},[1378],{"type":403,"value":1379},"  this.headNode = new Node({ key: '__head__'，data: { val: null，weight: Number.MAX_VALUE } })\n",{"type":397,"tag":539,"props":1381,"children":1382},{"class":541,"line":766},[1383],{"type":397,"tag":539,"props":1384,"children":1385},{},[1386],{"type":403,"value":1387},"  this.tailNode = new Node({ key: '__tail__'，data: { val: null，weight: Number.MIN_VALUE } })\n",{"type":397,"tag":539,"props":1389,"children":1390},{"class":541,"line":775},[1391],{"type":397,"tag":539,"props":1392,"children":1393},{},[1394],{"type":403,"value":1395},"  this.headNode.linkNext(this.tailNode)\n",{"type":397,"tag":539,"props":1397,"children":1398},{"class":541,"line":784},[1399],{"type":397,"tag":539,"props":1400,"children":1401},{},[1402],{"type":403,"value":1403},"  this.nodeMemo = {}\n",{"type":397,"tag":539,"props":1405,"children":1406},{"class":541,"line":793},[1407],{"type":397,"tag":539,"props":1408,"children":1409},{},[1410],{"type":403,"value":1411},"  this.nodeLength = 0\n",{"type":397,"tag":539,"props":1413,"children":1414},{"class":541,"line":802},[1415],{"type":397,"tag":539,"props":1416,"children":1417},{},[1418],{"type":403,"value":1419},"  this.nodeLengthLimit = limit || 999\n",{"type":397,"tag":539,"props":1421,"children":1422},{"class":541,"line":811},[1423],{"type":397,"tag":539,"props":1424,"children":1425},{},[1426],{"type":403,"value":781},{"type":397,"tag":539,"props":1428,"children":1429},{"class":541,"line":820},[1430],{"type":397,"tag":539,"props":1431,"children":1432},{},[1433],{"type":403,"value":1434},"// 通过key判断缓存中是否有某元素\n",{"type":397,"tag":539,"props":1436,"children":1437},{"class":541,"line":829},[1438],{"type":397,"tag":539,"props":1439,"children":1440},{},[1441],{"type":403,"value":1442},"LFU.prototype.has = function (key) {\n",{"type":397,"tag":539,"props":1444,"children":1445},{"class":541,"line":838},[1446],{"type":397,"tag":539,"props":1447,"children":1448},{},[1449],{"type":403,"value":1450},"  return !!this.nodeMemo[key]\n",{"type":397,"tag":539,"props":1452,"children":1453},{"class":541,"line":847},[1454],{"type":397,"tag":539,"props":1455,"children":1456},{},[1457],{"type":403,"value":781},{"type":397,"tag":539,"props":1459,"children":1460},{"class":541,"line":856},[1461],{"type":397,"tag":539,"props":1462,"children":1463},{},[1464],{"type":403,"value":1465},"// 通过key获取缓存中某一元素值\n",{"type":397,"tag":539,"props":1467,"children":1468},{"class":541,"line":865},[1469],{"type":397,"tag":539,"props":1470,"children":1471},{},[1472],{"type":403,"value":1473},"LFU.prototype.get = function (key) {\n",{"type":397,"tag":539,"props":1475,"children":1476},{"class":541,"line":1191},[1477],{"type":397,"tag":539,"props":1478,"children":1479},{},[1480],{"type":403,"value":1481},"  let handle = this.nodeMemo[key]\n",{"type":397,"tag":539,"props":1483,"children":1484},{"class":541,"line":1200},[1485],{"type":397,"tag":539,"props":1486,"children":1487},{},[1488],{"type":403,"value":1489},"  if (handle) {\n",{"type":397,"tag":539,"props":1491,"children":1492},{"class":541,"line":1209},[1493],{"type":397,"tag":539,"props":1494,"children":1495},{},[1496],{"type":403,"value":1497},"    this.addNodeWeight(handle)\n",{"type":397,"tag":539,"props":1499,"children":1500},{"class":541,"line":1218},[1501],{"type":397,"tag":539,"props":1502,"children":1503},{},[1504],{"type":403,"value":1505},"    return handle.data.val\n",{"type":397,"tag":539,"props":1507,"children":1508},{"class":541,"line":1227},[1509],{"type":397,"tag":539,"props":1510,"children":1511},{},[1512],{"type":403,"value":1513},"  } else {\n",{"type":397,"tag":539,"props":1515,"children":1516},{"class":541,"line":1236},[1517],{"type":397,"tag":539,"props":1518,"children":1519},{},[1520],{"type":403,"value":1521},"    throw new Error(`Key : ${key} is not fount in LFU Nodes`)\n",{"type":397,"tag":539,"props":1523,"children":1524},{"class":541,"line":1244},[1525],{"type":397,"tag":539,"props":1526,"children":1527},{},[1528],{"type":403,"value":862},{"type":397,"tag":539,"props":1530,"children":1531},{"class":541,"line":1253},[1532],{"type":397,"tag":539,"props":1533,"children":1534},{},[1535],{"type":403,"value":781},{"type":397,"tag":539,"props":1537,"children":1538},{"class":541,"line":1262},[1539],{"type":397,"tag":539,"props":1540,"children":1541},{},[1542],{"type":403,"value":1543},"// 通过key获取缓存中某一元素权重\n",{"type":397,"tag":539,"props":1545,"children":1546},{"class":541,"line":1271},[1547],{"type":397,"tag":539,"props":1548,"children":1549},{},[1550],{"type":403,"value":1551},"LFU.prototype.getNodeWeight = function (key) {\n",{"type":397,"tag":539,"props":1553,"children":1554},{"class":541,"line":1280},[1555],{"type":397,"tag":539,"props":1556,"children":1557},{},[1558],{"type":403,"value":1481},{"type":397,"tag":539,"props":1560,"children":1561},{"class":541,"line":1289},[1562],{"type":397,"tag":539,"props":1563,"children":1564},{},[1565],{"type":403,"value":1489},{"type":397,"tag":539,"props":1567,"children":1568},{"class":541,"line":1298},[1569],{"type":397,"tag":539,"props":1570,"children":1571},{},[1572],{"type":403,"value":1573},"    return handle.data.weight\n",{"type":397,"tag":539,"props":1575,"children":1576},{"class":541,"line":1307},[1577],{"type":397,"tag":539,"props":1578,"children":1579},{},[1580],{"type":403,"value":1513},{"type":397,"tag":539,"props":1582,"children":1583},{"class":541,"line":1316},[1584],{"type":397,"tag":539,"props":1585,"children":1586},{},[1587],{"type":403,"value":1521},{"type":397,"tag":539,"props":1589,"children":1590},{"class":541,"line":1324},[1591],{"type":397,"tag":539,"props":1592,"children":1593},{},[1594],{"type":403,"value":862},{"type":397,"tag":539,"props":1596,"children":1597},{"class":541,"line":1333},[1598],{"type":397,"tag":539,"props":1599,"children":1600},{},[1601],{"type":403,"value":781},{"type":397,"tag":539,"props":1603,"children":1605},{"class":541,"line":1604},32,[1606],{"type":397,"tag":539,"props":1607,"children":1608},{},[1609],{"type":403,"value":1610},"// 添加新的缓存元素\n",{"type":397,"tag":539,"props":1612,"children":1614},{"class":541,"line":1613},33,[1615],{"type":397,"tag":539,"props":1616,"children":1617},{},[1618],{"type":403,"value":1619},"LFU.prototype.set = function (key，val) {\n",{"type":397,"tag":539,"props":1621,"children":1623},{"class":541,"line":1622},34,[1624],{"type":397,"tag":539,"props":1625,"children":1626},{},[1627],{"type":403,"value":1628},"  const handleNode = this.nodeMemo[key]\n",{"type":397,"tag":539,"props":1630,"children":1632},{"class":541,"line":1631},35,[1633],{"type":397,"tag":539,"props":1634,"children":1635},{},[1636],{"type":403,"value":1637},"  if (handleNode) {\n",{"type":397,"tag":539,"props":1639,"children":1641},{"class":541,"line":1640},36,[1642],{"type":397,"tag":539,"props":1643,"children":1644},{},[1645],{"type":403,"value":1646},"    this.addNodeWeight(handleNode，10)\n",{"type":397,"tag":539,"props":1648,"children":1650},{"class":541,"line":1649},37,[1651],{"type":397,"tag":539,"props":1652,"children":1653},{},[1654],{"type":403,"value":1655},"    handleNode.data.val = val\n",{"type":397,"tag":539,"props":1657,"children":1659},{"class":541,"line":1658},38,[1660],{"type":397,"tag":539,"props":1661,"children":1662},{},[1663],{"type":403,"value":1513},{"type":397,"tag":539,"props":1665,"children":1667},{"class":541,"line":1666},39,[1668],{"type":397,"tag":539,"props":1669,"children":1670},{},[1671],{"type":403,"value":1672},"    if (this.nodeLength \u003C this.nodeLengthLimit) {\n",{"type":397,"tag":539,"props":1674,"children":1676},{"class":541,"line":1675},40,[1677],{"type":397,"tag":539,"props":1678,"children":1679},{},[1680],{"type":403,"value":1681},"      this.nodeLength++\n",{"type":397,"tag":539,"props":1683,"children":1685},{"class":541,"line":1684},41,[1686],{"type":397,"tag":539,"props":1687,"children":1688},{},[1689],{"type":403,"value":835},{"type":397,"tag":539,"props":1691,"children":1693},{"class":541,"line":1692},42,[1694],{"type":397,"tag":539,"props":1695,"children":1696},{},[1697],{"type":403,"value":1698},"      const deleteNode = this.tailNode.prev\n",{"type":397,"tag":539,"props":1700,"children":1702},{"class":541,"line":1701},43,[1703],{"type":397,"tag":539,"props":1704,"children":1705},{},[1706],{"type":403,"value":1707},"      deleteNode.unLink()\n",{"type":397,"tag":539,"props":1709,"children":1711},{"class":541,"line":1710},44,[1712],{"type":397,"tag":539,"props":1713,"children":1714},{},[1715],{"type":403,"value":1716},"      delete this.nodeMemo[deleteNode.key]\n",{"type":397,"tag":539,"props":1718,"children":1720},{"class":541,"line":1719},45,[1721],{"type":397,"tag":539,"props":1722,"children":1723},{},[1724],{"type":403,"value":853},{"type":397,"tag":539,"props":1726,"children":1728},{"class":541,"line":1727},46,[1729],{"type":397,"tag":539,"props":1730,"children":1731},{},[1732],{"type":403,"value":1733},"    const newNode = new Node({ key，data: { val，weight: 1 } })\n",{"type":397,"tag":539,"props":1735,"children":1737},{"class":541,"line":1736},47,[1738],{"type":397,"tag":539,"props":1739,"children":1740},{},[1741],{"type":403,"value":1742},"    this.nodeMemo[key] = newNode\n",{"type":397,"tag":539,"props":1744,"children":1746},{"class":541,"line":1745},48,[1747],{"type":397,"tag":539,"props":1748,"children":1749},{},[1750],{"type":403,"value":1751},"    newNode.insertAfter(this.tailNode.prev)\n",{"type":397,"tag":539,"props":1753,"children":1755},{"class":541,"line":1754},49,[1756],{"type":397,"tag":539,"props":1757,"children":1758},{},[1759],{"type":403,"value":862},{"type":397,"tag":539,"props":1761,"children":1763},{"class":541,"line":1762},50,[1764],{"type":397,"tag":539,"props":1765,"children":1766},{},[1767],{"type":403,"value":781},{"type":397,"tag":539,"props":1769,"children":1771},{"class":541,"line":1770},51,[1772],{"type":397,"tag":539,"props":1773,"children":1774},{},[1775],{"type":403,"value":1776},"// 打印缓存中全部节点\n",{"type":397,"tag":539,"props":1778,"children":1780},{"class":541,"line":1779},52,[1781],{"type":397,"tag":539,"props":1782,"children":1783},{},[1784],{"type":403,"value":1785},"LFU.prototype.showAllNodes = function () {\n",{"type":397,"tag":539,"props":1787,"children":1789},{"class":541,"line":1788},53,[1790],{"type":397,"tag":539,"props":1791,"children":1792},{},[1793],{"type":403,"value":1794},"  let next = this.headNode.next\n",{"type":397,"tag":539,"props":1796,"children":1798},{"class":541,"line":1797},54,[1799],{"type":397,"tag":539,"props":1800,"children":1801},{},[1802],{"type":403,"value":1803},"  while (next && next.next) {\n",{"type":397,"tag":539,"props":1805,"children":1807},{"class":541,"line":1806},55,[1808],{"type":397,"tag":539,"props":1809,"children":1810},{},[1811],{"type":403,"value":1812},"    console.log(`Node : ${next.key} has data ${next.data.val} and weight ${next.data.weight}`)\n",{"type":397,"tag":539,"props":1814,"children":1816},{"class":541,"line":1815},56,[1817],{"type":397,"tag":539,"props":1818,"children":1819},{},[1820],{"type":403,"value":1821},"    next = next.next\n",{"type":397,"tag":539,"props":1823,"children":1825},{"class":541,"line":1824},57,[1826],{"type":397,"tag":539,"props":1827,"children":1828},{},[1829],{"type":403,"value":862},{"type":397,"tag":539,"props":1831,"children":1833},{"class":541,"line":1832},58,[1834],{"type":397,"tag":539,"props":1835,"children":1836},{},[1837],{"type":403,"value":781},{"type":397,"tag":539,"props":1839,"children":1841},{"class":541,"line":1840},59,[1842],{"type":397,"tag":539,"props":1843,"children":1844},{},[1845],{"type":403,"value":1846},"// 对某一元素进行加权操作\n",{"type":397,"tag":539,"props":1848,"children":1850},{"class":541,"line":1849},60,[1851],{"type":397,"tag":539,"props":1852,"children":1853},{},[1854],{"type":403,"value":1855},"LFU.prototype.addNodeWeight = function (node，w = 1) {\n",{"type":397,"tag":539,"props":1857,"children":1859},{"class":541,"line":1858},61,[1860],{"type":397,"tag":539,"props":1861,"children":1862},{},[1863],{"type":403,"value":1864},"  const handle = node\n",{"type":397,"tag":539,"props":1866,"children":1868},{"class":541,"line":1867},62,[1869],{"type":397,"tag":539,"props":1870,"children":1871},{},[1872],{"type":403,"value":1873},"  let prev = handle.prev\n",{"type":397,"tag":539,"props":1875,"children":1877},{"class":541,"line":1876},63,[1878],{"type":397,"tag":539,"props":1879,"children":1880},{"emptyLinePlaceholder":390},[1881],{"type":403,"value":1286},{"type":397,"tag":539,"props":1883,"children":1885},{"class":541,"line":1884},64,[1886],{"type":397,"tag":539,"props":1887,"children":1888},{},[1889],{"type":403,"value":1890},"  handle.unLink()\n",{"type":397,"tag":539,"props":1892,"children":1894},{"class":541,"line":1893},65,[1895],{"type":397,"tag":539,"props":1896,"children":1897},{},[1898],{"type":403,"value":1899},"  handle.data.weight += w\n",{"type":397,"tag":539,"props":1901,"children":1903},{"class":541,"line":1902},66,[1904],{"type":397,"tag":539,"props":1905,"children":1906},{},[1907],{"type":403,"value":1908},"  while (prev) {\n",{"type":397,"tag":539,"props":1910,"children":1912},{"class":541,"line":1911},67,[1913],{"type":397,"tag":539,"props":1914,"children":1915},{},[1916],{"type":403,"value":1917},"    if (prev.data.weight \u003C= handle.data.weight) {\n",{"type":397,"tag":539,"props":1919,"children":1921},{"class":541,"line":1920},68,[1922],{"type":397,"tag":539,"props":1923,"children":1924},{},[1925],{"type":403,"value":1926},"      prev = prev.prev\n",{"type":397,"tag":539,"props":1928,"children":1930},{"class":541,"line":1929},69,[1931],{"type":397,"tag":539,"props":1932,"children":1933},{},[1934],{"type":403,"value":835},{"type":397,"tag":539,"props":1936,"children":1938},{"class":541,"line":1937},70,[1939],{"type":397,"tag":539,"props":1940,"children":1941},{},[1942],{"type":403,"value":1943},"      handle.insertAfter(prev)\n",{"type":397,"tag":539,"props":1945,"children":1947},{"class":541,"line":1946},71,[1948],{"type":397,"tag":539,"props":1949,"children":1950},{},[1951],{"type":403,"value":1952},"      prev = null\n",{"type":397,"tag":539,"props":1954,"children":1956},{"class":541,"line":1955},72,[1957],{"type":397,"tag":539,"props":1958,"children":1959},{},[1960],{"type":403,"value":853},{"type":397,"tag":539,"props":1962,"children":1964},{"class":541,"line":1963},73,[1965],{"type":397,"tag":539,"props":1966,"children":1967},{},[1968],{"type":403,"value":862},{"type":397,"tag":539,"props":1970,"children":1972},{"class":541,"line":1971},74,[1973],{"type":397,"tag":539,"props":1974,"children":1975},{},[1976],{"type":403,"value":781},{"type":397,"tag":1050,"props":1978,"children":1980},{"id":1979},"另附测试用例",[1981],{"type":403,"value":1979},{"type":397,"tag":529,"props":1983,"children":1985},{"code":1984,"language":741,"meta":391,"className":742,"style":391},"import LFU from '@/utils/suites/teditor/LFU'\n\ndescribe('LFU测试'，() => {\n  const LFU = new LFU(4)\n  it('能够正确维护链表长度'，() => {\n    LFU.set('1'，1)\n    LFU.set('2'，2)\n    LFU.set('3'，3)\n    LFU.set('4'，4)\n    LFU.set('5'，5)\n    expect(LFU.has('4')).to.equal(false)\n  })\n  it('节点的数据应该正确'，() => {\n    expect(LFU.get('1')).to.equal(1)\n    expect(LFU.get('2')).to.equal(2)\n    expect(LFU.get('3')).to.equal(3)\n    expect(LFU.get('5')).to.equal(5)\n    LFU.get('5')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.get('3')\n    LFU.set('5'，6)\n    expect(LFU.get('5')).to.equal(6)\n  })\n  it('节点的权重应该正确'，() => {\n    expect(LFU.getNodeWeight('5')).to.equal(14)\n    expect(LFU.getNodeWeight('3')).to.equal(6)\n  })\n})\n\n",[1986],{"type":397,"tag":458,"props":1987,"children":1988},{"__ignoreMap":391},[1989,1997,2004,2012,2020,2028,2036,2044,2052,2060,2068,2076,2084,2092,2100,2108,2116,2124,2132,2140,2147,2154,2161,2169,2177,2184,2192,2200,2208,2215],{"type":397,"tag":539,"props":1990,"children":1991},{"class":541,"line":542},[1992],{"type":397,"tag":539,"props":1993,"children":1994},{},[1995],{"type":403,"value":1996},"import LFU from '@/utils/suites/teditor/LFU'\n",{"type":397,"tag":539,"props":1998,"children":1999},{"class":541,"line":757},[2000],{"type":397,"tag":539,"props":2001,"children":2002},{"emptyLinePlaceholder":390},[2003],{"type":403,"value":1286},{"type":397,"tag":539,"props":2005,"children":2006},{"class":541,"line":766},[2007],{"type":397,"tag":539,"props":2008,"children":2009},{},[2010],{"type":403,"value":2011},"describe('LFU测试'，() => {\n",{"type":397,"tag":539,"props":2013,"children":2014},{"class":541,"line":775},[2015],{"type":397,"tag":539,"props":2016,"children":2017},{},[2018],{"type":403,"value":2019},"  const LFU = new LFU(4)\n",{"type":397,"tag":539,"props":2021,"children":2022},{"class":541,"line":784},[2023],{"type":397,"tag":539,"props":2024,"children":2025},{},[2026],{"type":403,"value":2027},"  it('能够正确维护链表长度'，() => {\n",{"type":397,"tag":539,"props":2029,"children":2030},{"class":541,"line":793},[2031],{"type":397,"tag":539,"props":2032,"children":2033},{},[2034],{"type":403,"value":2035},"    LFU.set('1'，1)\n",{"type":397,"tag":539,"props":2037,"children":2038},{"class":541,"line":802},[2039],{"type":397,"tag":539,"props":2040,"children":2041},{},[2042],{"type":403,"value":2043},"    LFU.set('2'，2)\n",{"type":397,"tag":539,"props":2045,"children":2046},{"class":541,"line":811},[2047],{"type":397,"tag":539,"props":2048,"children":2049},{},[2050],{"type":403,"value":2051},"    LFU.set('3'，3)\n",{"type":397,"tag":539,"props":2053,"children":2054},{"class":541,"line":820},[2055],{"type":397,"tag":539,"props":2056,"children":2057},{},[2058],{"type":403,"value":2059},"    LFU.set('4'，4)\n",{"type":397,"tag":539,"props":2061,"children":2062},{"class":541,"line":829},[2063],{"type":397,"tag":539,"props":2064,"children":2065},{},[2066],{"type":403,"value":2067},"    LFU.set('5'，5)\n",{"type":397,"tag":539,"props":2069,"children":2070},{"class":541,"line":838},[2071],{"type":397,"tag":539,"props":2072,"children":2073},{},[2074],{"type":403,"value":2075},"    expect(LFU.has('4')).to.equal(false)\n",{"type":397,"tag":539,"props":2077,"children":2078},{"class":541,"line":847},[2079],{"type":397,"tag":539,"props":2080,"children":2081},{},[2082],{"type":403,"value":2083},"  })\n",{"type":397,"tag":539,"props":2085,"children":2086},{"class":541,"line":856},[2087],{"type":397,"tag":539,"props":2088,"children":2089},{},[2090],{"type":403,"value":2091},"  it('节点的数据应该正确'，() => {\n",{"type":397,"tag":539,"props":2093,"children":2094},{"class":541,"line":865},[2095],{"type":397,"tag":539,"props":2096,"children":2097},{},[2098],{"type":403,"value":2099},"    expect(LFU.get('1')).to.equal(1)\n",{"type":397,"tag":539,"props":2101,"children":2102},{"class":541,"line":1191},[2103],{"type":397,"tag":539,"props":2104,"children":2105},{},[2106],{"type":403,"value":2107},"    expect(LFU.get('2')).to.equal(2)\n",{"type":397,"tag":539,"props":2109,"children":2110},{"class":541,"line":1200},[2111],{"type":397,"tag":539,"props":2112,"children":2113},{},[2114],{"type":403,"value":2115},"    expect(LFU.get('3')).to.equal(3)\n",{"type":397,"tag":539,"props":2117,"children":2118},{"class":541,"line":1209},[2119],{"type":397,"tag":539,"props":2120,"children":2121},{},[2122],{"type":403,"value":2123},"    expect(LFU.get('5')).to.equal(5)\n",{"type":397,"tag":539,"props":2125,"children":2126},{"class":541,"line":1218},[2127],{"type":397,"tag":539,"props":2128,"children":2129},{},[2130],{"type":403,"value":2131},"    LFU.get('5')\n",{"type":397,"tag":539,"props":2133,"children":2134},{"class":541,"line":1227},[2135],{"type":397,"tag":539,"props":2136,"children":2137},{},[2138],{"type":403,"value":2139},"    LFU.get('3')\n",{"type":397,"tag":539,"props":2141,"children":2142},{"class":541,"line":1236},[2143],{"type":397,"tag":539,"props":2144,"children":2145},{},[2146],{"type":403,"value":2139},{"type":397,"tag":539,"props":2148,"children":2149},{"class":541,"line":1244},[2150],{"type":397,"tag":539,"props":2151,"children":2152},{},[2153],{"type":403,"value":2139},{"type":397,"tag":539,"props":2155,"children":2156},{"class":541,"line":1253},[2157],{"type":397,"tag":539,"props":2158,"children":2159},{},[2160],{"type":403,"value":2139},{"type":397,"tag":539,"props":2162,"children":2163},{"class":541,"line":1262},[2164],{"type":397,"tag":539,"props":2165,"children":2166},{},[2167],{"type":403,"value":2168},"    LFU.set('5'，6)\n",{"type":397,"tag":539,"props":2170,"children":2171},{"class":541,"line":1271},[2172],{"type":397,"tag":539,"props":2173,"children":2174},{},[2175],{"type":403,"value":2176},"    expect(LFU.get('5')).to.equal(6)\n",{"type":397,"tag":539,"props":2178,"children":2179},{"class":541,"line":1280},[2180],{"type":397,"tag":539,"props":2181,"children":2182},{},[2183],{"type":403,"value":2083},{"type":397,"tag":539,"props":2185,"children":2186},{"class":541,"line":1289},[2187],{"type":397,"tag":539,"props":2188,"children":2189},{},[2190],{"type":403,"value":2191},"  it('节点的权重应该正确'，() => {\n",{"type":397,"tag":539,"props":2193,"children":2194},{"class":541,"line":1298},[2195],{"type":397,"tag":539,"props":2196,"children":2197},{},[2198],{"type":403,"value":2199},"    expect(LFU.getNodeWeight('5')).to.equal(14)\n",{"type":397,"tag":539,"props":2201,"children":2202},{"class":541,"line":1307},[2203],{"type":397,"tag":539,"props":2204,"children":2205},{},[2206],{"type":403,"value":2207},"    expect(LFU.getNodeWeight('3')).to.equal(6)\n",{"type":397,"tag":539,"props":2209,"children":2210},{"class":541,"line":1316},[2211],{"type":397,"tag":539,"props":2212,"children":2213},{},[2214],{"type":403,"value":2083},{"type":397,"tag":539,"props":2216,"children":2217},{"class":541,"line":1324},[2218],{"type":397,"tag":539,"props":2219,"children":2220},{},[2221],{"type":403,"value":2222},"})\n",{"type":397,"tag":398,"props":2224,"children":2226},{"id":2225},"拆分渲染内容",[2227],{"type":403,"value":2225},{"type":397,"tag":406,"props":2229,"children":2230},{},[2231],{"type":403,"value":2232},"拆分渲染内容和通过节流解析函数想要达到的目的类似——通过限制浏览器的重绘回流次数以减轻硬件负担。",{"type":397,"tag":406,"props":2234,"children":2235},{},[2236],{"type":403,"value":2237},"我的解析函数会将传入的 MD 文本解析为 HTML 片段，然后通过 v-html 将片段放到浏览器右侧窗口进行渲染，虽然我们在解析函数中做了缓存，使得解析速度增加，但是每一次的解析都会使浏览器重新绘制整一个右侧窗口，这里有一个优化点。",{"type":397,"tag":406,"props":2239,"children":2240},{},[2241],{"type":403,"value":2242},"拆分渲染内容就是要解决这样一个问题。我们把右侧窗口一整块 v-html 区域以 MD 块状元素拆分为多个小的 v-html 区域，当编辑器某一行的文本数据有变动时，只通知右侧窗口更新对应区域的内容，这样一来，浏览器性能可以得到进一步提升。",{"type":397,"tag":398,"props":2244,"children":2246},{"id":2245},"总结",[2247],{"type":403,"value":2245},{"type":397,"tag":406,"props":2249,"children":2250},{},[2251],{"type":403,"value":2252},"前端做页面性能优化时，除了网络层面的优化，剩下很大一块内容都落在 JS 和浏览器的头上，考虑 JS，主要是如何减少重复计算，至于浏览器，则主要会想到重绘回流这块。依靠这两大山头，相信你也能写出运行速度飞快的代码！",{"type":397,"tag":406,"props":2254,"children":2255},{},[2256],{"type":403,"value":2257},"本文只对代码做了概括性说明，具体的代码细节还需要待我使劲整理再发一篇新文章，比如\u003C动手撸一个简单的 LFU 缓存类>之类的 😀，敬请期待~",{"type":397,"tag":398,"props":2259,"children":2261},{"id":2260},"更多",[2262],{"type":403,"value":2260},{"type":397,"tag":2264,"props":2265,"children":2266},"ul",{},[2267,2277,2287],{"type":397,"tag":508,"props":2268,"children":2269},{},[2270],{"type":397,"tag":437,"props":2271,"children":2274},{"href":2272,"rel":2273},"https://juejin.im/post/5a9923e9518825558251c96a",[441],[2275],{"type":403,"value":2276},"浏览器的回流与重绘 (Reflow & Repaint)",{"type":397,"tag":508,"props":2278,"children":2279},{},[2280],{"type":397,"tag":437,"props":2281,"children":2284},{"href":2282,"rel":2283},"https://www.jianshu.com/p/c8aeb3eee6bc",[441],[2285],{"type":403,"value":2286},"Redis 的缓存淘汰策略 LFU 与 LFU",{"type":397,"tag":508,"props":2288,"children":2289},{},[2290],{"type":397,"tag":437,"props":2291,"children":2294},{"href":2292,"rel":2293},"https://blog.csdn.net/elricboa/article/details/78847305",[441],[2295],{"type":403,"value":2296},"LFU 算法四种实现方式介绍",{"type":397,"tag":2298,"props":2299,"children":2300},"style",{},[2301],{"type":403,"value":2302},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"title":391,"searchDepth":757,"depth":757,"links":2304},[2305,2306,2307,2308,2309,2313,2314,2315],{"id":400,"depth":757,"text":404},{"id":449,"depth":757,"text":449},{"id":490,"depth":757,"text":490},{"id":660,"depth":757,"text":660},{"id":688,"depth":757,"text":688,"children":2310},[2311,2312],{"id":730,"depth":766,"text":730},{"id":1004,"depth":766,"text":1007},{"id":2225,"depth":757,"text":2225},{"id":2245,"depth":757,"text":2245},{"id":2260,"depth":757,"text":2260},"content:_archieved:2019-06:teditor.md","content","_archieved/2019-06/teditor.md","md",[2321,2324],{"_path":2322,"title":2323,"description":391},"/_archieved/2019-06/messy-in-two-years","💖 聊聊此次离职，毕业，及其它杂乱的事情",{"_path":2325,"title":2326,"description":2327},"/_archieved/2019-07/chrome-image-lazyload","听说你还在手写懒加载?","过去, 我们对含有大量图片的网站进行优化无外乎要依靠 JS 逻辑或是相关插件来完成, 比如懒加载技术. 而现在(至少在不久的将来), Chrome 75 版本将增加原生懒加载功能.",1710257720115]